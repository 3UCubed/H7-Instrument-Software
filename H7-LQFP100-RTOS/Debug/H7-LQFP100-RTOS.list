
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016830  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08016ad0  08016ad0  00026ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016ee4  08016ee4  00026ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016eec  08016eec  00026eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016ef0  08016ef0  00026ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08016ef4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000590c  24000120  08016ffc  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a2c  08016ffc  00035a2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033459  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005631  00000000  00000000  0006358f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026e8  00000000  00000000  00068bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000024e0  00000000  00000000  0006b2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007dcb  00000000  00000000  0006d788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031615  00000000  00000000  00075553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001948eb  00000000  00000000  000a6b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023b453  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000aebc  00000000  00000000  0023b4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016ab8 	.word	0x08016ab8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016ab8 	.word	0x08016ab8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f012 fa44 	bl	8012a88 <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f012 fa39 	bl	8012a88 <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f012 fa2e 	bl	8012a88 <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f015 fe92 	bl	8016358 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	24000508 	.word	0x24000508
 8000640:	24000be8 	.word	0x24000be8
 8000644:	24000554 	.word	0x24000554
 8000648:	240005a0 	.word	0x240005a0
 800064c:	08016b30 	.word	0x08016b30

08000650 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	49f2      	ldr	r1, [pc, #968]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 800065c:	48f2      	ldr	r0, [pc, #968]	; (8000a28 <HAL_UART_RxCpltCallback+0x3d8>)
 800065e:	f00f fbad 	bl	800fdbc <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4bf0      	ldr	r3, [pc, #960]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2be0      	cmp	r3, #224	; 0xe0
 800066c:	f200 83e8 	bhi.w	8000e40 <HAL_UART_RxCpltCallback+0x7f0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000a11 	.word	0x08000a11
 800067c:	08000a4d 	.word	0x08000a4d
 8000680:	08000ad3 	.word	0x08000ad3
 8000684:	08000afd 	.word	0x08000afd
 8000688:	08000b25 	.word	0x08000b25
 800068c:	08000b4f 	.word	0x08000b4f
 8000690:	08000b7b 	.word	0x08000b7b
 8000694:	08000ba7 	.word	0x08000ba7
 8000698:	08000bd1 	.word	0x08000bd1
 800069c:	08000bfd 	.word	0x08000bfd
 80006a0:	08000c29 	.word	0x08000c29
 80006a4:	08000c5b 	.word	0x08000c5b
 80006a8:	08000c8d 	.word	0x08000c8d
 80006ac:	08000cdf 	.word	0x08000cdf
 80006b0:	08000de5 	.word	0x08000de5
 80006b4:	08000e15 	.word	0x08000e15
 80006b8:	080009fd 	.word	0x080009fd
 80006bc:	08000a39 	.word	0x08000a39
 80006c0:	08000abd 	.word	0x08000abd
 80006c4:	08000ae9 	.word	0x08000ae9
 80006c8:	08000b11 	.word	0x08000b11
 80006cc:	08000b39 	.word	0x08000b39
 80006d0:	08000b65 	.word	0x08000b65
 80006d4:	08000b91 	.word	0x08000b91
 80006d8:	08000bbd 	.word	0x08000bbd
 80006dc:	08000be5 	.word	0x08000be5
 80006e0:	08000c0d 	.word	0x08000c0d
 80006e4:	08000c3f 	.word	0x08000c3f
 80006e8:	08000c71 	.word	0x08000c71
 80006ec:	08000ca3 	.word	0x08000ca3
 80006f0:	08000dbd 	.word	0x08000dbd
 80006f4:	08000e0d 	.word	0x08000e0d
 80006f8:	08000e41 	.word	0x08000e41
 80006fc:	08000e41 	.word	0x08000e41
 8000700:	08000e41 	.word	0x08000e41
 8000704:	08000e41 	.word	0x08000e41
 8000708:	08000e41 	.word	0x08000e41
 800070c:	08000e41 	.word	0x08000e41
 8000710:	08000e41 	.word	0x08000e41
 8000714:	08000e41 	.word	0x08000e41
 8000718:	08000e41 	.word	0x08000e41
 800071c:	08000e41 	.word	0x08000e41
 8000720:	08000e41 	.word	0x08000e41
 8000724:	08000e41 	.word	0x08000e41
 8000728:	08000e41 	.word	0x08000e41
 800072c:	08000e41 	.word	0x08000e41
 8000730:	08000e41 	.word	0x08000e41
 8000734:	08000e41 	.word	0x08000e41
 8000738:	08000e41 	.word	0x08000e41
 800073c:	08000e41 	.word	0x08000e41
 8000740:	08000e41 	.word	0x08000e41
 8000744:	08000e41 	.word	0x08000e41
 8000748:	08000e41 	.word	0x08000e41
 800074c:	08000e41 	.word	0x08000e41
 8000750:	08000e41 	.word	0x08000e41
 8000754:	08000e41 	.word	0x08000e41
 8000758:	08000e41 	.word	0x08000e41
 800075c:	08000e41 	.word	0x08000e41
 8000760:	08000e41 	.word	0x08000e41
 8000764:	08000e41 	.word	0x08000e41
 8000768:	08000e41 	.word	0x08000e41
 800076c:	08000e41 	.word	0x08000e41
 8000770:	08000e41 	.word	0x08000e41
 8000774:	08000e41 	.word	0x08000e41
 8000778:	08000e41 	.word	0x08000e41
 800077c:	08000e41 	.word	0x08000e41
 8000780:	08000e41 	.word	0x08000e41
 8000784:	08000e41 	.word	0x08000e41
 8000788:	08000e41 	.word	0x08000e41
 800078c:	08000e41 	.word	0x08000e41
 8000790:	08000e41 	.word	0x08000e41
 8000794:	08000e41 	.word	0x08000e41
 8000798:	08000e41 	.word	0x08000e41
 800079c:	08000e41 	.word	0x08000e41
 80007a0:	08000e41 	.word	0x08000e41
 80007a4:	08000e41 	.word	0x08000e41
 80007a8:	08000e41 	.word	0x08000e41
 80007ac:	08000e41 	.word	0x08000e41
 80007b0:	08000e41 	.word	0x08000e41
 80007b4:	08000e41 	.word	0x08000e41
 80007b8:	08000e41 	.word	0x08000e41
 80007bc:	08000e41 	.word	0x08000e41
 80007c0:	08000e41 	.word	0x08000e41
 80007c4:	08000e41 	.word	0x08000e41
 80007c8:	08000e41 	.word	0x08000e41
 80007cc:	08000e41 	.word	0x08000e41
 80007d0:	08000e41 	.word	0x08000e41
 80007d4:	08000e41 	.word	0x08000e41
 80007d8:	08000e41 	.word	0x08000e41
 80007dc:	08000e41 	.word	0x08000e41
 80007e0:	08000e41 	.word	0x08000e41
 80007e4:	08000e41 	.word	0x08000e41
 80007e8:	08000e41 	.word	0x08000e41
 80007ec:	08000e41 	.word	0x08000e41
 80007f0:	08000e41 	.word	0x08000e41
 80007f4:	08000e41 	.word	0x08000e41
 80007f8:	08000e41 	.word	0x08000e41
 80007fc:	08000e41 	.word	0x08000e41
 8000800:	08000e41 	.word	0x08000e41
 8000804:	08000e41 	.word	0x08000e41
 8000808:	08000e41 	.word	0x08000e41
 800080c:	08000e41 	.word	0x08000e41
 8000810:	08000e41 	.word	0x08000e41
 8000814:	08000e41 	.word	0x08000e41
 8000818:	08000e41 	.word	0x08000e41
 800081c:	08000e41 	.word	0x08000e41
 8000820:	08000e41 	.word	0x08000e41
 8000824:	08000e41 	.word	0x08000e41
 8000828:	08000e41 	.word	0x08000e41
 800082c:	08000e41 	.word	0x08000e41
 8000830:	08000e41 	.word	0x08000e41
 8000834:	08000e41 	.word	0x08000e41
 8000838:	08000e41 	.word	0x08000e41
 800083c:	08000e41 	.word	0x08000e41
 8000840:	08000e41 	.word	0x08000e41
 8000844:	08000e41 	.word	0x08000e41
 8000848:	08000e41 	.word	0x08000e41
 800084c:	08000e41 	.word	0x08000e41
 8000850:	08000e41 	.word	0x08000e41
 8000854:	08000e41 	.word	0x08000e41
 8000858:	08000e41 	.word	0x08000e41
 800085c:	08000e41 	.word	0x08000e41
 8000860:	08000e41 	.word	0x08000e41
 8000864:	08000e41 	.word	0x08000e41
 8000868:	08000e41 	.word	0x08000e41
 800086c:	08000e41 	.word	0x08000e41
 8000870:	08000e41 	.word	0x08000e41
 8000874:	08000e41 	.word	0x08000e41
 8000878:	08000e41 	.word	0x08000e41
 800087c:	08000e41 	.word	0x08000e41
 8000880:	08000e41 	.word	0x08000e41
 8000884:	08000e41 	.word	0x08000e41
 8000888:	08000e41 	.word	0x08000e41
 800088c:	08000e41 	.word	0x08000e41
 8000890:	08000e41 	.word	0x08000e41
 8000894:	08000e41 	.word	0x08000e41
 8000898:	08000e41 	.word	0x08000e41
 800089c:	08000e41 	.word	0x08000e41
 80008a0:	08000e41 	.word	0x08000e41
 80008a4:	08000e41 	.word	0x08000e41
 80008a8:	08000e41 	.word	0x08000e41
 80008ac:	08000e41 	.word	0x08000e41
 80008b0:	08000e41 	.word	0x08000e41
 80008b4:	08000e41 	.word	0x08000e41
 80008b8:	08000e41 	.word	0x08000e41
 80008bc:	08000e41 	.word	0x08000e41
 80008c0:	08000e41 	.word	0x08000e41
 80008c4:	08000e41 	.word	0x08000e41
 80008c8:	08000e41 	.word	0x08000e41
 80008cc:	08000e41 	.word	0x08000e41
 80008d0:	08000e41 	.word	0x08000e41
 80008d4:	08000e41 	.word	0x08000e41
 80008d8:	08000e41 	.word	0x08000e41
 80008dc:	08000e41 	.word	0x08000e41
 80008e0:	08000e41 	.word	0x08000e41
 80008e4:	08000e41 	.word	0x08000e41
 80008e8:	08000e41 	.word	0x08000e41
 80008ec:	08000e41 	.word	0x08000e41
 80008f0:	08000e41 	.word	0x08000e41
 80008f4:	08000e41 	.word	0x08000e41
 80008f8:	08000e41 	.word	0x08000e41
 80008fc:	08000e41 	.word	0x08000e41
 8000900:	08000e41 	.word	0x08000e41
 8000904:	08000e41 	.word	0x08000e41
 8000908:	08000e41 	.word	0x08000e41
 800090c:	08000e41 	.word	0x08000e41
 8000910:	08000e41 	.word	0x08000e41
 8000914:	08000e41 	.word	0x08000e41
 8000918:	08000e41 	.word	0x08000e41
 800091c:	08000e41 	.word	0x08000e41
 8000920:	08000e41 	.word	0x08000e41
 8000924:	08000e41 	.word	0x08000e41
 8000928:	08000e41 	.word	0x08000e41
 800092c:	08000e41 	.word	0x08000e41
 8000930:	08000e41 	.word	0x08000e41
 8000934:	08000e41 	.word	0x08000e41
 8000938:	08000e41 	.word	0x08000e41
 800093c:	08000e41 	.word	0x08000e41
 8000940:	08000e41 	.word	0x08000e41
 8000944:	08000e41 	.word	0x08000e41
 8000948:	08000e41 	.word	0x08000e41
 800094c:	08000e41 	.word	0x08000e41
 8000950:	08000e41 	.word	0x08000e41
 8000954:	08000e41 	.word	0x08000e41
 8000958:	08000e41 	.word	0x08000e41
 800095c:	08000e41 	.word	0x08000e41
 8000960:	08000e41 	.word	0x08000e41
 8000964:	08000e41 	.word	0x08000e41
 8000968:	08000e41 	.word	0x08000e41
 800096c:	08000e41 	.word	0x08000e41
 8000970:	08000e41 	.word	0x08000e41
 8000974:	08000e41 	.word	0x08000e41
 8000978:	08000e41 	.word	0x08000e41
 800097c:	08000e41 	.word	0x08000e41
 8000980:	08000e41 	.word	0x08000e41
 8000984:	08000e41 	.word	0x08000e41
 8000988:	08000e41 	.word	0x08000e41
 800098c:	08000e41 	.word	0x08000e41
 8000990:	08000e41 	.word	0x08000e41
 8000994:	08000e41 	.word	0x08000e41
 8000998:	08000e41 	.word	0x08000e41
 800099c:	08000e41 	.word	0x08000e41
 80009a0:	08000e41 	.word	0x08000e41
 80009a4:	08000e41 	.word	0x08000e41
 80009a8:	08000e41 	.word	0x08000e41
 80009ac:	08000e41 	.word	0x08000e41
 80009b0:	08000e41 	.word	0x08000e41
 80009b4:	08000e41 	.word	0x08000e41
 80009b8:	08000e2f 	.word	0x08000e2f
 80009bc:	08000e41 	.word	0x08000e41
 80009c0:	08000e41 	.word	0x08000e41
 80009c4:	08000e41 	.word	0x08000e41
 80009c8:	08000e41 	.word	0x08000e41
 80009cc:	08000e41 	.word	0x08000e41
 80009d0:	08000e41 	.word	0x08000e41
 80009d4:	08000e41 	.word	0x08000e41
 80009d8:	08000e41 	.word	0x08000e41
 80009dc:	08000e41 	.word	0x08000e41
 80009e0:	08000e41 	.word	0x08000e41
 80009e4:	08000e41 	.word	0x08000e41
 80009e8:	08000e41 	.word	0x08000e41
 80009ec:	08000e41 	.word	0x08000e41
 80009f0:	08000e41 	.word	0x08000e41
 80009f4:	08000e41 	.word	0x08000e41
 80009f8:	08000e1d 	.word	0x08000e1d
	case 0x10: {
		printf("SDN1 ON\n");
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <HAL_UART_RxCpltCallback+0x3dc>)
 80009fe:	f015 fcab 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a04:	2104      	movs	r1, #4
 8000a06:	2201      	movs	r2, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f008 f91f 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000a0e:	e222      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a12:	f015 fca1 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a18:	2104      	movs	r1, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f008 f915 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000a22:	e218      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
 8000a24:	24000bec 	.word	0x24000bec
 8000a28:	240005ec 	.word	0x240005ec
 8000a2c:	08016b48 	.word	0x08016b48
 8000a30:	58020400 	.word	0x58020400
 8000a34:	08016b50 	.word	0x08016b50
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a38:	48b8      	ldr	r0, [pc, #736]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a3a:	f015 fc8d 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a3e:	4bb8      	ldr	r3, [pc, #736]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	2201      	movs	r2, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f008 f901 	bl	8008c4c <HAL_GPIO_WritePin>

		break;
 8000a4a:	e204      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a4c:	48b5      	ldr	r0, [pc, #724]	; (8000d24 <HAL_UART_RxCpltCallback+0x6d4>)
 8000a4e:	f015 fc83 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a52:	4bb3      	ldr	r3, [pc, #716]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a54:	2120      	movs	r1, #32
 8000a56:	2200      	movs	r2, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f008 f8f7 	bl	8008c4c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a5e:	4bb0      	ldr	r3, [pc, #704]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	2200      	movs	r2, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f008 f8f1 	bl	8008c4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a6a:	4baf      	ldr	r3, [pc, #700]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a70:	2200      	movs	r2, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f008 f8ea 	bl	8008c4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a78:	4bab      	ldr	r3, [pc, #684]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 f8e3 	bl	8008c4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000a86:	4ba8      	ldr	r3, [pc, #672]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f008 f8dc 	bl	8008c4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000a94:	4ba4      	ldr	r3, [pc, #656]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f008 f8d6 	bl	8008c4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000aa0:	4ba1      	ldr	r3, [pc, #644]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f008 f8d0 	bl	8008c4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aac:	4b9e      	ldr	r3, [pc, #632]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f008 f8c9 	bl	8008c4c <HAL_GPIO_WritePin>

		break;
 8000aba:	e1cc      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000abc:	489b      	ldr	r0, [pc, #620]	; (8000d2c <HAL_UART_RxCpltCallback+0x6dc>)
 8000abe:	f015 fc4b 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ac2:	4b99      	ldr	r3, [pc, #612]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f008 f8be 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000ad0:	e1c1      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000ad2:	4897      	ldr	r0, [pc, #604]	; (8000d30 <HAL_UART_RxCpltCallback+0x6e0>)
 8000ad4:	f015 fc40 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ad8:	4b93      	ldr	r3, [pc, #588]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f008 f8b3 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000ae6:	e1b6      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000ae8:	4892      	ldr	r0, [pc, #584]	; (8000d34 <HAL_UART_RxCpltCallback+0x6e4>)
 8000aea:	f015 fc35 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000aee:	4b8e      	ldr	r3, [pc, #568]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	2201      	movs	r2, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f008 f8a9 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000afa:	e1ac      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000afc:	488e      	ldr	r0, [pc, #568]	; (8000d38 <HAL_UART_RxCpltCallback+0x6e8>)
 8000afe:	f015 fc2b 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b02:	4b89      	ldr	r3, [pc, #548]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	2200      	movs	r2, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f008 f89f 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000b0e:	e1a2      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b10:	488a      	ldr	r0, [pc, #552]	; (8000d3c <HAL_UART_RxCpltCallback+0x6ec>)
 8000b12:	f015 fc21 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b16:	4b84      	ldr	r3, [pc, #528]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f008 f895 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000b22:	e198      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b24:	4886      	ldr	r0, [pc, #536]	; (8000d40 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b26:	f015 fc17 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b2a:	4b7f      	ldr	r3, [pc, #508]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f008 f88b 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000b36:	e18e      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b38:	4882      	ldr	r0, [pc, #520]	; (8000d44 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b3a:	f015 fc0d 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b3e:	4b7a      	ldr	r3, [pc, #488]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	2201      	movs	r2, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f008 f880 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000b4c:	e183      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b4e:	487e      	ldr	r0, [pc, #504]	; (8000d48 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b50:	f015 fc02 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b54:	4b74      	ldr	r3, [pc, #464]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f008 f875 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000b62:	e178      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b64:	4879      	ldr	r0, [pc, #484]	; (8000d4c <HAL_UART_RxCpltCallback+0x6fc>)
 8000b66:	f015 fbf7 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b6a:	4b6f      	ldr	r3, [pc, #444]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	2201      	movs	r2, #1
 8000b72:	4618      	mov	r0, r3
 8000b74:	f008 f86a 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000b78:	e16d      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b7a:	4875      	ldr	r0, [pc, #468]	; (8000d50 <HAL_UART_RxCpltCallback+0x700>)
 8000b7c:	f015 fbec 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b80:	4b69      	ldr	r3, [pc, #420]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	2200      	movs	r2, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f008 f85f 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000b8e:	e162      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000b90:	4870      	ldr	r0, [pc, #448]	; (8000d54 <HAL_UART_RxCpltCallback+0x704>)
 8000b92:	f015 fbe1 	bl	8016358 <puts>
	    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b96:	4b64      	ldr	r3, [pc, #400]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f008 f854 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000ba4:	e157      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000ba6:	486c      	ldr	r0, [pc, #432]	; (8000d58 <HAL_UART_RxCpltCallback+0x708>)
 8000ba8:	f015 fbd6 	bl	8016358 <puts>
	    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bac:	4b5e      	ldr	r3, [pc, #376]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f008 f849 	bl	8008c4c <HAL_GPIO_WritePin>

		break;
 8000bba:	e14c      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bbc:	4867      	ldr	r0, [pc, #412]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000bbe:	f015 fbcb 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bc2:	4b57      	ldr	r3, [pc, #348]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f008 f83f 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000bce:	e142      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bd0:	4863      	ldr	r0, [pc, #396]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000bd2:	f015 fbc1 	bl	8016358 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bd6:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f008 f835 	bl	8008c4c <HAL_GPIO_WritePin>
		break;
 8000be2:	e138      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000be4:	485f      	ldr	r0, [pc, #380]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000be6:	f015 fbb7 	bl	8016358 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000bea:	2300      	movs	r3, #0
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2320      	movs	r3, #32
 8000bf0:	4a5d      	ldr	r2, [pc, #372]	; (8000d68 <HAL_UART_RxCpltCallback+0x718>)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	485d      	ldr	r0, [pc, #372]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000bf6:	f004 fc99 	bl	800552c <HAL_DAC_Start_DMA>
		break;
 8000bfa:	e12c      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000bfc:	485c      	ldr	r0, [pc, #368]	; (8000d70 <HAL_UART_RxCpltCallback+0x720>)
 8000bfe:	f015 fbab 	bl	8016358 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c02:	2100      	movs	r1, #0
 8000c04:	4859      	ldr	r0, [pc, #356]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000c06:	f004 fd51 	bl	80056ac <HAL_DAC_Stop_DMA>
		break;
 8000c0a:	e124      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c0c:	4859      	ldr	r0, [pc, #356]	; (8000d74 <HAL_UART_RxCpltCallback+0x724>)
 8000c0e:	f015 fba3 	bl	8016358 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c12:	210c      	movs	r1, #12
 8000c14:	4858      	ldr	r0, [pc, #352]	; (8000d78 <HAL_UART_RxCpltCallback+0x728>)
 8000c16:	f00d fbf1 	bl	800e3fc <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c1a:	4b58      	ldr	r3, [pc, #352]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c20:	4b57      	ldr	r3, [pc, #348]	; (8000d80 <HAL_UART_RxCpltCallback+0x730>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	801a      	strh	r2, [r3, #0]
		break;
 8000c26:	e116      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c28:	4856      	ldr	r0, [pc, #344]	; (8000d84 <HAL_UART_RxCpltCallback+0x734>)
 8000c2a:	f015 fb95 	bl	8016358 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c2e:	210c      	movs	r1, #12
 8000c30:	4851      	ldr	r0, [pc, #324]	; (8000d78 <HAL_UART_RxCpltCallback+0x728>)
 8000c32:	f00d fd3d 	bl	800e6b0 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c36:	4b51      	ldr	r3, [pc, #324]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
		break;
 8000c3c:	e10b      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c3e:	4852      	ldr	r0, [pc, #328]	; (8000d88 <HAL_UART_RxCpltCallback+0x738>)
 8000c40:	f015 fb8a 	bl	8016358 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c44:	2100      	movs	r1, #0
 8000c46:	4851      	ldr	r0, [pc, #324]	; (8000d8c <HAL_UART_RxCpltCallback+0x73c>)
 8000c48:	f00d fbd8 	bl	800e3fc <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c4c:	4b50      	ldr	r3, [pc, #320]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c52:	4b50      	ldr	r3, [pc, #320]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	801a      	strh	r2, [r3, #0]
		break;
 8000c58:	e0fd      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c5a:	484f      	ldr	r0, [pc, #316]	; (8000d98 <HAL_UART_RxCpltCallback+0x748>)
 8000c5c:	f015 fb7c 	bl	8016358 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c60:	2100      	movs	r1, #0
 8000c62:	484a      	ldr	r0, [pc, #296]	; (8000d8c <HAL_UART_RxCpltCallback+0x73c>)
 8000c64:	f00d fd24 	bl	800e6b0 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000c68:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
		break;
 8000c6e:	e0f2      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c70:	484a      	ldr	r0, [pc, #296]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000c72:	f015 fb71 	bl	8016358 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c76:	2100      	movs	r1, #0
 8000c78:	4849      	ldr	r0, [pc, #292]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000c7a:	f00d fbbf 	bl	800e3fc <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000c7e:	4b49      	ldr	r3, [pc, #292]	; (8000da4 <HAL_UART_RxCpltCallback+0x754>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000c84:	4b48      	ldr	r3, [pc, #288]	; (8000da8 <HAL_UART_RxCpltCallback+0x758>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	801a      	strh	r2, [r3, #0]
		break;
 8000c8a:	e0e4      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000c8c:	4847      	ldr	r0, [pc, #284]	; (8000dac <HAL_UART_RxCpltCallback+0x75c>)
 8000c8e:	f015 fb63 	bl	8016358 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000c92:	2100      	movs	r1, #0
 8000c94:	4842      	ldr	r0, [pc, #264]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000c96:	f00d fd0b 	bl	800e6b0 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <HAL_UART_RxCpltCallback+0x754>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
		break;
 8000ca0:	e0d9      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000ca2:	4843      	ldr	r0, [pc, #268]	; (8000db0 <HAL_UART_RxCpltCallback+0x760>)
 8000ca4:	f015 fb58 	bl	8016358 <puts>
		if (step < 17) {
 8000ca8:	4b42      	ldr	r3, [pc, #264]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b10      	cmp	r3, #16
 8000cae:	f200 80cb 	bhi.w	8000e48 <HAL_UART_RxCpltCallback+0x7f8>
			step+=2;
 8000cb2:	4b40      	ldr	r3, [pc, #256]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b3e      	ldr	r3, [pc, #248]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000cbc:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000cbe:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <HAL_UART_RxCpltCallback+0x718>)
 8000cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4827      	ldr	r0, [pc, #156]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000cd0:	f004 fd8f 	bl	80057f2 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4825      	ldr	r0, [pc, #148]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000cd8:	f004 fbd0 	bl	800547c <HAL_DAC_Start>
		}
		break;
 8000cdc:	e0b4      	b.n	8000e48 <HAL_UART_RxCpltCallback+0x7f8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000cde:	4836      	ldr	r0, [pc, #216]	; (8000db8 <HAL_UART_RxCpltCallback+0x768>)
 8000ce0:	f015 fb3a 	bl	8016358 <puts>
		if (step > 3) {
 8000ce4:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	f240 80af 	bls.w	8000e4c <HAL_UART_RxCpltCallback+0x7fc>
			step-=2;
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000cf8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_UART_RxCpltCallback+0x718>)
 8000d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4818      	ldr	r0, [pc, #96]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000d0c:	f004 fd71 	bl	80057f2 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d10:	2100      	movs	r1, #0
 8000d12:	4816      	ldr	r0, [pc, #88]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000d14:	f004 fbb2 	bl	800547c <HAL_DAC_Start>
		}
		break;
 8000d18:	e098      	b.n	8000e4c <HAL_UART_RxCpltCallback+0x7fc>
 8000d1a:	bf00      	nop
 8000d1c:	08016b5c 	.word	0x08016b5c
 8000d20:	58020400 	.word	0x58020400
 8000d24:	08016b68 	.word	0x08016b68
 8000d28:	58020800 	.word	0x58020800
 8000d2c:	08016b74 	.word	0x08016b74
 8000d30:	08016b80 	.word	0x08016b80
 8000d34:	08016b90 	.word	0x08016b90
 8000d38:	08016b9c 	.word	0x08016b9c
 8000d3c:	08016ba8 	.word	0x08016ba8
 8000d40:	08016bb4 	.word	0x08016bb4
 8000d44:	08016bc4 	.word	0x08016bc4
 8000d48:	08016bd0 	.word	0x08016bd0
 8000d4c:	08016bdc 	.word	0x08016bdc
 8000d50:	08016be8 	.word	0x08016be8
 8000d54:	08016bf4 	.word	0x08016bf4
 8000d58:	08016c04 	.word	0x08016c04
 8000d5c:	08016c14 	.word	0x08016c14
 8000d60:	08016c20 	.word	0x08016c20
 8000d64:	08016c30 	.word	0x08016c30
 8000d68:	24000010 	.word	0x24000010
 8000d6c:	240002f4 	.word	0x240002f4
 8000d70:	08016c40 	.word	0x08016c40
 8000d74:	08016c50 	.word	0x08016c50
 8000d78:	24000554 	.word	0x24000554
 8000d7c:	24000be3 	.word	0x24000be3
 8000d80:	24000bde 	.word	0x24000bde
 8000d84:	08016c58 	.word	0x08016c58
 8000d88:	08016c64 	.word	0x08016c64
 8000d8c:	24000508 	.word	0x24000508
 8000d90:	24000be2 	.word	0x24000be2
 8000d94:	24000bdc 	.word	0x24000bdc
 8000d98:	08016c6c 	.word	0x08016c6c
 8000d9c:	08016c74 	.word	0x08016c74
 8000da0:	240005a0 	.word	0x240005a0
 8000da4:	24000be4 	.word	0x24000be4
 8000da8:	24000be0 	.word	0x24000be0
 8000dac:	08016c7c 	.word	0x08016c7c
 8000db0:	08016c84 	.word	0x08016c84
 8000db4:	2400000c 	.word	0x2400000c
 8000db8:	08016c8c 	.word	0x08016c8c
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000dbc:	4828      	ldr	r0, [pc, #160]	; (8000e60 <HAL_UART_RxCpltCallback+0x810>)
 8000dbe:	f015 facb 	bl	8016358 <puts>
		if (cadence <= 50000){
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d840      	bhi.n	8000e50 <HAL_UART_RxCpltCallback+0x800>
			cadence *= 2;
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000dd6:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000dd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000de2:	e035      	b.n	8000e50 <HAL_UART_RxCpltCallback+0x800>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000de4:	4820      	ldr	r0, [pc, #128]	; (8000e68 <HAL_UART_RxCpltCallback+0x818>)
 8000de6:	f015 fab7 	bl	8016358 <puts>
		if (cadence >= 6250){
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f641 0269 	movw	r2, #6249	; 0x1869
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d92e      	bls.n	8000e54 <HAL_UART_RxCpltCallback+0x804>
			cadence /= 2;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	085b      	lsrs	r3, r3, #1
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000dfe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e0a:	e023      	b.n	8000e54 <HAL_UART_RxCpltCallback+0x804>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e0c:	4817      	ldr	r0, [pc, #92]	; (8000e6c <HAL_UART_RxCpltCallback+0x81c>)
 8000e0e:	f015 faa3 	bl	8016358 <puts>
		// TODO: Exit stop mode
		break;
 8000e12:	e020      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e14:	4816      	ldr	r0, [pc, #88]	; (8000e70 <HAL_UART_RxCpltCallback+0x820>)
 8000e16:	f015 fa9f 	bl	8016358 <puts>
		// TODO: Enter stop mode
		break;
 8000e1a:	e01c      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e1c:	4815      	ldr	r0, [pc, #84]	; (8000e74 <HAL_UART_RxCpltCallback+0x824>)
 8000e1e:	f015 fa9b 	bl	8016358 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_UART_RxCpltCallback+0x828>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f013 fb04 	bl	8014434 <xTaskResumeFromISR>
		break;
 8000e2c:	e013      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e2e:	4813      	ldr	r0, [pc, #76]	; (8000e7c <HAL_UART_RxCpltCallback+0x82c>)
 8000e30:	f015 fa92 	bl	8016358 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_UART_RxCpltCallback+0x830>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f013 fafb 	bl	8014434 <xTaskResumeFromISR>
		break;
 8000e3e:	e00a      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	default:{
		printf("Unknown Command\n");
 8000e40:	4810      	ldr	r0, [pc, #64]	; (8000e84 <HAL_UART_RxCpltCallback+0x834>)
 8000e42:	f015 fa89 	bl	8016358 <puts>
		break;
 8000e46:	e006      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e48:	bf00      	nop
 8000e4a:	e004      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e4c:	bf00      	nop
 8000e4e:	e002      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e50:	bf00      	nop
 8000e52:	e000      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e54:	bf00      	nop
	}
	}
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	08016c98 	.word	0x08016c98
 8000e64:	24000008 	.word	0x24000008
 8000e68:	08016ca4 	.word	0x08016ca4
 8000e6c:	08016cb0 	.word	0x08016cb0
 8000e70:	08016cc0 	.word	0x08016cc0
 8000e74:	08016cd0 	.word	0x08016cd0
 8000e78:	24000708 	.word	0x24000708
 8000e7c:	08016cdc 	.word	0x08016cdc
 8000e80:	24000968 	.word	0x24000968
 8000e84:	08016ce8 	.word	0x08016ce8

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8c:	f002 fd62 	bl	8003954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e90:	f000 f8a4 	bl	8000fdc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e94:	f000 f92c 	bl	80010f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e98:	f000 fe86 	bl	8001ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e9c:	f000 fe4c 	bl	8001b38 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ea0:	f000 fdb0 	bl	8001a04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ea4:	f000 fdfc 	bl	8001aa0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ea8:	f000 fb38 	bl	800151c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000eac:	f000 fc2e 	bl	800170c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000eb0:	f000 fd32 	bl	8001918 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000eb4:	f000 fc82 	bl	80017bc <MX_TIM1_Init>
  MX_ADC3_Init();
 8000eb8:	f000 fa6c 	bl	8001394 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000ebc:	f000 f948 	bl	8001150 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000ec0:	f000 fafa 	bl	80014b8 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000ec4:	f000 fbca 	bl	800165c <MX_SPI1_Init>
  MX_RTC_Init();
 8000ec8:	f000 fb6a 	bl	80015a0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000ecc:	f001 f860 	bl	8001f90 <handshake>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <main+0x52>
	{
		Error_Handler();
 8000ed6:	f001 fe27 	bl	8002b28 <Error_Handler>
	}

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eda:	f011 fc5d 	bl	8012798 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	2010      	movs	r0, #16
 8000ee4:	f011 fe7a 	bl	8012bdc <osMessageQueueNew>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a24      	ldr	r2, [pc, #144]	; (8000f7c <main+0xf4>)
 8000eec:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000eee:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <main+0xf8>)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4824      	ldr	r0, [pc, #144]	; (8000f84 <main+0xfc>)
 8000ef4:	f011 fc9a 	bl	801282c <osThreadNew>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <main+0x100>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000efe:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <main+0x104>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	4823      	ldr	r0, [pc, #140]	; (8000f90 <main+0x108>)
 8000f04:	f011 fc92 	bl	801282c <osThreadNew>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <main+0x10c>)
 8000f0c:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f0e:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <main+0x110>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4822      	ldr	r0, [pc, #136]	; (8000f9c <main+0x114>)
 8000f14:	f011 fc8a 	bl	801282c <osThreadNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <main+0x118>)
 8000f1c:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f1e:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <main+0x11c>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4821      	ldr	r0, [pc, #132]	; (8000fa8 <main+0x120>)
 8000f24:	f011 fc82 	bl	801282c <osThreadNew>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a20      	ldr	r2, [pc, #128]	; (8000fac <main+0x124>)
 8000f2c:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000f2e:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <main+0x128>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4820      	ldr	r0, [pc, #128]	; (8000fb4 <main+0x12c>)
 8000f34:	f011 fc7a 	bl	801282c <osThreadNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <main+0x130>)
 8000f3c:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f3e:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <main+0x134>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <main+0x138>)
 8000f44:	f011 fc72 	bl	801282c <osThreadNew>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a1e      	ldr	r2, [pc, #120]	; (8000fc4 <main+0x13c>)
 8000f4c:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <main+0x140>)
 8000f50:	2100      	movs	r1, #0
 8000f52:	481e      	ldr	r0, [pc, #120]	; (8000fcc <main+0x144>)
 8000f54:	f011 fc6a 	bl	801282c <osThreadNew>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <main+0x148>)
 8000f5c:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f011 fd52 	bl	8012a08 <osEventFlagsNew>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <main+0x14c>)
 8000f68:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f6a:	f001 f89f 	bl	80020ac <system_setup>
	printf("Starting kernal...\n");
 8000f6e:	481a      	ldr	r0, [pc, #104]	; (8000fd8 <main+0x150>)
 8000f70:	f015 f9f2 	bl	8016358 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f74:	f011 fc34 	bl	80127e0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f78:	e7fe      	b.n	8000f78 <main+0xf0>
 8000f7a:	bf00      	nop
 8000f7c:	24000bcc 	.word	0x24000bcc
 8000f80:	08016d44 	.word	0x08016d44
 8000f84:	08002815 	.word	0x08002815
 8000f88:	240006f8 	.word	0x240006f8
 8000f8c:	08016d68 	.word	0x08016d68
 8000f90:	08002859 	.word	0x08002859
 8000f94:	240006fc 	.word	0x240006fc
 8000f98:	08016d8c 	.word	0x08016d8c
 8000f9c:	0800289d 	.word	0x0800289d
 8000fa0:	24000700 	.word	0x24000700
 8000fa4:	08016db0 	.word	0x08016db0
 8000fa8:	080028e1 	.word	0x080028e1
 8000fac:	24000704 	.word	0x24000704
 8000fb0:	08016dd4 	.word	0x08016dd4
 8000fb4:	08002905 	.word	0x08002905
 8000fb8:	24000708 	.word	0x24000708
 8000fbc:	08016df8 	.word	0x08016df8
 8000fc0:	080029ad 	.word	0x080029ad
 8000fc4:	24000968 	.word	0x24000968
 8000fc8:	08016e1c 	.word	0x08016e1c
 8000fcc:	08002a55 	.word	0x08002a55
 8000fd0:	24000bc8 	.word	0x24000bc8
 8000fd4:	24000be8 	.word	0x24000be8
 8000fd8:	08016cf8 	.word	0x08016cf8

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09c      	sub	sp, #112	; 0x70
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe6:	224c      	movs	r2, #76	; 0x4c
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f015 f85e 	bl	80160ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f015 f858 	bl	80160ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f008 fc5b 	bl	80098b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <SystemClock_Config+0x108>)
 8001008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100a:	4a36      	ldr	r2, [pc, #216]	; (80010e4 <SystemClock_Config+0x108>)
 800100c:	f023 0301 	bic.w	r3, r3, #1
 8001010:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001012:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <SystemClock_Config+0x108>)
 8001014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <SystemClock_Config+0x10c>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001024:	4a30      	ldr	r2, [pc, #192]	; (80010e8 <SystemClock_Config+0x10c>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <SystemClock_Config+0x10c>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001038:	bf00      	nop
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <SystemClock_Config+0x10c>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001046:	d1f8      	bne.n	800103a <SystemClock_Config+0x5e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001048:	f008 fc26 	bl	8009898 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800104c:	f002 fcde 	bl	8003a0c <HAL_GetREVID>
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <SystemClock_Config+0x110>)
 8001052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001054:	4a25      	ldr	r2, [pc, #148]	; (80010ec <SystemClock_Config+0x110>)
 8001056:	f023 0318 	bic.w	r3, r3, #24
 800105a:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800105c:	2305      	movs	r3, #5
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001066:	2301      	movs	r3, #1
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106e:	2302      	movs	r3, #2
 8001070:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001072:	2304      	movs	r3, #4
 8001074:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001076:	2320      	movs	r3, #32
 8001078:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800107a:	2304      	movs	r3, #4
 800107c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800107e:	2304      	movs	r3, #4
 8001080:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001086:	2308      	movs	r3, #8
 8001088:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800108a:	2300      	movs	r3, #0
 800108c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	4618      	mov	r0, r3
 8001098:	f008 fc48 	bl	800992c <HAL_RCC_OscConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010a2:	f001 fd41 	bl	8002b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a6:	233f      	movs	r3, #63	; 0x3f
 80010a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010aa:	2303      	movs	r3, #3
 80010ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2101      	movs	r1, #1
 80010ca:	4618      	mov	r0, r3
 80010cc:	f009 f888 	bl	800a1e0 <HAL_RCC_ClockConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80010d6:	f001 fd27 	bl	8002b28 <Error_Handler>
  }
}
 80010da:	bf00      	nop
 80010dc:	3770      	adds	r7, #112	; 0x70
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	58000400 	.word	0x58000400
 80010e8:	58024800 	.word	0x58024800
 80010ec:	58024400 	.word	0x58024400

080010f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0b0      	sub	sp, #192	; 0xc0
 80010f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	22c0      	movs	r2, #192	; 0xc0
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f014 ffd5 	bl	80160ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001102:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800110e:	2304      	movs	r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001112:	2320      	movs	r3, #32
 8001114:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001116:	2308      	movs	r3, #8
 8001118:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	4618      	mov	r0, r3
 8001138:	f009 fc20 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001142:	f001 fcf1 	bl	8002b28 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	37c0      	adds	r7, #192	; 0xc0
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001174:	4b7a      	ldr	r3, [pc, #488]	; (8001360 <MX_ADC1_Init+0x210>)
 8001176:	4a7b      	ldr	r2, [pc, #492]	; (8001364 <MX_ADC1_Init+0x214>)
 8001178:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800117a:	4b79      	ldr	r3, [pc, #484]	; (8001360 <MX_ADC1_Init+0x210>)
 800117c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001180:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001182:	4b77      	ldr	r3, [pc, #476]	; (8001360 <MX_ADC1_Init+0x210>)
 8001184:	2208      	movs	r2, #8
 8001186:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001188:	4b75      	ldr	r3, [pc, #468]	; (8001360 <MX_ADC1_Init+0x210>)
 800118a:	2201      	movs	r2, #1
 800118c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118e:	4b74      	ldr	r3, [pc, #464]	; (8001360 <MX_ADC1_Init+0x210>)
 8001190:	2204      	movs	r2, #4
 8001192:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001194:	4b72      	ldr	r3, [pc, #456]	; (8001360 <MX_ADC1_Init+0x210>)
 8001196:	2200      	movs	r2, #0
 8001198:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800119a:	4b71      	ldr	r3, [pc, #452]	; (8001360 <MX_ADC1_Init+0x210>)
 800119c:	2201      	movs	r2, #1
 800119e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011a0:	4b6f      	ldr	r3, [pc, #444]	; (8001360 <MX_ADC1_Init+0x210>)
 80011a2:	220b      	movs	r2, #11
 80011a4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	4b6e      	ldr	r3, [pc, #440]	; (8001360 <MX_ADC1_Init+0x210>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ac:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <MX_ADC1_Init+0x210>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b6b      	ldr	r3, [pc, #428]	; (8001360 <MX_ADC1_Init+0x210>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011b8:	4b69      	ldr	r3, [pc, #420]	; (8001360 <MX_ADC1_Init+0x210>)
 80011ba:	2203      	movs	r2, #3
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011be:	4b68      	ldr	r3, [pc, #416]	; (8001360 <MX_ADC1_Init+0x210>)
 80011c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011c6:	4b66      	ldr	r3, [pc, #408]	; (8001360 <MX_ADC1_Init+0x210>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011cc:	4b64      	ldr	r3, [pc, #400]	; (8001360 <MX_ADC1_Init+0x210>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d4:	4862      	ldr	r0, [pc, #392]	; (8001360 <MX_ADC1_Init+0x210>)
 80011d6:	f002 fe49 	bl	8003e6c <HAL_ADC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011e0:	f001 fca2 	bl	8002b28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	485c      	ldr	r0, [pc, #368]	; (8001360 <MX_ADC1_Init+0x210>)
 80011f0:	f003 ff64 	bl	80050bc <HAL_ADCEx_MultiModeConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011fa:	f001 fc95 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011fe:	4b5a      	ldr	r3, [pc, #360]	; (8001368 <MX_ADC1_Init+0x218>)
 8001200:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001202:	2306      	movs	r3, #6
 8001204:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001206:	2307      	movs	r3, #7
 8001208:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800120a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800120e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001210:	2304      	movs	r3, #4
 8001212:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	484f      	ldr	r0, [pc, #316]	; (8001360 <MX_ADC1_Init+0x210>)
 8001222:	f003 f8a7 	bl	8004374 <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800122c:	f001 fc7c 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001230:	4b4e      	ldr	r3, [pc, #312]	; (800136c <MX_ADC1_Init+0x21c>)
 8001232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001234:	230c      	movs	r3, #12
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4848      	ldr	r0, [pc, #288]	; (8001360 <MX_ADC1_Init+0x210>)
 800123e:	f003 f899 	bl	8004374 <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001248:	f001 fc6e 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800124c:	4b48      	ldr	r3, [pc, #288]	; (8001370 <MX_ADC1_Init+0x220>)
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001250:	2312      	movs	r3, #18
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4841      	ldr	r0, [pc, #260]	; (8001360 <MX_ADC1_Init+0x210>)
 800125a:	f003 f88b 	bl	8004374 <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001264:	f001 fc60 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <MX_ADC1_Init+0x224>)
 800126a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800126c:	2318      	movs	r3, #24
 800126e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	483a      	ldr	r0, [pc, #232]	; (8001360 <MX_ADC1_Init+0x210>)
 8001276:	f003 f87d 	bl	8004374 <HAL_ADC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001280:	f001 fc52 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001284:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <MX_ADC1_Init+0x228>)
 8001286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800128c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4833      	ldr	r0, [pc, #204]	; (8001360 <MX_ADC1_Init+0x210>)
 8001294:	f003 f86e 	bl	8004374 <HAL_ADC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800129e:	f001 fc43 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012a2:	4b36      	ldr	r3, [pc, #216]	; (800137c <MX_ADC1_Init+0x22c>)
 80012a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012a6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	482b      	ldr	r0, [pc, #172]	; (8001360 <MX_ADC1_Init+0x210>)
 80012b2:	f003 f85f 	bl	8004374 <HAL_ADC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012bc:	f001 fc34 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <MX_ADC1_Init+0x230>)
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012c4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	4619      	mov	r1, r3
 80012ce:	4824      	ldr	r0, [pc, #144]	; (8001360 <MX_ADC1_Init+0x210>)
 80012d0:	f003 f850 	bl	8004374 <HAL_ADC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012da:	f001 fc25 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <MX_ADC1_Init+0x234>)
 80012e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012e2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	481c      	ldr	r0, [pc, #112]	; (8001360 <MX_ADC1_Init+0x210>)
 80012ee:	f003 f841 	bl	8004374 <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80012f8:	f001 fc16 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MX_ADC1_Init+0x238>)
 80012fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001300:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001304:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	4815      	ldr	r0, [pc, #84]	; (8001360 <MX_ADC1_Init+0x210>)
 800130c:	f003 f832 	bl	8004374 <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001316:	f001 fc07 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_ADC1_Init+0x23c>)
 800131c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800131e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001322:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_ADC1_Init+0x210>)
 800132a:	f003 f823 	bl	8004374 <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001334:	f001 fbf8 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_ADC1_Init+0x240>)
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800133c:	f240 2306 	movw	r3, #518	; 0x206
 8001340:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_ADC1_Init+0x210>)
 8001348:	f003 f814 	bl	8004374 <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001352:	f001 fbe9 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	; 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2400013c 	.word	0x2400013c
 8001364:	40022000 	.word	0x40022000
 8001368:	0c900008 	.word	0x0c900008
 800136c:	10c00010 	.word	0x10c00010
 8001370:	14f00020 	.word	0x14f00020
 8001374:	1d500080 	.word	0x1d500080
 8001378:	21800100 	.word	0x21800100
 800137c:	25b00200 	.word	0x25b00200
 8001380:	2a000400 	.word	0x2a000400
 8001384:	2e300800 	.word	0x2e300800
 8001388:	3ac04000 	.word	0x3ac04000
 800138c:	3ef08000 	.word	0x3ef08000
 8001390:	47520000 	.word	0x47520000

08001394 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013ac:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013ae:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <MX_ADC3_Init+0x114>)
 80013b0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013b4:	2208      	movs	r2, #8
 80013b6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013b8:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013be:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013c0:	2204      	movs	r2, #4
 80013c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013c4:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013ca:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80013d0:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013d2:	2204      	movs	r2, #4
 80013d4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013d8:	2200      	movs	r2, #0
 80013da:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e2:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013ea:	2203      	movs	r2, #3
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <MX_ADC3_Init+0x110>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001404:	4827      	ldr	r0, [pc, #156]	; (80014a4 <MX_ADC3_Init+0x110>)
 8001406:	f002 fd31 	bl	8003e6c <HAL_ADC_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001410:	f001 fb8a 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <MX_ADC3_Init+0x118>)
 8001416:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001418:	2306      	movs	r3, #6
 800141a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800141c:	2307      	movs	r3, #7
 800141e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001420:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001424:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001426:	2304      	movs	r3, #4
 8001428:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	481b      	ldr	r0, [pc, #108]	; (80014a4 <MX_ADC3_Init+0x110>)
 8001438:	f002 ff9c 	bl	8004374 <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001442:	f001 fb71 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_ADC3_Init+0x11c>)
 8001448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800144a:	230c      	movs	r3, #12
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <MX_ADC3_Init+0x110>)
 8001454:	f002 ff8e 	bl	8004374 <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800145e:	f001 fb63 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001462:	2301      	movs	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001466:	2312      	movs	r3, #18
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_ADC3_Init+0x110>)
 8001470:	f002 ff80 	bl	8004374 <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800147a:	f001 fb55 	bl	8002b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <MX_ADC3_Init+0x120>)
 8001480:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001482:	2318      	movs	r3, #24
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_ADC3_Init+0x110>)
 800148c:	f002 ff72 	bl	8004374 <HAL_ADC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001496:	f001 fb47 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	240001a0 	.word	0x240001a0
 80014a8:	58026000 	.word	0x58026000
 80014ac:	cb840000 	.word	0xcb840000
 80014b0:	cfb80000 	.word	0xcfb80000
 80014b4:	04300002 	.word	0x04300002

080014b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2224      	movs	r2, #36	; 0x24
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f014 fdf1 	bl	80160ac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_DAC1_Init+0x5c>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_DAC1_Init+0x60>)
 80014ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014d0:	4810      	ldr	r0, [pc, #64]	; (8001514 <MX_DAC1_Init+0x5c>)
 80014d2:	f003 ffb1 	bl	8005438 <HAL_DAC_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014dc:	f001 fb24 	bl	8002b28 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80014e4:	230a      	movs	r3, #10
 80014e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <MX_DAC1_Init+0x5c>)
 80014fc:	f004 f9cc 	bl	8005898 <HAL_DAC_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001506:	f001 fb0f 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	240002f4 	.word	0x240002f4
 8001518:	40007400 	.word	0x40007400

0800151c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <MX_I2C1_Init+0x78>)
 8001522:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <MX_I2C1_Init+0x7c>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_I2C1_Init+0x78>)
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <MX_I2C1_Init+0x80>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_I2C1_Init+0x78>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_I2C1_Init+0x78>)
 8001534:	2201      	movs	r2, #1
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <MX_I2C1_Init+0x78>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_I2C1_Init+0x78>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <MX_I2C1_Init+0x78>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_I2C1_Init+0x78>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_I2C1_Init+0x78>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001556:	480f      	ldr	r0, [pc, #60]	; (8001594 <MX_I2C1_Init+0x78>)
 8001558:	f007 fb92 	bl	8008c80 <HAL_I2C_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001562:	f001 fae1 	bl	8002b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001566:	2100      	movs	r1, #0
 8001568:	480a      	ldr	r0, [pc, #40]	; (8001594 <MX_I2C1_Init+0x78>)
 800156a:	f008 f8d9 	bl	8009720 <HAL_I2CEx_ConfigAnalogFilter>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001574:	f001 fad8 	bl	8002b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001578:	2100      	movs	r1, #0
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_I2C1_Init+0x78>)
 800157c:	f008 f91b 	bl	80097b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001586:	f001 facf 	bl	8002b28 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800158a:	2001      	movs	r0, #1
 800158c:	f008 f960 	bl	8009850 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	24000380 	.word	0x24000380
 8001598:	40005400 	.word	0x40005400
 800159c:	0020081f 	.word	0x0020081f

080015a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_RTC_Init+0xb4>)
 80015ba:	4a27      	ldr	r2, [pc, #156]	; (8001658 <MX_RTC_Init+0xb8>)
 80015bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <MX_RTC_Init+0xb4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <MX_RTC_Init+0xb4>)
 80015c6:	2220      	movs	r2, #32
 80015c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1024;
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <MX_RTC_Init+0xb4>)
 80015cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <MX_RTC_Init+0xb4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <MX_RTC_Init+0xb4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_RTC_Init+0xb4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_RTC_Init+0xb4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015ea:	481a      	ldr	r0, [pc, #104]	; (8001654 <MX_RTC_Init+0xb4>)
 80015ec:	f00b fec4 	bl	800d378 <HAL_RTC_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80015f6:	f001 fa97 	bl	8002b28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015fe:	2300      	movs	r3, #0
 8001600:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001602:	2300      	movs	r3, #0
 8001604:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2201      	movs	r2, #1
 8001612:	4619      	mov	r1, r3
 8001614:	480f      	ldr	r0, [pc, #60]	; (8001654 <MX_RTC_Init+0xb4>)
 8001616:	f00b ff31 	bl	800d47c <HAL_RTC_SetTime>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001620:	f001 fa82 	bl	8002b28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001624:	2301      	movs	r3, #1
 8001626:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001628:	2301      	movs	r3, #1
 800162a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800162c:	2301      	movs	r3, #1
 800162e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001630:	2300      	movs	r3, #0
 8001632:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	2201      	movs	r2, #1
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <MX_RTC_Init+0xb4>)
 800163c:	f00c f818 	bl	800d670 <HAL_RTC_SetDate>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001646:	f001 fa6f 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	240003d4 	.word	0x240003d4
 8001658:	58004000 	.word	0x58004000

0800165c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001660:	4b28      	ldr	r3, [pc, #160]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001662:	4a29      	ldr	r2, [pc, #164]	; (8001708 <MX_SPI1_Init+0xac>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001668:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800166c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001670:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001674:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001678:	220f      	movs	r2, #15
 800167a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <MX_SPI1_Init+0xa8>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <MX_SPI1_Init+0xa8>)
 800168a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800168e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001692:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001696:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_SPI1_Init+0xa8>)
 800169a:	2200      	movs	r2, #0
 800169c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_SPI1_Init+0xa8>)
 80016f0:	f00c f964 	bl	800d9bc <HAL_SPI_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80016fa:	f001 fa15 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	240003f8 	.word	0x240003f8
 8001708:	40013000 	.word	0x40013000

0800170c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001712:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <MX_SPI2_Init+0xac>)
 8001714:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001718:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800171c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001720:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001724:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001728:	220f      	movs	r2, #15
 800172a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800173a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800173e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001742:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001746:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001756:	2200      	movs	r2, #0
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800175c:	2200      	movs	r2, #0
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800178e:	2200      	movs	r2, #0
 8001790:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_SPI2_Init+0xa8>)
 8001794:	2200      	movs	r2, #0
 8001796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_SPI2_Init+0xa8>)
 800179a:	2200      	movs	r2, #0
 800179c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_SPI2_Init+0xa8>)
 80017a0:	f00c f90c 	bl	800d9bc <HAL_SPI_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017aa:	f001 f9bd 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	24000480 	.word	0x24000480
 80017b8:	40003800 	.word	0x40003800

080017bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b09a      	sub	sp, #104	; 0x68
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	222c      	movs	r2, #44	; 0x2c
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f014 fc58 	bl	80160ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017fc:	4b44      	ldr	r3, [pc, #272]	; (8001910 <MX_TIM1_Init+0x154>)
 80017fe:	4a45      	ldr	r2, [pc, #276]	; (8001914 <MX_TIM1_Init+0x158>)
 8001800:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001802:	4b43      	ldr	r3, [pc, #268]	; (8001910 <MX_TIM1_Init+0x154>)
 8001804:	2231      	movs	r2, #49	; 0x31
 8001806:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b41      	ldr	r3, [pc, #260]	; (8001910 <MX_TIM1_Init+0x154>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800180e:	4b40      	ldr	r3, [pc, #256]	; (8001910 <MX_TIM1_Init+0x154>)
 8001810:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001814:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <MX_TIM1_Init+0x154>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800181c:	4b3c      	ldr	r3, [pc, #240]	; (8001910 <MX_TIM1_Init+0x154>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <MX_TIM1_Init+0x154>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001828:	4839      	ldr	r0, [pc, #228]	; (8001910 <MX_TIM1_Init+0x154>)
 800182a:	f00c fd18 	bl	800e25e <HAL_TIM_Base_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001834:	f001 f978 	bl	8002b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800183e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001842:	4619      	mov	r1, r3
 8001844:	4832      	ldr	r0, [pc, #200]	; (8001910 <MX_TIM1_Init+0x154>)
 8001846:	f00d fa93 	bl	800ed70 <HAL_TIM_ConfigClockSource>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001850:	f001 f96a 	bl	8002b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001854:	482e      	ldr	r0, [pc, #184]	; (8001910 <MX_TIM1_Init+0x154>)
 8001856:	f00d f80f 	bl	800e878 <HAL_TIM_PWM_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001860:	f001 f962 	bl	8002b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001870:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001874:	4619      	mov	r1, r3
 8001876:	4826      	ldr	r0, [pc, #152]	; (8001910 <MX_TIM1_Init+0x154>)
 8001878:	f00d ffd0 	bl	800f81c <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001882:	f001 f951 	bl	8002b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001886:	2360      	movs	r3, #96	; 0x60
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800188a:	f240 13df 	movw	r3, #479	; 0x1df
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001894:	2300      	movs	r3, #0
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a8:	2200      	movs	r2, #0
 80018aa:	4619      	mov	r1, r3
 80018ac:	4818      	ldr	r0, [pc, #96]	; (8001910 <MX_TIM1_Init+0x154>)
 80018ae:	f00d f94b 	bl	800eb48 <HAL_TIM_PWM_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018b8:	f001 f936 	bl	8002b28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM1_Init+0x154>)
 80018f2:	f00e f821 	bl	800f938 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80018fc:	f001 f914 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM1_Init+0x154>)
 8001902:	f001 fc9f 	bl	8003244 <HAL_TIM_MspPostInit>

}
 8001906:	bf00      	nop
 8001908:	3768      	adds	r7, #104	; 0x68
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	24000508 	.word	0x24000508
 8001914:	40010000 	.word	0x40010000

08001918 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	; 0x38
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	615a      	str	r2, [r3, #20]
 8001948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <MX_TIM2_Init+0xe8>)
 800194c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001950:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001954:	2231      	movs	r2, #49	; 0x31
 8001956:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <MX_TIM2_Init+0xe8>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001960:	f640 4234 	movw	r2, #3124	; 0xc34
 8001964:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <MX_TIM2_Init+0xe8>)
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001972:	4823      	ldr	r0, [pc, #140]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001974:	f00c fc73 	bl	800e25e <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800197e:	f001 f8d3 	bl	8002b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001988:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198c:	4619      	mov	r1, r3
 800198e:	481c      	ldr	r0, [pc, #112]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001990:	f00d f9ee 	bl	800ed70 <HAL_TIM_ConfigClockSource>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800199a:	f001 f8c5 	bl	8002b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800199e:	4818      	ldr	r0, [pc, #96]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019a0:	f00c ff6a 	bl	800e878 <HAL_TIM_PWM_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019aa:	f001 f8bd 	bl	8002b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019ae:	2320      	movs	r3, #32
 80019b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	4810      	ldr	r0, [pc, #64]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019be:	f00d ff2d 	bl	800f81c <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019c8:	f001 f8ae 	bl	8002b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019cc:	2360      	movs	r3, #96	; 0x60
 80019ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	220c      	movs	r2, #12
 80019e0:	4619      	mov	r1, r3
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019e4:	f00d f8b0 	bl	800eb48 <HAL_TIM_PWM_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019ee:	f001 f89b 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019f4:	f001 fc26 	bl	8003244 <HAL_TIM_MspPostInit>

}
 80019f8:	bf00      	nop
 80019fa:	3738      	adds	r7, #56	; 0x38
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	24000554 	.word	0x24000554

08001a04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <MX_TIM3_Init+0x98>)
 8001a26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a2a:	2263      	movs	r2, #99	; 0x63
 8001a2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a36:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a48:	4813      	ldr	r0, [pc, #76]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a4a:	f00c fc08 	bl	800e25e <HAL_TIM_Base_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a54:	f001 f868 	bl	8002b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a66:	f00d f983 	bl	800ed70 <HAL_TIM_ConfigClockSource>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a70:	f001 f85a 	bl	8002b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a82:	f00d fecb 	bl	800f81c <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a8c:	f001 f84c 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	240005a0 	.word	0x240005a0
 8001a9c:	40000400 	.word	0x40000400

08001aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aa6:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <MX_USART1_UART_Init+0x94>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aac:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae8:	4811      	ldr	r0, [pc, #68]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001aea:	f00d ffc1 	bl	800fa70 <HAL_UART_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001af4:	f001 f818 	bl	8002b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af8:	2100      	movs	r1, #0
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001afc:	f010 fd3d 	bl	801257a <HAL_UARTEx_SetTxFifoThreshold>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b06:	f001 f80f 	bl	8002b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001b0e:	f010 fd72 	bl	80125f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b18:	f001 f806 	bl	8002b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <MX_USART1_UART_Init+0x90>)
 8001b1e:	f010 fcf3 	bl	8012508 <HAL_UARTEx_DisableFifoMode>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b28:	f000 fffe 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	240005ec 	.word	0x240005ec
 8001b34:	40011000 	.word	0x40011000

08001b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <MX_DMA_Init+0x6c>)
 8001b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b44:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <MX_DMA_Init+0x6c>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <MX_DMA_Init+0x6c>)
 8001b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2105      	movs	r1, #5
 8001b60:	200b      	movs	r0, #11
 8001b62:	f003 fc41 	bl	80053e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b66:	200b      	movs	r0, #11
 8001b68:	f003 fc58 	bl	800541c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2105      	movs	r1, #5
 8001b70:	200c      	movs	r0, #12
 8001b72:	f003 fc39 	bl	80053e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b76:	200c      	movs	r0, #12
 8001b78:	f003 fc50 	bl	800541c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2105      	movs	r1, #5
 8001b80:	200d      	movs	r0, #13
 8001b82:	f003 fc31 	bl	80053e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b86:	200d      	movs	r0, #13
 8001b88:	f003 fc48 	bl	800541c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2105      	movs	r1, #5
 8001b90:	2010      	movs	r0, #16
 8001b92:	f003 fc29 	bl	80053e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b96:	2010      	movs	r0, #16
 8001b98:	f003 fc40 	bl	800541c <HAL_NVIC_EnableIRQ>

}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	58024400 	.word	0x58024400

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <MX_GPIO_Init+0xe8>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	4a32      	ldr	r2, [pc, #200]	; (8001c90 <MX_GPIO_Init+0xe8>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bce:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <MX_GPIO_Init+0xe8>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bdc:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <MX_GPIO_Init+0xe8>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be2:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <MX_GPIO_Init+0xe8>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bec:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <MX_GPIO_Init+0xe8>)
 8001bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <MX_GPIO_Init+0xe8>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c00:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <MX_GPIO_Init+0xe8>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0a:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <MX_GPIO_Init+0xe8>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <MX_GPIO_Init+0xe8>)
 8001c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <MX_GPIO_Init+0xe8>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <MX_GPIO_Init+0xe8>)
 8001c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c36:	2200      	movs	r2, #0
 8001c38:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c3c:	4815      	ldr	r0, [pc, #84]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001c3e:	f007 f805 	bl	8008c4c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2164      	movs	r1, #100	; 0x64
 8001c46:	4814      	ldr	r0, [pc, #80]	; (8001c98 <MX_GPIO_Init+0xf0>)
 8001c48:	f007 f800 	bl	8008c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c4c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <MX_GPIO_Init+0xec>)
 8001c66:	f006 fe29 	bl	80088bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c6a:	2364      	movs	r3, #100	; 0x64
 8001c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_GPIO_Init+0xf0>)
 8001c82:	f006 fe1b 	bl	80088bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	; 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	58024400 	.word	0x58024400
 8001c94:	58020800 	.word	0x58020800
 8001c98:	58020400 	.word	0x58020400

08001c9c <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	b299      	uxth	r1, r3
 8001cae:	f107 0208 	add.w	r2, r7, #8
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	4817      	ldr	r0, [pc, #92]	; (8001d18 <poll_i2c_sensor+0x7c>)
 8001cbc:	f007 f87c 	bl	8008db8 <HAL_I2C_Master_Transmit>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001cc4:	7b7b      	ldrb	r3, [r7, #13]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001cca:	4814      	ldr	r0, [pc, #80]	; (8001d1c <poll_i2c_sensor+0x80>)
 8001ccc:	f014 fb44 	bl	8016358 <puts>
 8001cd0:	e01c      	b.n	8001d0c <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	b299      	uxth	r1, r3
 8001cd6:	f107 0208 	add.w	r2, r7, #8
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	480d      	ldr	r0, [pc, #52]	; (8001d18 <poll_i2c_sensor+0x7c>)
 8001ce4:	f007 f980 	bl	8008fe8 <HAL_I2C_Master_Receive>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001cec:	7b7b      	ldrb	r3, [r7, #13]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001cf2:	480b      	ldr	r0, [pc, #44]	; (8001d20 <poll_i2c_sensor+0x84>)
 8001cf4:	f014 fb30 	bl	8016358 <puts>
 8001cf8:	e008      	b.n	8001d0c <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001cfa:	7a3b      	ldrb	r3, [r7, #8]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001d00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d04:	7a7a      	ldrb	r2, [r7, #9]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	10db      	asrs	r3, r3, #3
 8001d0a:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001d0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	24000380 	.word	0x24000380
 8001d1c:	08016d0c 	.word	0x08016d0c
 8001d20:	08016d1c 	.word	0x08016d1c

08001d24 <receive_pmt_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001d2c:	f107 010c 	add.w	r1, r7, #12
 8001d30:	2301      	movs	r3, #1
 8001d32:	2201      	movs	r2, #1
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <receive_pmt_spi+0x44>)
 8001d36:	f00b ff65 	bl	800dc04 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d3e:	7b7b      	ldrb	r3, [r7, #13]
 8001d40:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <receive_pmt_spi+0x44>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <receive_pmt_spi+0x44>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d50:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7bba      	ldrb	r2, [r7, #14]
 8001d56:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	701a      	strb	r2, [r3, #0]
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	240003f8 	.word	0x240003f8

08001d6c <receive_erpa_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001d74:	f107 010c 	add.w	r1, r7, #12
 8001d78:	2364      	movs	r3, #100	; 0x64
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <receive_erpa_spi+0x44>)
 8001d7e:	f00b ff41 	bl	800dc04 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d86:	7b7b      	ldrb	r3, [r7, #13]
 8001d88:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <receive_erpa_spi+0x44>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <receive_erpa_spi+0x44>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d98:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7bba      	ldrb	r2, [r7, #14]
 8001d9e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3301      	adds	r3, #1
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	701a      	strb	r2, [r3, #0]
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	24000480 	.word	0x24000480

08001db4 <receive_erpa_adc>:
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];	// SWPmon --
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <receive_erpa_adc+0x30>)
 8001dbe:	885b      	ldrh	r3, [r3, #2]
 8001dc0:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5]; 	// TEMP1 -- verified doesn't need to change
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <receive_erpa_adc+0x30>)
 8001dc4:	895b      	ldrh	r3, [r3, #10]
 8001dc6:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	89fa      	ldrh	r2, [r7, #14]
 8001dcc:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	89ba      	ldrh	r2, [r7, #12]
 8001dd4:	801a      	strh	r2, [r3, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	24000c60 	.word	0x24000c60

08001de8 <receive_hk_i2c>:
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001df0:	2390      	movs	r3, #144	; 0x90
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff52 	bl	8001c9c <poll_i2c_sensor>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001dfc:	2394      	movs	r3, #148	; 0x94
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff4c 	bl	8001c9c <poll_i2c_sensor>
 8001e04:	4603      	mov	r3, r0
 8001e06:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001e08:	2392      	movs	r3, #146	; 0x92
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff46 	bl	8001c9c <poll_i2c_sensor>
 8001e10:	4603      	mov	r3, r0
 8001e12:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001e14:	2396      	movs	r3, #150	; 0x96
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff40 	bl	8001c9c <poll_i2c_sensor>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	89fa      	ldrh	r2, [r7, #14]
 8001e24:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3302      	adds	r3, #2
 8001e2a:	89ba      	ldrh	r2, [r7, #12]
 8001e2c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3304      	adds	r3, #4
 8001e32:	897a      	ldrh	r2, [r7, #10]
 8001e34:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3306      	adds	r3, #6
 8001e3a:	893a      	ldrh	r2, [r7, #8]
 8001e3c:	801a      	strh	r2, [r3, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <receive_hk_adc1>:
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	; 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];	// BUSVmon -- verified doesn't need to change
 8001e50:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <receive_hk_adc1+0x90>)
 8001e52:	8a9b      	ldrh	r3, [r3, #20]
 8001e54:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];	// BUSImon -- verified doesn't need to change
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <receive_hk_adc1+0x90>)
 8001e58:	8a1b      	ldrh	r3, [r3, #16]
 8001e5a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];	// 2v5mon -- verified doesn't need to change
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <receive_hk_adc1+0x90>)
 8001e5e:	899b      	ldrh	r3, [r3, #12]
 8001e60:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];	// n3v3mon --
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <receive_hk_adc1+0x90>)
 8001e64:	8a5b      	ldrh	r3, [r3, #18]
 8001e66:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];	// n200v -- verified doesn't need to change
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <receive_hk_adc1+0x90>)
 8001e6a:	889b      	ldrh	r3, [r3, #4]
 8001e6c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];	// n800v --
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <receive_hk_adc1+0x90>)
 8001e70:	88db      	ldrh	r3, [r3, #6]
 8001e72:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];	// 5vmon --
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <receive_hk_adc1+0x90>)
 8001e76:	89db      	ldrh	r3, [r3, #14]
 8001e78:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];	// 15vmon -- verified doesn't need to change
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <receive_hk_adc1+0x90>)
 8001e7c:	891b      	ldrh	r3, [r3, #8]
 8001e7e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];	// 5vrefmon --
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <receive_hk_adc1+0x90>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	8bfa      	ldrh	r2, [r7, #30]
 8001e8a:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3302      	adds	r3, #2
 8001e90:	8bba      	ldrh	r2, [r7, #28]
 8001e92:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3304      	adds	r3, #4
 8001e98:	8b7a      	ldrh	r2, [r7, #26]
 8001e9a:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3306      	adds	r3, #6
 8001ea0:	8b3a      	ldrh	r2, [r7, #24]
 8001ea2:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	8afa      	ldrh	r2, [r7, #22]
 8001eaa:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	330a      	adds	r3, #10
 8001eb0:	8aba      	ldrh	r2, [r7, #20]
 8001eb2:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	330c      	adds	r3, #12
 8001eb8:	8a7a      	ldrh	r2, [r7, #18]
 8001eba:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	330e      	adds	r3, #14
 8001ec0:	8a3a      	ldrh	r2, [r7, #16]
 8001ec2:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3310      	adds	r3, #16
 8001ec8:	89fa      	ldrh	r2, [r7, #14]
 8001eca:	801a      	strh	r2, [r3, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	3724      	adds	r7, #36	; 0x24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	24000c60 	.word	0x24000c60

08001edc <receive_hk_adc3>:
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <receive_hk_adc3+0x4c>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <receive_hk_adc3+0x4c>)
 8001eec:	885b      	ldrh	r3, [r3, #2]
 8001eee:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2]; 		// n5vmon --
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <receive_hk_adc3+0x4c>)
 8001ef2:	889b      	ldrh	r3, [r3, #4]
 8001ef4:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];		// 3v3mon --
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <receive_hk_adc3+0x4c>)
 8001ef8:	88db      	ldrh	r3, [r3, #6]
 8001efa:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	89fa      	ldrh	r2, [r7, #14]
 8001f00:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3302      	adds	r3, #2
 8001f06:	89ba      	ldrh	r2, [r7, #12]
 8001f08:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	897a      	ldrh	r2, [r7, #10]
 8001f10:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3306      	adds	r3, #6
 8001f16:	893a      	ldrh	r2, [r7, #8]
 8001f18:	801a      	strh	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	24000c80 	.word	0x24000c80

08001f2c <HAL_UART_TxCpltCallback>:

// *********************************************************************************************************** HELPER FUNCTIONS
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <HAL_UART_TxCpltCallback+0x1c>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	24000000 	.word	0x24000000

08001f4c <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	4613      	mov	r3, r2
 8001f58:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f014 f887 	bl	8016070 <malloc>
 8001f62:	4603      	mov	r3, r0
 8001f64:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	88fa      	ldrh	r2, [r7, #6]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f014 f88f 	bl	8016090 <memcpy>
    packet.size = size;
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f82:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <handshake>:

int handshake()
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b090      	sub	sp, #64	; 0x40
 8001f94:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001f96:	230a      	movs	r3, #10
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001f9a:	f107 011c 	add.w	r1, r7, #28
 8001f9e:	2364      	movs	r3, #100	; 0x64
 8001fa0:	2209      	movs	r2, #9
 8001fa2:	4840      	ldr	r0, [pc, #256]	; (80020a4 <handshake+0x114>)
 8001fa4:	f00d fe42 	bl	800fc2c <HAL_UART_Receive>
		key = rx_buffer[0];
 8001fa8:	7f3b      	ldrb	r3, [r7, #28]
 8001faa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001fae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001fb2:	2bff      	cmp	r3, #255	; 0xff
 8001fb4:	d1f1      	bne.n	8001f9a <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001fb6:	7f7b      	ldrb	r3, [r7, #29]
 8001fb8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001fbc:	7fbb      	ldrb	r3, [r7, #30]
 8001fbe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001fc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001fd0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fd4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001fd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fdc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001ff4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ff8:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001ffa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ffe:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8002000:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002004:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8002006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800200a:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 800200c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002010:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8002012:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002016:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8002018:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800201a:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 800201c:	f107 0318 	add.w	r3, r7, #24
 8002020:	2200      	movs	r2, #0
 8002022:	4619      	mov	r1, r3
 8002024:	4820      	ldr	r0, [pc, #128]	; (80020a8 <handshake+0x118>)
 8002026:	f00b fb23 	bl	800d670 <HAL_RTC_SetDate>
 800202a:	4603      	mov	r3, r0
 800202c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8002030:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <handshake+0xac>
	{
		Error_Handler();
 8002038:	f000 fd76 	bl	8002b28 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2200      	movs	r2, #0
 8002040:	4619      	mov	r1, r3
 8002042:	4819      	ldr	r0, [pc, #100]	; (80020a8 <handshake+0x118>)
 8002044:	f00b fa1a 	bl	800d47c <HAL_RTC_SetTime>
 8002048:	4603      	mov	r3, r0
 800204a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 800204e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <handshake+0xca>
	{
		Error_Handler();
 8002056:	f000 fd67 	bl	8002b28 <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 800205a:	23fa      	movs	r3, #250	; 0xfa
 800205c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8002072:	2302      	movs	r3, #2
 8002074:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8002078:	2300      	movs	r3, #0
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207c:	e009      	b.n	8002092 <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 800207e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002082:	2364      	movs	r3, #100	; 0x64
 8002084:	2205      	movs	r2, #5
 8002086:	4807      	ldr	r0, [pc, #28]	; (80020a4 <handshake+0x114>)
 8002088:	f00d fd42 	bl	800fb10 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 800208c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208e:	3301      	adds	r3, #1
 8002090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002096:	429a      	cmp	r2, r3
 8002098:	dbf1      	blt.n	800207e <handshake+0xee>
	}

	return 1;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3740      	adds	r7, #64	; 0x40
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	240005ec 	.word	0x240005ec
 80020a8:	240003d4 	.word	0x240003d4

080020ac <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0

	TIM2->CCR4 = 312;
 80020b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80020ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020c2:	4815      	ldr	r0, [pc, #84]	; (8002118 <system_setup+0x6c>)
 80020c4:	f002 ff96 	bl	8004ff4 <HAL_ADCEx_Calibration_Start>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <system_setup+0x26>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 80020ce:	f000 fd2b 	bl	8002b28 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80020d2:	220b      	movs	r2, #11
 80020d4:	4911      	ldr	r1, [pc, #68]	; (800211c <system_setup+0x70>)
 80020d6:	4810      	ldr	r0, [pc, #64]	; (8002118 <system_setup+0x6c>)
 80020d8:	f002 f86a 	bl	80041b0 <HAL_ADC_Start_DMA>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <system_setup+0x3a>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80020e2:	f000 fd21 	bl	8002b28 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80020e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020ee:	480c      	ldr	r0, [pc, #48]	; (8002120 <system_setup+0x74>)
 80020f0:	f002 ff80 	bl	8004ff4 <HAL_ADCEx_Calibration_Start>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <system_setup+0x52>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 80020fa:	f000 fd15 	bl	8002b28 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80020fe:	2204      	movs	r2, #4
 8002100:	4908      	ldr	r1, [pc, #32]	; (8002124 <system_setup+0x78>)
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <system_setup+0x74>)
 8002104:	f002 f854 	bl	80041b0 <HAL_ADC_Start_DMA>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <system_setup+0x66>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800210e:	f000 fd0b 	bl	8002b28 <Error_Handler>
	}
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2400013c 	.word	0x2400013c
 800211c:	24000c60 	.word	0x24000c60
 8002120:	240001a0 	.word	0x240001a0
 8002124:	24000c80 	.word	0x24000c80

08002128 <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	2200      	movs	r2, #0
 8002136:	4619      	mov	r1, r3
 8002138:	481d      	ldr	r0, [pc, #116]	; (80021b0 <getTimestamp+0x88>)
 800213a:	f00b fa3d 	bl	800d5b8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	2200      	movs	r2, #0
 8002144:	4619      	mov	r1, r3
 8002146:	481a      	ldr	r0, [pc, #104]	; (80021b0 <getTimestamp+0x88>)
 8002148:	f00b fb1a 	bl	800d780 <HAL_RTC_GetDate>
	uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002152:	fb03 f202 	mul.w	r2, r3, r2
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <getTimestamp+0x88>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	fbb2 f3f3 	udiv	r3, r2, r3
 800215e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8002162:	627b      	str	r3, [r7, #36]	; 0x24

	//uint32_t milliseconds = currentTime.SubSeconds;


	buffer[0] = currentDate.Year;		// 0-99
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3301      	adds	r3, #1
 800216e:	7b7a      	ldrb	r2, [r7, #13]
 8002170:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3302      	adds	r3, #2
 8002176:	7bba      	ldrb	r2, [r7, #14]
 8002178:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3303      	adds	r3, #3
 800217e:	7c3a      	ldrb	r2, [r7, #16]
 8002180:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3304      	adds	r3, #4
 8002186:	7c7a      	ldrb	r2, [r7, #17]
 8002188:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3305      	adds	r3, #5
 800218e:	7cba      	ldrb	r2, [r7, #18]
 8002190:	701a      	strb	r2, [r3, #0]
	buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	0a1a      	lsrs	r2, r3, #8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3306      	adds	r3, #6
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]
	buffer[7] = milliseconds & 0xFF;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3307      	adds	r3, #7
 80021a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]

}
 80021a8:	bf00      	nop
 80021aa:	3728      	adds	r7, #40	; 0x28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	240003d4 	.word	0x240003d4

080021b4 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80021ba:	bf00      	nop
 80021bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c0:	4840      	ldr	r0, [pc, #256]	; (80022c4 <sample_pmt+0x110>)
 80021c2:	f006 fd2b 	bl	8008c1c <HAL_GPIO_ReadPin>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f7      	bne.n	80021bc <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80021cc:	200e      	movs	r0, #14
 80021ce:	f013 ff4f 	bl	8016070 <malloc>
 80021d2:	4603      	mov	r3, r0
 80021d4:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 80021d6:	2002      	movs	r0, #2
 80021d8:	f013 ff4a 	bl	8016070 <malloc>
 80021dc:	4603      	mov	r3, r0
 80021de:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 80021e0:	2008      	movs	r0, #8
 80021e2:	f013 ff45 	bl	8016070 <malloc>
 80021e6:	4603      	mov	r3, r0
 80021e8:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f7ff ff9c 	bl	8002128 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 80021f0:	6938      	ldr	r0, [r7, #16]
 80021f2:	f7ff fd97 	bl	8001d24 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	22bb      	movs	r2, #187	; 0xbb
 80021fa:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	22bb      	movs	r2, #187	; 0xbb
 8002202:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002204:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <sample_pmt+0x114>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	b29a      	uxth	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3302      	adds	r3, #2
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <sample_pmt+0x114>)
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3303      	adds	r3, #3
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3304      	adds	r3, #4
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3305      	adds	r3, #5
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	7852      	ldrb	r2, [r2, #1]
 8002232:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3306      	adds	r3, #6
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	7812      	ldrb	r2, [r2, #0]
 800223c:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3307      	adds	r3, #7
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	7852      	ldrb	r2, [r2, #1]
 8002246:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3308      	adds	r3, #8
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	7892      	ldrb	r2, [r2, #2]
 8002250:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3309      	adds	r3, #9
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	78d2      	ldrb	r2, [r2, #3]
 800225a:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	330a      	adds	r3, #10
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	7912      	ldrb	r2, [r2, #4]
 8002264:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	330b      	adds	r3, #11
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	7952      	ldrb	r2, [r2, #5]
 800226e:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	330c      	adds	r3, #12
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	7992      	ldrb	r2, [r2, #6]
 8002278:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	330d      	adds	r3, #13
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	79d2      	ldrb	r2, [r2, #7]
 8002282:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	220e      	movs	r2, #14
 8002288:	6979      	ldr	r1, [r7, #20]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fe5e 	bl	8001f4c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <sample_pmt+0x118>)
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	1d39      	adds	r1, r7, #4
 8002296:	2300      	movs	r3, #0
 8002298:	2200      	movs	r2, #0
 800229a:	f010 fd13 	bl	8012cc4 <osMessageQueuePut>
	available_msgs++;
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <sample_pmt+0x11c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <sample_pmt+0x11c>)
 80022a6:	6013      	str	r3, [r2, #0]
	free(buffer);
 80022a8:	6978      	ldr	r0, [r7, #20]
 80022aa:	f013 fee9 	bl	8016080 <free>
	free(pmt_spi);
 80022ae:	6938      	ldr	r0, [r7, #16]
 80022b0:	f013 fee6 	bl	8016080 <free>
	free(timestamp);
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f013 fee3 	bl	8016080 <free>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	58020000 	.word	0x58020000
 80022c8:	24000bdc 	.word	0x24000bdc
 80022cc:	24000bcc 	.word	0x24000bcc
 80022d0:	24000bd8 	.word	0x24000bd8

080022d4 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80022da:	bf00      	nop
 80022dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022e0:	4854      	ldr	r0, [pc, #336]	; (8002434 <sample_erpa+0x160>)
 80022e2:	f006 fc9b 	bl	8008c1c <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f7      	bne.n	80022dc <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80022ec:	2012      	movs	r0, #18
 80022ee:	f013 febf 	bl	8016070 <malloc>
 80022f2:	4603      	mov	r3, r0
 80022f4:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 80022f6:	2002      	movs	r0, #2
 80022f8:	f013 feba 	bl	8016070 <malloc>
 80022fc:	4603      	mov	r3, r0
 80022fe:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8002300:	2004      	movs	r0, #4
 8002302:	f013 feb5 	bl	8016070 <malloc>
 8002306:	4603      	mov	r3, r0
 8002308:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 800230a:	2008      	movs	r0, #8
 800230c:	f013 feb0 	bl	8016070 <malloc>
 8002310:	4603      	mov	r3, r0
 8002312:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 8002314:	68b8      	ldr	r0, [r7, #8]
 8002316:	f7ff ff07 	bl	8002128 <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 800231a:	6938      	ldr	r0, [r7, #16]
 800231c:	f7ff fd26 	bl	8001d6c <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff fd47 	bl	8001db4 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	22aa      	movs	r2, #170	; 0xaa
 800232a:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3301      	adds	r3, #1
 8002330:	22aa      	movs	r2, #170	; 0xaa
 8002332:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002334:	4b40      	ldr	r3, [pc, #256]	; (8002438 <sample_erpa+0x164>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	b29a      	uxth	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3302      	adds	r3, #2
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002344:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <sample_erpa+0x164>)
 8002346:	881a      	ldrh	r2, [r3, #0]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3303      	adds	r3, #3
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	b29a      	uxth	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3304      	adds	r3, #4
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	881a      	ldrh	r2, [r3, #0]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3305      	adds	r3, #5
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3302      	adds	r3, #2
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	b29a      	uxth	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3306      	adds	r3, #6
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3302      	adds	r3, #2
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3307      	adds	r3, #7
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3308      	adds	r3, #8
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	7812      	ldrb	r2, [r2, #0]
 8002394:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3309      	adds	r3, #9
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	7852      	ldrb	r2, [r2, #1]
 800239e:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	330a      	adds	r3, #10
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	330b      	adds	r3, #11
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	7852      	ldrb	r2, [r2, #1]
 80023b2:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	330c      	adds	r3, #12
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	7892      	ldrb	r2, [r2, #2]
 80023bc:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	330d      	adds	r3, #13
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	78d2      	ldrb	r2, [r2, #3]
 80023c6:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	330e      	adds	r3, #14
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	7912      	ldrb	r2, [r2, #4]
 80023d0:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	330f      	adds	r3, #15
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	7952      	ldrb	r2, [r2, #5]
 80023da:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3310      	adds	r3, #16
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	7992      	ldrb	r2, [r2, #6]
 80023e4:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	3311      	adds	r3, #17
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	79d2      	ldrb	r2, [r2, #7]
 80023ee:	701a      	strb	r2, [r3, #0]



	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80023f0:	463b      	mov	r3, r7
 80023f2:	2212      	movs	r2, #18
 80023f4:	6979      	ldr	r1, [r7, #20]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fda8 	bl	8001f4c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <sample_erpa+0x168>)
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	4639      	mov	r1, r7
 8002402:	2300      	movs	r3, #0
 8002404:	2200      	movs	r2, #0
 8002406:	f010 fc5d 	bl	8012cc4 <osMessageQueuePut>
	available_msgs++;
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <sample_erpa+0x16c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <sample_erpa+0x16c>)
 8002412:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002414:	6978      	ldr	r0, [r7, #20]
 8002416:	f013 fe33 	bl	8016080 <free>
	free(erpa_spi);
 800241a:	6938      	ldr	r0, [r7, #16]
 800241c:	f013 fe30 	bl	8016080 <free>
	free(erpa_adc);
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f013 fe2d 	bl	8016080 <free>
	free(timestamp);
 8002426:	68b8      	ldr	r0, [r7, #8]
 8002428:	f013 fe2a 	bl	8016080 <free>
}
 800242c:	bf00      	nop
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	58020400 	.word	0x58020400
 8002438:	24000bde 	.word	0x24000bde
 800243c:	24000bcc 	.word	0x24000bcc
 8002440:	24000bd8 	.word	0x24000bd8

08002444 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 800244a:	202e      	movs	r0, #46	; 0x2e
 800244c:	f013 fe10 	bl	8016070 <malloc>
 8002450:	4603      	mov	r3, r0
 8002452:	61fb      	str	r3, [r7, #28]

	static uint16_t last_i2c_reading[4];
	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8002454:	2008      	movs	r0, #8
 8002456:	f013 fe0b 	bl	8016070 <malloc>
 800245a:	4603      	mov	r3, r0
 800245c:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 800245e:	2012      	movs	r0, #18
 8002460:	f013 fe06 	bl	8016070 <malloc>
 8002464:	4603      	mov	r3, r0
 8002466:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8002468:	2008      	movs	r0, #8
 800246a:	f013 fe01 	bl	8016070 <malloc>
 800246e:	4603      	mov	r3, r0
 8002470:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002472:	2008      	movs	r0, #8
 8002474:	f013 fdfc 	bl	8016070 <malloc>
 8002478:	4603      	mov	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f7ff fe53 	bl	8002128 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999){
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <sample_hk+0x8c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800248a:	db25      	blt.n	80024d8 <sample_hk+0x94>
		receive_hk_i2c(hk_i2c);
 800248c:	69b8      	ldr	r0, [r7, #24]
 800248e:	f7ff fcab 	bl	8001de8 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <sample_hk+0x90>)
 800249c:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	3302      	adds	r3, #2
 80024a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <sample_hk+0x90>)
 80024aa:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	3304      	adds	r3, #4
 80024b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <sample_hk+0x90>)
 80024b8:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	3306      	adds	r3, #6
 80024be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <sample_hk+0x90>)
 80024c6:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 80024c8:	4b01      	ldr	r3, [pc, #4]	; (80024d0 <sample_hk+0x8c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	e01f      	b.n	8002510 <sample_hk+0xcc>
 80024d0:	24000004 	.word	0x24000004
 80024d4:	24000c88 	.word	0x24000c88
	}
	else{
		TEMPERATURE_COUNTER++;
 80024d8:	4ba4      	ldr	r3, [pc, #656]	; (800276c <sample_hk+0x328>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3301      	adds	r3, #1
 80024de:	4aa3      	ldr	r2, [pc, #652]	; (800276c <sample_hk+0x328>)
 80024e0:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 80024e2:	4ba3      	ldr	r3, [pc, #652]	; (8002770 <sample_hk+0x32c>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80024ec:	4ba0      	ldr	r3, [pc, #640]	; (8002770 <sample_hk+0x32c>)
 80024ee:	885a      	ldrh	r2, [r3, #2]
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	3302      	adds	r3, #2
 80024f4:	b212      	sxth	r2, r2
 80024f6:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80024f8:	4b9d      	ldr	r3, [pc, #628]	; (8002770 <sample_hk+0x32c>)
 80024fa:	889a      	ldrh	r2, [r3, #4]
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	3304      	adds	r3, #4
 8002500:	b212      	sxth	r2, r2
 8002502:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 8002504:	4b9a      	ldr	r3, [pc, #616]	; (8002770 <sample_hk+0x32c>)
 8002506:	88da      	ldrh	r2, [r3, #6]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	3306      	adds	r3, #6
 800250c:	b212      	sxth	r2, r2
 800250e:	801a      	strh	r2, [r3, #0]
	}
	receive_hk_adc1(hk_adc1);
 8002510:	6978      	ldr	r0, [r7, #20]
 8002512:	f7ff fc99 	bl	8001e48 <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 8002516:	6938      	ldr	r0, [r7, #16]
 8002518:	f7ff fce0 	bl	8001edc <receive_hk_adc3>
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	22cc      	movs	r2, #204	; 0xcc
 8002520:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3301      	adds	r3, #1
 8002526:	22cc      	movs	r2, #204	; 0xcc
 8002528:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800252a:	4b92      	ldr	r3, [pc, #584]	; (8002774 <sample_hk+0x330>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	b29a      	uxth	r2, r3
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3302      	adds	r3, #2
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800253a:	4b8e      	ldr	r3, [pc, #568]	; (8002774 <sample_hk+0x330>)
 800253c:	881a      	ldrh	r2, [r3, #0]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3303      	adds	r3, #3
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	3302      	adds	r3, #2
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	b29a      	uxth	r2, r3
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	3304      	adds	r3, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	3302      	adds	r3, #2
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3305      	adds	r3, #5
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	b29a      	uxth	r2, r3
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3306      	adds	r3, #6
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	881a      	ldrh	r2, [r3, #0]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3307      	adds	r3, #7
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002588:	121a      	asrs	r2, r3, #8
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3308      	adds	r3, #8
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	3309      	adds	r3, #9
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	3302      	adds	r3, #2
 80025a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a8:	121a      	asrs	r2, r3, #8
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	330a      	adds	r3, #10
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	3302      	adds	r3, #2
 80025b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	330b      	adds	r3, #11
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	3304      	adds	r3, #4
 80025c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ca:	121a      	asrs	r2, r3, #8
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	330c      	adds	r3, #12
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	3304      	adds	r3, #4
 80025d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	330d      	adds	r3, #13
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	3306      	adds	r3, #6
 80025e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ec:	121a      	asrs	r2, r3, #8
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	330e      	adds	r3, #14
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	3306      	adds	r3, #6
 80025fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	330f      	adds	r3, #15
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	b29a      	uxth	r2, r3
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3310      	adds	r3, #16
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	881a      	ldrh	r2, [r3, #0]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3311      	adds	r3, #17
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	3302      	adds	r3, #2
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	b29a      	uxth	r2, r3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	3312      	adds	r3, #18
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3302      	adds	r3, #2
 8002638:	881a      	ldrh	r2, [r3, #0]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3313      	adds	r3, #19
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3304      	adds	r3, #4
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	b29a      	uxth	r2, r3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3314      	adds	r3, #20
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3304      	adds	r3, #4
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3315      	adds	r3, #21
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	3306      	adds	r3, #6
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	b29a      	uxth	r2, r3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	3316      	adds	r3, #22
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	3306      	adds	r3, #6
 8002678:	881a      	ldrh	r2, [r3, #0]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3317      	adds	r3, #23
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	330c      	adds	r3, #12
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	b29a      	uxth	r2, r3
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	3318      	adds	r3, #24
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	330c      	adds	r3, #12
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3319      	adds	r3, #25
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3306      	adds	r3, #6
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	331a      	adds	r3, #26
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3306      	adds	r3, #6
 80026b8:	881a      	ldrh	r2, [r3, #0]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	331b      	adds	r3, #27
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	3304      	adds	r3, #4
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	331c      	adds	r3, #28
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	3304      	adds	r3, #4
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	331d      	adds	r3, #29
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	330e      	adds	r3, #14
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	331e      	adds	r3, #30
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	330e      	adds	r3, #14
 80026f8:	881a      	ldrh	r2, [r3, #0]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	331f      	adds	r3, #31
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3310      	adds	r3, #16
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	b29a      	uxth	r2, r3
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	3320      	adds	r3, #32
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3310      	adds	r3, #16
 8002718:	881a      	ldrh	r2, [r3, #0]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3321      	adds	r3, #33	; 0x21
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3308      	adds	r3, #8
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	0a1b      	lsrs	r3, r3, #8
 800272a:	b29a      	uxth	r2, r3
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	3322      	adds	r3, #34	; 0x22
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3308      	adds	r3, #8
 8002738:	881a      	ldrh	r2, [r3, #0]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3323      	adds	r3, #35	; 0x23
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	330a      	adds	r3, #10
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	b29a      	uxth	r2, r3
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	3324      	adds	r3, #36	; 0x24
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	330a      	adds	r3, #10
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3325      	adds	r3, #37	; 0x25
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3326      	adds	r3, #38	; 0x26
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	e006      	b.n	8002778 <sample_hk+0x334>
 800276a:	bf00      	nop
 800276c:	24000004 	.word	0x24000004
 8002770:	24000c88 	.word	0x24000c88
 8002774:	24000be0 	.word	0x24000be0
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	3327      	adds	r3, #39	; 0x27
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	7852      	ldrb	r2, [r2, #1]
 8002784:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3328      	adds	r3, #40	; 0x28
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	7892      	ldrb	r2, [r2, #2]
 800278e:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	3329      	adds	r3, #41	; 0x29
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	78d2      	ldrb	r2, [r2, #3]
 8002798:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	332a      	adds	r3, #42	; 0x2a
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	7912      	ldrb	r2, [r2, #4]
 80027a2:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	332b      	adds	r3, #43	; 0x2b
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	7952      	ldrb	r2, [r2, #5]
 80027ac:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	332c      	adds	r3, #44	; 0x2c
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	7992      	ldrb	r2, [r2, #6]
 80027b6:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	332d      	adds	r3, #45	; 0x2d
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	79d2      	ldrb	r2, [r2, #7]
 80027c0:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	222e      	movs	r2, #46	; 0x2e
 80027c6:	69f9      	ldr	r1, [r7, #28]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fbbf 	bl	8001f4c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <sample_hk+0x3c8>)
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	1d39      	adds	r1, r7, #4
 80027d4:	2300      	movs	r3, #0
 80027d6:	2200      	movs	r2, #0
 80027d8:	f010 fa74 	bl	8012cc4 <osMessageQueuePut>
	available_msgs++;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <sample_hk+0x3cc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3301      	adds	r3, #1
 80027e2:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <sample_hk+0x3cc>)
 80027e4:	6013      	str	r3, [r2, #0]

	free(buffer);
 80027e6:	69f8      	ldr	r0, [r7, #28]
 80027e8:	f013 fc4a 	bl	8016080 <free>
	free(hk_i2c);
 80027ec:	69b8      	ldr	r0, [r7, #24]
 80027ee:	f013 fc47 	bl	8016080 <free>
	free(hk_adc1);
 80027f2:	6978      	ldr	r0, [r7, #20]
 80027f4:	f013 fc44 	bl	8016080 <free>
	free(hk_adc3);
 80027f8:	6938      	ldr	r0, [r7, #16]
 80027fa:	f013 fc41 	bl	8016080 <free>
	free(timestamp);
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f013 fc3e 	bl	8016080 <free>
}
 8002804:	bf00      	nop
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	24000bcc 	.word	0x24000bcc
 8002810:	24000bd8 	.word	0x24000bd8

08002814 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <PMT_init+0x38>)
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002824:	2200      	movs	r2, #0
 8002826:	2101      	movs	r1, #1
 8002828:	f010 f972 	bl	8012b10 <osEventFlagsWait>
		if(PMT_ON){
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <PMT_init+0x3c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <PMT_init+0x30>
			sample_pmt();
 8002834:	f7ff fcbe 	bl	80021b4 <sample_pmt>
			pmt_seq++;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <PMT_init+0x40>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <PMT_init+0x40>)
 8002842:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002844:	f010 f884 	bl	8012950 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002848:	e7e8      	b.n	800281c <PMT_init+0x8>
 800284a:	bf00      	nop
 800284c:	24000be8 	.word	0x24000be8
 8002850:	24000be2 	.word	0x24000be2
 8002854:	24000bdc 	.word	0x24000bdc

08002858 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <ERPA_init+0x38>)
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002868:	2200      	movs	r2, #0
 800286a:	2102      	movs	r1, #2
 800286c:	f010 f950 	bl	8012b10 <osEventFlagsWait>
		if (ERPA_ON)
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <ERPA_init+0x3c>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <ERPA_init+0x30>
		{
			sample_erpa();
 8002878:	f7ff fd2c 	bl	80022d4 <sample_erpa>
			erpa_seq++;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <ERPA_init+0x40>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <ERPA_init+0x40>)
 8002886:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002888:	f010 f862 	bl	8012950 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800288c:	e7e8      	b.n	8002860 <ERPA_init+0x8>
 800288e:	bf00      	nop
 8002890:	24000be8 	.word	0x24000be8
 8002894:	24000be3 	.word	0x24000be3
 8002898:	24000bde 	.word	0x24000bde

0800289c <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HK_init+0x38>)
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ac:	2200      	movs	r2, #0
 80028ae:	2104      	movs	r1, #4
 80028b0:	f010 f92e 	bl	8012b10 <osEventFlagsWait>
		if(HK_ON)
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HK_init+0x3c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <HK_init+0x30>
		{
			sample_hk();
 80028bc:	f7ff fdc2 	bl	8002444 <sample_hk>
			hk_seq++;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HK_init+0x40>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <HK_init+0x40>)
 80028ca:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 80028cc:	f010 f840 	bl	8012950 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80028d0:	e7e8      	b.n	80028a4 <HK_init+0x8>
 80028d2:	bf00      	nop
 80028d4:	24000be8 	.word	0x24000be8
 80028d8:	24000be4 	.word	0x24000be4
 80028dc:	24000be0 	.word	0x24000be0

080028e0 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80028e8:	2201      	movs	r2, #1
 80028ea:	4904      	ldr	r1, [pc, #16]	; (80028fc <UART_RX_init+0x1c>)
 80028ec:	4804      	ldr	r0, [pc, #16]	; (8002900 <UART_RX_init+0x20>)
 80028ee:	f00d fa65 	bl	800fdbc <HAL_UART_Receive_IT>
		osDelay(5);
 80028f2:	2005      	movs	r0, #5
 80028f4:	f010 f86d 	bl	80129d2 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80028f8:	e7f6      	b.n	80028e8 <UART_RX_init+0x8>
 80028fa:	bf00      	nop
 80028fc:	24000bec 	.word	0x24000bec
 8002900:	240005ec 	.word	0x240005ec

08002904 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 800290c:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <GPIO_on_init+0x9c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f010 f83d 	bl	8012990 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002916:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <GPIO_on_init+0xa0>)
 8002918:	2104      	movs	r1, #4
 800291a:	2201      	movs	r2, #1
 800291c:	4618      	mov	r0, r3
 800291e:	f006 f995 	bl	8008c4c <HAL_GPIO_WritePin>
		osDelay(100);
 8002922:	2064      	movs	r0, #100	; 0x64
 8002924:	f010 f855 	bl	80129d2 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <GPIO_on_init+0xa0>)
 800292a:	2120      	movs	r1, #32
 800292c:	2201      	movs	r2, #1
 800292e:	4618      	mov	r0, r3
 8002930:	f006 f98c 	bl	8008c4c <HAL_GPIO_WritePin>
		osDelay(100);
 8002934:	2064      	movs	r0, #100	; 0x64
 8002936:	f010 f84c 	bl	80129d2 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 800293a:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <GPIO_on_init+0xa4>)
 800293c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002940:	2201      	movs	r2, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f006 f982 	bl	8008c4c <HAL_GPIO_WritePin>
		osDelay(100);
 8002948:	2064      	movs	r0, #100	; 0x64
 800294a:	f010 f842 	bl	80129d2 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <GPIO_on_init+0xa4>)
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	2201      	movs	r2, #1
 8002954:	4618      	mov	r0, r3
 8002956:	f006 f979 	bl	8008c4c <HAL_GPIO_WritePin>
		osDelay(100);
 800295a:	2064      	movs	r0, #100	; 0x64
 800295c:	f010 f839 	bl	80129d2 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <GPIO_on_init+0xa4>)
 8002962:	2140      	movs	r1, #64	; 0x40
 8002964:	2201      	movs	r2, #1
 8002966:	4618      	mov	r0, r3
 8002968:	f006 f970 	bl	8008c4c <HAL_GPIO_WritePin>
		osDelay(100);
 800296c:	2064      	movs	r0, #100	; 0x64
 800296e:	f010 f830 	bl	80129d2 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <GPIO_on_init+0xa4>)
 8002974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002978:	2201      	movs	r2, #1
 800297a:	4618      	mov	r0, r3
 800297c:	f006 f966 	bl	8008c4c <HAL_GPIO_WritePin>
		osDelay(100);
 8002980:	2064      	movs	r0, #100	; 0x64
 8002982:	f010 f826 	bl	80129d2 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <GPIO_on_init+0xa4>)
 8002988:	f44f 7100 	mov.w	r1, #512	; 0x200
 800298c:	2201      	movs	r2, #1
 800298e:	4618      	mov	r0, r3
 8002990:	f006 f95c 	bl	8008c4c <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002994:	4b02      	ldr	r3, [pc, #8]	; (80029a0 <GPIO_on_init+0x9c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f00f fff9 	bl	8012990 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800299e:	e7ba      	b.n	8002916 <GPIO_on_init+0x12>
 80029a0:	24000708 	.word	0x24000708
 80029a4:	58020400 	.word	0x58020400
 80029a8:	58020800 	.word	0x58020800

080029ac <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 80029b4:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <GPIO_off_init+0x9c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f00f ffe9 	bl	8012990 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 80029be:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <GPIO_off_init+0xa0>)
 80029c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029c4:	2200      	movs	r2, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f006 f940 	bl	8008c4c <HAL_GPIO_WritePin>
		osDelay(100);
 80029cc:	2064      	movs	r0, #100	; 0x64
 80029ce:	f010 f800 	bl	80129d2 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <GPIO_off_init+0xa0>)
 80029d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029d8:	2200      	movs	r2, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f006 f936 	bl	8008c4c <HAL_GPIO_WritePin>
		osDelay(100);
 80029e0:	2064      	movs	r0, #100	; 0x64
 80029e2:	f00f fff6 	bl	80129d2 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <GPIO_off_init+0xa0>)
 80029e8:	2140      	movs	r1, #64	; 0x40
 80029ea:	2200      	movs	r2, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f006 f92d 	bl	8008c4c <HAL_GPIO_WritePin>
		osDelay(100);
 80029f2:	2064      	movs	r0, #100	; 0x64
 80029f4:	f00f ffed 	bl	80129d2 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <GPIO_off_init+0xa0>)
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	2200      	movs	r2, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f006 f924 	bl	8008c4c <HAL_GPIO_WritePin>
		osDelay(100);
 8002a04:	2064      	movs	r0, #100	; 0x64
 8002a06:	f00f ffe4 	bl	80129d2 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <GPIO_off_init+0xa0>)
 8002a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a10:	2200      	movs	r2, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f006 f91a 	bl	8008c4c <HAL_GPIO_WritePin>
		osDelay(100);
 8002a18:	2064      	movs	r0, #100	; 0x64
 8002a1a:	f00f ffda 	bl	80129d2 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <GPIO_off_init+0xa4>)
 8002a20:	2120      	movs	r1, #32
 8002a22:	2200      	movs	r2, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f006 f911 	bl	8008c4c <HAL_GPIO_WritePin>
		osDelay(100);
 8002a2a:	2064      	movs	r0, #100	; 0x64
 8002a2c:	f00f ffd1 	bl	80129d2 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <GPIO_off_init+0xa4>)
 8002a32:	2104      	movs	r1, #4
 8002a34:	2200      	movs	r2, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f006 f908 	bl	8008c4c <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002a3c:	4b02      	ldr	r3, [pc, #8]	; (8002a48 <GPIO_off_init+0x9c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f00f ffa5 	bl	8012990 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002a46:	e7ba      	b.n	80029be <GPIO_off_init+0x12>
 8002a48:	24000968 	.word	0x24000968
 8002a4c:	58020800 	.word	0x58020800
 8002a50:	58020400 	.word	0x58020400

08002a54 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
  static uint8_t tx_buffer[1000];
  uint32_t total_size = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  osStatus_t status;

  while (1) {
    total_size = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]

    // Retrieve all messages from the queue and store them in tx_buffer
    do {
      status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002a64:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <UART_TX_init+0x9c>)
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	4921      	ldr	r1, [pc, #132]	; (8002af4 <UART_TX_init+0xa0>)
 8002a70:	f010 f988 	bl	8012d84 <osMessageQueueGet>
 8002a74:	60b8      	str	r0, [r7, #8]
      if (status == osOK) {
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d11c      	bne.n	8002ab6 <UART_TX_init+0x62>
        if (total_size + msg.size <= 1000) {
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <UART_TX_init+0xa0>)
 8002a7e:	889b      	ldrh	r3, [r3, #4]
 8002a80:	461a      	mov	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4413      	add	r3, r2
 8002a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a8a:	d818      	bhi.n	8002abe <UART_TX_init+0x6a>
          memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <UART_TX_init+0xa4>)
 8002a90:	4413      	add	r3, r2
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <UART_TX_init+0xa0>)
 8002a94:	6811      	ldr	r1, [r2, #0]
 8002a96:	4a17      	ldr	r2, [pc, #92]	; (8002af4 <UART_TX_init+0xa0>)
 8002a98:	8892      	ldrh	r2, [r2, #4]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f013 faf8 	bl	8016090 <memcpy>
          free(msg.array);
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <UART_TX_init+0xa0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f013 faeb 	bl	8016080 <free>
          total_size += msg.size;
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <UART_TX_init+0xa0>)
 8002aac:	889b      	ldrh	r3, [r3, #4]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
        } else {

          break;
        }
      }
    } while (status == osOK);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0d3      	beq.n	8002a64 <UART_TX_init+0x10>
 8002abc:	e000      	b.n	8002ac0 <UART_TX_init+0x6c>
          break;
 8002abe:	bf00      	nop

    if (total_size > 0) {
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d010      	beq.n	8002ae8 <UART_TX_init+0x94>
      HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	490a      	ldr	r1, [pc, #40]	; (8002af8 <UART_TX_init+0xa4>)
 8002ace:	480b      	ldr	r0, [pc, #44]	; (8002afc <UART_TX_init+0xa8>)
 8002ad0:	f00d f9c0 	bl	800fe54 <HAL_UART_Transmit_DMA>

      // Wait for transmission to complete
      while (tx_flag == 0) {
 8002ad4:	e001      	b.n	8002ada <UART_TX_init+0x86>
        osThreadYield();
 8002ad6:	f00f ff3b 	bl	8012950 <osThreadYield>
      while (tx_flag == 0) {
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <UART_TX_init+0xac>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f9      	beq.n	8002ad6 <UART_TX_init+0x82>
      }

      // Reset the flag
      tx_flag = 0;
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <UART_TX_init+0xac>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
    }

    // Yield thread control
    osThreadYield();
 8002ae8:	f00f ff32 	bl	8012950 <osThreadYield>
    total_size = 0;
 8002aec:	e7b8      	b.n	8002a60 <UART_TX_init+0xc>
 8002aee:	bf00      	nop
 8002af0:	24000bcc 	.word	0x24000bcc
 8002af4:	24000bd0 	.word	0x24000bd0
 8002af8:	24000c90 	.word	0x24000c90
 8002afc:	240005ec 	.word	0x240005ec
 8002b00:	24000000 	.word	0x24000000

08002b04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b16:	f000 ff59 	bl	80039cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40001000 	.word	0x40001000

08002b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b2c:	b672      	cpsid	i
}
 8002b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b30:	e7fe      	b.n	8002b30 <Error_Handler+0x8>
	...

08002b34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <HAL_MspInit+0x38>)
 8002b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b40:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <HAL_MspInit+0x38>)
 8002b42:	f043 0302 	orr.w	r3, r3, #2
 8002b46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <HAL_MspInit+0x38>)
 8002b4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	f06f 0001 	mvn.w	r0, #1
 8002b60:	f002 fc42 	bl	80053e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	58024400 	.word	0x58024400

08002b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08e      	sub	sp, #56	; 0x38
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a7b      	ldr	r2, [pc, #492]	; (8002d7c <HAL_ADC_MspInit+0x20c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	f040 8091 	bne.w	8002cb6 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b94:	4b7a      	ldr	r3, [pc, #488]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002b96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b9a:	4a79      	ldr	r2, [pc, #484]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002b9c:	f043 0320 	orr.w	r3, r3, #32
 8002ba0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ba4:	4b76      	ldr	r3, [pc, #472]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002ba6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb2:	4b73      	ldr	r3, [pc, #460]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb8:	4a71      	ldr	r2, [pc, #452]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002bba:	f043 0304 	orr.w	r3, r3, #4
 8002bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bc2:	4b6f      	ldr	r3, [pc, #444]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	4b6b      	ldr	r3, [pc, #428]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd6:	4a6a      	ldr	r2, [pc, #424]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002be0:	4b67      	ldr	r3, [pc, #412]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bee:	4b64      	ldr	r3, [pc, #400]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf4:	4a62      	ldr	r2, [pc, #392]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002bf6:	f043 0302 	orr.w	r3, r3, #2
 8002bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bfe:	4b60      	ldr	r3, [pc, #384]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002c0c:	2333      	movs	r3, #51	; 0x33
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c10:	2303      	movs	r3, #3
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4859      	ldr	r0, [pc, #356]	; (8002d84 <HAL_ADC_MspInit+0x214>)
 8002c20:	f005 fe4c 	bl	80088bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002c24:	23ce      	movs	r3, #206	; 0xce
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c34:	4619      	mov	r1, r3
 8002c36:	4854      	ldr	r0, [pc, #336]	; (8002d88 <HAL_ADC_MspInit+0x218>)
 8002c38:	f005 fe40 	bl	80088bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c40:	2303      	movs	r3, #3
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	484f      	ldr	r0, [pc, #316]	; (8002d8c <HAL_ADC_MspInit+0x21c>)
 8002c50:	f005 fe34 	bl	80088bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002c54:	4b4e      	ldr	r3, [pc, #312]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002c56:	4a4f      	ldr	r2, [pc, #316]	; (8002d94 <HAL_ADC_MspInit+0x224>)
 8002c58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002c5c:	2209      	movs	r2, #9
 8002c5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c60:	4b4b      	ldr	r3, [pc, #300]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c6c:	4b48      	ldr	r3, [pc, #288]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c72:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c7a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c7c:	4b44      	ldr	r3, [pc, #272]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c84:	4b42      	ldr	r3, [pc, #264]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002c86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c8c:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c92:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c98:	483d      	ldr	r0, [pc, #244]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002c9a:	f002 ffd3 	bl	8005c44 <HAL_DMA_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002ca4:	f7ff ff40 	bl	8002b28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a39      	ldr	r2, [pc, #228]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002cac:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cae:	4a38      	ldr	r2, [pc, #224]	; (8002d90 <HAL_ADC_MspInit+0x220>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002cb4:	e05e      	b.n	8002d74 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a37      	ldr	r2, [pc, #220]	; (8002d98 <HAL_ADC_MspInit+0x228>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d159      	bne.n	8002d74 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002cc0:	4b2f      	ldr	r3, [pc, #188]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc6:	4a2e      	ldr	r2, [pc, #184]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cde:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce4:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002ce6:	f043 0304 	orr.w	r3, r3, #4
 8002cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_ADC_MspInit+0x210>)
 8002cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002cfc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002d00:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002d04:	f000 fe8e 	bl	8003a24 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002d08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002d0c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002d10:	f000 fe88 	bl	8003a24 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002d14:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d16:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <HAL_ADC_MspInit+0x230>)
 8002d18:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d1c:	2273      	movs	r2, #115	; 0x73
 8002d1e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d20:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d32:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d3a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d3c:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d42:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002d44:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d4a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002d4c:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002d58:	4810      	ldr	r0, [pc, #64]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d5a:	f002 ff73 	bl	8005c44 <HAL_DMA_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002d64:	f7ff fee0 	bl	8002b28 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d6c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d6e:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <HAL_ADC_MspInit+0x22c>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d74:	bf00      	nop
 8002d76:	3738      	adds	r7, #56	; 0x38
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	58024400 	.word	0x58024400
 8002d84:	58020800 	.word	0x58020800
 8002d88:	58020000 	.word	0x58020000
 8002d8c:	58020400 	.word	0x58020400
 8002d90:	24000204 	.word	0x24000204
 8002d94:	40020010 	.word	0x40020010
 8002d98:	58026000 	.word	0x58026000
 8002d9c:	2400027c 	.word	0x2400027c
 8002da0:	40020028 	.word	0x40020028

08002da4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a34      	ldr	r2, [pc, #208]	; (8002e94 <HAL_DAC_MspInit+0xf0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d161      	bne.n	8002e8a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002dc6:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <HAL_DAC_MspInit+0xf4>)
 8002dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dcc:	4a32      	ldr	r2, [pc, #200]	; (8002e98 <HAL_DAC_MspInit+0xf4>)
 8002dce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002dd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dd6:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_DAC_MspInit+0xf4>)
 8002dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de4:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <HAL_DAC_MspInit+0xf4>)
 8002de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dea:	4a2b      	ldr	r2, [pc, #172]	; (8002e98 <HAL_DAC_MspInit+0xf4>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002df4:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_DAC_MspInit+0xf4>)
 8002df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e02:	2310      	movs	r3, #16
 8002e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e06:	2303      	movs	r3, #3
 8002e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0e:	f107 0314 	add.w	r3, r7, #20
 8002e12:	4619      	mov	r1, r3
 8002e14:	4821      	ldr	r0, [pc, #132]	; (8002e9c <HAL_DAC_MspInit+0xf8>)
 8002e16:	f005 fd51 	bl	80088bc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002e1a:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e1c:	4a21      	ldr	r2, [pc, #132]	; (8002ea4 <HAL_DAC_MspInit+0x100>)
 8002e1e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002e20:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e22:	2243      	movs	r2, #67	; 0x43
 8002e24:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e28:	2240      	movs	r2, #64	; 0x40
 8002e2a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e38:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e3a:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e40:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e42:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e48:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e50:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002e5e:	4810      	ldr	r0, [pc, #64]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e60:	f002 fef0 	bl	8005c44 <HAL_DMA_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002e6a:	f7ff fe5d 	bl	8002b28 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <HAL_DAC_MspInit+0xfc>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2105      	movs	r1, #5
 8002e7e:	2036      	movs	r0, #54	; 0x36
 8002e80:	f002 fab2 	bl	80053e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e84:	2036      	movs	r0, #54	; 0x36
 8002e86:	f002 fac9 	bl	800541c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002e8a:	bf00      	nop
 8002e8c:	3728      	adds	r7, #40	; 0x28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40007400 	.word	0x40007400
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	58020000 	.word	0x58020000
 8002ea0:	24000308 	.word	0x24000308
 8002ea4:	40020088 	.word	0x40020088

08002ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b0ba      	sub	sp, #232	; 0xe8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ec0:	f107 0310 	add.w	r3, r7, #16
 8002ec4:	22c0      	movs	r2, #192	; 0xc0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f013 f8ef 	bl	80160ac <memset>
  if(hi2c->Instance==I2C1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a27      	ldr	r2, [pc, #156]	; (8002f70 <HAL_I2C_MspInit+0xc8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d146      	bne.n	8002f66 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ed8:	f04f 0208 	mov.w	r2, #8
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eea:	f107 0310 	add.w	r3, r7, #16
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f007 fd44 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002efa:	f7ff fe15 	bl	8002b28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_I2C_MspInit+0xcc>)
 8002f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f04:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <HAL_I2C_MspInit+0xcc>)
 8002f06:	f043 0302 	orr.w	r3, r3, #2
 8002f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f0e:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_I2C_MspInit+0xcc>)
 8002f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f24:	2312      	movs	r3, #18
 8002f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f36:	2304      	movs	r3, #4
 8002f38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f40:	4619      	mov	r1, r3
 8002f42:	480d      	ldr	r0, [pc, #52]	; (8002f78 <HAL_I2C_MspInit+0xd0>)
 8002f44:	f005 fcba 	bl	80088bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_I2C_MspInit+0xcc>)
 8002f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f4e:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <HAL_I2C_MspInit+0xcc>)
 8002f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_I2C_MspInit+0xcc>)
 8002f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f66:	bf00      	nop
 8002f68:	37e8      	adds	r7, #232	; 0xe8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40005400 	.word	0x40005400
 8002f74:	58024400 	.word	0x58024400
 8002f78:	58020400 	.word	0x58020400

08002f7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b0b2      	sub	sp, #200	; 0xc8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f84:	f107 0308 	add.w	r3, r7, #8
 8002f88:	22c0      	movs	r2, #192	; 0xc0
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f013 f88d 	bl	80160ac <memset>
  if(hrtc->Instance==RTC)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <HAL_RTC_MspInit+0x5c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d119      	bne.n	8002fd0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fb0:	f107 0308 	add.w	r3, r7, #8
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f007 fce1 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002fc0:	f7ff fdb2 	bl	8002b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RTC_MspInit+0x60>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <HAL_RTC_MspInit+0x60>)
 8002fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fce:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002fd0:	bf00      	nop
 8002fd2:	37c8      	adds	r7, #200	; 0xc8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	58004000 	.word	0x58004000
 8002fdc:	58024400 	.word	0x58024400

08002fe0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b0bc      	sub	sp, #240	; 0xf0
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ff8:	f107 0318 	add.w	r3, r7, #24
 8002ffc:	22c0      	movs	r2, #192	; 0xc0
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f013 f853 	bl	80160ac <memset>
  if(hspi->Instance==SPI1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a4c      	ldr	r2, [pc, #304]	; (800313c <HAL_SPI_MspInit+0x15c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d145      	bne.n	800309c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003010:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800301c:	2300      	movs	r3, #0
 800301e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003020:	f107 0318 	add.w	r3, r7, #24
 8003024:	4618      	mov	r0, r3
 8003026:	f007 fca9 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003030:	f7ff fd7a 	bl	8002b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003034:	4b42      	ldr	r3, [pc, #264]	; (8003140 <HAL_SPI_MspInit+0x160>)
 8003036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800303a:	4a41      	ldr	r2, [pc, #260]	; (8003140 <HAL_SPI_MspInit+0x160>)
 800303c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003040:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003044:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <HAL_SPI_MspInit+0x160>)
 8003046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800304a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003052:	4b3b      	ldr	r3, [pc, #236]	; (8003140 <HAL_SPI_MspInit+0x160>)
 8003054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003058:	4a39      	ldr	r2, [pc, #228]	; (8003140 <HAL_SPI_MspInit+0x160>)
 800305a:	f043 0302 	orr.w	r3, r3, #2
 800305e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003062:	4b37      	ldr	r3, [pc, #220]	; (8003140 <HAL_SPI_MspInit+0x160>)
 8003064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003070:	2318      	movs	r3, #24
 8003072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	2302      	movs	r3, #2
 8003078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003088:	2305      	movs	r3, #5
 800308a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003092:	4619      	mov	r1, r3
 8003094:	482b      	ldr	r0, [pc, #172]	; (8003144 <HAL_SPI_MspInit+0x164>)
 8003096:	f005 fc11 	bl	80088bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800309a:	e04a      	b.n	8003132 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a29      	ldr	r2, [pc, #164]	; (8003148 <HAL_SPI_MspInit+0x168>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d145      	bne.n	8003132 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80030a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030b6:	f107 0318 	add.w	r3, r7, #24
 80030ba:	4618      	mov	r0, r3
 80030bc:	f007 fc5e 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80030c6:	f7ff fd2f 	bl	8002b28 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_SPI_MspInit+0x160>)
 80030cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030d0:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <HAL_SPI_MspInit+0x160>)
 80030d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030da:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_SPI_MspInit+0x160>)
 80030dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <HAL_SPI_MspInit+0x160>)
 80030ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ee:	4a14      	ldr	r2, [pc, #80]	; (8003140 <HAL_SPI_MspInit+0x160>)
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_SPI_MspInit+0x160>)
 80030fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003106:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800310a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003120:	2305      	movs	r3, #5
 8003122:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003126:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800312a:	4619      	mov	r1, r3
 800312c:	4805      	ldr	r0, [pc, #20]	; (8003144 <HAL_SPI_MspInit+0x164>)
 800312e:	f005 fbc5 	bl	80088bc <HAL_GPIO_Init>
}
 8003132:	bf00      	nop
 8003134:	37f0      	adds	r7, #240	; 0xf0
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40013000 	.word	0x40013000
 8003140:	58024400 	.word	0x58024400
 8003144:	58020400 	.word	0x58020400
 8003148:	40003800 	.word	0x40003800

0800314c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a37      	ldr	r2, [pc, #220]	; (8003238 <HAL_TIM_Base_MspInit+0xec>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d12f      	bne.n	80031be <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800315e:	4b37      	ldr	r3, [pc, #220]	; (800323c <HAL_TIM_Base_MspInit+0xf0>)
 8003160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003164:	4a35      	ldr	r2, [pc, #212]	; (800323c <HAL_TIM_Base_MspInit+0xf0>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800316e:	4b33      	ldr	r3, [pc, #204]	; (800323c <HAL_TIM_Base_MspInit+0xf0>)
 8003170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800317c:	2200      	movs	r2, #0
 800317e:	2105      	movs	r1, #5
 8003180:	2018      	movs	r0, #24
 8003182:	f002 f931 	bl	80053e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003186:	2018      	movs	r0, #24
 8003188:	f002 f948 	bl	800541c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800318c:	2200      	movs	r2, #0
 800318e:	2105      	movs	r1, #5
 8003190:	2019      	movs	r0, #25
 8003192:	f002 f929 	bl	80053e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003196:	2019      	movs	r0, #25
 8003198:	f002 f940 	bl	800541c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2105      	movs	r1, #5
 80031a0:	201a      	movs	r0, #26
 80031a2:	f002 f921 	bl	80053e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80031a6:	201a      	movs	r0, #26
 80031a8:	f002 f938 	bl	800541c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80031ac:	2200      	movs	r2, #0
 80031ae:	2105      	movs	r1, #5
 80031b0:	201b      	movs	r0, #27
 80031b2:	f002 f919 	bl	80053e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80031b6:	201b      	movs	r0, #27
 80031b8:	f002 f930 	bl	800541c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031bc:	e038      	b.n	8003230 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c6:	d117      	bne.n	80031f8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031c8:	4b1c      	ldr	r3, [pc, #112]	; (800323c <HAL_TIM_Base_MspInit+0xf0>)
 80031ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031ce:	4a1b      	ldr	r2, [pc, #108]	; (800323c <HAL_TIM_Base_MspInit+0xf0>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <HAL_TIM_Base_MspInit+0xf0>)
 80031da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2105      	movs	r1, #5
 80031ea:	201c      	movs	r0, #28
 80031ec:	f002 f8fc 	bl	80053e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031f0:	201c      	movs	r0, #28
 80031f2:	f002 f913 	bl	800541c <HAL_NVIC_EnableIRQ>
}
 80031f6:	e01b      	b.n	8003230 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a10      	ldr	r2, [pc, #64]	; (8003240 <HAL_TIM_Base_MspInit+0xf4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d116      	bne.n	8003230 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_TIM_Base_MspInit+0xf0>)
 8003204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003208:	4a0c      	ldr	r2, [pc, #48]	; (800323c <HAL_TIM_Base_MspInit+0xf0>)
 800320a:	f043 0302 	orr.w	r3, r3, #2
 800320e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_TIM_Base_MspInit+0xf0>)
 8003214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003220:	2200      	movs	r2, #0
 8003222:	2105      	movs	r1, #5
 8003224:	201d      	movs	r0, #29
 8003226:	f002 f8df 	bl	80053e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800322a:	201d      	movs	r0, #29
 800322c:	f002 f8f6 	bl	800541c <HAL_NVIC_EnableIRQ>
}
 8003230:	bf00      	nop
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40010000 	.word	0x40010000
 800323c:	58024400 	.word	0x58024400
 8003240:	40000400 	.word	0x40000400

08003244 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a26      	ldr	r2, [pc, #152]	; (80032fc <HAL_TIM_MspPostInit+0xb8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d120      	bne.n	80032a8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <HAL_TIM_MspPostInit+0xbc>)
 8003268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326c:	4a24      	ldr	r2, [pc, #144]	; (8003300 <HAL_TIM_MspPostInit+0xbc>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003276:	4b22      	ldr	r3, [pc, #136]	; (8003300 <HAL_TIM_MspPostInit+0xbc>)
 8003278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003296:	2301      	movs	r3, #1
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329a:	f107 0314 	add.w	r3, r7, #20
 800329e:	4619      	mov	r1, r3
 80032a0:	4818      	ldr	r0, [pc, #96]	; (8003304 <HAL_TIM_MspPostInit+0xc0>)
 80032a2:	f005 fb0b 	bl	80088bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80032a6:	e024      	b.n	80032f2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d11f      	bne.n	80032f2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b2:	4b13      	ldr	r3, [pc, #76]	; (8003300 <HAL_TIM_MspPostInit+0xbc>)
 80032b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b8:	4a11      	ldr	r2, [pc, #68]	; (8003300 <HAL_TIM_MspPostInit+0xbc>)
 80032ba:	f043 0302 	orr.w	r3, r3, #2
 80032be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_TIM_MspPostInit+0xbc>)
 80032c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80032d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d6:	2302      	movs	r3, #2
 80032d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032e2:	2301      	movs	r3, #1
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e6:	f107 0314 	add.w	r3, r7, #20
 80032ea:	4619      	mov	r1, r3
 80032ec:	4806      	ldr	r0, [pc, #24]	; (8003308 <HAL_TIM_MspPostInit+0xc4>)
 80032ee:	f005 fae5 	bl	80088bc <HAL_GPIO_Init>
}
 80032f2:	bf00      	nop
 80032f4:	3728      	adds	r7, #40	; 0x28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40010000 	.word	0x40010000
 8003300:	58024400 	.word	0x58024400
 8003304:	58020000 	.word	0x58020000
 8003308:	58020400 	.word	0x58020400

0800330c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b0ba      	sub	sp, #232	; 0xe8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003324:	f107 0310 	add.w	r3, r7, #16
 8003328:	22c0      	movs	r2, #192	; 0xc0
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f012 febd 	bl	80160ac <memset>
  if(huart->Instance==USART1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a41      	ldr	r2, [pc, #260]	; (800343c <HAL_UART_MspInit+0x130>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d17b      	bne.n	8003434 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800333c:	f04f 0201 	mov.w	r2, #1
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800334e:	f107 0310 	add.w	r3, r7, #16
 8003352:	4618      	mov	r0, r3
 8003354:	f007 fb12 	bl	800a97c <HAL_RCCEx_PeriphCLKConfig>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800335e:	f7ff fbe3 	bl	8002b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_UART_MspInit+0x134>)
 8003364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003368:	4a35      	ldr	r2, [pc, #212]	; (8003440 <HAL_UART_MspInit+0x134>)
 800336a:	f043 0310 	orr.w	r3, r3, #16
 800336e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003372:	4b33      	ldr	r3, [pc, #204]	; (8003440 <HAL_UART_MspInit+0x134>)
 8003374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003380:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <HAL_UART_MspInit+0x134>)
 8003382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003386:	4a2e      	ldr	r2, [pc, #184]	; (8003440 <HAL_UART_MspInit+0x134>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003390:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <HAL_UART_MspInit+0x134>)
 8003392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800339e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033b8:	2307      	movs	r3, #7
 80033ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033c2:	4619      	mov	r1, r3
 80033c4:	481f      	ldr	r0, [pc, #124]	; (8003444 <HAL_UART_MspInit+0x138>)
 80033c6:	f005 fa79 	bl	80088bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80033ca:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <HAL_UART_MspInit+0x13c>)
 80033cc:	4a1f      	ldr	r2, [pc, #124]	; (800344c <HAL_UART_MspInit+0x140>)
 80033ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_UART_MspInit+0x13c>)
 80033d2:	222a      	movs	r2, #42	; 0x2a
 80033d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033d6:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <HAL_UART_MspInit+0x13c>)
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033dc:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_UART_MspInit+0x13c>)
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033e2:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_UART_MspInit+0x13c>)
 80033e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033ea:	4b17      	ldr	r3, [pc, #92]	; (8003448 <HAL_UART_MspInit+0x13c>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_UART_MspInit+0x13c>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80033f6:	4b14      	ldr	r3, [pc, #80]	; (8003448 <HAL_UART_MspInit+0x13c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033fc:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_UART_MspInit+0x13c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_UART_MspInit+0x13c>)
 8003404:	2200      	movs	r2, #0
 8003406:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003408:	480f      	ldr	r0, [pc, #60]	; (8003448 <HAL_UART_MspInit+0x13c>)
 800340a:	f002 fc1b 	bl	8005c44 <HAL_DMA_Init>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003414:	f7ff fb88 	bl	8002b28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a0b      	ldr	r2, [pc, #44]	; (8003448 <HAL_UART_MspInit+0x13c>)
 800341c:	67da      	str	r2, [r3, #124]	; 0x7c
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <HAL_UART_MspInit+0x13c>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003424:	2200      	movs	r2, #0
 8003426:	2105      	movs	r1, #5
 8003428:	2025      	movs	r0, #37	; 0x25
 800342a:	f001 ffdd 	bl	80053e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800342e:	2025      	movs	r0, #37	; 0x25
 8003430:	f001 fff4 	bl	800541c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003434:	bf00      	nop
 8003436:	37e8      	adds	r7, #232	; 0xe8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40011000 	.word	0x40011000
 8003440:	58024400 	.word	0x58024400
 8003444:	58020000 	.word	0x58020000
 8003448:	24000680 	.word	0x24000680
 800344c:	40020040 	.word	0x40020040

08003450 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b090      	sub	sp, #64	; 0x40
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b0f      	cmp	r3, #15
 800345c:	d827      	bhi.n	80034ae <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800345e:	2200      	movs	r2, #0
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	2036      	movs	r0, #54	; 0x36
 8003464:	f001 ffc0 	bl	80053e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003468:	2036      	movs	r0, #54	; 0x36
 800346a:	f001 ffd7 	bl	800541c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800346e:	4a29      	ldr	r2, [pc, #164]	; (8003514 <HAL_InitTick+0xc4>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003474:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_InitTick+0xc8>)
 8003476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800347a:	4a27      	ldr	r2, [pc, #156]	; (8003518 <HAL_InitTick+0xc8>)
 800347c:	f043 0310 	orr.w	r3, r3, #16
 8003480:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_InitTick+0xc8>)
 8003486:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003492:	f107 0210 	add.w	r2, r7, #16
 8003496:	f107 0314 	add.w	r3, r7, #20
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f007 fa2b 	bl	800a8f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80034a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d106      	bne.n	80034ba <HAL_InitTick+0x6a>
 80034ac:	e001      	b.n	80034b2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e02b      	b.n	800350a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80034b2:	f007 f9f5 	bl	800a8a0 <HAL_RCC_GetPCLK1Freq>
 80034b6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80034b8:	e004      	b.n	80034c4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80034ba:	f007 f9f1 	bl	800a8a0 <HAL_RCC_GetPCLK1Freq>
 80034be:	4603      	mov	r3, r0
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c6:	4a15      	ldr	r2, [pc, #84]	; (800351c <HAL_InitTick+0xcc>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	0c9b      	lsrs	r3, r3, #18
 80034ce:	3b01      	subs	r3, #1
 80034d0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80034d2:	4b13      	ldr	r3, [pc, #76]	; (8003520 <HAL_InitTick+0xd0>)
 80034d4:	4a13      	ldr	r2, [pc, #76]	; (8003524 <HAL_InitTick+0xd4>)
 80034d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <HAL_InitTick+0xd0>)
 80034da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80034e0:	4a0f      	ldr	r2, [pc, #60]	; (8003520 <HAL_InitTick+0xd0>)
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_InitTick+0xd0>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <HAL_InitTick+0xd0>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80034f2:	480b      	ldr	r0, [pc, #44]	; (8003520 <HAL_InitTick+0xd0>)
 80034f4:	f00a feb3 	bl	800e25e <HAL_TIM_Base_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d104      	bne.n	8003508 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80034fe:	4808      	ldr	r0, [pc, #32]	; (8003520 <HAL_InitTick+0xd0>)
 8003500:	f00a ff04 	bl	800e30c <HAL_TIM_Base_Start_IT>
 8003504:	4603      	mov	r3, r0
 8003506:	e000      	b.n	800350a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
}
 800350a:	4618      	mov	r0, r3
 800350c:	3740      	adds	r7, #64	; 0x40
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	24000098 	.word	0x24000098
 8003518:	58024400 	.word	0x58024400
 800351c:	431bde83 	.word	0x431bde83
 8003520:	24001078 	.word	0x24001078
 8003524:	40001000 	.word	0x40001000

08003528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800352c:	e7fe      	b.n	800352c <NMI_Handler+0x4>

0800352e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003532:	e7fe      	b.n	8003532 <HardFault_Handler+0x4>

08003534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003538:	e7fe      	b.n	8003538 <MemManage_Handler+0x4>

0800353a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800353e:	e7fe      	b.n	800353e <BusFault_Handler+0x4>

08003540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003544:	e7fe      	b.n	8003544 <UsageFault_Handler+0x4>

08003546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003546:	b480      	push	{r7}
 8003548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <DMA1_Stream0_IRQHandler+0x10>)
 800355a:	f003 fe9d 	bl	8007298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	24000204 	.word	0x24000204

08003568 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <DMA1_Stream1_IRQHandler+0x10>)
 800356e:	f003 fe93 	bl	8007298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	2400027c 	.word	0x2400027c

0800357c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003580:	4802      	ldr	r0, [pc, #8]	; (800358c <DMA1_Stream2_IRQHandler+0x10>)
 8003582:	f003 fe89 	bl	8007298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	24000680 	.word	0x24000680

08003590 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <DMA1_Stream5_IRQHandler+0x10>)
 8003596:	f003 fe7f 	bl	8007298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	24000308 	.word	0x24000308

080035a4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035a8:	4802      	ldr	r0, [pc, #8]	; (80035b4 <TIM1_BRK_IRQHandler+0x10>)
 80035aa:	f00b f9c6 	bl	800e93a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	24000508 	.word	0x24000508

080035b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035bc:	4802      	ldr	r0, [pc, #8]	; (80035c8 <TIM1_UP_IRQHandler+0x10>)
 80035be:	f00b f9bc 	bl	800e93a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	24000508 	.word	0x24000508

080035cc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035d0:	4802      	ldr	r0, [pc, #8]	; (80035dc <TIM1_TRG_COM_IRQHandler+0x10>)
 80035d2:	f00b f9b2 	bl	800e93a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	24000508 	.word	0x24000508

080035e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035e4:	4802      	ldr	r0, [pc, #8]	; (80035f0 <TIM1_CC_IRQHandler+0x10>)
 80035e6:	f00b f9a8 	bl	800e93a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	24000508 	.word	0x24000508

080035f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035f8:	4802      	ldr	r0, [pc, #8]	; (8003604 <TIM2_IRQHandler+0x10>)
 80035fa:	f00b f99e 	bl	800e93a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	24000554 	.word	0x24000554

08003608 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800360c:	4802      	ldr	r0, [pc, #8]	; (8003618 <TIM3_IRQHandler+0x10>)
 800360e:	f00b f994 	bl	800e93a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	240005a0 	.word	0x240005a0

0800361c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003620:	4802      	ldr	r0, [pc, #8]	; (800362c <USART1_IRQHandler+0x10>)
 8003622:	f00c fc97 	bl	800ff54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	240005ec 	.word	0x240005ec

08003630 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <TIM6_DAC_IRQHandler+0x20>)
 8003636:	791b      	ldrb	r3, [r3, #4]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800363e:	4804      	ldr	r0, [pc, #16]	; (8003650 <TIM6_DAC_IRQHandler+0x20>)
 8003640:	f002 f881 	bl	8005746 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003644:	4803      	ldr	r0, [pc, #12]	; (8003654 <TIM6_DAC_IRQHandler+0x24>)
 8003646:	f00b f978 	bl	800e93a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	240002f4 	.word	0x240002f4
 8003654:	24001078 	.word	0x24001078

08003658 <ITM_SendChar>:
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
 8003662:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <ITM_SendChar+0x48>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <ITM_SendChar+0x48>)
 8003668:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <ITM_SendChar+0x4c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a0c      	ldr	r2, [pc, #48]	; (80036a4 <ITM_SendChar+0x4c>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	bf00      	nop
 800367c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f8      	beq.n	800367c <ITM_SendChar+0x24>
 800368a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	e000edfc 	.word	0xe000edfc
 80036a4:	e0000e00 	.word	0xe0000e00

080036a8 <_read>:
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	e00a      	b.n	80036d0 <_read+0x28>
 80036ba:	f3af 8000 	nop.w
 80036be:	4601      	mov	r1, r0
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	60ba      	str	r2, [r7, #8]
 80036c6:	b2ca      	uxtb	r2, r1
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	3301      	adds	r3, #1
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	dbf0      	blt.n	80036ba <_read+0x12>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <_write>:
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e009      	b.n	8003708 <_write+0x26>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	60ba      	str	r2, [r7, #8]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ffab 	bl	8003658 <ITM_SendChar>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	3301      	adds	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	dbf1      	blt.n	80036f4 <_write+0x12>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <_close>:
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <_fstat>:
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	2300      	movs	r3, #0
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <_isatty>:
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	2301      	movs	r3, #1
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <_lseek>:
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	2300      	movs	r3, #0
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <_sbrk>:
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <_sbrk+0x5c>)
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <_sbrk+0x60>)
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <_sbrk+0x64>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <_sbrk+0x22>
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <_sbrk+0x64>)
 80037a2:	4a12      	ldr	r2, [pc, #72]	; (80037ec <_sbrk+0x68>)
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <_sbrk+0x64>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d207      	bcs.n	80037c4 <_sbrk+0x40>
 80037b4:	f012 fc32 	bl	801601c <__errno>
 80037b8:	4603      	mov	r3, r0
 80037ba:	220c      	movs	r2, #12
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c2:	e009      	b.n	80037d8 <_sbrk+0x54>
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <_sbrk+0x64>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <_sbrk+0x64>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <_sbrk+0x64>)
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	24080000 	.word	0x24080000
 80037e4:	00000400 	.word	0x00000400
 80037e8:	240010c4 	.word	0x240010c4
 80037ec:	24005a30 	.word	0x24005a30

080037f0 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80037f4:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <SystemInit+0xe4>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	4a36      	ldr	r2, [pc, #216]	; (80038d4 <SystemInit+0xe4>)
 80037fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003804:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <SystemInit+0xe8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	2b06      	cmp	r3, #6
 800380e:	d807      	bhi.n	8003820 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003810:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <SystemInit+0xe8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 030f 	bic.w	r3, r3, #15
 8003818:	4a2f      	ldr	r2, [pc, #188]	; (80038d8 <SystemInit+0xe8>)
 800381a:	f043 0307 	orr.w	r3, r3, #7
 800381e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003820:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <SystemInit+0xec>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a2d      	ldr	r2, [pc, #180]	; (80038dc <SystemInit+0xec>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800382c:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <SystemInit+0xec>)
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003832:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <SystemInit+0xec>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4929      	ldr	r1, [pc, #164]	; (80038dc <SystemInit+0xec>)
 8003838:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <SystemInit+0xf0>)
 800383a:	4013      	ands	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800383e:	4b26      	ldr	r3, [pc, #152]	; (80038d8 <SystemInit+0xe8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800384a:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <SystemInit+0xe8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 030f 	bic.w	r3, r3, #15
 8003852:	4a21      	ldr	r2, [pc, #132]	; (80038d8 <SystemInit+0xe8>)
 8003854:	f043 0307 	orr.w	r3, r3, #7
 8003858:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <SystemInit+0xec>)
 800385c:	2200      	movs	r2, #0
 800385e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <SystemInit+0xec>)
 8003862:	2200      	movs	r2, #0
 8003864:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003866:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <SystemInit+0xec>)
 8003868:	2200      	movs	r2, #0
 800386a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <SystemInit+0xec>)
 800386e:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <SystemInit+0xf4>)
 8003870:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <SystemInit+0xec>)
 8003874:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <SystemInit+0xf8>)
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003878:	4b18      	ldr	r3, [pc, #96]	; (80038dc <SystemInit+0xec>)
 800387a:	4a1c      	ldr	r2, [pc, #112]	; (80038ec <SystemInit+0xfc>)
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800387e:	4b17      	ldr	r3, [pc, #92]	; (80038dc <SystemInit+0xec>)
 8003880:	2200      	movs	r2, #0
 8003882:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003884:	4b15      	ldr	r3, [pc, #84]	; (80038dc <SystemInit+0xec>)
 8003886:	4a19      	ldr	r2, [pc, #100]	; (80038ec <SystemInit+0xfc>)
 8003888:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800388a:	4b14      	ldr	r3, [pc, #80]	; (80038dc <SystemInit+0xec>)
 800388c:	2200      	movs	r2, #0
 800388e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <SystemInit+0xec>)
 8003892:	4a16      	ldr	r2, [pc, #88]	; (80038ec <SystemInit+0xfc>)
 8003894:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003896:	4b11      	ldr	r3, [pc, #68]	; (80038dc <SystemInit+0xec>)
 8003898:	2200      	movs	r2, #0
 800389a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800389c:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <SystemInit+0xec>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0e      	ldr	r2, [pc, #56]	; (80038dc <SystemInit+0xec>)
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a6:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <SystemInit+0xec>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80038ae:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <SystemInit+0x100>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <SystemInit+0x104>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ba:	d202      	bcs.n	80038c2 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <SystemInit+0x108>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <SystemInit+0x10c>)
 80038c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80038c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80038ca:	bf00      	nop
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000ed00 	.word	0xe000ed00
 80038d8:	52002000 	.word	0x52002000
 80038dc:	58024400 	.word	0x58024400
 80038e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80038e4:	02020200 	.word	0x02020200
 80038e8:	01ff0000 	.word	0x01ff0000
 80038ec:	01010280 	.word	0x01010280
 80038f0:	5c001000 	.word	0x5c001000
 80038f4:	ffff0000 	.word	0xffff0000
 80038f8:	51008108 	.word	0x51008108
 80038fc:	52004000 	.word	0x52004000

08003900 <Reset_Handler>:
 8003900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003938 <LoopFillZerobss+0xe>
 8003904:	f7ff ff74 	bl	80037f0 <SystemInit>
 8003908:	480c      	ldr	r0, [pc, #48]	; (800393c <LoopFillZerobss+0x12>)
 800390a:	490d      	ldr	r1, [pc, #52]	; (8003940 <LoopFillZerobss+0x16>)
 800390c:	4a0d      	ldr	r2, [pc, #52]	; (8003944 <LoopFillZerobss+0x1a>)
 800390e:	2300      	movs	r3, #0
 8003910:	e002      	b.n	8003918 <LoopCopyDataInit>

08003912 <CopyDataInit>:
 8003912:	58d4      	ldr	r4, [r2, r3]
 8003914:	50c4      	str	r4, [r0, r3]
 8003916:	3304      	adds	r3, #4

08003918 <LoopCopyDataInit>:
 8003918:	18c4      	adds	r4, r0, r3
 800391a:	428c      	cmp	r4, r1
 800391c:	d3f9      	bcc.n	8003912 <CopyDataInit>
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <LoopFillZerobss+0x1e>)
 8003920:	4c0a      	ldr	r4, [pc, #40]	; (800394c <LoopFillZerobss+0x22>)
 8003922:	2300      	movs	r3, #0
 8003924:	e001      	b.n	800392a <LoopFillZerobss>

08003926 <FillZerobss>:
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	3204      	adds	r2, #4

0800392a <LoopFillZerobss>:
 800392a:	42a2      	cmp	r2, r4
 800392c:	d3fb      	bcc.n	8003926 <FillZerobss>
 800392e:	f012 fb7b 	bl	8016028 <__libc_init_array>
 8003932:	f7fd faa9 	bl	8000e88 <main>
 8003936:	4770      	bx	lr
 8003938:	24080000 	.word	0x24080000
 800393c:	24000000 	.word	0x24000000
 8003940:	24000108 	.word	0x24000108
 8003944:	08016ef4 	.word	0x08016ef4
 8003948:	24000120 	.word	0x24000120
 800394c:	24005a2c 	.word	0x24005a2c

08003950 <ADC3_IRQHandler>:
 8003950:	e7fe      	b.n	8003950 <ADC3_IRQHandler>
	...

08003954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800395a:	2003      	movs	r0, #3
 800395c:	f001 fd39 	bl	80053d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003960:	f006 fdf4 	bl	800a54c <HAL_RCC_GetSysClockFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <HAL_Init+0x68>)
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	4913      	ldr	r1, [pc, #76]	; (80039c0 <HAL_Init+0x6c>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
 800397c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800397e:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <HAL_Init+0x68>)
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <HAL_Init+0x6c>)
 8003988:	5cd3      	ldrb	r3, [r2, r3]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
 8003994:	4a0b      	ldr	r2, [pc, #44]	; (80039c4 <HAL_Init+0x70>)
 8003996:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003998:	4a0b      	ldr	r2, [pc, #44]	; (80039c8 <HAL_Init+0x74>)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800399e:	2005      	movs	r0, #5
 80039a0:	f7ff fd56 	bl	8003450 <HAL_InitTick>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e002      	b.n	80039b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039ae:	f7ff f8c1 	bl	8002b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	58024400 	.word	0x58024400
 80039c0:	08016e40 	.word	0x08016e40
 80039c4:	24000094 	.word	0x24000094
 80039c8:	24000090 	.word	0x24000090

080039cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_IncTick+0x20>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_IncTick+0x24>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4413      	add	r3, r2
 80039dc:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <HAL_IncTick+0x24>)
 80039de:	6013      	str	r3, [r2, #0]
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	2400009c 	.word	0x2400009c
 80039f0:	240010c8 	.word	0x240010c8

080039f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return uwTick;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_GetTick+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	240010c8 	.word	0x240010c8

08003a0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_GetREVID+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	0c1b      	lsrs	r3, r3, #16
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	5c001000 	.word	0x5c001000

08003a24 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003a2e:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	4904      	ldr	r1, [pc, #16]	; (8003a4c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	58000400 	.word	0x58000400

08003a50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	609a      	str	r2, [r3, #8]
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3360      	adds	r3, #96	; 0x60
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	611a      	str	r2, [r3, #16]
}
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b087      	sub	sp, #28
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3360      	adds	r3, #96	; 0x60
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	601a      	str	r2, [r3, #0]
  }
}
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b087      	sub	sp, #28
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3330      	adds	r3, #48	; 0x30
 8003b96:	461a      	mov	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	4413      	add	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	211f      	movs	r1, #31
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	401a      	ands	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	0e9b      	lsrs	r3, r3, #26
 8003bbe:	f003 011f 	and.w	r1, r3, #31
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f023 0203 	bic.w	r2, r3, #3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60da      	str	r2, [r3, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3314      	adds	r3, #20
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	0e5b      	lsrs	r3, r3, #25
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	4413      	add	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	0d1b      	lsrs	r3, r3, #20
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	2107      	movs	r1, #7
 8003c32:	fa01 f303 	lsl.w	r3, r1, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	401a      	ands	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	0d1b      	lsrs	r3, r3, #20
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
	...

08003c5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c74:	43db      	mvns	r3, r3
 8003c76:	401a      	ands	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f003 0318 	and.w	r3, r3, #24
 8003c7e:	4908      	ldr	r1, [pc, #32]	; (8003ca0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c80:	40d9      	lsrs	r1, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	400b      	ands	r3, r1
 8003c86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	000fffff 	.word	0x000fffff

08003ca4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6093      	str	r3, [r2, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	5fffffc0 	.word	0x5fffffc0

08003ce4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf8:	d101      	bne.n	8003cfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	6fffffc0 	.word	0x6fffffc0

08003d34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d48:	d101      	bne.n	8003d4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <LL_ADC_Enable+0x24>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	f043 0201 	orr.w	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	7fffffc0 	.word	0x7fffffc0

08003d84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <LL_ADC_Disable+0x24>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	f043 0202 	orr.w	r2, r3, #2
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	7fffffc0 	.word	0x7fffffc0

08003dac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <LL_ADC_IsEnabled+0x18>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <LL_ADC_IsEnabled+0x1a>
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d101      	bne.n	8003dea <LL_ADC_IsDisableOngoing+0x18>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <LL_ADC_IsDisableOngoing+0x1a>
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <LL_ADC_REG_StartConversion+0x24>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	f043 0204 	orr.w	r2, r3, #4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	7fffffc0 	.word	0x7fffffc0

08003e20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d101      	bne.n	8003e38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d101      	bne.n	8003e5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b089      	sub	sp, #36	; 0x24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e18f      	b.n	80041a6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fe fe6b 	bl	8002b70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff19 	bl	8003ce4 <LL_ADC_IsDeepPowerDownEnabled>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff feff 	bl	8003cc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff34 	bl	8003d34 <LL_ADC_IsInternalRegulatorEnabled>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d114      	bne.n	8003efc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ff18 	bl	8003d0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003edc:	4b87      	ldr	r3, [pc, #540]	; (80040fc <HAL_ADC_Init+0x290>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	099b      	lsrs	r3, r3, #6
 8003ee2:	4a87      	ldr	r2, [pc, #540]	; (8004100 <HAL_ADC_Init+0x294>)
 8003ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee8:	099b      	lsrs	r3, r3, #6
 8003eea:	3301      	adds	r3, #1
 8003eec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003eee:	e002      	b.n	8003ef6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f9      	bne.n	8003ef0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff ff17 	bl	8003d34 <LL_ADC_IsInternalRegulatorEnabled>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10d      	bne.n	8003f28 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f043 0210 	orr.w	r2, r3, #16
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	f043 0201 	orr.w	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff77 	bl	8003e20 <LL_ADC_REG_IsConversionOngoing>
 8003f32:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f040 8129 	bne.w	8004194 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f040 8125 	bne.w	8004194 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff ff24 	bl	8003dac <LL_ADC_IsEnabled>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d136      	bne.n	8003fd8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a65      	ldr	r2, [pc, #404]	; (8004104 <HAL_ADC_Init+0x298>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_ADC_Init+0x112>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a63      	ldr	r2, [pc, #396]	; (8004108 <HAL_ADC_Init+0x29c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d10e      	bne.n	8003f9c <HAL_ADC_Init+0x130>
 8003f7e:	4861      	ldr	r0, [pc, #388]	; (8004104 <HAL_ADC_Init+0x298>)
 8003f80:	f7ff ff14 	bl	8003dac <LL_ADC_IsEnabled>
 8003f84:	4604      	mov	r4, r0
 8003f86:	4860      	ldr	r0, [pc, #384]	; (8004108 <HAL_ADC_Init+0x29c>)
 8003f88:	f7ff ff10 	bl	8003dac <LL_ADC_IsEnabled>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	4323      	orrs	r3, r4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e008      	b.n	8003fae <HAL_ADC_Init+0x142>
 8003f9c:	485b      	ldr	r0, [pc, #364]	; (800410c <HAL_ADC_Init+0x2a0>)
 8003f9e:	f7ff ff05 	bl	8003dac <LL_ADC_IsEnabled>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d012      	beq.n	8003fd8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a53      	ldr	r2, [pc, #332]	; (8004104 <HAL_ADC_Init+0x298>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d004      	beq.n	8003fc6 <HAL_ADC_Init+0x15a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a51      	ldr	r2, [pc, #324]	; (8004108 <HAL_ADC_Init+0x29c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d101      	bne.n	8003fca <HAL_ADC_Init+0x15e>
 8003fc6:	4a52      	ldr	r2, [pc, #328]	; (8004110 <HAL_ADC_Init+0x2a4>)
 8003fc8:	e000      	b.n	8003fcc <HAL_ADC_Init+0x160>
 8003fca:	4a52      	ldr	r2, [pc, #328]	; (8004114 <HAL_ADC_Init+0x2a8>)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f7ff fd3c 	bl	8003a50 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003fd8:	f7ff fd18 	bl	8003a0c <HAL_GetREVID>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d914      	bls.n	8004010 <HAL_ADC_Init+0x1a4>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d110      	bne.n	8004010 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7d5b      	ldrb	r3, [r3, #21]
 8003ff2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ff8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ffe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7f1b      	ldrb	r3, [r3, #28]
 8004004:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004006:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004008:	f043 030c 	orr.w	r3, r3, #12
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	e00d      	b.n	800402c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	7d5b      	ldrb	r3, [r3, #21]
 8004014:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800401a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004020:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	7f1b      	ldrb	r3, [r3, #28]
 8004026:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	7f1b      	ldrb	r3, [r3, #28]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d106      	bne.n	8004042 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	3b01      	subs	r3, #1
 800403a:	045b      	lsls	r3, r3, #17
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_ADC_Init+0x2ac>)
 8004066:	4013      	ands	r3, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	69b9      	ldr	r1, [r7, #24]
 800406e:	430b      	orrs	r3, r1
 8004070:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fed2 	bl	8003e20 <LL_ADC_REG_IsConversionOngoing>
 800407c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fedf 	bl	8003e46 <LL_ADC_INJ_IsConversionOngoing>
 8004088:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d15f      	bne.n	8004150 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d15c      	bne.n	8004150 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	7d1b      	ldrb	r3, [r3, #20]
 800409a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	4b1c      	ldr	r3, [pc, #112]	; (800411c <HAL_ADC_Init+0x2b0>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	69b9      	ldr	r1, [r7, #24]
 80040b4:	430b      	orrs	r3, r1
 80040b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d130      	bne.n	8004124 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <HAL_ADC_Init+0x2b4>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040d6:	3a01      	subs	r2, #1
 80040d8:	0411      	lsls	r1, r2, #16
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040de:	4311      	orrs	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040e4:	4311      	orrs	r1, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040ea:	430a      	orrs	r2, r1
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	611a      	str	r2, [r3, #16]
 80040f8:	e01c      	b.n	8004134 <HAL_ADC_Init+0x2c8>
 80040fa:	bf00      	nop
 80040fc:	24000090 	.word	0x24000090
 8004100:	053e2d63 	.word	0x053e2d63
 8004104:	40022000 	.word	0x40022000
 8004108:	40022100 	.word	0x40022100
 800410c:	58026000 	.word	0x58026000
 8004110:	40022300 	.word	0x40022300
 8004114:	58026300 	.word	0x58026300
 8004118:	fff0c003 	.word	0xfff0c003
 800411c:	ffffbffc 	.word	0xffffbffc
 8004120:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fdec 	bl	8004d28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10c      	bne.n	8004172 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	f023 010f 	bic.w	r1, r3, #15
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	1e5a      	subs	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
 8004170:	e007      	b.n	8004182 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 020f 	bic.w	r2, r2, #15
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	f043 0201 	orr.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
 8004192:	e007      	b.n	80041a4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	f043 0210 	orr.w	r2, r3, #16
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3724      	adds	r7, #36	; 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd90      	pop	{r4, r7, pc}
 80041ae:	bf00      	nop

080041b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a55      	ldr	r2, [pc, #340]	; (8004318 <HAL_ADC_Start_DMA+0x168>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <HAL_ADC_Start_DMA+0x20>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a54      	ldr	r2, [pc, #336]	; (800431c <HAL_ADC_Start_DMA+0x16c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <HAL_ADC_Start_DMA+0x24>
 80041d0:	4b53      	ldr	r3, [pc, #332]	; (8004320 <HAL_ADC_Start_DMA+0x170>)
 80041d2:	e000      	b.n	80041d6 <HAL_ADC_Start_DMA+0x26>
 80041d4:	4b53      	ldr	r3, [pc, #332]	; (8004324 <HAL_ADC_Start_DMA+0x174>)
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fd64 	bl	8003ca4 <LL_ADC_GetMultimode>
 80041dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fe1c 	bl	8003e20 <LL_ADC_REG_IsConversionOngoing>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 808c 	bne.w	8004308 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_ADC_Start_DMA+0x4e>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e087      	b.n	800430e <HAL_ADC_Start_DMA+0x15e>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b05      	cmp	r3, #5
 8004210:	d002      	beq.n	8004218 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b09      	cmp	r3, #9
 8004216:	d170      	bne.n	80042fa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 fc07 	bl	8004a2c <ADC_Enable>
 800421e:	4603      	mov	r3, r0
 8004220:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d163      	bne.n	80042f0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800422c:	4b3e      	ldr	r3, [pc, #248]	; (8004328 <HAL_ADC_Start_DMA+0x178>)
 800422e:	4013      	ands	r3, r2
 8004230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a37      	ldr	r2, [pc, #220]	; (800431c <HAL_ADC_Start_DMA+0x16c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d002      	beq.n	8004248 <HAL_ADC_Start_DMA+0x98>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	e000      	b.n	800424a <HAL_ADC_Start_DMA+0x9a>
 8004248:	4b33      	ldr	r3, [pc, #204]	; (8004318 <HAL_ADC_Start_DMA+0x168>)
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	4293      	cmp	r3, r2
 8004250:	d002      	beq.n	8004258 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d105      	bne.n	8004264 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d006      	beq.n	800427e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	f023 0206 	bic.w	r2, r3, #6
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	659a      	str	r2, [r3, #88]	; 0x58
 800427c:	e002      	b.n	8004284 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004288:	4a28      	ldr	r2, [pc, #160]	; (800432c <HAL_ADC_Start_DMA+0x17c>)
 800428a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <HAL_ADC_Start_DMA+0x180>)
 8004292:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004298:	4a26      	ldr	r2, [pc, #152]	; (8004334 <HAL_ADC_Start_DMA+0x184>)
 800429a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	221c      	movs	r2, #28
 80042a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0210 	orr.w	r2, r2, #16
 80042ba:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f7ff fc89 	bl	8003bde <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3340      	adds	r3, #64	; 0x40
 80042d6:	4619      	mov	r1, r3
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f002 f80e 	bl	80062fc <HAL_DMA_Start_IT>
 80042e0:	4603      	mov	r3, r0
 80042e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fd85 	bl	8003df8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80042ee:	e00d      	b.n	800430c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80042f8:	e008      	b.n	800430c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004306:	e001      	b.n	800430c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004308:	2302      	movs	r3, #2
 800430a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800430c:	7dfb      	ldrb	r3, [r7, #23]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40022000 	.word	0x40022000
 800431c:	40022100 	.word	0x40022100
 8004320:	40022300 	.word	0x40022300
 8004324:	58026300 	.word	0x58026300
 8004328:	fffff0fe 	.word	0xfffff0fe
 800432c:	08004bff 	.word	0x08004bff
 8004330:	08004cd7 	.word	0x08004cd7
 8004334:	08004cf3 	.word	0x08004cf3

08004338 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b0a1      	sub	sp, #132	; 0x84
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4a65      	ldr	r2, [pc, #404]	; (8004524 <HAL_ADC_ConfigChannel+0x1b0>)
 800438e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_ADC_ConfigChannel+0x2a>
 800439a:	2302      	movs	r3, #2
 800439c:	e32e      	b.n	80049fc <HAL_ADC_ConfigChannel+0x688>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fd38 	bl	8003e20 <LL_ADC_REG_IsConversionOngoing>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f040 8313 	bne.w	80049de <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	db2c      	blt.n	800441a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d108      	bne.n	80043de <HAL_ADC_ConfigChannel+0x6a>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0e9b      	lsrs	r3, r3, #26
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2201      	movs	r2, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	e016      	b.n	800440c <HAL_ADC_ConfigChannel+0x98>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ee:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80043f6:	2320      	movs	r3, #32
 80043f8:	e003      	b.n	8004402 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80043fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043fc:	fab3 f383 	clz	r3, r3
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2201      	movs	r2, #1
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	69d1      	ldr	r1, [r2, #28]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	430b      	orrs	r3, r1
 8004418:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6859      	ldr	r1, [r3, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	f7ff fbad 	bl	8003b86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fcf5 	bl	8003e20 <LL_ADC_REG_IsConversionOngoing>
 8004436:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fd02 	bl	8003e46 <LL_ADC_INJ_IsConversionOngoing>
 8004442:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004446:	2b00      	cmp	r3, #0
 8004448:	f040 80b8 	bne.w	80045bc <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800444c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800444e:	2b00      	cmp	r3, #0
 8004450:	f040 80b4 	bne.w	80045bc <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6819      	ldr	r1, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	461a      	mov	r2, r3
 8004462:	f7ff fbcf 	bl	8003c04 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004466:	4b30      	ldr	r3, [pc, #192]	; (8004528 <HAL_ADC_ConfigChannel+0x1b4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800446e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004472:	d10b      	bne.n	800448c <HAL_ADC_ConfigChannel+0x118>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	e01d      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x154>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x13e>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	089b      	lsrs	r3, r3, #2
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	e00a      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x154>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	089b      	lsrs	r3, r3, #2
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d02c      	beq.n	800452c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6919      	ldr	r1, [r3, #16]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044e0:	f7ff faea 	bl	8003ab8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	6919      	ldr	r1, [r3, #16]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	7e5b      	ldrb	r3, [r3, #25]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d102      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x186>
 80044f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044f8:	e000      	b.n	80044fc <HAL_ADC_ConfigChannel+0x188>
 80044fa:	2300      	movs	r3, #0
 80044fc:	461a      	mov	r2, r3
 80044fe:	f7ff fb14 	bl	8003b2a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6919      	ldr	r1, [r3, #16]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	7e1b      	ldrb	r3, [r3, #24]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d102      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x1a4>
 8004512:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004516:	e000      	b.n	800451a <HAL_ADC_ConfigChannel+0x1a6>
 8004518:	2300      	movs	r3, #0
 800451a:	461a      	mov	r2, r3
 800451c:	f7ff faec 	bl	8003af8 <LL_ADC_SetDataRightShift>
 8004520:	e04c      	b.n	80045bc <HAL_ADC_ConfigChannel+0x248>
 8004522:	bf00      	nop
 8004524:	47ff0000 	.word	0x47ff0000
 8004528:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004532:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	069b      	lsls	r3, r3, #26
 800453c:	429a      	cmp	r2, r3
 800453e:	d107      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800454e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	069b      	lsls	r3, r3, #26
 8004560:	429a      	cmp	r2, r3
 8004562:	d107      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004572:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	069b      	lsls	r3, r3, #26
 8004584:	429a      	cmp	r2, r3
 8004586:	d107      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004596:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800459e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	069b      	lsls	r3, r3, #26
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d107      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fbf3 	bl	8003dac <LL_ADC_IsEnabled>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f040 8211 	bne.w	80049f0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6819      	ldr	r1, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	461a      	mov	r2, r3
 80045dc:	f7ff fb3e 	bl	8003c5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4aa1      	ldr	r2, [pc, #644]	; (800486c <HAL_ADC_ConfigChannel+0x4f8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	f040 812e 	bne.w	8004848 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10b      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x2a0>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	3301      	adds	r3, #1
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	2b09      	cmp	r3, #9
 800460a:	bf94      	ite	ls
 800460c:	2301      	movls	r3, #1
 800460e:	2300      	movhi	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e019      	b.n	8004648 <HAL_ADC_ConfigChannel+0x2d4>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800461c:	fa93 f3a3 	rbit	r3, r3
 8004620:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004624:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800462c:	2320      	movs	r3, #32
 800462e:	e003      	b.n	8004638 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	3301      	adds	r3, #1
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	2b09      	cmp	r3, #9
 8004640:	bf94      	ite	ls
 8004642:	2301      	movls	r3, #1
 8004644:	2300      	movhi	r3, #0
 8004646:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004648:	2b00      	cmp	r3, #0
 800464a:	d079      	beq.n	8004740 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004654:	2b00      	cmp	r3, #0
 8004656:	d107      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x2f4>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	0e9b      	lsrs	r3, r3, #26
 800465e:	3301      	adds	r3, #1
 8004660:	069b      	lsls	r3, r3, #26
 8004662:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004666:	e015      	b.n	8004694 <HAL_ADC_ConfigChannel+0x320>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004670:	fa93 f3a3 	rbit	r3, r3
 8004674:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004678:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800467a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004680:	2320      	movs	r3, #32
 8004682:	e003      	b.n	800468c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004686:	fab3 f383 	clz	r3, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3301      	adds	r3, #1
 800468e:	069b      	lsls	r3, r3, #26
 8004690:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x340>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	0e9b      	lsrs	r3, r3, #26
 80046a6:	3301      	adds	r3, #1
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	e017      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x370>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046bc:	fa93 f3a3 	rbit	r3, r3
 80046c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80046c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80046c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80046cc:	2320      	movs	r3, #32
 80046ce:	e003      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80046d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2101      	movs	r1, #1
 80046e0:	fa01 f303 	lsl.w	r3, r1, r3
 80046e4:	ea42 0103 	orr.w	r1, r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <HAL_ADC_ConfigChannel+0x396>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0e9b      	lsrs	r3, r3, #26
 80046fa:	3301      	adds	r3, #1
 80046fc:	f003 021f 	and.w	r2, r3, #31
 8004700:	4613      	mov	r3, r2
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4413      	add	r3, r2
 8004706:	051b      	lsls	r3, r3, #20
 8004708:	e018      	b.n	800473c <HAL_ADC_ConfigChannel+0x3c8>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004722:	2320      	movs	r3, #32
 8004724:	e003      	b.n	800472e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	3301      	adds	r3, #1
 8004730:	f003 021f 	and.w	r2, r3, #31
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800473c:	430b      	orrs	r3, r1
 800473e:	e07e      	b.n	800483e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <HAL_ADC_ConfigChannel+0x3e8>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	0e9b      	lsrs	r3, r3, #26
 8004752:	3301      	adds	r3, #1
 8004754:	069b      	lsls	r3, r3, #26
 8004756:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800475a:	e015      	b.n	8004788 <HAL_ADC_ConfigChannel+0x414>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	fa93 f3a3 	rbit	r3, r3
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004774:	2320      	movs	r3, #32
 8004776:	e003      	b.n	8004780 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477a:	fab3 f383 	clz	r3, r3
 800477e:	b2db      	uxtb	r3, r3
 8004780:	3301      	adds	r3, #1
 8004782:	069b      	lsls	r3, r3, #26
 8004784:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004790:	2b00      	cmp	r3, #0
 8004792:	d109      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x434>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	0e9b      	lsrs	r3, r3, #26
 800479a:	3301      	adds	r3, #1
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	2101      	movs	r1, #1
 80047a2:	fa01 f303 	lsl.w	r3, r1, r3
 80047a6:	e017      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x464>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	fa93 f3a3 	rbit	r3, r3
 80047b4:	61bb      	str	r3, [r7, #24]
  return result;
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80047c0:	2320      	movs	r3, #32
 80047c2:	e003      	b.n	80047cc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	fab3 f383 	clz	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	3301      	adds	r3, #1
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2101      	movs	r1, #1
 80047d4:	fa01 f303 	lsl.w	r3, r1, r3
 80047d8:	ea42 0103 	orr.w	r1, r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10d      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x490>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	0e9b      	lsrs	r3, r3, #26
 80047ee:	3301      	adds	r3, #1
 80047f0:	f003 021f 	and.w	r2, r3, #31
 80047f4:	4613      	mov	r3, r2
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	4413      	add	r3, r2
 80047fa:	3b1e      	subs	r3, #30
 80047fc:	051b      	lsls	r3, r3, #20
 80047fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004802:	e01b      	b.n	800483c <HAL_ADC_ConfigChannel+0x4c8>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	fa93 f3a3 	rbit	r3, r3
 8004810:	60fb      	str	r3, [r7, #12]
  return result;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800481c:	2320      	movs	r3, #32
 800481e:	e003      	b.n	8004828 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	fab3 f383 	clz	r3, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	3301      	adds	r3, #1
 800482a:	f003 021f 	and.w	r2, r3, #31
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	3b1e      	subs	r3, #30
 8004836:	051b      	lsls	r3, r3, #20
 8004838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800483c:	430b      	orrs	r3, r1
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	6892      	ldr	r2, [r2, #8]
 8004842:	4619      	mov	r1, r3
 8004844:	f7ff f9de 	bl	8003c04 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f280 80cf 	bge.w	80049f0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a06      	ldr	r2, [pc, #24]	; (8004870 <HAL_ADC_ConfigChannel+0x4fc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_ADC_ConfigChannel+0x4f2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a04      	ldr	r2, [pc, #16]	; (8004874 <HAL_ADC_ConfigChannel+0x500>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10a      	bne.n	800487c <HAL_ADC_ConfigChannel+0x508>
 8004866:	4b04      	ldr	r3, [pc, #16]	; (8004878 <HAL_ADC_ConfigChannel+0x504>)
 8004868:	e009      	b.n	800487e <HAL_ADC_ConfigChannel+0x50a>
 800486a:	bf00      	nop
 800486c:	47ff0000 	.word	0x47ff0000
 8004870:	40022000 	.word	0x40022000
 8004874:	40022100 	.word	0x40022100
 8004878:	40022300 	.word	0x40022300
 800487c:	4b61      	ldr	r3, [pc, #388]	; (8004a04 <HAL_ADC_ConfigChannel+0x690>)
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff f90c 	bl	8003a9c <LL_ADC_GetCommonPathInternalCh>
 8004884:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a5f      	ldr	r2, [pc, #380]	; (8004a08 <HAL_ADC_ConfigChannel+0x694>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d004      	beq.n	800489a <HAL_ADC_ConfigChannel+0x526>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a5d      	ldr	r2, [pc, #372]	; (8004a0c <HAL_ADC_ConfigChannel+0x698>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d10e      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x544>
 800489a:	485b      	ldr	r0, [pc, #364]	; (8004a08 <HAL_ADC_ConfigChannel+0x694>)
 800489c:	f7ff fa86 	bl	8003dac <LL_ADC_IsEnabled>
 80048a0:	4604      	mov	r4, r0
 80048a2:	485a      	ldr	r0, [pc, #360]	; (8004a0c <HAL_ADC_ConfigChannel+0x698>)
 80048a4:	f7ff fa82 	bl	8003dac <LL_ADC_IsEnabled>
 80048a8:	4603      	mov	r3, r0
 80048aa:	4323      	orrs	r3, r4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e008      	b.n	80048ca <HAL_ADC_ConfigChannel+0x556>
 80048b8:	4855      	ldr	r0, [pc, #340]	; (8004a10 <HAL_ADC_ConfigChannel+0x69c>)
 80048ba:	f7ff fa77 	bl	8003dac <LL_ADC_IsEnabled>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d07d      	beq.n	80049ca <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a50      	ldr	r2, [pc, #320]	; (8004a14 <HAL_ADC_ConfigChannel+0x6a0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d130      	bne.n	800493a <HAL_ADC_ConfigChannel+0x5c6>
 80048d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d12b      	bne.n	800493a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a4a      	ldr	r2, [pc, #296]	; (8004a10 <HAL_ADC_ConfigChannel+0x69c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	f040 8081 	bne.w	80049f0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a45      	ldr	r2, [pc, #276]	; (8004a08 <HAL_ADC_ConfigChannel+0x694>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d004      	beq.n	8004902 <HAL_ADC_ConfigChannel+0x58e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a43      	ldr	r2, [pc, #268]	; (8004a0c <HAL_ADC_ConfigChannel+0x698>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d101      	bne.n	8004906 <HAL_ADC_ConfigChannel+0x592>
 8004902:	4a45      	ldr	r2, [pc, #276]	; (8004a18 <HAL_ADC_ConfigChannel+0x6a4>)
 8004904:	e000      	b.n	8004908 <HAL_ADC_ConfigChannel+0x594>
 8004906:	4a3f      	ldr	r2, [pc, #252]	; (8004a04 <HAL_ADC_ConfigChannel+0x690>)
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f7ff f8b0 	bl	8003a76 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004916:	4b41      	ldr	r3, [pc, #260]	; (8004a1c <HAL_ADC_ConfigChannel+0x6a8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	099b      	lsrs	r3, r3, #6
 800491c:	4a40      	ldr	r2, [pc, #256]	; (8004a20 <HAL_ADC_ConfigChannel+0x6ac>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	3301      	adds	r3, #1
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800492a:	e002      	b.n	8004932 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	3b01      	subs	r3, #1
 8004930:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f9      	bne.n	800492c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004938:	e05a      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a39      	ldr	r2, [pc, #228]	; (8004a24 <HAL_ADC_ConfigChannel+0x6b0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d11e      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x60e>
 8004944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d119      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a2f      	ldr	r2, [pc, #188]	; (8004a10 <HAL_ADC_ConfigChannel+0x69c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d14b      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2a      	ldr	r2, [pc, #168]	; (8004a08 <HAL_ADC_ConfigChannel+0x694>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_ADC_ConfigChannel+0x5f8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <HAL_ADC_ConfigChannel+0x698>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d101      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x5fc>
 800496c:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <HAL_ADC_ConfigChannel+0x6a4>)
 800496e:	e000      	b.n	8004972 <HAL_ADC_ConfigChannel+0x5fe>
 8004970:	4a24      	ldr	r2, [pc, #144]	; (8004a04 <HAL_ADC_ConfigChannel+0x690>)
 8004972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f7ff f87b 	bl	8003a76 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004980:	e036      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a28      	ldr	r2, [pc, #160]	; (8004a28 <HAL_ADC_ConfigChannel+0x6b4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d131      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x67c>
 800498c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d12c      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1d      	ldr	r2, [pc, #116]	; (8004a10 <HAL_ADC_ConfigChannel+0x69c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d127      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a18      	ldr	r2, [pc, #96]	; (8004a08 <HAL_ADC_ConfigChannel+0x694>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <HAL_ADC_ConfigChannel+0x640>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <HAL_ADC_ConfigChannel+0x698>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d101      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x644>
 80049b4:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <HAL_ADC_ConfigChannel+0x6a4>)
 80049b6:	e000      	b.n	80049ba <HAL_ADC_ConfigChannel+0x646>
 80049b8:	4a12      	ldr	r2, [pc, #72]	; (8004a04 <HAL_ADC_ConfigChannel+0x690>)
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f7ff f857 	bl	8003a76 <LL_ADC_SetCommonPathInternalCh>
 80049c8:	e012      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80049dc:	e008      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80049f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3784      	adds	r7, #132	; 0x84
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd90      	pop	{r4, r7, pc}
 8004a04:	58026300 	.word	0x58026300
 8004a08:	40022000 	.word	0x40022000
 8004a0c:	40022100 	.word	0x40022100
 8004a10:	58026000 	.word	0x58026000
 8004a14:	cb840000 	.word	0xcb840000
 8004a18:	40022300 	.word	0x40022300
 8004a1c:	24000090 	.word	0x24000090
 8004a20:	053e2d63 	.word	0x053e2d63
 8004a24:	c7520000 	.word	0xc7520000
 8004a28:	cfb80000 	.word	0xcfb80000

08004a2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff f9b7 	bl	8003dac <LL_ADC_IsEnabled>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d16e      	bne.n	8004b22 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	4b38      	ldr	r3, [pc, #224]	; (8004b2c <ADC_Enable+0x100>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	f043 0210 	orr.w	r2, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a62:	f043 0201 	orr.w	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e05a      	b.n	8004b24 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff f972 	bl	8003d5c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a78:	f7fe ffbc 	bl	80039f4 <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2b      	ldr	r2, [pc, #172]	; (8004b30 <ADC_Enable+0x104>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <ADC_Enable+0x66>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a29      	ldr	r2, [pc, #164]	; (8004b34 <ADC_Enable+0x108>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <ADC_Enable+0x6a>
 8004a92:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <ADC_Enable+0x10c>)
 8004a94:	e000      	b.n	8004a98 <ADC_Enable+0x6c>
 8004a96:	4b29      	ldr	r3, [pc, #164]	; (8004b3c <ADC_Enable+0x110>)
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff f903 	bl	8003ca4 <LL_ADC_GetMultimode>
 8004a9e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	; (8004b34 <ADC_Enable+0x108>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d002      	beq.n	8004ab0 <ADC_Enable+0x84>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	e000      	b.n	8004ab2 <ADC_Enable+0x86>
 8004ab0:	4b1f      	ldr	r3, [pc, #124]	; (8004b30 <ADC_Enable+0x104>)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02c      	beq.n	8004b14 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d130      	bne.n	8004b22 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ac0:	e028      	b.n	8004b14 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff f970 	bl	8003dac <LL_ADC_IsEnabled>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d104      	bne.n	8004adc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff f940 	bl	8003d5c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004adc:	f7fe ff8a 	bl	80039f4 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d914      	bls.n	8004b14 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d00d      	beq.n	8004b14 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	f043 0210 	orr.w	r2, r3, #16
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b08:	f043 0201 	orr.w	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e007      	b.n	8004b24 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d1cf      	bne.n	8004ac2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	8000003f 	.word	0x8000003f
 8004b30:	40022000 	.word	0x40022000
 8004b34:	40022100 	.word	0x40022100
 8004b38:	40022300 	.word	0x40022300
 8004b3c:	58026300 	.word	0x58026300

08004b40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff f940 	bl	8003dd2 <LL_ADC_IsDisableOngoing>
 8004b52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff f927 	bl	8003dac <LL_ADC_IsEnabled>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d047      	beq.n	8004bf4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d144      	bne.n	8004bf4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030d 	and.w	r3, r3, #13
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10c      	bne.n	8004b92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff f901 	bl	8003d84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2203      	movs	r2, #3
 8004b88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b8a:	f7fe ff33 	bl	80039f4 <HAL_GetTick>
 8004b8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b90:	e029      	b.n	8004be6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b96:	f043 0210 	orr.w	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba2:	f043 0201 	orr.w	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e023      	b.n	8004bf6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bae:	f7fe ff21 	bl	80039f4 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d914      	bls.n	8004be6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00d      	beq.n	8004be6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	f043 0210 	orr.w	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	f043 0201 	orr.w	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e007      	b.n	8004bf6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1dc      	bne.n	8004bae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d14b      	bne.n	8004cb0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d021      	beq.n	8004c76 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe ff92 	bl	8003b60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d032      	beq.n	8004ca8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d12b      	bne.n	8004ca8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11f      	bne.n	8004ca8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	f043 0201 	orr.w	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
 8004c74:	e018      	b.n	8004ca8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d111      	bne.n	8004ca8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	f043 0201 	orr.w	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f7ff fb45 	bl	8004338 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cae:	e00e      	b.n	8004cce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff fb4f 	bl	8004360 <HAL_ADC_ErrorCallback>
}
 8004cc2:	e004      	b.n	8004cce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4798      	blx	r3
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f7ff fb31 	bl	800434c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d10:	f043 0204 	orr.w	r2, r3, #4
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff fb21 	bl	8004360 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a7a      	ldr	r2, [pc, #488]	; (8004f20 <ADC_ConfigureBoostMode+0x1f8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d004      	beq.n	8004d44 <ADC_ConfigureBoostMode+0x1c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a79      	ldr	r2, [pc, #484]	; (8004f24 <ADC_ConfigureBoostMode+0x1fc>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d109      	bne.n	8004d58 <ADC_ConfigureBoostMode+0x30>
 8004d44:	4b78      	ldr	r3, [pc, #480]	; (8004f28 <ADC_ConfigureBoostMode+0x200>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e008      	b.n	8004d6a <ADC_ConfigureBoostMode+0x42>
 8004d58:	4b74      	ldr	r3, [pc, #464]	; (8004f2c <ADC_ConfigureBoostMode+0x204>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01c      	beq.n	8004da8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004d6e:	f005 fd67 	bl	800a840 <HAL_RCC_GetHCLKFreq>
 8004d72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d7c:	d010      	beq.n	8004da0 <ADC_ConfigureBoostMode+0x78>
 8004d7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d82:	d873      	bhi.n	8004e6c <ADC_ConfigureBoostMode+0x144>
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d88:	d002      	beq.n	8004d90 <ADC_ConfigureBoostMode+0x68>
 8004d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d8e:	d16d      	bne.n	8004e6c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	0c1b      	lsrs	r3, r3, #16
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	60fb      	str	r3, [r7, #12]
        break;
 8004d9e:	e068      	b.n	8004e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	089b      	lsrs	r3, r3, #2
 8004da4:	60fb      	str	r3, [r7, #12]
        break;
 8004da6:	e064      	b.n	8004e72 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004da8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004dac:	f04f 0100 	mov.w	r1, #0
 8004db0:	f006 ffee 	bl	800bd90 <HAL_RCCEx_GetPeriphCLKFreq>
 8004db4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004dbe:	d051      	beq.n	8004e64 <ADC_ConfigureBoostMode+0x13c>
 8004dc0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004dc4:	d854      	bhi.n	8004e70 <ADC_ConfigureBoostMode+0x148>
 8004dc6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004dca:	d047      	beq.n	8004e5c <ADC_ConfigureBoostMode+0x134>
 8004dcc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004dd0:	d84e      	bhi.n	8004e70 <ADC_ConfigureBoostMode+0x148>
 8004dd2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004dd6:	d03d      	beq.n	8004e54 <ADC_ConfigureBoostMode+0x12c>
 8004dd8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ddc:	d848      	bhi.n	8004e70 <ADC_ConfigureBoostMode+0x148>
 8004dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004de2:	d033      	beq.n	8004e4c <ADC_ConfigureBoostMode+0x124>
 8004de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004de8:	d842      	bhi.n	8004e70 <ADC_ConfigureBoostMode+0x148>
 8004dea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004dee:	d029      	beq.n	8004e44 <ADC_ConfigureBoostMode+0x11c>
 8004df0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004df4:	d83c      	bhi.n	8004e70 <ADC_ConfigureBoostMode+0x148>
 8004df6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004dfa:	d01a      	beq.n	8004e32 <ADC_ConfigureBoostMode+0x10a>
 8004dfc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e00:	d836      	bhi.n	8004e70 <ADC_ConfigureBoostMode+0x148>
 8004e02:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e06:	d014      	beq.n	8004e32 <ADC_ConfigureBoostMode+0x10a>
 8004e08:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e0c:	d830      	bhi.n	8004e70 <ADC_ConfigureBoostMode+0x148>
 8004e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e12:	d00e      	beq.n	8004e32 <ADC_ConfigureBoostMode+0x10a>
 8004e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e18:	d82a      	bhi.n	8004e70 <ADC_ConfigureBoostMode+0x148>
 8004e1a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e1e:	d008      	beq.n	8004e32 <ADC_ConfigureBoostMode+0x10a>
 8004e20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e24:	d824      	bhi.n	8004e70 <ADC_ConfigureBoostMode+0x148>
 8004e26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e2a:	d002      	beq.n	8004e32 <ADC_ConfigureBoostMode+0x10a>
 8004e2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e30:	d11e      	bne.n	8004e70 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	0c9b      	lsrs	r3, r3, #18
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e40:	60fb      	str	r3, [r7, #12]
        break;
 8004e42:	e016      	b.n	8004e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	60fb      	str	r3, [r7, #12]
        break;
 8004e4a:	e012      	b.n	8004e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	60fb      	str	r3, [r7, #12]
        break;
 8004e52:	e00e      	b.n	8004e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	099b      	lsrs	r3, r3, #6
 8004e58:	60fb      	str	r3, [r7, #12]
        break;
 8004e5a:	e00a      	b.n	8004e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	09db      	lsrs	r3, r3, #7
 8004e60:	60fb      	str	r3, [r7, #12]
        break;
 8004e62:	e006      	b.n	8004e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	0a1b      	lsrs	r3, r3, #8
 8004e68:	60fb      	str	r3, [r7, #12]
        break;
 8004e6a:	e002      	b.n	8004e72 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004e6c:	bf00      	nop
 8004e6e:	e000      	b.n	8004e72 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004e70:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004e72:	f7fe fdcb 	bl	8003a0c <HAL_GetREVID>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d815      	bhi.n	8004eac <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4a2b      	ldr	r2, [pc, #172]	; (8004f30 <ADC_ConfigureBoostMode+0x208>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d908      	bls.n	8004e9a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e96:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004e98:	e03e      	b.n	8004f18 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ea8:	609a      	str	r2, [r3, #8]
}
 8004eaa:	e035      	b.n	8004f18 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4a1f      	ldr	r2, [pc, #124]	; (8004f34 <ADC_ConfigureBoostMode+0x20c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d808      	bhi.n	8004ecc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ec8:	609a      	str	r2, [r3, #8]
}
 8004eca:	e025      	b.n	8004f18 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4a1a      	ldr	r2, [pc, #104]	; (8004f38 <ADC_ConfigureBoostMode+0x210>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d80a      	bhi.n	8004eea <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee6:	609a      	str	r2, [r3, #8]
}
 8004ee8:	e016      	b.n	8004f18 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <ADC_ConfigureBoostMode+0x214>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d80a      	bhi.n	8004f08 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f04:	609a      	str	r2, [r3, #8]
}
 8004f06:	e007      	b.n	8004f18 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40022000 	.word	0x40022000
 8004f24:	40022100 	.word	0x40022100
 8004f28:	40022300 	.word	0x40022300
 8004f2c:	58026300 	.word	0x58026300
 8004f30:	01312d00 	.word	0x01312d00
 8004f34:	005f5e10 	.word	0x005f5e10
 8004f38:	00bebc20 	.word	0x00bebc20
 8004f3c:	017d7840 	.word	0x017d7840

08004f40 <LL_ADC_IsEnabled>:
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <LL_ADC_IsEnabled+0x18>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <LL_ADC_IsEnabled+0x1a>
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <LL_ADC_StartCalibration>:
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <LL_ADC_StartCalibration+0x38>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	609a      	str	r2, [r3, #8]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	3ffeffc0 	.word	0x3ffeffc0

08004fa4 <LL_ADC_IsCalibrationOnGoing>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fb8:	d101      	bne.n	8004fbe <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <LL_ADC_REG_IsConversionOngoing>:
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d101      	bne.n	8004fe4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_ADCEx_Calibration_Start+0x1e>
 800500e:	2302      	movs	r3, #2
 8005010:	e04c      	b.n	80050ac <HAL_ADCEx_Calibration_Start+0xb8>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff fd90 	bl	8004b40 <ADC_Disable>
 8005020:	4603      	mov	r3, r0
 8005022:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d135      	bne.n	8005096 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800502e:	4b21      	ldr	r3, [pc, #132]	; (80050b4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005030:	4013      	ands	r3, r2
 8005032:	f043 0202 	orr.w	r2, r3, #2
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff ff90 	bl	8004f68 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005048:	e014      	b.n	8005074 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	3301      	adds	r3, #1
 800504e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4a19      	ldr	r2, [pc, #100]	; (80050b8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d30d      	bcc.n	8005074 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505c:	f023 0312 	bic.w	r3, r3, #18
 8005060:	f043 0210 	orr.w	r2, r3, #16
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e01b      	b.n	80050ac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff ff93 	bl	8004fa4 <LL_ADC_IsCalibrationOnGoing>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e2      	bne.n	800504a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	f023 0303 	bic.w	r3, r3, #3
 800508c:	f043 0201 	orr.w	r2, r3, #1
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
 8005094:	e005      	b.n	80050a2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	f043 0210 	orr.w	r2, r3, #16
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	ffffeefd 	.word	0xffffeefd
 80050b8:	25c3f800 	.word	0x25c3f800

080050bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80050bc:	b590      	push	{r4, r7, lr}
 80050be:	b09f      	sub	sp, #124	; 0x7c
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e0be      	b.n	8005258 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80050e2:	2300      	movs	r3, #0
 80050e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a5c      	ldr	r2, [pc, #368]	; (8005260 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d102      	bne.n	80050fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050f4:	4b5b      	ldr	r3, [pc, #364]	; (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050f6:	60bb      	str	r3, [r7, #8]
 80050f8:	e001      	b.n	80050fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10b      	bne.n	800511c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005108:	f043 0220 	orr.w	r2, r3, #32
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e09d      	b.n	8005258 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff ff54 	bl	8004fcc <LL_ADC_REG_IsConversionOngoing>
 8005124:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff ff4e 	bl	8004fcc <LL_ADC_REG_IsConversionOngoing>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d17f      	bne.n	8005236 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005138:	2b00      	cmp	r3, #0
 800513a:	d17c      	bne.n	8005236 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a47      	ldr	r2, [pc, #284]	; (8005260 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d004      	beq.n	8005150 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a46      	ldr	r2, [pc, #280]	; (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d101      	bne.n	8005154 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005150:	4b45      	ldr	r3, [pc, #276]	; (8005268 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005152:	e000      	b.n	8005156 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005154:	4b45      	ldr	r3, [pc, #276]	; (800526c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005156:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d039      	beq.n	80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	431a      	orrs	r2, r3
 800516e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005170:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a3a      	ldr	r2, [pc, #232]	; (8005260 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a38      	ldr	r2, [pc, #224]	; (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d10e      	bne.n	80051a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005186:	4836      	ldr	r0, [pc, #216]	; (8005260 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005188:	f7ff feda 	bl	8004f40 <LL_ADC_IsEnabled>
 800518c:	4604      	mov	r4, r0
 800518e:	4835      	ldr	r0, [pc, #212]	; (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005190:	f7ff fed6 	bl	8004f40 <LL_ADC_IsEnabled>
 8005194:	4603      	mov	r3, r0
 8005196:	4323      	orrs	r3, r4
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf0c      	ite	eq
 800519c:	2301      	moveq	r3, #1
 800519e:	2300      	movne	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e008      	b.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80051a4:	4832      	ldr	r0, [pc, #200]	; (8005270 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80051a6:	f7ff fecb 	bl	8004f40 <LL_ADC_IsEnabled>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d047      	beq.n	800524a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	4b2d      	ldr	r3, [pc, #180]	; (8005274 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	6811      	ldr	r1, [r2, #0]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	6892      	ldr	r2, [r2, #8]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	431a      	orrs	r2, r3
 80051ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051d2:	e03a      	b.n	800524a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80051d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1e      	ldr	r2, [pc, #120]	; (8005260 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1d      	ldr	r2, [pc, #116]	; (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d10e      	bne.n	8005212 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80051f4:	481a      	ldr	r0, [pc, #104]	; (8005260 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051f6:	f7ff fea3 	bl	8004f40 <LL_ADC_IsEnabled>
 80051fa:	4604      	mov	r4, r0
 80051fc:	4819      	ldr	r0, [pc, #100]	; (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051fe:	f7ff fe9f 	bl	8004f40 <LL_ADC_IsEnabled>
 8005202:	4603      	mov	r3, r0
 8005204:	4323      	orrs	r3, r4
 8005206:	2b00      	cmp	r3, #0
 8005208:	bf0c      	ite	eq
 800520a:	2301      	moveq	r3, #1
 800520c:	2300      	movne	r3, #0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	e008      	b.n	8005224 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005212:	4817      	ldr	r0, [pc, #92]	; (8005270 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005214:	f7ff fe94 	bl	8004f40 <LL_ADC_IsEnabled>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	bf0c      	ite	eq
 800521e:	2301      	moveq	r3, #1
 8005220:	2300      	movne	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d010      	beq.n	800524a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800522e:	4013      	ands	r3, r2
 8005230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005232:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005234:	e009      	b.n	800524a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005248:	e000      	b.n	800524c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800524a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005254:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005258:	4618      	mov	r0, r3
 800525a:	377c      	adds	r7, #124	; 0x7c
 800525c:	46bd      	mov	sp, r7
 800525e:	bd90      	pop	{r4, r7, pc}
 8005260:	40022000 	.word	0x40022000
 8005264:	40022100 	.word	0x40022100
 8005268:	40022300 	.word	0x40022300
 800526c:	58026300 	.word	0x58026300
 8005270:	58026000 	.word	0x58026000
 8005274:	fffff0e0 	.word	0xfffff0e0

08005278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <__NVIC_SetPriorityGrouping+0x40>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005294:	4013      	ands	r3, r2
 8005296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80052a0:	4b06      	ldr	r3, [pc, #24]	; (80052bc <__NVIC_SetPriorityGrouping+0x44>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052a6:	4a04      	ldr	r2, [pc, #16]	; (80052b8 <__NVIC_SetPriorityGrouping+0x40>)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	60d3      	str	r3, [r2, #12]
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	e000ed00 	.word	0xe000ed00
 80052bc:	05fa0000 	.word	0x05fa0000

080052c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <__NVIC_GetPriorityGrouping+0x18>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	f003 0307 	and.w	r3, r3, #7
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	e000ed00 	.word	0xe000ed00

080052dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	db0b      	blt.n	8005306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	f003 021f 	and.w	r2, r3, #31
 80052f4:	4907      	ldr	r1, [pc, #28]	; (8005314 <__NVIC_EnableIRQ+0x38>)
 80052f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	2001      	movs	r0, #1
 80052fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	e000e100 	.word	0xe000e100

08005318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	6039      	str	r1, [r7, #0]
 8005322:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005328:	2b00      	cmp	r3, #0
 800532a:	db0a      	blt.n	8005342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	b2da      	uxtb	r2, r3
 8005330:	490c      	ldr	r1, [pc, #48]	; (8005364 <__NVIC_SetPriority+0x4c>)
 8005332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005336:	0112      	lsls	r2, r2, #4
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	440b      	add	r3, r1
 800533c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005340:	e00a      	b.n	8005358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	b2da      	uxtb	r2, r3
 8005346:	4908      	ldr	r1, [pc, #32]	; (8005368 <__NVIC_SetPriority+0x50>)
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	3b04      	subs	r3, #4
 8005350:	0112      	lsls	r2, r2, #4
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	440b      	add	r3, r1
 8005356:	761a      	strb	r2, [r3, #24]
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	e000e100 	.word	0xe000e100
 8005368:	e000ed00 	.word	0xe000ed00

0800536c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800536c:	b480      	push	{r7}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f1c3 0307 	rsb	r3, r3, #7
 8005386:	2b04      	cmp	r3, #4
 8005388:	bf28      	it	cs
 800538a:	2304      	movcs	r3, #4
 800538c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	3304      	adds	r3, #4
 8005392:	2b06      	cmp	r3, #6
 8005394:	d902      	bls.n	800539c <NVIC_EncodePriority+0x30>
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3b03      	subs	r3, #3
 800539a:	e000      	b.n	800539e <NVIC_EncodePriority+0x32>
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43da      	mvns	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	401a      	ands	r2, r3
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	fa01 f303 	lsl.w	r3, r1, r3
 80053be:	43d9      	mvns	r1, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053c4:	4313      	orrs	r3, r2
         );
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3724      	adds	r7, #36	; 0x24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff ff4c 	bl	8005278 <__NVIC_SetPriorityGrouping>
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053f6:	f7ff ff63 	bl	80052c0 <__NVIC_GetPriorityGrouping>
 80053fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	6978      	ldr	r0, [r7, #20]
 8005402:	f7ff ffb3 	bl	800536c <NVIC_EncodePriority>
 8005406:	4602      	mov	r2, r0
 8005408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800540c:	4611      	mov	r1, r2
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff ff82 	bl	8005318 <__NVIC_SetPriority>
}
 8005414:	bf00      	nop
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff ff56 	bl	80052dc <__NVIC_EnableIRQ>
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e014      	b.n	8005474 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	791b      	ldrb	r3, [r3, #4]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d105      	bne.n	8005460 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fd fca2 	bl	8002da4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e046      	b.n	800551e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	795b      	ldrb	r3, [r3, #5]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_DAC_Start+0x20>
 8005498:	2302      	movs	r3, #2
 800549a:	e040      	b.n	800551e <HAL_DAC_Start+0xa2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2202      	movs	r2, #2
 80054a6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6819      	ldr	r1, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2201      	movs	r2, #1
 80054b6:	409a      	lsls	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10f      	bne.n	80054e6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d11d      	bne.n	8005510 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	605a      	str	r2, [r3, #4]
 80054e4:	e014      	b.n	8005510 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2102      	movs	r1, #2
 80054f8:	fa01 f303 	lsl.w	r3, r1, r3
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d107      	bne.n	8005510 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0202 	orr.w	r2, r2, #2
 800550e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0a2      	b.n	800568a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	795b      	ldrb	r3, [r3, #5]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_DAC_Start_DMA+0x24>
 800554c:	2302      	movs	r3, #2
 800554e:	e09c      	b.n	800568a <HAL_DAC_Start_DMA+0x15e>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2202      	movs	r2, #2
 800555a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d129      	bne.n	80055b6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	4a4b      	ldr	r2, [pc, #300]	; (8005694 <HAL_DAC_Start_DMA+0x168>)
 8005568:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	4a4a      	ldr	r2, [pc, #296]	; (8005698 <HAL_DAC_Start_DMA+0x16c>)
 8005570:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	4a49      	ldr	r2, [pc, #292]	; (800569c <HAL_DAC_Start_DMA+0x170>)
 8005578:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005588:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_DAC_Start_DMA+0x6c>
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2b04      	cmp	r3, #4
 8005594:	d005      	beq.n	80055a2 <HAL_DAC_Start_DMA+0x76>
 8005596:	e009      	b.n	80055ac <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3308      	adds	r3, #8
 800559e:	613b      	str	r3, [r7, #16]
        break;
 80055a0:	e033      	b.n	800560a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	613b      	str	r3, [r7, #16]
        break;
 80055aa:	e02e      	b.n	800560a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3310      	adds	r3, #16
 80055b2:	613b      	str	r3, [r7, #16]
        break;
 80055b4:	e029      	b.n	800560a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	4a39      	ldr	r2, [pc, #228]	; (80056a0 <HAL_DAC_Start_DMA+0x174>)
 80055bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	4a38      	ldr	r2, [pc, #224]	; (80056a4 <HAL_DAC_Start_DMA+0x178>)
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	4a37      	ldr	r2, [pc, #220]	; (80056a8 <HAL_DAC_Start_DMA+0x17c>)
 80055cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80055dc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_DAC_Start_DMA+0xc0>
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d005      	beq.n	80055f6 <HAL_DAC_Start_DMA+0xca>
 80055ea:	e009      	b.n	8005600 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	613b      	str	r3, [r7, #16]
        break;
 80055f4:	e009      	b.n	800560a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3318      	adds	r3, #24
 80055fc:	613b      	str	r3, [r7, #16]
        break;
 80055fe:	e004      	b.n	800560a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	331c      	adds	r3, #28
 8005606:	613b      	str	r3, [r7, #16]
        break;
 8005608:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d111      	bne.n	8005634 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800561e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6898      	ldr	r0, [r3, #8]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	f000 fe67 	bl	80062fc <HAL_DMA_Start_IT>
 800562e:	4603      	mov	r3, r0
 8005630:	75fb      	strb	r3, [r7, #23]
 8005632:	e010      	b.n	8005656 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005642:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68d8      	ldr	r0, [r3, #12]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	f000 fe55 	bl	80062fc <HAL_DMA_Start_IT>
 8005652:	4603      	mov	r3, r0
 8005654:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800565c:	7dfb      	ldrb	r3, [r7, #23]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10c      	bne.n	800567c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6819      	ldr	r1, [r3, #0]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2201      	movs	r2, #1
 8005670:	409a      	lsls	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e005      	b.n	8005688 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f043 0204 	orr.w	r2, r3, #4
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005688:	7dfb      	ldrb	r3, [r7, #23]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	08005b1d 	.word	0x08005b1d
 8005698:	08005b3f 	.word	0x08005b3f
 800569c:	08005b5b 	.word	0x08005b5b
 80056a0:	08005bd9 	.word	0x08005bd9
 80056a4:	08005bfb 	.word	0x08005bfb
 80056a8:	08005c17 	.word	0x08005c17

080056ac <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e03e      	b.n	800573e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6819      	ldr	r1, [r3, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	f003 0310 	and.w	r3, r3, #16
 80056cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	43da      	mvns	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	400a      	ands	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6819      	ldr	r1, [r3, #0]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2201      	movs	r2, #1
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43da      	mvns	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	400a      	ands	r2, r1
 80056f8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10d      	bne.n	800571c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	4618      	mov	r0, r3
 8005706:	f001 f863 	bl	80067d0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	e00c      	b.n	8005736 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4618      	mov	r0, r3
 8005722:	f001 f855 	bl	80067d0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005734:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01d      	beq.n	80057a4 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d018      	beq.n	80057a4 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2204      	movs	r2, #4
 8005776:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	f043 0201 	orr.w	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800578c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800579c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f86f 	bl	8005882 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d01d      	beq.n	80057ea <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d018      	beq.n	80057ea <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2204      	movs	r2, #4
 80057bc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f043 0202 	orr.w	r2, r3, #2
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80057d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80057e2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f9ed 	bl	8005bc4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80057ea:	bf00      	nop
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b087      	sub	sp, #28
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
 80057fe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e015      	b.n	800583a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d105      	bne.n	8005826 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4413      	add	r3, r2
 8005820:	3308      	adds	r3, #8
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	e004      	b.n	8005830 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4413      	add	r3, r2
 800582c:	3314      	adds	r3, #20
 800582e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	461a      	mov	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
	...

08005898 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	; 0x28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <HAL_DAC_ConfigChannel+0x1e>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e12a      	b.n	8005b10 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	795b      	ldrb	r3, [r3, #5]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_DAC_ConfigChannel+0x2e>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e124      	b.n	8005b10 <HAL_DAC_ConfigChannel+0x278>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2202      	movs	r2, #2
 80058d0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d17a      	bne.n	80059d0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80058da:	f7fe f88b 	bl	80039f4 <HAL_GetTick>
 80058de:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d13d      	bne.n	8005962 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80058e6:	e018      	b.n	800591a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80058e8:	f7fe f884 	bl	80039f4 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d911      	bls.n	800591a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fc:	4b86      	ldr	r3, [pc, #536]	; (8005b18 <HAL_DAC_ConfigChannel+0x280>)
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f043 0208 	orr.w	r2, r3, #8
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2203      	movs	r2, #3
 8005914:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e0fa      	b.n	8005b10 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005920:	4b7d      	ldr	r3, [pc, #500]	; (8005b18 <HAL_DAC_ConfigChannel+0x280>)
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1df      	bne.n	80058e8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	6992      	ldr	r2, [r2, #24]
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
 8005932:	e020      	b.n	8005976 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005934:	f7fe f85e 	bl	80039f4 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b01      	cmp	r3, #1
 8005940:	d90f      	bls.n	8005962 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005948:	2b00      	cmp	r3, #0
 800594a:	da0a      	bge.n	8005962 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f043 0208 	orr.w	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2203      	movs	r2, #3
 800595c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e0d6      	b.n	8005b10 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005968:	2b00      	cmp	r3, #0
 800596a:	dbe3      	blt.n	8005934 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	6992      	ldr	r2, [r2, #24]
 8005974:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	ea02 0103 	and.w	r1, r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	409a      	lsls	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	21ff      	movs	r1, #255	; 0xff
 80059b2:	fa01 f303 	lsl.w	r3, r1, r3
 80059b6:	43db      	mvns	r3, r3
 80059b8:	ea02 0103 	and.w	r1, r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6a1a      	ldr	r2, [r3, #32]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	409a      	lsls	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d11d      	bne.n	8005a14 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f003 0310 	and.w	r3, r3, #16
 80059e6:	221f      	movs	r2, #31
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	43db      	mvns	r3, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4013      	ands	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	2207      	movs	r2, #7
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d102      	bne.n	8005a3e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3c:	e00f      	b.n	8005a5e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d102      	bne.n	8005a4c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005a46:	2301      	movs	r3, #1
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4a:	e008      	b.n	8005a5e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d102      	bne.n	8005a5a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005a54:	2301      	movs	r3, #1
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
 8005a58:	e001      	b.n	8005a5e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6819      	ldr	r1, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	43da      	mvns	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	400a      	ands	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	43db      	mvns	r3, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6819      	ldr	r1, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	22c0      	movs	r2, #192	; 0xc0
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	43da      	mvns	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	400a      	ands	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3728      	adds	r7, #40	; 0x28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20008000 	.word	0x20008000

08005b1c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff fe8b 	bl	8005846 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	711a      	strb	r2, [r3, #4]
}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff fe84 	bl	800585a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f043 0204 	orr.w	r2, r3, #4
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f7ff fe7a 	bl	800586e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	711a      	strb	r2, [r3, #4]
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f7ff ffce 	bl	8005b88 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	711a      	strb	r2, [r3, #4]
}
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7ff ffc7 	bl	8005b9c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	f043 0204 	orr.w	r2, r3, #4
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff ffbd 	bl	8005bb0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	711a      	strb	r2, [r3, #4]
}
 8005c3c:	bf00      	nop
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005c4c:	f7fd fed2 	bl	80039f4 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e316      	b.n	800628a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a66      	ldr	r2, [pc, #408]	; (8005dfc <HAL_DMA_Init+0x1b8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d04a      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a65      	ldr	r2, [pc, #404]	; (8005e00 <HAL_DMA_Init+0x1bc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d045      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a63      	ldr	r2, [pc, #396]	; (8005e04 <HAL_DMA_Init+0x1c0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d040      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a62      	ldr	r2, [pc, #392]	; (8005e08 <HAL_DMA_Init+0x1c4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d03b      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a60      	ldr	r2, [pc, #384]	; (8005e0c <HAL_DMA_Init+0x1c8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d036      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a5f      	ldr	r2, [pc, #380]	; (8005e10 <HAL_DMA_Init+0x1cc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d031      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a5d      	ldr	r2, [pc, #372]	; (8005e14 <HAL_DMA_Init+0x1d0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d02c      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a5c      	ldr	r2, [pc, #368]	; (8005e18 <HAL_DMA_Init+0x1d4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d027      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a5a      	ldr	r2, [pc, #360]	; (8005e1c <HAL_DMA_Init+0x1d8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d022      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a59      	ldr	r2, [pc, #356]	; (8005e20 <HAL_DMA_Init+0x1dc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d01d      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a57      	ldr	r2, [pc, #348]	; (8005e24 <HAL_DMA_Init+0x1e0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d018      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a56      	ldr	r2, [pc, #344]	; (8005e28 <HAL_DMA_Init+0x1e4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d013      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a54      	ldr	r2, [pc, #336]	; (8005e2c <HAL_DMA_Init+0x1e8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00e      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a53      	ldr	r2, [pc, #332]	; (8005e30 <HAL_DMA_Init+0x1ec>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d009      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a51      	ldr	r2, [pc, #324]	; (8005e34 <HAL_DMA_Init+0x1f0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d004      	beq.n	8005cfc <HAL_DMA_Init+0xb8>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a50      	ldr	r2, [pc, #320]	; (8005e38 <HAL_DMA_Init+0x1f4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d101      	bne.n	8005d00 <HAL_DMA_Init+0xbc>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <HAL_DMA_Init+0xbe>
 8005d00:	2300      	movs	r3, #0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 813b 	beq.w	8005f7e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a37      	ldr	r2, [pc, #220]	; (8005dfc <HAL_DMA_Init+0x1b8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d04a      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a36      	ldr	r2, [pc, #216]	; (8005e00 <HAL_DMA_Init+0x1bc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d045      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a34      	ldr	r2, [pc, #208]	; (8005e04 <HAL_DMA_Init+0x1c0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d040      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a33      	ldr	r2, [pc, #204]	; (8005e08 <HAL_DMA_Init+0x1c4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d03b      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a31      	ldr	r2, [pc, #196]	; (8005e0c <HAL_DMA_Init+0x1c8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d036      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a30      	ldr	r2, [pc, #192]	; (8005e10 <HAL_DMA_Init+0x1cc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d031      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a2e      	ldr	r2, [pc, #184]	; (8005e14 <HAL_DMA_Init+0x1d0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d02c      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a2d      	ldr	r2, [pc, #180]	; (8005e18 <HAL_DMA_Init+0x1d4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d027      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2b      	ldr	r2, [pc, #172]	; (8005e1c <HAL_DMA_Init+0x1d8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d022      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2a      	ldr	r2, [pc, #168]	; (8005e20 <HAL_DMA_Init+0x1dc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d01d      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a28      	ldr	r2, [pc, #160]	; (8005e24 <HAL_DMA_Init+0x1e0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d018      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a27      	ldr	r2, [pc, #156]	; (8005e28 <HAL_DMA_Init+0x1e4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d013      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a25      	ldr	r2, [pc, #148]	; (8005e2c <HAL_DMA_Init+0x1e8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00e      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a24      	ldr	r2, [pc, #144]	; (8005e30 <HAL_DMA_Init+0x1ec>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d009      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a22      	ldr	r2, [pc, #136]	; (8005e34 <HAL_DMA_Init+0x1f0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <HAL_DMA_Init+0x174>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a21      	ldr	r2, [pc, #132]	; (8005e38 <HAL_DMA_Init+0x1f4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d108      	bne.n	8005dca <HAL_DMA_Init+0x186>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e007      	b.n	8005dda <HAL_DMA_Init+0x196>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005dda:	e02f      	b.n	8005e3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ddc:	f7fd fe0a 	bl	80039f4 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	d928      	bls.n	8005e3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2203      	movs	r2, #3
 8005df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e246      	b.n	800628a <HAL_DMA_Init+0x646>
 8005dfc:	40020010 	.word	0x40020010
 8005e00:	40020028 	.word	0x40020028
 8005e04:	40020040 	.word	0x40020040
 8005e08:	40020058 	.word	0x40020058
 8005e0c:	40020070 	.word	0x40020070
 8005e10:	40020088 	.word	0x40020088
 8005e14:	400200a0 	.word	0x400200a0
 8005e18:	400200b8 	.word	0x400200b8
 8005e1c:	40020410 	.word	0x40020410
 8005e20:	40020428 	.word	0x40020428
 8005e24:	40020440 	.word	0x40020440
 8005e28:	40020458 	.word	0x40020458
 8005e2c:	40020470 	.word	0x40020470
 8005e30:	40020488 	.word	0x40020488
 8005e34:	400204a0 	.word	0x400204a0
 8005e38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1c8      	bne.n	8005ddc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4b83      	ldr	r3, [pc, #524]	; (8006064 <HAL_DMA_Init+0x420>)
 8005e56:	4013      	ands	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005e62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d107      	bne.n	8005ea0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005ea0:	4b71      	ldr	r3, [pc, #452]	; (8006068 <HAL_DMA_Init+0x424>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4b71      	ldr	r3, [pc, #452]	; (800606c <HAL_DMA_Init+0x428>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eac:	d328      	bcc.n	8005f00 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b28      	cmp	r3, #40	; 0x28
 8005eb4:	d903      	bls.n	8005ebe <HAL_DMA_Init+0x27a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b2e      	cmp	r3, #46	; 0x2e
 8005ebc:	d917      	bls.n	8005eee <HAL_DMA_Init+0x2aa>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ec4:	d903      	bls.n	8005ece <HAL_DMA_Init+0x28a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b42      	cmp	r3, #66	; 0x42
 8005ecc:	d90f      	bls.n	8005eee <HAL_DMA_Init+0x2aa>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2b46      	cmp	r3, #70	; 0x46
 8005ed4:	d903      	bls.n	8005ede <HAL_DMA_Init+0x29a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b48      	cmp	r3, #72	; 0x48
 8005edc:	d907      	bls.n	8005eee <HAL_DMA_Init+0x2aa>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b4e      	cmp	r3, #78	; 0x4e
 8005ee4:	d905      	bls.n	8005ef2 <HAL_DMA_Init+0x2ae>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b52      	cmp	r3, #82	; 0x52
 8005eec:	d801      	bhi.n	8005ef2 <HAL_DMA_Init+0x2ae>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <HAL_DMA_Init+0x2b0>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005efe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f023 0307 	bic.w	r3, r3, #7
 8005f16:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d117      	bne.n	8005f5a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00e      	beq.n	8005f5a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f002 fb33 	bl	80085a8 <DMA_CheckFifoParam>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2240      	movs	r2, #64	; 0x40
 8005f4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e197      	b.n	800628a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f002 fa6e 	bl	8008444 <DMA_CalcBaseAndBitshift>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	223f      	movs	r2, #63	; 0x3f
 8005f76:	409a      	lsls	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	609a      	str	r2, [r3, #8]
 8005f7c:	e0cd      	b.n	800611a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a3b      	ldr	r2, [pc, #236]	; (8006070 <HAL_DMA_Init+0x42c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d022      	beq.n	8005fce <HAL_DMA_Init+0x38a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a39      	ldr	r2, [pc, #228]	; (8006074 <HAL_DMA_Init+0x430>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01d      	beq.n	8005fce <HAL_DMA_Init+0x38a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a38      	ldr	r2, [pc, #224]	; (8006078 <HAL_DMA_Init+0x434>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d018      	beq.n	8005fce <HAL_DMA_Init+0x38a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a36      	ldr	r2, [pc, #216]	; (800607c <HAL_DMA_Init+0x438>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d013      	beq.n	8005fce <HAL_DMA_Init+0x38a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a35      	ldr	r2, [pc, #212]	; (8006080 <HAL_DMA_Init+0x43c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00e      	beq.n	8005fce <HAL_DMA_Init+0x38a>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a33      	ldr	r2, [pc, #204]	; (8006084 <HAL_DMA_Init+0x440>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d009      	beq.n	8005fce <HAL_DMA_Init+0x38a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a32      	ldr	r2, [pc, #200]	; (8006088 <HAL_DMA_Init+0x444>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d004      	beq.n	8005fce <HAL_DMA_Init+0x38a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a30      	ldr	r2, [pc, #192]	; (800608c <HAL_DMA_Init+0x448>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d101      	bne.n	8005fd2 <HAL_DMA_Init+0x38e>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <HAL_DMA_Init+0x390>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8097 	beq.w	8006108 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a24      	ldr	r2, [pc, #144]	; (8006070 <HAL_DMA_Init+0x42c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d021      	beq.n	8006028 <HAL_DMA_Init+0x3e4>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a22      	ldr	r2, [pc, #136]	; (8006074 <HAL_DMA_Init+0x430>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d01c      	beq.n	8006028 <HAL_DMA_Init+0x3e4>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a21      	ldr	r2, [pc, #132]	; (8006078 <HAL_DMA_Init+0x434>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d017      	beq.n	8006028 <HAL_DMA_Init+0x3e4>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1f      	ldr	r2, [pc, #124]	; (800607c <HAL_DMA_Init+0x438>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d012      	beq.n	8006028 <HAL_DMA_Init+0x3e4>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1e      	ldr	r2, [pc, #120]	; (8006080 <HAL_DMA_Init+0x43c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00d      	beq.n	8006028 <HAL_DMA_Init+0x3e4>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1c      	ldr	r2, [pc, #112]	; (8006084 <HAL_DMA_Init+0x440>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d008      	beq.n	8006028 <HAL_DMA_Init+0x3e4>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1b      	ldr	r2, [pc, #108]	; (8006088 <HAL_DMA_Init+0x444>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <HAL_DMA_Init+0x3e4>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a19      	ldr	r2, [pc, #100]	; (800608c <HAL_DMA_Init+0x448>)
 8006026:	4293      	cmp	r3, r2
 8006028:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4b12      	ldr	r3, [pc, #72]	; (8006090 <HAL_DMA_Init+0x44c>)
 8006046:	4013      	ands	r3, r2
 8006048:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d020      	beq.n	8006094 <HAL_DMA_Init+0x450>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b80      	cmp	r3, #128	; 0x80
 8006058:	d102      	bne.n	8006060 <HAL_DMA_Init+0x41c>
 800605a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800605e:	e01a      	b.n	8006096 <HAL_DMA_Init+0x452>
 8006060:	2300      	movs	r3, #0
 8006062:	e018      	b.n	8006096 <HAL_DMA_Init+0x452>
 8006064:	fe10803f 	.word	0xfe10803f
 8006068:	5c001000 	.word	0x5c001000
 800606c:	ffff0000 	.word	0xffff0000
 8006070:	58025408 	.word	0x58025408
 8006074:	5802541c 	.word	0x5802541c
 8006078:	58025430 	.word	0x58025430
 800607c:	58025444 	.word	0x58025444
 8006080:	58025458 	.word	0x58025458
 8006084:	5802546c 	.word	0x5802546c
 8006088:	58025480 	.word	0x58025480
 800608c:	58025494 	.word	0x58025494
 8006090:	fffe000f 	.word	0xfffe000f
 8006094:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	68d2      	ldr	r2, [r2, #12]
 800609a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800609c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80060ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80060bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	4b6e      	ldr	r3, [pc, #440]	; (8006294 <HAL_DMA_Init+0x650>)
 80060dc:	4413      	add	r3, r2
 80060de:	4a6e      	ldr	r2, [pc, #440]	; (8006298 <HAL_DMA_Init+0x654>)
 80060e0:	fba2 2303 	umull	r2, r3, r2, r3
 80060e4:	091b      	lsrs	r3, r3, #4
 80060e6:	009a      	lsls	r2, r3, #2
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f002 f9a9 	bl	8008444 <DMA_CalcBaseAndBitshift>
 80060f2:	4603      	mov	r3, r0
 80060f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	2201      	movs	r2, #1
 8006100:	409a      	lsls	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	e008      	b.n	800611a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2240      	movs	r2, #64	; 0x40
 800610c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2203      	movs	r2, #3
 8006112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e0b7      	b.n	800628a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a5f      	ldr	r2, [pc, #380]	; (800629c <HAL_DMA_Init+0x658>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d072      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a5d      	ldr	r2, [pc, #372]	; (80062a0 <HAL_DMA_Init+0x65c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d06d      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a5c      	ldr	r2, [pc, #368]	; (80062a4 <HAL_DMA_Init+0x660>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d068      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a5a      	ldr	r2, [pc, #360]	; (80062a8 <HAL_DMA_Init+0x664>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d063      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a59      	ldr	r2, [pc, #356]	; (80062ac <HAL_DMA_Init+0x668>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d05e      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a57      	ldr	r2, [pc, #348]	; (80062b0 <HAL_DMA_Init+0x66c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d059      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a56      	ldr	r2, [pc, #344]	; (80062b4 <HAL_DMA_Init+0x670>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d054      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a54      	ldr	r2, [pc, #336]	; (80062b8 <HAL_DMA_Init+0x674>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d04f      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a53      	ldr	r2, [pc, #332]	; (80062bc <HAL_DMA_Init+0x678>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d04a      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a51      	ldr	r2, [pc, #324]	; (80062c0 <HAL_DMA_Init+0x67c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d045      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a50      	ldr	r2, [pc, #320]	; (80062c4 <HAL_DMA_Init+0x680>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d040      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a4e      	ldr	r2, [pc, #312]	; (80062c8 <HAL_DMA_Init+0x684>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d03b      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a4d      	ldr	r2, [pc, #308]	; (80062cc <HAL_DMA_Init+0x688>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d036      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a4b      	ldr	r2, [pc, #300]	; (80062d0 <HAL_DMA_Init+0x68c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d031      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a4a      	ldr	r2, [pc, #296]	; (80062d4 <HAL_DMA_Init+0x690>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d02c      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a48      	ldr	r2, [pc, #288]	; (80062d8 <HAL_DMA_Init+0x694>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d027      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a47      	ldr	r2, [pc, #284]	; (80062dc <HAL_DMA_Init+0x698>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d022      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a45      	ldr	r2, [pc, #276]	; (80062e0 <HAL_DMA_Init+0x69c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01d      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a44      	ldr	r2, [pc, #272]	; (80062e4 <HAL_DMA_Init+0x6a0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d018      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a42      	ldr	r2, [pc, #264]	; (80062e8 <HAL_DMA_Init+0x6a4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a41      	ldr	r2, [pc, #260]	; (80062ec <HAL_DMA_Init+0x6a8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00e      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a3f      	ldr	r2, [pc, #252]	; (80062f0 <HAL_DMA_Init+0x6ac>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d009      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a3e      	ldr	r2, [pc, #248]	; (80062f4 <HAL_DMA_Init+0x6b0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d004      	beq.n	800620a <HAL_DMA_Init+0x5c6>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a3c      	ldr	r2, [pc, #240]	; (80062f8 <HAL_DMA_Init+0x6b4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d101      	bne.n	800620e <HAL_DMA_Init+0x5ca>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <HAL_DMA_Init+0x5cc>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d032      	beq.n	800627a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f002 fa43 	bl	80086a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b80      	cmp	r3, #128	; 0x80
 8006220:	d102      	bne.n	8006228 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800623c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d010      	beq.n	8006268 <HAL_DMA_Init+0x624>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b08      	cmp	r3, #8
 800624c:	d80c      	bhi.n	8006268 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f002 fac0 	bl	80087d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	e008      	b.n	800627a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	a7fdabf8 	.word	0xa7fdabf8
 8006298:	cccccccd 	.word	0xcccccccd
 800629c:	40020010 	.word	0x40020010
 80062a0:	40020028 	.word	0x40020028
 80062a4:	40020040 	.word	0x40020040
 80062a8:	40020058 	.word	0x40020058
 80062ac:	40020070 	.word	0x40020070
 80062b0:	40020088 	.word	0x40020088
 80062b4:	400200a0 	.word	0x400200a0
 80062b8:	400200b8 	.word	0x400200b8
 80062bc:	40020410 	.word	0x40020410
 80062c0:	40020428 	.word	0x40020428
 80062c4:	40020440 	.word	0x40020440
 80062c8:	40020458 	.word	0x40020458
 80062cc:	40020470 	.word	0x40020470
 80062d0:	40020488 	.word	0x40020488
 80062d4:	400204a0 	.word	0x400204a0
 80062d8:	400204b8 	.word	0x400204b8
 80062dc:	58025408 	.word	0x58025408
 80062e0:	5802541c 	.word	0x5802541c
 80062e4:	58025430 	.word	0x58025430
 80062e8:	58025444 	.word	0x58025444
 80062ec:	58025458 	.word	0x58025458
 80062f0:	5802546c 	.word	0x5802546c
 80062f4:	58025480 	.word	0x58025480
 80062f8:	58025494 	.word	0x58025494

080062fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e226      	b.n	8006766 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_DMA_Start_IT+0x2a>
 8006322:	2302      	movs	r3, #2
 8006324:	e21f      	b.n	8006766 <HAL_DMA_Start_IT+0x46a>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	f040 820a 	bne.w	8006750 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a68      	ldr	r2, [pc, #416]	; (80064f0 <HAL_DMA_Start_IT+0x1f4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d04a      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a66      	ldr	r2, [pc, #408]	; (80064f4 <HAL_DMA_Start_IT+0x1f8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d045      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a65      	ldr	r2, [pc, #404]	; (80064f8 <HAL_DMA_Start_IT+0x1fc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d040      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a63      	ldr	r2, [pc, #396]	; (80064fc <HAL_DMA_Start_IT+0x200>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d03b      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a62      	ldr	r2, [pc, #392]	; (8006500 <HAL_DMA_Start_IT+0x204>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d036      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a60      	ldr	r2, [pc, #384]	; (8006504 <HAL_DMA_Start_IT+0x208>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d031      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a5f      	ldr	r2, [pc, #380]	; (8006508 <HAL_DMA_Start_IT+0x20c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d02c      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a5d      	ldr	r2, [pc, #372]	; (800650c <HAL_DMA_Start_IT+0x210>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d027      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a5c      	ldr	r2, [pc, #368]	; (8006510 <HAL_DMA_Start_IT+0x214>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d022      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a5a      	ldr	r2, [pc, #360]	; (8006514 <HAL_DMA_Start_IT+0x218>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d01d      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a59      	ldr	r2, [pc, #356]	; (8006518 <HAL_DMA_Start_IT+0x21c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d018      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a57      	ldr	r2, [pc, #348]	; (800651c <HAL_DMA_Start_IT+0x220>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a56      	ldr	r2, [pc, #344]	; (8006520 <HAL_DMA_Start_IT+0x224>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00e      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a54      	ldr	r2, [pc, #336]	; (8006524 <HAL_DMA_Start_IT+0x228>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d009      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a53      	ldr	r2, [pc, #332]	; (8006528 <HAL_DMA_Start_IT+0x22c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d004      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a51      	ldr	r2, [pc, #324]	; (800652c <HAL_DMA_Start_IT+0x230>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d108      	bne.n	80063fc <HAL_DMA_Start_IT+0x100>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0201 	bic.w	r2, r2, #1
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	e007      	b.n	800640c <HAL_DMA_Start_IT+0x110>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0201 	bic.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f001 fe6a 	bl	80080ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a34      	ldr	r2, [pc, #208]	; (80064f0 <HAL_DMA_Start_IT+0x1f4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d04a      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a33      	ldr	r2, [pc, #204]	; (80064f4 <HAL_DMA_Start_IT+0x1f8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d045      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a31      	ldr	r2, [pc, #196]	; (80064f8 <HAL_DMA_Start_IT+0x1fc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d040      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a30      	ldr	r2, [pc, #192]	; (80064fc <HAL_DMA_Start_IT+0x200>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d03b      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a2e      	ldr	r2, [pc, #184]	; (8006500 <HAL_DMA_Start_IT+0x204>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d036      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a2d      	ldr	r2, [pc, #180]	; (8006504 <HAL_DMA_Start_IT+0x208>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d031      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a2b      	ldr	r2, [pc, #172]	; (8006508 <HAL_DMA_Start_IT+0x20c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d02c      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a2a      	ldr	r2, [pc, #168]	; (800650c <HAL_DMA_Start_IT+0x210>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d027      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a28      	ldr	r2, [pc, #160]	; (8006510 <HAL_DMA_Start_IT+0x214>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d022      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a27      	ldr	r2, [pc, #156]	; (8006514 <HAL_DMA_Start_IT+0x218>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d01d      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a25      	ldr	r2, [pc, #148]	; (8006518 <HAL_DMA_Start_IT+0x21c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d018      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a24      	ldr	r2, [pc, #144]	; (800651c <HAL_DMA_Start_IT+0x220>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d013      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a22      	ldr	r2, [pc, #136]	; (8006520 <HAL_DMA_Start_IT+0x224>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00e      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a21      	ldr	r2, [pc, #132]	; (8006524 <HAL_DMA_Start_IT+0x228>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d009      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1f      	ldr	r2, [pc, #124]	; (8006528 <HAL_DMA_Start_IT+0x22c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d004      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1e      	ldr	r2, [pc, #120]	; (800652c <HAL_DMA_Start_IT+0x230>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d101      	bne.n	80064bc <HAL_DMA_Start_IT+0x1c0>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <HAL_DMA_Start_IT+0x1c2>
 80064bc:	2300      	movs	r3, #0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d036      	beq.n	8006530 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f023 021e 	bic.w	r2, r3, #30
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0216 	orr.w	r2, r2, #22
 80064d4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d03e      	beq.n	800655c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0208 	orr.w	r2, r2, #8
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e035      	b.n	800655c <HAL_DMA_Start_IT+0x260>
 80064f0:	40020010 	.word	0x40020010
 80064f4:	40020028 	.word	0x40020028
 80064f8:	40020040 	.word	0x40020040
 80064fc:	40020058 	.word	0x40020058
 8006500:	40020070 	.word	0x40020070
 8006504:	40020088 	.word	0x40020088
 8006508:	400200a0 	.word	0x400200a0
 800650c:	400200b8 	.word	0x400200b8
 8006510:	40020410 	.word	0x40020410
 8006514:	40020428 	.word	0x40020428
 8006518:	40020440 	.word	0x40020440
 800651c:	40020458 	.word	0x40020458
 8006520:	40020470 	.word	0x40020470
 8006524:	40020488 	.word	0x40020488
 8006528:	400204a0 	.word	0x400204a0
 800652c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f023 020e 	bic.w	r2, r3, #14
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 020a 	orr.w	r2, r2, #10
 8006542:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0204 	orr.w	r2, r2, #4
 800655a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a83      	ldr	r2, [pc, #524]	; (8006770 <HAL_DMA_Start_IT+0x474>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d072      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a82      	ldr	r2, [pc, #520]	; (8006774 <HAL_DMA_Start_IT+0x478>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d06d      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a80      	ldr	r2, [pc, #512]	; (8006778 <HAL_DMA_Start_IT+0x47c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d068      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a7f      	ldr	r2, [pc, #508]	; (800677c <HAL_DMA_Start_IT+0x480>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d063      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a7d      	ldr	r2, [pc, #500]	; (8006780 <HAL_DMA_Start_IT+0x484>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d05e      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a7c      	ldr	r2, [pc, #496]	; (8006784 <HAL_DMA_Start_IT+0x488>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d059      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a7a      	ldr	r2, [pc, #488]	; (8006788 <HAL_DMA_Start_IT+0x48c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d054      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a79      	ldr	r2, [pc, #484]	; (800678c <HAL_DMA_Start_IT+0x490>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d04f      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a77      	ldr	r2, [pc, #476]	; (8006790 <HAL_DMA_Start_IT+0x494>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d04a      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a76      	ldr	r2, [pc, #472]	; (8006794 <HAL_DMA_Start_IT+0x498>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d045      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a74      	ldr	r2, [pc, #464]	; (8006798 <HAL_DMA_Start_IT+0x49c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d040      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a73      	ldr	r2, [pc, #460]	; (800679c <HAL_DMA_Start_IT+0x4a0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d03b      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a71      	ldr	r2, [pc, #452]	; (80067a0 <HAL_DMA_Start_IT+0x4a4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d036      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a70      	ldr	r2, [pc, #448]	; (80067a4 <HAL_DMA_Start_IT+0x4a8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d031      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a6e      	ldr	r2, [pc, #440]	; (80067a8 <HAL_DMA_Start_IT+0x4ac>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d02c      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a6d      	ldr	r2, [pc, #436]	; (80067ac <HAL_DMA_Start_IT+0x4b0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d027      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a6b      	ldr	r2, [pc, #428]	; (80067b0 <HAL_DMA_Start_IT+0x4b4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d022      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a6a      	ldr	r2, [pc, #424]	; (80067b4 <HAL_DMA_Start_IT+0x4b8>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d01d      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a68      	ldr	r2, [pc, #416]	; (80067b8 <HAL_DMA_Start_IT+0x4bc>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d018      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a67      	ldr	r2, [pc, #412]	; (80067bc <HAL_DMA_Start_IT+0x4c0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a65      	ldr	r2, [pc, #404]	; (80067c0 <HAL_DMA_Start_IT+0x4c4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00e      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a64      	ldr	r2, [pc, #400]	; (80067c4 <HAL_DMA_Start_IT+0x4c8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d009      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a62      	ldr	r2, [pc, #392]	; (80067c8 <HAL_DMA_Start_IT+0x4cc>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d004      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a61      	ldr	r2, [pc, #388]	; (80067cc <HAL_DMA_Start_IT+0x4d0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d101      	bne.n	8006650 <HAL_DMA_Start_IT+0x354>
 800664c:	2301      	movs	r3, #1
 800664e:	e000      	b.n	8006652 <HAL_DMA_Start_IT+0x356>
 8006650:	2300      	movs	r3, #0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d01a      	beq.n	800668c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d007      	beq.n	8006674 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006672:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800668a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a37      	ldr	r2, [pc, #220]	; (8006770 <HAL_DMA_Start_IT+0x474>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d04a      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a36      	ldr	r2, [pc, #216]	; (8006774 <HAL_DMA_Start_IT+0x478>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d045      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a34      	ldr	r2, [pc, #208]	; (8006778 <HAL_DMA_Start_IT+0x47c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d040      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a33      	ldr	r2, [pc, #204]	; (800677c <HAL_DMA_Start_IT+0x480>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d03b      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a31      	ldr	r2, [pc, #196]	; (8006780 <HAL_DMA_Start_IT+0x484>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d036      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a30      	ldr	r2, [pc, #192]	; (8006784 <HAL_DMA_Start_IT+0x488>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d031      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a2e      	ldr	r2, [pc, #184]	; (8006788 <HAL_DMA_Start_IT+0x48c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d02c      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a2d      	ldr	r2, [pc, #180]	; (800678c <HAL_DMA_Start_IT+0x490>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d027      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a2b      	ldr	r2, [pc, #172]	; (8006790 <HAL_DMA_Start_IT+0x494>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d022      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a2a      	ldr	r2, [pc, #168]	; (8006794 <HAL_DMA_Start_IT+0x498>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d01d      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a28      	ldr	r2, [pc, #160]	; (8006798 <HAL_DMA_Start_IT+0x49c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d018      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a27      	ldr	r2, [pc, #156]	; (800679c <HAL_DMA_Start_IT+0x4a0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d013      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a25      	ldr	r2, [pc, #148]	; (80067a0 <HAL_DMA_Start_IT+0x4a4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00e      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a24      	ldr	r2, [pc, #144]	; (80067a4 <HAL_DMA_Start_IT+0x4a8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a22      	ldr	r2, [pc, #136]	; (80067a8 <HAL_DMA_Start_IT+0x4ac>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a21      	ldr	r2, [pc, #132]	; (80067ac <HAL_DMA_Start_IT+0x4b0>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d108      	bne.n	800673e <HAL_DMA_Start_IT+0x442>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0201 	orr.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	e012      	b.n	8006764 <HAL_DMA_Start_IT+0x468>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e009      	b.n	8006764 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006756:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006764:	7dfb      	ldrb	r3, [r7, #23]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40020010 	.word	0x40020010
 8006774:	40020028 	.word	0x40020028
 8006778:	40020040 	.word	0x40020040
 800677c:	40020058 	.word	0x40020058
 8006780:	40020070 	.word	0x40020070
 8006784:	40020088 	.word	0x40020088
 8006788:	400200a0 	.word	0x400200a0
 800678c:	400200b8 	.word	0x400200b8
 8006790:	40020410 	.word	0x40020410
 8006794:	40020428 	.word	0x40020428
 8006798:	40020440 	.word	0x40020440
 800679c:	40020458 	.word	0x40020458
 80067a0:	40020470 	.word	0x40020470
 80067a4:	40020488 	.word	0x40020488
 80067a8:	400204a0 	.word	0x400204a0
 80067ac:	400204b8 	.word	0x400204b8
 80067b0:	58025408 	.word	0x58025408
 80067b4:	5802541c 	.word	0x5802541c
 80067b8:	58025430 	.word	0x58025430
 80067bc:	58025444 	.word	0x58025444
 80067c0:	58025458 	.word	0x58025458
 80067c4:	5802546c 	.word	0x5802546c
 80067c8:	58025480 	.word	0x58025480
 80067cc:	58025494 	.word	0x58025494

080067d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80067d8:	f7fd f90c 	bl	80039f4 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e2dc      	b.n	8006da2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d008      	beq.n	8006806 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2280      	movs	r2, #128	; 0x80
 80067f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e2cd      	b.n	8006da2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a76      	ldr	r2, [pc, #472]	; (80069e4 <HAL_DMA_Abort+0x214>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d04a      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a74      	ldr	r2, [pc, #464]	; (80069e8 <HAL_DMA_Abort+0x218>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d045      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a73      	ldr	r2, [pc, #460]	; (80069ec <HAL_DMA_Abort+0x21c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d040      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a71      	ldr	r2, [pc, #452]	; (80069f0 <HAL_DMA_Abort+0x220>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d03b      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a70      	ldr	r2, [pc, #448]	; (80069f4 <HAL_DMA_Abort+0x224>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d036      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a6e      	ldr	r2, [pc, #440]	; (80069f8 <HAL_DMA_Abort+0x228>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d031      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a6d      	ldr	r2, [pc, #436]	; (80069fc <HAL_DMA_Abort+0x22c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d02c      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a6b      	ldr	r2, [pc, #428]	; (8006a00 <HAL_DMA_Abort+0x230>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d027      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a6a      	ldr	r2, [pc, #424]	; (8006a04 <HAL_DMA_Abort+0x234>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d022      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a68      	ldr	r2, [pc, #416]	; (8006a08 <HAL_DMA_Abort+0x238>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d01d      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a67      	ldr	r2, [pc, #412]	; (8006a0c <HAL_DMA_Abort+0x23c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d018      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a65      	ldr	r2, [pc, #404]	; (8006a10 <HAL_DMA_Abort+0x240>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d013      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a64      	ldr	r2, [pc, #400]	; (8006a14 <HAL_DMA_Abort+0x244>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00e      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a62      	ldr	r2, [pc, #392]	; (8006a18 <HAL_DMA_Abort+0x248>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d009      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a61      	ldr	r2, [pc, #388]	; (8006a1c <HAL_DMA_Abort+0x24c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d004      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a5f      	ldr	r2, [pc, #380]	; (8006a20 <HAL_DMA_Abort+0x250>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d101      	bne.n	80068aa <HAL_DMA_Abort+0xda>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <HAL_DMA_Abort+0xdc>
 80068aa:	2300      	movs	r3, #0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d013      	beq.n	80068d8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 021e 	bic.w	r2, r2, #30
 80068be:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695a      	ldr	r2, [r3, #20]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	e00a      	b.n	80068ee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 020e 	bic.w	r2, r2, #14
 80068e6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <HAL_DMA_Abort+0x214>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d072      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a3a      	ldr	r2, [pc, #232]	; (80069e8 <HAL_DMA_Abort+0x218>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d06d      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a39      	ldr	r2, [pc, #228]	; (80069ec <HAL_DMA_Abort+0x21c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d068      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a37      	ldr	r2, [pc, #220]	; (80069f0 <HAL_DMA_Abort+0x220>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d063      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a36      	ldr	r2, [pc, #216]	; (80069f4 <HAL_DMA_Abort+0x224>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d05e      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a34      	ldr	r2, [pc, #208]	; (80069f8 <HAL_DMA_Abort+0x228>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d059      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a33      	ldr	r2, [pc, #204]	; (80069fc <HAL_DMA_Abort+0x22c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d054      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a31      	ldr	r2, [pc, #196]	; (8006a00 <HAL_DMA_Abort+0x230>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d04f      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a30      	ldr	r2, [pc, #192]	; (8006a04 <HAL_DMA_Abort+0x234>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d04a      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a2e      	ldr	r2, [pc, #184]	; (8006a08 <HAL_DMA_Abort+0x238>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d045      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a2d      	ldr	r2, [pc, #180]	; (8006a0c <HAL_DMA_Abort+0x23c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d040      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a2b      	ldr	r2, [pc, #172]	; (8006a10 <HAL_DMA_Abort+0x240>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d03b      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a2a      	ldr	r2, [pc, #168]	; (8006a14 <HAL_DMA_Abort+0x244>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d036      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a28      	ldr	r2, [pc, #160]	; (8006a18 <HAL_DMA_Abort+0x248>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d031      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a27      	ldr	r2, [pc, #156]	; (8006a1c <HAL_DMA_Abort+0x24c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d02c      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a25      	ldr	r2, [pc, #148]	; (8006a20 <HAL_DMA_Abort+0x250>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d027      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a24      	ldr	r2, [pc, #144]	; (8006a24 <HAL_DMA_Abort+0x254>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d022      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a22      	ldr	r2, [pc, #136]	; (8006a28 <HAL_DMA_Abort+0x258>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01d      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a21      	ldr	r2, [pc, #132]	; (8006a2c <HAL_DMA_Abort+0x25c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d018      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <HAL_DMA_Abort+0x260>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <HAL_DMA_Abort+0x264>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00e      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <HAL_DMA_Abort+0x268>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d009      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1b      	ldr	r2, [pc, #108]	; (8006a3c <HAL_DMA_Abort+0x26c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d004      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a19      	ldr	r2, [pc, #100]	; (8006a40 <HAL_DMA_Abort+0x270>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d132      	bne.n	8006a44 <HAL_DMA_Abort+0x274>
 80069de:	2301      	movs	r3, #1
 80069e0:	e031      	b.n	8006a46 <HAL_DMA_Abort+0x276>
 80069e2:	bf00      	nop
 80069e4:	40020010 	.word	0x40020010
 80069e8:	40020028 	.word	0x40020028
 80069ec:	40020040 	.word	0x40020040
 80069f0:	40020058 	.word	0x40020058
 80069f4:	40020070 	.word	0x40020070
 80069f8:	40020088 	.word	0x40020088
 80069fc:	400200a0 	.word	0x400200a0
 8006a00:	400200b8 	.word	0x400200b8
 8006a04:	40020410 	.word	0x40020410
 8006a08:	40020428 	.word	0x40020428
 8006a0c:	40020440 	.word	0x40020440
 8006a10:	40020458 	.word	0x40020458
 8006a14:	40020470 	.word	0x40020470
 8006a18:	40020488 	.word	0x40020488
 8006a1c:	400204a0 	.word	0x400204a0
 8006a20:	400204b8 	.word	0x400204b8
 8006a24:	58025408 	.word	0x58025408
 8006a28:	5802541c 	.word	0x5802541c
 8006a2c:	58025430 	.word	0x58025430
 8006a30:	58025444 	.word	0x58025444
 8006a34:	58025458 	.word	0x58025458
 8006a38:	5802546c 	.word	0x5802546c
 8006a3c:	58025480 	.word	0x58025480
 8006a40:	58025494 	.word	0x58025494
 8006a44:	2300      	movs	r3, #0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a6d      	ldr	r2, [pc, #436]	; (8006c14 <HAL_DMA_Abort+0x444>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d04a      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a6b      	ldr	r2, [pc, #428]	; (8006c18 <HAL_DMA_Abort+0x448>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d045      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a6a      	ldr	r2, [pc, #424]	; (8006c1c <HAL_DMA_Abort+0x44c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d040      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a68      	ldr	r2, [pc, #416]	; (8006c20 <HAL_DMA_Abort+0x450>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d03b      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a67      	ldr	r2, [pc, #412]	; (8006c24 <HAL_DMA_Abort+0x454>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d036      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a65      	ldr	r2, [pc, #404]	; (8006c28 <HAL_DMA_Abort+0x458>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d031      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a64      	ldr	r2, [pc, #400]	; (8006c2c <HAL_DMA_Abort+0x45c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d02c      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a62      	ldr	r2, [pc, #392]	; (8006c30 <HAL_DMA_Abort+0x460>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d027      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a61      	ldr	r2, [pc, #388]	; (8006c34 <HAL_DMA_Abort+0x464>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d022      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a5f      	ldr	r2, [pc, #380]	; (8006c38 <HAL_DMA_Abort+0x468>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d01d      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a5e      	ldr	r2, [pc, #376]	; (8006c3c <HAL_DMA_Abort+0x46c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d018      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a5c      	ldr	r2, [pc, #368]	; (8006c40 <HAL_DMA_Abort+0x470>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a5b      	ldr	r2, [pc, #364]	; (8006c44 <HAL_DMA_Abort+0x474>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00e      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a59      	ldr	r2, [pc, #356]	; (8006c48 <HAL_DMA_Abort+0x478>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d009      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a58      	ldr	r2, [pc, #352]	; (8006c4c <HAL_DMA_Abort+0x47c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d004      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a56      	ldr	r2, [pc, #344]	; (8006c50 <HAL_DMA_Abort+0x480>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d108      	bne.n	8006b0c <HAL_DMA_Abort+0x33c>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0201 	bic.w	r2, r2, #1
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	e007      	b.n	8006b1c <HAL_DMA_Abort+0x34c>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0201 	bic.w	r2, r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b1c:	e013      	b.n	8006b46 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b1e:	f7fc ff69 	bl	80039f4 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b05      	cmp	r3, #5
 8006b2a:	d90c      	bls.n	8006b46 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2203      	movs	r2, #3
 8006b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e12d      	b.n	8006da2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e5      	bne.n	8006b1e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a2f      	ldr	r2, [pc, #188]	; (8006c14 <HAL_DMA_Abort+0x444>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d04a      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2d      	ldr	r2, [pc, #180]	; (8006c18 <HAL_DMA_Abort+0x448>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d045      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a2c      	ldr	r2, [pc, #176]	; (8006c1c <HAL_DMA_Abort+0x44c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d040      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a2a      	ldr	r2, [pc, #168]	; (8006c20 <HAL_DMA_Abort+0x450>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d03b      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a29      	ldr	r2, [pc, #164]	; (8006c24 <HAL_DMA_Abort+0x454>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d036      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a27      	ldr	r2, [pc, #156]	; (8006c28 <HAL_DMA_Abort+0x458>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d031      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a26      	ldr	r2, [pc, #152]	; (8006c2c <HAL_DMA_Abort+0x45c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d02c      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a24      	ldr	r2, [pc, #144]	; (8006c30 <HAL_DMA_Abort+0x460>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d027      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a23      	ldr	r2, [pc, #140]	; (8006c34 <HAL_DMA_Abort+0x464>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d022      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a21      	ldr	r2, [pc, #132]	; (8006c38 <HAL_DMA_Abort+0x468>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01d      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a20      	ldr	r2, [pc, #128]	; (8006c3c <HAL_DMA_Abort+0x46c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d018      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1e      	ldr	r2, [pc, #120]	; (8006c40 <HAL_DMA_Abort+0x470>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d013      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <HAL_DMA_Abort+0x474>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00e      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1b      	ldr	r2, [pc, #108]	; (8006c48 <HAL_DMA_Abort+0x478>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d009      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1a      	ldr	r2, [pc, #104]	; (8006c4c <HAL_DMA_Abort+0x47c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a18      	ldr	r2, [pc, #96]	; (8006c50 <HAL_DMA_Abort+0x480>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d101      	bne.n	8006bf6 <HAL_DMA_Abort+0x426>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <HAL_DMA_Abort+0x428>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d02b      	beq.n	8006c54 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c00:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	223f      	movs	r2, #63	; 0x3f
 8006c0c:	409a      	lsls	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	609a      	str	r2, [r3, #8]
 8006c12:	e02a      	b.n	8006c6a <HAL_DMA_Abort+0x49a>
 8006c14:	40020010 	.word	0x40020010
 8006c18:	40020028 	.word	0x40020028
 8006c1c:	40020040 	.word	0x40020040
 8006c20:	40020058 	.word	0x40020058
 8006c24:	40020070 	.word	0x40020070
 8006c28:	40020088 	.word	0x40020088
 8006c2c:	400200a0 	.word	0x400200a0
 8006c30:	400200b8 	.word	0x400200b8
 8006c34:	40020410 	.word	0x40020410
 8006c38:	40020428 	.word	0x40020428
 8006c3c:	40020440 	.word	0x40020440
 8006c40:	40020458 	.word	0x40020458
 8006c44:	40020470 	.word	0x40020470
 8006c48:	40020488 	.word	0x40020488
 8006c4c:	400204a0 	.word	0x400204a0
 8006c50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c58:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	2201      	movs	r2, #1
 8006c64:	409a      	lsls	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a4f      	ldr	r2, [pc, #316]	; (8006dac <HAL_DMA_Abort+0x5dc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d072      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a4d      	ldr	r2, [pc, #308]	; (8006db0 <HAL_DMA_Abort+0x5e0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d06d      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a4c      	ldr	r2, [pc, #304]	; (8006db4 <HAL_DMA_Abort+0x5e4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d068      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a4a      	ldr	r2, [pc, #296]	; (8006db8 <HAL_DMA_Abort+0x5e8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d063      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a49      	ldr	r2, [pc, #292]	; (8006dbc <HAL_DMA_Abort+0x5ec>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d05e      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a47      	ldr	r2, [pc, #284]	; (8006dc0 <HAL_DMA_Abort+0x5f0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d059      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a46      	ldr	r2, [pc, #280]	; (8006dc4 <HAL_DMA_Abort+0x5f4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d054      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a44      	ldr	r2, [pc, #272]	; (8006dc8 <HAL_DMA_Abort+0x5f8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d04f      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a43      	ldr	r2, [pc, #268]	; (8006dcc <HAL_DMA_Abort+0x5fc>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d04a      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a41      	ldr	r2, [pc, #260]	; (8006dd0 <HAL_DMA_Abort+0x600>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d045      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a40      	ldr	r2, [pc, #256]	; (8006dd4 <HAL_DMA_Abort+0x604>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d040      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a3e      	ldr	r2, [pc, #248]	; (8006dd8 <HAL_DMA_Abort+0x608>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d03b      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a3d      	ldr	r2, [pc, #244]	; (8006ddc <HAL_DMA_Abort+0x60c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d036      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a3b      	ldr	r2, [pc, #236]	; (8006de0 <HAL_DMA_Abort+0x610>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d031      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a3a      	ldr	r2, [pc, #232]	; (8006de4 <HAL_DMA_Abort+0x614>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d02c      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a38      	ldr	r2, [pc, #224]	; (8006de8 <HAL_DMA_Abort+0x618>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d027      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a37      	ldr	r2, [pc, #220]	; (8006dec <HAL_DMA_Abort+0x61c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d022      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a35      	ldr	r2, [pc, #212]	; (8006df0 <HAL_DMA_Abort+0x620>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d01d      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a34      	ldr	r2, [pc, #208]	; (8006df4 <HAL_DMA_Abort+0x624>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d018      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a32      	ldr	r2, [pc, #200]	; (8006df8 <HAL_DMA_Abort+0x628>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a31      	ldr	r2, [pc, #196]	; (8006dfc <HAL_DMA_Abort+0x62c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00e      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a2f      	ldr	r2, [pc, #188]	; (8006e00 <HAL_DMA_Abort+0x630>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a2e      	ldr	r2, [pc, #184]	; (8006e04 <HAL_DMA_Abort+0x634>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a2c      	ldr	r2, [pc, #176]	; (8006e08 <HAL_DMA_Abort+0x638>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d101      	bne.n	8006d5e <HAL_DMA_Abort+0x58e>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <HAL_DMA_Abort+0x590>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d015      	beq.n	8006d90 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d6c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00c      	beq.n	8006d90 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d84:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d8e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40020010 	.word	0x40020010
 8006db0:	40020028 	.word	0x40020028
 8006db4:	40020040 	.word	0x40020040
 8006db8:	40020058 	.word	0x40020058
 8006dbc:	40020070 	.word	0x40020070
 8006dc0:	40020088 	.word	0x40020088
 8006dc4:	400200a0 	.word	0x400200a0
 8006dc8:	400200b8 	.word	0x400200b8
 8006dcc:	40020410 	.word	0x40020410
 8006dd0:	40020428 	.word	0x40020428
 8006dd4:	40020440 	.word	0x40020440
 8006dd8:	40020458 	.word	0x40020458
 8006ddc:	40020470 	.word	0x40020470
 8006de0:	40020488 	.word	0x40020488
 8006de4:	400204a0 	.word	0x400204a0
 8006de8:	400204b8 	.word	0x400204b8
 8006dec:	58025408 	.word	0x58025408
 8006df0:	5802541c 	.word	0x5802541c
 8006df4:	58025430 	.word	0x58025430
 8006df8:	58025444 	.word	0x58025444
 8006dfc:	58025458 	.word	0x58025458
 8006e00:	5802546c 	.word	0x5802546c
 8006e04:	58025480 	.word	0x58025480
 8006e08:	58025494 	.word	0x58025494

08006e0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e237      	b.n	800728e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d004      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2280      	movs	r2, #128	; 0x80
 8006e2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e22c      	b.n	800728e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a5c      	ldr	r2, [pc, #368]	; (8006fac <HAL_DMA_Abort_IT+0x1a0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d04a      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a5b      	ldr	r2, [pc, #364]	; (8006fb0 <HAL_DMA_Abort_IT+0x1a4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d045      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a59      	ldr	r2, [pc, #356]	; (8006fb4 <HAL_DMA_Abort_IT+0x1a8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d040      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a58      	ldr	r2, [pc, #352]	; (8006fb8 <HAL_DMA_Abort_IT+0x1ac>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d03b      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a56      	ldr	r2, [pc, #344]	; (8006fbc <HAL_DMA_Abort_IT+0x1b0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d036      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a55      	ldr	r2, [pc, #340]	; (8006fc0 <HAL_DMA_Abort_IT+0x1b4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d031      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a53      	ldr	r2, [pc, #332]	; (8006fc4 <HAL_DMA_Abort_IT+0x1b8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d02c      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a52      	ldr	r2, [pc, #328]	; (8006fc8 <HAL_DMA_Abort_IT+0x1bc>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d027      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a50      	ldr	r2, [pc, #320]	; (8006fcc <HAL_DMA_Abort_IT+0x1c0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d022      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a4f      	ldr	r2, [pc, #316]	; (8006fd0 <HAL_DMA_Abort_IT+0x1c4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d01d      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a4d      	ldr	r2, [pc, #308]	; (8006fd4 <HAL_DMA_Abort_IT+0x1c8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d018      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a4c      	ldr	r2, [pc, #304]	; (8006fd8 <HAL_DMA_Abort_IT+0x1cc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d013      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a4a      	ldr	r2, [pc, #296]	; (8006fdc <HAL_DMA_Abort_IT+0x1d0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00e      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a49      	ldr	r2, [pc, #292]	; (8006fe0 <HAL_DMA_Abort_IT+0x1d4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d009      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a47      	ldr	r2, [pc, #284]	; (8006fe4 <HAL_DMA_Abort_IT+0x1d8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d004      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a46      	ldr	r2, [pc, #280]	; (8006fe8 <HAL_DMA_Abort_IT+0x1dc>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d101      	bne.n	8006ed8 <HAL_DMA_Abort_IT+0xcc>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e000      	b.n	8006eda <HAL_DMA_Abort_IT+0xce>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 8086 	beq.w	8006fec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2f      	ldr	r2, [pc, #188]	; (8006fac <HAL_DMA_Abort_IT+0x1a0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d04a      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a2e      	ldr	r2, [pc, #184]	; (8006fb0 <HAL_DMA_Abort_IT+0x1a4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d045      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a2c      	ldr	r2, [pc, #176]	; (8006fb4 <HAL_DMA_Abort_IT+0x1a8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d040      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a2b      	ldr	r2, [pc, #172]	; (8006fb8 <HAL_DMA_Abort_IT+0x1ac>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d03b      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a29      	ldr	r2, [pc, #164]	; (8006fbc <HAL_DMA_Abort_IT+0x1b0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d036      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a28      	ldr	r2, [pc, #160]	; (8006fc0 <HAL_DMA_Abort_IT+0x1b4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d031      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a26      	ldr	r2, [pc, #152]	; (8006fc4 <HAL_DMA_Abort_IT+0x1b8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d02c      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a25      	ldr	r2, [pc, #148]	; (8006fc8 <HAL_DMA_Abort_IT+0x1bc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d027      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a23      	ldr	r2, [pc, #140]	; (8006fcc <HAL_DMA_Abort_IT+0x1c0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d022      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a22      	ldr	r2, [pc, #136]	; (8006fd0 <HAL_DMA_Abort_IT+0x1c4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d01d      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a20      	ldr	r2, [pc, #128]	; (8006fd4 <HAL_DMA_Abort_IT+0x1c8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d018      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1f      	ldr	r2, [pc, #124]	; (8006fd8 <HAL_DMA_Abort_IT+0x1cc>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d013      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <HAL_DMA_Abort_IT+0x1d0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00e      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <HAL_DMA_Abort_IT+0x1d4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d009      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a1a      	ldr	r2, [pc, #104]	; (8006fe4 <HAL_DMA_Abort_IT+0x1d8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <HAL_DMA_Abort_IT+0x1dc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d108      	bne.n	8006f9a <HAL_DMA_Abort_IT+0x18e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	e178      	b.n	800728c <HAL_DMA_Abort_IT+0x480>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 0201 	bic.w	r2, r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	e16f      	b.n	800728c <HAL_DMA_Abort_IT+0x480>
 8006fac:	40020010 	.word	0x40020010
 8006fb0:	40020028 	.word	0x40020028
 8006fb4:	40020040 	.word	0x40020040
 8006fb8:	40020058 	.word	0x40020058
 8006fbc:	40020070 	.word	0x40020070
 8006fc0:	40020088 	.word	0x40020088
 8006fc4:	400200a0 	.word	0x400200a0
 8006fc8:	400200b8 	.word	0x400200b8
 8006fcc:	40020410 	.word	0x40020410
 8006fd0:	40020428 	.word	0x40020428
 8006fd4:	40020440 	.word	0x40020440
 8006fd8:	40020458 	.word	0x40020458
 8006fdc:	40020470 	.word	0x40020470
 8006fe0:	40020488 	.word	0x40020488
 8006fe4:	400204a0 	.word	0x400204a0
 8006fe8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 020e 	bic.w	r2, r2, #14
 8006ffa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a6c      	ldr	r2, [pc, #432]	; (80071b4 <HAL_DMA_Abort_IT+0x3a8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d04a      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a6b      	ldr	r2, [pc, #428]	; (80071b8 <HAL_DMA_Abort_IT+0x3ac>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d045      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a69      	ldr	r2, [pc, #420]	; (80071bc <HAL_DMA_Abort_IT+0x3b0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d040      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a68      	ldr	r2, [pc, #416]	; (80071c0 <HAL_DMA_Abort_IT+0x3b4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d03b      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a66      	ldr	r2, [pc, #408]	; (80071c4 <HAL_DMA_Abort_IT+0x3b8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d036      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a65      	ldr	r2, [pc, #404]	; (80071c8 <HAL_DMA_Abort_IT+0x3bc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d031      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a63      	ldr	r2, [pc, #396]	; (80071cc <HAL_DMA_Abort_IT+0x3c0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d02c      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a62      	ldr	r2, [pc, #392]	; (80071d0 <HAL_DMA_Abort_IT+0x3c4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d027      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a60      	ldr	r2, [pc, #384]	; (80071d4 <HAL_DMA_Abort_IT+0x3c8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d022      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a5f      	ldr	r2, [pc, #380]	; (80071d8 <HAL_DMA_Abort_IT+0x3cc>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d01d      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a5d      	ldr	r2, [pc, #372]	; (80071dc <HAL_DMA_Abort_IT+0x3d0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d018      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a5c      	ldr	r2, [pc, #368]	; (80071e0 <HAL_DMA_Abort_IT+0x3d4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d013      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a5a      	ldr	r2, [pc, #360]	; (80071e4 <HAL_DMA_Abort_IT+0x3d8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00e      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a59      	ldr	r2, [pc, #356]	; (80071e8 <HAL_DMA_Abort_IT+0x3dc>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d009      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a57      	ldr	r2, [pc, #348]	; (80071ec <HAL_DMA_Abort_IT+0x3e0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d004      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a56      	ldr	r2, [pc, #344]	; (80071f0 <HAL_DMA_Abort_IT+0x3e4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d108      	bne.n	80070ae <HAL_DMA_Abort_IT+0x2a2>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0201 	bic.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	e007      	b.n	80070be <HAL_DMA_Abort_IT+0x2b2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0201 	bic.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a3c      	ldr	r2, [pc, #240]	; (80071b4 <HAL_DMA_Abort_IT+0x3a8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d072      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a3a      	ldr	r2, [pc, #232]	; (80071b8 <HAL_DMA_Abort_IT+0x3ac>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d06d      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a39      	ldr	r2, [pc, #228]	; (80071bc <HAL_DMA_Abort_IT+0x3b0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d068      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a37      	ldr	r2, [pc, #220]	; (80071c0 <HAL_DMA_Abort_IT+0x3b4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d063      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a36      	ldr	r2, [pc, #216]	; (80071c4 <HAL_DMA_Abort_IT+0x3b8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d05e      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a34      	ldr	r2, [pc, #208]	; (80071c8 <HAL_DMA_Abort_IT+0x3bc>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d059      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a33      	ldr	r2, [pc, #204]	; (80071cc <HAL_DMA_Abort_IT+0x3c0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d054      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a31      	ldr	r2, [pc, #196]	; (80071d0 <HAL_DMA_Abort_IT+0x3c4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d04f      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a30      	ldr	r2, [pc, #192]	; (80071d4 <HAL_DMA_Abort_IT+0x3c8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d04a      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2e      	ldr	r2, [pc, #184]	; (80071d8 <HAL_DMA_Abort_IT+0x3cc>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d045      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2d      	ldr	r2, [pc, #180]	; (80071dc <HAL_DMA_Abort_IT+0x3d0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d040      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2b      	ldr	r2, [pc, #172]	; (80071e0 <HAL_DMA_Abort_IT+0x3d4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d03b      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a2a      	ldr	r2, [pc, #168]	; (80071e4 <HAL_DMA_Abort_IT+0x3d8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d036      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a28      	ldr	r2, [pc, #160]	; (80071e8 <HAL_DMA_Abort_IT+0x3dc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d031      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a27      	ldr	r2, [pc, #156]	; (80071ec <HAL_DMA_Abort_IT+0x3e0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d02c      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a25      	ldr	r2, [pc, #148]	; (80071f0 <HAL_DMA_Abort_IT+0x3e4>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d027      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a24      	ldr	r2, [pc, #144]	; (80071f4 <HAL_DMA_Abort_IT+0x3e8>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d022      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a22      	ldr	r2, [pc, #136]	; (80071f8 <HAL_DMA_Abort_IT+0x3ec>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d01d      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a21      	ldr	r2, [pc, #132]	; (80071fc <HAL_DMA_Abort_IT+0x3f0>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d018      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <HAL_DMA_Abort_IT+0x3f4>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d013      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a1e      	ldr	r2, [pc, #120]	; (8007204 <HAL_DMA_Abort_IT+0x3f8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00e      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a1c      	ldr	r2, [pc, #112]	; (8007208 <HAL_DMA_Abort_IT+0x3fc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d009      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1b      	ldr	r2, [pc, #108]	; (800720c <HAL_DMA_Abort_IT+0x400>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d004      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a19      	ldr	r2, [pc, #100]	; (8007210 <HAL_DMA_Abort_IT+0x404>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d132      	bne.n	8007214 <HAL_DMA_Abort_IT+0x408>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e031      	b.n	8007216 <HAL_DMA_Abort_IT+0x40a>
 80071b2:	bf00      	nop
 80071b4:	40020010 	.word	0x40020010
 80071b8:	40020028 	.word	0x40020028
 80071bc:	40020040 	.word	0x40020040
 80071c0:	40020058 	.word	0x40020058
 80071c4:	40020070 	.word	0x40020070
 80071c8:	40020088 	.word	0x40020088
 80071cc:	400200a0 	.word	0x400200a0
 80071d0:	400200b8 	.word	0x400200b8
 80071d4:	40020410 	.word	0x40020410
 80071d8:	40020428 	.word	0x40020428
 80071dc:	40020440 	.word	0x40020440
 80071e0:	40020458 	.word	0x40020458
 80071e4:	40020470 	.word	0x40020470
 80071e8:	40020488 	.word	0x40020488
 80071ec:	400204a0 	.word	0x400204a0
 80071f0:	400204b8 	.word	0x400204b8
 80071f4:	58025408 	.word	0x58025408
 80071f8:	5802541c 	.word	0x5802541c
 80071fc:	58025430 	.word	0x58025430
 8007200:	58025444 	.word	0x58025444
 8007204:	58025458 	.word	0x58025458
 8007208:	5802546c 	.word	0x5802546c
 800720c:	58025480 	.word	0x58025480
 8007210:	58025494 	.word	0x58025494
 8007214:	2300      	movs	r3, #0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d028      	beq.n	800726c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007228:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007234:	f003 031f 	and.w	r3, r3, #31
 8007238:	2201      	movs	r2, #1
 800723a:	409a      	lsls	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007248:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00c      	beq.n	800726c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800725c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007260:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800726a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop

08007298 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08a      	sub	sp, #40	; 0x28
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072a4:	4b67      	ldr	r3, [pc, #412]	; (8007444 <HAL_DMA_IRQHandler+0x1ac>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a67      	ldr	r2, [pc, #412]	; (8007448 <HAL_DMA_IRQHandler+0x1b0>)
 80072aa:	fba2 2303 	umull	r2, r3, r2, r3
 80072ae:	0a9b      	lsrs	r3, r3, #10
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a5f      	ldr	r2, [pc, #380]	; (800744c <HAL_DMA_IRQHandler+0x1b4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d04a      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a5d      	ldr	r2, [pc, #372]	; (8007450 <HAL_DMA_IRQHandler+0x1b8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d045      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a5c      	ldr	r2, [pc, #368]	; (8007454 <HAL_DMA_IRQHandler+0x1bc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d040      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a5a      	ldr	r2, [pc, #360]	; (8007458 <HAL_DMA_IRQHandler+0x1c0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d03b      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a59      	ldr	r2, [pc, #356]	; (800745c <HAL_DMA_IRQHandler+0x1c4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d036      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a57      	ldr	r2, [pc, #348]	; (8007460 <HAL_DMA_IRQHandler+0x1c8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d031      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a56      	ldr	r2, [pc, #344]	; (8007464 <HAL_DMA_IRQHandler+0x1cc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d02c      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a54      	ldr	r2, [pc, #336]	; (8007468 <HAL_DMA_IRQHandler+0x1d0>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d027      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a53      	ldr	r2, [pc, #332]	; (800746c <HAL_DMA_IRQHandler+0x1d4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d022      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a51      	ldr	r2, [pc, #324]	; (8007470 <HAL_DMA_IRQHandler+0x1d8>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d01d      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a50      	ldr	r2, [pc, #320]	; (8007474 <HAL_DMA_IRQHandler+0x1dc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d018      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a4e      	ldr	r2, [pc, #312]	; (8007478 <HAL_DMA_IRQHandler+0x1e0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d013      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a4d      	ldr	r2, [pc, #308]	; (800747c <HAL_DMA_IRQHandler+0x1e4>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00e      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a4b      	ldr	r2, [pc, #300]	; (8007480 <HAL_DMA_IRQHandler+0x1e8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d009      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a4a      	ldr	r2, [pc, #296]	; (8007484 <HAL_DMA_IRQHandler+0x1ec>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d004      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a48      	ldr	r2, [pc, #288]	; (8007488 <HAL_DMA_IRQHandler+0x1f0>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d101      	bne.n	800736e <HAL_DMA_IRQHandler+0xd6>
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <HAL_DMA_IRQHandler+0xd8>
 800736e:	2300      	movs	r3, #0
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 842b 	beq.w	8007bcc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	2208      	movs	r2, #8
 8007380:	409a      	lsls	r2, r3
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	4013      	ands	r3, r2
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 80a2 	beq.w	80074d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a2e      	ldr	r2, [pc, #184]	; (800744c <HAL_DMA_IRQHandler+0x1b4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d04a      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a2d      	ldr	r2, [pc, #180]	; (8007450 <HAL_DMA_IRQHandler+0x1b8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d045      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a2b      	ldr	r2, [pc, #172]	; (8007454 <HAL_DMA_IRQHandler+0x1bc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d040      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a2a      	ldr	r2, [pc, #168]	; (8007458 <HAL_DMA_IRQHandler+0x1c0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d03b      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a28      	ldr	r2, [pc, #160]	; (800745c <HAL_DMA_IRQHandler+0x1c4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d036      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a27      	ldr	r2, [pc, #156]	; (8007460 <HAL_DMA_IRQHandler+0x1c8>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d031      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a25      	ldr	r2, [pc, #148]	; (8007464 <HAL_DMA_IRQHandler+0x1cc>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d02c      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a24      	ldr	r2, [pc, #144]	; (8007468 <HAL_DMA_IRQHandler+0x1d0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d027      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a22      	ldr	r2, [pc, #136]	; (800746c <HAL_DMA_IRQHandler+0x1d4>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d022      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a21      	ldr	r2, [pc, #132]	; (8007470 <HAL_DMA_IRQHandler+0x1d8>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d01d      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1f      	ldr	r2, [pc, #124]	; (8007474 <HAL_DMA_IRQHandler+0x1dc>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d018      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1e      	ldr	r2, [pc, #120]	; (8007478 <HAL_DMA_IRQHandler+0x1e0>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d013      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1c      	ldr	r2, [pc, #112]	; (800747c <HAL_DMA_IRQHandler+0x1e4>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00e      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1b      	ldr	r2, [pc, #108]	; (8007480 <HAL_DMA_IRQHandler+0x1e8>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d009      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a19      	ldr	r2, [pc, #100]	; (8007484 <HAL_DMA_IRQHandler+0x1ec>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d004      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a18      	ldr	r2, [pc, #96]	; (8007488 <HAL_DMA_IRQHandler+0x1f0>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d12f      	bne.n	800748c <HAL_DMA_IRQHandler+0x1f4>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	bf14      	ite	ne
 800743a:	2301      	movne	r3, #1
 800743c:	2300      	moveq	r3, #0
 800743e:	b2db      	uxtb	r3, r3
 8007440:	e02e      	b.n	80074a0 <HAL_DMA_IRQHandler+0x208>
 8007442:	bf00      	nop
 8007444:	24000090 	.word	0x24000090
 8007448:	1b4e81b5 	.word	0x1b4e81b5
 800744c:	40020010 	.word	0x40020010
 8007450:	40020028 	.word	0x40020028
 8007454:	40020040 	.word	0x40020040
 8007458:	40020058 	.word	0x40020058
 800745c:	40020070 	.word	0x40020070
 8007460:	40020088 	.word	0x40020088
 8007464:	400200a0 	.word	0x400200a0
 8007468:	400200b8 	.word	0x400200b8
 800746c:	40020410 	.word	0x40020410
 8007470:	40020428 	.word	0x40020428
 8007474:	40020440 	.word	0x40020440
 8007478:	40020458 	.word	0x40020458
 800747c:	40020470 	.word	0x40020470
 8007480:	40020488 	.word	0x40020488
 8007484:	400204a0 	.word	0x400204a0
 8007488:	400204b8 	.word	0x400204b8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b00      	cmp	r3, #0
 8007498:	bf14      	ite	ne
 800749a:	2301      	movne	r3, #1
 800749c:	2300      	moveq	r3, #0
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d015      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0204 	bic.w	r2, r2, #4
 80074b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	2208      	movs	r2, #8
 80074be:	409a      	lsls	r2, r3
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c8:	f043 0201 	orr.w	r2, r3, #1
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	fa22 f303 	lsr.w	r3, r2, r3
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d06e      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a69      	ldr	r2, [pc, #420]	; (8007690 <HAL_DMA_IRQHandler+0x3f8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d04a      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a67      	ldr	r2, [pc, #412]	; (8007694 <HAL_DMA_IRQHandler+0x3fc>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d045      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a66      	ldr	r2, [pc, #408]	; (8007698 <HAL_DMA_IRQHandler+0x400>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d040      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a64      	ldr	r2, [pc, #400]	; (800769c <HAL_DMA_IRQHandler+0x404>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d03b      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a63      	ldr	r2, [pc, #396]	; (80076a0 <HAL_DMA_IRQHandler+0x408>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d036      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a61      	ldr	r2, [pc, #388]	; (80076a4 <HAL_DMA_IRQHandler+0x40c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d031      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a60      	ldr	r2, [pc, #384]	; (80076a8 <HAL_DMA_IRQHandler+0x410>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d02c      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a5e      	ldr	r2, [pc, #376]	; (80076ac <HAL_DMA_IRQHandler+0x414>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d027      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a5d      	ldr	r2, [pc, #372]	; (80076b0 <HAL_DMA_IRQHandler+0x418>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d022      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a5b      	ldr	r2, [pc, #364]	; (80076b4 <HAL_DMA_IRQHandler+0x41c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d01d      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a5a      	ldr	r2, [pc, #360]	; (80076b8 <HAL_DMA_IRQHandler+0x420>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d018      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a58      	ldr	r2, [pc, #352]	; (80076bc <HAL_DMA_IRQHandler+0x424>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a57      	ldr	r2, [pc, #348]	; (80076c0 <HAL_DMA_IRQHandler+0x428>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a55      	ldr	r2, [pc, #340]	; (80076c4 <HAL_DMA_IRQHandler+0x42c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a54      	ldr	r2, [pc, #336]	; (80076c8 <HAL_DMA_IRQHandler+0x430>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a52      	ldr	r2, [pc, #328]	; (80076cc <HAL_DMA_IRQHandler+0x434>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d10a      	bne.n	800759c <HAL_DMA_IRQHandler+0x304>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007590:	2b00      	cmp	r3, #0
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	e003      	b.n	80075a4 <HAL_DMA_IRQHandler+0x30c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2300      	movs	r3, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00d      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	2201      	movs	r2, #1
 80075b2:	409a      	lsls	r2, r3
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075bc:	f043 0202 	orr.w	r2, r3, #2
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c8:	f003 031f 	and.w	r3, r3, #31
 80075cc:	2204      	movs	r2, #4
 80075ce:	409a      	lsls	r2, r3
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	4013      	ands	r3, r2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 808f 	beq.w	80076f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a2c      	ldr	r2, [pc, #176]	; (8007690 <HAL_DMA_IRQHandler+0x3f8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d04a      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <HAL_DMA_IRQHandler+0x3fc>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d045      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a29      	ldr	r2, [pc, #164]	; (8007698 <HAL_DMA_IRQHandler+0x400>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d040      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a27      	ldr	r2, [pc, #156]	; (800769c <HAL_DMA_IRQHandler+0x404>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d03b      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a26      	ldr	r2, [pc, #152]	; (80076a0 <HAL_DMA_IRQHandler+0x408>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d036      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a24      	ldr	r2, [pc, #144]	; (80076a4 <HAL_DMA_IRQHandler+0x40c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d031      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a23      	ldr	r2, [pc, #140]	; (80076a8 <HAL_DMA_IRQHandler+0x410>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d02c      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a21      	ldr	r2, [pc, #132]	; (80076ac <HAL_DMA_IRQHandler+0x414>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d027      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a20      	ldr	r2, [pc, #128]	; (80076b0 <HAL_DMA_IRQHandler+0x418>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d022      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1e      	ldr	r2, [pc, #120]	; (80076b4 <HAL_DMA_IRQHandler+0x41c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d01d      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1d      	ldr	r2, [pc, #116]	; (80076b8 <HAL_DMA_IRQHandler+0x420>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d018      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1b      	ldr	r2, [pc, #108]	; (80076bc <HAL_DMA_IRQHandler+0x424>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d013      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1a      	ldr	r2, [pc, #104]	; (80076c0 <HAL_DMA_IRQHandler+0x428>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00e      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a18      	ldr	r2, [pc, #96]	; (80076c4 <HAL_DMA_IRQHandler+0x42c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d009      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <HAL_DMA_IRQHandler+0x430>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d004      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <HAL_DMA_IRQHandler+0x434>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d12a      	bne.n	80076d0 <HAL_DMA_IRQHandler+0x438>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	bf14      	ite	ne
 8007688:	2301      	movne	r3, #1
 800768a:	2300      	moveq	r3, #0
 800768c:	b2db      	uxtb	r3, r3
 800768e:	e023      	b.n	80076d8 <HAL_DMA_IRQHandler+0x440>
 8007690:	40020010 	.word	0x40020010
 8007694:	40020028 	.word	0x40020028
 8007698:	40020040 	.word	0x40020040
 800769c:	40020058 	.word	0x40020058
 80076a0:	40020070 	.word	0x40020070
 80076a4:	40020088 	.word	0x40020088
 80076a8:	400200a0 	.word	0x400200a0
 80076ac:	400200b8 	.word	0x400200b8
 80076b0:	40020410 	.word	0x40020410
 80076b4:	40020428 	.word	0x40020428
 80076b8:	40020440 	.word	0x40020440
 80076bc:	40020458 	.word	0x40020458
 80076c0:	40020470 	.word	0x40020470
 80076c4:	40020488 	.word	0x40020488
 80076c8:	400204a0 	.word	0x400204a0
 80076cc:	400204b8 	.word	0x400204b8
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2300      	movs	r3, #0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00d      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	2204      	movs	r2, #4
 80076e6:	409a      	lsls	r2, r3
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f0:	f043 0204 	orr.w	r2, r3, #4
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076fc:	f003 031f 	and.w	r3, r3, #31
 8007700:	2210      	movs	r2, #16
 8007702:	409a      	lsls	r2, r3
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	4013      	ands	r3, r2
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 80a6 	beq.w	800785a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a85      	ldr	r2, [pc, #532]	; (8007928 <HAL_DMA_IRQHandler+0x690>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d04a      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a83      	ldr	r2, [pc, #524]	; (800792c <HAL_DMA_IRQHandler+0x694>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d045      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a82      	ldr	r2, [pc, #520]	; (8007930 <HAL_DMA_IRQHandler+0x698>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d040      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a80      	ldr	r2, [pc, #512]	; (8007934 <HAL_DMA_IRQHandler+0x69c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d03b      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a7f      	ldr	r2, [pc, #508]	; (8007938 <HAL_DMA_IRQHandler+0x6a0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d036      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a7d      	ldr	r2, [pc, #500]	; (800793c <HAL_DMA_IRQHandler+0x6a4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d031      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a7c      	ldr	r2, [pc, #496]	; (8007940 <HAL_DMA_IRQHandler+0x6a8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d02c      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a7a      	ldr	r2, [pc, #488]	; (8007944 <HAL_DMA_IRQHandler+0x6ac>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d027      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a79      	ldr	r2, [pc, #484]	; (8007948 <HAL_DMA_IRQHandler+0x6b0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d022      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a77      	ldr	r2, [pc, #476]	; (800794c <HAL_DMA_IRQHandler+0x6b4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d01d      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a76      	ldr	r2, [pc, #472]	; (8007950 <HAL_DMA_IRQHandler+0x6b8>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d018      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a74      	ldr	r2, [pc, #464]	; (8007954 <HAL_DMA_IRQHandler+0x6bc>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a73      	ldr	r2, [pc, #460]	; (8007958 <HAL_DMA_IRQHandler+0x6c0>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00e      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a71      	ldr	r2, [pc, #452]	; (800795c <HAL_DMA_IRQHandler+0x6c4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d009      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a70      	ldr	r2, [pc, #448]	; (8007960 <HAL_DMA_IRQHandler+0x6c8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d004      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a6e      	ldr	r2, [pc, #440]	; (8007964 <HAL_DMA_IRQHandler+0x6cc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d10a      	bne.n	80077c4 <HAL_DMA_IRQHandler+0x52c>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	bf14      	ite	ne
 80077bc:	2301      	movne	r3, #1
 80077be:	2300      	moveq	r3, #0
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	e009      	b.n	80077d8 <HAL_DMA_IRQHandler+0x540>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0304 	and.w	r3, r3, #4
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	bf14      	ite	ne
 80077d2:	2301      	movne	r3, #1
 80077d4:	2300      	moveq	r3, #0
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d03e      	beq.n	800785a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e0:	f003 031f 	and.w	r3, r3, #31
 80077e4:	2210      	movs	r2, #16
 80077e6:	409a      	lsls	r2, r3
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d018      	beq.n	800782c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d108      	bne.n	800781a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	2b00      	cmp	r3, #0
 800780e:	d024      	beq.n	800785a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
 8007818:	e01f      	b.n	800785a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01b      	beq.n	800785a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	e016      	b.n	800785a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007836:	2b00      	cmp	r3, #0
 8007838:	d107      	bne.n	800784a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0208 	bic.w	r2, r2, #8
 8007848:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	2220      	movs	r2, #32
 8007864:	409a      	lsls	r2, r3
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	4013      	ands	r3, r2
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8110 	beq.w	8007a90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a2c      	ldr	r2, [pc, #176]	; (8007928 <HAL_DMA_IRQHandler+0x690>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d04a      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a2b      	ldr	r2, [pc, #172]	; (800792c <HAL_DMA_IRQHandler+0x694>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d045      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a29      	ldr	r2, [pc, #164]	; (8007930 <HAL_DMA_IRQHandler+0x698>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d040      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a28      	ldr	r2, [pc, #160]	; (8007934 <HAL_DMA_IRQHandler+0x69c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d03b      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a26      	ldr	r2, [pc, #152]	; (8007938 <HAL_DMA_IRQHandler+0x6a0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d036      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a25      	ldr	r2, [pc, #148]	; (800793c <HAL_DMA_IRQHandler+0x6a4>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d031      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a23      	ldr	r2, [pc, #140]	; (8007940 <HAL_DMA_IRQHandler+0x6a8>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d02c      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a22      	ldr	r2, [pc, #136]	; (8007944 <HAL_DMA_IRQHandler+0x6ac>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d027      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a20      	ldr	r2, [pc, #128]	; (8007948 <HAL_DMA_IRQHandler+0x6b0>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d022      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a1f      	ldr	r2, [pc, #124]	; (800794c <HAL_DMA_IRQHandler+0x6b4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d01d      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a1d      	ldr	r2, [pc, #116]	; (8007950 <HAL_DMA_IRQHandler+0x6b8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <HAL_DMA_IRQHandler+0x6bc>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a1a      	ldr	r2, [pc, #104]	; (8007958 <HAL_DMA_IRQHandler+0x6c0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a19      	ldr	r2, [pc, #100]	; (800795c <HAL_DMA_IRQHandler+0x6c4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a17      	ldr	r2, [pc, #92]	; (8007960 <HAL_DMA_IRQHandler+0x6c8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a16      	ldr	r2, [pc, #88]	; (8007964 <HAL_DMA_IRQHandler+0x6cc>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d12b      	bne.n	8007968 <HAL_DMA_IRQHandler+0x6d0>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b00      	cmp	r3, #0
 800791c:	bf14      	ite	ne
 800791e:	2301      	movne	r3, #1
 8007920:	2300      	moveq	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	e02a      	b.n	800797c <HAL_DMA_IRQHandler+0x6e4>
 8007926:	bf00      	nop
 8007928:	40020010 	.word	0x40020010
 800792c:	40020028 	.word	0x40020028
 8007930:	40020040 	.word	0x40020040
 8007934:	40020058 	.word	0x40020058
 8007938:	40020070 	.word	0x40020070
 800793c:	40020088 	.word	0x40020088
 8007940:	400200a0 	.word	0x400200a0
 8007944:	400200b8 	.word	0x400200b8
 8007948:	40020410 	.word	0x40020410
 800794c:	40020428 	.word	0x40020428
 8007950:	40020440 	.word	0x40020440
 8007954:	40020458 	.word	0x40020458
 8007958:	40020470 	.word	0x40020470
 800795c:	40020488 	.word	0x40020488
 8007960:	400204a0 	.word	0x400204a0
 8007964:	400204b8 	.word	0x400204b8
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	bf14      	ite	ne
 8007976:	2301      	movne	r3, #1
 8007978:	2300      	moveq	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8087 	beq.w	8007a90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	2220      	movs	r2, #32
 800798c:	409a      	lsls	r2, r3
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b04      	cmp	r3, #4
 800799c:	d139      	bne.n	8007a12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0216 	bic.w	r2, r2, #22
 80079ac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	695a      	ldr	r2, [r3, #20]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079bc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d103      	bne.n	80079ce <HAL_DMA_IRQHandler+0x736>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0208 	bic.w	r2, r2, #8
 80079dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e2:	f003 031f 	and.w	r3, r3, #31
 80079e6:	223f      	movs	r2, #63	; 0x3f
 80079e8:	409a      	lsls	r2, r3
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 834a 	beq.w	800809c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
          }
          return;
 8007a10:	e344      	b.n	800809c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d018      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d108      	bne.n	8007a40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d02c      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4798      	blx	r3
 8007a3e:	e027      	b.n	8007a90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d023      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	4798      	blx	r3
 8007a50:	e01e      	b.n	8007a90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10f      	bne.n	8007a80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0210 	bic.w	r2, r2, #16
 8007a6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 8306 	beq.w	80080a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 8088 	beq.w	8007bb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2204      	movs	r2, #4
 8007aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a7a      	ldr	r2, [pc, #488]	; (8007ca0 <HAL_DMA_IRQHandler+0xa08>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d04a      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a79      	ldr	r2, [pc, #484]	; (8007ca4 <HAL_DMA_IRQHandler+0xa0c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d045      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a77      	ldr	r2, [pc, #476]	; (8007ca8 <HAL_DMA_IRQHandler+0xa10>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d040      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a76      	ldr	r2, [pc, #472]	; (8007cac <HAL_DMA_IRQHandler+0xa14>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d03b      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a74      	ldr	r2, [pc, #464]	; (8007cb0 <HAL_DMA_IRQHandler+0xa18>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d036      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a73      	ldr	r2, [pc, #460]	; (8007cb4 <HAL_DMA_IRQHandler+0xa1c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d031      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a71      	ldr	r2, [pc, #452]	; (8007cb8 <HAL_DMA_IRQHandler+0xa20>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d02c      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a70      	ldr	r2, [pc, #448]	; (8007cbc <HAL_DMA_IRQHandler+0xa24>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d027      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a6e      	ldr	r2, [pc, #440]	; (8007cc0 <HAL_DMA_IRQHandler+0xa28>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d022      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a6d      	ldr	r2, [pc, #436]	; (8007cc4 <HAL_DMA_IRQHandler+0xa2c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d01d      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a6b      	ldr	r2, [pc, #428]	; (8007cc8 <HAL_DMA_IRQHandler+0xa30>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d018      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a6a      	ldr	r2, [pc, #424]	; (8007ccc <HAL_DMA_IRQHandler+0xa34>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a68      	ldr	r2, [pc, #416]	; (8007cd0 <HAL_DMA_IRQHandler+0xa38>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00e      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a67      	ldr	r2, [pc, #412]	; (8007cd4 <HAL_DMA_IRQHandler+0xa3c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d009      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a65      	ldr	r2, [pc, #404]	; (8007cd8 <HAL_DMA_IRQHandler+0xa40>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a64      	ldr	r2, [pc, #400]	; (8007cdc <HAL_DMA_IRQHandler+0xa44>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d108      	bne.n	8007b62 <HAL_DMA_IRQHandler+0x8ca>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0201 	bic.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	e007      	b.n	8007b72 <HAL_DMA_IRQHandler+0x8da>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0201 	bic.w	r2, r2, #1
 8007b70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3301      	adds	r3, #1
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d307      	bcc.n	8007b8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1f2      	bne.n	8007b72 <HAL_DMA_IRQHandler+0x8da>
 8007b8c:	e000      	b.n	8007b90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007b8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2203      	movs	r2, #3
 8007ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007ba6:	e003      	b.n	8007bb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 8272 	beq.w	80080a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	4798      	blx	r3
 8007bca:	e26c      	b.n	80080a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a43      	ldr	r2, [pc, #268]	; (8007ce0 <HAL_DMA_IRQHandler+0xa48>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d022      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a42      	ldr	r2, [pc, #264]	; (8007ce4 <HAL_DMA_IRQHandler+0xa4c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d01d      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a40      	ldr	r2, [pc, #256]	; (8007ce8 <HAL_DMA_IRQHandler+0xa50>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d018      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a3f      	ldr	r2, [pc, #252]	; (8007cec <HAL_DMA_IRQHandler+0xa54>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d013      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a3d      	ldr	r2, [pc, #244]	; (8007cf0 <HAL_DMA_IRQHandler+0xa58>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d00e      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a3c      	ldr	r2, [pc, #240]	; (8007cf4 <HAL_DMA_IRQHandler+0xa5c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d009      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a3a      	ldr	r2, [pc, #232]	; (8007cf8 <HAL_DMA_IRQHandler+0xa60>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d004      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a39      	ldr	r2, [pc, #228]	; (8007cfc <HAL_DMA_IRQHandler+0xa64>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d101      	bne.n	8007c20 <HAL_DMA_IRQHandler+0x988>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e000      	b.n	8007c22 <HAL_DMA_IRQHandler+0x98a>
 8007c20:	2300      	movs	r3, #0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 823f 	beq.w	80080a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c34:	f003 031f 	and.w	r3, r3, #31
 8007c38:	2204      	movs	r2, #4
 8007c3a:	409a      	lsls	r2, r3
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80cd 	beq.w	8007de0 <HAL_DMA_IRQHandler+0xb48>
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 80c7 	beq.w	8007de0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c56:	f003 031f 	and.w	r3, r3, #31
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	409a      	lsls	r2, r3
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d049      	beq.n	8007d00 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d109      	bne.n	8007c8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 8210 	beq.w	80080a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c88:	e20a      	b.n	80080a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 8206 	beq.w	80080a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c9c:	e200      	b.n	80080a0 <HAL_DMA_IRQHandler+0xe08>
 8007c9e:	bf00      	nop
 8007ca0:	40020010 	.word	0x40020010
 8007ca4:	40020028 	.word	0x40020028
 8007ca8:	40020040 	.word	0x40020040
 8007cac:	40020058 	.word	0x40020058
 8007cb0:	40020070 	.word	0x40020070
 8007cb4:	40020088 	.word	0x40020088
 8007cb8:	400200a0 	.word	0x400200a0
 8007cbc:	400200b8 	.word	0x400200b8
 8007cc0:	40020410 	.word	0x40020410
 8007cc4:	40020428 	.word	0x40020428
 8007cc8:	40020440 	.word	0x40020440
 8007ccc:	40020458 	.word	0x40020458
 8007cd0:	40020470 	.word	0x40020470
 8007cd4:	40020488 	.word	0x40020488
 8007cd8:	400204a0 	.word	0x400204a0
 8007cdc:	400204b8 	.word	0x400204b8
 8007ce0:	58025408 	.word	0x58025408
 8007ce4:	5802541c 	.word	0x5802541c
 8007ce8:	58025430 	.word	0x58025430
 8007cec:	58025444 	.word	0x58025444
 8007cf0:	58025458 	.word	0x58025458
 8007cf4:	5802546c 	.word	0x5802546c
 8007cf8:	58025480 	.word	0x58025480
 8007cfc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d160      	bne.n	8007dcc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a7f      	ldr	r2, [pc, #508]	; (8007f0c <HAL_DMA_IRQHandler+0xc74>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d04a      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a7d      	ldr	r2, [pc, #500]	; (8007f10 <HAL_DMA_IRQHandler+0xc78>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d045      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a7c      	ldr	r2, [pc, #496]	; (8007f14 <HAL_DMA_IRQHandler+0xc7c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d040      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a7a      	ldr	r2, [pc, #488]	; (8007f18 <HAL_DMA_IRQHandler+0xc80>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d03b      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a79      	ldr	r2, [pc, #484]	; (8007f1c <HAL_DMA_IRQHandler+0xc84>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d036      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a77      	ldr	r2, [pc, #476]	; (8007f20 <HAL_DMA_IRQHandler+0xc88>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d031      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a76      	ldr	r2, [pc, #472]	; (8007f24 <HAL_DMA_IRQHandler+0xc8c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d02c      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a74      	ldr	r2, [pc, #464]	; (8007f28 <HAL_DMA_IRQHandler+0xc90>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d027      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a73      	ldr	r2, [pc, #460]	; (8007f2c <HAL_DMA_IRQHandler+0xc94>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d022      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a71      	ldr	r2, [pc, #452]	; (8007f30 <HAL_DMA_IRQHandler+0xc98>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d01d      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a70      	ldr	r2, [pc, #448]	; (8007f34 <HAL_DMA_IRQHandler+0xc9c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d018      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a6e      	ldr	r2, [pc, #440]	; (8007f38 <HAL_DMA_IRQHandler+0xca0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d013      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a6d      	ldr	r2, [pc, #436]	; (8007f3c <HAL_DMA_IRQHandler+0xca4>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00e      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a6b      	ldr	r2, [pc, #428]	; (8007f40 <HAL_DMA_IRQHandler+0xca8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d009      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a6a      	ldr	r2, [pc, #424]	; (8007f44 <HAL_DMA_IRQHandler+0xcac>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d004      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a68      	ldr	r2, [pc, #416]	; (8007f48 <HAL_DMA_IRQHandler+0xcb0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d108      	bne.n	8007dbc <HAL_DMA_IRQHandler+0xb24>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0208 	bic.w	r2, r2, #8
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	e007      	b.n	8007dcc <HAL_DMA_IRQHandler+0xb34>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0204 	bic.w	r2, r2, #4
 8007dca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 8165 	beq.w	80080a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dde:	e15f      	b.n	80080a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de4:	f003 031f 	and.w	r3, r3, #31
 8007de8:	2202      	movs	r2, #2
 8007dea:	409a      	lsls	r2, r3
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	4013      	ands	r3, r2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80c5 	beq.w	8007f80 <HAL_DMA_IRQHandler+0xce8>
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 80bf 	beq.w	8007f80 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e06:	f003 031f 	and.w	r3, r3, #31
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	409a      	lsls	r2, r3
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d018      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d109      	bne.n	8007e3a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 813a 	beq.w	80080a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e38:	e134      	b.n	80080a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 8130 	beq.w	80080a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e4c:	e12a      	b.n	80080a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f003 0320 	and.w	r3, r3, #32
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f040 8089 	bne.w	8007f6c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a2b      	ldr	r2, [pc, #172]	; (8007f0c <HAL_DMA_IRQHandler+0xc74>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d04a      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a29      	ldr	r2, [pc, #164]	; (8007f10 <HAL_DMA_IRQHandler+0xc78>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d045      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a28      	ldr	r2, [pc, #160]	; (8007f14 <HAL_DMA_IRQHandler+0xc7c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d040      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a26      	ldr	r2, [pc, #152]	; (8007f18 <HAL_DMA_IRQHandler+0xc80>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d03b      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a25      	ldr	r2, [pc, #148]	; (8007f1c <HAL_DMA_IRQHandler+0xc84>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d036      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a23      	ldr	r2, [pc, #140]	; (8007f20 <HAL_DMA_IRQHandler+0xc88>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d031      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a22      	ldr	r2, [pc, #136]	; (8007f24 <HAL_DMA_IRQHandler+0xc8c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d02c      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a20      	ldr	r2, [pc, #128]	; (8007f28 <HAL_DMA_IRQHandler+0xc90>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d027      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a1f      	ldr	r2, [pc, #124]	; (8007f2c <HAL_DMA_IRQHandler+0xc94>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d022      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1d      	ldr	r2, [pc, #116]	; (8007f30 <HAL_DMA_IRQHandler+0xc98>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d01d      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a1c      	ldr	r2, [pc, #112]	; (8007f34 <HAL_DMA_IRQHandler+0xc9c>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d018      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a1a      	ldr	r2, [pc, #104]	; (8007f38 <HAL_DMA_IRQHandler+0xca0>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d013      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a19      	ldr	r2, [pc, #100]	; (8007f3c <HAL_DMA_IRQHandler+0xca4>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d00e      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a17      	ldr	r2, [pc, #92]	; (8007f40 <HAL_DMA_IRQHandler+0xca8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d009      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a16      	ldr	r2, [pc, #88]	; (8007f44 <HAL_DMA_IRQHandler+0xcac>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d004      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a14      	ldr	r2, [pc, #80]	; (8007f48 <HAL_DMA_IRQHandler+0xcb0>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d128      	bne.n	8007f4c <HAL_DMA_IRQHandler+0xcb4>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0214 	bic.w	r2, r2, #20
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	e027      	b.n	8007f5c <HAL_DMA_IRQHandler+0xcc4>
 8007f0c:	40020010 	.word	0x40020010
 8007f10:	40020028 	.word	0x40020028
 8007f14:	40020040 	.word	0x40020040
 8007f18:	40020058 	.word	0x40020058
 8007f1c:	40020070 	.word	0x40020070
 8007f20:	40020088 	.word	0x40020088
 8007f24:	400200a0 	.word	0x400200a0
 8007f28:	400200b8 	.word	0x400200b8
 8007f2c:	40020410 	.word	0x40020410
 8007f30:	40020428 	.word	0x40020428
 8007f34:	40020440 	.word	0x40020440
 8007f38:	40020458 	.word	0x40020458
 8007f3c:	40020470 	.word	0x40020470
 8007f40:	40020488 	.word	0x40020488
 8007f44:	400204a0 	.word	0x400204a0
 8007f48:	400204b8 	.word	0x400204b8
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 020a 	bic.w	r2, r2, #10
 8007f5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8097 	beq.w	80080a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f7e:	e091      	b.n	80080a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f84:	f003 031f 	and.w	r3, r3, #31
 8007f88:	2208      	movs	r2, #8
 8007f8a:	409a      	lsls	r2, r3
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 8088 	beq.w	80080a6 <HAL_DMA_IRQHandler+0xe0e>
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f003 0308 	and.w	r3, r3, #8
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 8082 	beq.w	80080a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a41      	ldr	r2, [pc, #260]	; (80080ac <HAL_DMA_IRQHandler+0xe14>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d04a      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a3f      	ldr	r2, [pc, #252]	; (80080b0 <HAL_DMA_IRQHandler+0xe18>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d045      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a3e      	ldr	r2, [pc, #248]	; (80080b4 <HAL_DMA_IRQHandler+0xe1c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d040      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a3c      	ldr	r2, [pc, #240]	; (80080b8 <HAL_DMA_IRQHandler+0xe20>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d03b      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a3b      	ldr	r2, [pc, #236]	; (80080bc <HAL_DMA_IRQHandler+0xe24>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d036      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a39      	ldr	r2, [pc, #228]	; (80080c0 <HAL_DMA_IRQHandler+0xe28>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d031      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a38      	ldr	r2, [pc, #224]	; (80080c4 <HAL_DMA_IRQHandler+0xe2c>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d02c      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a36      	ldr	r2, [pc, #216]	; (80080c8 <HAL_DMA_IRQHandler+0xe30>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d027      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a35      	ldr	r2, [pc, #212]	; (80080cc <HAL_DMA_IRQHandler+0xe34>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d022      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a33      	ldr	r2, [pc, #204]	; (80080d0 <HAL_DMA_IRQHandler+0xe38>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d01d      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a32      	ldr	r2, [pc, #200]	; (80080d4 <HAL_DMA_IRQHandler+0xe3c>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d018      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a30      	ldr	r2, [pc, #192]	; (80080d8 <HAL_DMA_IRQHandler+0xe40>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d013      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a2f      	ldr	r2, [pc, #188]	; (80080dc <HAL_DMA_IRQHandler+0xe44>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00e      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a2d      	ldr	r2, [pc, #180]	; (80080e0 <HAL_DMA_IRQHandler+0xe48>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d009      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a2c      	ldr	r2, [pc, #176]	; (80080e4 <HAL_DMA_IRQHandler+0xe4c>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d004      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a2a      	ldr	r2, [pc, #168]	; (80080e8 <HAL_DMA_IRQHandler+0xe50>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d108      	bne.n	8008054 <HAL_DMA_IRQHandler+0xdbc>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 021c 	bic.w	r2, r2, #28
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	e007      	b.n	8008064 <HAL_DMA_IRQHandler+0xdcc>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 020e 	bic.w	r2, r2, #14
 8008062:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008068:	f003 031f 	and.w	r3, r3, #31
 800806c:	2201      	movs	r2, #1
 800806e:	409a      	lsls	r2, r3
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
 800809a:	e004      	b.n	80080a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800809c:	bf00      	nop
 800809e:	e002      	b.n	80080a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080a0:	bf00      	nop
 80080a2:	e000      	b.n	80080a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80080a6:	3728      	adds	r7, #40	; 0x28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	40020010 	.word	0x40020010
 80080b0:	40020028 	.word	0x40020028
 80080b4:	40020040 	.word	0x40020040
 80080b8:	40020058 	.word	0x40020058
 80080bc:	40020070 	.word	0x40020070
 80080c0:	40020088 	.word	0x40020088
 80080c4:	400200a0 	.word	0x400200a0
 80080c8:	400200b8 	.word	0x400200b8
 80080cc:	40020410 	.word	0x40020410
 80080d0:	40020428 	.word	0x40020428
 80080d4:	40020440 	.word	0x40020440
 80080d8:	40020458 	.word	0x40020458
 80080dc:	40020470 	.word	0x40020470
 80080e0:	40020488 	.word	0x40020488
 80080e4:	400204a0 	.word	0x400204a0
 80080e8:	400204b8 	.word	0x400204b8

080080ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008104:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a7f      	ldr	r2, [pc, #508]	; (8008308 <DMA_SetConfig+0x21c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d072      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a7d      	ldr	r2, [pc, #500]	; (800830c <DMA_SetConfig+0x220>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d06d      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a7c      	ldr	r2, [pc, #496]	; (8008310 <DMA_SetConfig+0x224>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d068      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a7a      	ldr	r2, [pc, #488]	; (8008314 <DMA_SetConfig+0x228>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d063      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a79      	ldr	r2, [pc, #484]	; (8008318 <DMA_SetConfig+0x22c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d05e      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a77      	ldr	r2, [pc, #476]	; (800831c <DMA_SetConfig+0x230>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d059      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a76      	ldr	r2, [pc, #472]	; (8008320 <DMA_SetConfig+0x234>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d054      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a74      	ldr	r2, [pc, #464]	; (8008324 <DMA_SetConfig+0x238>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d04f      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a73      	ldr	r2, [pc, #460]	; (8008328 <DMA_SetConfig+0x23c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d04a      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a71      	ldr	r2, [pc, #452]	; (800832c <DMA_SetConfig+0x240>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d045      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a70      	ldr	r2, [pc, #448]	; (8008330 <DMA_SetConfig+0x244>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d040      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a6e      	ldr	r2, [pc, #440]	; (8008334 <DMA_SetConfig+0x248>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d03b      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a6d      	ldr	r2, [pc, #436]	; (8008338 <DMA_SetConfig+0x24c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d036      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a6b      	ldr	r2, [pc, #428]	; (800833c <DMA_SetConfig+0x250>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d031      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a6a      	ldr	r2, [pc, #424]	; (8008340 <DMA_SetConfig+0x254>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d02c      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a68      	ldr	r2, [pc, #416]	; (8008344 <DMA_SetConfig+0x258>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d027      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a67      	ldr	r2, [pc, #412]	; (8008348 <DMA_SetConfig+0x25c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d022      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a65      	ldr	r2, [pc, #404]	; (800834c <DMA_SetConfig+0x260>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d01d      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a64      	ldr	r2, [pc, #400]	; (8008350 <DMA_SetConfig+0x264>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d018      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a62      	ldr	r2, [pc, #392]	; (8008354 <DMA_SetConfig+0x268>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d013      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a61      	ldr	r2, [pc, #388]	; (8008358 <DMA_SetConfig+0x26c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00e      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a5f      	ldr	r2, [pc, #380]	; (800835c <DMA_SetConfig+0x270>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d009      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a5e      	ldr	r2, [pc, #376]	; (8008360 <DMA_SetConfig+0x274>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d004      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a5c      	ldr	r2, [pc, #368]	; (8008364 <DMA_SetConfig+0x278>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d101      	bne.n	80081fa <DMA_SetConfig+0x10e>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e000      	b.n	80081fc <DMA_SetConfig+0x110>
 80081fa:	2300      	movs	r3, #0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00d      	beq.n	800821c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008208:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800821a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a39      	ldr	r2, [pc, #228]	; (8008308 <DMA_SetConfig+0x21c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d04a      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a38      	ldr	r2, [pc, #224]	; (800830c <DMA_SetConfig+0x220>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d045      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a36      	ldr	r2, [pc, #216]	; (8008310 <DMA_SetConfig+0x224>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d040      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a35      	ldr	r2, [pc, #212]	; (8008314 <DMA_SetConfig+0x228>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d03b      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a33      	ldr	r2, [pc, #204]	; (8008318 <DMA_SetConfig+0x22c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d036      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a32      	ldr	r2, [pc, #200]	; (800831c <DMA_SetConfig+0x230>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d031      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a30      	ldr	r2, [pc, #192]	; (8008320 <DMA_SetConfig+0x234>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d02c      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a2f      	ldr	r2, [pc, #188]	; (8008324 <DMA_SetConfig+0x238>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d027      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a2d      	ldr	r2, [pc, #180]	; (8008328 <DMA_SetConfig+0x23c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d022      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a2c      	ldr	r2, [pc, #176]	; (800832c <DMA_SetConfig+0x240>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d01d      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a2a      	ldr	r2, [pc, #168]	; (8008330 <DMA_SetConfig+0x244>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d018      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a29      	ldr	r2, [pc, #164]	; (8008334 <DMA_SetConfig+0x248>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d013      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a27      	ldr	r2, [pc, #156]	; (8008338 <DMA_SetConfig+0x24c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d00e      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a26      	ldr	r2, [pc, #152]	; (800833c <DMA_SetConfig+0x250>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d009      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a24      	ldr	r2, [pc, #144]	; (8008340 <DMA_SetConfig+0x254>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d004      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a23      	ldr	r2, [pc, #140]	; (8008344 <DMA_SetConfig+0x258>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d101      	bne.n	80082c0 <DMA_SetConfig+0x1d4>
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <DMA_SetConfig+0x1d6>
 80082c0:	2300      	movs	r3, #0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d059      	beq.n	800837a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ca:	f003 031f 	and.w	r3, r3, #31
 80082ce:	223f      	movs	r2, #63	; 0x3f
 80082d0:	409a      	lsls	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2b40      	cmp	r3, #64	; 0x40
 80082f4:	d138      	bne.n	8008368 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008306:	e086      	b.n	8008416 <DMA_SetConfig+0x32a>
 8008308:	40020010 	.word	0x40020010
 800830c:	40020028 	.word	0x40020028
 8008310:	40020040 	.word	0x40020040
 8008314:	40020058 	.word	0x40020058
 8008318:	40020070 	.word	0x40020070
 800831c:	40020088 	.word	0x40020088
 8008320:	400200a0 	.word	0x400200a0
 8008324:	400200b8 	.word	0x400200b8
 8008328:	40020410 	.word	0x40020410
 800832c:	40020428 	.word	0x40020428
 8008330:	40020440 	.word	0x40020440
 8008334:	40020458 	.word	0x40020458
 8008338:	40020470 	.word	0x40020470
 800833c:	40020488 	.word	0x40020488
 8008340:	400204a0 	.word	0x400204a0
 8008344:	400204b8 	.word	0x400204b8
 8008348:	58025408 	.word	0x58025408
 800834c:	5802541c 	.word	0x5802541c
 8008350:	58025430 	.word	0x58025430
 8008354:	58025444 	.word	0x58025444
 8008358:	58025458 	.word	0x58025458
 800835c:	5802546c 	.word	0x5802546c
 8008360:	58025480 	.word	0x58025480
 8008364:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	60da      	str	r2, [r3, #12]
}
 8008378:	e04d      	b.n	8008416 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a29      	ldr	r2, [pc, #164]	; (8008424 <DMA_SetConfig+0x338>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d022      	beq.n	80083ca <DMA_SetConfig+0x2de>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a27      	ldr	r2, [pc, #156]	; (8008428 <DMA_SetConfig+0x33c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d01d      	beq.n	80083ca <DMA_SetConfig+0x2de>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a26      	ldr	r2, [pc, #152]	; (800842c <DMA_SetConfig+0x340>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d018      	beq.n	80083ca <DMA_SetConfig+0x2de>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a24      	ldr	r2, [pc, #144]	; (8008430 <DMA_SetConfig+0x344>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d013      	beq.n	80083ca <DMA_SetConfig+0x2de>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a23      	ldr	r2, [pc, #140]	; (8008434 <DMA_SetConfig+0x348>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d00e      	beq.n	80083ca <DMA_SetConfig+0x2de>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a21      	ldr	r2, [pc, #132]	; (8008438 <DMA_SetConfig+0x34c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d009      	beq.n	80083ca <DMA_SetConfig+0x2de>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a20      	ldr	r2, [pc, #128]	; (800843c <DMA_SetConfig+0x350>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d004      	beq.n	80083ca <DMA_SetConfig+0x2de>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a1e      	ldr	r2, [pc, #120]	; (8008440 <DMA_SetConfig+0x354>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d101      	bne.n	80083ce <DMA_SetConfig+0x2e2>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e000      	b.n	80083d0 <DMA_SetConfig+0x2e4>
 80083ce:	2300      	movs	r3, #0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d020      	beq.n	8008416 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d8:	f003 031f 	and.w	r3, r3, #31
 80083dc:	2201      	movs	r2, #1
 80083de:	409a      	lsls	r2, r3
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	2b40      	cmp	r3, #64	; 0x40
 80083f2:	d108      	bne.n	8008406 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	60da      	str	r2, [r3, #12]
}
 8008404:	e007      	b.n	8008416 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	60da      	str	r2, [r3, #12]
}
 8008416:	bf00      	nop
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	58025408 	.word	0x58025408
 8008428:	5802541c 	.word	0x5802541c
 800842c:	58025430 	.word	0x58025430
 8008430:	58025444 	.word	0x58025444
 8008434:	58025458 	.word	0x58025458
 8008438:	5802546c 	.word	0x5802546c
 800843c:	58025480 	.word	0x58025480
 8008440:	58025494 	.word	0x58025494

08008444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a42      	ldr	r2, [pc, #264]	; (800855c <DMA_CalcBaseAndBitshift+0x118>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d04a      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a41      	ldr	r2, [pc, #260]	; (8008560 <DMA_CalcBaseAndBitshift+0x11c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d045      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a3f      	ldr	r2, [pc, #252]	; (8008564 <DMA_CalcBaseAndBitshift+0x120>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d040      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a3e      	ldr	r2, [pc, #248]	; (8008568 <DMA_CalcBaseAndBitshift+0x124>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d03b      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a3c      	ldr	r2, [pc, #240]	; (800856c <DMA_CalcBaseAndBitshift+0x128>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d036      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a3b      	ldr	r2, [pc, #236]	; (8008570 <DMA_CalcBaseAndBitshift+0x12c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d031      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a39      	ldr	r2, [pc, #228]	; (8008574 <DMA_CalcBaseAndBitshift+0x130>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d02c      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a38      	ldr	r2, [pc, #224]	; (8008578 <DMA_CalcBaseAndBitshift+0x134>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d027      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a36      	ldr	r2, [pc, #216]	; (800857c <DMA_CalcBaseAndBitshift+0x138>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d022      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a35      	ldr	r2, [pc, #212]	; (8008580 <DMA_CalcBaseAndBitshift+0x13c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d01d      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a33      	ldr	r2, [pc, #204]	; (8008584 <DMA_CalcBaseAndBitshift+0x140>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d018      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a32      	ldr	r2, [pc, #200]	; (8008588 <DMA_CalcBaseAndBitshift+0x144>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d013      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a30      	ldr	r2, [pc, #192]	; (800858c <DMA_CalcBaseAndBitshift+0x148>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00e      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a2f      	ldr	r2, [pc, #188]	; (8008590 <DMA_CalcBaseAndBitshift+0x14c>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d009      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a2d      	ldr	r2, [pc, #180]	; (8008594 <DMA_CalcBaseAndBitshift+0x150>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d004      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a2c      	ldr	r2, [pc, #176]	; (8008598 <DMA_CalcBaseAndBitshift+0x154>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d101      	bne.n	80084f0 <DMA_CalcBaseAndBitshift+0xac>
 80084ec:	2301      	movs	r3, #1
 80084ee:	e000      	b.n	80084f2 <DMA_CalcBaseAndBitshift+0xae>
 80084f0:	2300      	movs	r3, #0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d024      	beq.n	8008540 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	3b10      	subs	r3, #16
 80084fe:	4a27      	ldr	r2, [pc, #156]	; (800859c <DMA_CalcBaseAndBitshift+0x158>)
 8008500:	fba2 2303 	umull	r2, r3, r2, r3
 8008504:	091b      	lsrs	r3, r3, #4
 8008506:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	4a24      	ldr	r2, [pc, #144]	; (80085a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008510:	5cd3      	ldrb	r3, [r2, r3]
 8008512:	461a      	mov	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b03      	cmp	r3, #3
 800851c:	d908      	bls.n	8008530 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	4b1f      	ldr	r3, [pc, #124]	; (80085a4 <DMA_CalcBaseAndBitshift+0x160>)
 8008526:	4013      	ands	r3, r2
 8008528:	1d1a      	adds	r2, r3, #4
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	659a      	str	r2, [r3, #88]	; 0x58
 800852e:	e00d      	b.n	800854c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	461a      	mov	r2, r3
 8008536:	4b1b      	ldr	r3, [pc, #108]	; (80085a4 <DMA_CalcBaseAndBitshift+0x160>)
 8008538:	4013      	ands	r3, r2
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	6593      	str	r3, [r2, #88]	; 0x58
 800853e:	e005      	b.n	800854c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	40020010 	.word	0x40020010
 8008560:	40020028 	.word	0x40020028
 8008564:	40020040 	.word	0x40020040
 8008568:	40020058 	.word	0x40020058
 800856c:	40020070 	.word	0x40020070
 8008570:	40020088 	.word	0x40020088
 8008574:	400200a0 	.word	0x400200a0
 8008578:	400200b8 	.word	0x400200b8
 800857c:	40020410 	.word	0x40020410
 8008580:	40020428 	.word	0x40020428
 8008584:	40020440 	.word	0x40020440
 8008588:	40020458 	.word	0x40020458
 800858c:	40020470 	.word	0x40020470
 8008590:	40020488 	.word	0x40020488
 8008594:	400204a0 	.word	0x400204a0
 8008598:	400204b8 	.word	0x400204b8
 800859c:	aaaaaaab 	.word	0xaaaaaaab
 80085a0:	08016e50 	.word	0x08016e50
 80085a4:	fffffc00 	.word	0xfffffc00

080085a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d120      	bne.n	80085fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d858      	bhi.n	8008676 <DMA_CheckFifoParam+0xce>
 80085c4:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <DMA_CheckFifoParam+0x24>)
 80085c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ca:	bf00      	nop
 80085cc:	080085dd 	.word	0x080085dd
 80085d0:	080085ef 	.word	0x080085ef
 80085d4:	080085dd 	.word	0x080085dd
 80085d8:	08008677 	.word	0x08008677
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d048      	beq.n	800867a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085ec:	e045      	b.n	800867a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085f6:	d142      	bne.n	800867e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085fc:	e03f      	b.n	800867e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008606:	d123      	bne.n	8008650 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860c:	2b03      	cmp	r3, #3
 800860e:	d838      	bhi.n	8008682 <DMA_CheckFifoParam+0xda>
 8008610:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <DMA_CheckFifoParam+0x70>)
 8008612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008616:	bf00      	nop
 8008618:	08008629 	.word	0x08008629
 800861c:	0800862f 	.word	0x0800862f
 8008620:	08008629 	.word	0x08008629
 8008624:	08008641 	.word	0x08008641
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]
        break;
 800862c:	e030      	b.n	8008690 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d025      	beq.n	8008686 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800863e:	e022      	b.n	8008686 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008644:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008648:	d11f      	bne.n	800868a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800864e:	e01c      	b.n	800868a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008654:	2b02      	cmp	r3, #2
 8008656:	d902      	bls.n	800865e <DMA_CheckFifoParam+0xb6>
 8008658:	2b03      	cmp	r3, #3
 800865a:	d003      	beq.n	8008664 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800865c:	e018      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	73fb      	strb	r3, [r7, #15]
        break;
 8008662:	e015      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00e      	beq.n	800868e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	73fb      	strb	r3, [r7, #15]
    break;
 8008674:	e00b      	b.n	800868e <DMA_CheckFifoParam+0xe6>
        break;
 8008676:	bf00      	nop
 8008678:	e00a      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        break;
 800867a:	bf00      	nop
 800867c:	e008      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        break;
 800867e:	bf00      	nop
 8008680:	e006      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        break;
 8008682:	bf00      	nop
 8008684:	e004      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        break;
 8008686:	bf00      	nop
 8008688:	e002      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        break;
 800868a:	bf00      	nop
 800868c:	e000      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
    break;
 800868e:	bf00      	nop
    }
  }

  return status;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop

080086a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a38      	ldr	r2, [pc, #224]	; (8008794 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d022      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a36      	ldr	r2, [pc, #216]	; (8008798 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d01d      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a35      	ldr	r2, [pc, #212]	; (800879c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d018      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a33      	ldr	r2, [pc, #204]	; (80087a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d013      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a32      	ldr	r2, [pc, #200]	; (80087a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d00e      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a30      	ldr	r2, [pc, #192]	; (80087a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d009      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a2f      	ldr	r2, [pc, #188]	; (80087ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d004      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a2d      	ldr	r2, [pc, #180]	; (80087b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d101      	bne.n	8008702 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80086fe:	2301      	movs	r3, #1
 8008700:	e000      	b.n	8008704 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008702:	2300      	movs	r3, #0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01a      	beq.n	800873e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	b2db      	uxtb	r3, r3
 800870e:	3b08      	subs	r3, #8
 8008710:	4a28      	ldr	r2, [pc, #160]	; (80087b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008712:	fba2 2303 	umull	r2, r3, r2, r3
 8008716:	091b      	lsrs	r3, r3, #4
 8008718:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	4b26      	ldr	r3, [pc, #152]	; (80087b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	461a      	mov	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a24      	ldr	r2, [pc, #144]	; (80087bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800872c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f003 031f 	and.w	r3, r3, #31
 8008734:	2201      	movs	r2, #1
 8008736:	409a      	lsls	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800873c:	e024      	b.n	8008788 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	3b10      	subs	r3, #16
 8008746:	4a1e      	ldr	r2, [pc, #120]	; (80087c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008748:	fba2 2303 	umull	r2, r3, r2, r3
 800874c:	091b      	lsrs	r3, r3, #4
 800874e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	4a1c      	ldr	r2, [pc, #112]	; (80087c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d806      	bhi.n	8008766 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4a1b      	ldr	r2, [pc, #108]	; (80087c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d902      	bls.n	8008766 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	3308      	adds	r3, #8
 8008764:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	4b18      	ldr	r3, [pc, #96]	; (80087cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	461a      	mov	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a16      	ldr	r2, [pc, #88]	; (80087d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008778:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f003 031f 	and.w	r3, r3, #31
 8008780:	2201      	movs	r2, #1
 8008782:	409a      	lsls	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008788:	bf00      	nop
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	58025408 	.word	0x58025408
 8008798:	5802541c 	.word	0x5802541c
 800879c:	58025430 	.word	0x58025430
 80087a0:	58025444 	.word	0x58025444
 80087a4:	58025458 	.word	0x58025458
 80087a8:	5802546c 	.word	0x5802546c
 80087ac:	58025480 	.word	0x58025480
 80087b0:	58025494 	.word	0x58025494
 80087b4:	cccccccd 	.word	0xcccccccd
 80087b8:	16009600 	.word	0x16009600
 80087bc:	58025880 	.word	0x58025880
 80087c0:	aaaaaaab 	.word	0xaaaaaaab
 80087c4:	400204b8 	.word	0x400204b8
 80087c8:	4002040f 	.word	0x4002040f
 80087cc:	10008200 	.word	0x10008200
 80087d0:	40020880 	.word	0x40020880

080087d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d04a      	beq.n	8008880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d847      	bhi.n	8008880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a25      	ldr	r2, [pc, #148]	; (800888c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d022      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a24      	ldr	r2, [pc, #144]	; (8008890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d01d      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a22      	ldr	r2, [pc, #136]	; (8008894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d018      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a21      	ldr	r2, [pc, #132]	; (8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d013      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a1f      	ldr	r2, [pc, #124]	; (800889c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00e      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a1e      	ldr	r2, [pc, #120]	; (80088a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d009      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1c      	ldr	r2, [pc, #112]	; (80088a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d004      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a1b      	ldr	r2, [pc, #108]	; (80088a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d101      	bne.n	8008844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008840:	2301      	movs	r3, #1
 8008842:	e000      	b.n	8008846 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008844:	2300      	movs	r3, #0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4b17      	ldr	r3, [pc, #92]	; (80088ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	461a      	mov	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800885c:	671a      	str	r2, [r3, #112]	; 0x70
 800885e:	e009      	b.n	8008874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	4b14      	ldr	r3, [pc, #80]	; (80088b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	461a      	mov	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a11      	ldr	r2, [pc, #68]	; (80088b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008872:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3b01      	subs	r3, #1
 8008878:	2201      	movs	r2, #1
 800887a:	409a      	lsls	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008880:	bf00      	nop
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	58025408 	.word	0x58025408
 8008890:	5802541c 	.word	0x5802541c
 8008894:	58025430 	.word	0x58025430
 8008898:	58025444 	.word	0x58025444
 800889c:	58025458 	.word	0x58025458
 80088a0:	5802546c 	.word	0x5802546c
 80088a4:	58025480 	.word	0x58025480
 80088a8:	58025494 	.word	0x58025494
 80088ac:	1600963f 	.word	0x1600963f
 80088b0:	58025940 	.word	0x58025940
 80088b4:	1000823f 	.word	0x1000823f
 80088b8:	40020940 	.word	0x40020940

080088bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088bc:	b480      	push	{r7}
 80088be:	b089      	sub	sp, #36	; 0x24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80088ca:	4b89      	ldr	r3, [pc, #548]	; (8008af0 <HAL_GPIO_Init+0x234>)
 80088cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088ce:	e194      	b.n	8008bfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	2101      	movs	r1, #1
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	fa01 f303 	lsl.w	r3, r1, r3
 80088dc:	4013      	ands	r3, r2
 80088de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 8186 	beq.w	8008bf4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d005      	beq.n	8008900 <HAL_GPIO_Init+0x44>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f003 0303 	and.w	r3, r3, #3
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d130      	bne.n	8008962 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	2203      	movs	r2, #3
 800890c:	fa02 f303 	lsl.w	r3, r2, r3
 8008910:	43db      	mvns	r3, r3
 8008912:	69ba      	ldr	r2, [r7, #24]
 8008914:	4013      	ands	r3, r2
 8008916:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	fa02 f303 	lsl.w	r3, r2, r3
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	4313      	orrs	r3, r2
 8008928:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008936:	2201      	movs	r2, #1
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	fa02 f303 	lsl.w	r3, r2, r3
 800893e:	43db      	mvns	r3, r3
 8008940:	69ba      	ldr	r2, [r7, #24]
 8008942:	4013      	ands	r3, r2
 8008944:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	091b      	lsrs	r3, r3, #4
 800894c:	f003 0201 	and.w	r2, r3, #1
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	fa02 f303 	lsl.w	r3, r2, r3
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	4313      	orrs	r3, r2
 800895a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	2b03      	cmp	r3, #3
 800896c:	d017      	beq.n	800899e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	2203      	movs	r2, #3
 800897a:	fa02 f303 	lsl.w	r3, r2, r3
 800897e:	43db      	mvns	r3, r3
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	4013      	ands	r3, r2
 8008984:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	689a      	ldr	r2, [r3, #8]
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	fa02 f303 	lsl.w	r3, r2, r3
 8008992:	69ba      	ldr	r2, [r7, #24]
 8008994:	4313      	orrs	r3, r2
 8008996:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d123      	bne.n	80089f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	08da      	lsrs	r2, r3, #3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3208      	adds	r2, #8
 80089b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	220f      	movs	r2, #15
 80089c2:	fa02 f303 	lsl.w	r3, r2, r3
 80089c6:	43db      	mvns	r3, r3
 80089c8:	69ba      	ldr	r2, [r7, #24]
 80089ca:	4013      	ands	r3, r2
 80089cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	691a      	ldr	r2, [r3, #16]
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	fa02 f303 	lsl.w	r3, r2, r3
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	08da      	lsrs	r2, r3, #3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3208      	adds	r2, #8
 80089ec:	69b9      	ldr	r1, [r7, #24]
 80089ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	2203      	movs	r2, #3
 80089fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008a02:	43db      	mvns	r3, r3
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	4013      	ands	r3, r2
 8008a08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f003 0203 	and.w	r2, r3, #3
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 80e0 	beq.w	8008bf4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a34:	4b2f      	ldr	r3, [pc, #188]	; (8008af4 <HAL_GPIO_Init+0x238>)
 8008a36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a3a:	4a2e      	ldr	r2, [pc, #184]	; (8008af4 <HAL_GPIO_Init+0x238>)
 8008a3c:	f043 0302 	orr.w	r3, r3, #2
 8008a40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008a44:	4b2b      	ldr	r3, [pc, #172]	; (8008af4 <HAL_GPIO_Init+0x238>)
 8008a46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a52:	4a29      	ldr	r2, [pc, #164]	; (8008af8 <HAL_GPIO_Init+0x23c>)
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	089b      	lsrs	r3, r3, #2
 8008a58:	3302      	adds	r3, #2
 8008a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	220f      	movs	r2, #15
 8008a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6e:	43db      	mvns	r3, r3
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	4013      	ands	r3, r2
 8008a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a20      	ldr	r2, [pc, #128]	; (8008afc <HAL_GPIO_Init+0x240>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d052      	beq.n	8008b24 <HAL_GPIO_Init+0x268>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a1f      	ldr	r2, [pc, #124]	; (8008b00 <HAL_GPIO_Init+0x244>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d031      	beq.n	8008aea <HAL_GPIO_Init+0x22e>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a1e      	ldr	r2, [pc, #120]	; (8008b04 <HAL_GPIO_Init+0x248>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d02b      	beq.n	8008ae6 <HAL_GPIO_Init+0x22a>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a1d      	ldr	r2, [pc, #116]	; (8008b08 <HAL_GPIO_Init+0x24c>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d025      	beq.n	8008ae2 <HAL_GPIO_Init+0x226>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a1c      	ldr	r2, [pc, #112]	; (8008b0c <HAL_GPIO_Init+0x250>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d01f      	beq.n	8008ade <HAL_GPIO_Init+0x222>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a1b      	ldr	r2, [pc, #108]	; (8008b10 <HAL_GPIO_Init+0x254>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d019      	beq.n	8008ada <HAL_GPIO_Init+0x21e>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a1a      	ldr	r2, [pc, #104]	; (8008b14 <HAL_GPIO_Init+0x258>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d013      	beq.n	8008ad6 <HAL_GPIO_Init+0x21a>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a19      	ldr	r2, [pc, #100]	; (8008b18 <HAL_GPIO_Init+0x25c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d00d      	beq.n	8008ad2 <HAL_GPIO_Init+0x216>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a18      	ldr	r2, [pc, #96]	; (8008b1c <HAL_GPIO_Init+0x260>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d007      	beq.n	8008ace <HAL_GPIO_Init+0x212>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a17      	ldr	r2, [pc, #92]	; (8008b20 <HAL_GPIO_Init+0x264>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d101      	bne.n	8008aca <HAL_GPIO_Init+0x20e>
 8008ac6:	2309      	movs	r3, #9
 8008ac8:	e02d      	b.n	8008b26 <HAL_GPIO_Init+0x26a>
 8008aca:	230a      	movs	r3, #10
 8008acc:	e02b      	b.n	8008b26 <HAL_GPIO_Init+0x26a>
 8008ace:	2308      	movs	r3, #8
 8008ad0:	e029      	b.n	8008b26 <HAL_GPIO_Init+0x26a>
 8008ad2:	2307      	movs	r3, #7
 8008ad4:	e027      	b.n	8008b26 <HAL_GPIO_Init+0x26a>
 8008ad6:	2306      	movs	r3, #6
 8008ad8:	e025      	b.n	8008b26 <HAL_GPIO_Init+0x26a>
 8008ada:	2305      	movs	r3, #5
 8008adc:	e023      	b.n	8008b26 <HAL_GPIO_Init+0x26a>
 8008ade:	2304      	movs	r3, #4
 8008ae0:	e021      	b.n	8008b26 <HAL_GPIO_Init+0x26a>
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e01f      	b.n	8008b26 <HAL_GPIO_Init+0x26a>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e01d      	b.n	8008b26 <HAL_GPIO_Init+0x26a>
 8008aea:	2301      	movs	r3, #1
 8008aec:	e01b      	b.n	8008b26 <HAL_GPIO_Init+0x26a>
 8008aee:	bf00      	nop
 8008af0:	58000080 	.word	0x58000080
 8008af4:	58024400 	.word	0x58024400
 8008af8:	58000400 	.word	0x58000400
 8008afc:	58020000 	.word	0x58020000
 8008b00:	58020400 	.word	0x58020400
 8008b04:	58020800 	.word	0x58020800
 8008b08:	58020c00 	.word	0x58020c00
 8008b0c:	58021000 	.word	0x58021000
 8008b10:	58021400 	.word	0x58021400
 8008b14:	58021800 	.word	0x58021800
 8008b18:	58021c00 	.word	0x58021c00
 8008b1c:	58022000 	.word	0x58022000
 8008b20:	58022400 	.word	0x58022400
 8008b24:	2300      	movs	r3, #0
 8008b26:	69fa      	ldr	r2, [r7, #28]
 8008b28:	f002 0203 	and.w	r2, r2, #3
 8008b2c:	0092      	lsls	r2, r2, #2
 8008b2e:	4093      	lsls	r3, r2
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b36:	4938      	ldr	r1, [pc, #224]	; (8008c18 <HAL_GPIO_Init+0x35c>)
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	089b      	lsrs	r3, r3, #2
 8008b3c:	3302      	adds	r3, #2
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	43db      	mvns	r3, r3
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	4013      	ands	r3, r2
 8008b54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	43db      	mvns	r3, r3
 8008b7e:	69ba      	ldr	r2, [r7, #24]
 8008b80:	4013      	ands	r3, r2
 8008b82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d003      	beq.n	8008b98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	43db      	mvns	r3, r3
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	4013      	ands	r3, r2
 8008bae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	43db      	mvns	r3, r3
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	fa22 f303 	lsr.w	r3, r2, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f47f ae63 	bne.w	80088d0 <HAL_GPIO_Init+0x14>
  }
}
 8008c0a:	bf00      	nop
 8008c0c:	bf00      	nop
 8008c0e:	3724      	adds	r7, #36	; 0x24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	58000400 	.word	0x58000400

08008c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691a      	ldr	r2, [r3, #16]
 8008c2c:	887b      	ldrh	r3, [r7, #2]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008c34:	2301      	movs	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]
 8008c38:	e001      	b.n	8008c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	807b      	strh	r3, [r7, #2]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008c5c:	787b      	ldrb	r3, [r7, #1]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c62:	887a      	ldrh	r2, [r7, #2]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008c68:	e003      	b.n	8008c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008c6a:	887b      	ldrh	r3, [r7, #2]
 8008c6c:	041a      	lsls	r2, r3, #16
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	619a      	str	r2, [r3, #24]
}
 8008c72:	bf00      	nop
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
	...

08008c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e08b      	b.n	8008daa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d106      	bne.n	8008cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7fa f8fe 	bl	8002ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2224      	movs	r2, #36	; 0x24
 8008cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0201 	bic.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008cd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ce0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d107      	bne.n	8008cfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689a      	ldr	r2, [r3, #8]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cf6:	609a      	str	r2, [r3, #8]
 8008cf8:	e006      	b.n	8008d08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689a      	ldr	r2, [r3, #8]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008d06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d108      	bne.n	8008d22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d1e:	605a      	str	r2, [r3, #4]
 8008d20:	e007      	b.n	8008d32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6859      	ldr	r1, [r3, #4]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	4b1d      	ldr	r3, [pc, #116]	; (8008db4 <HAL_I2C_Init+0x134>)
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691a      	ldr	r2, [r3, #16]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	69d9      	ldr	r1, [r3, #28]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a1a      	ldr	r2, [r3, #32]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0201 	orr.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2220      	movs	r2, #32
 8008d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	02008000 	.word	0x02008000

08008db8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b088      	sub	sp, #32
 8008dbc:	af02      	add	r7, sp, #8
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	817b      	strh	r3, [r7, #10]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b20      	cmp	r3, #32
 8008dd6:	f040 80fd 	bne.w	8008fd4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d101      	bne.n	8008de8 <HAL_I2C_Master_Transmit+0x30>
 8008de4:	2302      	movs	r3, #2
 8008de6:	e0f6      	b.n	8008fd6 <HAL_I2C_Master_Transmit+0x21e>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008df0:	f7fa fe00 	bl	80039f4 <HAL_GetTick>
 8008df4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	2319      	movs	r3, #25
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f000 fa0a 	bl	800921c <I2C_WaitOnFlagUntilTimeout>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e0e1      	b.n	8008fd6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2221      	movs	r2, #33	; 0x21
 8008e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	893a      	ldrh	r2, [r7, #8]
 8008e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	2bff      	cmp	r3, #255	; 0xff
 8008e42:	d906      	bls.n	8008e52 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	22ff      	movs	r2, #255	; 0xff
 8008e48:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008e4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e4e:	617b      	str	r3, [r7, #20]
 8008e50:	e007      	b.n	8008e62 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e60:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d024      	beq.n	8008eb4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6e:	781a      	ldrb	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	3b01      	subs	r3, #1
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e92:	3b01      	subs	r3, #1
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	8979      	ldrh	r1, [r7, #10]
 8008ea6:	4b4e      	ldr	r3, [pc, #312]	; (8008fe0 <HAL_I2C_Master_Transmit+0x228>)
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f000 fc05 	bl	80096bc <I2C_TransferConfig>
 8008eb2:	e066      	b.n	8008f82 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	8979      	ldrh	r1, [r7, #10]
 8008ebc:	4b48      	ldr	r3, [pc, #288]	; (8008fe0 <HAL_I2C_Master_Transmit+0x228>)
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 fbfa 	bl	80096bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008ec8:	e05b      	b.n	8008f82 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	6a39      	ldr	r1, [r7, #32]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 f9fd 	bl	80092ce <I2C_WaitOnTXISFlagUntilTimeout>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e07b      	b.n	8008fd6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	781a      	ldrb	r2, [r3, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	3b01      	subs	r3, #1
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f06:	3b01      	subs	r3, #1
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d034      	beq.n	8008f82 <HAL_I2C_Master_Transmit+0x1ca>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d130      	bne.n	8008f82 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	2200      	movs	r2, #0
 8008f28:	2180      	movs	r1, #128	; 0x80
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f976 	bl	800921c <I2C_WaitOnFlagUntilTimeout>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e04d      	b.n	8008fd6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	2bff      	cmp	r3, #255	; 0xff
 8008f42:	d90e      	bls.n	8008f62 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	22ff      	movs	r2, #255	; 0xff
 8008f48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f4e:	b2da      	uxtb	r2, r3
 8008f50:	8979      	ldrh	r1, [r7, #10]
 8008f52:	2300      	movs	r3, #0
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 fbae 	bl	80096bc <I2C_TransferConfig>
 8008f60:	e00f      	b.n	8008f82 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	8979      	ldrh	r1, [r7, #10]
 8008f74:	2300      	movs	r3, #0
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 fb9d 	bl	80096bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d19e      	bne.n	8008eca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	6a39      	ldr	r1, [r7, #32]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 f9e3 	bl	800935c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e01a      	b.n	8008fd6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6859      	ldr	r1, [r3, #4]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	4b0c      	ldr	r3, [pc, #48]	; (8008fe4 <HAL_I2C_Master_Transmit+0x22c>)
 8008fb4:	400b      	ands	r3, r1
 8008fb6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e000      	b.n	8008fd6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008fd4:	2302      	movs	r3, #2
  }
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	80002000 	.word	0x80002000
 8008fe4:	fe00e800 	.word	0xfe00e800

08008fe8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b088      	sub	sp, #32
 8008fec:	af02      	add	r7, sp, #8
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	607a      	str	r2, [r7, #4]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	817b      	strh	r3, [r7, #10]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b20      	cmp	r3, #32
 8009006:	f040 80db 	bne.w	80091c0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_I2C_Master_Receive+0x30>
 8009014:	2302      	movs	r3, #2
 8009016:	e0d4      	b.n	80091c2 <HAL_I2C_Master_Receive+0x1da>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009020:	f7fa fce8 	bl	80039f4 <HAL_GetTick>
 8009024:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	2319      	movs	r3, #25
 800902c:	2201      	movs	r2, #1
 800902e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f000 f8f2 	bl	800921c <I2C_WaitOnFlagUntilTimeout>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e0bf      	b.n	80091c2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2222      	movs	r2, #34	; 0x22
 8009046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2210      	movs	r2, #16
 800904e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	893a      	ldrh	r2, [r7, #8]
 8009062:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800906e:	b29b      	uxth	r3, r3
 8009070:	2bff      	cmp	r3, #255	; 0xff
 8009072:	d90e      	bls.n	8009092 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	22ff      	movs	r2, #255	; 0xff
 8009078:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800907e:	b2da      	uxtb	r2, r3
 8009080:	8979      	ldrh	r1, [r7, #10]
 8009082:	4b52      	ldr	r3, [pc, #328]	; (80091cc <HAL_I2C_Master_Receive+0x1e4>)
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fb16 	bl	80096bc <I2C_TransferConfig>
 8009090:	e06d      	b.n	800916e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009096:	b29a      	uxth	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	8979      	ldrh	r1, [r7, #10]
 80090a4:	4b49      	ldr	r3, [pc, #292]	; (80091cc <HAL_I2C_Master_Receive+0x1e4>)
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fb05 	bl	80096bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80090b2:	e05c      	b.n	800916e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	6a39      	ldr	r1, [r7, #32]
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 f993 	bl	80093e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e07c      	b.n	80091c2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	b2d2      	uxtb	r2, r2
 80090d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090e4:	3b01      	subs	r3, #1
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fe:	b29b      	uxth	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d034      	beq.n	800916e <HAL_I2C_Master_Receive+0x186>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009108:	2b00      	cmp	r3, #0
 800910a:	d130      	bne.n	800916e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	2200      	movs	r2, #0
 8009114:	2180      	movs	r1, #128	; 0x80
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 f880 	bl	800921c <I2C_WaitOnFlagUntilTimeout>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e04d      	b.n	80091c2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912a:	b29b      	uxth	r3, r3
 800912c:	2bff      	cmp	r3, #255	; 0xff
 800912e:	d90e      	bls.n	800914e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	22ff      	movs	r2, #255	; 0xff
 8009134:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800913a:	b2da      	uxtb	r2, r3
 800913c:	8979      	ldrh	r1, [r7, #10]
 800913e:	2300      	movs	r3, #0
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 fab8 	bl	80096bc <I2C_TransferConfig>
 800914c:	e00f      	b.n	800916e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009152:	b29a      	uxth	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800915c:	b2da      	uxtb	r2, r3
 800915e:	8979      	ldrh	r1, [r7, #10]
 8009160:	2300      	movs	r3, #0
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 faa7 	bl	80096bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009172:	b29b      	uxth	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d19d      	bne.n	80090b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	6a39      	ldr	r1, [r7, #32]
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 f8ed 	bl	800935c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d001      	beq.n	800918c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e01a      	b.n	80091c2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2220      	movs	r2, #32
 8009192:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6859      	ldr	r1, [r3, #4]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	4b0c      	ldr	r3, [pc, #48]	; (80091d0 <HAL_I2C_Master_Receive+0x1e8>)
 80091a0:	400b      	ands	r3, r1
 80091a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2220      	movs	r2, #32
 80091a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	e000      	b.n	80091c2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80091c0:	2302      	movs	r3, #2
  }
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	80002400 	.word	0x80002400
 80091d0:	fe00e800 	.word	0xfe00e800

080091d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d103      	bne.n	80091f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2200      	movs	r2, #0
 80091f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d007      	beq.n	8009210 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	699a      	ldr	r2, [r3, #24]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0201 	orr.w	r2, r2, #1
 800920e:	619a      	str	r2, [r3, #24]
  }
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	4613      	mov	r3, r2
 800922a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800922c:	e03b      	b.n	80092a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 f962 	bl	80094fc <I2C_IsErrorOccurred>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e041      	b.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009248:	d02d      	beq.n	80092a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800924a:	f7fa fbd3 	bl	80039f4 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	429a      	cmp	r2, r3
 8009258:	d302      	bcc.n	8009260 <I2C_WaitOnFlagUntilTimeout+0x44>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d122      	bne.n	80092a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	699a      	ldr	r2, [r3, #24]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	4013      	ands	r3, r2
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	429a      	cmp	r2, r3
 800926e:	bf0c      	ite	eq
 8009270:	2301      	moveq	r3, #1
 8009272:	2300      	movne	r3, #0
 8009274:	b2db      	uxtb	r3, r3
 8009276:	461a      	mov	r2, r3
 8009278:	79fb      	ldrb	r3, [r7, #7]
 800927a:	429a      	cmp	r2, r3
 800927c:	d113      	bne.n	80092a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009282:	f043 0220 	orr.w	r2, r3, #32
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2220      	movs	r2, #32
 800928e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e00f      	b.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	699a      	ldr	r2, [r3, #24]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	4013      	ands	r3, r2
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	bf0c      	ite	eq
 80092b6:	2301      	moveq	r3, #1
 80092b8:	2300      	movne	r3, #0
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	461a      	mov	r2, r3
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d0b4      	beq.n	800922e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80092da:	e033      	b.n	8009344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	68b9      	ldr	r1, [r7, #8]
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 f90b 	bl	80094fc <I2C_IsErrorOccurred>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e031      	b.n	8009354 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092f6:	d025      	beq.n	8009344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092f8:	f7fa fb7c 	bl	80039f4 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	429a      	cmp	r2, r3
 8009306:	d302      	bcc.n	800930e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d11a      	bne.n	8009344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b02      	cmp	r3, #2
 800931a:	d013      	beq.n	8009344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009320:	f043 0220 	orr.w	r2, r3, #32
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2220      	movs	r2, #32
 800932c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	e007      	b.n	8009354 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	f003 0302 	and.w	r3, r3, #2
 800934e:	2b02      	cmp	r3, #2
 8009350:	d1c4      	bne.n	80092dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009368:	e02f      	b.n	80093ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	68b9      	ldr	r1, [r7, #8]
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 f8c4 	bl	80094fc <I2C_IsErrorOccurred>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e02d      	b.n	80093da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800937e:	f7fa fb39 	bl	80039f4 <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	429a      	cmp	r2, r3
 800938c:	d302      	bcc.n	8009394 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d11a      	bne.n	80093ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	f003 0320 	and.w	r3, r3, #32
 800939e:	2b20      	cmp	r3, #32
 80093a0:	d013      	beq.n	80093ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a6:	f043 0220 	orr.w	r2, r3, #32
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2220      	movs	r2, #32
 80093b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e007      	b.n	80093da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	f003 0320 	and.w	r3, r3, #32
 80093d4:	2b20      	cmp	r3, #32
 80093d6:	d1c8      	bne.n	800936a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
	...

080093e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80093f4:	e071      	b.n	80094da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	68b9      	ldr	r1, [r7, #8]
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f000 f87e 	bl	80094fc <I2C_IsErrorOccurred>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b20      	cmp	r3, #32
 8009416:	d13b      	bne.n	8009490 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d138      	bne.n	8009490 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b04      	cmp	r3, #4
 800942a:	d105      	bne.n	8009438 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	f003 0310 	and.w	r3, r3, #16
 8009442:	2b10      	cmp	r3, #16
 8009444:	d121      	bne.n	800948a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2210      	movs	r2, #16
 800944c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2204      	movs	r2, #4
 8009452:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2220      	movs	r2, #32
 800945a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6859      	ldr	r1, [r3, #4]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	4b24      	ldr	r3, [pc, #144]	; (80094f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009468:	400b      	ands	r3, r1
 800946a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2220      	movs	r2, #32
 8009470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	75fb      	strb	r3, [r7, #23]
 8009488:	e002      	b.n	8009490 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009490:	f7fa fab0 	bl	80039f4 <HAL_GetTick>
 8009494:	4602      	mov	r2, r0
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	429a      	cmp	r2, r3
 800949e:	d302      	bcc.n	80094a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d119      	bne.n	80094da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d116      	bne.n	80094da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	f003 0304 	and.w	r3, r3, #4
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	d00f      	beq.n	80094da <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094be:	f043 0220 	orr.w	r2, r3, #32
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2220      	movs	r2, #32
 80094ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	f003 0304 	and.w	r3, r3, #4
 80094e4:	2b04      	cmp	r3, #4
 80094e6:	d002      	beq.n	80094ee <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d083      	beq.n	80093f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	fe00e800 	.word	0xfe00e800

080094fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08a      	sub	sp, #40	; 0x28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	f003 0310 	and.w	r3, r3, #16
 8009524:	2b00      	cmp	r3, #0
 8009526:	d068      	beq.n	80095fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2210      	movs	r2, #16
 800952e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009530:	e049      	b.n	80095c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009538:	d045      	beq.n	80095c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800953a:	f7fa fa5b 	bl	80039f4 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	429a      	cmp	r2, r3
 8009548:	d302      	bcc.n	8009550 <I2C_IsErrorOccurred+0x54>
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d13a      	bne.n	80095c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800955a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009562:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800956e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009572:	d121      	bne.n	80095b8 <I2C_IsErrorOccurred+0xbc>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800957a:	d01d      	beq.n	80095b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800957c:	7cfb      	ldrb	r3, [r7, #19]
 800957e:	2b20      	cmp	r3, #32
 8009580:	d01a      	beq.n	80095b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009590:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009592:	f7fa fa2f 	bl	80039f4 <HAL_GetTick>
 8009596:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009598:	e00e      	b.n	80095b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800959a:	f7fa fa2b 	bl	80039f4 <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	2b19      	cmp	r3, #25
 80095a6:	d907      	bls.n	80095b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	f043 0320 	orr.w	r3, r3, #32
 80095ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80095b6:	e006      	b.n	80095c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	f003 0320 	and.w	r3, r3, #32
 80095c2:	2b20      	cmp	r3, #32
 80095c4:	d1e9      	bne.n	800959a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	d003      	beq.n	80095dc <I2C_IsErrorOccurred+0xe0>
 80095d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d0aa      	beq.n	8009532 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80095dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d103      	bne.n	80095ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2220      	movs	r2, #32
 80095ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	f043 0304 	orr.w	r3, r3, #4
 80095f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00b      	beq.n	8009624 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	f043 0301 	orr.w	r3, r3, #1
 8009612:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800961c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00b      	beq.n	8009646 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	f043 0308 	orr.w	r3, r3, #8
 8009634:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800963e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00b      	beq.n	8009668 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	f043 0302 	orr.w	r3, r3, #2
 8009656:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009660:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01c      	beq.n	80096aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff fdaf 	bl	80091d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6859      	ldr	r1, [r3, #4]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	4b0d      	ldr	r3, [pc, #52]	; (80096b8 <I2C_IsErrorOccurred+0x1bc>)
 8009682:	400b      	ands	r3, r1
 8009684:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	431a      	orrs	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2220      	movs	r2, #32
 8009696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80096aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3728      	adds	r7, #40	; 0x28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	fe00e800 	.word	0xfe00e800

080096bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	607b      	str	r3, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	817b      	strh	r3, [r7, #10]
 80096ca:	4613      	mov	r3, r2
 80096cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096ce:	897b      	ldrh	r3, [r7, #10]
 80096d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096d4:	7a7b      	ldrb	r3, [r7, #9]
 80096d6:	041b      	lsls	r3, r3, #16
 80096d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	0d5b      	lsrs	r3, r3, #21
 80096f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80096fa:	4b08      	ldr	r3, [pc, #32]	; (800971c <I2C_TransferConfig+0x60>)
 80096fc:	430b      	orrs	r3, r1
 80096fe:	43db      	mvns	r3, r3
 8009700:	ea02 0103 	and.w	r1, r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	430a      	orrs	r2, r1
 800970c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800970e:	bf00      	nop
 8009710:	371c      	adds	r7, #28
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	03ff63ff 	.word	0x03ff63ff

08009720 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b20      	cmp	r3, #32
 8009734:	d138      	bne.n	80097a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009740:	2302      	movs	r3, #2
 8009742:	e032      	b.n	80097aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2224      	movs	r2, #36	; 0x24
 8009750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 0201 	bic.w	r2, r2, #1
 8009762:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009772:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6819      	ldr	r1, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f042 0201 	orr.w	r2, r2, #1
 8009792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2220      	movs	r2, #32
 8009798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	e000      	b.n	80097aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80097a8:	2302      	movs	r3, #2
  }
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b085      	sub	sp, #20
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b20      	cmp	r3, #32
 80097ca:	d139      	bne.n	8009840 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d101      	bne.n	80097da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e033      	b.n	8009842 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2224      	movs	r2, #36	; 0x24
 80097e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0201 	bic.w	r2, r2, #1
 80097f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009808:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	021b      	lsls	r3, r3, #8
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	4313      	orrs	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 0201 	orr.w	r2, r2, #1
 800982a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2220      	movs	r2, #32
 8009830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	e000      	b.n	8009842 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009840:	2302      	movs	r3, #2
  }
}
 8009842:	4618      	mov	r0, r3
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
	...

08009850 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009858:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800985a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800985e:	4a0c      	ldr	r2, [pc, #48]	; (8009890 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009860:	f043 0302 	orr.w	r3, r3, #2
 8009864:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009868:	4b09      	ldr	r3, [pc, #36]	; (8009890 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800986a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800986e:	f003 0302 	and.w	r3, r3, #2
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009876:	4b07      	ldr	r3, [pc, #28]	; (8009894 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	4906      	ldr	r1, [pc, #24]	; (8009894 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4313      	orrs	r3, r2
 8009880:	604b      	str	r3, [r1, #4]
}
 8009882:	bf00      	nop
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	58024400 	.word	0x58024400
 8009894:	58000400 	.word	0x58000400

08009898 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009898:	b480      	push	{r7}
 800989a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800989c:	4b05      	ldr	r3, [pc, #20]	; (80098b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a04      	ldr	r2, [pc, #16]	; (80098b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80098a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098a6:	6013      	str	r3, [r2, #0]
}
 80098a8:	bf00      	nop
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	58024800 	.word	0x58024800

080098b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80098c0:	4b19      	ldr	r3, [pc, #100]	; (8009928 <HAL_PWREx_ConfigSupply+0x70>)
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f003 0304 	and.w	r3, r3, #4
 80098c8:	2b04      	cmp	r3, #4
 80098ca:	d00a      	beq.n	80098e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80098cc:	4b16      	ldr	r3, [pc, #88]	; (8009928 <HAL_PWREx_ConfigSupply+0x70>)
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f003 0307 	and.w	r3, r3, #7
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d001      	beq.n	80098de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e01f      	b.n	800991e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	e01d      	b.n	800991e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80098e2:	4b11      	ldr	r3, [pc, #68]	; (8009928 <HAL_PWREx_ConfigSupply+0x70>)
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f023 0207 	bic.w	r2, r3, #7
 80098ea:	490f      	ldr	r1, [pc, #60]	; (8009928 <HAL_PWREx_ConfigSupply+0x70>)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80098f2:	f7fa f87f 	bl	80039f4 <HAL_GetTick>
 80098f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80098f8:	e009      	b.n	800990e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80098fa:	f7fa f87b 	bl	80039f4 <HAL_GetTick>
 80098fe:	4602      	mov	r2, r0
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009908:	d901      	bls.n	800990e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e007      	b.n	800991e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800990e:	4b06      	ldr	r3, [pc, #24]	; (8009928 <HAL_PWREx_ConfigSupply+0x70>)
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800991a:	d1ee      	bne.n	80098fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	58024800 	.word	0x58024800

0800992c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08c      	sub	sp, #48	; 0x30
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d102      	bne.n	8009940 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	f000 bc48 	b.w	800a1d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0301 	and.w	r3, r3, #1
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 8088 	beq.w	8009a5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800994e:	4b99      	ldr	r3, [pc, #612]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009956:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009958:	4b96      	ldr	r3, [pc, #600]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 800995a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800995e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009960:	2b10      	cmp	r3, #16
 8009962:	d007      	beq.n	8009974 <HAL_RCC_OscConfig+0x48>
 8009964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009966:	2b18      	cmp	r3, #24
 8009968:	d111      	bne.n	800998e <HAL_RCC_OscConfig+0x62>
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	f003 0303 	and.w	r3, r3, #3
 8009970:	2b02      	cmp	r3, #2
 8009972:	d10c      	bne.n	800998e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009974:	4b8f      	ldr	r3, [pc, #572]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d06d      	beq.n	8009a5c <HAL_RCC_OscConfig+0x130>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d169      	bne.n	8009a5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	f000 bc21 	b.w	800a1d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009996:	d106      	bne.n	80099a6 <HAL_RCC_OscConfig+0x7a>
 8009998:	4b86      	ldr	r3, [pc, #536]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a85      	ldr	r2, [pc, #532]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 800999e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	e02e      	b.n	8009a04 <HAL_RCC_OscConfig+0xd8>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10c      	bne.n	80099c8 <HAL_RCC_OscConfig+0x9c>
 80099ae:	4b81      	ldr	r3, [pc, #516]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a80      	ldr	r2, [pc, #512]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 80099b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	4b7e      	ldr	r3, [pc, #504]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a7d      	ldr	r2, [pc, #500]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 80099c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	e01d      	b.n	8009a04 <HAL_RCC_OscConfig+0xd8>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099d0:	d10c      	bne.n	80099ec <HAL_RCC_OscConfig+0xc0>
 80099d2:	4b78      	ldr	r3, [pc, #480]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a77      	ldr	r2, [pc, #476]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 80099d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	4b75      	ldr	r3, [pc, #468]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a74      	ldr	r2, [pc, #464]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 80099e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099e8:	6013      	str	r3, [r2, #0]
 80099ea:	e00b      	b.n	8009a04 <HAL_RCC_OscConfig+0xd8>
 80099ec:	4b71      	ldr	r3, [pc, #452]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a70      	ldr	r2, [pc, #448]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 80099f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099f6:	6013      	str	r3, [r2, #0]
 80099f8:	4b6e      	ldr	r3, [pc, #440]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a6d      	ldr	r2, [pc, #436]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 80099fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d013      	beq.n	8009a34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a0c:	f7f9 fff2 	bl	80039f4 <HAL_GetTick>
 8009a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a12:	e008      	b.n	8009a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a14:	f7f9 ffee 	bl	80039f4 <HAL_GetTick>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	2b64      	cmp	r3, #100	; 0x64
 8009a20:	d901      	bls.n	8009a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e3d4      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a26:	4b63      	ldr	r3, [pc, #396]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0f0      	beq.n	8009a14 <HAL_RCC_OscConfig+0xe8>
 8009a32:	e014      	b.n	8009a5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a34:	f7f9 ffde 	bl	80039f4 <HAL_GetTick>
 8009a38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a3a:	e008      	b.n	8009a4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a3c:	f7f9 ffda 	bl	80039f4 <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b64      	cmp	r3, #100	; 0x64
 8009a48:	d901      	bls.n	8009a4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e3c0      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a4e:	4b59      	ldr	r3, [pc, #356]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1f0      	bne.n	8009a3c <HAL_RCC_OscConfig+0x110>
 8009a5a:	e000      	b.n	8009a5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0302 	and.w	r3, r3, #2
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 80ca 	beq.w	8009c00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a6c:	4b51      	ldr	r3, [pc, #324]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a76:	4b4f      	ldr	r3, [pc, #316]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d007      	beq.n	8009a92 <HAL_RCC_OscConfig+0x166>
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	2b18      	cmp	r3, #24
 8009a86:	d156      	bne.n	8009b36 <HAL_RCC_OscConfig+0x20a>
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	f003 0303 	and.w	r3, r3, #3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d151      	bne.n	8009b36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a92:	4b48      	ldr	r3, [pc, #288]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0304 	and.w	r3, r3, #4
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d005      	beq.n	8009aaa <HAL_RCC_OscConfig+0x17e>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e392      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009aaa:	4b42      	ldr	r3, [pc, #264]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f023 0219 	bic.w	r2, r3, #25
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	493f      	ldr	r1, [pc, #252]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009abc:	f7f9 ff9a 	bl	80039f4 <HAL_GetTick>
 8009ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ac2:	e008      	b.n	8009ad6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ac4:	f7f9 ff96 	bl	80039f4 <HAL_GetTick>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d901      	bls.n	8009ad6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e37c      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ad6:	4b37      	ldr	r3, [pc, #220]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0304 	and.w	r3, r3, #4
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0f0      	beq.n	8009ac4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ae2:	f7f9 ff93 	bl	8003a0c <HAL_GetREVID>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d817      	bhi.n	8009b20 <HAL_RCC_OscConfig+0x1f4>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	2b40      	cmp	r3, #64	; 0x40
 8009af6:	d108      	bne.n	8009b0a <HAL_RCC_OscConfig+0x1de>
 8009af8:	4b2e      	ldr	r3, [pc, #184]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009b00:	4a2c      	ldr	r2, [pc, #176]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b08:	e07a      	b.n	8009c00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b0a:	4b2a      	ldr	r3, [pc, #168]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	031b      	lsls	r3, r3, #12
 8009b18:	4926      	ldr	r1, [pc, #152]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b1e:	e06f      	b.n	8009c00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b20:	4b24      	ldr	r3, [pc, #144]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	061b      	lsls	r3, r3, #24
 8009b2e:	4921      	ldr	r1, [pc, #132]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b34:	e064      	b.n	8009c00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d047      	beq.n	8009bce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b3e:	4b1d      	ldr	r3, [pc, #116]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f023 0219 	bic.w	r2, r3, #25
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	491a      	ldr	r1, [pc, #104]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b50:	f7f9 ff50 	bl	80039f4 <HAL_GetTick>
 8009b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b58:	f7f9 ff4c 	bl	80039f4 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e332      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b6a:	4b12      	ldr	r3, [pc, #72]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 0304 	and.w	r3, r3, #4
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0f0      	beq.n	8009b58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b76:	f7f9 ff49 	bl	8003a0c <HAL_GetREVID>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d819      	bhi.n	8009bb8 <HAL_RCC_OscConfig+0x28c>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	2b40      	cmp	r3, #64	; 0x40
 8009b8a:	d108      	bne.n	8009b9e <HAL_RCC_OscConfig+0x272>
 8009b8c:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009b94:	4a07      	ldr	r2, [pc, #28]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b9a:	6053      	str	r3, [r2, #4]
 8009b9c:	e030      	b.n	8009c00 <HAL_RCC_OscConfig+0x2d4>
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	031b      	lsls	r3, r3, #12
 8009bac:	4901      	ldr	r1, [pc, #4]	; (8009bb4 <HAL_RCC_OscConfig+0x288>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	604b      	str	r3, [r1, #4]
 8009bb2:	e025      	b.n	8009c00 <HAL_RCC_OscConfig+0x2d4>
 8009bb4:	58024400 	.word	0x58024400
 8009bb8:	4b9a      	ldr	r3, [pc, #616]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	061b      	lsls	r3, r3, #24
 8009bc6:	4997      	ldr	r1, [pc, #604]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	604b      	str	r3, [r1, #4]
 8009bcc:	e018      	b.n	8009c00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009bce:	4b95      	ldr	r3, [pc, #596]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a94      	ldr	r2, [pc, #592]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009bd4:	f023 0301 	bic.w	r3, r3, #1
 8009bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bda:	f7f9 ff0b 	bl	80039f4 <HAL_GetTick>
 8009bde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009be0:	e008      	b.n	8009bf4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009be2:	f7f9 ff07 	bl	80039f4 <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d901      	bls.n	8009bf4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e2ed      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009bf4:	4b8b      	ldr	r3, [pc, #556]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 0304 	and.w	r3, r3, #4
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1f0      	bne.n	8009be2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0310 	and.w	r3, r3, #16
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 80a9 	beq.w	8009d60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c0e:	4b85      	ldr	r3, [pc, #532]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c18:	4b82      	ldr	r3, [pc, #520]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	2b08      	cmp	r3, #8
 8009c22:	d007      	beq.n	8009c34 <HAL_RCC_OscConfig+0x308>
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	2b18      	cmp	r3, #24
 8009c28:	d13a      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x374>
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f003 0303 	and.w	r3, r3, #3
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d135      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c34:	4b7b      	ldr	r3, [pc, #492]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <HAL_RCC_OscConfig+0x320>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	69db      	ldr	r3, [r3, #28]
 8009c44:	2b80      	cmp	r3, #128	; 0x80
 8009c46:	d001      	beq.n	8009c4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e2c1      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c4c:	f7f9 fede 	bl	8003a0c <HAL_GetREVID>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d817      	bhi.n	8009c8a <HAL_RCC_OscConfig+0x35e>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	d108      	bne.n	8009c74 <HAL_RCC_OscConfig+0x348>
 8009c62:	4b70      	ldr	r3, [pc, #448]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009c6a:	4a6e      	ldr	r2, [pc, #440]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009c6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c72:	e075      	b.n	8009d60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c74:	4b6b      	ldr	r3, [pc, #428]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	069b      	lsls	r3, r3, #26
 8009c82:	4968      	ldr	r1, [pc, #416]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009c84:	4313      	orrs	r3, r2
 8009c86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c88:	e06a      	b.n	8009d60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c8a:	4b66      	ldr	r3, [pc, #408]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	061b      	lsls	r3, r3, #24
 8009c98:	4962      	ldr	r1, [pc, #392]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c9e:	e05f      	b.n	8009d60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	69db      	ldr	r3, [r3, #28]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d042      	beq.n	8009d2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009ca8:	4b5e      	ldr	r3, [pc, #376]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a5d      	ldr	r2, [pc, #372]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cb4:	f7f9 fe9e 	bl	80039f4 <HAL_GetTick>
 8009cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009cba:	e008      	b.n	8009cce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009cbc:	f7f9 fe9a 	bl	80039f4 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e280      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009cce:	4b55      	ldr	r3, [pc, #340]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0f0      	beq.n	8009cbc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009cda:	f7f9 fe97 	bl	8003a0c <HAL_GetREVID>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d817      	bhi.n	8009d18 <HAL_RCC_OscConfig+0x3ec>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	2b20      	cmp	r3, #32
 8009cee:	d108      	bne.n	8009d02 <HAL_RCC_OscConfig+0x3d6>
 8009cf0:	4b4c      	ldr	r3, [pc, #304]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009cf8:	4a4a      	ldr	r2, [pc, #296]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009cfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cfe:	6053      	str	r3, [r2, #4]
 8009d00:	e02e      	b.n	8009d60 <HAL_RCC_OscConfig+0x434>
 8009d02:	4b48      	ldr	r3, [pc, #288]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	069b      	lsls	r3, r3, #26
 8009d10:	4944      	ldr	r1, [pc, #272]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009d12:	4313      	orrs	r3, r2
 8009d14:	604b      	str	r3, [r1, #4]
 8009d16:	e023      	b.n	8009d60 <HAL_RCC_OscConfig+0x434>
 8009d18:	4b42      	ldr	r3, [pc, #264]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a1b      	ldr	r3, [r3, #32]
 8009d24:	061b      	lsls	r3, r3, #24
 8009d26:	493f      	ldr	r1, [pc, #252]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	60cb      	str	r3, [r1, #12]
 8009d2c:	e018      	b.n	8009d60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009d2e:	4b3d      	ldr	r3, [pc, #244]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a3c      	ldr	r2, [pc, #240]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d3a:	f7f9 fe5b 	bl	80039f4 <HAL_GetTick>
 8009d3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d40:	e008      	b.n	8009d54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009d42:	f7f9 fe57 	bl	80039f4 <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d901      	bls.n	8009d54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e23d      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d54:	4b33      	ldr	r3, [pc, #204]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1f0      	bne.n	8009d42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0308 	and.w	r3, r3, #8
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d036      	beq.n	8009dda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d019      	beq.n	8009da8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d74:	4b2b      	ldr	r3, [pc, #172]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d78:	4a2a      	ldr	r2, [pc, #168]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009d7a:	f043 0301 	orr.w	r3, r3, #1
 8009d7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d80:	f7f9 fe38 	bl	80039f4 <HAL_GetTick>
 8009d84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d86:	e008      	b.n	8009d9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d88:	f7f9 fe34 	bl	80039f4 <HAL_GetTick>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d901      	bls.n	8009d9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e21a      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d9a:	4b22      	ldr	r3, [pc, #136]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0f0      	beq.n	8009d88 <HAL_RCC_OscConfig+0x45c>
 8009da6:	e018      	b.n	8009dda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009da8:	4b1e      	ldr	r3, [pc, #120]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dac:	4a1d      	ldr	r2, [pc, #116]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009dae:	f023 0301 	bic.w	r3, r3, #1
 8009db2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009db4:	f7f9 fe1e 	bl	80039f4 <HAL_GetTick>
 8009db8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009dba:	e008      	b.n	8009dce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dbc:	f7f9 fe1a 	bl	80039f4 <HAL_GetTick>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d901      	bls.n	8009dce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e200      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009dce:	4b15      	ldr	r3, [pc, #84]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1f0      	bne.n	8009dbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d039      	beq.n	8009e5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d01c      	beq.n	8009e28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009dee:	4b0d      	ldr	r3, [pc, #52]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a0c      	ldr	r2, [pc, #48]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009df4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009df8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009dfa:	f7f9 fdfb 	bl	80039f4 <HAL_GetTick>
 8009dfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e00:	e008      	b.n	8009e14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e02:	f7f9 fdf7 	bl	80039f4 <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d901      	bls.n	8009e14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e1dd      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e14:	4b03      	ldr	r3, [pc, #12]	; (8009e24 <HAL_RCC_OscConfig+0x4f8>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d0f0      	beq.n	8009e02 <HAL_RCC_OscConfig+0x4d6>
 8009e20:	e01b      	b.n	8009e5a <HAL_RCC_OscConfig+0x52e>
 8009e22:	bf00      	nop
 8009e24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e28:	4b9b      	ldr	r3, [pc, #620]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a9a      	ldr	r2, [pc, #616]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e34:	f7f9 fdde 	bl	80039f4 <HAL_GetTick>
 8009e38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e3a:	e008      	b.n	8009e4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e3c:	f7f9 fdda 	bl	80039f4 <HAL_GetTick>
 8009e40:	4602      	mov	r2, r0
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d901      	bls.n	8009e4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e1c0      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e4e:	4b92      	ldr	r3, [pc, #584]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1f0      	bne.n	8009e3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 8081 	beq.w	8009f6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009e68:	4b8c      	ldr	r3, [pc, #560]	; (800a09c <HAL_RCC_OscConfig+0x770>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a8b      	ldr	r2, [pc, #556]	; (800a09c <HAL_RCC_OscConfig+0x770>)
 8009e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e74:	f7f9 fdbe 	bl	80039f4 <HAL_GetTick>
 8009e78:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e7a:	e008      	b.n	8009e8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e7c:	f7f9 fdba 	bl	80039f4 <HAL_GetTick>
 8009e80:	4602      	mov	r2, r0
 8009e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	2b64      	cmp	r3, #100	; 0x64
 8009e88:	d901      	bls.n	8009e8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	e1a0      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e8e:	4b83      	ldr	r3, [pc, #524]	; (800a09c <HAL_RCC_OscConfig+0x770>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d0f0      	beq.n	8009e7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d106      	bne.n	8009eb0 <HAL_RCC_OscConfig+0x584>
 8009ea2:	4b7d      	ldr	r3, [pc, #500]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea6:	4a7c      	ldr	r2, [pc, #496]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009ea8:	f043 0301 	orr.w	r3, r3, #1
 8009eac:	6713      	str	r3, [r2, #112]	; 0x70
 8009eae:	e02d      	b.n	8009f0c <HAL_RCC_OscConfig+0x5e0>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10c      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x5a6>
 8009eb8:	4b77      	ldr	r3, [pc, #476]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ebc:	4a76      	ldr	r2, [pc, #472]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009ebe:	f023 0301 	bic.w	r3, r3, #1
 8009ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8009ec4:	4b74      	ldr	r3, [pc, #464]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec8:	4a73      	ldr	r2, [pc, #460]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009eca:	f023 0304 	bic.w	r3, r3, #4
 8009ece:	6713      	str	r3, [r2, #112]	; 0x70
 8009ed0:	e01c      	b.n	8009f0c <HAL_RCC_OscConfig+0x5e0>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	2b05      	cmp	r3, #5
 8009ed8:	d10c      	bne.n	8009ef4 <HAL_RCC_OscConfig+0x5c8>
 8009eda:	4b6f      	ldr	r3, [pc, #444]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ede:	4a6e      	ldr	r2, [pc, #440]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009ee0:	f043 0304 	orr.w	r3, r3, #4
 8009ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ee6:	4b6c      	ldr	r3, [pc, #432]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eea:	4a6b      	ldr	r2, [pc, #428]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009eec:	f043 0301 	orr.w	r3, r3, #1
 8009ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8009ef2:	e00b      	b.n	8009f0c <HAL_RCC_OscConfig+0x5e0>
 8009ef4:	4b68      	ldr	r3, [pc, #416]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef8:	4a67      	ldr	r2, [pc, #412]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009efa:	f023 0301 	bic.w	r3, r3, #1
 8009efe:	6713      	str	r3, [r2, #112]	; 0x70
 8009f00:	4b65      	ldr	r3, [pc, #404]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f04:	4a64      	ldr	r2, [pc, #400]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009f06:	f023 0304 	bic.w	r3, r3, #4
 8009f0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d015      	beq.n	8009f40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f14:	f7f9 fd6e 	bl	80039f4 <HAL_GetTick>
 8009f18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f1a:	e00a      	b.n	8009f32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f1c:	f7f9 fd6a 	bl	80039f4 <HAL_GetTick>
 8009f20:	4602      	mov	r2, r0
 8009f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d901      	bls.n	8009f32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e14e      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f32:	4b59      	ldr	r3, [pc, #356]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0ee      	beq.n	8009f1c <HAL_RCC_OscConfig+0x5f0>
 8009f3e:	e014      	b.n	8009f6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f40:	f7f9 fd58 	bl	80039f4 <HAL_GetTick>
 8009f44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f46:	e00a      	b.n	8009f5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f48:	f7f9 fd54 	bl	80039f4 <HAL_GetTick>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d901      	bls.n	8009f5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e138      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f5e:	4b4e      	ldr	r3, [pc, #312]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f62:	f003 0302 	and.w	r3, r3, #2
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1ee      	bne.n	8009f48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 812d 	beq.w	800a1ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009f74:	4b48      	ldr	r3, [pc, #288]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f7c:	2b18      	cmp	r3, #24
 8009f7e:	f000 80bd 	beq.w	800a0fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	f040 809e 	bne.w	800a0c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f8c:	4b42      	ldr	r3, [pc, #264]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a41      	ldr	r2, [pc, #260]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f98:	f7f9 fd2c 	bl	80039f4 <HAL_GetTick>
 8009f9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f9e:	e008      	b.n	8009fb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fa0:	f7f9 fd28 	bl	80039f4 <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d901      	bls.n	8009fb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e10e      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fb2:	4b39      	ldr	r3, [pc, #228]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1f0      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fbe:	4b36      	ldr	r3, [pc, #216]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fc2:	4b37      	ldr	r3, [pc, #220]	; (800a0a0 <HAL_RCC_OscConfig+0x774>)
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009fce:	0112      	lsls	r2, r2, #4
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	4931      	ldr	r1, [pc, #196]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	628b      	str	r3, [r1, #40]	; 0x28
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	025b      	lsls	r3, r3, #9
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	431a      	orrs	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	041b      	lsls	r3, r3, #16
 8009ff6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ffa:	431a      	orrs	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a000:	3b01      	subs	r3, #1
 800a002:	061b      	lsls	r3, r3, #24
 800a004:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a008:	4923      	ldr	r1, [pc, #140]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a00a:	4313      	orrs	r3, r2
 800a00c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a00e:	4b22      	ldr	r3, [pc, #136]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a012:	4a21      	ldr	r2, [pc, #132]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a014:	f023 0301 	bic.w	r3, r3, #1
 800a018:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a01a:	4b1f      	ldr	r3, [pc, #124]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a01c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a01e:	4b21      	ldr	r3, [pc, #132]	; (800a0a4 <HAL_RCC_OscConfig+0x778>)
 800a020:	4013      	ands	r3, r2
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a026:	00d2      	lsls	r2, r2, #3
 800a028:	491b      	ldr	r1, [pc, #108]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a02e:	4b1a      	ldr	r3, [pc, #104]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a032:	f023 020c 	bic.w	r2, r3, #12
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	4917      	ldr	r1, [pc, #92]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a040:	4b15      	ldr	r3, [pc, #84]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	f023 0202 	bic.w	r2, r3, #2
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04c:	4912      	ldr	r1, [pc, #72]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a052:	4b11      	ldr	r3, [pc, #68]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a056:	4a10      	ldr	r2, [pc, #64]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a05c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a05e:	4b0e      	ldr	r3, [pc, #56]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a062:	4a0d      	ldr	r2, [pc, #52]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a068:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a06a:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06e:	4a0a      	ldr	r2, [pc, #40]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a074:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a076:	4b08      	ldr	r3, [pc, #32]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	4a07      	ldr	r2, [pc, #28]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a07c:	f043 0301 	orr.w	r3, r3, #1
 800a080:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a082:	4b05      	ldr	r3, [pc, #20]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a04      	ldr	r2, [pc, #16]	; (800a098 <HAL_RCC_OscConfig+0x76c>)
 800a088:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a08c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a08e:	f7f9 fcb1 	bl	80039f4 <HAL_GetTick>
 800a092:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a094:	e011      	b.n	800a0ba <HAL_RCC_OscConfig+0x78e>
 800a096:	bf00      	nop
 800a098:	58024400 	.word	0x58024400
 800a09c:	58024800 	.word	0x58024800
 800a0a0:	fffffc0c 	.word	0xfffffc0c
 800a0a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0a8:	f7f9 fca4 	bl	80039f4 <HAL_GetTick>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d901      	bls.n	800a0ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e08a      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0ba:	4b47      	ldr	r3, [pc, #284]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d0f0      	beq.n	800a0a8 <HAL_RCC_OscConfig+0x77c>
 800a0c6:	e082      	b.n	800a1ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0c8:	4b43      	ldr	r3, [pc, #268]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a42      	ldr	r2, [pc, #264]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a0ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d4:	f7f9 fc8e 	bl	80039f4 <HAL_GetTick>
 800a0d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0da:	e008      	b.n	800a0ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0dc:	f7f9 fc8a 	bl	80039f4 <HAL_GetTick>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d901      	bls.n	800a0ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	e070      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0ee:	4b3a      	ldr	r3, [pc, #232]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1f0      	bne.n	800a0dc <HAL_RCC_OscConfig+0x7b0>
 800a0fa:	e068      	b.n	800a1ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a0fc:	4b36      	ldr	r3, [pc, #216]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a100:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a102:	4b35      	ldr	r3, [pc, #212]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a106:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d031      	beq.n	800a174 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	f003 0203 	and.w	r2, r3, #3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d12a      	bne.n	800a174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	091b      	lsrs	r3, r3, #4
 800a122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d122      	bne.n	800a174 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a138:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d11a      	bne.n	800a174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	0a5b      	lsrs	r3, r3, #9
 800a142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d111      	bne.n	800a174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	0c1b      	lsrs	r3, r3, #16
 800a154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a15e:	429a      	cmp	r2, r3
 800a160:	d108      	bne.n	800a174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	0e1b      	lsrs	r3, r3, #24
 800a166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a16e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a170:	429a      	cmp	r2, r3
 800a172:	d001      	beq.n	800a178 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e02b      	b.n	800a1d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a178:	4b17      	ldr	r3, [pc, #92]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a17c:	08db      	lsrs	r3, r3, #3
 800a17e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a182:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a188:	693a      	ldr	r2, [r7, #16]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d01f      	beq.n	800a1ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a18e:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a192:	4a11      	ldr	r2, [pc, #68]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a194:	f023 0301 	bic.w	r3, r3, #1
 800a198:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a19a:	f7f9 fc2b 	bl	80039f4 <HAL_GetTick>
 800a19e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a1a0:	bf00      	nop
 800a1a2:	f7f9 fc27 	bl	80039f4 <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d0f9      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a1ae:	4b0a      	ldr	r3, [pc, #40]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a1b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1b2:	4b0a      	ldr	r3, [pc, #40]	; (800a1dc <HAL_RCC_OscConfig+0x8b0>)
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a1ba:	00d2      	lsls	r2, r2, #3
 800a1bc:	4906      	ldr	r1, [pc, #24]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a1c2:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c6:	4a04      	ldr	r2, [pc, #16]	; (800a1d8 <HAL_RCC_OscConfig+0x8ac>)
 800a1c8:	f043 0301 	orr.w	r3, r3, #1
 800a1cc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3730      	adds	r7, #48	; 0x30
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	ffff0007 	.word	0xffff0007

0800a1e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b086      	sub	sp, #24
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e19c      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a1f4:	4b8a      	ldr	r3, [pc, #552]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 030f 	and.w	r3, r3, #15
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d910      	bls.n	800a224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a202:	4b87      	ldr	r3, [pc, #540]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f023 020f 	bic.w	r2, r3, #15
 800a20a:	4985      	ldr	r1, [pc, #532]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	4313      	orrs	r3, r2
 800a210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a212:	4b83      	ldr	r3, [pc, #524]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 030f 	and.w	r3, r3, #15
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d001      	beq.n	800a224 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e184      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0304 	and.w	r3, r3, #4
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d010      	beq.n	800a252 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691a      	ldr	r2, [r3, #16]
 800a234:	4b7b      	ldr	r3, [pc, #492]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d908      	bls.n	800a252 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a240:	4b78      	ldr	r3, [pc, #480]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	4975      	ldr	r1, [pc, #468]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0308 	and.w	r3, r3, #8
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d010      	beq.n	800a280 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	695a      	ldr	r2, [r3, #20]
 800a262:	4b70      	ldr	r3, [pc, #448]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a264:	69db      	ldr	r3, [r3, #28]
 800a266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d908      	bls.n	800a280 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a26e:	4b6d      	ldr	r3, [pc, #436]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	496a      	ldr	r1, [pc, #424]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 0310 	and.w	r3, r3, #16
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d010      	beq.n	800a2ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	699a      	ldr	r2, [r3, #24]
 800a290:	4b64      	ldr	r3, [pc, #400]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a298:	429a      	cmp	r2, r3
 800a29a:	d908      	bls.n	800a2ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a29c:	4b61      	ldr	r3, [pc, #388]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a29e:	69db      	ldr	r3, [r3, #28]
 800a2a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	495e      	ldr	r1, [pc, #376]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d010      	beq.n	800a2dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	69da      	ldr	r2, [r3, #28]
 800a2be:	4b59      	ldr	r3, [pc, #356]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d908      	bls.n	800a2dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a2ca:	4b56      	ldr	r3, [pc, #344]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	4953      	ldr	r1, [pc, #332]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d010      	beq.n	800a30a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	4b4d      	ldr	r3, [pc, #308]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	f003 030f 	and.w	r3, r3, #15
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d908      	bls.n	800a30a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2f8:	4b4a      	ldr	r3, [pc, #296]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	f023 020f 	bic.w	r2, r3, #15
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	4947      	ldr	r1, [pc, #284]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a306:	4313      	orrs	r3, r2
 800a308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 0301 	and.w	r3, r3, #1
 800a312:	2b00      	cmp	r3, #0
 800a314:	d055      	beq.n	800a3c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a316:	4b43      	ldr	r3, [pc, #268]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	4940      	ldr	r1, [pc, #256]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a324:	4313      	orrs	r3, r2
 800a326:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d107      	bne.n	800a340 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a330:	4b3c      	ldr	r3, [pc, #240]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d121      	bne.n	800a380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e0f6      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	2b03      	cmp	r3, #3
 800a346:	d107      	bne.n	800a358 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a348:	4b36      	ldr	r3, [pc, #216]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d115      	bne.n	800a380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e0ea      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d107      	bne.n	800a370 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a360:	4b30      	ldr	r3, [pc, #192]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d109      	bne.n	800a380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e0de      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a370:	4b2c      	ldr	r3, [pc, #176]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0304 	and.w	r3, r3, #4
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e0d6      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a380:	4b28      	ldr	r3, [pc, #160]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	f023 0207 	bic.w	r2, r3, #7
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	4925      	ldr	r1, [pc, #148]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a38e:	4313      	orrs	r3, r2
 800a390:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a392:	f7f9 fb2f 	bl	80039f4 <HAL_GetTick>
 800a396:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a398:	e00a      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a39a:	f7f9 fb2b 	bl	80039f4 <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d901      	bls.n	800a3b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e0be      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3b0:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	00db      	lsls	r3, r3, #3
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d1eb      	bne.n	800a39a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 0302 	and.w	r3, r3, #2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d010      	beq.n	800a3f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68da      	ldr	r2, [r3, #12]
 800a3d2:	4b14      	ldr	r3, [pc, #80]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	f003 030f 	and.w	r3, r3, #15
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d208      	bcs.n	800a3f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3de:	4b11      	ldr	r3, [pc, #68]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	f023 020f 	bic.w	r2, r3, #15
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	490e      	ldr	r1, [pc, #56]	; (800a424 <HAL_RCC_ClockConfig+0x244>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a3f0:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 030f 	and.w	r3, r3, #15
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d214      	bcs.n	800a428 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3fe:	4b08      	ldr	r3, [pc, #32]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f023 020f 	bic.w	r2, r3, #15
 800a406:	4906      	ldr	r1, [pc, #24]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a40e:	4b04      	ldr	r3, [pc, #16]	; (800a420 <HAL_RCC_ClockConfig+0x240>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 030f 	and.w	r3, r3, #15
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d005      	beq.n	800a428 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e086      	b.n	800a52e <HAL_RCC_ClockConfig+0x34e>
 800a420:	52002000 	.word	0x52002000
 800a424:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	2b00      	cmp	r3, #0
 800a432:	d010      	beq.n	800a456 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691a      	ldr	r2, [r3, #16]
 800a438:	4b3f      	ldr	r3, [pc, #252]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a440:	429a      	cmp	r2, r3
 800a442:	d208      	bcs.n	800a456 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a444:	4b3c      	ldr	r3, [pc, #240]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	4939      	ldr	r1, [pc, #228]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a452:	4313      	orrs	r3, r2
 800a454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 0308 	and.w	r3, r3, #8
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d010      	beq.n	800a484 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	695a      	ldr	r2, [r3, #20]
 800a466:	4b34      	ldr	r3, [pc, #208]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a46e:	429a      	cmp	r2, r3
 800a470:	d208      	bcs.n	800a484 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a472:	4b31      	ldr	r3, [pc, #196]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	492e      	ldr	r1, [pc, #184]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a480:	4313      	orrs	r3, r2
 800a482:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 0310 	and.w	r3, r3, #16
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d010      	beq.n	800a4b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	699a      	ldr	r2, [r3, #24]
 800a494:	4b28      	ldr	r3, [pc, #160]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a496:	69db      	ldr	r3, [r3, #28]
 800a498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d208      	bcs.n	800a4b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a4a0:	4b25      	ldr	r3, [pc, #148]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a4a2:	69db      	ldr	r3, [r3, #28]
 800a4a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	4922      	ldr	r1, [pc, #136]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 0320 	and.w	r3, r3, #32
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d010      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	69da      	ldr	r2, [r3, #28]
 800a4c2:	4b1d      	ldr	r3, [pc, #116]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d208      	bcs.n	800a4e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a4ce:	4b1a      	ldr	r3, [pc, #104]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	4917      	ldr	r1, [pc, #92]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a4e0:	f000 f834 	bl	800a54c <HAL_RCC_GetSysClockFreq>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	4b14      	ldr	r3, [pc, #80]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	0a1b      	lsrs	r3, r3, #8
 800a4ec:	f003 030f 	and.w	r3, r3, #15
 800a4f0:	4912      	ldr	r1, [pc, #72]	; (800a53c <HAL_RCC_ClockConfig+0x35c>)
 800a4f2:	5ccb      	ldrb	r3, [r1, r3]
 800a4f4:	f003 031f 	and.w	r3, r3, #31
 800a4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4fe:	4b0e      	ldr	r3, [pc, #56]	; (800a538 <HAL_RCC_ClockConfig+0x358>)
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	f003 030f 	and.w	r3, r3, #15
 800a506:	4a0d      	ldr	r2, [pc, #52]	; (800a53c <HAL_RCC_ClockConfig+0x35c>)
 800a508:	5cd3      	ldrb	r3, [r2, r3]
 800a50a:	f003 031f 	and.w	r3, r3, #31
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	fa22 f303 	lsr.w	r3, r2, r3
 800a514:	4a0a      	ldr	r2, [pc, #40]	; (800a540 <HAL_RCC_ClockConfig+0x360>)
 800a516:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a518:	4a0a      	ldr	r2, [pc, #40]	; (800a544 <HAL_RCC_ClockConfig+0x364>)
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a51e:	4b0a      	ldr	r3, [pc, #40]	; (800a548 <HAL_RCC_ClockConfig+0x368>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4618      	mov	r0, r3
 800a524:	f7f8 ff94 	bl	8003450 <HAL_InitTick>
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	58024400 	.word	0x58024400
 800a53c:	08016e40 	.word	0x08016e40
 800a540:	24000094 	.word	0x24000094
 800a544:	24000090 	.word	0x24000090
 800a548:	24000098 	.word	0x24000098

0800a54c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b089      	sub	sp, #36	; 0x24
 800a550:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a552:	4bb3      	ldr	r3, [pc, #716]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a55a:	2b18      	cmp	r3, #24
 800a55c:	f200 8155 	bhi.w	800a80a <HAL_RCC_GetSysClockFreq+0x2be>
 800a560:	a201      	add	r2, pc, #4	; (adr r2, 800a568 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a566:	bf00      	nop
 800a568:	0800a5cd 	.word	0x0800a5cd
 800a56c:	0800a80b 	.word	0x0800a80b
 800a570:	0800a80b 	.word	0x0800a80b
 800a574:	0800a80b 	.word	0x0800a80b
 800a578:	0800a80b 	.word	0x0800a80b
 800a57c:	0800a80b 	.word	0x0800a80b
 800a580:	0800a80b 	.word	0x0800a80b
 800a584:	0800a80b 	.word	0x0800a80b
 800a588:	0800a5f3 	.word	0x0800a5f3
 800a58c:	0800a80b 	.word	0x0800a80b
 800a590:	0800a80b 	.word	0x0800a80b
 800a594:	0800a80b 	.word	0x0800a80b
 800a598:	0800a80b 	.word	0x0800a80b
 800a59c:	0800a80b 	.word	0x0800a80b
 800a5a0:	0800a80b 	.word	0x0800a80b
 800a5a4:	0800a80b 	.word	0x0800a80b
 800a5a8:	0800a5f9 	.word	0x0800a5f9
 800a5ac:	0800a80b 	.word	0x0800a80b
 800a5b0:	0800a80b 	.word	0x0800a80b
 800a5b4:	0800a80b 	.word	0x0800a80b
 800a5b8:	0800a80b 	.word	0x0800a80b
 800a5bc:	0800a80b 	.word	0x0800a80b
 800a5c0:	0800a80b 	.word	0x0800a80b
 800a5c4:	0800a80b 	.word	0x0800a80b
 800a5c8:	0800a5ff 	.word	0x0800a5ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5cc:	4b94      	ldr	r3, [pc, #592]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0320 	and.w	r3, r3, #32
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d009      	beq.n	800a5ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5d8:	4b91      	ldr	r3, [pc, #580]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	08db      	lsrs	r3, r3, #3
 800a5de:	f003 0303 	and.w	r3, r3, #3
 800a5e2:	4a90      	ldr	r2, [pc, #576]	; (800a824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a5ea:	e111      	b.n	800a810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a5ec:	4b8d      	ldr	r3, [pc, #564]	; (800a824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5ee:	61bb      	str	r3, [r7, #24]
      break;
 800a5f0:	e10e      	b.n	800a810 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a5f2:	4b8d      	ldr	r3, [pc, #564]	; (800a828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a5f4:	61bb      	str	r3, [r7, #24]
      break;
 800a5f6:	e10b      	b.n	800a810 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a5f8:	4b8c      	ldr	r3, [pc, #560]	; (800a82c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a5fa:	61bb      	str	r3, [r7, #24]
      break;
 800a5fc:	e108      	b.n	800a810 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5fe:	4b88      	ldr	r3, [pc, #544]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a602:	f003 0303 	and.w	r3, r3, #3
 800a606:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a608:	4b85      	ldr	r3, [pc, #532]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60c:	091b      	lsrs	r3, r3, #4
 800a60e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a612:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a614:	4b82      	ldr	r3, [pc, #520]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a61e:	4b80      	ldr	r3, [pc, #512]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a622:	08db      	lsrs	r3, r3, #3
 800a624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	fb02 f303 	mul.w	r3, r2, r3
 800a62e:	ee07 3a90 	vmov	s15, r3
 800a632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a636:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 80e1 	beq.w	800a804 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	2b02      	cmp	r3, #2
 800a646:	f000 8083 	beq.w	800a750 <HAL_RCC_GetSysClockFreq+0x204>
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	f200 80a1 	bhi.w	800a794 <HAL_RCC_GetSysClockFreq+0x248>
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <HAL_RCC_GetSysClockFreq+0x114>
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d056      	beq.n	800a70c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a65e:	e099      	b.n	800a794 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a660:	4b6f      	ldr	r3, [pc, #444]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 0320 	and.w	r3, r3, #32
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d02d      	beq.n	800a6c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a66c:	4b6c      	ldr	r3, [pc, #432]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	08db      	lsrs	r3, r3, #3
 800a672:	f003 0303 	and.w	r3, r3, #3
 800a676:	4a6b      	ldr	r2, [pc, #428]	; (800a824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a678:	fa22 f303 	lsr.w	r3, r2, r3
 800a67c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	ee07 3a90 	vmov	s15, r3
 800a684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a696:	4b62      	ldr	r3, [pc, #392]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a69e:	ee07 3a90 	vmov	s15, r3
 800a6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a6c6:	e087      	b.n	800a7d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	ee07 3a90 	vmov	s15, r3
 800a6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a834 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6da:	4b51      	ldr	r3, [pc, #324]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e2:	ee07 3a90 	vmov	s15, r3
 800a6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a70a:	e065      	b.n	800a7d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	ee07 3a90 	vmov	s15, r3
 800a712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a716:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a838 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a71e:	4b40      	ldr	r3, [pc, #256]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a726:	ee07 3a90 	vmov	s15, r3
 800a72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a72e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a732:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a73e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a74a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a74e:	e043      	b.n	800a7d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	ee07 3a90 	vmov	s15, r3
 800a756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a83c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a75e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a762:	4b2f      	ldr	r3, [pc, #188]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a772:	ed97 6a02 	vldr	s12, [r7, #8]
 800a776:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a77a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a77e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a78e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a792:	e021      	b.n	800a7d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	ee07 3a90 	vmov	s15, r3
 800a79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a79e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a838 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7a6:	4b1e      	ldr	r3, [pc, #120]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ae:	ee07 3a90 	vmov	s15, r3
 800a7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a7d8:	4b11      	ldr	r3, [pc, #68]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7dc:	0a5b      	lsrs	r3, r3, #9
 800a7de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	ee07 3a90 	vmov	s15, r3
 800a7ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a7f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7fc:	ee17 3a90 	vmov	r3, s15
 800a800:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a802:	e005      	b.n	800a810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	61bb      	str	r3, [r7, #24]
      break;
 800a808:	e002      	b.n	800a810 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a80a:	4b07      	ldr	r3, [pc, #28]	; (800a828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a80c:	61bb      	str	r3, [r7, #24]
      break;
 800a80e:	bf00      	nop
  }

  return sysclockfreq;
 800a810:	69bb      	ldr	r3, [r7, #24]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3724      	adds	r7, #36	; 0x24
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	58024400 	.word	0x58024400
 800a824:	03d09000 	.word	0x03d09000
 800a828:	003d0900 	.word	0x003d0900
 800a82c:	017d7840 	.word	0x017d7840
 800a830:	46000000 	.word	0x46000000
 800a834:	4c742400 	.word	0x4c742400
 800a838:	4a742400 	.word	0x4a742400
 800a83c:	4bbebc20 	.word	0x4bbebc20

0800a840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a846:	f7ff fe81 	bl	800a54c <HAL_RCC_GetSysClockFreq>
 800a84a:	4602      	mov	r2, r0
 800a84c:	4b10      	ldr	r3, [pc, #64]	; (800a890 <HAL_RCC_GetHCLKFreq+0x50>)
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	0a1b      	lsrs	r3, r3, #8
 800a852:	f003 030f 	and.w	r3, r3, #15
 800a856:	490f      	ldr	r1, [pc, #60]	; (800a894 <HAL_RCC_GetHCLKFreq+0x54>)
 800a858:	5ccb      	ldrb	r3, [r1, r3]
 800a85a:	f003 031f 	and.w	r3, r3, #31
 800a85e:	fa22 f303 	lsr.w	r3, r2, r3
 800a862:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a864:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <HAL_RCC_GetHCLKFreq+0x50>)
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	f003 030f 	and.w	r3, r3, #15
 800a86c:	4a09      	ldr	r2, [pc, #36]	; (800a894 <HAL_RCC_GetHCLKFreq+0x54>)
 800a86e:	5cd3      	ldrb	r3, [r2, r3]
 800a870:	f003 031f 	and.w	r3, r3, #31
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	fa22 f303 	lsr.w	r3, r2, r3
 800a87a:	4a07      	ldr	r2, [pc, #28]	; (800a898 <HAL_RCC_GetHCLKFreq+0x58>)
 800a87c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a87e:	4a07      	ldr	r2, [pc, #28]	; (800a89c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a884:	4b04      	ldr	r3, [pc, #16]	; (800a898 <HAL_RCC_GetHCLKFreq+0x58>)
 800a886:	681b      	ldr	r3, [r3, #0]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	58024400 	.word	0x58024400
 800a894:	08016e40 	.word	0x08016e40
 800a898:	24000094 	.word	0x24000094
 800a89c:	24000090 	.word	0x24000090

0800a8a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a8a4:	f7ff ffcc 	bl	800a840 <HAL_RCC_GetHCLKFreq>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	091b      	lsrs	r3, r3, #4
 800a8b0:	f003 0307 	and.w	r3, r3, #7
 800a8b4:	4904      	ldr	r1, [pc, #16]	; (800a8c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a8b6:	5ccb      	ldrb	r3, [r1, r3]
 800a8b8:	f003 031f 	and.w	r3, r3, #31
 800a8bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	58024400 	.word	0x58024400
 800a8c8:	08016e40 	.word	0x08016e40

0800a8cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a8d0:	f7ff ffb6 	bl	800a840 <HAL_RCC_GetHCLKFreq>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	4b06      	ldr	r3, [pc, #24]	; (800a8f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8d8:	69db      	ldr	r3, [r3, #28]
 800a8da:	0a1b      	lsrs	r3, r3, #8
 800a8dc:	f003 0307 	and.w	r3, r3, #7
 800a8e0:	4904      	ldr	r1, [pc, #16]	; (800a8f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a8e2:	5ccb      	ldrb	r3, [r1, r3]
 800a8e4:	f003 031f 	and.w	r3, r3, #31
 800a8e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	58024400 	.word	0x58024400
 800a8f4:	08016e40 	.word	0x08016e40

0800a8f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	223f      	movs	r2, #63	; 0x3f
 800a906:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a908:	4b1a      	ldr	r3, [pc, #104]	; (800a974 <HAL_RCC_GetClockConfig+0x7c>)
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	f003 0207 	and.w	r2, r3, #7
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a914:	4b17      	ldr	r3, [pc, #92]	; (800a974 <HAL_RCC_GetClockConfig+0x7c>)
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a920:	4b14      	ldr	r3, [pc, #80]	; (800a974 <HAL_RCC_GetClockConfig+0x7c>)
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	f003 020f 	and.w	r2, r3, #15
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a92c:	4b11      	ldr	r3, [pc, #68]	; (800a974 <HAL_RCC_GetClockConfig+0x7c>)
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a938:	4b0e      	ldr	r3, [pc, #56]	; (800a974 <HAL_RCC_GetClockConfig+0x7c>)
 800a93a:	69db      	ldr	r3, [r3, #28]
 800a93c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a944:	4b0b      	ldr	r3, [pc, #44]	; (800a974 <HAL_RCC_GetClockConfig+0x7c>)
 800a946:	69db      	ldr	r3, [r3, #28]
 800a948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a950:	4b08      	ldr	r3, [pc, #32]	; (800a974 <HAL_RCC_GetClockConfig+0x7c>)
 800a952:	6a1b      	ldr	r3, [r3, #32]
 800a954:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a95c:	4b06      	ldr	r3, [pc, #24]	; (800a978 <HAL_RCC_GetClockConfig+0x80>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 020f 	and.w	r2, r3, #15
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	601a      	str	r2, [r3, #0]
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	58024400 	.word	0x58024400
 800a978:	52002000 	.word	0x52002000

0800a97c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a97c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a980:	b0ca      	sub	sp, #296	; 0x128
 800a982:	af00      	add	r7, sp, #0
 800a984:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a988:	2300      	movs	r3, #0
 800a98a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a98e:	2300      	movs	r3, #0
 800a990:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a9a0:	2500      	movs	r5, #0
 800a9a2:	ea54 0305 	orrs.w	r3, r4, r5
 800a9a6:	d049      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9b2:	d02f      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a9b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9b8:	d828      	bhi.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a9ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9be:	d01a      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a9c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9c4:	d822      	bhi.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d003      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a9ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9ce:	d007      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a9d0:	e01c      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9d2:	4bb8      	ldr	r3, [pc, #736]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d6:	4ab7      	ldr	r2, [pc, #732]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a9de:	e01a      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9e4:	3308      	adds	r3, #8
 800a9e6:	2102      	movs	r1, #2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f002 fb61 	bl	800d0b0 <RCCEx_PLL2_Config>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a9f4:	e00f      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fa:	3328      	adds	r3, #40	; 0x28
 800a9fc:	2102      	movs	r1, #2
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f002 fc08 	bl	800d214 <RCCEx_PLL3_Config>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aa0a:	e004      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa12:	e000      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aa14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10a      	bne.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aa1e:	4ba5      	ldr	r3, [pc, #660]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa2c:	4aa1      	ldr	r2, [pc, #644]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa2e:	430b      	orrs	r3, r1
 800aa30:	6513      	str	r3, [r2, #80]	; 0x50
 800aa32:	e003      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aa3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800aa48:	f04f 0900 	mov.w	r9, #0
 800aa4c:	ea58 0309 	orrs.w	r3, r8, r9
 800aa50:	d047      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800aa52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d82a      	bhi.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800aa5c:	a201      	add	r2, pc, #4	; (adr r2, 800aa64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800aa5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa62:	bf00      	nop
 800aa64:	0800aa79 	.word	0x0800aa79
 800aa68:	0800aa87 	.word	0x0800aa87
 800aa6c:	0800aa9d 	.word	0x0800aa9d
 800aa70:	0800aabb 	.word	0x0800aabb
 800aa74:	0800aabb 	.word	0x0800aabb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa78:	4b8e      	ldr	r3, [pc, #568]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7c:	4a8d      	ldr	r2, [pc, #564]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa84:	e01a      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa8a:	3308      	adds	r3, #8
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f002 fb0e 	bl	800d0b0 <RCCEx_PLL2_Config>
 800aa94:	4603      	mov	r3, r0
 800aa96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa9a:	e00f      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaa0:	3328      	adds	r3, #40	; 0x28
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f002 fbb5 	bl	800d214 <RCCEx_PLL3_Config>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aab0:	e004      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aab8:	e000      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aaba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aabc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10a      	bne.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aac4:	4b7b      	ldr	r3, [pc, #492]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aac8:	f023 0107 	bic.w	r1, r3, #7
 800aacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad2:	4a78      	ldr	r2, [pc, #480]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aad4:	430b      	orrs	r3, r1
 800aad6:	6513      	str	r3, [r2, #80]	; 0x50
 800aad8:	e003      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800aae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800aaee:	f04f 0b00 	mov.w	fp, #0
 800aaf2:	ea5a 030b 	orrs.w	r3, sl, fp
 800aaf6:	d04c      	beq.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800aaf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aafc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aafe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab02:	d030      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ab04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab08:	d829      	bhi.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ab0a:	2bc0      	cmp	r3, #192	; 0xc0
 800ab0c:	d02d      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ab0e:	2bc0      	cmp	r3, #192	; 0xc0
 800ab10:	d825      	bhi.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ab12:	2b80      	cmp	r3, #128	; 0x80
 800ab14:	d018      	beq.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ab16:	2b80      	cmp	r3, #128	; 0x80
 800ab18:	d821      	bhi.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d002      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ab1e:	2b40      	cmp	r3, #64	; 0x40
 800ab20:	d007      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ab22:	e01c      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab24:	4b63      	ldr	r3, [pc, #396]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	4a62      	ldr	r2, [pc, #392]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ab30:	e01c      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab36:	3308      	adds	r3, #8
 800ab38:	2100      	movs	r1, #0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f002 fab8 	bl	800d0b0 <RCCEx_PLL2_Config>
 800ab40:	4603      	mov	r3, r0
 800ab42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ab46:	e011      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab4c:	3328      	adds	r3, #40	; 0x28
 800ab4e:	2100      	movs	r1, #0
 800ab50:	4618      	mov	r0, r3
 800ab52:	f002 fb5f 	bl	800d214 <RCCEx_PLL3_Config>
 800ab56:	4603      	mov	r3, r0
 800ab58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ab5c:	e006      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab64:	e002      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ab66:	bf00      	nop
 800ab68:	e000      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ab6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10a      	bne.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ab74:	4b4f      	ldr	r3, [pc, #316]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab78:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ab7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab82:	4a4c      	ldr	r2, [pc, #304]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab84:	430b      	orrs	r3, r1
 800ab86:	6513      	str	r3, [r2, #80]	; 0x50
 800ab88:	e003      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ab92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ab9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800aba2:	2300      	movs	r3, #0
 800aba4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800aba8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800abac:	460b      	mov	r3, r1
 800abae:	4313      	orrs	r3, r2
 800abb0:	d053      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800abb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abbe:	d035      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800abc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abc4:	d82e      	bhi.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800abc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abca:	d031      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800abcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abd0:	d828      	bhi.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800abd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abd6:	d01a      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800abd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abdc:	d822      	bhi.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d003      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800abe2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abe6:	d007      	beq.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800abe8:	e01c      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abea:	4b32      	ldr	r3, [pc, #200]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abee:	4a31      	ldr	r2, [pc, #196]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abf6:	e01c      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abfc:	3308      	adds	r3, #8
 800abfe:	2100      	movs	r1, #0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f002 fa55 	bl	800d0b0 <RCCEx_PLL2_Config>
 800ac06:	4603      	mov	r3, r0
 800ac08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ac0c:	e011      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac12:	3328      	adds	r3, #40	; 0x28
 800ac14:	2100      	movs	r1, #0
 800ac16:	4618      	mov	r0, r3
 800ac18:	f002 fafc 	bl	800d214 <RCCEx_PLL3_Config>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac22:	e006      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac2a:	e002      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ac2c:	bf00      	nop
 800ac2e:	e000      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ac30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10b      	bne.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ac3a:	4b1e      	ldr	r3, [pc, #120]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac3e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ac42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac4a:	4a1a      	ldr	r2, [pc, #104]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac4c:	430b      	orrs	r3, r1
 800ac4e:	6593      	str	r3, [r2, #88]	; 0x58
 800ac50:	e003      	b.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ac5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ac66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ac70:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ac74:	460b      	mov	r3, r1
 800ac76:	4313      	orrs	r3, r2
 800ac78:	d056      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ac7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac86:	d038      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ac88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac8c:	d831      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac92:	d034      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ac94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac98:	d82b      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac9e:	d01d      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800aca0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aca4:	d825      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d006      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800acaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800acae:	d00a      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800acb0:	e01f      	b.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800acb2:	bf00      	nop
 800acb4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acb8:	4ba2      	ldr	r3, [pc, #648]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	4aa1      	ldr	r2, [pc, #644]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acc4:	e01c      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acca:	3308      	adds	r3, #8
 800accc:	2100      	movs	r1, #0
 800acce:	4618      	mov	r0, r3
 800acd0:	f002 f9ee 	bl	800d0b0 <RCCEx_PLL2_Config>
 800acd4:	4603      	mov	r3, r0
 800acd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800acda:	e011      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace0:	3328      	adds	r3, #40	; 0x28
 800ace2:	2100      	movs	r1, #0
 800ace4:	4618      	mov	r0, r3
 800ace6:	f002 fa95 	bl	800d214 <RCCEx_PLL3_Config>
 800acea:	4603      	mov	r3, r0
 800acec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acf0:	e006      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acf8:	e002      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800acfa:	bf00      	nop
 800acfc:	e000      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800acfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10b      	bne.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ad08:	4b8e      	ldr	r3, [pc, #568]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad0c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ad10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad18:	4a8a      	ldr	r2, [pc, #552]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad1a:	430b      	orrs	r3, r1
 800ad1c:	6593      	str	r3, [r2, #88]	; 0x58
 800ad1e:	e003      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ad28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ad34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ad38:	2300      	movs	r3, #0
 800ad3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ad3e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ad42:	460b      	mov	r3, r1
 800ad44:	4313      	orrs	r3, r2
 800ad46:	d03a      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ad48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad4e:	2b30      	cmp	r3, #48	; 0x30
 800ad50:	d01f      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ad52:	2b30      	cmp	r3, #48	; 0x30
 800ad54:	d819      	bhi.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ad56:	2b20      	cmp	r3, #32
 800ad58:	d00c      	beq.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ad5a:	2b20      	cmp	r3, #32
 800ad5c:	d815      	bhi.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d019      	beq.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ad62:	2b10      	cmp	r3, #16
 800ad64:	d111      	bne.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad66:	4b77      	ldr	r3, [pc, #476]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6a:	4a76      	ldr	r2, [pc, #472]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ad72:	e011      	b.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad78:	3308      	adds	r3, #8
 800ad7a:	2102      	movs	r1, #2
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f002 f997 	bl	800d0b0 <RCCEx_PLL2_Config>
 800ad82:	4603      	mov	r3, r0
 800ad84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ad88:	e006      	b.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad90:	e002      	b.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ad92:	bf00      	nop
 800ad94:	e000      	b.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ad96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ada0:	4b68      	ldr	r3, [pc, #416]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ada2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ada4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ada8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adae:	4a65      	ldr	r2, [pc, #404]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adb0:	430b      	orrs	r3, r1
 800adb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800adb4:	e003      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800adbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800adca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800adce:	2300      	movs	r3, #0
 800add0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800add4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800add8:	460b      	mov	r3, r1
 800adda:	4313      	orrs	r3, r2
 800addc:	d051      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800adde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ade2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ade4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ade8:	d035      	beq.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800adea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adee:	d82e      	bhi.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800adf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adf4:	d031      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800adf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adfa:	d828      	bhi.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800adfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae00:	d01a      	beq.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ae02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae06:	d822      	bhi.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d003      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ae0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae10:	d007      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ae12:	e01c      	b.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae14:	4b4b      	ldr	r3, [pc, #300]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae18:	4a4a      	ldr	r2, [pc, #296]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae20:	e01c      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae26:	3308      	adds	r3, #8
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f002 f940 	bl	800d0b0 <RCCEx_PLL2_Config>
 800ae30:	4603      	mov	r3, r0
 800ae32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae36:	e011      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae3c:	3328      	adds	r3, #40	; 0x28
 800ae3e:	2100      	movs	r1, #0
 800ae40:	4618      	mov	r0, r3
 800ae42:	f002 f9e7 	bl	800d214 <RCCEx_PLL3_Config>
 800ae46:	4603      	mov	r3, r0
 800ae48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae4c:	e006      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae54:	e002      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ae56:	bf00      	nop
 800ae58:	e000      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ae5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ae64:	4b37      	ldr	r3, [pc, #220]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae68:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ae6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae72:	4a34      	ldr	r2, [pc, #208]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae74:	430b      	orrs	r3, r1
 800ae76:	6513      	str	r3, [r2, #80]	; 0x50
 800ae78:	e003      	b.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ae82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ae8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae92:	2300      	movs	r3, #0
 800ae94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae98:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	d056      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800aea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aeac:	d033      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800aeae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aeb2:	d82c      	bhi.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aeb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aeb8:	d02f      	beq.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800aeba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aebe:	d826      	bhi.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aec0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aec4:	d02b      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800aec6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aeca:	d820      	bhi.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aed0:	d012      	beq.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800aed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aed6:	d81a      	bhi.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d022      	beq.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800aedc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aee0:	d115      	bne.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aee6:	3308      	adds	r3, #8
 800aee8:	2101      	movs	r1, #1
 800aeea:	4618      	mov	r0, r3
 800aeec:	f002 f8e0 	bl	800d0b0 <RCCEx_PLL2_Config>
 800aef0:	4603      	mov	r3, r0
 800aef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aef6:	e015      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aefc:	3328      	adds	r3, #40	; 0x28
 800aefe:	2101      	movs	r1, #1
 800af00:	4618      	mov	r0, r3
 800af02:	f002 f987 	bl	800d214 <RCCEx_PLL3_Config>
 800af06:	4603      	mov	r3, r0
 800af08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800af0c:	e00a      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af14:	e006      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af16:	bf00      	nop
 800af18:	e004      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af1a:	bf00      	nop
 800af1c:	e002      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af1e:	bf00      	nop
 800af20:	e000      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10d      	bne.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800af2c:	4b05      	ldr	r3, [pc, #20]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af30:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800af34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af3a:	4a02      	ldr	r2, [pc, #8]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af3c:	430b      	orrs	r3, r1
 800af3e:	6513      	str	r3, [r2, #80]	; 0x50
 800af40:	e006      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800af42:	bf00      	nop
 800af44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800af50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800af5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af60:	2300      	movs	r3, #0
 800af62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af66:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4313      	orrs	r3, r2
 800af6e:	d055      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800af70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af7c:	d033      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800af7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af82:	d82c      	bhi.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af88:	d02f      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800af8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af8e:	d826      	bhi.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af94:	d02b      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x672>
 800af96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af9a:	d820      	bhi.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afa0:	d012      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800afa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afa6:	d81a      	bhi.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x662>
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d022      	beq.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800afac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afb0:	d115      	bne.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb6:	3308      	adds	r3, #8
 800afb8:	2101      	movs	r1, #1
 800afba:	4618      	mov	r0, r3
 800afbc:	f002 f878 	bl	800d0b0 <RCCEx_PLL2_Config>
 800afc0:	4603      	mov	r3, r0
 800afc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800afc6:	e015      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afcc:	3328      	adds	r3, #40	; 0x28
 800afce:	2101      	movs	r1, #1
 800afd0:	4618      	mov	r0, r3
 800afd2:	f002 f91f 	bl	800d214 <RCCEx_PLL3_Config>
 800afd6:	4603      	mov	r3, r0
 800afd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800afdc:	e00a      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afe4:	e006      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800afe6:	bf00      	nop
 800afe8:	e004      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800afea:	bf00      	nop
 800afec:	e002      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800afee:	bf00      	nop
 800aff0:	e000      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800aff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10b      	bne.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800affc:	4ba3      	ldr	r3, [pc, #652]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800affe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b000:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b008:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b00c:	4a9f      	ldr	r2, [pc, #636]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b00e:	430b      	orrs	r3, r1
 800b010:	6593      	str	r3, [r2, #88]	; 0x58
 800b012:	e003      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b014:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b018:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b02c:	2300      	movs	r3, #0
 800b02e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b032:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b036:	460b      	mov	r3, r1
 800b038:	4313      	orrs	r3, r2
 800b03a:	d037      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b046:	d00e      	beq.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b04c:	d816      	bhi.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d018      	beq.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b056:	d111      	bne.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b058:	4b8c      	ldr	r3, [pc, #560]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05c:	4a8b      	ldr	r2, [pc, #556]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b05e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b064:	e00f      	b.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b06a:	3308      	adds	r3, #8
 800b06c:	2101      	movs	r1, #1
 800b06e:	4618      	mov	r0, r3
 800b070:	f002 f81e 	bl	800d0b0 <RCCEx_PLL2_Config>
 800b074:	4603      	mov	r3, r0
 800b076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b07a:	e004      	b.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b082:	e000      	b.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b084:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10a      	bne.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b08e:	4b7f      	ldr	r3, [pc, #508]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b092:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b09a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b09c:	4a7b      	ldr	r2, [pc, #492]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b09e:	430b      	orrs	r3, r1
 800b0a0:	6513      	str	r3, [r2, #80]	; 0x50
 800b0a2:	e003      	b.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b0b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b0c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	d039      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0d2:	2b03      	cmp	r3, #3
 800b0d4:	d81c      	bhi.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b0d6:	a201      	add	r2, pc, #4	; (adr r2, 800b0dc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0dc:	0800b119 	.word	0x0800b119
 800b0e0:	0800b0ed 	.word	0x0800b0ed
 800b0e4:	0800b0fb 	.word	0x0800b0fb
 800b0e8:	0800b119 	.word	0x0800b119
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0ec:	4b67      	ldr	r3, [pc, #412]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f0:	4a66      	ldr	r2, [pc, #408]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b0f8:	e00f      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0fe:	3308      	adds	r3, #8
 800b100:	2102      	movs	r1, #2
 800b102:	4618      	mov	r0, r3
 800b104:	f001 ffd4 	bl	800d0b0 <RCCEx_PLL2_Config>
 800b108:	4603      	mov	r3, r0
 800b10a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b10e:	e004      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b116:	e000      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b11a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10a      	bne.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b122:	4b5a      	ldr	r3, [pc, #360]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b126:	f023 0103 	bic.w	r1, r3, #3
 800b12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b12e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b130:	4a56      	ldr	r2, [pc, #344]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b132:	430b      	orrs	r3, r1
 800b134:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b136:	e003      	b.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b13c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b14c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b150:	2300      	movs	r3, #0
 800b152:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b156:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b15a:	460b      	mov	r3, r1
 800b15c:	4313      	orrs	r3, r2
 800b15e:	f000 809f 	beq.w	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b162:	4b4b      	ldr	r3, [pc, #300]	; (800b290 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a4a      	ldr	r2, [pc, #296]	; (800b290 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b16c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b16e:	f7f8 fc41 	bl	80039f4 <HAL_GetTick>
 800b172:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b176:	e00b      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b178:	f7f8 fc3c 	bl	80039f4 <HAL_GetTick>
 800b17c:	4602      	mov	r2, r0
 800b17e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	2b64      	cmp	r3, #100	; 0x64
 800b186:	d903      	bls.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b188:	2303      	movs	r3, #3
 800b18a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b18e:	e005      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b190:	4b3f      	ldr	r3, [pc, #252]	; (800b290 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d0ed      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b19c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d179      	bne.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b1a4:	4b39      	ldr	r3, [pc, #228]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1b0:	4053      	eors	r3, r2
 800b1b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d015      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b1ba:	4b34      	ldr	r3, [pc, #208]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b1c6:	4b31      	ldr	r3, [pc, #196]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ca:	4a30      	ldr	r2, [pc, #192]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1d0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b1d2:	4b2e      	ldr	r3, [pc, #184]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d6:	4a2d      	ldr	r2, [pc, #180]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1dc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b1de:	4a2b      	ldr	r2, [pc, #172]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b1e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1f2:	d118      	bne.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1f4:	f7f8 fbfe 	bl	80039f4 <HAL_GetTick>
 800b1f8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b1fc:	e00d      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1fe:	f7f8 fbf9 	bl	80039f4 <HAL_GetTick>
 800b202:	4602      	mov	r2, r0
 800b204:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b208:	1ad2      	subs	r2, r2, r3
 800b20a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b20e:	429a      	cmp	r2, r3
 800b210:	d903      	bls.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b212:	2303      	movs	r3, #3
 800b214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b218:	e005      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b21a:	4b1c      	ldr	r3, [pc, #112]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b21e:	f003 0302 	and.w	r3, r3, #2
 800b222:	2b00      	cmp	r3, #0
 800b224:	d0eb      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d129      	bne.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b232:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b23a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b23e:	d10e      	bne.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b240:	4b12      	ldr	r3, [pc, #72]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b24c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b250:	091a      	lsrs	r2, r3, #4
 800b252:	4b10      	ldr	r3, [pc, #64]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b254:	4013      	ands	r3, r2
 800b256:	4a0d      	ldr	r2, [pc, #52]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b258:	430b      	orrs	r3, r1
 800b25a:	6113      	str	r3, [r2, #16]
 800b25c:	e005      	b.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b25e:	4b0b      	ldr	r3, [pc, #44]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	4a0a      	ldr	r2, [pc, #40]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b264:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b268:	6113      	str	r3, [r2, #16]
 800b26a:	4b08      	ldr	r3, [pc, #32]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b26c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b272:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b27a:	4a04      	ldr	r2, [pc, #16]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b27c:	430b      	orrs	r3, r1
 800b27e:	6713      	str	r3, [r2, #112]	; 0x70
 800b280:	e00e      	b.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b286:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b28a:	e009      	b.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b28c:	58024400 	.word	0x58024400
 800b290:	58024800 	.word	0x58024800
 800b294:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b29c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b2a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a8:	f002 0301 	and.w	r3, r2, #1
 800b2ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	f000 8089 	beq.w	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2c8:	2b28      	cmp	r3, #40	; 0x28
 800b2ca:	d86b      	bhi.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b2cc:	a201      	add	r2, pc, #4	; (adr r2, 800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d2:	bf00      	nop
 800b2d4:	0800b3ad 	.word	0x0800b3ad
 800b2d8:	0800b3a5 	.word	0x0800b3a5
 800b2dc:	0800b3a5 	.word	0x0800b3a5
 800b2e0:	0800b3a5 	.word	0x0800b3a5
 800b2e4:	0800b3a5 	.word	0x0800b3a5
 800b2e8:	0800b3a5 	.word	0x0800b3a5
 800b2ec:	0800b3a5 	.word	0x0800b3a5
 800b2f0:	0800b3a5 	.word	0x0800b3a5
 800b2f4:	0800b379 	.word	0x0800b379
 800b2f8:	0800b3a5 	.word	0x0800b3a5
 800b2fc:	0800b3a5 	.word	0x0800b3a5
 800b300:	0800b3a5 	.word	0x0800b3a5
 800b304:	0800b3a5 	.word	0x0800b3a5
 800b308:	0800b3a5 	.word	0x0800b3a5
 800b30c:	0800b3a5 	.word	0x0800b3a5
 800b310:	0800b3a5 	.word	0x0800b3a5
 800b314:	0800b38f 	.word	0x0800b38f
 800b318:	0800b3a5 	.word	0x0800b3a5
 800b31c:	0800b3a5 	.word	0x0800b3a5
 800b320:	0800b3a5 	.word	0x0800b3a5
 800b324:	0800b3a5 	.word	0x0800b3a5
 800b328:	0800b3a5 	.word	0x0800b3a5
 800b32c:	0800b3a5 	.word	0x0800b3a5
 800b330:	0800b3a5 	.word	0x0800b3a5
 800b334:	0800b3ad 	.word	0x0800b3ad
 800b338:	0800b3a5 	.word	0x0800b3a5
 800b33c:	0800b3a5 	.word	0x0800b3a5
 800b340:	0800b3a5 	.word	0x0800b3a5
 800b344:	0800b3a5 	.word	0x0800b3a5
 800b348:	0800b3a5 	.word	0x0800b3a5
 800b34c:	0800b3a5 	.word	0x0800b3a5
 800b350:	0800b3a5 	.word	0x0800b3a5
 800b354:	0800b3ad 	.word	0x0800b3ad
 800b358:	0800b3a5 	.word	0x0800b3a5
 800b35c:	0800b3a5 	.word	0x0800b3a5
 800b360:	0800b3a5 	.word	0x0800b3a5
 800b364:	0800b3a5 	.word	0x0800b3a5
 800b368:	0800b3a5 	.word	0x0800b3a5
 800b36c:	0800b3a5 	.word	0x0800b3a5
 800b370:	0800b3a5 	.word	0x0800b3a5
 800b374:	0800b3ad 	.word	0x0800b3ad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b37c:	3308      	adds	r3, #8
 800b37e:	2101      	movs	r1, #1
 800b380:	4618      	mov	r0, r3
 800b382:	f001 fe95 	bl	800d0b0 <RCCEx_PLL2_Config>
 800b386:	4603      	mov	r3, r0
 800b388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b38c:	e00f      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b392:	3328      	adds	r3, #40	; 0x28
 800b394:	2101      	movs	r1, #1
 800b396:	4618      	mov	r0, r3
 800b398:	f001 ff3c 	bl	800d214 <RCCEx_PLL3_Config>
 800b39c:	4603      	mov	r3, r0
 800b39e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b3a2:	e004      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3aa:	e000      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b3ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10a      	bne.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b3b6:	4bbf      	ldr	r3, [pc, #764]	; (800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ba:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3c4:	4abb      	ldr	r2, [pc, #748]	; (800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3c6:	430b      	orrs	r3, r1
 800b3c8:	6553      	str	r3, [r2, #84]	; 0x54
 800b3ca:	e003      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	f002 0302 	and.w	r3, r2, #2
 800b3e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b3ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	d041      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3fa:	2b05      	cmp	r3, #5
 800b3fc:	d824      	bhi.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b3fe:	a201      	add	r2, pc, #4	; (adr r2, 800b404 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b404:	0800b451 	.word	0x0800b451
 800b408:	0800b41d 	.word	0x0800b41d
 800b40c:	0800b433 	.word	0x0800b433
 800b410:	0800b451 	.word	0x0800b451
 800b414:	0800b451 	.word	0x0800b451
 800b418:	0800b451 	.word	0x0800b451
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b420:	3308      	adds	r3, #8
 800b422:	2101      	movs	r1, #1
 800b424:	4618      	mov	r0, r3
 800b426:	f001 fe43 	bl	800d0b0 <RCCEx_PLL2_Config>
 800b42a:	4603      	mov	r3, r0
 800b42c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b430:	e00f      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b436:	3328      	adds	r3, #40	; 0x28
 800b438:	2101      	movs	r1, #1
 800b43a:	4618      	mov	r0, r3
 800b43c:	f001 feea 	bl	800d214 <RCCEx_PLL3_Config>
 800b440:	4603      	mov	r3, r0
 800b442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b446:	e004      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b44e:	e000      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b450:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10a      	bne.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b45a:	4b96      	ldr	r3, [pc, #600]	; (800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b45e:	f023 0107 	bic.w	r1, r3, #7
 800b462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b468:	4a92      	ldr	r2, [pc, #584]	; (800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b46a:	430b      	orrs	r3, r1
 800b46c:	6553      	str	r3, [r2, #84]	; 0x54
 800b46e:	e003      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b474:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	f002 0304 	and.w	r3, r2, #4
 800b484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b488:	2300      	movs	r3, #0
 800b48a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b48e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b492:	460b      	mov	r3, r1
 800b494:	4313      	orrs	r3, r2
 800b496:	d044      	beq.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b49c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4a0:	2b05      	cmp	r3, #5
 800b4a2:	d825      	bhi.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b4a4:	a201      	add	r2, pc, #4	; (adr r2, 800b4ac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4aa:	bf00      	nop
 800b4ac:	0800b4f9 	.word	0x0800b4f9
 800b4b0:	0800b4c5 	.word	0x0800b4c5
 800b4b4:	0800b4db 	.word	0x0800b4db
 800b4b8:	0800b4f9 	.word	0x0800b4f9
 800b4bc:	0800b4f9 	.word	0x0800b4f9
 800b4c0:	0800b4f9 	.word	0x0800b4f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c8:	3308      	adds	r3, #8
 800b4ca:	2101      	movs	r1, #1
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f001 fdef 	bl	800d0b0 <RCCEx_PLL2_Config>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b4d8:	e00f      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4de:	3328      	adds	r3, #40	; 0x28
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f001 fe96 	bl	800d214 <RCCEx_PLL3_Config>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b4ee:	e004      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4f6:	e000      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b4f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10b      	bne.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b502:	4b6c      	ldr	r3, [pc, #432]	; (800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b506:	f023 0107 	bic.w	r1, r3, #7
 800b50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b50e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b512:	4a68      	ldr	r2, [pc, #416]	; (800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b514:	430b      	orrs	r3, r1
 800b516:	6593      	str	r3, [r2, #88]	; 0x58
 800b518:	e003      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b51a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b51e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	f002 0320 	and.w	r3, r2, #32
 800b52e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b532:	2300      	movs	r3, #0
 800b534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b538:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b53c:	460b      	mov	r3, r1
 800b53e:	4313      	orrs	r3, r2
 800b540:	d055      	beq.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b54a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b54e:	d033      	beq.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b554:	d82c      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b55a:	d02f      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b55c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b560:	d826      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b562:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b566:	d02b      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b568:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b56c:	d820      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b56e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b572:	d012      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b578:	d81a      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d022      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b57e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b582:	d115      	bne.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b588:	3308      	adds	r3, #8
 800b58a:	2100      	movs	r1, #0
 800b58c:	4618      	mov	r0, r3
 800b58e:	f001 fd8f 	bl	800d0b0 <RCCEx_PLL2_Config>
 800b592:	4603      	mov	r3, r0
 800b594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b598:	e015      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b59e:	3328      	adds	r3, #40	; 0x28
 800b5a0:	2102      	movs	r1, #2
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f001 fe36 	bl	800d214 <RCCEx_PLL3_Config>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b5ae:	e00a      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5b6:	e006      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b5b8:	bf00      	nop
 800b5ba:	e004      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b5bc:	bf00      	nop
 800b5be:	e002      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b5c0:	bf00      	nop
 800b5c2:	e000      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b5c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10b      	bne.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b5ce:	4b39      	ldr	r3, [pc, #228]	; (800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5de:	4a35      	ldr	r2, [pc, #212]	; (800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5e0:	430b      	orrs	r3, r1
 800b5e2:	6553      	str	r3, [r2, #84]	; 0x54
 800b5e4:	e003      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b5fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b5fe:	2300      	movs	r3, #0
 800b600:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b604:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b608:	460b      	mov	r3, r1
 800b60a:	4313      	orrs	r3, r2
 800b60c:	d058      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b612:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b616:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b61a:	d033      	beq.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b61c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b620:	d82c      	bhi.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b626:	d02f      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b62c:	d826      	bhi.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b62e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b632:	d02b      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b634:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b638:	d820      	bhi.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b63a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b63e:	d012      	beq.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b644:	d81a      	bhi.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b646:	2b00      	cmp	r3, #0
 800b648:	d022      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b64a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b64e:	d115      	bne.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b654:	3308      	adds	r3, #8
 800b656:	2100      	movs	r1, #0
 800b658:	4618      	mov	r0, r3
 800b65a:	f001 fd29 	bl	800d0b0 <RCCEx_PLL2_Config>
 800b65e:	4603      	mov	r3, r0
 800b660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b664:	e015      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66a:	3328      	adds	r3, #40	; 0x28
 800b66c:	2102      	movs	r1, #2
 800b66e:	4618      	mov	r0, r3
 800b670:	f001 fdd0 	bl	800d214 <RCCEx_PLL3_Config>
 800b674:	4603      	mov	r3, r0
 800b676:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b67a:	e00a      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b682:	e006      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b684:	bf00      	nop
 800b686:	e004      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b688:	bf00      	nop
 800b68a:	e002      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b68c:	bf00      	nop
 800b68e:	e000      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b690:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b696:	2b00      	cmp	r3, #0
 800b698:	d10e      	bne.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b69a:	4b06      	ldr	r3, [pc, #24]	; (800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b69c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b69e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6aa:	4a02      	ldr	r2, [pc, #8]	; (800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6ac:	430b      	orrs	r3, r1
 800b6ae:	6593      	str	r3, [r2, #88]	; 0x58
 800b6b0:	e006      	b.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b6b2:	bf00      	nop
 800b6b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b6cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b6d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	d055      	beq.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b6e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b6ec:	d033      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b6ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b6f2:	d82c      	bhi.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b6f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6f8:	d02f      	beq.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b6fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6fe:	d826      	bhi.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b700:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b704:	d02b      	beq.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b706:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b70a:	d820      	bhi.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b70c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b710:	d012      	beq.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b716:	d81a      	bhi.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d022      	beq.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b71c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b720:	d115      	bne.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b726:	3308      	adds	r3, #8
 800b728:	2100      	movs	r1, #0
 800b72a:	4618      	mov	r0, r3
 800b72c:	f001 fcc0 	bl	800d0b0 <RCCEx_PLL2_Config>
 800b730:	4603      	mov	r3, r0
 800b732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b736:	e015      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b73c:	3328      	adds	r3, #40	; 0x28
 800b73e:	2102      	movs	r1, #2
 800b740:	4618      	mov	r0, r3
 800b742:	f001 fd67 	bl	800d214 <RCCEx_PLL3_Config>
 800b746:	4603      	mov	r3, r0
 800b748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b74c:	e00a      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b754:	e006      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b756:	bf00      	nop
 800b758:	e004      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b75a:	bf00      	nop
 800b75c:	e002      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b75e:	bf00      	nop
 800b760:	e000      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b762:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10b      	bne.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b76c:	4ba1      	ldr	r3, [pc, #644]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b770:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b778:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b77c:	4a9d      	ldr	r2, [pc, #628]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b77e:	430b      	orrs	r3, r1
 800b780:	6593      	str	r3, [r2, #88]	; 0x58
 800b782:	e003      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b788:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b78c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	f002 0308 	and.w	r3, r2, #8
 800b798:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b79c:	2300      	movs	r3, #0
 800b79e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b7a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	d01e      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b7ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7b8:	d10c      	bne.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b7ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7be:	3328      	adds	r3, #40	; 0x28
 800b7c0:	2102      	movs	r1, #2
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f001 fd26 	bl	800d214 <RCCEx_PLL3_Config>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d002      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b7d4:	4b87      	ldr	r3, [pc, #540]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7e4:	4a83      	ldr	r2, [pc, #524]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7e6:	430b      	orrs	r3, r1
 800b7e8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f2:	f002 0310 	and.w	r3, r2, #16
 800b7f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b800:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b804:	460b      	mov	r3, r1
 800b806:	4313      	orrs	r3, r2
 800b808:	d01e      	beq.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b80e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b816:	d10c      	bne.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b81c:	3328      	adds	r3, #40	; 0x28
 800b81e:	2102      	movs	r1, #2
 800b820:	4618      	mov	r0, r3
 800b822:	f001 fcf7 	bl	800d214 <RCCEx_PLL3_Config>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b832:	4b70      	ldr	r3, [pc, #448]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b836:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b83e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b842:	4a6c      	ldr	r2, [pc, #432]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b844:	430b      	orrs	r3, r1
 800b846:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b850:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b854:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b858:	2300      	movs	r3, #0
 800b85a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b85e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b862:	460b      	mov	r3, r1
 800b864:	4313      	orrs	r3, r2
 800b866:	d03e      	beq.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b874:	d022      	beq.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b87a:	d81b      	bhi.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d003      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b884:	d00b      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b886:	e015      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88c:	3308      	adds	r3, #8
 800b88e:	2100      	movs	r1, #0
 800b890:	4618      	mov	r0, r3
 800b892:	f001 fc0d 	bl	800d0b0 <RCCEx_PLL2_Config>
 800b896:	4603      	mov	r3, r0
 800b898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b89c:	e00f      	b.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a2:	3328      	adds	r3, #40	; 0x28
 800b8a4:	2102      	movs	r1, #2
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f001 fcb4 	bl	800d214 <RCCEx_PLL3_Config>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b8b2:	e004      	b.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8ba:	e000      	b.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b8bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10b      	bne.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b8c6:	4b4b      	ldr	r3, [pc, #300]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b8d6:	4a47      	ldr	r2, [pc, #284]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8d8:	430b      	orrs	r3, r1
 800b8da:	6593      	str	r3, [r2, #88]	; 0x58
 800b8dc:	e003      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b8f2:	67bb      	str	r3, [r7, #120]	; 0x78
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b8f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4313      	orrs	r3, r2
 800b900:	d03b      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b90a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b90e:	d01f      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b910:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b914:	d818      	bhi.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b91a:	d003      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b91c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b920:	d007      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b922:	e011      	b.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b924:	4b33      	ldr	r3, [pc, #204]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b928:	4a32      	ldr	r2, [pc, #200]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b92a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b92e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b930:	e00f      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b936:	3328      	adds	r3, #40	; 0x28
 800b938:	2101      	movs	r1, #1
 800b93a:	4618      	mov	r0, r3
 800b93c:	f001 fc6a 	bl	800d214 <RCCEx_PLL3_Config>
 800b940:	4603      	mov	r3, r0
 800b942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b946:	e004      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b94e:	e000      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b950:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10b      	bne.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b95a:	4b26      	ldr	r3, [pc, #152]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b95e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b96a:	4a22      	ldr	r2, [pc, #136]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b96c:	430b      	orrs	r3, r1
 800b96e:	6553      	str	r3, [r2, #84]	; 0x54
 800b970:	e003      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b976:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b986:	673b      	str	r3, [r7, #112]	; 0x70
 800b988:	2300      	movs	r3, #0
 800b98a:	677b      	str	r3, [r7, #116]	; 0x74
 800b98c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b990:	460b      	mov	r3, r1
 800b992:	4313      	orrs	r3, r2
 800b994:	d034      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d003      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b9a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9a4:	d007      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b9a6:	e011      	b.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9a8:	4b12      	ldr	r3, [pc, #72]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ac:	4a11      	ldr	r2, [pc, #68]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b9b4:	e00e      	b.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ba:	3308      	adds	r3, #8
 800b9bc:	2102      	movs	r1, #2
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f001 fb76 	bl	800d0b0 <RCCEx_PLL2_Config>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b9ca:	e003      	b.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10d      	bne.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b9dc:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ea:	4a02      	ldr	r2, [pc, #8]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9ec:	430b      	orrs	r3, r1
 800b9ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9f0:	e006      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b9f2:	bf00      	nop
 800b9f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ba00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba08:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ba0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba0e:	2300      	movs	r3, #0
 800ba10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ba16:	460b      	mov	r3, r1
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	d00c      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba20:	3328      	adds	r3, #40	; 0x28
 800ba22:	2102      	movs	r1, #2
 800ba24:	4618      	mov	r0, r3
 800ba26:	f001 fbf5 	bl	800d214 <RCCEx_PLL3_Config>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d002      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ba36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ba42:	663b      	str	r3, [r7, #96]	; 0x60
 800ba44:	2300      	movs	r3, #0
 800ba46:	667b      	str	r3, [r7, #100]	; 0x64
 800ba48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	d038      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ba52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba5e:	d018      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ba60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba64:	d811      	bhi.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ba66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba6a:	d014      	beq.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ba6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba70:	d80b      	bhi.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d011      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ba76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba7a:	d106      	bne.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba7c:	4bc3      	ldr	r3, [pc, #780]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba80:	4ac2      	ldr	r2, [pc, #776]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ba88:	e008      	b.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba90:	e004      	b.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ba92:	bf00      	nop
 800ba94:	e002      	b.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ba96:	bf00      	nop
 800ba98:	e000      	b.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ba9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10b      	bne.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800baa4:	4bb9      	ldr	r3, [pc, #740]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800baa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baa8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800baac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bab4:	4ab5      	ldr	r2, [pc, #724]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bab6:	430b      	orrs	r3, r1
 800bab8:	6553      	str	r3, [r2, #84]	; 0x54
 800baba:	e003      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800babc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bad0:	65bb      	str	r3, [r7, #88]	; 0x58
 800bad2:	2300      	movs	r3, #0
 800bad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bad6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bada:	460b      	mov	r3, r1
 800badc:	4313      	orrs	r3, r2
 800bade:	d009      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bae0:	4baa      	ldr	r3, [pc, #680]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baee:	4aa7      	ldr	r2, [pc, #668]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800baf0:	430b      	orrs	r3, r1
 800baf2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800baf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bb00:	653b      	str	r3, [r7, #80]	; 0x50
 800bb02:	2300      	movs	r3, #0
 800bb04:	657b      	str	r3, [r7, #84]	; 0x54
 800bb06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	d00a      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bb10:	4b9e      	ldr	r3, [pc, #632]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bb18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bb20:	4a9a      	ldr	r2, [pc, #616]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb22:	430b      	orrs	r3, r1
 800bb24:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bb32:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb34:	2300      	movs	r3, #0
 800bb36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb38:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	d009      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bb42:	4b92      	ldr	r3, [pc, #584]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb46:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bb4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb50:	4a8e      	ldr	r2, [pc, #568]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb52:	430b      	orrs	r3, r1
 800bb54:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bb56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bb62:	643b      	str	r3, [r7, #64]	; 0x40
 800bb64:	2300      	movs	r3, #0
 800bb66:	647b      	str	r3, [r7, #68]	; 0x44
 800bb68:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	d00e      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb72:	4b86      	ldr	r3, [pc, #536]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	4a85      	ldr	r2, [pc, #532]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb7c:	6113      	str	r3, [r2, #16]
 800bb7e:	4b83      	ldr	r3, [pc, #524]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb80:	6919      	ldr	r1, [r3, #16]
 800bb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bb8a:	4a80      	ldr	r2, [pc, #512]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb8c:	430b      	orrs	r3, r1
 800bb8e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bb90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb98:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bb9c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb9e:	2300      	movs	r3, #0
 800bba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bba2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bba6:	460b      	mov	r3, r1
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	d009      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bbac:	4b77      	ldr	r3, [pc, #476]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbb0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bbb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbba:	4a74      	ldr	r2, [pc, #464]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbbc:	430b      	orrs	r3, r1
 800bbbe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bbc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bbcc:	633b      	str	r3, [r7, #48]	; 0x30
 800bbce:	2300      	movs	r3, #0
 800bbd0:	637b      	str	r3, [r7, #52]	; 0x34
 800bbd2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	d00a      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bbdc:	4b6b      	ldr	r3, [pc, #428]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbec:	4a67      	ldr	r2, [pc, #412]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbee:	430b      	orrs	r3, r1
 800bbf0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bbf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	62b9      	str	r1, [r7, #40]	; 0x28
 800bbfe:	f003 0301 	and.w	r3, r3, #1
 800bc02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bc08:	460b      	mov	r3, r1
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	d011      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc12:	3308      	adds	r3, #8
 800bc14:	2100      	movs	r1, #0
 800bc16:	4618      	mov	r0, r3
 800bc18:	f001 fa4a 	bl	800d0b0 <RCCEx_PLL2_Config>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bc22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	6239      	str	r1, [r7, #32]
 800bc3e:	f003 0302 	and.w	r3, r3, #2
 800bc42:	627b      	str	r3, [r7, #36]	; 0x24
 800bc44:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	d011      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc52:	3308      	adds	r3, #8
 800bc54:	2101      	movs	r1, #1
 800bc56:	4618      	mov	r0, r3
 800bc58:	f001 fa2a 	bl	800d0b0 <RCCEx_PLL2_Config>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bc62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d003      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	61b9      	str	r1, [r7, #24]
 800bc7e:	f003 0304 	and.w	r3, r3, #4
 800bc82:	61fb      	str	r3, [r7, #28]
 800bc84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	d011      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc92:	3308      	adds	r3, #8
 800bc94:	2102      	movs	r1, #2
 800bc96:	4618      	mov	r0, r3
 800bc98:	f001 fa0a 	bl	800d0b0 <RCCEx_PLL2_Config>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bca2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d003      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bcb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	2100      	movs	r1, #0
 800bcbc:	6139      	str	r1, [r7, #16]
 800bcbe:	f003 0308 	and.w	r3, r3, #8
 800bcc2:	617b      	str	r3, [r7, #20]
 800bcc4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	4313      	orrs	r3, r2
 800bccc:	d011      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcd2:	3328      	adds	r3, #40	; 0x28
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f001 fa9c 	bl	800d214 <RCCEx_PLL3_Config>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d003      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bcf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	f003 0310 	and.w	r3, r3, #16
 800bd02:	60fb      	str	r3, [r7, #12]
 800bd04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	d011      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd12:	3328      	adds	r3, #40	; 0x28
 800bd14:	2101      	movs	r1, #1
 800bd16:	4618      	mov	r0, r3
 800bd18:	f001 fa7c 	bl	800d214 <RCCEx_PLL3_Config>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d003      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	6039      	str	r1, [r7, #0]
 800bd3e:	f003 0320 	and.w	r3, r3, #32
 800bd42:	607b      	str	r3, [r7, #4]
 800bd44:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	d011      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd52:	3328      	adds	r3, #40	; 0x28
 800bd54:	2102      	movs	r1, #2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f001 fa5c 	bl	800d214 <RCCEx_PLL3_Config>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d003      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bd72:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	e000      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800bd86:	46bd      	mov	sp, r7
 800bd88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd8c:	58024400 	.word	0x58024400

0800bd90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b090      	sub	sp, #64	; 0x40
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bd9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd9e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bda2:	430b      	orrs	r3, r1
 800bda4:	f040 8094 	bne.w	800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bda8:	4b9e      	ldr	r3, [pc, #632]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdac:	f003 0307 	and.w	r3, r3, #7
 800bdb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	f200 8087 	bhi.w	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bdba:	a201      	add	r2, pc, #4	; (adr r2, 800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc0:	0800bdd5 	.word	0x0800bdd5
 800bdc4:	0800bdfd 	.word	0x0800bdfd
 800bdc8:	0800be25 	.word	0x0800be25
 800bdcc:	0800bec1 	.word	0x0800bec1
 800bdd0:	0800be4d 	.word	0x0800be4d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bdd4:	4b93      	ldr	r3, [pc, #588]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bddc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bde0:	d108      	bne.n	800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bde2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bde6:	4618      	mov	r0, r3
 800bde8:	f001 f810 	bl	800ce0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdf0:	f000 bd45 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdf8:	f000 bd41 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdfc:	4b89      	ldr	r3, [pc, #548]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be08:	d108      	bne.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be0a:	f107 0318 	add.w	r3, r7, #24
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 fd54 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be18:	f000 bd31 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be20:	f000 bd2d 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be24:	4b7f      	ldr	r3, [pc, #508]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be30:	d108      	bne.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be32:	f107 030c 	add.w	r3, r7, #12
 800be36:	4618      	mov	r0, r3
 800be38:	f000 fe94 	bl	800cb64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be40:	f000 bd1d 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be48:	f000 bd19 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be4c:	4b75      	ldr	r3, [pc, #468]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be54:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be56:	4b73      	ldr	r3, [pc, #460]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 0304 	and.w	r3, r3, #4
 800be5e:	2b04      	cmp	r3, #4
 800be60:	d10c      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800be62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be64:	2b00      	cmp	r3, #0
 800be66:	d109      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be68:	4b6e      	ldr	r3, [pc, #440]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	08db      	lsrs	r3, r3, #3
 800be6e:	f003 0303 	and.w	r3, r3, #3
 800be72:	4a6d      	ldr	r2, [pc, #436]	; (800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be74:	fa22 f303 	lsr.w	r3, r2, r3
 800be78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be7a:	e01f      	b.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be7c:	4b69      	ldr	r3, [pc, #420]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be88:	d106      	bne.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800be8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be90:	d102      	bne.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be92:	4b66      	ldr	r3, [pc, #408]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800be94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be96:	e011      	b.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be98:	4b62      	ldr	r3, [pc, #392]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bea4:	d106      	bne.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beac:	d102      	bne.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800beae:	4b60      	ldr	r3, [pc, #384]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800beb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beb2:	e003      	b.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800beb8:	f000 bce1 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bebc:	f000 bcdf 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bec0:	4b5c      	ldr	r3, [pc, #368]	; (800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bec4:	f000 bcdb 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bec8:	2300      	movs	r3, #0
 800beca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800becc:	f000 bcd7 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bed4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bed8:	430b      	orrs	r3, r1
 800beda:	f040 80ad 	bne.w	800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bede:	4b51      	ldr	r3, [pc, #324]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bee2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bee6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beee:	d056      	beq.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bef6:	f200 8090 	bhi.w	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	2bc0      	cmp	r3, #192	; 0xc0
 800befe:	f000 8088 	beq.w	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	2bc0      	cmp	r3, #192	; 0xc0
 800bf06:	f200 8088 	bhi.w	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	2b80      	cmp	r3, #128	; 0x80
 800bf0e:	d032      	beq.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	2b80      	cmp	r3, #128	; 0x80
 800bf14:	f200 8081 	bhi.w	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	2b40      	cmp	r3, #64	; 0x40
 800bf22:	d014      	beq.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bf24:	e079      	b.n	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf26:	4b3f      	ldr	r3, [pc, #252]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf32:	d108      	bne.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 ff67 	bl	800ce0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf42:	f000 bc9c 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf4a:	f000 bc98 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf4e:	4b35      	ldr	r3, [pc, #212]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf5a:	d108      	bne.n	800bf6e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf5c:	f107 0318 	add.w	r3, r7, #24
 800bf60:	4618      	mov	r0, r3
 800bf62:	f000 fcab 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf6a:	f000 bc88 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf72:	f000 bc84 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf76:	4b2b      	ldr	r3, [pc, #172]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf82:	d108      	bne.n	800bf96 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf84:	f107 030c 	add.w	r3, r7, #12
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f000 fdeb 	bl	800cb64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf92:	f000 bc74 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf9a:	f000 bc70 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf9e:	4b21      	ldr	r3, [pc, #132]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfa2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfa6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfa8:	4b1e      	ldr	r3, [pc, #120]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f003 0304 	and.w	r3, r3, #4
 800bfb0:	2b04      	cmp	r3, #4
 800bfb2:	d10c      	bne.n	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d109      	bne.n	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfba:	4b1a      	ldr	r3, [pc, #104]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	08db      	lsrs	r3, r3, #3
 800bfc0:	f003 0303 	and.w	r3, r3, #3
 800bfc4:	4a18      	ldr	r2, [pc, #96]	; (800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bfc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfcc:	e01f      	b.n	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfce:	4b15      	ldr	r3, [pc, #84]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfda:	d106      	bne.n	800bfea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bfdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfe2:	d102      	bne.n	800bfea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bfe4:	4b11      	ldr	r3, [pc, #68]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe8:	e011      	b.n	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfea:	4b0e      	ldr	r3, [pc, #56]	; (800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bff6:	d106      	bne.n	800c006 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bffe:	d102      	bne.n	800c006 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c000:	4b0b      	ldr	r3, [pc, #44]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c002:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c004:	e003      	b.n	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c00a:	f000 bc38 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c00e:	f000 bc36 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c012:	4b08      	ldr	r3, [pc, #32]	; (800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c014:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c016:	f000 bc32 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c01a:	2300      	movs	r3, #0
 800c01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c01e:	f000 bc2e 	b.w	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c022:	bf00      	nop
 800c024:	58024400 	.word	0x58024400
 800c028:	03d09000 	.word	0x03d09000
 800c02c:	003d0900 	.word	0x003d0900
 800c030:	017d7840 	.word	0x017d7840
 800c034:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c03c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c040:	430b      	orrs	r3, r1
 800c042:	f040 809c 	bne.w	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c046:	4b9e      	ldr	r3, [pc, #632]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c04a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c04e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c056:	d054      	beq.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c05e:	f200 808b 	bhi.w	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c068:	f000 8083 	beq.w	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c072:	f200 8081 	bhi.w	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c07c:	d02f      	beq.n	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c084:	d878      	bhi.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d004      	beq.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c092:	d012      	beq.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c094:	e070      	b.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c096:	4b8a      	ldr	r3, [pc, #552]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c09e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0a2:	d107      	bne.n	800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 feaf 	bl	800ce0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0b2:	e3e4      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b8:	e3e1      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0ba:	4b81      	ldr	r3, [pc, #516]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0c6:	d107      	bne.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0c8:	f107 0318 	add.w	r3, r7, #24
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 fbf5 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0d6:	e3d2      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0dc:	e3cf      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0de:	4b78      	ldr	r3, [pc, #480]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0ea:	d107      	bne.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0ec:	f107 030c 	add.w	r3, r7, #12
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f000 fd37 	bl	800cb64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0fa:	e3c0      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c100:	e3bd      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c102:	4b6f      	ldr	r3, [pc, #444]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c10a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c10c:	4b6c      	ldr	r3, [pc, #432]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 0304 	and.w	r3, r3, #4
 800c114:	2b04      	cmp	r3, #4
 800c116:	d10c      	bne.n	800c132 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d109      	bne.n	800c132 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c11e:	4b68      	ldr	r3, [pc, #416]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	08db      	lsrs	r3, r3, #3
 800c124:	f003 0303 	and.w	r3, r3, #3
 800c128:	4a66      	ldr	r2, [pc, #408]	; (800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c12a:	fa22 f303 	lsr.w	r3, r2, r3
 800c12e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c130:	e01e      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c132:	4b63      	ldr	r3, [pc, #396]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c13a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c13e:	d106      	bne.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c146:	d102      	bne.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c148:	4b5f      	ldr	r3, [pc, #380]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c14c:	e010      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c14e:	4b5c      	ldr	r3, [pc, #368]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c15a:	d106      	bne.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c15e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c162:	d102      	bne.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c164:	4b59      	ldr	r3, [pc, #356]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c168:	e002      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c16e:	e386      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c170:	e385      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c172:	4b57      	ldr	r3, [pc, #348]	; (800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c176:	e382      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c178:	2300      	movs	r3, #0
 800c17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c17c:	e37f      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c17e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c182:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c186:	430b      	orrs	r3, r1
 800c188:	f040 80a7 	bne.w	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c18c:	4b4c      	ldr	r3, [pc, #304]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c18e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c190:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c194:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c19c:	d055      	beq.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1a4:	f200 8096 	bhi.w	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c1ae:	f000 8084 	beq.w	800c2ba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c1b8:	f200 808c 	bhi.w	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1c2:	d030      	beq.n	800c226 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1ca:	f200 8083 	bhi.w	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d004      	beq.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c1da:	d012      	beq.n	800c202 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c1dc:	e07a      	b.n	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1de:	4b38      	ldr	r3, [pc, #224]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1ea:	d107      	bne.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f000 fe0b 	bl	800ce0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1fa:	e340      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c200:	e33d      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c202:	4b2f      	ldr	r3, [pc, #188]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c20a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c20e:	d107      	bne.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c210:	f107 0318 	add.w	r3, r7, #24
 800c214:	4618      	mov	r0, r3
 800c216:	f000 fb51 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c21e:	e32e      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c220:	2300      	movs	r3, #0
 800c222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c224:	e32b      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c226:	4b26      	ldr	r3, [pc, #152]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c22e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c232:	d107      	bne.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c234:	f107 030c 	add.w	r3, r7, #12
 800c238:	4618      	mov	r0, r3
 800c23a:	f000 fc93 	bl	800cb64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c242:	e31c      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c244:	2300      	movs	r3, #0
 800c246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c248:	e319      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c24a:	4b1d      	ldr	r3, [pc, #116]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c24c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c24e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c252:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c254:	4b1a      	ldr	r3, [pc, #104]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f003 0304 	and.w	r3, r3, #4
 800c25c:	2b04      	cmp	r3, #4
 800c25e:	d10c      	bne.n	800c27a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c262:	2b00      	cmp	r3, #0
 800c264:	d109      	bne.n	800c27a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c266:	4b16      	ldr	r3, [pc, #88]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	08db      	lsrs	r3, r3, #3
 800c26c:	f003 0303 	and.w	r3, r3, #3
 800c270:	4a14      	ldr	r2, [pc, #80]	; (800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c272:	fa22 f303 	lsr.w	r3, r2, r3
 800c276:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c278:	e01e      	b.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c27a:	4b11      	ldr	r3, [pc, #68]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c286:	d106      	bne.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c28a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c28e:	d102      	bne.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c290:	4b0d      	ldr	r3, [pc, #52]	; (800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c292:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c294:	e010      	b.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c296:	4b0a      	ldr	r3, [pc, #40]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c29e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2a2:	d106      	bne.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2aa:	d102      	bne.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2ac:	4b07      	ldr	r3, [pc, #28]	; (800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2b0:	e002      	b.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2b6:	e2e2      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2b8:	e2e1      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c2ba:	4b05      	ldr	r3, [pc, #20]	; (800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2be:	e2de      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2c0:	58024400 	.word	0x58024400
 800c2c4:	03d09000 	.word	0x03d09000
 800c2c8:	003d0900 	.word	0x003d0900
 800c2cc:	017d7840 	.word	0x017d7840
 800c2d0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d8:	e2d1      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2de:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c2e2:	430b      	orrs	r3, r1
 800c2e4:	f040 809c 	bne.w	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c2e8:	4b93      	ldr	r3, [pc, #588]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2ec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c2f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2f8:	d054      	beq.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c300:	f200 808b 	bhi.w	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c306:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c30a:	f000 8083 	beq.w	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c310:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c314:	f200 8081 	bhi.w	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c31e:	d02f      	beq.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c326:	d878      	bhi.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d004      	beq.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c334:	d012      	beq.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c336:	e070      	b.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c338:	4b7f      	ldr	r3, [pc, #508]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c344:	d107      	bne.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 fd5e 	bl	800ce0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c354:	e293      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c35a:	e290      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c35c:	4b76      	ldr	r3, [pc, #472]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c368:	d107      	bne.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c36a:	f107 0318 	add.w	r3, r7, #24
 800c36e:	4618      	mov	r0, r3
 800c370:	f000 faa4 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c378:	e281      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c37e:	e27e      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c380:	4b6d      	ldr	r3, [pc, #436]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c38c:	d107      	bne.n	800c39e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c38e:	f107 030c 	add.w	r3, r7, #12
 800c392:	4618      	mov	r0, r3
 800c394:	f000 fbe6 	bl	800cb64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c39c:	e26f      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a2:	e26c      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3a4:	4b64      	ldr	r3, [pc, #400]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3ac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3ae:	4b62      	ldr	r3, [pc, #392]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f003 0304 	and.w	r3, r3, #4
 800c3b6:	2b04      	cmp	r3, #4
 800c3b8:	d10c      	bne.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d109      	bne.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3c0:	4b5d      	ldr	r3, [pc, #372]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	08db      	lsrs	r3, r3, #3
 800c3c6:	f003 0303 	and.w	r3, r3, #3
 800c3ca:	4a5c      	ldr	r2, [pc, #368]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c3cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3d2:	e01e      	b.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3d4:	4b58      	ldr	r3, [pc, #352]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3e0:	d106      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3e8:	d102      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3ea:	4b55      	ldr	r3, [pc, #340]	; (800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ee:	e010      	b.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3f0:	4b51      	ldr	r3, [pc, #324]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3fc:	d106      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c404:	d102      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c406:	4b4f      	ldr	r3, [pc, #316]	; (800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c40a:	e002      	b.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c410:	e235      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c412:	e234      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c414:	4b4c      	ldr	r3, [pc, #304]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c418:	e231      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41e:	e22e      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c420:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c424:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c428:	430b      	orrs	r3, r1
 800c42a:	f040 808f 	bne.w	800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c42e:	4b42      	ldr	r3, [pc, #264]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c432:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c436:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c43e:	d06b      	beq.n	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c446:	d874      	bhi.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c44e:	d056      	beq.n	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c452:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c456:	d86c      	bhi.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c45e:	d03b      	beq.n	800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c462:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c466:	d864      	bhi.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c46e:	d021      	beq.n	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c476:	d85c      	bhi.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d004      	beq.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c484:	d004      	beq.n	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c486:	e054      	b.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c488:	f7fe fa0a 	bl	800a8a0 <HAL_RCC_GetPCLK1Freq>
 800c48c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c48e:	e1f6      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c490:	4b29      	ldr	r3, [pc, #164]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c49c:	d107      	bne.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c49e:	f107 0318 	add.w	r3, r7, #24
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f000 fa0a 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4ac:	e1e7      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b2:	e1e4      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4b4:	4b20      	ldr	r3, [pc, #128]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4c0:	d107      	bne.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4c2:	f107 030c 	add.w	r3, r7, #12
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 fb4c 	bl	800cb64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d0:	e1d5      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d6:	e1d2      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c4d8:	4b17      	ldr	r3, [pc, #92]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f003 0304 	and.w	r3, r3, #4
 800c4e0:	2b04      	cmp	r3, #4
 800c4e2:	d109      	bne.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4e4:	4b14      	ldr	r3, [pc, #80]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	08db      	lsrs	r3, r3, #3
 800c4ea:	f003 0303 	and.w	r3, r3, #3
 800c4ee:	4a13      	ldr	r2, [pc, #76]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4f6:	e1c2      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fc:	e1bf      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c4fe:	4b0e      	ldr	r3, [pc, #56]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c50a:	d102      	bne.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c50c:	4b0c      	ldr	r3, [pc, #48]	; (800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c510:	e1b5      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c512:	2300      	movs	r3, #0
 800c514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c516:	e1b2      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c518:	4b07      	ldr	r3, [pc, #28]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c524:	d102      	bne.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c526:	4b07      	ldr	r3, [pc, #28]	; (800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c528:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c52a:	e1a8      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c530:	e1a5      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c532:	2300      	movs	r3, #0
 800c534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c536:	e1a2      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c538:	58024400 	.word	0x58024400
 800c53c:	03d09000 	.word	0x03d09000
 800c540:	003d0900 	.word	0x003d0900
 800c544:	017d7840 	.word	0x017d7840
 800c548:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c54c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c550:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c554:	430b      	orrs	r3, r1
 800c556:	d173      	bne.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c558:	4b9c      	ldr	r3, [pc, #624]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c55a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c55c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c560:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c568:	d02f      	beq.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c570:	d863      	bhi.n	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c574:	2b00      	cmp	r3, #0
 800c576:	d004      	beq.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c57e:	d012      	beq.n	800c5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c580:	e05b      	b.n	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c582:	4b92      	ldr	r3, [pc, #584]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c58a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c58e:	d107      	bne.n	800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c590:	f107 0318 	add.w	r3, r7, #24
 800c594:	4618      	mov	r0, r3
 800c596:	f000 f991 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c59e:	e16e      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5a4:	e16b      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5a6:	4b89      	ldr	r3, [pc, #548]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5b2:	d107      	bne.n	800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5b4:	f107 030c 	add.w	r3, r7, #12
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f000 fad3 	bl	800cb64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5c2:	e15c      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c8:	e159      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5ca:	4b80      	ldr	r3, [pc, #512]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5d4:	4b7d      	ldr	r3, [pc, #500]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f003 0304 	and.w	r3, r3, #4
 800c5dc:	2b04      	cmp	r3, #4
 800c5de:	d10c      	bne.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d109      	bne.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5e6:	4b79      	ldr	r3, [pc, #484]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	08db      	lsrs	r3, r3, #3
 800c5ec:	f003 0303 	and.w	r3, r3, #3
 800c5f0:	4a77      	ldr	r2, [pc, #476]	; (800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c5f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f8:	e01e      	b.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5fa:	4b74      	ldr	r3, [pc, #464]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c606:	d106      	bne.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c60e:	d102      	bne.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c610:	4b70      	ldr	r3, [pc, #448]	; (800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c612:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c614:	e010      	b.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c616:	4b6d      	ldr	r3, [pc, #436]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c61e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c622:	d106      	bne.n	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c62a:	d102      	bne.n	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c62c:	4b6a      	ldr	r3, [pc, #424]	; (800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c62e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c630:	e002      	b.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c636:	e122      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c638:	e121      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c63e:	e11e      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c640:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c644:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c648:	430b      	orrs	r3, r1
 800c64a:	d133      	bne.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c64c:	4b5f      	ldr	r3, [pc, #380]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c64e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c654:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d004      	beq.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c662:	d012      	beq.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c664:	e023      	b.n	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c666:	4b59      	ldr	r3, [pc, #356]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c66e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c672:	d107      	bne.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 fbc7 	bl	800ce0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c682:	e0fc      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c688:	e0f9      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c68a:	4b50      	ldr	r3, [pc, #320]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c696:	d107      	bne.n	800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c698:	f107 0318 	add.w	r3, r7, #24
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 f90d 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6a6:	e0ea      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ac:	e0e7      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b2:	e0e4      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c6b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6b8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c6bc:	430b      	orrs	r3, r1
 800c6be:	f040 808d 	bne.w	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c6c2:	4b42      	ldr	r3, [pc, #264]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c6ca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6d2:	d06b      	beq.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6da:	d874      	bhi.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6e2:	d056      	beq.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6ea:	d86c      	bhi.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6f2:	d03b      	beq.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6fa:	d864      	bhi.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c702:	d021      	beq.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c70a:	d85c      	bhi.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d004      	beq.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c718:	d004      	beq.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c71a:	e054      	b.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c71c:	f000 f8b8 	bl	800c890 <HAL_RCCEx_GetD3PCLK1Freq>
 800c720:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c722:	e0ac      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c724:	4b29      	ldr	r3, [pc, #164]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c72c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c730:	d107      	bne.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c732:	f107 0318 	add.w	r3, r7, #24
 800c736:	4618      	mov	r0, r3
 800c738:	f000 f8c0 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c740:	e09d      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c746:	e09a      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c748:	4b20      	ldr	r3, [pc, #128]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c754:	d107      	bne.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c756:	f107 030c 	add.w	r3, r7, #12
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 fa02 	bl	800cb64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c764:	e08b      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c766:	2300      	movs	r3, #0
 800c768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c76a:	e088      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c76c:	4b17      	ldr	r3, [pc, #92]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f003 0304 	and.w	r3, r3, #4
 800c774:	2b04      	cmp	r3, #4
 800c776:	d109      	bne.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c778:	4b14      	ldr	r3, [pc, #80]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	08db      	lsrs	r3, r3, #3
 800c77e:	f003 0303 	and.w	r3, r3, #3
 800c782:	4a13      	ldr	r2, [pc, #76]	; (800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c784:	fa22 f303 	lsr.w	r3, r2, r3
 800c788:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c78a:	e078      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c78c:	2300      	movs	r3, #0
 800c78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c790:	e075      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c792:	4b0e      	ldr	r3, [pc, #56]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c79a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c79e:	d102      	bne.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c7a0:	4b0c      	ldr	r3, [pc, #48]	; (800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7a4:	e06b      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7aa:	e068      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c7ac:	4b07      	ldr	r3, [pc, #28]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7b8:	d102      	bne.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c7ba:	4b07      	ldr	r3, [pc, #28]	; (800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7be:	e05e      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7c4:	e05b      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ca:	e058      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c7cc:	58024400 	.word	0x58024400
 800c7d0:	03d09000 	.word	0x03d09000
 800c7d4:	003d0900 	.word	0x003d0900
 800c7d8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c7dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7e0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c7e4:	430b      	orrs	r3, r1
 800c7e6:	d148      	bne.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c7e8:	4b27      	ldr	r3, [pc, #156]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c7ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7f8:	d02a      	beq.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c800:	d838      	bhi.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c804:	2b00      	cmp	r3, #0
 800c806:	d004      	beq.n	800c812 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c80e:	d00d      	beq.n	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c810:	e030      	b.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c812:	4b1d      	ldr	r3, [pc, #116]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c81a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c81e:	d102      	bne.n	800c826 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c820:	4b1a      	ldr	r3, [pc, #104]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c824:	e02b      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c826:	2300      	movs	r3, #0
 800c828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c82a:	e028      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c82c:	4b16      	ldr	r3, [pc, #88]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c834:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c838:	d107      	bne.n	800c84a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c83a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c83e:	4618      	mov	r0, r3
 800c840:	f000 fae4 	bl	800ce0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c848:	e019      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c84e:	e016      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c850:	4b0d      	ldr	r3, [pc, #52]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c85c:	d107      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c85e:	f107 0318 	add.w	r3, r7, #24
 800c862:	4618      	mov	r0, r3
 800c864:	f000 f82a 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c86c:	e007      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c86e:	2300      	movs	r3, #0
 800c870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c872:	e004      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c878:	e001      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c87a:	2300      	movs	r3, #0
 800c87c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c880:	4618      	mov	r0, r3
 800c882:	3740      	adds	r7, #64	; 0x40
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	58024400 	.word	0x58024400
 800c88c:	017d7840 	.word	0x017d7840

0800c890 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c894:	f7fd ffd4 	bl	800a840 <HAL_RCC_GetHCLKFreq>
 800c898:	4602      	mov	r2, r0
 800c89a:	4b06      	ldr	r3, [pc, #24]	; (800c8b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c89c:	6a1b      	ldr	r3, [r3, #32]
 800c89e:	091b      	lsrs	r3, r3, #4
 800c8a0:	f003 0307 	and.w	r3, r3, #7
 800c8a4:	4904      	ldr	r1, [pc, #16]	; (800c8b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c8a6:	5ccb      	ldrb	r3, [r1, r3]
 800c8a8:	f003 031f 	and.w	r3, r3, #31
 800c8ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	58024400 	.word	0x58024400
 800c8b8:	08016e40 	.word	0x08016e40

0800c8bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b089      	sub	sp, #36	; 0x24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8c4:	4ba1      	ldr	r3, [pc, #644]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c8:	f003 0303 	and.w	r3, r3, #3
 800c8cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c8ce:	4b9f      	ldr	r3, [pc, #636]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d2:	0b1b      	lsrs	r3, r3, #12
 800c8d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c8da:	4b9c      	ldr	r3, [pc, #624]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8de:	091b      	lsrs	r3, r3, #4
 800c8e0:	f003 0301 	and.w	r3, r3, #1
 800c8e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c8e6:	4b99      	ldr	r3, [pc, #612]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ea:	08db      	lsrs	r3, r3, #3
 800c8ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8f0:	693a      	ldr	r2, [r7, #16]
 800c8f2:	fb02 f303 	mul.w	r3, r2, r3
 800c8f6:	ee07 3a90 	vmov	s15, r3
 800c8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	2b00      	cmp	r3, #0
 800c906:	f000 8111 	beq.w	800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	f000 8083 	beq.w	800ca18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c912:	69bb      	ldr	r3, [r7, #24]
 800c914:	2b02      	cmp	r3, #2
 800c916:	f200 80a1 	bhi.w	800ca5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d003      	beq.n	800c928 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	2b01      	cmp	r3, #1
 800c924:	d056      	beq.n	800c9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c926:	e099      	b.n	800ca5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c928:	4b88      	ldr	r3, [pc, #544]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f003 0320 	and.w	r3, r3, #32
 800c930:	2b00      	cmp	r3, #0
 800c932:	d02d      	beq.n	800c990 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c934:	4b85      	ldr	r3, [pc, #532]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	08db      	lsrs	r3, r3, #3
 800c93a:	f003 0303 	and.w	r3, r3, #3
 800c93e:	4a84      	ldr	r2, [pc, #528]	; (800cb50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c940:	fa22 f303 	lsr.w	r3, r2, r3
 800c944:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	ee07 3a90 	vmov	s15, r3
 800c94c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	ee07 3a90 	vmov	s15, r3
 800c956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c95a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c95e:	4b7b      	ldr	r3, [pc, #492]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c966:	ee07 3a90 	vmov	s15, r3
 800c96a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c96e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c972:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c97a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c97e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c98a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c98e:	e087      	b.n	800caa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	ee07 3a90 	vmov	s15, r3
 800c996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c99a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9a2:	4b6a      	ldr	r3, [pc, #424]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9d2:	e065      	b.n	800caa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9e6:	4b59      	ldr	r3, [pc, #356]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca16:	e043      	b.n	800caa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ca26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca2a:	4b48      	ldr	r3, [pc, #288]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca32:	ee07 3a90 	vmov	s15, r3
 800ca36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca5a:	e021      	b.n	800caa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	ee07 3a90 	vmov	s15, r3
 800ca62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca6e:	4b37      	ldr	r3, [pc, #220]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca76:	ee07 3a90 	vmov	s15, r3
 800ca7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca82:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800caa0:	4b2a      	ldr	r3, [pc, #168]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa4:	0a5b      	lsrs	r3, r3, #9
 800caa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caaa:	ee07 3a90 	vmov	s15, r3
 800caae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800caba:	edd7 6a07 	vldr	s13, [r7, #28]
 800cabe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cac6:	ee17 2a90 	vmov	r2, s15
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cace:	4b1f      	ldr	r3, [pc, #124]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad2:	0c1b      	lsrs	r3, r3, #16
 800cad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cad8:	ee07 3a90 	vmov	s15, r3
 800cadc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cae4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cae8:	edd7 6a07 	vldr	s13, [r7, #28]
 800caec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caf4:	ee17 2a90 	vmov	r2, s15
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cafc:	4b13      	ldr	r3, [pc, #76]	; (800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb00:	0e1b      	lsrs	r3, r3, #24
 800cb02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb06:	ee07 3a90 	vmov	s15, r3
 800cb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb16:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb22:	ee17 2a90 	vmov	r2, s15
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cb2a:	e008      	b.n	800cb3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2200      	movs	r2, #0
 800cb36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	609a      	str	r2, [r3, #8]
}
 800cb3e:	bf00      	nop
 800cb40:	3724      	adds	r7, #36	; 0x24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	58024400 	.word	0x58024400
 800cb50:	03d09000 	.word	0x03d09000
 800cb54:	46000000 	.word	0x46000000
 800cb58:	4c742400 	.word	0x4c742400
 800cb5c:	4a742400 	.word	0x4a742400
 800cb60:	4bbebc20 	.word	0x4bbebc20

0800cb64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b089      	sub	sp, #36	; 0x24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb6c:	4ba1      	ldr	r3, [pc, #644]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb70:	f003 0303 	and.w	r3, r3, #3
 800cb74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cb76:	4b9f      	ldr	r3, [pc, #636]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb7a:	0d1b      	lsrs	r3, r3, #20
 800cb7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cb82:	4b9c      	ldr	r3, [pc, #624]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb86:	0a1b      	lsrs	r3, r3, #8
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cb8e:	4b99      	ldr	r3, [pc, #612]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb92:	08db      	lsrs	r3, r3, #3
 800cb94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb98:	693a      	ldr	r2, [r7, #16]
 800cb9a:	fb02 f303 	mul.w	r3, r2, r3
 800cb9e:	ee07 3a90 	vmov	s15, r3
 800cba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cba6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f000 8111 	beq.w	800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	f000 8083 	beq.w	800ccc0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	f200 80a1 	bhi.w	800cd04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d003      	beq.n	800cbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cbc8:	69bb      	ldr	r3, [r7, #24]
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d056      	beq.n	800cc7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cbce:	e099      	b.n	800cd04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbd0:	4b88      	ldr	r3, [pc, #544]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f003 0320 	and.w	r3, r3, #32
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d02d      	beq.n	800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbdc:	4b85      	ldr	r3, [pc, #532]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	08db      	lsrs	r3, r3, #3
 800cbe2:	f003 0303 	and.w	r3, r3, #3
 800cbe6:	4a84      	ldr	r2, [pc, #528]	; (800cdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cbe8:	fa22 f303 	lsr.w	r3, r2, r3
 800cbec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	ee07 3a90 	vmov	s15, r3
 800cbf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	ee07 3a90 	vmov	s15, r3
 800cbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc06:	4b7b      	ldr	r3, [pc, #492]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc0e:	ee07 3a90 	vmov	s15, r3
 800cc12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc16:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cdfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc36:	e087      	b.n	800cd48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	ee07 3a90 	vmov	s15, r3
 800cc3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ce00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cc46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc4a:	4b6a      	ldr	r3, [pc, #424]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc52:	ee07 3a90 	vmov	s15, r3
 800cc56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cdfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc7a:	e065      	b.n	800cd48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	ee07 3a90 	vmov	s15, r3
 800cc82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ce04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc8e:	4b59      	ldr	r3, [pc, #356]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc96:	ee07 3a90 	vmov	s15, r3
 800cc9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cca2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cdfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccbe:	e043      	b.n	800cd48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	ee07 3a90 	vmov	s15, r3
 800ccc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ce08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ccce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccd2:	4b48      	ldr	r3, [pc, #288]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccda:	ee07 3a90 	vmov	s15, r3
 800ccde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cce2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cce6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cdfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd02:	e021      	b.n	800cd48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	ee07 3a90 	vmov	s15, r3
 800cd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ce04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd16:	4b37      	ldr	r3, [pc, #220]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd1e:	ee07 3a90 	vmov	s15, r3
 800cd22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd26:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cdfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cd48:	4b2a      	ldr	r3, [pc, #168]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd4c:	0a5b      	lsrs	r3, r3, #9
 800cd4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd52:	ee07 3a90 	vmov	s15, r3
 800cd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd62:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd6e:	ee17 2a90 	vmov	r2, s15
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cd76:	4b1f      	ldr	r3, [pc, #124]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd7a:	0c1b      	lsrs	r3, r3, #16
 800cd7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd80:	ee07 3a90 	vmov	s15, r3
 800cd84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd90:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd9c:	ee17 2a90 	vmov	r2, s15
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cda4:	4b13      	ldr	r3, [pc, #76]	; (800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda8:	0e1b      	lsrs	r3, r3, #24
 800cdaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdae:	ee07 3a90 	vmov	s15, r3
 800cdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdca:	ee17 2a90 	vmov	r2, s15
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cdd2:	e008      	b.n	800cde6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2200      	movs	r2, #0
 800cdde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	609a      	str	r2, [r3, #8]
}
 800cde6:	bf00      	nop
 800cde8:	3724      	adds	r7, #36	; 0x24
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	58024400 	.word	0x58024400
 800cdf8:	03d09000 	.word	0x03d09000
 800cdfc:	46000000 	.word	0x46000000
 800ce00:	4c742400 	.word	0x4c742400
 800ce04:	4a742400 	.word	0x4a742400
 800ce08:	4bbebc20 	.word	0x4bbebc20

0800ce0c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b089      	sub	sp, #36	; 0x24
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce14:	4ba0      	ldr	r3, [pc, #640]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce18:	f003 0303 	and.w	r3, r3, #3
 800ce1c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ce1e:	4b9e      	ldr	r3, [pc, #632]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce22:	091b      	lsrs	r3, r3, #4
 800ce24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce28:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ce2a:	4b9b      	ldr	r3, [pc, #620]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	f003 0301 	and.w	r3, r3, #1
 800ce32:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ce34:	4b98      	ldr	r3, [pc, #608]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce38:	08db      	lsrs	r3, r3, #3
 800ce3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce3e:	693a      	ldr	r2, [r7, #16]
 800ce40:	fb02 f303 	mul.w	r3, r2, r3
 800ce44:	ee07 3a90 	vmov	s15, r3
 800ce48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce4c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f000 8111 	beq.w	800d07a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	f000 8083 	beq.w	800cf66 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	f200 80a1 	bhi.w	800cfaa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d003      	beq.n	800ce76 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d056      	beq.n	800cf22 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ce74:	e099      	b.n	800cfaa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce76:	4b88      	ldr	r3, [pc, #544]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f003 0320 	and.w	r3, r3, #32
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d02d      	beq.n	800cede <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce82:	4b85      	ldr	r3, [pc, #532]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	08db      	lsrs	r3, r3, #3
 800ce88:	f003 0303 	and.w	r3, r3, #3
 800ce8c:	4a83      	ldr	r2, [pc, #524]	; (800d09c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ce8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce92:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	ee07 3a90 	vmov	s15, r3
 800ce9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	ee07 3a90 	vmov	s15, r3
 800cea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceac:	4b7a      	ldr	r3, [pc, #488]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceb4:	ee07 3a90 	vmov	s15, r3
 800ceb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cebc:	ed97 6a03 	vldr	s12, [r7, #12]
 800cec0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cec4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ced0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ced4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ced8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cedc:	e087      	b.n	800cfee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	ee07 3a90 	vmov	s15, r3
 800cee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cee8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ceec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cef0:	4b69      	ldr	r3, [pc, #420]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cef8:	ee07 3a90 	vmov	s15, r3
 800cefc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf00:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf04:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf20:	e065      	b.n	800cfee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	ee07 3a90 	vmov	s15, r3
 800cf28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf2c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d0a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cf30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf34:	4b58      	ldr	r3, [pc, #352]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf3c:	ee07 3a90 	vmov	s15, r3
 800cf40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf44:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf48:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf64:	e043      	b.n	800cfee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	ee07 3a90 	vmov	s15, r3
 800cf6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf70:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d0ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cf74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf78:	4b47      	ldr	r3, [pc, #284]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf80:	ee07 3a90 	vmov	s15, r3
 800cf84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf88:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf8c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfa4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfa8:	e021      	b.n	800cfee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	ee07 3a90 	vmov	s15, r3
 800cfb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfb4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cfb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfbc:	4b36      	ldr	r3, [pc, #216]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfc4:	ee07 3a90 	vmov	s15, r3
 800cfc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfcc:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfd0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfe8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cfee:	4b2a      	ldr	r3, [pc, #168]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff2:	0a5b      	lsrs	r3, r3, #9
 800cff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cff8:	ee07 3a90 	vmov	s15, r3
 800cffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d004:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d008:	edd7 6a07 	vldr	s13, [r7, #28]
 800d00c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d014:	ee17 2a90 	vmov	r2, s15
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d01c:	4b1e      	ldr	r3, [pc, #120]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d020:	0c1b      	lsrs	r3, r3, #16
 800d022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d026:	ee07 3a90 	vmov	s15, r3
 800d02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d02e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d032:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d036:	edd7 6a07 	vldr	s13, [r7, #28]
 800d03a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d03e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d042:	ee17 2a90 	vmov	r2, s15
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d04a:	4b13      	ldr	r3, [pc, #76]	; (800d098 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d04e:	0e1b      	lsrs	r3, r3, #24
 800d050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d054:	ee07 3a90 	vmov	s15, r3
 800d058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d05c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d060:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d064:	edd7 6a07 	vldr	s13, [r7, #28]
 800d068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d06c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d070:	ee17 2a90 	vmov	r2, s15
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d078:	e008      	b.n	800d08c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	609a      	str	r2, [r3, #8]
}
 800d08c:	bf00      	nop
 800d08e:	3724      	adds	r7, #36	; 0x24
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr
 800d098:	58024400 	.word	0x58024400
 800d09c:	03d09000 	.word	0x03d09000
 800d0a0:	46000000 	.word	0x46000000
 800d0a4:	4c742400 	.word	0x4c742400
 800d0a8:	4a742400 	.word	0x4a742400
 800d0ac:	4bbebc20 	.word	0x4bbebc20

0800d0b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d0be:	4b53      	ldr	r3, [pc, #332]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c2:	f003 0303 	and.w	r3, r3, #3
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	d101      	bne.n	800d0ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e099      	b.n	800d202 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d0ce:	4b4f      	ldr	r3, [pc, #316]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a4e      	ldr	r2, [pc, #312]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d0d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d0d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0da:	f7f6 fc8b 	bl	80039f4 <HAL_GetTick>
 800d0de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d0e0:	e008      	b.n	800d0f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d0e2:	f7f6 fc87 	bl	80039f4 <HAL_GetTick>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d901      	bls.n	800d0f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d0f0:	2303      	movs	r3, #3
 800d0f2:	e086      	b.n	800d202 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d0f4:	4b45      	ldr	r3, [pc, #276]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1f0      	bne.n	800d0e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d100:	4b42      	ldr	r3, [pc, #264]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d104:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	031b      	lsls	r3, r3, #12
 800d10e:	493f      	ldr	r1, [pc, #252]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d110:	4313      	orrs	r3, r2
 800d112:	628b      	str	r3, [r1, #40]	; 0x28
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	3b01      	subs	r3, #1
 800d11a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	3b01      	subs	r3, #1
 800d124:	025b      	lsls	r3, r3, #9
 800d126:	b29b      	uxth	r3, r3
 800d128:	431a      	orrs	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	3b01      	subs	r3, #1
 800d130:	041b      	lsls	r3, r3, #16
 800d132:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d136:	431a      	orrs	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	3b01      	subs	r3, #1
 800d13e:	061b      	lsls	r3, r3, #24
 800d140:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d144:	4931      	ldr	r1, [pc, #196]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d146:	4313      	orrs	r3, r2
 800d148:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d14a:	4b30      	ldr	r3, [pc, #192]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	695b      	ldr	r3, [r3, #20]
 800d156:	492d      	ldr	r1, [pc, #180]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d158:	4313      	orrs	r3, r2
 800d15a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d15c:	4b2b      	ldr	r3, [pc, #172]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d160:	f023 0220 	bic.w	r2, r3, #32
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	4928      	ldr	r1, [pc, #160]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d16a:	4313      	orrs	r3, r2
 800d16c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d16e:	4b27      	ldr	r3, [pc, #156]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d172:	4a26      	ldr	r2, [pc, #152]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d174:	f023 0310 	bic.w	r3, r3, #16
 800d178:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d17a:	4b24      	ldr	r3, [pc, #144]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d17c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d17e:	4b24      	ldr	r3, [pc, #144]	; (800d210 <RCCEx_PLL2_Config+0x160>)
 800d180:	4013      	ands	r3, r2
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	69d2      	ldr	r2, [r2, #28]
 800d186:	00d2      	lsls	r2, r2, #3
 800d188:	4920      	ldr	r1, [pc, #128]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d18a:	4313      	orrs	r3, r2
 800d18c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d18e:	4b1f      	ldr	r3, [pc, #124]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d192:	4a1e      	ldr	r2, [pc, #120]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d194:	f043 0310 	orr.w	r3, r3, #16
 800d198:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d106      	bne.n	800d1ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d1a0:	4b1a      	ldr	r3, [pc, #104]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a4:	4a19      	ldr	r2, [pc, #100]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d1a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1ac:	e00f      	b.n	800d1ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d106      	bne.n	800d1c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d1b4:	4b15      	ldr	r3, [pc, #84]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b8:	4a14      	ldr	r2, [pc, #80]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d1ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1c0:	e005      	b.n	800d1ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d1c2:	4b12      	ldr	r3, [pc, #72]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c6:	4a11      	ldr	r2, [pc, #68]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d1c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d1cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d1ce:	4b0f      	ldr	r3, [pc, #60]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4a0e      	ldr	r2, [pc, #56]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d1d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d1d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1da:	f7f6 fc0b 	bl	80039f4 <HAL_GetTick>
 800d1de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d1e0:	e008      	b.n	800d1f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d1e2:	f7f6 fc07 	bl	80039f4 <HAL_GetTick>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d901      	bls.n	800d1f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d1f0:	2303      	movs	r3, #3
 800d1f2:	e006      	b.n	800d202 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d1f4:	4b05      	ldr	r3, [pc, #20]	; (800d20c <RCCEx_PLL2_Config+0x15c>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d0f0      	beq.n	800d1e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d200:	7bfb      	ldrb	r3, [r7, #15]
}
 800d202:	4618      	mov	r0, r3
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	58024400 	.word	0x58024400
 800d210:	ffff0007 	.word	0xffff0007

0800d214 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d21e:	2300      	movs	r3, #0
 800d220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d222:	4b53      	ldr	r3, [pc, #332]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d226:	f003 0303 	and.w	r3, r3, #3
 800d22a:	2b03      	cmp	r3, #3
 800d22c:	d101      	bne.n	800d232 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	e099      	b.n	800d366 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d232:	4b4f      	ldr	r3, [pc, #316]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4a4e      	ldr	r2, [pc, #312]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d23c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d23e:	f7f6 fbd9 	bl	80039f4 <HAL_GetTick>
 800d242:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d244:	e008      	b.n	800d258 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d246:	f7f6 fbd5 	bl	80039f4 <HAL_GetTick>
 800d24a:	4602      	mov	r2, r0
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	1ad3      	subs	r3, r2, r3
 800d250:	2b02      	cmp	r3, #2
 800d252:	d901      	bls.n	800d258 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d254:	2303      	movs	r3, #3
 800d256:	e086      	b.n	800d366 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d258:	4b45      	ldr	r3, [pc, #276]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1f0      	bne.n	800d246 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d264:	4b42      	ldr	r3, [pc, #264]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d268:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	051b      	lsls	r3, r3, #20
 800d272:	493f      	ldr	r1, [pc, #252]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d274:	4313      	orrs	r3, r2
 800d276:	628b      	str	r3, [r1, #40]	; 0x28
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	3b01      	subs	r3, #1
 800d27e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	3b01      	subs	r3, #1
 800d288:	025b      	lsls	r3, r3, #9
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	431a      	orrs	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	3b01      	subs	r3, #1
 800d294:	041b      	lsls	r3, r3, #16
 800d296:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d29a:	431a      	orrs	r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	061b      	lsls	r3, r3, #24
 800d2a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d2a8:	4931      	ldr	r1, [pc, #196]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d2ae:	4b30      	ldr	r3, [pc, #192]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	695b      	ldr	r3, [r3, #20]
 800d2ba:	492d      	ldr	r1, [pc, #180]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d2c0:	4b2b      	ldr	r3, [pc, #172]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	699b      	ldr	r3, [r3, #24]
 800d2cc:	4928      	ldr	r1, [pc, #160]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d2d2:	4b27      	ldr	r3, [pc, #156]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d6:	4a26      	ldr	r2, [pc, #152]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d2d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d2de:	4b24      	ldr	r3, [pc, #144]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d2e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2e2:	4b24      	ldr	r3, [pc, #144]	; (800d374 <RCCEx_PLL3_Config+0x160>)
 800d2e4:	4013      	ands	r3, r2
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	69d2      	ldr	r2, [r2, #28]
 800d2ea:	00d2      	lsls	r2, r2, #3
 800d2ec:	4920      	ldr	r1, [pc, #128]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d2f2:	4b1f      	ldr	r3, [pc, #124]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f6:	4a1e      	ldr	r2, [pc, #120]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d2f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d106      	bne.n	800d312 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d304:	4b1a      	ldr	r3, [pc, #104]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d308:	4a19      	ldr	r2, [pc, #100]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d30a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d30e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d310:	e00f      	b.n	800d332 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	2b01      	cmp	r3, #1
 800d316:	d106      	bne.n	800d326 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d318:	4b15      	ldr	r3, [pc, #84]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d31c:	4a14      	ldr	r2, [pc, #80]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d31e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d322:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d324:	e005      	b.n	800d332 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d326:	4b12      	ldr	r3, [pc, #72]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32a:	4a11      	ldr	r2, [pc, #68]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d32c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d330:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d332:	4b0f      	ldr	r3, [pc, #60]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a0e      	ldr	r2, [pc, #56]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d33c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d33e:	f7f6 fb59 	bl	80039f4 <HAL_GetTick>
 800d342:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d344:	e008      	b.n	800d358 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d346:	f7f6 fb55 	bl	80039f4 <HAL_GetTick>
 800d34a:	4602      	mov	r2, r0
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	1ad3      	subs	r3, r2, r3
 800d350:	2b02      	cmp	r3, #2
 800d352:	d901      	bls.n	800d358 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d354:	2303      	movs	r3, #3
 800d356:	e006      	b.n	800d366 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d358:	4b05      	ldr	r3, [pc, #20]	; (800d370 <RCCEx_PLL3_Config+0x15c>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d360:	2b00      	cmp	r3, #0
 800d362:	d0f0      	beq.n	800d346 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d364:	7bfb      	ldrb	r3, [r7, #15]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	58024400 	.word	0x58024400
 800d374:	ffff0007 	.word	0xffff0007

0800d378 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d380:	2301      	movs	r3, #1
 800d382:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d071      	beq.n	800d46e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d390:	b2db      	uxtb	r3, r3
 800d392:	2b00      	cmp	r3, #0
 800d394:	d106      	bne.n	800d3a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2200      	movs	r2, #0
 800d39a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7f5 fdec 	bl	8002f7c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2202      	movs	r2, #2
 800d3a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	f003 0310 	and.w	r3, r3, #16
 800d3b6:	2b10      	cmp	r3, #16
 800d3b8:	d050      	beq.n	800d45c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	22ca      	movs	r2, #202	; 0xca
 800d3c0:	625a      	str	r2, [r3, #36]	; 0x24
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2253      	movs	r2, #83	; 0x53
 800d3c8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 fa4a 	bl	800d864 <RTC_EnterInitMode>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d3d4:	7bfb      	ldrb	r3, [r7, #15]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d124      	bne.n	800d424 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	6899      	ldr	r1, [r3, #8]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	4b24      	ldr	r3, [pc, #144]	; (800d478 <HAL_RTC_Init+0x100>)
 800d3e6:	400b      	ands	r3, r1
 800d3e8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	6899      	ldr	r1, [r3, #8]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	685a      	ldr	r2, [r3, #4]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	431a      	orrs	r2, r3
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	699b      	ldr	r3, [r3, #24]
 800d3fe:	431a      	orrs	r2, r3
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	430a      	orrs	r2, r1
 800d406:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	0419      	lsls	r1, r3, #16
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68da      	ldr	r2, [r3, #12]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	430a      	orrs	r2, r1
 800d418:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 fa56 	bl	800d8cc <RTC_ExitInitMode>
 800d420:	4603      	mov	r3, r0
 800d422:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d424:	7bfb      	ldrb	r3, [r7, #15]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d113      	bne.n	800d452 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f022 0203 	bic.w	r2, r2, #3
 800d438:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	69da      	ldr	r2, [r3, #28]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	695b      	ldr	r3, [r3, #20]
 800d448:	431a      	orrs	r2, r3
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	430a      	orrs	r2, r1
 800d450:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	22ff      	movs	r2, #255	; 0xff
 800d458:	625a      	str	r2, [r3, #36]	; 0x24
 800d45a:	e001      	b.n	800d460 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d460:	7bfb      	ldrb	r3, [r7, #15]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d103      	bne.n	800d46e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2201      	movs	r2, #1
 800d46a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	ff8fffbf 	.word	0xff8fffbf

0800d47c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d47c:	b590      	push	{r4, r7, lr}
 800d47e:	b087      	sub	sp, #28
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d101      	bne.n	800d496 <HAL_RTC_SetTime+0x1a>
 800d492:	2302      	movs	r3, #2
 800d494:	e089      	b.n	800d5aa <HAL_RTC_SetTime+0x12e>
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2201      	movs	r2, #1
 800d49a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2202      	movs	r2, #2
 800d4a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	22ca      	movs	r2, #202	; 0xca
 800d4ac:	625a      	str	r2, [r3, #36]	; 0x24
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2253      	movs	r2, #83	; 0x53
 800d4b4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d4b6:	68f8      	ldr	r0, [r7, #12]
 800d4b8:	f000 f9d4 	bl	800d864 <RTC_EnterInitMode>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d4c0:	7cfb      	ldrb	r3, [r7, #19]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d161      	bne.n	800d58a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d126      	bne.n	800d51a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	689b      	ldr	r3, [r3, #8]
 800d4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d102      	bne.n	800d4e0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f000 fa2f 	bl	800d948 <RTC_ByteToBcd2>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	785b      	ldrb	r3, [r3, #1]
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f000 fa28 	bl	800d948 <RTC_ByteToBcd2>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d4fc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	789b      	ldrb	r3, [r3, #2]
 800d502:	4618      	mov	r0, r3
 800d504:	f000 fa20 	bl	800d948 <RTC_ByteToBcd2>
 800d508:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d50a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	78db      	ldrb	r3, [r3, #3]
 800d512:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d514:	4313      	orrs	r3, r2
 800d516:	617b      	str	r3, [r7, #20]
 800d518:	e018      	b.n	800d54c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d524:	2b00      	cmp	r3, #0
 800d526:	d102      	bne.n	800d52e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	2200      	movs	r2, #0
 800d52c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	785b      	ldrb	r3, [r3, #1]
 800d538:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d53a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d540:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	78db      	ldrb	r3, [r3, #3]
 800d546:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d548:	4313      	orrs	r3, r2
 800d54a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	6979      	ldr	r1, [r7, #20]
 800d552:	4b18      	ldr	r3, [pc, #96]	; (800d5b4 <HAL_RTC_SetTime+0x138>)
 800d554:	400b      	ands	r3, r1
 800d556:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	689a      	ldr	r2, [r3, #8]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d566:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6899      	ldr	r1, [r3, #8]
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	68da      	ldr	r2, [r3, #12]
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	431a      	orrs	r2, r3
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	430a      	orrs	r2, r1
 800d57e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f000 f9a3 	bl	800d8cc <RTC_ExitInitMode>
 800d586:	4603      	mov	r3, r0
 800d588:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	22ff      	movs	r2, #255	; 0xff
 800d590:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d592:	7cfb      	ldrb	r3, [r7, #19]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d103      	bne.n	800d5a0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d5a8:	7cfb      	ldrb	r3, [r7, #19]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	371c      	adds	r7, #28
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd90      	pop	{r4, r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	007f7f7f 	.word	0x007f7f7f

0800d5b8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b086      	sub	sp, #24
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	691b      	ldr	r3, [r3, #16]
 800d5d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	4b22      	ldr	r3, [pc, #136]	; (800d66c <HAL_RTC_GetTime+0xb4>)
 800d5e4:	4013      	ands	r3, r2
 800d5e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	0c1b      	lsrs	r3, r3, #16
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5f2:	b2da      	uxtb	r2, r3
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	0a1b      	lsrs	r3, r3, #8
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d602:	b2da      	uxtb	r2, r3
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d610:	b2da      	uxtb	r2, r3
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	0d9b      	lsrs	r3, r3, #22
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	f003 0301 	and.w	r3, r3, #1
 800d620:	b2da      	uxtb	r2, r3
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d11a      	bne.n	800d662 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	4618      	mov	r0, r3
 800d632:	f000 f9a9 	bl	800d988 <RTC_Bcd2ToByte>
 800d636:	4603      	mov	r3, r0
 800d638:	461a      	mov	r2, r3
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	785b      	ldrb	r3, [r3, #1]
 800d642:	4618      	mov	r0, r3
 800d644:	f000 f9a0 	bl	800d988 <RTC_Bcd2ToByte>
 800d648:	4603      	mov	r3, r0
 800d64a:	461a      	mov	r2, r3
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	789b      	ldrb	r3, [r3, #2]
 800d654:	4618      	mov	r0, r3
 800d656:	f000 f997 	bl	800d988 <RTC_Bcd2ToByte>
 800d65a:	4603      	mov	r3, r0
 800d65c:	461a      	mov	r2, r3
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3718      	adds	r7, #24
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	007f7f7f 	.word	0x007f7f7f

0800d670 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d670:	b590      	push	{r4, r7, lr}
 800d672:	b087      	sub	sp, #28
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d101      	bne.n	800d68a <HAL_RTC_SetDate+0x1a>
 800d686:	2302      	movs	r3, #2
 800d688:	e073      	b.n	800d772 <HAL_RTC_SetDate+0x102>
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2201      	movs	r2, #1
 800d68e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2202      	movs	r2, #2
 800d696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10e      	bne.n	800d6be <HAL_RTC_SetDate+0x4e>
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	785b      	ldrb	r3, [r3, #1]
 800d6a4:	f003 0310 	and.w	r3, r3, #16
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d008      	beq.n	800d6be <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	785b      	ldrb	r3, [r3, #1]
 800d6b0:	f023 0310 	bic.w	r3, r3, #16
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	330a      	adds	r3, #10
 800d6b8:	b2da      	uxtb	r2, r3
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d11c      	bne.n	800d6fe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	78db      	ldrb	r3, [r3, #3]
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f000 f93d 	bl	800d948 <RTC_ByteToBcd2>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	785b      	ldrb	r3, [r3, #1]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f000 f936 	bl	800d948 <RTC_ByteToBcd2>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d6e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	789b      	ldrb	r3, [r3, #2]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f000 f92e 	bl	800d948 <RTC_ByteToBcd2>
 800d6ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d6ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	617b      	str	r3, [r7, #20]
 800d6fc:	e00e      	b.n	800d71c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	78db      	ldrb	r3, [r3, #3]
 800d702:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	785b      	ldrb	r3, [r3, #1]
 800d708:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d70a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d710:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d718:	4313      	orrs	r3, r2
 800d71a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	22ca      	movs	r2, #202	; 0xca
 800d722:	625a      	str	r2, [r3, #36]	; 0x24
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2253      	movs	r2, #83	; 0x53
 800d72a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f000 f899 	bl	800d864 <RTC_EnterInitMode>
 800d732:	4603      	mov	r3, r0
 800d734:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d736:	7cfb      	ldrb	r3, [r7, #19]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d10a      	bne.n	800d752 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	6979      	ldr	r1, [r7, #20]
 800d742:	4b0e      	ldr	r3, [pc, #56]	; (800d77c <HAL_RTC_SetDate+0x10c>)
 800d744:	400b      	ands	r3, r1
 800d746:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f000 f8bf 	bl	800d8cc <RTC_ExitInitMode>
 800d74e:	4603      	mov	r3, r0
 800d750:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	22ff      	movs	r2, #255	; 0xff
 800d758:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d75a:	7cfb      	ldrb	r3, [r7, #19]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d103      	bne.n	800d768 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2201      	movs	r2, #1
 800d764:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d770:	7cfb      	ldrb	r3, [r7, #19]


}
 800d772:	4618      	mov	r0, r3
 800d774:	371c      	adds	r7, #28
 800d776:	46bd      	mov	sp, r7
 800d778:	bd90      	pop	{r4, r7, pc}
 800d77a:	bf00      	nop
 800d77c:	00ffff3f 	.word	0x00ffff3f

0800d780 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	685a      	ldr	r2, [r3, #4]
 800d792:	4b21      	ldr	r3, [pc, #132]	; (800d818 <HAL_RTC_GetDate+0x98>)
 800d794:	4013      	ands	r3, r2
 800d796:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	0c1b      	lsrs	r3, r3, #16
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	0a1b      	lsrs	r3, r3, #8
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	f003 031f 	and.w	r3, r3, #31
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	0b5b      	lsrs	r3, r3, #13
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	f003 0307 	and.w	r3, r3, #7
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d11a      	bne.n	800d80c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	78db      	ldrb	r3, [r3, #3]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f000 f8d4 	bl	800d988 <RTC_Bcd2ToByte>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	785b      	ldrb	r3, [r3, #1]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f000 f8cb 	bl	800d988 <RTC_Bcd2ToByte>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	789b      	ldrb	r3, [r3, #2]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f000 f8c2 	bl	800d988 <RTC_Bcd2ToByte>
 800d804:	4603      	mov	r3, r0
 800d806:	461a      	mov	r2, r3
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d80c:	2300      	movs	r3, #0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	00ffff3f 	.word	0x00ffff3f

0800d81c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a0d      	ldr	r2, [pc, #52]	; (800d860 <HAL_RTC_WaitForSynchro+0x44>)
 800d82a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d82c:	f7f6 f8e2 	bl	80039f4 <HAL_GetTick>
 800d830:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d832:	e009      	b.n	800d848 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d834:	f7f6 f8de 	bl	80039f4 <HAL_GetTick>
 800d838:	4602      	mov	r2, r0
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	1ad3      	subs	r3, r2, r3
 800d83e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d842:	d901      	bls.n	800d848 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d844:	2303      	movs	r3, #3
 800d846:	e007      	b.n	800d858 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	f003 0320 	and.w	r3, r3, #32
 800d852:	2b00      	cmp	r3, #0
 800d854:	d0ee      	beq.n	800d834 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	0003ff5f 	.word	0x0003ff5f

0800d864 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d86c:	2300      	movs	r3, #0
 800d86e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d120      	bne.n	800d8c0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d886:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d888:	f7f6 f8b4 	bl	80039f4 <HAL_GetTick>
 800d88c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d88e:	e00d      	b.n	800d8ac <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d890:	f7f6 f8b0 	bl	80039f4 <HAL_GetTick>
 800d894:	4602      	mov	r2, r0
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d89e:	d905      	bls.n	800d8ac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2203      	movs	r2, #3
 800d8a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d102      	bne.n	800d8c0 <RTC_EnterInitMode+0x5c>
 800d8ba:	7bfb      	ldrb	r3, [r7, #15]
 800d8bc:	2b03      	cmp	r3, #3
 800d8be:	d1e7      	bne.n	800d890 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
	...

0800d8cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d8d8:	4b1a      	ldr	r3, [pc, #104]	; (800d944 <RTC_ExitInitMode+0x78>)
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	4a19      	ldr	r2, [pc, #100]	; (800d944 <RTC_ExitInitMode+0x78>)
 800d8de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8e2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d8e4:	4b17      	ldr	r3, [pc, #92]	; (800d944 <RTC_ExitInitMode+0x78>)
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	f003 0320 	and.w	r3, r3, #32
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10c      	bne.n	800d90a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7ff ff93 	bl	800d81c <HAL_RTC_WaitForSynchro>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d01e      	beq.n	800d93a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2203      	movs	r2, #3
 800d900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d904:	2303      	movs	r3, #3
 800d906:	73fb      	strb	r3, [r7, #15]
 800d908:	e017      	b.n	800d93a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d90a:	4b0e      	ldr	r3, [pc, #56]	; (800d944 <RTC_ExitInitMode+0x78>)
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	4a0d      	ldr	r2, [pc, #52]	; (800d944 <RTC_ExitInitMode+0x78>)
 800d910:	f023 0320 	bic.w	r3, r3, #32
 800d914:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f7ff ff80 	bl	800d81c <HAL_RTC_WaitForSynchro>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d005      	beq.n	800d92e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2203      	movs	r2, #3
 800d926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d92a:	2303      	movs	r3, #3
 800d92c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d92e:	4b05      	ldr	r3, [pc, #20]	; (800d944 <RTC_ExitInitMode+0x78>)
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	4a04      	ldr	r2, [pc, #16]	; (800d944 <RTC_ExitInitMode+0x78>)
 800d934:	f043 0320 	orr.w	r3, r3, #32
 800d938:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	58004000 	.word	0x58004000

0800d948 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d948:	b480      	push	{r7}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	4603      	mov	r3, r0
 800d950:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d952:	2300      	movs	r3, #0
 800d954:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d956:	79fb      	ldrb	r3, [r7, #7]
 800d958:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d95a:	e005      	b.n	800d968 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	3301      	adds	r3, #1
 800d960:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d962:	7afb      	ldrb	r3, [r7, #11]
 800d964:	3b0a      	subs	r3, #10
 800d966:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d968:	7afb      	ldrb	r3, [r7, #11]
 800d96a:	2b09      	cmp	r3, #9
 800d96c:	d8f6      	bhi.n	800d95c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	b2db      	uxtb	r3, r3
 800d972:	011b      	lsls	r3, r3, #4
 800d974:	b2da      	uxtb	r2, r3
 800d976:	7afb      	ldrb	r3, [r7, #11]
 800d978:	4313      	orrs	r3, r2
 800d97a:	b2db      	uxtb	r3, r3
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3714      	adds	r7, #20
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	4603      	mov	r3, r0
 800d990:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d992:	79fb      	ldrb	r3, [r7, #7]
 800d994:	091b      	lsrs	r3, r3, #4
 800d996:	b2db      	uxtb	r3, r3
 800d998:	461a      	mov	r2, r3
 800d99a:	0092      	lsls	r2, r2, #2
 800d99c:	4413      	add	r3, r2
 800d99e:	005b      	lsls	r3, r3, #1
 800d9a0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d9a2:	79fb      	ldrb	r3, [r7, #7]
 800d9a4:	f003 030f 	and.w	r3, r3, #15
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	7bfb      	ldrb	r3, [r7, #15]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	b2db      	uxtb	r3, r3
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3714      	adds	r7, #20
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr

0800d9bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d101      	bne.n	800d9ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e10f      	b.n	800dbee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a87      	ldr	r2, [pc, #540]	; (800dbf8 <HAL_SPI_Init+0x23c>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d00f      	beq.n	800d9fe <HAL_SPI_Init+0x42>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a86      	ldr	r2, [pc, #536]	; (800dbfc <HAL_SPI_Init+0x240>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d00a      	beq.n	800d9fe <HAL_SPI_Init+0x42>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a84      	ldr	r2, [pc, #528]	; (800dc00 <HAL_SPI_Init+0x244>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d005      	beq.n	800d9fe <HAL_SPI_Init+0x42>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	2b0f      	cmp	r3, #15
 800d9f8:	d901      	bls.n	800d9fe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	e0f7      	b.n	800dbee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fc12 	bl	800e228 <SPI_GetPacketSize>
 800da04:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4a7b      	ldr	r2, [pc, #492]	; (800dbf8 <HAL_SPI_Init+0x23c>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d00c      	beq.n	800da2a <HAL_SPI_Init+0x6e>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a79      	ldr	r2, [pc, #484]	; (800dbfc <HAL_SPI_Init+0x240>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d007      	beq.n	800da2a <HAL_SPI_Init+0x6e>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4a78      	ldr	r2, [pc, #480]	; (800dc00 <HAL_SPI_Init+0x244>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d002      	beq.n	800da2a <HAL_SPI_Init+0x6e>
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2b08      	cmp	r3, #8
 800da28:	d811      	bhi.n	800da4e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da2e:	4a72      	ldr	r2, [pc, #456]	; (800dbf8 <HAL_SPI_Init+0x23c>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d009      	beq.n	800da48 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a70      	ldr	r2, [pc, #448]	; (800dbfc <HAL_SPI_Init+0x240>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d004      	beq.n	800da48 <HAL_SPI_Init+0x8c>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a6f      	ldr	r2, [pc, #444]	; (800dc00 <HAL_SPI_Init+0x244>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d104      	bne.n	800da52 <HAL_SPI_Init+0x96>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2b10      	cmp	r3, #16
 800da4c:	d901      	bls.n	800da52 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800da4e:	2301      	movs	r3, #1
 800da50:	e0cd      	b.n	800dbee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d106      	bne.n	800da6c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7f5 faba 	bl	8002fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2202      	movs	r2, #2
 800da70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f022 0201 	bic.w	r2, r2, #1
 800da82:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800da8e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	699b      	ldr	r3, [r3, #24]
 800da94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da98:	d119      	bne.n	800dace <HAL_SPI_Init+0x112>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800daa2:	d103      	bne.n	800daac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d008      	beq.n	800dabe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d10c      	bne.n	800dace <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dabc:	d107      	bne.n	800dace <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	681a      	ldr	r2, [r3, #0]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dacc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00f      	beq.n	800dafa <HAL_SPI_Init+0x13e>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	2b06      	cmp	r3, #6
 800dae0:	d90b      	bls.n	800dafa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	430a      	orrs	r2, r1
 800daf6:	601a      	str	r2, [r3, #0]
 800daf8:	e007      	b.n	800db0a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800db08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	69da      	ldr	r2, [r3, #28]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db12:	431a      	orrs	r2, r3
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	431a      	orrs	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db1c:	ea42 0103 	orr.w	r1, r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	68da      	ldr	r2, [r3, #12]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	430a      	orrs	r2, r1
 800db2a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db34:	431a      	orrs	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3a:	431a      	orrs	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	699b      	ldr	r3, [r3, #24]
 800db40:	431a      	orrs	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	691b      	ldr	r3, [r3, #16]
 800db46:	431a      	orrs	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	695b      	ldr	r3, [r3, #20]
 800db4c:	431a      	orrs	r2, r3
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a1b      	ldr	r3, [r3, #32]
 800db52:	431a      	orrs	r2, r3
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	431a      	orrs	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db5e:	431a      	orrs	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	431a      	orrs	r2, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db6a:	ea42 0103 	orr.w	r1, r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	430a      	orrs	r2, r1
 800db78:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d113      	bne.n	800dbaa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db94:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	689b      	ldr	r3, [r3, #8]
 800db9c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dba8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f022 0201 	bic.w	r2, r2, #1
 800dbb8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d00a      	beq.n	800dbdc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	430a      	orrs	r2, r1
 800dbda:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dbec:	2300      	movs	r3, #0
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3710      	adds	r7, #16
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	40013000 	.word	0x40013000
 800dbfc:	40003800 	.word	0x40003800
 800dc00:	40003c00 	.word	0x40003c00

0800dc04 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	603b      	str	r3, [r7, #0]
 800dc10:	4613      	mov	r3, r2
 800dc12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc18:	095b      	lsrs	r3, r3, #5
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3330      	adds	r3, #48	; 0x30
 800dc26:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc28:	f7f5 fee4 	bl	80039f4 <HAL_GetTick>
 800dc2c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d001      	beq.n	800dc3e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800dc3a:	2302      	movs	r3, #2
 800dc3c:	e250      	b.n	800e0e0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d002      	beq.n	800dc4a <HAL_SPI_Receive+0x46>
 800dc44:	88fb      	ldrh	r3, [r7, #6]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d101      	bne.n	800dc4e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e248      	b.n	800e0e0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d101      	bne.n	800dc5c <HAL_SPI_Receive+0x58>
 800dc58:	2302      	movs	r3, #2
 800dc5a:	e241      	b.n	800e0e0 <HAL_SPI_Receive+0x4dc>
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2204      	movs	r2, #4
 800dc68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	68ba      	ldr	r2, [r7, #8]
 800dc78:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	88fa      	ldrh	r2, [r7, #6]
 800dc7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	88fa      	ldrh	r2, [r7, #6]
 800dc86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2200      	movs	r2, #0
 800dc94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2200      	movs	r2, #0
 800dca4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	689b      	ldr	r3, [r3, #8]
 800dcb0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dcb4:	d108      	bne.n	800dcc8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	e009      	b.n	800dcdc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800dcda:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	685a      	ldr	r2, [r3, #4]
 800dce2:	4b95      	ldr	r3, [pc, #596]	; (800df38 <HAL_SPI_Receive+0x334>)
 800dce4:	4013      	ands	r3, r2
 800dce6:	88f9      	ldrh	r1, [r7, #6]
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	6812      	ldr	r2, [r2, #0]
 800dcec:	430b      	orrs	r3, r1
 800dcee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f042 0201 	orr.w	r2, r2, #1
 800dcfe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd08:	d107      	bne.n	800dd1a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	68db      	ldr	r3, [r3, #12]
 800dd1e:	2b0f      	cmp	r3, #15
 800dd20:	d96c      	bls.n	800ddfc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dd22:	e064      	b.n	800ddee <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	695b      	ldr	r3, [r3, #20]
 800dd2a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	695b      	ldr	r3, [r3, #20]
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	d114      	bne.n	800dd64 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dd44:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd4a:	1d1a      	adds	r2, r3, #4
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	b29a      	uxth	r2, r3
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dd62:	e044      	b.n	800ddee <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	8bfa      	ldrh	r2, [r7, #30]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d919      	bls.n	800dda6 <HAL_SPI_Receive+0x1a2>
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d014      	beq.n	800dda6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dd86:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd8c:	1d1a      	adds	r2, r3, #4
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dda4:	e023      	b.n	800ddee <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dda6:	f7f5 fe25 	bl	80039f4 <HAL_GetTick>
 800ddaa:	4602      	mov	r2, r0
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	1ad3      	subs	r3, r2, r3
 800ddb0:	683a      	ldr	r2, [r7, #0]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d803      	bhi.n	800ddbe <HAL_SPI_Receive+0x1ba>
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddbc:	d102      	bne.n	800ddc4 <HAL_SPI_Receive+0x1c0>
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d114      	bne.n	800ddee <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ddc4:	68f8      	ldr	r0, [r7, #12]
 800ddc6:	f000 f98f 	bl	800e0e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2201      	movs	r2, #1
 800ddde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2200      	movs	r2, #0
 800dde6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ddea:	2303      	movs	r3, #3
 800ddec:	e178      	b.n	800e0e0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d194      	bne.n	800dd24 <HAL_SPI_Receive+0x120>
 800ddfa:	e15e      	b.n	800e0ba <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	2b07      	cmp	r3, #7
 800de02:	f240 8153 	bls.w	800e0ac <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800de06:	e08f      	b.n	800df28 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	695b      	ldr	r3, [r3, #20]
 800de0e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	695b      	ldr	r3, [r3, #20]
 800de16:	f003 0301 	and.w	r3, r3, #1
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d114      	bne.n	800de48 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de22:	69ba      	ldr	r2, [r7, #24]
 800de24:	8812      	ldrh	r2, [r2, #0]
 800de26:	b292      	uxth	r2, r2
 800de28:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de2e:	1c9a      	adds	r2, r3, #2
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	3b01      	subs	r3, #1
 800de3e:	b29a      	uxth	r2, r3
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de46:	e06f      	b.n	800df28 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de4e:	b29b      	uxth	r3, r3
 800de50:	8bfa      	ldrh	r2, [r7, #30]
 800de52:	429a      	cmp	r2, r3
 800de54:	d924      	bls.n	800dea0 <HAL_SPI_Receive+0x29c>
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d01f      	beq.n	800dea0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de64:	69ba      	ldr	r2, [r7, #24]
 800de66:	8812      	ldrh	r2, [r2, #0]
 800de68:	b292      	uxth	r2, r2
 800de6a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de70:	1c9a      	adds	r2, r3, #2
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de7a:	69ba      	ldr	r2, [r7, #24]
 800de7c:	8812      	ldrh	r2, [r2, #0]
 800de7e:	b292      	uxth	r2, r2
 800de80:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de86:	1c9a      	adds	r2, r3, #2
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de92:	b29b      	uxth	r3, r3
 800de94:	3b02      	subs	r3, #2
 800de96:	b29a      	uxth	r2, r3
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de9e:	e043      	b.n	800df28 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d119      	bne.n	800dee0 <HAL_SPI_Receive+0x2dc>
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d014      	beq.n	800dee0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deba:	69ba      	ldr	r2, [r7, #24]
 800debc:	8812      	ldrh	r2, [r2, #0]
 800debe:	b292      	uxth	r2, r2
 800dec0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dec6:	1c9a      	adds	r2, r3, #2
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	3b01      	subs	r3, #1
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dede:	e023      	b.n	800df28 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dee0:	f7f5 fd88 	bl	80039f4 <HAL_GetTick>
 800dee4:	4602      	mov	r2, r0
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	1ad3      	subs	r3, r2, r3
 800deea:	683a      	ldr	r2, [r7, #0]
 800deec:	429a      	cmp	r2, r3
 800deee:	d803      	bhi.n	800def8 <HAL_SPI_Receive+0x2f4>
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800def6:	d102      	bne.n	800defe <HAL_SPI_Receive+0x2fa>
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d114      	bne.n	800df28 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800defe:	68f8      	ldr	r0, [r7, #12]
 800df00:	f000 f8f2 	bl	800e0e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2201      	movs	r2, #1
 800df18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2200      	movs	r2, #0
 800df20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800df24:	2303      	movs	r3, #3
 800df26:	e0db      	b.n	800e0e0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df2e:	b29b      	uxth	r3, r3
 800df30:	2b00      	cmp	r3, #0
 800df32:	f47f af69 	bne.w	800de08 <HAL_SPI_Receive+0x204>
 800df36:	e0c0      	b.n	800e0ba <HAL_SPI_Receive+0x4b6>
 800df38:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	695b      	ldr	r3, [r3, #20]
 800df42:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	695b      	ldr	r3, [r3, #20]
 800df4a:	f003 0301 	and.w	r3, r3, #1
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d117      	bne.n	800df82 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df5e:	7812      	ldrb	r2, [r2, #0]
 800df60:	b2d2      	uxtb	r2, r2
 800df62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df68:	1c5a      	adds	r2, r3, #1
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df74:	b29b      	uxth	r3, r3
 800df76:	3b01      	subs	r3, #1
 800df78:	b29a      	uxth	r2, r3
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df80:	e094      	b.n	800e0ac <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df88:	b29b      	uxth	r3, r3
 800df8a:	8bfa      	ldrh	r2, [r7, #30]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d946      	bls.n	800e01e <HAL_SPI_Receive+0x41a>
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df96:	2b00      	cmp	r3, #0
 800df98:	d041      	beq.n	800e01e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfa6:	7812      	ldrb	r2, [r2, #0]
 800dfa8:	b2d2      	uxtb	r2, r2
 800dfaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfb0:	1c5a      	adds	r2, r3, #1
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfc2:	7812      	ldrb	r2, [r2, #0]
 800dfc4:	b2d2      	uxtb	r2, r2
 800dfc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfcc:	1c5a      	adds	r2, r3, #1
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfde:	7812      	ldrb	r2, [r2, #0]
 800dfe0:	b2d2      	uxtb	r2, r2
 800dfe2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfe8:	1c5a      	adds	r2, r3, #1
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dffa:	7812      	ldrb	r2, [r2, #0]
 800dffc:	b2d2      	uxtb	r2, r2
 800dffe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e004:	1c5a      	adds	r2, r3, #1
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e010:	b29b      	uxth	r3, r3
 800e012:	3b04      	subs	r3, #4
 800e014:	b29a      	uxth	r2, r3
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e01c:	e046      	b.n	800e0ac <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e024:	b29b      	uxth	r3, r3
 800e026:	2b03      	cmp	r3, #3
 800e028:	d81c      	bhi.n	800e064 <HAL_SPI_Receive+0x460>
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e030:	2b00      	cmp	r3, #0
 800e032:	d017      	beq.n	800e064 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e040:	7812      	ldrb	r2, [r2, #0]
 800e042:	b2d2      	uxtb	r2, r2
 800e044:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e04a:	1c5a      	adds	r2, r3, #1
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e056:	b29b      	uxth	r3, r3
 800e058:	3b01      	subs	r3, #1
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e062:	e023      	b.n	800e0ac <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e064:	f7f5 fcc6 	bl	80039f4 <HAL_GetTick>
 800e068:	4602      	mov	r2, r0
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	1ad3      	subs	r3, r2, r3
 800e06e:	683a      	ldr	r2, [r7, #0]
 800e070:	429a      	cmp	r2, r3
 800e072:	d803      	bhi.n	800e07c <HAL_SPI_Receive+0x478>
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e07a:	d102      	bne.n	800e082 <HAL_SPI_Receive+0x47e>
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d114      	bne.n	800e0ac <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f000 f830 	bl	800e0e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e08e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e0a8:	2303      	movs	r3, #3
 800e0aa:	e019      	b.n	800e0e0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	f47f af41 	bne.w	800df3c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e0ba:	68f8      	ldr	r0, [r7, #12]
 800e0bc:	f000 f814 	bl	800e0e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d001      	beq.n	800e0de <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e000      	b.n	800e0e0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e0de:	2300      	movs	r3, #0
  }
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3720      	adds	r7, #32
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	695b      	ldr	r3, [r3, #20]
 800e0f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	699a      	ldr	r2, [r3, #24]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f042 0208 	orr.w	r2, r2, #8
 800e106:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	699a      	ldr	r2, [r3, #24]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f042 0210 	orr.w	r2, r2, #16
 800e116:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f022 0201 	bic.w	r2, r2, #1
 800e126:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	6919      	ldr	r1, [r3, #16]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	4b3c      	ldr	r3, [pc, #240]	; (800e224 <SPI_CloseTransfer+0x13c>)
 800e134:	400b      	ands	r3, r1
 800e136:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	689a      	ldr	r2, [r3, #8]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e146:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	2b04      	cmp	r3, #4
 800e152:	d014      	beq.n	800e17e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f003 0320 	and.w	r3, r3, #32
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d00f      	beq.n	800e17e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e164:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	699a      	ldr	r2, [r3, #24]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f042 0220 	orr.w	r2, r2, #32
 800e17c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e184:	b2db      	uxtb	r3, r3
 800e186:	2b03      	cmp	r3, #3
 800e188:	d014      	beq.n	800e1b4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e190:	2b00      	cmp	r3, #0
 800e192:	d00f      	beq.n	800e1b4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e19a:	f043 0204 	orr.w	r2, r3, #4
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	699a      	ldr	r2, [r3, #24]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d00f      	beq.n	800e1de <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1c4:	f043 0201 	orr.w	r2, r3, #1
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	699a      	ldr	r2, [r3, #24]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00f      	beq.n	800e208 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1ee:	f043 0208 	orr.w	r2, r3, #8
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	699a      	ldr	r2, [r3, #24]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e206:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e218:	bf00      	nop
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr
 800e224:	fffffc90 	.word	0xfffffc90

0800e228 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e234:	095b      	lsrs	r3, r3, #5
 800e236:	3301      	adds	r3, #1
 800e238:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	3301      	adds	r3, #1
 800e240:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	3307      	adds	r3, #7
 800e246:	08db      	lsrs	r3, r3, #3
 800e248:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	fb02 f303 	mul.w	r3, r2, r3
}
 800e252:	4618      	mov	r0, r3
 800e254:	3714      	adds	r7, #20
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr

0800e25e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b082      	sub	sp, #8
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d101      	bne.n	800e270 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e049      	b.n	800e304 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e276:	b2db      	uxtb	r3, r3
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d106      	bne.n	800e28a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7f4 ff61 	bl	800314c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2202      	movs	r2, #2
 800e28e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	3304      	adds	r3, #4
 800e29a:	4619      	mov	r1, r3
 800e29c:	4610      	mov	r0, r2
 800e29e:	f000 fe7d 	bl	800ef9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b085      	sub	sp, #20
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d001      	beq.n	800e324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e320:	2301      	movs	r3, #1
 800e322:	e054      	b.n	800e3ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2202      	movs	r2, #2
 800e328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	68da      	ldr	r2, [r3, #12]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f042 0201 	orr.w	r2, r2, #1
 800e33a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a26      	ldr	r2, [pc, #152]	; (800e3dc <HAL_TIM_Base_Start_IT+0xd0>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d022      	beq.n	800e38c <HAL_TIM_Base_Start_IT+0x80>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e34e:	d01d      	beq.n	800e38c <HAL_TIM_Base_Start_IT+0x80>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a22      	ldr	r2, [pc, #136]	; (800e3e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d018      	beq.n	800e38c <HAL_TIM_Base_Start_IT+0x80>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a21      	ldr	r2, [pc, #132]	; (800e3e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d013      	beq.n	800e38c <HAL_TIM_Base_Start_IT+0x80>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a1f      	ldr	r2, [pc, #124]	; (800e3e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d00e      	beq.n	800e38c <HAL_TIM_Base_Start_IT+0x80>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4a1e      	ldr	r2, [pc, #120]	; (800e3ec <HAL_TIM_Base_Start_IT+0xe0>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d009      	beq.n	800e38c <HAL_TIM_Base_Start_IT+0x80>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a1c      	ldr	r2, [pc, #112]	; (800e3f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d004      	beq.n	800e38c <HAL_TIM_Base_Start_IT+0x80>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a1b      	ldr	r2, [pc, #108]	; (800e3f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d115      	bne.n	800e3b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	689a      	ldr	r2, [r3, #8]
 800e392:	4b19      	ldr	r3, [pc, #100]	; (800e3f8 <HAL_TIM_Base_Start_IT+0xec>)
 800e394:	4013      	ands	r3, r2
 800e396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2b06      	cmp	r3, #6
 800e39c:	d015      	beq.n	800e3ca <HAL_TIM_Base_Start_IT+0xbe>
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3a4:	d011      	beq.n	800e3ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f042 0201 	orr.w	r2, r2, #1
 800e3b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3b6:	e008      	b.n	800e3ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f042 0201 	orr.w	r2, r2, #1
 800e3c6:	601a      	str	r2, [r3, #0]
 800e3c8:	e000      	b.n	800e3cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e3cc:	2300      	movs	r3, #0
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3714      	adds	r7, #20
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	40010000 	.word	0x40010000
 800e3e0:	40000400 	.word	0x40000400
 800e3e4:	40000800 	.word	0x40000800
 800e3e8:	40000c00 	.word	0x40000c00
 800e3ec:	40010400 	.word	0x40010400
 800e3f0:	40001800 	.word	0x40001800
 800e3f4:	40014000 	.word	0x40014000
 800e3f8:	00010007 	.word	0x00010007

0800e3fc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e406:	2300      	movs	r3, #0
 800e408:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d109      	bne.n	800e424 <HAL_TIM_OC_Start_IT+0x28>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e416:	b2db      	uxtb	r3, r3
 800e418:	2b01      	cmp	r3, #1
 800e41a:	bf14      	ite	ne
 800e41c:	2301      	movne	r3, #1
 800e41e:	2300      	moveq	r3, #0
 800e420:	b2db      	uxtb	r3, r3
 800e422:	e03c      	b.n	800e49e <HAL_TIM_OC_Start_IT+0xa2>
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	2b04      	cmp	r3, #4
 800e428:	d109      	bne.n	800e43e <HAL_TIM_OC_Start_IT+0x42>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e430:	b2db      	uxtb	r3, r3
 800e432:	2b01      	cmp	r3, #1
 800e434:	bf14      	ite	ne
 800e436:	2301      	movne	r3, #1
 800e438:	2300      	moveq	r3, #0
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	e02f      	b.n	800e49e <HAL_TIM_OC_Start_IT+0xa2>
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	2b08      	cmp	r3, #8
 800e442:	d109      	bne.n	800e458 <HAL_TIM_OC_Start_IT+0x5c>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	bf14      	ite	ne
 800e450:	2301      	movne	r3, #1
 800e452:	2300      	moveq	r3, #0
 800e454:	b2db      	uxtb	r3, r3
 800e456:	e022      	b.n	800e49e <HAL_TIM_OC_Start_IT+0xa2>
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	2b0c      	cmp	r3, #12
 800e45c:	d109      	bne.n	800e472 <HAL_TIM_OC_Start_IT+0x76>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e464:	b2db      	uxtb	r3, r3
 800e466:	2b01      	cmp	r3, #1
 800e468:	bf14      	ite	ne
 800e46a:	2301      	movne	r3, #1
 800e46c:	2300      	moveq	r3, #0
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	e015      	b.n	800e49e <HAL_TIM_OC_Start_IT+0xa2>
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	2b10      	cmp	r3, #16
 800e476:	d109      	bne.n	800e48c <HAL_TIM_OC_Start_IT+0x90>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	2b01      	cmp	r3, #1
 800e482:	bf14      	ite	ne
 800e484:	2301      	movne	r3, #1
 800e486:	2300      	moveq	r3, #0
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	e008      	b.n	800e49e <HAL_TIM_OC_Start_IT+0xa2>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e492:	b2db      	uxtb	r3, r3
 800e494:	2b01      	cmp	r3, #1
 800e496:	bf14      	ite	ne
 800e498:	2301      	movne	r3, #1
 800e49a:	2300      	moveq	r3, #0
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e0ec      	b.n	800e680 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d104      	bne.n	800e4b6 <HAL_TIM_OC_Start_IT+0xba>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2202      	movs	r2, #2
 800e4b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4b4:	e023      	b.n	800e4fe <HAL_TIM_OC_Start_IT+0x102>
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	2b04      	cmp	r3, #4
 800e4ba:	d104      	bne.n	800e4c6 <HAL_TIM_OC_Start_IT+0xca>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2202      	movs	r2, #2
 800e4c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e4c4:	e01b      	b.n	800e4fe <HAL_TIM_OC_Start_IT+0x102>
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	2b08      	cmp	r3, #8
 800e4ca:	d104      	bne.n	800e4d6 <HAL_TIM_OC_Start_IT+0xda>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2202      	movs	r2, #2
 800e4d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e4d4:	e013      	b.n	800e4fe <HAL_TIM_OC_Start_IT+0x102>
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	2b0c      	cmp	r3, #12
 800e4da:	d104      	bne.n	800e4e6 <HAL_TIM_OC_Start_IT+0xea>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2202      	movs	r2, #2
 800e4e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e4e4:	e00b      	b.n	800e4fe <HAL_TIM_OC_Start_IT+0x102>
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	2b10      	cmp	r3, #16
 800e4ea:	d104      	bne.n	800e4f6 <HAL_TIM_OC_Start_IT+0xfa>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2202      	movs	r2, #2
 800e4f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e4f4:	e003      	b.n	800e4fe <HAL_TIM_OC_Start_IT+0x102>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2202      	movs	r2, #2
 800e4fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b0c      	cmp	r3, #12
 800e502:	d841      	bhi.n	800e588 <HAL_TIM_OC_Start_IT+0x18c>
 800e504:	a201      	add	r2, pc, #4	; (adr r2, 800e50c <HAL_TIM_OC_Start_IT+0x110>)
 800e506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50a:	bf00      	nop
 800e50c:	0800e541 	.word	0x0800e541
 800e510:	0800e589 	.word	0x0800e589
 800e514:	0800e589 	.word	0x0800e589
 800e518:	0800e589 	.word	0x0800e589
 800e51c:	0800e553 	.word	0x0800e553
 800e520:	0800e589 	.word	0x0800e589
 800e524:	0800e589 	.word	0x0800e589
 800e528:	0800e589 	.word	0x0800e589
 800e52c:	0800e565 	.word	0x0800e565
 800e530:	0800e589 	.word	0x0800e589
 800e534:	0800e589 	.word	0x0800e589
 800e538:	0800e589 	.word	0x0800e589
 800e53c:	0800e577 	.word	0x0800e577
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	68da      	ldr	r2, [r3, #12]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f042 0202 	orr.w	r2, r2, #2
 800e54e:	60da      	str	r2, [r3, #12]
      break;
 800e550:	e01d      	b.n	800e58e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	68da      	ldr	r2, [r3, #12]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f042 0204 	orr.w	r2, r2, #4
 800e560:	60da      	str	r2, [r3, #12]
      break;
 800e562:	e014      	b.n	800e58e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	68da      	ldr	r2, [r3, #12]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f042 0208 	orr.w	r2, r2, #8
 800e572:	60da      	str	r2, [r3, #12]
      break;
 800e574:	e00b      	b.n	800e58e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	68da      	ldr	r2, [r3, #12]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f042 0210 	orr.w	r2, r2, #16
 800e584:	60da      	str	r2, [r3, #12]
      break;
 800e586:	e002      	b.n	800e58e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e588:	2301      	movs	r3, #1
 800e58a:	73fb      	strb	r3, [r7, #15]
      break;
 800e58c:	bf00      	nop
  }

  if (status == HAL_OK)
 800e58e:	7bfb      	ldrb	r3, [r7, #15]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d174      	bne.n	800e67e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2201      	movs	r2, #1
 800e59a:	6839      	ldr	r1, [r7, #0]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f001 f917 	bl	800f7d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4a38      	ldr	r2, [pc, #224]	; (800e688 <HAL_TIM_OC_Start_IT+0x28c>)
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d013      	beq.n	800e5d4 <HAL_TIM_OC_Start_IT+0x1d8>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a36      	ldr	r2, [pc, #216]	; (800e68c <HAL_TIM_OC_Start_IT+0x290>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d00e      	beq.n	800e5d4 <HAL_TIM_OC_Start_IT+0x1d8>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a35      	ldr	r2, [pc, #212]	; (800e690 <HAL_TIM_OC_Start_IT+0x294>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d009      	beq.n	800e5d4 <HAL_TIM_OC_Start_IT+0x1d8>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a33      	ldr	r2, [pc, #204]	; (800e694 <HAL_TIM_OC_Start_IT+0x298>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d004      	beq.n	800e5d4 <HAL_TIM_OC_Start_IT+0x1d8>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	4a32      	ldr	r2, [pc, #200]	; (800e698 <HAL_TIM_OC_Start_IT+0x29c>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d101      	bne.n	800e5d8 <HAL_TIM_OC_Start_IT+0x1dc>
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	e000      	b.n	800e5da <HAL_TIM_OC_Start_IT+0x1de>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d007      	beq.n	800e5ee <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e5ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4a25      	ldr	r2, [pc, #148]	; (800e688 <HAL_TIM_OC_Start_IT+0x28c>)
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d022      	beq.n	800e63e <HAL_TIM_OC_Start_IT+0x242>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e600:	d01d      	beq.n	800e63e <HAL_TIM_OC_Start_IT+0x242>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	4a25      	ldr	r2, [pc, #148]	; (800e69c <HAL_TIM_OC_Start_IT+0x2a0>)
 800e608:	4293      	cmp	r3, r2
 800e60a:	d018      	beq.n	800e63e <HAL_TIM_OC_Start_IT+0x242>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a23      	ldr	r2, [pc, #140]	; (800e6a0 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d013      	beq.n	800e63e <HAL_TIM_OC_Start_IT+0x242>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4a22      	ldr	r2, [pc, #136]	; (800e6a4 <HAL_TIM_OC_Start_IT+0x2a8>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d00e      	beq.n	800e63e <HAL_TIM_OC_Start_IT+0x242>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4a19      	ldr	r2, [pc, #100]	; (800e68c <HAL_TIM_OC_Start_IT+0x290>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d009      	beq.n	800e63e <HAL_TIM_OC_Start_IT+0x242>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	4a1e      	ldr	r2, [pc, #120]	; (800e6a8 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d004      	beq.n	800e63e <HAL_TIM_OC_Start_IT+0x242>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4a15      	ldr	r2, [pc, #84]	; (800e690 <HAL_TIM_OC_Start_IT+0x294>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d115      	bne.n	800e66a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	689a      	ldr	r2, [r3, #8]
 800e644:	4b19      	ldr	r3, [pc, #100]	; (800e6ac <HAL_TIM_OC_Start_IT+0x2b0>)
 800e646:	4013      	ands	r3, r2
 800e648:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	2b06      	cmp	r3, #6
 800e64e:	d015      	beq.n	800e67c <HAL_TIM_OC_Start_IT+0x280>
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e656:	d011      	beq.n	800e67c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f042 0201 	orr.w	r2, r2, #1
 800e666:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e668:	e008      	b.n	800e67c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f042 0201 	orr.w	r2, r2, #1
 800e678:	601a      	str	r2, [r3, #0]
 800e67a:	e000      	b.n	800e67e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e67c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3710      	adds	r7, #16
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	40010000 	.word	0x40010000
 800e68c:	40010400 	.word	0x40010400
 800e690:	40014000 	.word	0x40014000
 800e694:	40014400 	.word	0x40014400
 800e698:	40014800 	.word	0x40014800
 800e69c:	40000400 	.word	0x40000400
 800e6a0:	40000800 	.word	0x40000800
 800e6a4:	40000c00 	.word	0x40000c00
 800e6a8:	40001800 	.word	0x40001800
 800e6ac:	00010007 	.word	0x00010007

0800e6b0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	2b0c      	cmp	r3, #12
 800e6c2:	d841      	bhi.n	800e748 <HAL_TIM_OC_Stop_IT+0x98>
 800e6c4:	a201      	add	r2, pc, #4	; (adr r2, 800e6cc <HAL_TIM_OC_Stop_IT+0x1c>)
 800e6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ca:	bf00      	nop
 800e6cc:	0800e701 	.word	0x0800e701
 800e6d0:	0800e749 	.word	0x0800e749
 800e6d4:	0800e749 	.word	0x0800e749
 800e6d8:	0800e749 	.word	0x0800e749
 800e6dc:	0800e713 	.word	0x0800e713
 800e6e0:	0800e749 	.word	0x0800e749
 800e6e4:	0800e749 	.word	0x0800e749
 800e6e8:	0800e749 	.word	0x0800e749
 800e6ec:	0800e725 	.word	0x0800e725
 800e6f0:	0800e749 	.word	0x0800e749
 800e6f4:	0800e749 	.word	0x0800e749
 800e6f8:	0800e749 	.word	0x0800e749
 800e6fc:	0800e737 	.word	0x0800e737
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	68da      	ldr	r2, [r3, #12]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f022 0202 	bic.w	r2, r2, #2
 800e70e:	60da      	str	r2, [r3, #12]
      break;
 800e710:	e01d      	b.n	800e74e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68da      	ldr	r2, [r3, #12]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f022 0204 	bic.w	r2, r2, #4
 800e720:	60da      	str	r2, [r3, #12]
      break;
 800e722:	e014      	b.n	800e74e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	68da      	ldr	r2, [r3, #12]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f022 0208 	bic.w	r2, r2, #8
 800e732:	60da      	str	r2, [r3, #12]
      break;
 800e734:	e00b      	b.n	800e74e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	68da      	ldr	r2, [r3, #12]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f022 0210 	bic.w	r2, r2, #16
 800e744:	60da      	str	r2, [r3, #12]
      break;
 800e746:	e002      	b.n	800e74e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e748:	2301      	movs	r3, #1
 800e74a:	73fb      	strb	r3, [r7, #15]
      break;
 800e74c:	bf00      	nop
  }

  if (status == HAL_OK)
 800e74e:	7bfb      	ldrb	r3, [r7, #15]
 800e750:	2b00      	cmp	r3, #0
 800e752:	f040 8081 	bne.w	800e858 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2200      	movs	r2, #0
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	4618      	mov	r0, r3
 800e760:	f001 f836 	bl	800f7d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4a3e      	ldr	r2, [pc, #248]	; (800e864 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d013      	beq.n	800e796 <HAL_TIM_OC_Stop_IT+0xe6>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	4a3d      	ldr	r2, [pc, #244]	; (800e868 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d00e      	beq.n	800e796 <HAL_TIM_OC_Stop_IT+0xe6>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4a3b      	ldr	r2, [pc, #236]	; (800e86c <HAL_TIM_OC_Stop_IT+0x1bc>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d009      	beq.n	800e796 <HAL_TIM_OC_Stop_IT+0xe6>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	4a3a      	ldr	r2, [pc, #232]	; (800e870 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d004      	beq.n	800e796 <HAL_TIM_OC_Stop_IT+0xe6>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a38      	ldr	r2, [pc, #224]	; (800e874 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d101      	bne.n	800e79a <HAL_TIM_OC_Stop_IT+0xea>
 800e796:	2301      	movs	r3, #1
 800e798:	e000      	b.n	800e79c <HAL_TIM_OC_Stop_IT+0xec>
 800e79a:	2300      	movs	r3, #0
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d017      	beq.n	800e7d0 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	6a1a      	ldr	r2, [r3, #32]
 800e7a6:	f241 1311 	movw	r3, #4369	; 0x1111
 800e7aa:	4013      	ands	r3, r2
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d10f      	bne.n	800e7d0 <HAL_TIM_OC_Stop_IT+0x120>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	6a1a      	ldr	r2, [r3, #32]
 800e7b6:	f240 4344 	movw	r3, #1092	; 0x444
 800e7ba:	4013      	ands	r3, r2
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d107      	bne.n	800e7d0 <HAL_TIM_OC_Stop_IT+0x120>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e7ce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	6a1a      	ldr	r2, [r3, #32]
 800e7d6:	f241 1311 	movw	r3, #4369	; 0x1111
 800e7da:	4013      	ands	r3, r2
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10f      	bne.n	800e800 <HAL_TIM_OC_Stop_IT+0x150>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	6a1a      	ldr	r2, [r3, #32]
 800e7e6:	f240 4344 	movw	r3, #1092	; 0x444
 800e7ea:	4013      	ands	r3, r2
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d107      	bne.n	800e800 <HAL_TIM_OC_Stop_IT+0x150>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	681a      	ldr	r2, [r3, #0]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f022 0201 	bic.w	r2, r2, #1
 800e7fe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d104      	bne.n	800e810 <HAL_TIM_OC_Stop_IT+0x160>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2201      	movs	r2, #1
 800e80a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e80e:	e023      	b.n	800e858 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	2b04      	cmp	r3, #4
 800e814:	d104      	bne.n	800e820 <HAL_TIM_OC_Stop_IT+0x170>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2201      	movs	r2, #1
 800e81a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e81e:	e01b      	b.n	800e858 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	2b08      	cmp	r3, #8
 800e824:	d104      	bne.n	800e830 <HAL_TIM_OC_Stop_IT+0x180>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2201      	movs	r2, #1
 800e82a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e82e:	e013      	b.n	800e858 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	2b0c      	cmp	r3, #12
 800e834:	d104      	bne.n	800e840 <HAL_TIM_OC_Stop_IT+0x190>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2201      	movs	r2, #1
 800e83a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e83e:	e00b      	b.n	800e858 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	2b10      	cmp	r3, #16
 800e844:	d104      	bne.n	800e850 <HAL_TIM_OC_Stop_IT+0x1a0>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2201      	movs	r2, #1
 800e84a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e84e:	e003      	b.n	800e858 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2201      	movs	r2, #1
 800e854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800e858:	7bfb      	ldrb	r3, [r7, #15]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	40010000 	.word	0x40010000
 800e868:	40010400 	.word	0x40010400
 800e86c:	40014000 	.word	0x40014000
 800e870:	40014400 	.word	0x40014400
 800e874:	40014800 	.word	0x40014800

0800e878 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d101      	bne.n	800e88a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e886:	2301      	movs	r3, #1
 800e888:	e049      	b.n	800e91e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e890:	b2db      	uxtb	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d106      	bne.n	800e8a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 f841 	bl	800e926 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2202      	movs	r2, #2
 800e8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	3304      	adds	r3, #4
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	4610      	mov	r0, r2
 800e8b8:	f000 fb70 	bl	800ef9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2201      	movs	r2, #1
 800e8c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2201      	movs	r2, #1
 800e900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2201      	movs	r2, #1
 800e908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2201      	movs	r2, #1
 800e910:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3708      	adds	r7, #8
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e926:	b480      	push	{r7}
 800e928:	b083      	sub	sp, #12
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e92e:	bf00      	nop
 800e930:	370c      	adds	r7, #12
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr

0800e93a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b084      	sub	sp, #16
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	691b      	ldr	r3, [r3, #16]
 800e950:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	f003 0302 	and.w	r3, r3, #2
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d020      	beq.n	800e99e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f003 0302 	and.w	r3, r3, #2
 800e962:	2b00      	cmp	r3, #0
 800e964:	d01b      	beq.n	800e99e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f06f 0202 	mvn.w	r2, #2
 800e96e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2201      	movs	r2, #1
 800e974:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	699b      	ldr	r3, [r3, #24]
 800e97c:	f003 0303 	and.w	r3, r3, #3
 800e980:	2b00      	cmp	r3, #0
 800e982:	d003      	beq.n	800e98c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f000 faeb 	bl	800ef60 <HAL_TIM_IC_CaptureCallback>
 800e98a:	e005      	b.n	800e998 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f7f1 fe29 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f000 faee 	bl	800ef74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	f003 0304 	and.w	r3, r3, #4
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d020      	beq.n	800e9ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f003 0304 	and.w	r3, r3, #4
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d01b      	beq.n	800e9ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f06f 0204 	mvn.w	r2, #4
 800e9ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2202      	movs	r2, #2
 800e9c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	699b      	ldr	r3, [r3, #24]
 800e9c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d003      	beq.n	800e9d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f000 fac5 	bl	800ef60 <HAL_TIM_IC_CaptureCallback>
 800e9d6:	e005      	b.n	800e9e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7f1 fe03 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f000 fac8 	bl	800ef74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	f003 0308 	and.w	r3, r3, #8
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d020      	beq.n	800ea36 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f003 0308 	and.w	r3, r3, #8
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d01b      	beq.n	800ea36 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f06f 0208 	mvn.w	r2, #8
 800ea06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2204      	movs	r2, #4
 800ea0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	69db      	ldr	r3, [r3, #28]
 800ea14:	f003 0303 	and.w	r3, r3, #3
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d003      	beq.n	800ea24 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f000 fa9f 	bl	800ef60 <HAL_TIM_IC_CaptureCallback>
 800ea22:	e005      	b.n	800ea30 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7f1 fddd 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 faa2 	bl	800ef74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2200      	movs	r2, #0
 800ea34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	f003 0310 	and.w	r3, r3, #16
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d020      	beq.n	800ea82 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	f003 0310 	and.w	r3, r3, #16
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d01b      	beq.n	800ea82 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f06f 0210 	mvn.w	r2, #16
 800ea52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2208      	movs	r2, #8
 800ea58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	69db      	ldr	r3, [r3, #28]
 800ea60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d003      	beq.n	800ea70 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 fa79 	bl	800ef60 <HAL_TIM_IC_CaptureCallback>
 800ea6e:	e005      	b.n	800ea7c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f7f1 fdb7 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 fa7c 	bl	800ef74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	f003 0301 	and.w	r3, r3, #1
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00c      	beq.n	800eaa6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f003 0301 	and.w	r3, r3, #1
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d007      	beq.n	800eaa6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f06f 0201 	mvn.w	r2, #1
 800ea9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f7f4 f82f 	bl	8002b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d104      	bne.n	800eaba <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00c      	beq.n	800ead4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d007      	beq.n	800ead4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800eacc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 ffba 	bl	800fa48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00c      	beq.n	800eaf8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d007      	beq.n	800eaf8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800eaf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 ffb2 	bl	800fa5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d00c      	beq.n	800eb1c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d007      	beq.n	800eb1c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eb14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f000 fa36 	bl	800ef88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	f003 0320 	and.w	r3, r3, #32
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00c      	beq.n	800eb40 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f003 0320 	and.w	r3, r3, #32
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d007      	beq.n	800eb40 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f06f 0220 	mvn.w	r2, #32
 800eb38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 ff7a 	bl	800fa34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eb40:	bf00      	nop
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b086      	sub	sp, #24
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	60f8      	str	r0, [r7, #12]
 800eb50:	60b9      	str	r1, [r7, #8]
 800eb52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb54:	2300      	movs	r3, #0
 800eb56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d101      	bne.n	800eb66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eb62:	2302      	movs	r3, #2
 800eb64:	e0ff      	b.n	800ed66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2201      	movs	r2, #1
 800eb6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2b14      	cmp	r3, #20
 800eb72:	f200 80f0 	bhi.w	800ed56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eb76:	a201      	add	r2, pc, #4	; (adr r2, 800eb7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb7c:	0800ebd1 	.word	0x0800ebd1
 800eb80:	0800ed57 	.word	0x0800ed57
 800eb84:	0800ed57 	.word	0x0800ed57
 800eb88:	0800ed57 	.word	0x0800ed57
 800eb8c:	0800ec11 	.word	0x0800ec11
 800eb90:	0800ed57 	.word	0x0800ed57
 800eb94:	0800ed57 	.word	0x0800ed57
 800eb98:	0800ed57 	.word	0x0800ed57
 800eb9c:	0800ec53 	.word	0x0800ec53
 800eba0:	0800ed57 	.word	0x0800ed57
 800eba4:	0800ed57 	.word	0x0800ed57
 800eba8:	0800ed57 	.word	0x0800ed57
 800ebac:	0800ec93 	.word	0x0800ec93
 800ebb0:	0800ed57 	.word	0x0800ed57
 800ebb4:	0800ed57 	.word	0x0800ed57
 800ebb8:	0800ed57 	.word	0x0800ed57
 800ebbc:	0800ecd5 	.word	0x0800ecd5
 800ebc0:	0800ed57 	.word	0x0800ed57
 800ebc4:	0800ed57 	.word	0x0800ed57
 800ebc8:	0800ed57 	.word	0x0800ed57
 800ebcc:	0800ed15 	.word	0x0800ed15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	68b9      	ldr	r1, [r7, #8]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f000 fa86 	bl	800f0e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	699a      	ldr	r2, [r3, #24]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f042 0208 	orr.w	r2, r2, #8
 800ebea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	699a      	ldr	r2, [r3, #24]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f022 0204 	bic.w	r2, r2, #4
 800ebfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	6999      	ldr	r1, [r3, #24]
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	691a      	ldr	r2, [r3, #16]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	430a      	orrs	r2, r1
 800ec0c:	619a      	str	r2, [r3, #24]
      break;
 800ec0e:	e0a5      	b.n	800ed5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	68b9      	ldr	r1, [r7, #8]
 800ec16:	4618      	mov	r0, r3
 800ec18:	f000 faf6 	bl	800f208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	699a      	ldr	r2, [r3, #24]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	699a      	ldr	r2, [r3, #24]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	6999      	ldr	r1, [r3, #24]
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	691b      	ldr	r3, [r3, #16]
 800ec46:	021a      	lsls	r2, r3, #8
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	430a      	orrs	r2, r1
 800ec4e:	619a      	str	r2, [r3, #24]
      break;
 800ec50:	e084      	b.n	800ed5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	68b9      	ldr	r1, [r7, #8]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f000 fb5f 	bl	800f31c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	69da      	ldr	r2, [r3, #28]
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f042 0208 	orr.w	r2, r2, #8
 800ec6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	69da      	ldr	r2, [r3, #28]
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f022 0204 	bic.w	r2, r2, #4
 800ec7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	69d9      	ldr	r1, [r3, #28]
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	691a      	ldr	r2, [r3, #16]
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	430a      	orrs	r2, r1
 800ec8e:	61da      	str	r2, [r3, #28]
      break;
 800ec90:	e064      	b.n	800ed5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	68b9      	ldr	r1, [r7, #8]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f000 fbc7 	bl	800f42c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	69da      	ldr	r2, [r3, #28]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ecac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	69da      	ldr	r2, [r3, #28]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ecbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	69d9      	ldr	r1, [r3, #28]
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	691b      	ldr	r3, [r3, #16]
 800ecc8:	021a      	lsls	r2, r3, #8
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	430a      	orrs	r2, r1
 800ecd0:	61da      	str	r2, [r3, #28]
      break;
 800ecd2:	e043      	b.n	800ed5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	68b9      	ldr	r1, [r7, #8]
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f000 fc10 	bl	800f500 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f042 0208 	orr.w	r2, r2, #8
 800ecee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f022 0204 	bic.w	r2, r2, #4
 800ecfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	691a      	ldr	r2, [r3, #16]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	430a      	orrs	r2, r1
 800ed10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ed12:	e023      	b.n	800ed5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	68b9      	ldr	r1, [r7, #8]
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f000 fc54 	bl	800f5c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	021a      	lsls	r2, r3, #8
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	430a      	orrs	r2, r1
 800ed52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ed54:	e002      	b.n	800ed5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ed56:	2301      	movs	r3, #1
 800ed58:	75fb      	strb	r3, [r7, #23]
      break;
 800ed5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ed64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3718      	adds	r7, #24
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop

0800ed70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed84:	2b01      	cmp	r3, #1
 800ed86:	d101      	bne.n	800ed8c <HAL_TIM_ConfigClockSource+0x1c>
 800ed88:	2302      	movs	r3, #2
 800ed8a:	e0dc      	b.n	800ef46 <HAL_TIM_ConfigClockSource+0x1d6>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2201      	movs	r2, #1
 800ed90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2202      	movs	r2, #2
 800ed98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	689b      	ldr	r3, [r3, #8]
 800eda2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eda4:	68ba      	ldr	r2, [r7, #8]
 800eda6:	4b6a      	ldr	r3, [pc, #424]	; (800ef50 <HAL_TIM_ConfigClockSource+0x1e0>)
 800eda8:	4013      	ands	r3, r2
 800edaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800edb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	68ba      	ldr	r2, [r7, #8]
 800edba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a64      	ldr	r2, [pc, #400]	; (800ef54 <HAL_TIM_ConfigClockSource+0x1e4>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	f000 80a9 	beq.w	800ef1a <HAL_TIM_ConfigClockSource+0x1aa>
 800edc8:	4a62      	ldr	r2, [pc, #392]	; (800ef54 <HAL_TIM_ConfigClockSource+0x1e4>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	f200 80ae 	bhi.w	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800edd0:	4a61      	ldr	r2, [pc, #388]	; (800ef58 <HAL_TIM_ConfigClockSource+0x1e8>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	f000 80a1 	beq.w	800ef1a <HAL_TIM_ConfigClockSource+0x1aa>
 800edd8:	4a5f      	ldr	r2, [pc, #380]	; (800ef58 <HAL_TIM_ConfigClockSource+0x1e8>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	f200 80a6 	bhi.w	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ede0:	4a5e      	ldr	r2, [pc, #376]	; (800ef5c <HAL_TIM_ConfigClockSource+0x1ec>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	f000 8099 	beq.w	800ef1a <HAL_TIM_ConfigClockSource+0x1aa>
 800ede8:	4a5c      	ldr	r2, [pc, #368]	; (800ef5c <HAL_TIM_ConfigClockSource+0x1ec>)
 800edea:	4293      	cmp	r3, r2
 800edec:	f200 809e 	bhi.w	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800edf0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800edf4:	f000 8091 	beq.w	800ef1a <HAL_TIM_ConfigClockSource+0x1aa>
 800edf8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800edfc:	f200 8096 	bhi.w	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ee00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee04:	f000 8089 	beq.w	800ef1a <HAL_TIM_ConfigClockSource+0x1aa>
 800ee08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee0c:	f200 808e 	bhi.w	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ee10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee14:	d03e      	beq.n	800ee94 <HAL_TIM_ConfigClockSource+0x124>
 800ee16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee1a:	f200 8087 	bhi.w	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ee1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee22:	f000 8086 	beq.w	800ef32 <HAL_TIM_ConfigClockSource+0x1c2>
 800ee26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee2a:	d87f      	bhi.n	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ee2c:	2b70      	cmp	r3, #112	; 0x70
 800ee2e:	d01a      	beq.n	800ee66 <HAL_TIM_ConfigClockSource+0xf6>
 800ee30:	2b70      	cmp	r3, #112	; 0x70
 800ee32:	d87b      	bhi.n	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ee34:	2b60      	cmp	r3, #96	; 0x60
 800ee36:	d050      	beq.n	800eeda <HAL_TIM_ConfigClockSource+0x16a>
 800ee38:	2b60      	cmp	r3, #96	; 0x60
 800ee3a:	d877      	bhi.n	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ee3c:	2b50      	cmp	r3, #80	; 0x50
 800ee3e:	d03c      	beq.n	800eeba <HAL_TIM_ConfigClockSource+0x14a>
 800ee40:	2b50      	cmp	r3, #80	; 0x50
 800ee42:	d873      	bhi.n	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ee44:	2b40      	cmp	r3, #64	; 0x40
 800ee46:	d058      	beq.n	800eefa <HAL_TIM_ConfigClockSource+0x18a>
 800ee48:	2b40      	cmp	r3, #64	; 0x40
 800ee4a:	d86f      	bhi.n	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ee4c:	2b30      	cmp	r3, #48	; 0x30
 800ee4e:	d064      	beq.n	800ef1a <HAL_TIM_ConfigClockSource+0x1aa>
 800ee50:	2b30      	cmp	r3, #48	; 0x30
 800ee52:	d86b      	bhi.n	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ee54:	2b20      	cmp	r3, #32
 800ee56:	d060      	beq.n	800ef1a <HAL_TIM_ConfigClockSource+0x1aa>
 800ee58:	2b20      	cmp	r3, #32
 800ee5a:	d867      	bhi.n	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d05c      	beq.n	800ef1a <HAL_TIM_ConfigClockSource+0x1aa>
 800ee60:	2b10      	cmp	r3, #16
 800ee62:	d05a      	beq.n	800ef1a <HAL_TIM_ConfigClockSource+0x1aa>
 800ee64:	e062      	b.n	800ef2c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6818      	ldr	r0, [r3, #0]
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	6899      	ldr	r1, [r3, #8]
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	685a      	ldr	r2, [r3, #4]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	f000 fc8b 	bl	800f790 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	689b      	ldr	r3, [r3, #8]
 800ee80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ee88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	68ba      	ldr	r2, [r7, #8]
 800ee90:	609a      	str	r2, [r3, #8]
      break;
 800ee92:	e04f      	b.n	800ef34 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6818      	ldr	r0, [r3, #0]
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	6899      	ldr	r1, [r3, #8]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	685a      	ldr	r2, [r3, #4]
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	68db      	ldr	r3, [r3, #12]
 800eea4:	f000 fc74 	bl	800f790 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	689a      	ldr	r2, [r3, #8]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eeb6:	609a      	str	r2, [r3, #8]
      break;
 800eeb8:	e03c      	b.n	800ef34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6818      	ldr	r0, [r3, #0]
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	6859      	ldr	r1, [r3, #4]
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	461a      	mov	r2, r3
 800eec8:	f000 fbe4 	bl	800f694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	2150      	movs	r1, #80	; 0x50
 800eed2:	4618      	mov	r0, r3
 800eed4:	f000 fc3e 	bl	800f754 <TIM_ITRx_SetConfig>
      break;
 800eed8:	e02c      	b.n	800ef34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6818      	ldr	r0, [r3, #0]
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	6859      	ldr	r1, [r3, #4]
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	68db      	ldr	r3, [r3, #12]
 800eee6:	461a      	mov	r2, r3
 800eee8:	f000 fc03 	bl	800f6f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	2160      	movs	r1, #96	; 0x60
 800eef2:	4618      	mov	r0, r3
 800eef4:	f000 fc2e 	bl	800f754 <TIM_ITRx_SetConfig>
      break;
 800eef8:	e01c      	b.n	800ef34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6818      	ldr	r0, [r3, #0]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	6859      	ldr	r1, [r3, #4]
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	461a      	mov	r2, r3
 800ef08:	f000 fbc4 	bl	800f694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	2140      	movs	r1, #64	; 0x40
 800ef12:	4618      	mov	r0, r3
 800ef14:	f000 fc1e 	bl	800f754 <TIM_ITRx_SetConfig>
      break;
 800ef18:	e00c      	b.n	800ef34 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4619      	mov	r1, r3
 800ef24:	4610      	mov	r0, r2
 800ef26:	f000 fc15 	bl	800f754 <TIM_ITRx_SetConfig>
      break;
 800ef2a:	e003      	b.n	800ef34 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ef30:	e000      	b.n	800ef34 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ef32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ef44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3710      	adds	r7, #16
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	ffceff88 	.word	0xffceff88
 800ef54:	00100040 	.word	0x00100040
 800ef58:	00100030 	.word	0x00100030
 800ef5c:	00100020 	.word	0x00100020

0800ef60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ef68:	bf00      	nop
 800ef6a:	370c      	adds	r7, #12
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ef7c:	bf00      	nop
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ef90:	bf00      	nop
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4a46      	ldr	r2, [pc, #280]	; (800f0c8 <TIM_Base_SetConfig+0x12c>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d013      	beq.n	800efdc <TIM_Base_SetConfig+0x40>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efba:	d00f      	beq.n	800efdc <TIM_Base_SetConfig+0x40>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4a43      	ldr	r2, [pc, #268]	; (800f0cc <TIM_Base_SetConfig+0x130>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d00b      	beq.n	800efdc <TIM_Base_SetConfig+0x40>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4a42      	ldr	r2, [pc, #264]	; (800f0d0 <TIM_Base_SetConfig+0x134>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d007      	beq.n	800efdc <TIM_Base_SetConfig+0x40>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4a41      	ldr	r2, [pc, #260]	; (800f0d4 <TIM_Base_SetConfig+0x138>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d003      	beq.n	800efdc <TIM_Base_SetConfig+0x40>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a40      	ldr	r2, [pc, #256]	; (800f0d8 <TIM_Base_SetConfig+0x13c>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d108      	bne.n	800efee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	4313      	orrs	r3, r2
 800efec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4a35      	ldr	r2, [pc, #212]	; (800f0c8 <TIM_Base_SetConfig+0x12c>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d01f      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800effc:	d01b      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4a32      	ldr	r2, [pc, #200]	; (800f0cc <TIM_Base_SetConfig+0x130>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d017      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	4a31      	ldr	r2, [pc, #196]	; (800f0d0 <TIM_Base_SetConfig+0x134>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d013      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	4a30      	ldr	r2, [pc, #192]	; (800f0d4 <TIM_Base_SetConfig+0x138>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d00f      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4a2f      	ldr	r2, [pc, #188]	; (800f0d8 <TIM_Base_SetConfig+0x13c>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d00b      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	4a2e      	ldr	r2, [pc, #184]	; (800f0dc <TIM_Base_SetConfig+0x140>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d007      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4a2d      	ldr	r2, [pc, #180]	; (800f0e0 <TIM_Base_SetConfig+0x144>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d003      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	4a2c      	ldr	r2, [pc, #176]	; (800f0e4 <TIM_Base_SetConfig+0x148>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d108      	bne.n	800f048 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f03c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	68fa      	ldr	r2, [r7, #12]
 800f044:	4313      	orrs	r3, r2
 800f046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	695b      	ldr	r3, [r3, #20]
 800f052:	4313      	orrs	r3, r2
 800f054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	689a      	ldr	r2, [r3, #8]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4a16      	ldr	r2, [pc, #88]	; (800f0c8 <TIM_Base_SetConfig+0x12c>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d00f      	beq.n	800f094 <TIM_Base_SetConfig+0xf8>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4a18      	ldr	r2, [pc, #96]	; (800f0d8 <TIM_Base_SetConfig+0x13c>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d00b      	beq.n	800f094 <TIM_Base_SetConfig+0xf8>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4a17      	ldr	r2, [pc, #92]	; (800f0dc <TIM_Base_SetConfig+0x140>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d007      	beq.n	800f094 <TIM_Base_SetConfig+0xf8>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a16      	ldr	r2, [pc, #88]	; (800f0e0 <TIM_Base_SetConfig+0x144>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d003      	beq.n	800f094 <TIM_Base_SetConfig+0xf8>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a15      	ldr	r2, [pc, #84]	; (800f0e4 <TIM_Base_SetConfig+0x148>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d103      	bne.n	800f09c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	691a      	ldr	r2, [r3, #16]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	f003 0301 	and.w	r3, r3, #1
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d105      	bne.n	800f0ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	f023 0201 	bic.w	r2, r3, #1
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	611a      	str	r2, [r3, #16]
  }
}
 800f0ba:	bf00      	nop
 800f0bc:	3714      	adds	r7, #20
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	40010000 	.word	0x40010000
 800f0cc:	40000400 	.word	0x40000400
 800f0d0:	40000800 	.word	0x40000800
 800f0d4:	40000c00 	.word	0x40000c00
 800f0d8:	40010400 	.word	0x40010400
 800f0dc:	40014000 	.word	0x40014000
 800f0e0:	40014400 	.word	0x40014400
 800f0e4:	40014800 	.word	0x40014800

0800f0e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b087      	sub	sp, #28
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6a1b      	ldr	r3, [r3, #32]
 800f0f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6a1b      	ldr	r3, [r3, #32]
 800f0fc:	f023 0201 	bic.w	r2, r3, #1
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	699b      	ldr	r3, [r3, #24]
 800f10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f110:	68fa      	ldr	r2, [r7, #12]
 800f112:	4b37      	ldr	r3, [pc, #220]	; (800f1f0 <TIM_OC1_SetConfig+0x108>)
 800f114:	4013      	ands	r3, r2
 800f116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f023 0303 	bic.w	r3, r3, #3
 800f11e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	4313      	orrs	r3, r2
 800f128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	f023 0302 	bic.w	r3, r3, #2
 800f130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	697a      	ldr	r2, [r7, #20]
 800f138:	4313      	orrs	r3, r2
 800f13a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	4a2d      	ldr	r2, [pc, #180]	; (800f1f4 <TIM_OC1_SetConfig+0x10c>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d00f      	beq.n	800f164 <TIM_OC1_SetConfig+0x7c>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4a2c      	ldr	r2, [pc, #176]	; (800f1f8 <TIM_OC1_SetConfig+0x110>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d00b      	beq.n	800f164 <TIM_OC1_SetConfig+0x7c>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4a2b      	ldr	r2, [pc, #172]	; (800f1fc <TIM_OC1_SetConfig+0x114>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d007      	beq.n	800f164 <TIM_OC1_SetConfig+0x7c>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a2a      	ldr	r2, [pc, #168]	; (800f200 <TIM_OC1_SetConfig+0x118>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d003      	beq.n	800f164 <TIM_OC1_SetConfig+0x7c>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4a29      	ldr	r2, [pc, #164]	; (800f204 <TIM_OC1_SetConfig+0x11c>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d10c      	bne.n	800f17e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	f023 0308 	bic.w	r3, r3, #8
 800f16a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	697a      	ldr	r2, [r7, #20]
 800f172:	4313      	orrs	r3, r2
 800f174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	f023 0304 	bic.w	r3, r3, #4
 800f17c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4a1c      	ldr	r2, [pc, #112]	; (800f1f4 <TIM_OC1_SetConfig+0x10c>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d00f      	beq.n	800f1a6 <TIM_OC1_SetConfig+0xbe>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4a1b      	ldr	r2, [pc, #108]	; (800f1f8 <TIM_OC1_SetConfig+0x110>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d00b      	beq.n	800f1a6 <TIM_OC1_SetConfig+0xbe>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	4a1a      	ldr	r2, [pc, #104]	; (800f1fc <TIM_OC1_SetConfig+0x114>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d007      	beq.n	800f1a6 <TIM_OC1_SetConfig+0xbe>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4a19      	ldr	r2, [pc, #100]	; (800f200 <TIM_OC1_SetConfig+0x118>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d003      	beq.n	800f1a6 <TIM_OC1_SetConfig+0xbe>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4a18      	ldr	r2, [pc, #96]	; (800f204 <TIM_OC1_SetConfig+0x11c>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d111      	bne.n	800f1ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f1ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f1b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	695b      	ldr	r3, [r3, #20]
 800f1ba:	693a      	ldr	r2, [r7, #16]
 800f1bc:	4313      	orrs	r3, r2
 800f1be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	699b      	ldr	r3, [r3, #24]
 800f1c4:	693a      	ldr	r2, [r7, #16]
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	693a      	ldr	r2, [r7, #16]
 800f1ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	68fa      	ldr	r2, [r7, #12]
 800f1d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	685a      	ldr	r2, [r3, #4]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	697a      	ldr	r2, [r7, #20]
 800f1e2:	621a      	str	r2, [r3, #32]
}
 800f1e4:	bf00      	nop
 800f1e6:	371c      	adds	r7, #28
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr
 800f1f0:	fffeff8f 	.word	0xfffeff8f
 800f1f4:	40010000 	.word	0x40010000
 800f1f8:	40010400 	.word	0x40010400
 800f1fc:	40014000 	.word	0x40014000
 800f200:	40014400 	.word	0x40014400
 800f204:	40014800 	.word	0x40014800

0800f208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f208:	b480      	push	{r7}
 800f20a:	b087      	sub	sp, #28
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a1b      	ldr	r3, [r3, #32]
 800f216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6a1b      	ldr	r3, [r3, #32]
 800f21c:	f023 0210 	bic.w	r2, r3, #16
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	699b      	ldr	r3, [r3, #24]
 800f22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	4b34      	ldr	r3, [pc, #208]	; (800f304 <TIM_OC2_SetConfig+0xfc>)
 800f234:	4013      	ands	r3, r2
 800f236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f23e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	021b      	lsls	r3, r3, #8
 800f246:	68fa      	ldr	r2, [r7, #12]
 800f248:	4313      	orrs	r3, r2
 800f24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	f023 0320 	bic.w	r3, r3, #32
 800f252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	689b      	ldr	r3, [r3, #8]
 800f258:	011b      	lsls	r3, r3, #4
 800f25a:	697a      	ldr	r2, [r7, #20]
 800f25c:	4313      	orrs	r3, r2
 800f25e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	4a29      	ldr	r2, [pc, #164]	; (800f308 <TIM_OC2_SetConfig+0x100>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d003      	beq.n	800f270 <TIM_OC2_SetConfig+0x68>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4a28      	ldr	r2, [pc, #160]	; (800f30c <TIM_OC2_SetConfig+0x104>)
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d10d      	bne.n	800f28c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	011b      	lsls	r3, r3, #4
 800f27e:	697a      	ldr	r2, [r7, #20]
 800f280:	4313      	orrs	r3, r2
 800f282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f28a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4a1e      	ldr	r2, [pc, #120]	; (800f308 <TIM_OC2_SetConfig+0x100>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d00f      	beq.n	800f2b4 <TIM_OC2_SetConfig+0xac>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4a1d      	ldr	r2, [pc, #116]	; (800f30c <TIM_OC2_SetConfig+0x104>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d00b      	beq.n	800f2b4 <TIM_OC2_SetConfig+0xac>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4a1c      	ldr	r2, [pc, #112]	; (800f310 <TIM_OC2_SetConfig+0x108>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d007      	beq.n	800f2b4 <TIM_OC2_SetConfig+0xac>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a1b      	ldr	r2, [pc, #108]	; (800f314 <TIM_OC2_SetConfig+0x10c>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d003      	beq.n	800f2b4 <TIM_OC2_SetConfig+0xac>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a1a      	ldr	r2, [pc, #104]	; (800f318 <TIM_OC2_SetConfig+0x110>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d113      	bne.n	800f2dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	695b      	ldr	r3, [r3, #20]
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	693a      	ldr	r2, [r7, #16]
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	699b      	ldr	r3, [r3, #24]
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	693a      	ldr	r2, [r7, #16]
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	693a      	ldr	r2, [r7, #16]
 800f2e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	68fa      	ldr	r2, [r7, #12]
 800f2e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	685a      	ldr	r2, [r3, #4]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	697a      	ldr	r2, [r7, #20]
 800f2f4:	621a      	str	r2, [r3, #32]
}
 800f2f6:	bf00      	nop
 800f2f8:	371c      	adds	r7, #28
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	feff8fff 	.word	0xfeff8fff
 800f308:	40010000 	.word	0x40010000
 800f30c:	40010400 	.word	0x40010400
 800f310:	40014000 	.word	0x40014000
 800f314:	40014400 	.word	0x40014400
 800f318:	40014800 	.word	0x40014800

0800f31c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b087      	sub	sp, #28
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6a1b      	ldr	r3, [r3, #32]
 800f32a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6a1b      	ldr	r3, [r3, #32]
 800f330:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	69db      	ldr	r3, [r3, #28]
 800f342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f344:	68fa      	ldr	r2, [r7, #12]
 800f346:	4b33      	ldr	r3, [pc, #204]	; (800f414 <TIM_OC3_SetConfig+0xf8>)
 800f348:	4013      	ands	r3, r2
 800f34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f023 0303 	bic.w	r3, r3, #3
 800f352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	4313      	orrs	r3, r2
 800f35c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	021b      	lsls	r3, r3, #8
 800f36c:	697a      	ldr	r2, [r7, #20]
 800f36e:	4313      	orrs	r3, r2
 800f370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	4a28      	ldr	r2, [pc, #160]	; (800f418 <TIM_OC3_SetConfig+0xfc>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d003      	beq.n	800f382 <TIM_OC3_SetConfig+0x66>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4a27      	ldr	r2, [pc, #156]	; (800f41c <TIM_OC3_SetConfig+0x100>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d10d      	bne.n	800f39e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	021b      	lsls	r3, r3, #8
 800f390:	697a      	ldr	r2, [r7, #20]
 800f392:	4313      	orrs	r3, r2
 800f394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f39c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4a1d      	ldr	r2, [pc, #116]	; (800f418 <TIM_OC3_SetConfig+0xfc>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d00f      	beq.n	800f3c6 <TIM_OC3_SetConfig+0xaa>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4a1c      	ldr	r2, [pc, #112]	; (800f41c <TIM_OC3_SetConfig+0x100>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d00b      	beq.n	800f3c6 <TIM_OC3_SetConfig+0xaa>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4a1b      	ldr	r2, [pc, #108]	; (800f420 <TIM_OC3_SetConfig+0x104>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d007      	beq.n	800f3c6 <TIM_OC3_SetConfig+0xaa>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4a1a      	ldr	r2, [pc, #104]	; (800f424 <TIM_OC3_SetConfig+0x108>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d003      	beq.n	800f3c6 <TIM_OC3_SetConfig+0xaa>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4a19      	ldr	r2, [pc, #100]	; (800f428 <TIM_OC3_SetConfig+0x10c>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d113      	bne.n	800f3ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f3d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	695b      	ldr	r3, [r3, #20]
 800f3da:	011b      	lsls	r3, r3, #4
 800f3dc:	693a      	ldr	r2, [r7, #16]
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	699b      	ldr	r3, [r3, #24]
 800f3e6:	011b      	lsls	r3, r3, #4
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	693a      	ldr	r2, [r7, #16]
 800f3f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	68fa      	ldr	r2, [r7, #12]
 800f3f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	685a      	ldr	r2, [r3, #4]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	697a      	ldr	r2, [r7, #20]
 800f406:	621a      	str	r2, [r3, #32]
}
 800f408:	bf00      	nop
 800f40a:	371c      	adds	r7, #28
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr
 800f414:	fffeff8f 	.word	0xfffeff8f
 800f418:	40010000 	.word	0x40010000
 800f41c:	40010400 	.word	0x40010400
 800f420:	40014000 	.word	0x40014000
 800f424:	40014400 	.word	0x40014400
 800f428:	40014800 	.word	0x40014800

0800f42c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b087      	sub	sp, #28
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6a1b      	ldr	r3, [r3, #32]
 800f43a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6a1b      	ldr	r3, [r3, #32]
 800f440:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	69db      	ldr	r3, [r3, #28]
 800f452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	4b24      	ldr	r3, [pc, #144]	; (800f4e8 <TIM_OC4_SetConfig+0xbc>)
 800f458:	4013      	ands	r3, r2
 800f45a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	021b      	lsls	r3, r3, #8
 800f46a:	68fa      	ldr	r2, [r7, #12]
 800f46c:	4313      	orrs	r3, r2
 800f46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	689b      	ldr	r3, [r3, #8]
 800f47c:	031b      	lsls	r3, r3, #12
 800f47e:	693a      	ldr	r2, [r7, #16]
 800f480:	4313      	orrs	r3, r2
 800f482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4a19      	ldr	r2, [pc, #100]	; (800f4ec <TIM_OC4_SetConfig+0xc0>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d00f      	beq.n	800f4ac <TIM_OC4_SetConfig+0x80>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4a18      	ldr	r2, [pc, #96]	; (800f4f0 <TIM_OC4_SetConfig+0xc4>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d00b      	beq.n	800f4ac <TIM_OC4_SetConfig+0x80>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a17      	ldr	r2, [pc, #92]	; (800f4f4 <TIM_OC4_SetConfig+0xc8>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d007      	beq.n	800f4ac <TIM_OC4_SetConfig+0x80>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4a16      	ldr	r2, [pc, #88]	; (800f4f8 <TIM_OC4_SetConfig+0xcc>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d003      	beq.n	800f4ac <TIM_OC4_SetConfig+0x80>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4a15      	ldr	r2, [pc, #84]	; (800f4fc <TIM_OC4_SetConfig+0xd0>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d109      	bne.n	800f4c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f4b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	695b      	ldr	r3, [r3, #20]
 800f4b8:	019b      	lsls	r3, r3, #6
 800f4ba:	697a      	ldr	r2, [r7, #20]
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	697a      	ldr	r2, [r7, #20]
 800f4c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	68fa      	ldr	r2, [r7, #12]
 800f4ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	685a      	ldr	r2, [r3, #4]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	693a      	ldr	r2, [r7, #16]
 800f4d8:	621a      	str	r2, [r3, #32]
}
 800f4da:	bf00      	nop
 800f4dc:	371c      	adds	r7, #28
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr
 800f4e6:	bf00      	nop
 800f4e8:	feff8fff 	.word	0xfeff8fff
 800f4ec:	40010000 	.word	0x40010000
 800f4f0:	40010400 	.word	0x40010400
 800f4f4:	40014000 	.word	0x40014000
 800f4f8:	40014400 	.word	0x40014400
 800f4fc:	40014800 	.word	0x40014800

0800f500 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f500:	b480      	push	{r7}
 800f502:	b087      	sub	sp, #28
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6a1b      	ldr	r3, [r3, #32]
 800f50e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6a1b      	ldr	r3, [r3, #32]
 800f514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	4b21      	ldr	r3, [pc, #132]	; (800f5b0 <TIM_OC5_SetConfig+0xb0>)
 800f52c:	4013      	ands	r3, r2
 800f52e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	4313      	orrs	r3, r2
 800f538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f540:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	041b      	lsls	r3, r3, #16
 800f548:	693a      	ldr	r2, [r7, #16]
 800f54a:	4313      	orrs	r3, r2
 800f54c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4a18      	ldr	r2, [pc, #96]	; (800f5b4 <TIM_OC5_SetConfig+0xb4>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d00f      	beq.n	800f576 <TIM_OC5_SetConfig+0x76>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4a17      	ldr	r2, [pc, #92]	; (800f5b8 <TIM_OC5_SetConfig+0xb8>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d00b      	beq.n	800f576 <TIM_OC5_SetConfig+0x76>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4a16      	ldr	r2, [pc, #88]	; (800f5bc <TIM_OC5_SetConfig+0xbc>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d007      	beq.n	800f576 <TIM_OC5_SetConfig+0x76>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a15      	ldr	r2, [pc, #84]	; (800f5c0 <TIM_OC5_SetConfig+0xc0>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d003      	beq.n	800f576 <TIM_OC5_SetConfig+0x76>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4a14      	ldr	r2, [pc, #80]	; (800f5c4 <TIM_OC5_SetConfig+0xc4>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d109      	bne.n	800f58a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f57c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	695b      	ldr	r3, [r3, #20]
 800f582:	021b      	lsls	r3, r3, #8
 800f584:	697a      	ldr	r2, [r7, #20]
 800f586:	4313      	orrs	r3, r2
 800f588:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	697a      	ldr	r2, [r7, #20]
 800f58e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	685a      	ldr	r2, [r3, #4]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	693a      	ldr	r2, [r7, #16]
 800f5a2:	621a      	str	r2, [r3, #32]
}
 800f5a4:	bf00      	nop
 800f5a6:	371c      	adds	r7, #28
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ae:	4770      	bx	lr
 800f5b0:	fffeff8f 	.word	0xfffeff8f
 800f5b4:	40010000 	.word	0x40010000
 800f5b8:	40010400 	.word	0x40010400
 800f5bc:	40014000 	.word	0x40014000
 800f5c0:	40014400 	.word	0x40014400
 800f5c4:	40014800 	.word	0x40014800

0800f5c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b087      	sub	sp, #28
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6a1b      	ldr	r3, [r3, #32]
 800f5d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6a1b      	ldr	r3, [r3, #32]
 800f5dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f5f0:	68fa      	ldr	r2, [r7, #12]
 800f5f2:	4b22      	ldr	r3, [pc, #136]	; (800f67c <TIM_OC6_SetConfig+0xb4>)
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	021b      	lsls	r3, r3, #8
 800f5fe:	68fa      	ldr	r2, [r7, #12]
 800f600:	4313      	orrs	r3, r2
 800f602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f60a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	689b      	ldr	r3, [r3, #8]
 800f610:	051b      	lsls	r3, r3, #20
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	4313      	orrs	r3, r2
 800f616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a19      	ldr	r2, [pc, #100]	; (800f680 <TIM_OC6_SetConfig+0xb8>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d00f      	beq.n	800f640 <TIM_OC6_SetConfig+0x78>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4a18      	ldr	r2, [pc, #96]	; (800f684 <TIM_OC6_SetConfig+0xbc>)
 800f624:	4293      	cmp	r3, r2
 800f626:	d00b      	beq.n	800f640 <TIM_OC6_SetConfig+0x78>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4a17      	ldr	r2, [pc, #92]	; (800f688 <TIM_OC6_SetConfig+0xc0>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d007      	beq.n	800f640 <TIM_OC6_SetConfig+0x78>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4a16      	ldr	r2, [pc, #88]	; (800f68c <TIM_OC6_SetConfig+0xc4>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d003      	beq.n	800f640 <TIM_OC6_SetConfig+0x78>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	4a15      	ldr	r2, [pc, #84]	; (800f690 <TIM_OC6_SetConfig+0xc8>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d109      	bne.n	800f654 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f646:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	695b      	ldr	r3, [r3, #20]
 800f64c:	029b      	lsls	r3, r3, #10
 800f64e:	697a      	ldr	r2, [r7, #20]
 800f650:	4313      	orrs	r3, r2
 800f652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	697a      	ldr	r2, [r7, #20]
 800f658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	685a      	ldr	r2, [r3, #4]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	693a      	ldr	r2, [r7, #16]
 800f66c:	621a      	str	r2, [r3, #32]
}
 800f66e:	bf00      	nop
 800f670:	371c      	adds	r7, #28
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr
 800f67a:	bf00      	nop
 800f67c:	feff8fff 	.word	0xfeff8fff
 800f680:	40010000 	.word	0x40010000
 800f684:	40010400 	.word	0x40010400
 800f688:	40014000 	.word	0x40014000
 800f68c:	40014400 	.word	0x40014400
 800f690:	40014800 	.word	0x40014800

0800f694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f694:	b480      	push	{r7}
 800f696:	b087      	sub	sp, #28
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6a1b      	ldr	r3, [r3, #32]
 800f6a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6a1b      	ldr	r3, [r3, #32]
 800f6aa:	f023 0201 	bic.w	r2, r3, #1
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	699b      	ldr	r3, [r3, #24]
 800f6b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f6be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	011b      	lsls	r3, r3, #4
 800f6c4:	693a      	ldr	r2, [r7, #16]
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	f023 030a 	bic.w	r3, r3, #10
 800f6d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f6d2:	697a      	ldr	r2, [r7, #20]
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	693a      	ldr	r2, [r7, #16]
 800f6de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	697a      	ldr	r2, [r7, #20]
 800f6e4:	621a      	str	r2, [r3, #32]
}
 800f6e6:	bf00      	nop
 800f6e8:	371c      	adds	r7, #28
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr

0800f6f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6f2:	b480      	push	{r7}
 800f6f4:	b087      	sub	sp, #28
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	60f8      	str	r0, [r7, #12]
 800f6fa:	60b9      	str	r1, [r7, #8]
 800f6fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6a1b      	ldr	r3, [r3, #32]
 800f702:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	6a1b      	ldr	r3, [r3, #32]
 800f708:	f023 0210 	bic.w	r2, r3, #16
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	699b      	ldr	r3, [r3, #24]
 800f714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f71c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	031b      	lsls	r3, r3, #12
 800f722:	693a      	ldr	r2, [r7, #16]
 800f724:	4313      	orrs	r3, r2
 800f726:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f72e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	011b      	lsls	r3, r3, #4
 800f734:	697a      	ldr	r2, [r7, #20]
 800f736:	4313      	orrs	r3, r2
 800f738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	693a      	ldr	r2, [r7, #16]
 800f73e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	697a      	ldr	r2, [r7, #20]
 800f744:	621a      	str	r2, [r3, #32]
}
 800f746:	bf00      	nop
 800f748:	371c      	adds	r7, #28
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr
	...

0800f754 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f754:	b480      	push	{r7}
 800f756:	b085      	sub	sp, #20
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	689b      	ldr	r3, [r3, #8]
 800f762:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	4b09      	ldr	r3, [pc, #36]	; (800f78c <TIM_ITRx_SetConfig+0x38>)
 800f768:	4013      	ands	r3, r2
 800f76a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f76c:	683a      	ldr	r2, [r7, #0]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	4313      	orrs	r3, r2
 800f772:	f043 0307 	orr.w	r3, r3, #7
 800f776:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	609a      	str	r2, [r3, #8]
}
 800f77e:	bf00      	nop
 800f780:	3714      	adds	r7, #20
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop
 800f78c:	ffcfff8f 	.word	0xffcfff8f

0800f790 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f790:	b480      	push	{r7}
 800f792:	b087      	sub	sp, #28
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
 800f79c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	689b      	ldr	r3, [r3, #8]
 800f7a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f7aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	021a      	lsls	r2, r3, #8
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	431a      	orrs	r2, r3
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	4313      	orrs	r3, r2
 800f7b8:	697a      	ldr	r2, [r7, #20]
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	697a      	ldr	r2, [r7, #20]
 800f7c2:	609a      	str	r2, [r3, #8]
}
 800f7c4:	bf00      	nop
 800f7c6:	371c      	adds	r7, #28
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b087      	sub	sp, #28
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	f003 031f 	and.w	r3, r3, #31
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	fa02 f303 	lsl.w	r3, r2, r3
 800f7e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	6a1a      	ldr	r2, [r3, #32]
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	43db      	mvns	r3, r3
 800f7f2:	401a      	ands	r2, r3
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	6a1a      	ldr	r2, [r3, #32]
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	f003 031f 	and.w	r3, r3, #31
 800f802:	6879      	ldr	r1, [r7, #4]
 800f804:	fa01 f303 	lsl.w	r3, r1, r3
 800f808:	431a      	orrs	r2, r3
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	621a      	str	r2, [r3, #32]
}
 800f80e:	bf00      	nop
 800f810:	371c      	adds	r7, #28
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr
	...

0800f81c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b085      	sub	sp, #20
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d101      	bne.n	800f834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f830:	2302      	movs	r3, #2
 800f832:	e06d      	b.n	800f910 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2201      	movs	r2, #1
 800f838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2202      	movs	r2, #2
 800f840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	689b      	ldr	r3, [r3, #8]
 800f852:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	4a30      	ldr	r2, [pc, #192]	; (800f91c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d004      	beq.n	800f868 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	4a2f      	ldr	r2, [pc, #188]	; (800f920 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d108      	bne.n	800f87a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f86e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	68fa      	ldr	r2, [r7, #12]
 800f876:	4313      	orrs	r3, r2
 800f878:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f880:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	68fa      	ldr	r2, [r7, #12]
 800f888:	4313      	orrs	r3, r2
 800f88a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4a20      	ldr	r2, [pc, #128]	; (800f91c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d022      	beq.n	800f8e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8a6:	d01d      	beq.n	800f8e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4a1d      	ldr	r2, [pc, #116]	; (800f924 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d018      	beq.n	800f8e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4a1c      	ldr	r2, [pc, #112]	; (800f928 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d013      	beq.n	800f8e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a1a      	ldr	r2, [pc, #104]	; (800f92c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d00e      	beq.n	800f8e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4a15      	ldr	r2, [pc, #84]	; (800f920 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d009      	beq.n	800f8e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	4a16      	ldr	r2, [pc, #88]	; (800f930 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d004      	beq.n	800f8e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	4a15      	ldr	r2, [pc, #84]	; (800f934 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d10c      	bne.n	800f8fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	689b      	ldr	r3, [r3, #8]
 800f8f0:	68ba      	ldr	r2, [r7, #8]
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	68ba      	ldr	r2, [r7, #8]
 800f8fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2201      	movs	r2, #1
 800f902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2200      	movs	r2, #0
 800f90a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f90e:	2300      	movs	r3, #0
}
 800f910:	4618      	mov	r0, r3
 800f912:	3714      	adds	r7, #20
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr
 800f91c:	40010000 	.word	0x40010000
 800f920:	40010400 	.word	0x40010400
 800f924:	40000400 	.word	0x40000400
 800f928:	40000800 	.word	0x40000800
 800f92c:	40000c00 	.word	0x40000c00
 800f930:	40001800 	.word	0x40001800
 800f934:	40014000 	.word	0x40014000

0800f938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f938:	b480      	push	{r7}
 800f93a:	b085      	sub	sp, #20
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f942:	2300      	movs	r3, #0
 800f944:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f94c:	2b01      	cmp	r3, #1
 800f94e:	d101      	bne.n	800f954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f950:	2302      	movs	r3, #2
 800f952:	e065      	b.n	800fa20 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2201      	movs	r2, #1
 800f958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	4313      	orrs	r3, r2
 800f968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	689b      	ldr	r3, [r3, #8]
 800f974:	4313      	orrs	r3, r2
 800f976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	4313      	orrs	r3, r2
 800f984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4313      	orrs	r3, r2
 800f992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	691b      	ldr	r3, [r3, #16]
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	695b      	ldr	r3, [r3, #20]
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ba:	4313      	orrs	r3, r2
 800f9bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	699b      	ldr	r3, [r3, #24]
 800f9c8:	041b      	lsls	r3, r3, #16
 800f9ca:	4313      	orrs	r3, r2
 800f9cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	4a16      	ldr	r2, [pc, #88]	; (800fa2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d004      	beq.n	800f9e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	4a14      	ldr	r2, [pc, #80]	; (800fa30 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d115      	bne.n	800fa0e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ec:	051b      	lsls	r3, r3, #20
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	69db      	ldr	r3, [r3, #28]
 800f9fc:	4313      	orrs	r3, r2
 800f9fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	6a1b      	ldr	r3, [r3, #32]
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	68fa      	ldr	r2, [r7, #12]
 800fa14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fa1e:	2300      	movs	r3, #0
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3714      	adds	r7, #20
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr
 800fa2c:	40010000 	.word	0x40010000
 800fa30:	40010400 	.word	0x40010400

0800fa34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fa3c:	bf00      	nop
 800fa3e:	370c      	adds	r7, #12
 800fa40:	46bd      	mov	sp, r7
 800fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa46:	4770      	bx	lr

0800fa48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fa50:	bf00      	nop
 800fa52:	370c      	adds	r7, #12
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fa64:	bf00      	nop
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d101      	bne.n	800fa82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e042      	b.n	800fb08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d106      	bne.n	800fa9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f7f3 fc39 	bl	800330c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2224      	movs	r2, #36	; 0x24
 800fa9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f022 0201 	bic.w	r2, r2, #1
 800fab0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d002      	beq.n	800fac0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f001 fb8c 	bl	80111d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f000 fe21 	bl	8010708 <UART_SetConfig>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d101      	bne.n	800fad0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800facc:	2301      	movs	r3, #1
 800face:	e01b      	b.n	800fb08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	685a      	ldr	r2, [r3, #4]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fade:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	689a      	ldr	r2, [r3, #8]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800faee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	681a      	ldr	r2, [r3, #0]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	f042 0201 	orr.w	r2, r2, #1
 800fafe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f001 fc0b 	bl	801131c <UART_CheckIdleState>
 800fb06:	4603      	mov	r3, r0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b08a      	sub	sp, #40	; 0x28
 800fb14:	af02      	add	r7, sp, #8
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	603b      	str	r3, [r7, #0]
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb26:	2b20      	cmp	r3, #32
 800fb28:	d17b      	bne.n	800fc22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d002      	beq.n	800fb36 <HAL_UART_Transmit+0x26>
 800fb30:	88fb      	ldrh	r3, [r7, #6]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d101      	bne.n	800fb3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fb36:	2301      	movs	r3, #1
 800fb38:	e074      	b.n	800fc24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2221      	movs	r2, #33	; 0x21
 800fb46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fb4a:	f7f3 ff53 	bl	80039f4 <HAL_GetTick>
 800fb4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	88fa      	ldrh	r2, [r7, #6]
 800fb54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	88fa      	ldrh	r2, [r7, #6]
 800fb5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb68:	d108      	bne.n	800fb7c <HAL_UART_Transmit+0x6c>
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d104      	bne.n	800fb7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fb72:	2300      	movs	r3, #0
 800fb74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	61bb      	str	r3, [r7, #24]
 800fb7a:	e003      	b.n	800fb84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fb80:	2300      	movs	r3, #0
 800fb82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fb84:	e030      	b.n	800fbe8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	9300      	str	r3, [sp, #0]
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	2180      	movs	r1, #128	; 0x80
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f001 fc6d 	bl	8011470 <UART_WaitOnFlagUntilTimeout>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d005      	beq.n	800fba8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2220      	movs	r2, #32
 800fba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fba4:	2303      	movs	r3, #3
 800fba6:	e03d      	b.n	800fc24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d10b      	bne.n	800fbc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fbae:	69bb      	ldr	r3, [r7, #24]
 800fbb0:	881b      	ldrh	r3, [r3, #0]
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fbbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fbbe:	69bb      	ldr	r3, [r7, #24]
 800fbc0:	3302      	adds	r3, #2
 800fbc2:	61bb      	str	r3, [r7, #24]
 800fbc4:	e007      	b.n	800fbd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	781a      	ldrb	r2, [r3, #0]
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fbdc:	b29b      	uxth	r3, r3
 800fbde:	3b01      	subs	r3, #1
 800fbe0:	b29a      	uxth	r2, r3
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d1c8      	bne.n	800fb86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	9300      	str	r3, [sp, #0]
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	2140      	movs	r1, #64	; 0x40
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	f001 fc36 	bl	8011470 <UART_WaitOnFlagUntilTimeout>
 800fc04:	4603      	mov	r3, r0
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d005      	beq.n	800fc16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2220      	movs	r2, #32
 800fc0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fc12:	2303      	movs	r3, #3
 800fc14:	e006      	b.n	800fc24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2220      	movs	r2, #32
 800fc1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	e000      	b.n	800fc24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fc22:	2302      	movs	r3, #2
  }
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3720      	adds	r7, #32
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b08a      	sub	sp, #40	; 0x28
 800fc30:	af02      	add	r7, sp, #8
 800fc32:	60f8      	str	r0, [r7, #12]
 800fc34:	60b9      	str	r1, [r7, #8]
 800fc36:	603b      	str	r3, [r7, #0]
 800fc38:	4613      	mov	r3, r2
 800fc3a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc42:	2b20      	cmp	r3, #32
 800fc44:	f040 80b5 	bne.w	800fdb2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d002      	beq.n	800fc54 <HAL_UART_Receive+0x28>
 800fc4e:	88fb      	ldrh	r3, [r7, #6]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d101      	bne.n	800fc58 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fc54:	2301      	movs	r3, #1
 800fc56:	e0ad      	b.n	800fdb4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2222      	movs	r2, #34	; 0x22
 800fc64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fc6e:	f7f3 fec1 	bl	80039f4 <HAL_GetTick>
 800fc72:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	88fa      	ldrh	r2, [r7, #6]
 800fc78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	88fa      	ldrh	r2, [r7, #6]
 800fc80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	689b      	ldr	r3, [r3, #8]
 800fc88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc8c:	d10e      	bne.n	800fcac <HAL_UART_Receive+0x80>
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	691b      	ldr	r3, [r3, #16]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d105      	bne.n	800fca2 <HAL_UART_Receive+0x76>
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fc9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fca0:	e02d      	b.n	800fcfe <HAL_UART_Receive+0xd2>
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	22ff      	movs	r2, #255	; 0xff
 800fca6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcaa:	e028      	b.n	800fcfe <HAL_UART_Receive+0xd2>
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	689b      	ldr	r3, [r3, #8]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d10d      	bne.n	800fcd0 <HAL_UART_Receive+0xa4>
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	691b      	ldr	r3, [r3, #16]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d104      	bne.n	800fcc6 <HAL_UART_Receive+0x9a>
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	22ff      	movs	r2, #255	; 0xff
 800fcc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcc4:	e01b      	b.n	800fcfe <HAL_UART_Receive+0xd2>
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	227f      	movs	r2, #127	; 0x7f
 800fcca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcce:	e016      	b.n	800fcfe <HAL_UART_Receive+0xd2>
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	689b      	ldr	r3, [r3, #8]
 800fcd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fcd8:	d10d      	bne.n	800fcf6 <HAL_UART_Receive+0xca>
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	691b      	ldr	r3, [r3, #16]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d104      	bne.n	800fcec <HAL_UART_Receive+0xc0>
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	227f      	movs	r2, #127	; 0x7f
 800fce6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcea:	e008      	b.n	800fcfe <HAL_UART_Receive+0xd2>
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	223f      	movs	r2, #63	; 0x3f
 800fcf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcf4:	e003      	b.n	800fcfe <HAL_UART_Receive+0xd2>
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd04:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	689b      	ldr	r3, [r3, #8]
 800fd0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd0e:	d108      	bne.n	800fd22 <HAL_UART_Receive+0xf6>
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	691b      	ldr	r3, [r3, #16]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d104      	bne.n	800fd22 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	61bb      	str	r3, [r7, #24]
 800fd20:	e003      	b.n	800fd2a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fd26:	2300      	movs	r3, #0
 800fd28:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fd2a:	e036      	b.n	800fd9a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	9300      	str	r3, [sp, #0]
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	2200      	movs	r2, #0
 800fd34:	2120      	movs	r1, #32
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	f001 fb9a 	bl	8011470 <UART_WaitOnFlagUntilTimeout>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d005      	beq.n	800fd4e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2220      	movs	r2, #32
 800fd46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800fd4a:	2303      	movs	r3, #3
 800fd4c:	e032      	b.n	800fdb4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fd4e:	69fb      	ldr	r3, [r7, #28]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d10c      	bne.n	800fd6e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd5a:	b29a      	uxth	r2, r3
 800fd5c:	8a7b      	ldrh	r3, [r7, #18]
 800fd5e:	4013      	ands	r3, r2
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fd66:	69bb      	ldr	r3, [r7, #24]
 800fd68:	3302      	adds	r3, #2
 800fd6a:	61bb      	str	r3, [r7, #24]
 800fd6c:	e00c      	b.n	800fd88 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd74:	b2da      	uxtb	r2, r3
 800fd76:	8a7b      	ldrh	r3, [r7, #18]
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	4013      	ands	r3, r2
 800fd7c:	b2da      	uxtb	r2, r3
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	3301      	adds	r3, #1
 800fd86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	3b01      	subs	r3, #1
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fda0:	b29b      	uxth	r3, r3
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d1c2      	bne.n	800fd2c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2220      	movs	r2, #32
 800fdaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	e000      	b.n	800fdb4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800fdb2:	2302      	movs	r3, #2
  }
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3720      	adds	r7, #32
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b08a      	sub	sp, #40	; 0x28
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdd0:	2b20      	cmp	r3, #32
 800fdd2:	d137      	bne.n	800fe44 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d002      	beq.n	800fde0 <HAL_UART_Receive_IT+0x24>
 800fdda:	88fb      	ldrh	r3, [r7, #6]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d101      	bne.n	800fde4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fde0:	2301      	movs	r3, #1
 800fde2:	e030      	b.n	800fe46 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	2200      	movs	r2, #0
 800fde8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4a18      	ldr	r2, [pc, #96]	; (800fe50 <HAL_UART_Receive_IT+0x94>)
 800fdf0:	4293      	cmp	r3, r2
 800fdf2:	d01f      	beq.n	800fe34 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d018      	beq.n	800fe34 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	e853 3f00 	ldrex	r3, [r3]
 800fe0e:	613b      	str	r3, [r7, #16]
   return(result);
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fe16:	627b      	str	r3, [r7, #36]	; 0x24
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe20:	623b      	str	r3, [r7, #32]
 800fe22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe24:	69f9      	ldr	r1, [r7, #28]
 800fe26:	6a3a      	ldr	r2, [r7, #32]
 800fe28:	e841 2300 	strex	r3, r2, [r1]
 800fe2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fe2e:	69bb      	ldr	r3, [r7, #24]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d1e6      	bne.n	800fe02 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fe34:	88fb      	ldrh	r3, [r7, #6]
 800fe36:	461a      	mov	r2, r3
 800fe38:	68b9      	ldr	r1, [r7, #8]
 800fe3a:	68f8      	ldr	r0, [r7, #12]
 800fe3c:	f001 fb86 	bl	801154c <UART_Start_Receive_IT>
 800fe40:	4603      	mov	r3, r0
 800fe42:	e000      	b.n	800fe46 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fe44:	2302      	movs	r3, #2
  }
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3728      	adds	r7, #40	; 0x28
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
 800fe4e:	bf00      	nop
 800fe50:	58000c00 	.word	0x58000c00

0800fe54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b08a      	sub	sp, #40	; 0x28
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	60b9      	str	r1, [r7, #8]
 800fe5e:	4613      	mov	r3, r2
 800fe60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe68:	2b20      	cmp	r3, #32
 800fe6a:	d167      	bne.n	800ff3c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d002      	beq.n	800fe78 <HAL_UART_Transmit_DMA+0x24>
 800fe72:	88fb      	ldrh	r3, [r7, #6]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d101      	bne.n	800fe7c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	e060      	b.n	800ff3e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	68ba      	ldr	r2, [r7, #8]
 800fe80:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	88fa      	ldrh	r2, [r7, #6]
 800fe86:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	88fa      	ldrh	r2, [r7, #6]
 800fe8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	2200      	movs	r2, #0
 800fe96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	2221      	movs	r2, #33	; 0x21
 800fe9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d028      	beq.n	800fefc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800feae:	4a26      	ldr	r2, [pc, #152]	; (800ff48 <HAL_UART_Transmit_DMA+0xf4>)
 800feb0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800feb6:	4a25      	ldr	r2, [pc, #148]	; (800ff4c <HAL_UART_Transmit_DMA+0xf8>)
 800feb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800febe:	4a24      	ldr	r2, [pc, #144]	; (800ff50 <HAL_UART_Transmit_DMA+0xfc>)
 800fec0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fec6:	2200      	movs	r2, #0
 800fec8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fed2:	4619      	mov	r1, r3
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	3328      	adds	r3, #40	; 0x28
 800feda:	461a      	mov	r2, r3
 800fedc:	88fb      	ldrh	r3, [r7, #6]
 800fede:	f7f6 fa0d 	bl	80062fc <HAL_DMA_Start_IT>
 800fee2:	4603      	mov	r3, r0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d009      	beq.n	800fefc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2210      	movs	r2, #16
 800feec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	2220      	movs	r2, #32
 800fef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800fef8:	2301      	movs	r3, #1
 800fefa:	e020      	b.n	800ff3e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	2240      	movs	r2, #64	; 0x40
 800ff02:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	3308      	adds	r3, #8
 800ff0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	e853 3f00 	ldrex	r3, [r3]
 800ff12:	613b      	str	r3, [r7, #16]
   return(result);
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	3308      	adds	r3, #8
 800ff22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff24:	623a      	str	r2, [r7, #32]
 800ff26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff28:	69f9      	ldr	r1, [r7, #28]
 800ff2a:	6a3a      	ldr	r2, [r7, #32]
 800ff2c:	e841 2300 	strex	r3, r2, [r1]
 800ff30:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff32:	69bb      	ldr	r3, [r7, #24]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d1e5      	bne.n	800ff04 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	e000      	b.n	800ff3e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ff3c:	2302      	movs	r3, #2
  }
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3728      	adds	r7, #40	; 0x28
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	080118e1 	.word	0x080118e1
 800ff4c:	08011977 	.word	0x08011977
 800ff50:	08011993 	.word	0x08011993

0800ff54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b0ba      	sub	sp, #232	; 0xe8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	69db      	ldr	r3, [r3, #28]
 800ff62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	689b      	ldr	r3, [r3, #8]
 800ff76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ff7e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ff82:	4013      	ands	r3, r2
 800ff84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ff88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d11b      	bne.n	800ffc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ff90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff94:	f003 0320 	and.w	r3, r3, #32
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d015      	beq.n	800ffc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ff9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffa0:	f003 0320 	and.w	r3, r3, #32
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d105      	bne.n	800ffb4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ffa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ffac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d009      	beq.n	800ffc8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f000 8377 	beq.w	80106ac <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	4798      	blx	r3
      }
      return;
 800ffc6:	e371      	b.n	80106ac <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ffc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	f000 8123 	beq.w	8010218 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ffd2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ffd6:	4b8d      	ldr	r3, [pc, #564]	; (801020c <HAL_UART_IRQHandler+0x2b8>)
 800ffd8:	4013      	ands	r3, r2
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d106      	bne.n	800ffec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ffde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ffe2:	4b8b      	ldr	r3, [pc, #556]	; (8010210 <HAL_UART_IRQHandler+0x2bc>)
 800ffe4:	4013      	ands	r3, r2
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	f000 8116 	beq.w	8010218 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ffec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fff0:	f003 0301 	and.w	r3, r3, #1
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d011      	beq.n	801001c <HAL_UART_IRQHandler+0xc8>
 800fff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010000:	2b00      	cmp	r3, #0
 8010002:	d00b      	beq.n	801001c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	2201      	movs	r2, #1
 801000a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010012:	f043 0201 	orr.w	r2, r3, #1
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801001c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010020:	f003 0302 	and.w	r3, r3, #2
 8010024:	2b00      	cmp	r3, #0
 8010026:	d011      	beq.n	801004c <HAL_UART_IRQHandler+0xf8>
 8010028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801002c:	f003 0301 	and.w	r3, r3, #1
 8010030:	2b00      	cmp	r3, #0
 8010032:	d00b      	beq.n	801004c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2202      	movs	r2, #2
 801003a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010042:	f043 0204 	orr.w	r2, r3, #4
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801004c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010050:	f003 0304 	and.w	r3, r3, #4
 8010054:	2b00      	cmp	r3, #0
 8010056:	d011      	beq.n	801007c <HAL_UART_IRQHandler+0x128>
 8010058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801005c:	f003 0301 	and.w	r3, r3, #1
 8010060:	2b00      	cmp	r3, #0
 8010062:	d00b      	beq.n	801007c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	2204      	movs	r2, #4
 801006a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010072:	f043 0202 	orr.w	r2, r3, #2
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801007c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010080:	f003 0308 	and.w	r3, r3, #8
 8010084:	2b00      	cmp	r3, #0
 8010086:	d017      	beq.n	80100b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801008c:	f003 0320 	and.w	r3, r3, #32
 8010090:	2b00      	cmp	r3, #0
 8010092:	d105      	bne.n	80100a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010094:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010098:	4b5c      	ldr	r3, [pc, #368]	; (801020c <HAL_UART_IRQHandler+0x2b8>)
 801009a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801009c:	2b00      	cmp	r3, #0
 801009e:	d00b      	beq.n	80100b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	2208      	movs	r2, #8
 80100a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100ae:	f043 0208 	orr.w	r2, r3, #8
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80100b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d012      	beq.n	80100ea <HAL_UART_IRQHandler+0x196>
 80100c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d00c      	beq.n	80100ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100e0:	f043 0220 	orr.w	r2, r3, #32
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	f000 82dd 	beq.w	80106b0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80100f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100fa:	f003 0320 	and.w	r3, r3, #32
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d013      	beq.n	801012a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010106:	f003 0320 	and.w	r3, r3, #32
 801010a:	2b00      	cmp	r3, #0
 801010c:	d105      	bne.n	801011a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801010e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010116:	2b00      	cmp	r3, #0
 8010118:	d007      	beq.n	801012a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801011e:	2b00      	cmp	r3, #0
 8010120:	d003      	beq.n	801012a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010130:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	689b      	ldr	r3, [r3, #8]
 801013a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801013e:	2b40      	cmp	r3, #64	; 0x40
 8010140:	d005      	beq.n	801014e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010146:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801014a:	2b00      	cmp	r3, #0
 801014c:	d054      	beq.n	80101f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f001 fb60 	bl	8011814 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	689b      	ldr	r3, [r3, #8]
 801015a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801015e:	2b40      	cmp	r3, #64	; 0x40
 8010160:	d146      	bne.n	80101f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	3308      	adds	r3, #8
 8010168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801016c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010170:	e853 3f00 	ldrex	r3, [r3]
 8010174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801017c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	3308      	adds	r3, #8
 801018a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801018e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801019a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801019e:	e841 2300 	strex	r3, r2, [r1]
 80101a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80101a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d1d9      	bne.n	8010162 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d017      	beq.n	80101e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101be:	4a15      	ldr	r2, [pc, #84]	; (8010214 <HAL_UART_IRQHandler+0x2c0>)
 80101c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7f6 fe1f 	bl	8006e0c <HAL_DMA_Abort_IT>
 80101ce:	4603      	mov	r3, r0
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d019      	beq.n	8010208 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80101e2:	4610      	mov	r0, r2
 80101e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101e6:	e00f      	b.n	8010208 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f000 fa77 	bl	80106dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101ee:	e00b      	b.n	8010208 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f000 fa73 	bl	80106dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101f6:	e007      	b.n	8010208 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f000 fa6f 	bl	80106dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2200      	movs	r2, #0
 8010202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010206:	e253      	b.n	80106b0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010208:	bf00      	nop
    return;
 801020a:	e251      	b.n	80106b0 <HAL_UART_IRQHandler+0x75c>
 801020c:	10000001 	.word	0x10000001
 8010210:	04000120 	.word	0x04000120
 8010214:	08011a13 	.word	0x08011a13

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801021c:	2b01      	cmp	r3, #1
 801021e:	f040 81e7 	bne.w	80105f0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010226:	f003 0310 	and.w	r3, r3, #16
 801022a:	2b00      	cmp	r3, #0
 801022c:	f000 81e0 	beq.w	80105f0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010234:	f003 0310 	and.w	r3, r3, #16
 8010238:	2b00      	cmp	r3, #0
 801023a:	f000 81d9 	beq.w	80105f0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	2210      	movs	r2, #16
 8010244:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	689b      	ldr	r3, [r3, #8]
 801024c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010250:	2b40      	cmp	r3, #64	; 0x40
 8010252:	f040 8151 	bne.w	80104f8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	4a96      	ldr	r2, [pc, #600]	; (80104b8 <HAL_UART_IRQHandler+0x564>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d068      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4a93      	ldr	r2, [pc, #588]	; (80104bc <HAL_UART_IRQHandler+0x568>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d061      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4a91      	ldr	r2, [pc, #580]	; (80104c0 <HAL_UART_IRQHandler+0x56c>)
 801027c:	4293      	cmp	r3, r2
 801027e:	d05a      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	4a8e      	ldr	r2, [pc, #568]	; (80104c4 <HAL_UART_IRQHandler+0x570>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d053      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4a8c      	ldr	r2, [pc, #560]	; (80104c8 <HAL_UART_IRQHandler+0x574>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d04c      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	4a89      	ldr	r2, [pc, #548]	; (80104cc <HAL_UART_IRQHandler+0x578>)
 80102a6:	4293      	cmp	r3, r2
 80102a8:	d045      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	4a87      	ldr	r2, [pc, #540]	; (80104d0 <HAL_UART_IRQHandler+0x57c>)
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d03e      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	4a84      	ldr	r2, [pc, #528]	; (80104d4 <HAL_UART_IRQHandler+0x580>)
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d037      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	4a82      	ldr	r2, [pc, #520]	; (80104d8 <HAL_UART_IRQHandler+0x584>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d030      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	4a7f      	ldr	r2, [pc, #508]	; (80104dc <HAL_UART_IRQHandler+0x588>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d029      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4a7d      	ldr	r2, [pc, #500]	; (80104e0 <HAL_UART_IRQHandler+0x58c>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d022      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	4a7a      	ldr	r2, [pc, #488]	; (80104e4 <HAL_UART_IRQHandler+0x590>)
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d01b      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	4a78      	ldr	r2, [pc, #480]	; (80104e8 <HAL_UART_IRQHandler+0x594>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d014      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	4a75      	ldr	r2, [pc, #468]	; (80104ec <HAL_UART_IRQHandler+0x598>)
 8010316:	4293      	cmp	r3, r2
 8010318:	d00d      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	4a73      	ldr	r2, [pc, #460]	; (80104f0 <HAL_UART_IRQHandler+0x59c>)
 8010324:	4293      	cmp	r3, r2
 8010326:	d006      	beq.n	8010336 <HAL_UART_IRQHandler+0x3e2>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	4a70      	ldr	r2, [pc, #448]	; (80104f4 <HAL_UART_IRQHandler+0x5a0>)
 8010332:	4293      	cmp	r3, r2
 8010334:	d106      	bne.n	8010344 <HAL_UART_IRQHandler+0x3f0>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	b29b      	uxth	r3, r3
 8010342:	e005      	b.n	8010350 <HAL_UART_IRQHandler+0x3fc>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	b29b      	uxth	r3, r3
 8010350:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010354:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010358:	2b00      	cmp	r3, #0
 801035a:	f000 81ab 	beq.w	80106b4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010364:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010368:	429a      	cmp	r2, r3
 801036a:	f080 81a3 	bcs.w	80106b4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010374:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801037e:	69db      	ldr	r3, [r3, #28]
 8010380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010384:	f000 8087 	beq.w	8010496 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010390:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010394:	e853 3f00 	ldrex	r3, [r3]
 8010398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801039c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80103a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80103a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	461a      	mov	r2, r3
 80103ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80103b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80103b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80103be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80103c2:	e841 2300 	strex	r3, r2, [r1]
 80103c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80103ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d1da      	bne.n	8010388 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	3308      	adds	r3, #8
 80103d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103dc:	e853 3f00 	ldrex	r3, [r3]
 80103e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80103e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103e4:	f023 0301 	bic.w	r3, r3, #1
 80103e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	3308      	adds	r3, #8
 80103f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80103f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80103fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80103fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010402:	e841 2300 	strex	r3, r2, [r1]
 8010406:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801040a:	2b00      	cmp	r3, #0
 801040c:	d1e1      	bne.n	80103d2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	3308      	adds	r3, #8
 8010414:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010418:	e853 3f00 	ldrex	r3, [r3]
 801041c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801041e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010424:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	3308      	adds	r3, #8
 801042e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010432:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010434:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010436:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010438:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801043a:	e841 2300 	strex	r3, r2, [r1]
 801043e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010442:	2b00      	cmp	r3, #0
 8010444:	d1e3      	bne.n	801040e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2220      	movs	r2, #32
 801044a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2200      	movs	r2, #0
 8010452:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801045a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801045c:	e853 3f00 	ldrex	r3, [r3]
 8010460:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010464:	f023 0310 	bic.w	r3, r3, #16
 8010468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	461a      	mov	r2, r3
 8010472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010476:	65bb      	str	r3, [r7, #88]	; 0x58
 8010478:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801047a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801047c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801047e:	e841 2300 	strex	r3, r2, [r1]
 8010482:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010486:	2b00      	cmp	r3, #0
 8010488:	d1e4      	bne.n	8010454 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010490:	4618      	mov	r0, r3
 8010492:	f7f6 f99d 	bl	80067d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2202      	movs	r2, #2
 801049a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	1ad3      	subs	r3, r2, r3
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	4619      	mov	r1, r3
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f000 f91d 	bl	80106f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80104b6:	e0fd      	b.n	80106b4 <HAL_UART_IRQHandler+0x760>
 80104b8:	40020010 	.word	0x40020010
 80104bc:	40020028 	.word	0x40020028
 80104c0:	40020040 	.word	0x40020040
 80104c4:	40020058 	.word	0x40020058
 80104c8:	40020070 	.word	0x40020070
 80104cc:	40020088 	.word	0x40020088
 80104d0:	400200a0 	.word	0x400200a0
 80104d4:	400200b8 	.word	0x400200b8
 80104d8:	40020410 	.word	0x40020410
 80104dc:	40020428 	.word	0x40020428
 80104e0:	40020440 	.word	0x40020440
 80104e4:	40020458 	.word	0x40020458
 80104e8:	40020470 	.word	0x40020470
 80104ec:	40020488 	.word	0x40020488
 80104f0:	400204a0 	.word	0x400204a0
 80104f4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010504:	b29b      	uxth	r3, r3
 8010506:	1ad3      	subs	r3, r2, r3
 8010508:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010512:	b29b      	uxth	r3, r3
 8010514:	2b00      	cmp	r3, #0
 8010516:	f000 80cf 	beq.w	80106b8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801051a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801051e:	2b00      	cmp	r3, #0
 8010520:	f000 80ca 	beq.w	80106b8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801052a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052c:	e853 3f00 	ldrex	r3, [r3]
 8010530:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010534:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010538:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	461a      	mov	r2, r3
 8010542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010546:	647b      	str	r3, [r7, #68]	; 0x44
 8010548:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801054a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801054c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801054e:	e841 2300 	strex	r3, r2, [r1]
 8010552:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010556:	2b00      	cmp	r3, #0
 8010558:	d1e4      	bne.n	8010524 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	3308      	adds	r3, #8
 8010560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010564:	e853 3f00 	ldrex	r3, [r3]
 8010568:	623b      	str	r3, [r7, #32]
   return(result);
 801056a:	6a3a      	ldr	r2, [r7, #32]
 801056c:	4b55      	ldr	r3, [pc, #340]	; (80106c4 <HAL_UART_IRQHandler+0x770>)
 801056e:	4013      	ands	r3, r2
 8010570:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	3308      	adds	r3, #8
 801057a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801057e:	633a      	str	r2, [r7, #48]	; 0x30
 8010580:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010586:	e841 2300 	strex	r3, r2, [r1]
 801058a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801058c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058e:	2b00      	cmp	r3, #0
 8010590:	d1e3      	bne.n	801055a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2220      	movs	r2, #32
 8010596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2200      	movs	r2, #0
 80105a4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ac:	693b      	ldr	r3, [r7, #16]
 80105ae:	e853 3f00 	ldrex	r3, [r3]
 80105b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f023 0310 	bic.w	r3, r3, #16
 80105ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	461a      	mov	r2, r3
 80105c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80105c8:	61fb      	str	r3, [r7, #28]
 80105ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105cc:	69b9      	ldr	r1, [r7, #24]
 80105ce:	69fa      	ldr	r2, [r7, #28]
 80105d0:	e841 2300 	strex	r3, r2, [r1]
 80105d4:	617b      	str	r3, [r7, #20]
   return(result);
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d1e4      	bne.n	80105a6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2202      	movs	r2, #2
 80105e0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80105e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80105e6:	4619      	mov	r1, r3
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f000 f881 	bl	80106f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80105ee:	e063      	b.n	80106b8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80105f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d00e      	beq.n	801061a <HAL_UART_IRQHandler+0x6c6>
 80105fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010604:	2b00      	cmp	r3, #0
 8010606:	d008      	beq.n	801061a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f001 ff5a 	bl	80124cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010618:	e051      	b.n	80106be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801061a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010622:	2b00      	cmp	r3, #0
 8010624:	d014      	beq.n	8010650 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801062e:	2b00      	cmp	r3, #0
 8010630:	d105      	bne.n	801063e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801063a:	2b00      	cmp	r3, #0
 801063c:	d008      	beq.n	8010650 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010642:	2b00      	cmp	r3, #0
 8010644:	d03a      	beq.n	80106bc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	4798      	blx	r3
    }
    return;
 801064e:	e035      	b.n	80106bc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010658:	2b00      	cmp	r3, #0
 801065a:	d009      	beq.n	8010670 <HAL_UART_IRQHandler+0x71c>
 801065c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010664:	2b00      	cmp	r3, #0
 8010666:	d003      	beq.n	8010670 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f001 f9e8 	bl	8011a3e <UART_EndTransmit_IT>
    return;
 801066e:	e026      	b.n	80106be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010678:	2b00      	cmp	r3, #0
 801067a:	d009      	beq.n	8010690 <HAL_UART_IRQHandler+0x73c>
 801067c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010680:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010684:	2b00      	cmp	r3, #0
 8010686:	d003      	beq.n	8010690 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f001 ff33 	bl	80124f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801068e:	e016      	b.n	80106be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010698:	2b00      	cmp	r3, #0
 801069a:	d010      	beq.n	80106be <HAL_UART_IRQHandler+0x76a>
 801069c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	da0c      	bge.n	80106be <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f001 ff1b 	bl	80124e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106aa:	e008      	b.n	80106be <HAL_UART_IRQHandler+0x76a>
      return;
 80106ac:	bf00      	nop
 80106ae:	e006      	b.n	80106be <HAL_UART_IRQHandler+0x76a>
    return;
 80106b0:	bf00      	nop
 80106b2:	e004      	b.n	80106be <HAL_UART_IRQHandler+0x76a>
      return;
 80106b4:	bf00      	nop
 80106b6:	e002      	b.n	80106be <HAL_UART_IRQHandler+0x76a>
      return;
 80106b8:	bf00      	nop
 80106ba:	e000      	b.n	80106be <HAL_UART_IRQHandler+0x76a>
    return;
 80106bc:	bf00      	nop
  }
}
 80106be:	37e8      	adds	r7, #232	; 0xe8
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	effffffe 	.word	0xeffffffe

080106c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b083      	sub	sp, #12
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80106d0:	bf00      	nop
 80106d2:	370c      	adds	r7, #12
 80106d4:	46bd      	mov	sp, r7
 80106d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106da:	4770      	bx	lr

080106dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80106dc:	b480      	push	{r7}
 80106de:	b083      	sub	sp, #12
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80106e4:	bf00      	nop
 80106e6:	370c      	adds	r7, #12
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr

080106f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80106f0:	b480      	push	{r7}
 80106f2:	b083      	sub	sp, #12
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	460b      	mov	r3, r1
 80106fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80106fc:	bf00      	nop
 80106fe:	370c      	adds	r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr

08010708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801070c:	b092      	sub	sp, #72	; 0x48
 801070e:	af00      	add	r7, sp, #0
 8010710:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010712:	2300      	movs	r3, #0
 8010714:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	689a      	ldr	r2, [r3, #8]
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	691b      	ldr	r3, [r3, #16]
 8010720:	431a      	orrs	r2, r3
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	695b      	ldr	r3, [r3, #20]
 8010726:	431a      	orrs	r2, r3
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	69db      	ldr	r3, [r3, #28]
 801072c:	4313      	orrs	r3, r2
 801072e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	4bbe      	ldr	r3, [pc, #760]	; (8010a30 <UART_SetConfig+0x328>)
 8010738:	4013      	ands	r3, r2
 801073a:	697a      	ldr	r2, [r7, #20]
 801073c:	6812      	ldr	r2, [r2, #0]
 801073e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010740:	430b      	orrs	r3, r1
 8010742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	68da      	ldr	r2, [r3, #12]
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	430a      	orrs	r2, r1
 8010758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	699b      	ldr	r3, [r3, #24]
 801075e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	4ab3      	ldr	r2, [pc, #716]	; (8010a34 <UART_SetConfig+0x32c>)
 8010766:	4293      	cmp	r3, r2
 8010768:	d004      	beq.n	8010774 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	6a1b      	ldr	r3, [r3, #32]
 801076e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010770:	4313      	orrs	r3, r2
 8010772:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	689a      	ldr	r2, [r3, #8]
 801077a:	4baf      	ldr	r3, [pc, #700]	; (8010a38 <UART_SetConfig+0x330>)
 801077c:	4013      	ands	r3, r2
 801077e:	697a      	ldr	r2, [r7, #20]
 8010780:	6812      	ldr	r2, [r2, #0]
 8010782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010784:	430b      	orrs	r3, r1
 8010786:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801078e:	f023 010f 	bic.w	r1, r3, #15
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	430a      	orrs	r2, r1
 801079c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	4aa6      	ldr	r2, [pc, #664]	; (8010a3c <UART_SetConfig+0x334>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d177      	bne.n	8010898 <UART_SetConfig+0x190>
 80107a8:	4ba5      	ldr	r3, [pc, #660]	; (8010a40 <UART_SetConfig+0x338>)
 80107aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80107b0:	2b28      	cmp	r3, #40	; 0x28
 80107b2:	d86d      	bhi.n	8010890 <UART_SetConfig+0x188>
 80107b4:	a201      	add	r2, pc, #4	; (adr r2, 80107bc <UART_SetConfig+0xb4>)
 80107b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ba:	bf00      	nop
 80107bc:	08010861 	.word	0x08010861
 80107c0:	08010891 	.word	0x08010891
 80107c4:	08010891 	.word	0x08010891
 80107c8:	08010891 	.word	0x08010891
 80107cc:	08010891 	.word	0x08010891
 80107d0:	08010891 	.word	0x08010891
 80107d4:	08010891 	.word	0x08010891
 80107d8:	08010891 	.word	0x08010891
 80107dc:	08010869 	.word	0x08010869
 80107e0:	08010891 	.word	0x08010891
 80107e4:	08010891 	.word	0x08010891
 80107e8:	08010891 	.word	0x08010891
 80107ec:	08010891 	.word	0x08010891
 80107f0:	08010891 	.word	0x08010891
 80107f4:	08010891 	.word	0x08010891
 80107f8:	08010891 	.word	0x08010891
 80107fc:	08010871 	.word	0x08010871
 8010800:	08010891 	.word	0x08010891
 8010804:	08010891 	.word	0x08010891
 8010808:	08010891 	.word	0x08010891
 801080c:	08010891 	.word	0x08010891
 8010810:	08010891 	.word	0x08010891
 8010814:	08010891 	.word	0x08010891
 8010818:	08010891 	.word	0x08010891
 801081c:	08010879 	.word	0x08010879
 8010820:	08010891 	.word	0x08010891
 8010824:	08010891 	.word	0x08010891
 8010828:	08010891 	.word	0x08010891
 801082c:	08010891 	.word	0x08010891
 8010830:	08010891 	.word	0x08010891
 8010834:	08010891 	.word	0x08010891
 8010838:	08010891 	.word	0x08010891
 801083c:	08010881 	.word	0x08010881
 8010840:	08010891 	.word	0x08010891
 8010844:	08010891 	.word	0x08010891
 8010848:	08010891 	.word	0x08010891
 801084c:	08010891 	.word	0x08010891
 8010850:	08010891 	.word	0x08010891
 8010854:	08010891 	.word	0x08010891
 8010858:	08010891 	.word	0x08010891
 801085c:	08010889 	.word	0x08010889
 8010860:	2301      	movs	r3, #1
 8010862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010866:	e222      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010868:	2304      	movs	r3, #4
 801086a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801086e:	e21e      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010870:	2308      	movs	r3, #8
 8010872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010876:	e21a      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010878:	2310      	movs	r3, #16
 801087a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801087e:	e216      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010880:	2320      	movs	r3, #32
 8010882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010886:	e212      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010888:	2340      	movs	r3, #64	; 0x40
 801088a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801088e:	e20e      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010890:	2380      	movs	r3, #128	; 0x80
 8010892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010896:	e20a      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	4a69      	ldr	r2, [pc, #420]	; (8010a44 <UART_SetConfig+0x33c>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	d130      	bne.n	8010904 <UART_SetConfig+0x1fc>
 80108a2:	4b67      	ldr	r3, [pc, #412]	; (8010a40 <UART_SetConfig+0x338>)
 80108a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108a6:	f003 0307 	and.w	r3, r3, #7
 80108aa:	2b05      	cmp	r3, #5
 80108ac:	d826      	bhi.n	80108fc <UART_SetConfig+0x1f4>
 80108ae:	a201      	add	r2, pc, #4	; (adr r2, 80108b4 <UART_SetConfig+0x1ac>)
 80108b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108b4:	080108cd 	.word	0x080108cd
 80108b8:	080108d5 	.word	0x080108d5
 80108bc:	080108dd 	.word	0x080108dd
 80108c0:	080108e5 	.word	0x080108e5
 80108c4:	080108ed 	.word	0x080108ed
 80108c8:	080108f5 	.word	0x080108f5
 80108cc:	2300      	movs	r3, #0
 80108ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108d2:	e1ec      	b.n	8010cae <UART_SetConfig+0x5a6>
 80108d4:	2304      	movs	r3, #4
 80108d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108da:	e1e8      	b.n	8010cae <UART_SetConfig+0x5a6>
 80108dc:	2308      	movs	r3, #8
 80108de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108e2:	e1e4      	b.n	8010cae <UART_SetConfig+0x5a6>
 80108e4:	2310      	movs	r3, #16
 80108e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ea:	e1e0      	b.n	8010cae <UART_SetConfig+0x5a6>
 80108ec:	2320      	movs	r3, #32
 80108ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108f2:	e1dc      	b.n	8010cae <UART_SetConfig+0x5a6>
 80108f4:	2340      	movs	r3, #64	; 0x40
 80108f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108fa:	e1d8      	b.n	8010cae <UART_SetConfig+0x5a6>
 80108fc:	2380      	movs	r3, #128	; 0x80
 80108fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010902:	e1d4      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	4a4f      	ldr	r2, [pc, #316]	; (8010a48 <UART_SetConfig+0x340>)
 801090a:	4293      	cmp	r3, r2
 801090c:	d130      	bne.n	8010970 <UART_SetConfig+0x268>
 801090e:	4b4c      	ldr	r3, [pc, #304]	; (8010a40 <UART_SetConfig+0x338>)
 8010910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010912:	f003 0307 	and.w	r3, r3, #7
 8010916:	2b05      	cmp	r3, #5
 8010918:	d826      	bhi.n	8010968 <UART_SetConfig+0x260>
 801091a:	a201      	add	r2, pc, #4	; (adr r2, 8010920 <UART_SetConfig+0x218>)
 801091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010920:	08010939 	.word	0x08010939
 8010924:	08010941 	.word	0x08010941
 8010928:	08010949 	.word	0x08010949
 801092c:	08010951 	.word	0x08010951
 8010930:	08010959 	.word	0x08010959
 8010934:	08010961 	.word	0x08010961
 8010938:	2300      	movs	r3, #0
 801093a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801093e:	e1b6      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010940:	2304      	movs	r3, #4
 8010942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010946:	e1b2      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010948:	2308      	movs	r3, #8
 801094a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801094e:	e1ae      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010950:	2310      	movs	r3, #16
 8010952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010956:	e1aa      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010958:	2320      	movs	r3, #32
 801095a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801095e:	e1a6      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010960:	2340      	movs	r3, #64	; 0x40
 8010962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010966:	e1a2      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010968:	2380      	movs	r3, #128	; 0x80
 801096a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801096e:	e19e      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	4a35      	ldr	r2, [pc, #212]	; (8010a4c <UART_SetConfig+0x344>)
 8010976:	4293      	cmp	r3, r2
 8010978:	d130      	bne.n	80109dc <UART_SetConfig+0x2d4>
 801097a:	4b31      	ldr	r3, [pc, #196]	; (8010a40 <UART_SetConfig+0x338>)
 801097c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801097e:	f003 0307 	and.w	r3, r3, #7
 8010982:	2b05      	cmp	r3, #5
 8010984:	d826      	bhi.n	80109d4 <UART_SetConfig+0x2cc>
 8010986:	a201      	add	r2, pc, #4	; (adr r2, 801098c <UART_SetConfig+0x284>)
 8010988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801098c:	080109a5 	.word	0x080109a5
 8010990:	080109ad 	.word	0x080109ad
 8010994:	080109b5 	.word	0x080109b5
 8010998:	080109bd 	.word	0x080109bd
 801099c:	080109c5 	.word	0x080109c5
 80109a0:	080109cd 	.word	0x080109cd
 80109a4:	2300      	movs	r3, #0
 80109a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109aa:	e180      	b.n	8010cae <UART_SetConfig+0x5a6>
 80109ac:	2304      	movs	r3, #4
 80109ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109b2:	e17c      	b.n	8010cae <UART_SetConfig+0x5a6>
 80109b4:	2308      	movs	r3, #8
 80109b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ba:	e178      	b.n	8010cae <UART_SetConfig+0x5a6>
 80109bc:	2310      	movs	r3, #16
 80109be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109c2:	e174      	b.n	8010cae <UART_SetConfig+0x5a6>
 80109c4:	2320      	movs	r3, #32
 80109c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ca:	e170      	b.n	8010cae <UART_SetConfig+0x5a6>
 80109cc:	2340      	movs	r3, #64	; 0x40
 80109ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109d2:	e16c      	b.n	8010cae <UART_SetConfig+0x5a6>
 80109d4:	2380      	movs	r3, #128	; 0x80
 80109d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109da:	e168      	b.n	8010cae <UART_SetConfig+0x5a6>
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	4a1b      	ldr	r2, [pc, #108]	; (8010a50 <UART_SetConfig+0x348>)
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d142      	bne.n	8010a6c <UART_SetConfig+0x364>
 80109e6:	4b16      	ldr	r3, [pc, #88]	; (8010a40 <UART_SetConfig+0x338>)
 80109e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109ea:	f003 0307 	and.w	r3, r3, #7
 80109ee:	2b05      	cmp	r3, #5
 80109f0:	d838      	bhi.n	8010a64 <UART_SetConfig+0x35c>
 80109f2:	a201      	add	r2, pc, #4	; (adr r2, 80109f8 <UART_SetConfig+0x2f0>)
 80109f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109f8:	08010a11 	.word	0x08010a11
 80109fc:	08010a19 	.word	0x08010a19
 8010a00:	08010a21 	.word	0x08010a21
 8010a04:	08010a29 	.word	0x08010a29
 8010a08:	08010a55 	.word	0x08010a55
 8010a0c:	08010a5d 	.word	0x08010a5d
 8010a10:	2300      	movs	r3, #0
 8010a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a16:	e14a      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010a18:	2304      	movs	r3, #4
 8010a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1e:	e146      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010a20:	2308      	movs	r3, #8
 8010a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a26:	e142      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010a28:	2310      	movs	r3, #16
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2e:	e13e      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010a30:	cfff69f3 	.word	0xcfff69f3
 8010a34:	58000c00 	.word	0x58000c00
 8010a38:	11fff4ff 	.word	0x11fff4ff
 8010a3c:	40011000 	.word	0x40011000
 8010a40:	58024400 	.word	0x58024400
 8010a44:	40004400 	.word	0x40004400
 8010a48:	40004800 	.word	0x40004800
 8010a4c:	40004c00 	.word	0x40004c00
 8010a50:	40005000 	.word	0x40005000
 8010a54:	2320      	movs	r3, #32
 8010a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a5a:	e128      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010a5c:	2340      	movs	r3, #64	; 0x40
 8010a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a62:	e124      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010a64:	2380      	movs	r3, #128	; 0x80
 8010a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a6a:	e120      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4acb      	ldr	r2, [pc, #812]	; (8010da0 <UART_SetConfig+0x698>)
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d176      	bne.n	8010b64 <UART_SetConfig+0x45c>
 8010a76:	4bcb      	ldr	r3, [pc, #812]	; (8010da4 <UART_SetConfig+0x69c>)
 8010a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a7e:	2b28      	cmp	r3, #40	; 0x28
 8010a80:	d86c      	bhi.n	8010b5c <UART_SetConfig+0x454>
 8010a82:	a201      	add	r2, pc, #4	; (adr r2, 8010a88 <UART_SetConfig+0x380>)
 8010a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a88:	08010b2d 	.word	0x08010b2d
 8010a8c:	08010b5d 	.word	0x08010b5d
 8010a90:	08010b5d 	.word	0x08010b5d
 8010a94:	08010b5d 	.word	0x08010b5d
 8010a98:	08010b5d 	.word	0x08010b5d
 8010a9c:	08010b5d 	.word	0x08010b5d
 8010aa0:	08010b5d 	.word	0x08010b5d
 8010aa4:	08010b5d 	.word	0x08010b5d
 8010aa8:	08010b35 	.word	0x08010b35
 8010aac:	08010b5d 	.word	0x08010b5d
 8010ab0:	08010b5d 	.word	0x08010b5d
 8010ab4:	08010b5d 	.word	0x08010b5d
 8010ab8:	08010b5d 	.word	0x08010b5d
 8010abc:	08010b5d 	.word	0x08010b5d
 8010ac0:	08010b5d 	.word	0x08010b5d
 8010ac4:	08010b5d 	.word	0x08010b5d
 8010ac8:	08010b3d 	.word	0x08010b3d
 8010acc:	08010b5d 	.word	0x08010b5d
 8010ad0:	08010b5d 	.word	0x08010b5d
 8010ad4:	08010b5d 	.word	0x08010b5d
 8010ad8:	08010b5d 	.word	0x08010b5d
 8010adc:	08010b5d 	.word	0x08010b5d
 8010ae0:	08010b5d 	.word	0x08010b5d
 8010ae4:	08010b5d 	.word	0x08010b5d
 8010ae8:	08010b45 	.word	0x08010b45
 8010aec:	08010b5d 	.word	0x08010b5d
 8010af0:	08010b5d 	.word	0x08010b5d
 8010af4:	08010b5d 	.word	0x08010b5d
 8010af8:	08010b5d 	.word	0x08010b5d
 8010afc:	08010b5d 	.word	0x08010b5d
 8010b00:	08010b5d 	.word	0x08010b5d
 8010b04:	08010b5d 	.word	0x08010b5d
 8010b08:	08010b4d 	.word	0x08010b4d
 8010b0c:	08010b5d 	.word	0x08010b5d
 8010b10:	08010b5d 	.word	0x08010b5d
 8010b14:	08010b5d 	.word	0x08010b5d
 8010b18:	08010b5d 	.word	0x08010b5d
 8010b1c:	08010b5d 	.word	0x08010b5d
 8010b20:	08010b5d 	.word	0x08010b5d
 8010b24:	08010b5d 	.word	0x08010b5d
 8010b28:	08010b55 	.word	0x08010b55
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b32:	e0bc      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010b34:	2304      	movs	r3, #4
 8010b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b3a:	e0b8      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010b3c:	2308      	movs	r3, #8
 8010b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b42:	e0b4      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010b44:	2310      	movs	r3, #16
 8010b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b4a:	e0b0      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010b4c:	2320      	movs	r3, #32
 8010b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b52:	e0ac      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010b54:	2340      	movs	r3, #64	; 0x40
 8010b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b5a:	e0a8      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010b5c:	2380      	movs	r3, #128	; 0x80
 8010b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b62:	e0a4      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	4a8f      	ldr	r2, [pc, #572]	; (8010da8 <UART_SetConfig+0x6a0>)
 8010b6a:	4293      	cmp	r3, r2
 8010b6c:	d130      	bne.n	8010bd0 <UART_SetConfig+0x4c8>
 8010b6e:	4b8d      	ldr	r3, [pc, #564]	; (8010da4 <UART_SetConfig+0x69c>)
 8010b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b72:	f003 0307 	and.w	r3, r3, #7
 8010b76:	2b05      	cmp	r3, #5
 8010b78:	d826      	bhi.n	8010bc8 <UART_SetConfig+0x4c0>
 8010b7a:	a201      	add	r2, pc, #4	; (adr r2, 8010b80 <UART_SetConfig+0x478>)
 8010b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b80:	08010b99 	.word	0x08010b99
 8010b84:	08010ba1 	.word	0x08010ba1
 8010b88:	08010ba9 	.word	0x08010ba9
 8010b8c:	08010bb1 	.word	0x08010bb1
 8010b90:	08010bb9 	.word	0x08010bb9
 8010b94:	08010bc1 	.word	0x08010bc1
 8010b98:	2300      	movs	r3, #0
 8010b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b9e:	e086      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010ba0:	2304      	movs	r3, #4
 8010ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ba6:	e082      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010ba8:	2308      	movs	r3, #8
 8010baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bae:	e07e      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010bb0:	2310      	movs	r3, #16
 8010bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb6:	e07a      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010bb8:	2320      	movs	r3, #32
 8010bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bbe:	e076      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010bc0:	2340      	movs	r3, #64	; 0x40
 8010bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc6:	e072      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010bc8:	2380      	movs	r3, #128	; 0x80
 8010bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bce:	e06e      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	4a75      	ldr	r2, [pc, #468]	; (8010dac <UART_SetConfig+0x6a4>)
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	d130      	bne.n	8010c3c <UART_SetConfig+0x534>
 8010bda:	4b72      	ldr	r3, [pc, #456]	; (8010da4 <UART_SetConfig+0x69c>)
 8010bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bde:	f003 0307 	and.w	r3, r3, #7
 8010be2:	2b05      	cmp	r3, #5
 8010be4:	d826      	bhi.n	8010c34 <UART_SetConfig+0x52c>
 8010be6:	a201      	add	r2, pc, #4	; (adr r2, 8010bec <UART_SetConfig+0x4e4>)
 8010be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bec:	08010c05 	.word	0x08010c05
 8010bf0:	08010c0d 	.word	0x08010c0d
 8010bf4:	08010c15 	.word	0x08010c15
 8010bf8:	08010c1d 	.word	0x08010c1d
 8010bfc:	08010c25 	.word	0x08010c25
 8010c00:	08010c2d 	.word	0x08010c2d
 8010c04:	2300      	movs	r3, #0
 8010c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0a:	e050      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010c0c:	2304      	movs	r3, #4
 8010c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c12:	e04c      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010c14:	2308      	movs	r3, #8
 8010c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c1a:	e048      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010c1c:	2310      	movs	r3, #16
 8010c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c22:	e044      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010c24:	2320      	movs	r3, #32
 8010c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c2a:	e040      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010c2c:	2340      	movs	r3, #64	; 0x40
 8010c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c32:	e03c      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010c34:	2380      	movs	r3, #128	; 0x80
 8010c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c3a:	e038      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	4a5b      	ldr	r2, [pc, #364]	; (8010db0 <UART_SetConfig+0x6a8>)
 8010c42:	4293      	cmp	r3, r2
 8010c44:	d130      	bne.n	8010ca8 <UART_SetConfig+0x5a0>
 8010c46:	4b57      	ldr	r3, [pc, #348]	; (8010da4 <UART_SetConfig+0x69c>)
 8010c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c4a:	f003 0307 	and.w	r3, r3, #7
 8010c4e:	2b05      	cmp	r3, #5
 8010c50:	d826      	bhi.n	8010ca0 <UART_SetConfig+0x598>
 8010c52:	a201      	add	r2, pc, #4	; (adr r2, 8010c58 <UART_SetConfig+0x550>)
 8010c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c58:	08010c71 	.word	0x08010c71
 8010c5c:	08010c79 	.word	0x08010c79
 8010c60:	08010c81 	.word	0x08010c81
 8010c64:	08010c89 	.word	0x08010c89
 8010c68:	08010c91 	.word	0x08010c91
 8010c6c:	08010c99 	.word	0x08010c99
 8010c70:	2302      	movs	r3, #2
 8010c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c76:	e01a      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010c78:	2304      	movs	r3, #4
 8010c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7e:	e016      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010c80:	2308      	movs	r3, #8
 8010c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c86:	e012      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010c88:	2310      	movs	r3, #16
 8010c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8e:	e00e      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010c90:	2320      	movs	r3, #32
 8010c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c96:	e00a      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010c98:	2340      	movs	r3, #64	; 0x40
 8010c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9e:	e006      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010ca0:	2380      	movs	r3, #128	; 0x80
 8010ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca6:	e002      	b.n	8010cae <UART_SetConfig+0x5a6>
 8010ca8:	2380      	movs	r3, #128	; 0x80
 8010caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	4a3f      	ldr	r2, [pc, #252]	; (8010db0 <UART_SetConfig+0x6a8>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	f040 80f8 	bne.w	8010eaa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010cba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010cbe:	2b20      	cmp	r3, #32
 8010cc0:	dc46      	bgt.n	8010d50 <UART_SetConfig+0x648>
 8010cc2:	2b02      	cmp	r3, #2
 8010cc4:	f2c0 8082 	blt.w	8010dcc <UART_SetConfig+0x6c4>
 8010cc8:	3b02      	subs	r3, #2
 8010cca:	2b1e      	cmp	r3, #30
 8010ccc:	d87e      	bhi.n	8010dcc <UART_SetConfig+0x6c4>
 8010cce:	a201      	add	r2, pc, #4	; (adr r2, 8010cd4 <UART_SetConfig+0x5cc>)
 8010cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd4:	08010d57 	.word	0x08010d57
 8010cd8:	08010dcd 	.word	0x08010dcd
 8010cdc:	08010d5f 	.word	0x08010d5f
 8010ce0:	08010dcd 	.word	0x08010dcd
 8010ce4:	08010dcd 	.word	0x08010dcd
 8010ce8:	08010dcd 	.word	0x08010dcd
 8010cec:	08010d6f 	.word	0x08010d6f
 8010cf0:	08010dcd 	.word	0x08010dcd
 8010cf4:	08010dcd 	.word	0x08010dcd
 8010cf8:	08010dcd 	.word	0x08010dcd
 8010cfc:	08010dcd 	.word	0x08010dcd
 8010d00:	08010dcd 	.word	0x08010dcd
 8010d04:	08010dcd 	.word	0x08010dcd
 8010d08:	08010dcd 	.word	0x08010dcd
 8010d0c:	08010d7f 	.word	0x08010d7f
 8010d10:	08010dcd 	.word	0x08010dcd
 8010d14:	08010dcd 	.word	0x08010dcd
 8010d18:	08010dcd 	.word	0x08010dcd
 8010d1c:	08010dcd 	.word	0x08010dcd
 8010d20:	08010dcd 	.word	0x08010dcd
 8010d24:	08010dcd 	.word	0x08010dcd
 8010d28:	08010dcd 	.word	0x08010dcd
 8010d2c:	08010dcd 	.word	0x08010dcd
 8010d30:	08010dcd 	.word	0x08010dcd
 8010d34:	08010dcd 	.word	0x08010dcd
 8010d38:	08010dcd 	.word	0x08010dcd
 8010d3c:	08010dcd 	.word	0x08010dcd
 8010d40:	08010dcd 	.word	0x08010dcd
 8010d44:	08010dcd 	.word	0x08010dcd
 8010d48:	08010dcd 	.word	0x08010dcd
 8010d4c:	08010dbf 	.word	0x08010dbf
 8010d50:	2b40      	cmp	r3, #64	; 0x40
 8010d52:	d037      	beq.n	8010dc4 <UART_SetConfig+0x6bc>
 8010d54:	e03a      	b.n	8010dcc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010d56:	f7fb fd9b 	bl	800c890 <HAL_RCCEx_GetD3PCLK1Freq>
 8010d5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d5c:	e03c      	b.n	8010dd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7fb fdaa 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d6c:	e034      	b.n	8010dd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d6e:	f107 0318 	add.w	r3, r7, #24
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7fb fef6 	bl	800cb64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d7c:	e02c      	b.n	8010dd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d7e:	4b09      	ldr	r3, [pc, #36]	; (8010da4 <UART_SetConfig+0x69c>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	f003 0320 	and.w	r3, r3, #32
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d016      	beq.n	8010db8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d8a:	4b06      	ldr	r3, [pc, #24]	; (8010da4 <UART_SetConfig+0x69c>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	08db      	lsrs	r3, r3, #3
 8010d90:	f003 0303 	and.w	r3, r3, #3
 8010d94:	4a07      	ldr	r2, [pc, #28]	; (8010db4 <UART_SetConfig+0x6ac>)
 8010d96:	fa22 f303 	lsr.w	r3, r2, r3
 8010d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d9c:	e01c      	b.n	8010dd8 <UART_SetConfig+0x6d0>
 8010d9e:	bf00      	nop
 8010da0:	40011400 	.word	0x40011400
 8010da4:	58024400 	.word	0x58024400
 8010da8:	40007800 	.word	0x40007800
 8010dac:	40007c00 	.word	0x40007c00
 8010db0:	58000c00 	.word	0x58000c00
 8010db4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010db8:	4b9d      	ldr	r3, [pc, #628]	; (8011030 <UART_SetConfig+0x928>)
 8010dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dbc:	e00c      	b.n	8010dd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010dbe:	4b9d      	ldr	r3, [pc, #628]	; (8011034 <UART_SetConfig+0x92c>)
 8010dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dc2:	e009      	b.n	8010dd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dca:	e005      	b.n	8010dd8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010dd6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	f000 81de 	beq.w	801119c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010de0:	697b      	ldr	r3, [r7, #20]
 8010de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010de4:	4a94      	ldr	r2, [pc, #592]	; (8011038 <UART_SetConfig+0x930>)
 8010de6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dea:	461a      	mov	r2, r3
 8010dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dee:	fbb3 f3f2 	udiv	r3, r3, r2
 8010df2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	685a      	ldr	r2, [r3, #4]
 8010df8:	4613      	mov	r3, r2
 8010dfa:	005b      	lsls	r3, r3, #1
 8010dfc:	4413      	add	r3, r2
 8010dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d305      	bcc.n	8010e10 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d903      	bls.n	8010e18 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010e10:	2301      	movs	r3, #1
 8010e12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010e16:	e1c1      	b.n	801119c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	60bb      	str	r3, [r7, #8]
 8010e1e:	60fa      	str	r2, [r7, #12]
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e24:	4a84      	ldr	r2, [pc, #528]	; (8011038 <UART_SetConfig+0x930>)
 8010e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	603b      	str	r3, [r7, #0]
 8010e30:	607a      	str	r2, [r7, #4]
 8010e32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010e3a:	f7ef fa51 	bl	80002e0 <__aeabi_uldivmod>
 8010e3e:	4602      	mov	r2, r0
 8010e40:	460b      	mov	r3, r1
 8010e42:	4610      	mov	r0, r2
 8010e44:	4619      	mov	r1, r3
 8010e46:	f04f 0200 	mov.w	r2, #0
 8010e4a:	f04f 0300 	mov.w	r3, #0
 8010e4e:	020b      	lsls	r3, r1, #8
 8010e50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010e54:	0202      	lsls	r2, r0, #8
 8010e56:	6979      	ldr	r1, [r7, #20]
 8010e58:	6849      	ldr	r1, [r1, #4]
 8010e5a:	0849      	lsrs	r1, r1, #1
 8010e5c:	2000      	movs	r0, #0
 8010e5e:	460c      	mov	r4, r1
 8010e60:	4605      	mov	r5, r0
 8010e62:	eb12 0804 	adds.w	r8, r2, r4
 8010e66:	eb43 0905 	adc.w	r9, r3, r5
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	469a      	mov	sl, r3
 8010e72:	4693      	mov	fp, r2
 8010e74:	4652      	mov	r2, sl
 8010e76:	465b      	mov	r3, fp
 8010e78:	4640      	mov	r0, r8
 8010e7a:	4649      	mov	r1, r9
 8010e7c:	f7ef fa30 	bl	80002e0 <__aeabi_uldivmod>
 8010e80:	4602      	mov	r2, r0
 8010e82:	460b      	mov	r3, r1
 8010e84:	4613      	mov	r3, r2
 8010e86:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010e8e:	d308      	bcc.n	8010ea2 <UART_SetConfig+0x79a>
 8010e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e96:	d204      	bcs.n	8010ea2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e9e:	60da      	str	r2, [r3, #12]
 8010ea0:	e17c      	b.n	801119c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010ea8:	e178      	b.n	801119c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	69db      	ldr	r3, [r3, #28]
 8010eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010eb2:	f040 80c5 	bne.w	8011040 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010eb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010eba:	2b20      	cmp	r3, #32
 8010ebc:	dc48      	bgt.n	8010f50 <UART_SetConfig+0x848>
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	db7b      	blt.n	8010fba <UART_SetConfig+0x8b2>
 8010ec2:	2b20      	cmp	r3, #32
 8010ec4:	d879      	bhi.n	8010fba <UART_SetConfig+0x8b2>
 8010ec6:	a201      	add	r2, pc, #4	; (adr r2, 8010ecc <UART_SetConfig+0x7c4>)
 8010ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ecc:	08010f57 	.word	0x08010f57
 8010ed0:	08010f5f 	.word	0x08010f5f
 8010ed4:	08010fbb 	.word	0x08010fbb
 8010ed8:	08010fbb 	.word	0x08010fbb
 8010edc:	08010f67 	.word	0x08010f67
 8010ee0:	08010fbb 	.word	0x08010fbb
 8010ee4:	08010fbb 	.word	0x08010fbb
 8010ee8:	08010fbb 	.word	0x08010fbb
 8010eec:	08010f77 	.word	0x08010f77
 8010ef0:	08010fbb 	.word	0x08010fbb
 8010ef4:	08010fbb 	.word	0x08010fbb
 8010ef8:	08010fbb 	.word	0x08010fbb
 8010efc:	08010fbb 	.word	0x08010fbb
 8010f00:	08010fbb 	.word	0x08010fbb
 8010f04:	08010fbb 	.word	0x08010fbb
 8010f08:	08010fbb 	.word	0x08010fbb
 8010f0c:	08010f87 	.word	0x08010f87
 8010f10:	08010fbb 	.word	0x08010fbb
 8010f14:	08010fbb 	.word	0x08010fbb
 8010f18:	08010fbb 	.word	0x08010fbb
 8010f1c:	08010fbb 	.word	0x08010fbb
 8010f20:	08010fbb 	.word	0x08010fbb
 8010f24:	08010fbb 	.word	0x08010fbb
 8010f28:	08010fbb 	.word	0x08010fbb
 8010f2c:	08010fbb 	.word	0x08010fbb
 8010f30:	08010fbb 	.word	0x08010fbb
 8010f34:	08010fbb 	.word	0x08010fbb
 8010f38:	08010fbb 	.word	0x08010fbb
 8010f3c:	08010fbb 	.word	0x08010fbb
 8010f40:	08010fbb 	.word	0x08010fbb
 8010f44:	08010fbb 	.word	0x08010fbb
 8010f48:	08010fbb 	.word	0x08010fbb
 8010f4c:	08010fad 	.word	0x08010fad
 8010f50:	2b40      	cmp	r3, #64	; 0x40
 8010f52:	d02e      	beq.n	8010fb2 <UART_SetConfig+0x8aa>
 8010f54:	e031      	b.n	8010fba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010f56:	f7f9 fca3 	bl	800a8a0 <HAL_RCC_GetPCLK1Freq>
 8010f5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f5c:	e033      	b.n	8010fc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010f5e:	f7f9 fcb5 	bl	800a8cc <HAL_RCC_GetPCLK2Freq>
 8010f62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f64:	e02f      	b.n	8010fc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7fb fca6 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f74:	e027      	b.n	8010fc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f76:	f107 0318 	add.w	r3, r7, #24
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fb fdf2 	bl	800cb64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f84:	e01f      	b.n	8010fc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f86:	4b2d      	ldr	r3, [pc, #180]	; (801103c <UART_SetConfig+0x934>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f003 0320 	and.w	r3, r3, #32
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d009      	beq.n	8010fa6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f92:	4b2a      	ldr	r3, [pc, #168]	; (801103c <UART_SetConfig+0x934>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	08db      	lsrs	r3, r3, #3
 8010f98:	f003 0303 	and.w	r3, r3, #3
 8010f9c:	4a24      	ldr	r2, [pc, #144]	; (8011030 <UART_SetConfig+0x928>)
 8010f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8010fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010fa4:	e00f      	b.n	8010fc6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010fa6:	4b22      	ldr	r3, [pc, #136]	; (8011030 <UART_SetConfig+0x928>)
 8010fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010faa:	e00c      	b.n	8010fc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010fac:	4b21      	ldr	r3, [pc, #132]	; (8011034 <UART_SetConfig+0x92c>)
 8010fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fb0:	e009      	b.n	8010fc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fb8:	e005      	b.n	8010fc6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010fc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	f000 80e7 	beq.w	801119c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd2:	4a19      	ldr	r2, [pc, #100]	; (8011038 <UART_SetConfig+0x930>)
 8010fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fd8:	461a      	mov	r2, r3
 8010fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fe0:	005a      	lsls	r2, r3, #1
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	085b      	lsrs	r3, r3, #1
 8010fe8:	441a      	add	r2, r3
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ff2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff6:	2b0f      	cmp	r3, #15
 8010ff8:	d916      	bls.n	8011028 <UART_SetConfig+0x920>
 8010ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011000:	d212      	bcs.n	8011028 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011004:	b29b      	uxth	r3, r3
 8011006:	f023 030f 	bic.w	r3, r3, #15
 801100a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801100c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100e:	085b      	lsrs	r3, r3, #1
 8011010:	b29b      	uxth	r3, r3
 8011012:	f003 0307 	and.w	r3, r3, #7
 8011016:	b29a      	uxth	r2, r3
 8011018:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801101a:	4313      	orrs	r3, r2
 801101c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011024:	60da      	str	r2, [r3, #12]
 8011026:	e0b9      	b.n	801119c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011028:	2301      	movs	r3, #1
 801102a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801102e:	e0b5      	b.n	801119c <UART_SetConfig+0xa94>
 8011030:	03d09000 	.word	0x03d09000
 8011034:	003d0900 	.word	0x003d0900
 8011038:	08016e58 	.word	0x08016e58
 801103c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011040:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011044:	2b20      	cmp	r3, #32
 8011046:	dc49      	bgt.n	80110dc <UART_SetConfig+0x9d4>
 8011048:	2b00      	cmp	r3, #0
 801104a:	db7c      	blt.n	8011146 <UART_SetConfig+0xa3e>
 801104c:	2b20      	cmp	r3, #32
 801104e:	d87a      	bhi.n	8011146 <UART_SetConfig+0xa3e>
 8011050:	a201      	add	r2, pc, #4	; (adr r2, 8011058 <UART_SetConfig+0x950>)
 8011052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011056:	bf00      	nop
 8011058:	080110e3 	.word	0x080110e3
 801105c:	080110eb 	.word	0x080110eb
 8011060:	08011147 	.word	0x08011147
 8011064:	08011147 	.word	0x08011147
 8011068:	080110f3 	.word	0x080110f3
 801106c:	08011147 	.word	0x08011147
 8011070:	08011147 	.word	0x08011147
 8011074:	08011147 	.word	0x08011147
 8011078:	08011103 	.word	0x08011103
 801107c:	08011147 	.word	0x08011147
 8011080:	08011147 	.word	0x08011147
 8011084:	08011147 	.word	0x08011147
 8011088:	08011147 	.word	0x08011147
 801108c:	08011147 	.word	0x08011147
 8011090:	08011147 	.word	0x08011147
 8011094:	08011147 	.word	0x08011147
 8011098:	08011113 	.word	0x08011113
 801109c:	08011147 	.word	0x08011147
 80110a0:	08011147 	.word	0x08011147
 80110a4:	08011147 	.word	0x08011147
 80110a8:	08011147 	.word	0x08011147
 80110ac:	08011147 	.word	0x08011147
 80110b0:	08011147 	.word	0x08011147
 80110b4:	08011147 	.word	0x08011147
 80110b8:	08011147 	.word	0x08011147
 80110bc:	08011147 	.word	0x08011147
 80110c0:	08011147 	.word	0x08011147
 80110c4:	08011147 	.word	0x08011147
 80110c8:	08011147 	.word	0x08011147
 80110cc:	08011147 	.word	0x08011147
 80110d0:	08011147 	.word	0x08011147
 80110d4:	08011147 	.word	0x08011147
 80110d8:	08011139 	.word	0x08011139
 80110dc:	2b40      	cmp	r3, #64	; 0x40
 80110de:	d02e      	beq.n	801113e <UART_SetConfig+0xa36>
 80110e0:	e031      	b.n	8011146 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80110e2:	f7f9 fbdd 	bl	800a8a0 <HAL_RCC_GetPCLK1Freq>
 80110e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80110e8:	e033      	b.n	8011152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80110ea:	f7f9 fbef 	bl	800a8cc <HAL_RCC_GetPCLK2Freq>
 80110ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80110f0:	e02f      	b.n	8011152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fb fbe0 	bl	800c8bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80110fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011100:	e027      	b.n	8011152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011102:	f107 0318 	add.w	r3, r7, #24
 8011106:	4618      	mov	r0, r3
 8011108:	f7fb fd2c 	bl	800cb64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011110:	e01f      	b.n	8011152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011112:	4b2d      	ldr	r3, [pc, #180]	; (80111c8 <UART_SetConfig+0xac0>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	f003 0320 	and.w	r3, r3, #32
 801111a:	2b00      	cmp	r3, #0
 801111c:	d009      	beq.n	8011132 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801111e:	4b2a      	ldr	r3, [pc, #168]	; (80111c8 <UART_SetConfig+0xac0>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	08db      	lsrs	r3, r3, #3
 8011124:	f003 0303 	and.w	r3, r3, #3
 8011128:	4a28      	ldr	r2, [pc, #160]	; (80111cc <UART_SetConfig+0xac4>)
 801112a:	fa22 f303 	lsr.w	r3, r2, r3
 801112e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011130:	e00f      	b.n	8011152 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011132:	4b26      	ldr	r3, [pc, #152]	; (80111cc <UART_SetConfig+0xac4>)
 8011134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011136:	e00c      	b.n	8011152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011138:	4b25      	ldr	r3, [pc, #148]	; (80111d0 <UART_SetConfig+0xac8>)
 801113a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801113c:	e009      	b.n	8011152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801113e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011144:	e005      	b.n	8011152 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011146:	2300      	movs	r3, #0
 8011148:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801114a:	2301      	movs	r3, #1
 801114c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011150:	bf00      	nop
    }

    if (pclk != 0U)
 8011152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011154:	2b00      	cmp	r3, #0
 8011156:	d021      	beq.n	801119c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801115c:	4a1d      	ldr	r2, [pc, #116]	; (80111d4 <UART_SetConfig+0xacc>)
 801115e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011162:	461a      	mov	r2, r3
 8011164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011166:	fbb3 f2f2 	udiv	r2, r3, r2
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	085b      	lsrs	r3, r3, #1
 8011170:	441a      	add	r2, r3
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	685b      	ldr	r3, [r3, #4]
 8011176:	fbb2 f3f3 	udiv	r3, r2, r3
 801117a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801117c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117e:	2b0f      	cmp	r3, #15
 8011180:	d909      	bls.n	8011196 <UART_SetConfig+0xa8e>
 8011182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011188:	d205      	bcs.n	8011196 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801118a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801118c:	b29a      	uxth	r2, r3
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	60da      	str	r2, [r3, #12]
 8011194:	e002      	b.n	801119c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011196:	2301      	movs	r3, #1
 8011198:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	2201      	movs	r2, #1
 80111a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	2201      	movs	r2, #1
 80111a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	2200      	movs	r2, #0
 80111b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	2200      	movs	r2, #0
 80111b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80111b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80111bc:	4618      	mov	r0, r3
 80111be:	3748      	adds	r7, #72	; 0x48
 80111c0:	46bd      	mov	sp, r7
 80111c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80111c6:	bf00      	nop
 80111c8:	58024400 	.word	0x58024400
 80111cc:	03d09000 	.word	0x03d09000
 80111d0:	003d0900 	.word	0x003d0900
 80111d4:	08016e58 	.word	0x08016e58

080111d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111e4:	f003 0308 	and.w	r3, r3, #8
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d00a      	beq.n	8011202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	430a      	orrs	r2, r1
 8011200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011206:	f003 0301 	and.w	r3, r3, #1
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00a      	beq.n	8011224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	685b      	ldr	r3, [r3, #4]
 8011214:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	430a      	orrs	r2, r1
 8011222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011228:	f003 0302 	and.w	r3, r3, #2
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00a      	beq.n	8011246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	430a      	orrs	r2, r1
 8011244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801124a:	f003 0304 	and.w	r3, r3, #4
 801124e:	2b00      	cmp	r3, #0
 8011250:	d00a      	beq.n	8011268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	685b      	ldr	r3, [r3, #4]
 8011258:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	430a      	orrs	r2, r1
 8011266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801126c:	f003 0310 	and.w	r3, r3, #16
 8011270:	2b00      	cmp	r3, #0
 8011272:	d00a      	beq.n	801128a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	689b      	ldr	r3, [r3, #8]
 801127a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	430a      	orrs	r2, r1
 8011288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801128e:	f003 0320 	and.w	r3, r3, #32
 8011292:	2b00      	cmp	r3, #0
 8011294:	d00a      	beq.n	80112ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	689b      	ldr	r3, [r3, #8]
 801129c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	430a      	orrs	r2, r1
 80112aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d01a      	beq.n	80112ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	430a      	orrs	r2, r1
 80112cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80112d6:	d10a      	bne.n	80112ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	430a      	orrs	r2, r1
 80112ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d00a      	beq.n	8011310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	430a      	orrs	r2, r1
 801130e:	605a      	str	r2, [r3, #4]
  }
}
 8011310:	bf00      	nop
 8011312:	370c      	adds	r7, #12
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr

0801131c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b098      	sub	sp, #96	; 0x60
 8011320:	af02      	add	r7, sp, #8
 8011322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2200      	movs	r2, #0
 8011328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801132c:	f7f2 fb62 	bl	80039f4 <HAL_GetTick>
 8011330:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f003 0308 	and.w	r3, r3, #8
 801133c:	2b08      	cmp	r3, #8
 801133e:	d12f      	bne.n	80113a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011344:	9300      	str	r3, [sp, #0]
 8011346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011348:	2200      	movs	r2, #0
 801134a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 f88e 	bl	8011470 <UART_WaitOnFlagUntilTimeout>
 8011354:	4603      	mov	r3, r0
 8011356:	2b00      	cmp	r3, #0
 8011358:	d022      	beq.n	80113a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011362:	e853 3f00 	ldrex	r3, [r3]
 8011366:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801136a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801136e:	653b      	str	r3, [r7, #80]	; 0x50
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	461a      	mov	r2, r3
 8011376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011378:	647b      	str	r3, [r7, #68]	; 0x44
 801137a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801137c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801137e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011380:	e841 2300 	strex	r3, r2, [r1]
 8011384:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011388:	2b00      	cmp	r3, #0
 801138a:	d1e6      	bne.n	801135a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2220      	movs	r2, #32
 8011390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2200      	movs	r2, #0
 8011398:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801139c:	2303      	movs	r3, #3
 801139e:	e063      	b.n	8011468 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f003 0304 	and.w	r3, r3, #4
 80113aa:	2b04      	cmp	r3, #4
 80113ac:	d149      	bne.n	8011442 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80113ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80113b2:	9300      	str	r3, [sp, #0]
 80113b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113b6:	2200      	movs	r2, #0
 80113b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f000 f857 	bl	8011470 <UART_WaitOnFlagUntilTimeout>
 80113c2:	4603      	mov	r3, r0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d03c      	beq.n	8011442 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d0:	e853 3f00 	ldrex	r3, [r3]
 80113d4:	623b      	str	r3, [r7, #32]
   return(result);
 80113d6:	6a3b      	ldr	r3, [r7, #32]
 80113d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80113dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	461a      	mov	r2, r3
 80113e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113e6:	633b      	str	r3, [r7, #48]	; 0x30
 80113e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113ee:	e841 2300 	strex	r3, r2, [r1]
 80113f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80113f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d1e6      	bne.n	80113c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	3308      	adds	r3, #8
 8011400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	e853 3f00 	ldrex	r3, [r3]
 8011408:	60fb      	str	r3, [r7, #12]
   return(result);
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	f023 0301 	bic.w	r3, r3, #1
 8011410:	64bb      	str	r3, [r7, #72]	; 0x48
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	3308      	adds	r3, #8
 8011418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801141a:	61fa      	str	r2, [r7, #28]
 801141c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801141e:	69b9      	ldr	r1, [r7, #24]
 8011420:	69fa      	ldr	r2, [r7, #28]
 8011422:	e841 2300 	strex	r3, r2, [r1]
 8011426:	617b      	str	r3, [r7, #20]
   return(result);
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d1e5      	bne.n	80113fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2220      	movs	r2, #32
 8011432:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2200      	movs	r2, #0
 801143a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801143e:	2303      	movs	r3, #3
 8011440:	e012      	b.n	8011468 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2220      	movs	r2, #32
 8011446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2220      	movs	r2, #32
 801144e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2200      	movs	r2, #0
 8011456:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2200      	movs	r2, #0
 8011462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011466:	2300      	movs	r3, #0
}
 8011468:	4618      	mov	r0, r3
 801146a:	3758      	adds	r7, #88	; 0x58
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	60f8      	str	r0, [r7, #12]
 8011478:	60b9      	str	r1, [r7, #8]
 801147a:	603b      	str	r3, [r7, #0]
 801147c:	4613      	mov	r3, r2
 801147e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011480:	e04f      	b.n	8011522 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011488:	d04b      	beq.n	8011522 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801148a:	f7f2 fab3 	bl	80039f4 <HAL_GetTick>
 801148e:	4602      	mov	r2, r0
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	69ba      	ldr	r2, [r7, #24]
 8011496:	429a      	cmp	r2, r3
 8011498:	d302      	bcc.n	80114a0 <UART_WaitOnFlagUntilTimeout+0x30>
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d101      	bne.n	80114a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80114a0:	2303      	movs	r3, #3
 80114a2:	e04e      	b.n	8011542 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	f003 0304 	and.w	r3, r3, #4
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d037      	beq.n	8011522 <UART_WaitOnFlagUntilTimeout+0xb2>
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	2b80      	cmp	r3, #128	; 0x80
 80114b6:	d034      	beq.n	8011522 <UART_WaitOnFlagUntilTimeout+0xb2>
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	2b40      	cmp	r3, #64	; 0x40
 80114bc:	d031      	beq.n	8011522 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	69db      	ldr	r3, [r3, #28]
 80114c4:	f003 0308 	and.w	r3, r3, #8
 80114c8:	2b08      	cmp	r3, #8
 80114ca:	d110      	bne.n	80114ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	2208      	movs	r2, #8
 80114d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80114d4:	68f8      	ldr	r0, [r7, #12]
 80114d6:	f000 f99d 	bl	8011814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2208      	movs	r2, #8
 80114de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	2200      	movs	r2, #0
 80114e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80114ea:	2301      	movs	r3, #1
 80114ec:	e029      	b.n	8011542 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	69db      	ldr	r3, [r3, #28]
 80114f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80114f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80114fc:	d111      	bne.n	8011522 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011508:	68f8      	ldr	r0, [r7, #12]
 801150a:	f000 f983 	bl	8011814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	2220      	movs	r2, #32
 8011512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2200      	movs	r2, #0
 801151a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801151e:	2303      	movs	r3, #3
 8011520:	e00f      	b.n	8011542 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	69da      	ldr	r2, [r3, #28]
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	4013      	ands	r3, r2
 801152c:	68ba      	ldr	r2, [r7, #8]
 801152e:	429a      	cmp	r2, r3
 8011530:	bf0c      	ite	eq
 8011532:	2301      	moveq	r3, #1
 8011534:	2300      	movne	r3, #0
 8011536:	b2db      	uxtb	r3, r3
 8011538:	461a      	mov	r2, r3
 801153a:	79fb      	ldrb	r3, [r7, #7]
 801153c:	429a      	cmp	r2, r3
 801153e:	d0a0      	beq.n	8011482 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011540:	2300      	movs	r3, #0
}
 8011542:	4618      	mov	r0, r3
 8011544:	3710      	adds	r7, #16
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
	...

0801154c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801154c:	b480      	push	{r7}
 801154e:	b0a3      	sub	sp, #140	; 0x8c
 8011550:	af00      	add	r7, sp, #0
 8011552:	60f8      	str	r0, [r7, #12]
 8011554:	60b9      	str	r1, [r7, #8]
 8011556:	4613      	mov	r3, r2
 8011558:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	68ba      	ldr	r2, [r7, #8]
 801155e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	88fa      	ldrh	r2, [r7, #6]
 8011564:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	88fa      	ldrh	r2, [r7, #6]
 801156c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	2200      	movs	r2, #0
 8011574:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	689b      	ldr	r3, [r3, #8]
 801157a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801157e:	d10e      	bne.n	801159e <UART_Start_Receive_IT+0x52>
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	691b      	ldr	r3, [r3, #16]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d105      	bne.n	8011594 <UART_Start_Receive_IT+0x48>
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801158e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011592:	e02d      	b.n	80115f0 <UART_Start_Receive_IT+0xa4>
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	22ff      	movs	r2, #255	; 0xff
 8011598:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801159c:	e028      	b.n	80115f0 <UART_Start_Receive_IT+0xa4>
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	689b      	ldr	r3, [r3, #8]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d10d      	bne.n	80115c2 <UART_Start_Receive_IT+0x76>
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	691b      	ldr	r3, [r3, #16]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d104      	bne.n	80115b8 <UART_Start_Receive_IT+0x6c>
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	22ff      	movs	r2, #255	; 0xff
 80115b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115b6:	e01b      	b.n	80115f0 <UART_Start_Receive_IT+0xa4>
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	227f      	movs	r2, #127	; 0x7f
 80115bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115c0:	e016      	b.n	80115f0 <UART_Start_Receive_IT+0xa4>
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	689b      	ldr	r3, [r3, #8]
 80115c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80115ca:	d10d      	bne.n	80115e8 <UART_Start_Receive_IT+0x9c>
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	691b      	ldr	r3, [r3, #16]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d104      	bne.n	80115de <UART_Start_Receive_IT+0x92>
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	227f      	movs	r2, #127	; 0x7f
 80115d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115dc:	e008      	b.n	80115f0 <UART_Start_Receive_IT+0xa4>
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	223f      	movs	r2, #63	; 0x3f
 80115e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115e6:	e003      	b.n	80115f0 <UART_Start_Receive_IT+0xa4>
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2200      	movs	r2, #0
 80115ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2200      	movs	r2, #0
 80115f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2222      	movs	r2, #34	; 0x22
 80115fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	3308      	adds	r3, #8
 8011606:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801160a:	e853 3f00 	ldrex	r3, [r3]
 801160e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011612:	f043 0301 	orr.w	r3, r3, #1
 8011616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	3308      	adds	r3, #8
 8011620:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011624:	673a      	str	r2, [r7, #112]	; 0x70
 8011626:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011628:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801162a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801162c:	e841 2300 	strex	r3, r2, [r1]
 8011630:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011634:	2b00      	cmp	r3, #0
 8011636:	d1e3      	bne.n	8011600 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801163c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011640:	d14f      	bne.n	80116e2 <UART_Start_Receive_IT+0x196>
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011648:	88fa      	ldrh	r2, [r7, #6]
 801164a:	429a      	cmp	r2, r3
 801164c:	d349      	bcc.n	80116e2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011656:	d107      	bne.n	8011668 <UART_Start_Receive_IT+0x11c>
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	691b      	ldr	r3, [r3, #16]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d103      	bne.n	8011668 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	4a47      	ldr	r2, [pc, #284]	; (8011780 <UART_Start_Receive_IT+0x234>)
 8011664:	675a      	str	r2, [r3, #116]	; 0x74
 8011666:	e002      	b.n	801166e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	4a46      	ldr	r2, [pc, #280]	; (8011784 <UART_Start_Receive_IT+0x238>)
 801166c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	691b      	ldr	r3, [r3, #16]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d01a      	beq.n	80116ac <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801167c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801167e:	e853 3f00 	ldrex	r3, [r3]
 8011682:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801168a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	461a      	mov	r2, r3
 8011694:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011698:	65fb      	str	r3, [r7, #92]	; 0x5c
 801169a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801169c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801169e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80116a0:	e841 2300 	strex	r3, r2, [r1]
 80116a4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80116a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d1e4      	bne.n	8011676 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	3308      	adds	r3, #8
 80116b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116b6:	e853 3f00 	ldrex	r3, [r3]
 80116ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80116bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	3308      	adds	r3, #8
 80116ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80116cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80116ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80116d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116d4:	e841 2300 	strex	r3, r2, [r1]
 80116d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80116da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d1e5      	bne.n	80116ac <UART_Start_Receive_IT+0x160>
 80116e0:	e046      	b.n	8011770 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	689b      	ldr	r3, [r3, #8]
 80116e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116ea:	d107      	bne.n	80116fc <UART_Start_Receive_IT+0x1b0>
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	691b      	ldr	r3, [r3, #16]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d103      	bne.n	80116fc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	4a24      	ldr	r2, [pc, #144]	; (8011788 <UART_Start_Receive_IT+0x23c>)
 80116f8:	675a      	str	r2, [r3, #116]	; 0x74
 80116fa:	e002      	b.n	8011702 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	4a23      	ldr	r2, [pc, #140]	; (801178c <UART_Start_Receive_IT+0x240>)
 8011700:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	691b      	ldr	r3, [r3, #16]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d019      	beq.n	801173e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011712:	e853 3f00 	ldrex	r3, [r3]
 8011716:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801171a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801171e:	677b      	str	r3, [r7, #116]	; 0x74
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	461a      	mov	r2, r3
 8011726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011728:	637b      	str	r3, [r7, #52]	; 0x34
 801172a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801172c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801172e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011730:	e841 2300 	strex	r3, r2, [r1]
 8011734:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011738:	2b00      	cmp	r3, #0
 801173a:	d1e6      	bne.n	801170a <UART_Start_Receive_IT+0x1be>
 801173c:	e018      	b.n	8011770 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	e853 3f00 	ldrex	r3, [r3]
 801174a:	613b      	str	r3, [r7, #16]
   return(result);
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	f043 0320 	orr.w	r3, r3, #32
 8011752:	67bb      	str	r3, [r7, #120]	; 0x78
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	461a      	mov	r2, r3
 801175a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801175c:	623b      	str	r3, [r7, #32]
 801175e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011760:	69f9      	ldr	r1, [r7, #28]
 8011762:	6a3a      	ldr	r2, [r7, #32]
 8011764:	e841 2300 	strex	r3, r2, [r1]
 8011768:	61bb      	str	r3, [r7, #24]
   return(result);
 801176a:	69bb      	ldr	r3, [r7, #24]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d1e6      	bne.n	801173e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011770:	2300      	movs	r3, #0
}
 8011772:	4618      	mov	r0, r3
 8011774:	378c      	adds	r7, #140	; 0x8c
 8011776:	46bd      	mov	sp, r7
 8011778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177c:	4770      	bx	lr
 801177e:	bf00      	nop
 8011780:	08012165 	.word	0x08012165
 8011784:	08011e05 	.word	0x08011e05
 8011788:	08011c4d 	.word	0x08011c4d
 801178c:	08011a95 	.word	0x08011a95

08011790 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011790:	b480      	push	{r7}
 8011792:	b08f      	sub	sp, #60	; 0x3c
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801179e:	6a3b      	ldr	r3, [r7, #32]
 80117a0:	e853 3f00 	ldrex	r3, [r3]
 80117a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80117ac:	637b      	str	r3, [r7, #52]	; 0x34
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	461a      	mov	r2, r3
 80117b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117b8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80117bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117be:	e841 2300 	strex	r3, r2, [r1]
 80117c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80117c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d1e6      	bne.n	8011798 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	3308      	adds	r3, #8
 80117d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	e853 3f00 	ldrex	r3, [r3]
 80117d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80117e0:	633b      	str	r3, [r7, #48]	; 0x30
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	3308      	adds	r3, #8
 80117e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117ea:	61ba      	str	r2, [r7, #24]
 80117ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ee:	6979      	ldr	r1, [r7, #20]
 80117f0:	69ba      	ldr	r2, [r7, #24]
 80117f2:	e841 2300 	strex	r3, r2, [r1]
 80117f6:	613b      	str	r3, [r7, #16]
   return(result);
 80117f8:	693b      	ldr	r3, [r7, #16]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d1e5      	bne.n	80117ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2220      	movs	r2, #32
 8011802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011806:	bf00      	nop
 8011808:	373c      	adds	r7, #60	; 0x3c
 801180a:	46bd      	mov	sp, r7
 801180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011810:	4770      	bx	lr
	...

08011814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011814:	b480      	push	{r7}
 8011816:	b095      	sub	sp, #84	; 0x54
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011824:	e853 3f00 	ldrex	r3, [r3]
 8011828:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801182a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	461a      	mov	r2, r3
 8011838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801183a:	643b      	str	r3, [r7, #64]	; 0x40
 801183c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801183e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011842:	e841 2300 	strex	r3, r2, [r1]
 8011846:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184a:	2b00      	cmp	r3, #0
 801184c:	d1e6      	bne.n	801181c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	3308      	adds	r3, #8
 8011854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011856:	6a3b      	ldr	r3, [r7, #32]
 8011858:	e853 3f00 	ldrex	r3, [r3]
 801185c:	61fb      	str	r3, [r7, #28]
   return(result);
 801185e:	69fa      	ldr	r2, [r7, #28]
 8011860:	4b1e      	ldr	r3, [pc, #120]	; (80118dc <UART_EndRxTransfer+0xc8>)
 8011862:	4013      	ands	r3, r2
 8011864:	64bb      	str	r3, [r7, #72]	; 0x48
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	3308      	adds	r3, #8
 801186c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801186e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011870:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011876:	e841 2300 	strex	r3, r2, [r1]
 801187a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187e:	2b00      	cmp	r3, #0
 8011880:	d1e5      	bne.n	801184e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011886:	2b01      	cmp	r3, #1
 8011888:	d118      	bne.n	80118bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	e853 3f00 	ldrex	r3, [r3]
 8011896:	60bb      	str	r3, [r7, #8]
   return(result);
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	f023 0310 	bic.w	r3, r3, #16
 801189e:	647b      	str	r3, [r7, #68]	; 0x44
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	461a      	mov	r2, r3
 80118a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118a8:	61bb      	str	r3, [r7, #24]
 80118aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118ac:	6979      	ldr	r1, [r7, #20]
 80118ae:	69ba      	ldr	r2, [r7, #24]
 80118b0:	e841 2300 	strex	r3, r2, [r1]
 80118b4:	613b      	str	r3, [r7, #16]
   return(result);
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d1e6      	bne.n	801188a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2220      	movs	r2, #32
 80118c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2200      	movs	r2, #0
 80118c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2200      	movs	r2, #0
 80118ce:	675a      	str	r2, [r3, #116]	; 0x74
}
 80118d0:	bf00      	nop
 80118d2:	3754      	adds	r7, #84	; 0x54
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr
 80118dc:	effffffe 	.word	0xeffffffe

080118e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b090      	sub	sp, #64	; 0x40
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118ec:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	69db      	ldr	r3, [r3, #28]
 80118f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118f6:	d037      	beq.n	8011968 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80118f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118fa:	2200      	movs	r2, #0
 80118fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	3308      	adds	r3, #8
 8011906:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190a:	e853 3f00 	ldrex	r3, [r3]
 801190e:	623b      	str	r3, [r7, #32]
   return(result);
 8011910:	6a3b      	ldr	r3, [r7, #32]
 8011912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011916:	63bb      	str	r3, [r7, #56]	; 0x38
 8011918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	3308      	adds	r3, #8
 801191e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011920:	633a      	str	r2, [r7, #48]	; 0x30
 8011922:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011924:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011928:	e841 2300 	strex	r3, r2, [r1]
 801192c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011930:	2b00      	cmp	r3, #0
 8011932:	d1e5      	bne.n	8011900 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	e853 3f00 	ldrex	r3, [r3]
 8011940:	60fb      	str	r3, [r7, #12]
   return(result);
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011948:	637b      	str	r3, [r7, #52]	; 0x34
 801194a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	461a      	mov	r2, r3
 8011950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011952:	61fb      	str	r3, [r7, #28]
 8011954:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011956:	69b9      	ldr	r1, [r7, #24]
 8011958:	69fa      	ldr	r2, [r7, #28]
 801195a:	e841 2300 	strex	r3, r2, [r1]
 801195e:	617b      	str	r3, [r7, #20]
   return(result);
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d1e6      	bne.n	8011934 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011966:	e002      	b.n	801196e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011968:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801196a:	f7f0 fadf 	bl	8001f2c <HAL_UART_TxCpltCallback>
}
 801196e:	bf00      	nop
 8011970:	3740      	adds	r7, #64	; 0x40
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}

08011976 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011976:	b580      	push	{r7, lr}
 8011978:	b084      	sub	sp, #16
 801197a:	af00      	add	r7, sp, #0
 801197c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011982:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f7fe fe9f 	bl	80106c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801198a:	bf00      	nop
 801198c:	3710      	adds	r7, #16
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}

08011992 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011992:	b580      	push	{r7, lr}
 8011994:	b086      	sub	sp, #24
 8011996:	af00      	add	r7, sp, #0
 8011998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801199e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	689b      	ldr	r3, [r3, #8]
 80119b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119ba:	2b80      	cmp	r3, #128	; 0x80
 80119bc:	d109      	bne.n	80119d2 <UART_DMAError+0x40>
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	2b21      	cmp	r3, #33	; 0x21
 80119c2:	d106      	bne.n	80119d2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	2200      	movs	r2, #0
 80119c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80119cc:	6978      	ldr	r0, [r7, #20]
 80119ce:	f7ff fedf 	bl	8011790 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	689b      	ldr	r3, [r3, #8]
 80119d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119dc:	2b40      	cmp	r3, #64	; 0x40
 80119de:	d109      	bne.n	80119f4 <UART_DMAError+0x62>
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2b22      	cmp	r3, #34	; 0x22
 80119e4:	d106      	bne.n	80119f4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	2200      	movs	r2, #0
 80119ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80119ee:	6978      	ldr	r0, [r7, #20]
 80119f0:	f7ff ff10 	bl	8011814 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119fa:	f043 0210 	orr.w	r2, r3, #16
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a04:	6978      	ldr	r0, [r7, #20]
 8011a06:	f7fe fe69 	bl	80106dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a0a:	bf00      	nop
 8011a0c:	3718      	adds	r7, #24
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011a12:	b580      	push	{r7, lr}
 8011a14:	b084      	sub	sp, #16
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	2200      	movs	r2, #0
 8011a24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a30:	68f8      	ldr	r0, [r7, #12]
 8011a32:	f7fe fe53 	bl	80106dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a36:	bf00      	nop
 8011a38:	3710      	adds	r7, #16
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}

08011a3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011a3e:	b580      	push	{r7, lr}
 8011a40:	b088      	sub	sp, #32
 8011a42:	af00      	add	r7, sp, #0
 8011a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	e853 3f00 	ldrex	r3, [r3]
 8011a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a5a:	61fb      	str	r3, [r7, #28]
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	461a      	mov	r2, r3
 8011a62:	69fb      	ldr	r3, [r7, #28]
 8011a64:	61bb      	str	r3, [r7, #24]
 8011a66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a68:	6979      	ldr	r1, [r7, #20]
 8011a6a:	69ba      	ldr	r2, [r7, #24]
 8011a6c:	e841 2300 	strex	r3, r2, [r1]
 8011a70:	613b      	str	r3, [r7, #16]
   return(result);
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d1e6      	bne.n	8011a46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2220      	movs	r2, #32
 8011a7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2200      	movs	r2, #0
 8011a84:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f7f0 fa50 	bl	8001f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a8c:	bf00      	nop
 8011a8e:	3720      	adds	r7, #32
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b09c      	sub	sp, #112	; 0x70
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011aa2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011aac:	2b22      	cmp	r3, #34	; 0x22
 8011aae:	f040 80be 	bne.w	8011c2e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011abc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011ac0:	b2d9      	uxtb	r1, r3
 8011ac2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011ac6:	b2da      	uxtb	r2, r3
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011acc:	400a      	ands	r2, r1
 8011ace:	b2d2      	uxtb	r2, r2
 8011ad0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ad6:	1c5a      	adds	r2, r3, #1
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	3b01      	subs	r3, #1
 8011ae6:	b29a      	uxth	r2, r3
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	f040 80a1 	bne.w	8011c3e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b04:	e853 3f00 	ldrex	r3, [r3]
 8011b08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	461a      	mov	r2, r3
 8011b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8011b1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011b20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011b22:	e841 2300 	strex	r3, r2, [r1]
 8011b26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d1e6      	bne.n	8011afc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	3308      	adds	r3, #8
 8011b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b38:	e853 3f00 	ldrex	r3, [r3]
 8011b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b40:	f023 0301 	bic.w	r3, r3, #1
 8011b44:	667b      	str	r3, [r7, #100]	; 0x64
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	3308      	adds	r3, #8
 8011b4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011b4e:	647a      	str	r2, [r7, #68]	; 0x44
 8011b50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b56:	e841 2300 	strex	r3, r2, [r1]
 8011b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d1e5      	bne.n	8011b2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2220      	movs	r2, #32
 8011b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2200      	movs	r2, #0
 8011b74:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	4a33      	ldr	r2, [pc, #204]	; (8011c48 <UART_RxISR_8BIT+0x1b4>)
 8011b7c:	4293      	cmp	r3, r2
 8011b7e:	d01f      	beq.n	8011bc0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	685b      	ldr	r3, [r3, #4]
 8011b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d018      	beq.n	8011bc0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b96:	e853 3f00 	ldrex	r3, [r3]
 8011b9a:	623b      	str	r3, [r7, #32]
   return(result);
 8011b9c:	6a3b      	ldr	r3, [r7, #32]
 8011b9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	461a      	mov	r2, r3
 8011baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bac:	633b      	str	r3, [r7, #48]	; 0x30
 8011bae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bb4:	e841 2300 	strex	r3, r2, [r1]
 8011bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d1e6      	bne.n	8011b8e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d12e      	bne.n	8011c26 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	e853 3f00 	ldrex	r3, [r3]
 8011bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	f023 0310 	bic.w	r3, r3, #16
 8011be2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	461a      	mov	r2, r3
 8011bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bec:	61fb      	str	r3, [r7, #28]
 8011bee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf0:	69b9      	ldr	r1, [r7, #24]
 8011bf2:	69fa      	ldr	r2, [r7, #28]
 8011bf4:	e841 2300 	strex	r3, r2, [r1]
 8011bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d1e6      	bne.n	8011bce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	69db      	ldr	r3, [r3, #28]
 8011c06:	f003 0310 	and.w	r3, r3, #16
 8011c0a:	2b10      	cmp	r3, #16
 8011c0c:	d103      	bne.n	8011c16 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2210      	movs	r2, #16
 8011c14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011c1c:	4619      	mov	r1, r3
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7fe fd66 	bl	80106f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011c24:	e00b      	b.n	8011c3e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f7ee fd12 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8011c2c:	e007      	b.n	8011c3e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	699a      	ldr	r2, [r3, #24]
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f042 0208 	orr.w	r2, r2, #8
 8011c3c:	619a      	str	r2, [r3, #24]
}
 8011c3e:	bf00      	nop
 8011c40:	3770      	adds	r7, #112	; 0x70
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	58000c00 	.word	0x58000c00

08011c4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b09c      	sub	sp, #112	; 0x70
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c64:	2b22      	cmp	r3, #34	; 0x22
 8011c66:	f040 80be 	bne.w	8011de6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c78:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011c7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011c7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011c82:	4013      	ands	r3, r2
 8011c84:	b29a      	uxth	r2, r3
 8011c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c8e:	1c9a      	adds	r2, r3, #2
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	3b01      	subs	r3, #1
 8011c9e:	b29a      	uxth	r2, r3
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	f040 80a1 	bne.w	8011df6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cbc:	e853 3f00 	ldrex	r3, [r3]
 8011cc0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011cc8:	667b      	str	r3, [r7, #100]	; 0x64
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	461a      	mov	r2, r3
 8011cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8011cd4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011cda:	e841 2300 	strex	r3, r2, [r1]
 8011cde:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d1e6      	bne.n	8011cb4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	3308      	adds	r3, #8
 8011cec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cf0:	e853 3f00 	ldrex	r3, [r3]
 8011cf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf8:	f023 0301 	bic.w	r3, r3, #1
 8011cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	3308      	adds	r3, #8
 8011d04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011d06:	643a      	str	r2, [r7, #64]	; 0x40
 8011d08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d0e:	e841 2300 	strex	r3, r2, [r1]
 8011d12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d1e5      	bne.n	8011ce6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2220      	movs	r2, #32
 8011d1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2200      	movs	r2, #0
 8011d26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	4a33      	ldr	r2, [pc, #204]	; (8011e00 <UART_RxISR_16BIT+0x1b4>)
 8011d34:	4293      	cmp	r3, r2
 8011d36:	d01f      	beq.n	8011d78 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	685b      	ldr	r3, [r3, #4]
 8011d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d018      	beq.n	8011d78 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d4c:	6a3b      	ldr	r3, [r7, #32]
 8011d4e:	e853 3f00 	ldrex	r3, [r3]
 8011d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d54:	69fb      	ldr	r3, [r7, #28]
 8011d56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	461a      	mov	r2, r3
 8011d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d66:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d6c:	e841 2300 	strex	r3, r2, [r1]
 8011d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d1e6      	bne.n	8011d46 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d7c:	2b01      	cmp	r3, #1
 8011d7e:	d12e      	bne.n	8011dde <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2200      	movs	r2, #0
 8011d84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	e853 3f00 	ldrex	r3, [r3]
 8011d92:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	f023 0310 	bic.w	r3, r3, #16
 8011d9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	461a      	mov	r2, r3
 8011da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011da4:	61bb      	str	r3, [r7, #24]
 8011da6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011da8:	6979      	ldr	r1, [r7, #20]
 8011daa:	69ba      	ldr	r2, [r7, #24]
 8011dac:	e841 2300 	strex	r3, r2, [r1]
 8011db0:	613b      	str	r3, [r7, #16]
   return(result);
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d1e6      	bne.n	8011d86 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	69db      	ldr	r3, [r3, #28]
 8011dbe:	f003 0310 	and.w	r3, r3, #16
 8011dc2:	2b10      	cmp	r3, #16
 8011dc4:	d103      	bne.n	8011dce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	2210      	movs	r2, #16
 8011dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f7fe fc8a 	bl	80106f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011ddc:	e00b      	b.n	8011df6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f7ee fc36 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8011de4:	e007      	b.n	8011df6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	699a      	ldr	r2, [r3, #24]
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	f042 0208 	orr.w	r2, r2, #8
 8011df4:	619a      	str	r2, [r3, #24]
}
 8011df6:	bf00      	nop
 8011df8:	3770      	adds	r7, #112	; 0x70
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	58000c00 	.word	0x58000c00

08011e04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b0ac      	sub	sp, #176	; 0xb0
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e12:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	69db      	ldr	r3, [r3, #28]
 8011e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	689b      	ldr	r3, [r3, #8]
 8011e30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e3a:	2b22      	cmp	r3, #34	; 0x22
 8011e3c:	f040 8180 	bne.w	8012140 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e46:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011e4a:	e123      	b.n	8012094 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e52:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011e56:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011e5a:	b2d9      	uxtb	r1, r3
 8011e5c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e66:	400a      	ands	r2, r1
 8011e68:	b2d2      	uxtb	r2, r2
 8011e6a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e70:	1c5a      	adds	r2, r3, #1
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	3b01      	subs	r3, #1
 8011e80:	b29a      	uxth	r2, r3
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	69db      	ldr	r3, [r3, #28]
 8011e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011e96:	f003 0307 	and.w	r3, r3, #7
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d053      	beq.n	8011f46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ea2:	f003 0301 	and.w	r3, r3, #1
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d011      	beq.n	8011ece <UART_RxISR_8BIT_FIFOEN+0xca>
 8011eaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d00b      	beq.n	8011ece <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	2201      	movs	r2, #1
 8011ebc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ec4:	f043 0201 	orr.w	r2, r3, #1
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ed2:	f003 0302 	and.w	r3, r3, #2
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d011      	beq.n	8011efe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011ede:	f003 0301 	and.w	r3, r3, #1
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d00b      	beq.n	8011efe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	2202      	movs	r2, #2
 8011eec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ef4:	f043 0204 	orr.w	r2, r3, #4
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f02:	f003 0304 	and.w	r3, r3, #4
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d011      	beq.n	8011f2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011f0e:	f003 0301 	and.w	r3, r3, #1
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d00b      	beq.n	8011f2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	2204      	movs	r2, #4
 8011f1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f24:	f043 0202 	orr.w	r2, r3, #2
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d006      	beq.n	8011f46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f7fe fbcf 	bl	80106dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2200      	movs	r2, #0
 8011f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f4c:	b29b      	uxth	r3, r3
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	f040 80a0 	bne.w	8012094 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f5c:	e853 3f00 	ldrex	r3, [r3]
 8011f60:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	461a      	mov	r2, r3
 8011f72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011f76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011f78:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f7a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011f7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011f7e:	e841 2300 	strex	r3, r2, [r1]
 8011f82:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d1e4      	bne.n	8011f54 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	3308      	adds	r3, #8
 8011f90:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f94:	e853 3f00 	ldrex	r3, [r3]
 8011f98:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011f9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011f9c:	4b6e      	ldr	r3, [pc, #440]	; (8012158 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011f9e:	4013      	ands	r3, r2
 8011fa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	3308      	adds	r3, #8
 8011faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011fae:	66ba      	str	r2, [r7, #104]	; 0x68
 8011fb0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fb2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011fb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011fb6:	e841 2300 	strex	r3, r2, [r1]
 8011fba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011fbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d1e3      	bne.n	8011f8a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2220      	movs	r2, #32
 8011fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	4a60      	ldr	r2, [pc, #384]	; (801215c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	d021      	beq.n	8012024 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d01a      	beq.n	8012024 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ff6:	e853 3f00 	ldrex	r3, [r3]
 8011ffa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ffe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	461a      	mov	r2, r3
 801200c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012010:	657b      	str	r3, [r7, #84]	; 0x54
 8012012:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012014:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012016:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012018:	e841 2300 	strex	r3, r2, [r1]
 801201c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801201e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012020:	2b00      	cmp	r3, #0
 8012022:	d1e4      	bne.n	8011fee <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012028:	2b01      	cmp	r3, #1
 801202a:	d130      	bne.n	801208e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2200      	movs	r2, #0
 8012030:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801203a:	e853 3f00 	ldrex	r3, [r3]
 801203e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012042:	f023 0310 	bic.w	r3, r3, #16
 8012046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	461a      	mov	r2, r3
 8012050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012054:	643b      	str	r3, [r7, #64]	; 0x40
 8012056:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012058:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801205a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801205c:	e841 2300 	strex	r3, r2, [r1]
 8012060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012064:	2b00      	cmp	r3, #0
 8012066:	d1e4      	bne.n	8012032 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	69db      	ldr	r3, [r3, #28]
 801206e:	f003 0310 	and.w	r3, r3, #16
 8012072:	2b10      	cmp	r3, #16
 8012074:	d103      	bne.n	801207e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	2210      	movs	r2, #16
 801207c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012084:	4619      	mov	r1, r3
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f7fe fb32 	bl	80106f0 <HAL_UARTEx_RxEventCallback>
 801208c:	e002      	b.n	8012094 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f7ee fade 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012094:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012098:	2b00      	cmp	r3, #0
 801209a:	d006      	beq.n	80120aa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801209c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80120a0:	f003 0320 	and.w	r3, r3, #32
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	f47f aed1 	bne.w	8011e4c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80120b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d049      	beq.n	8012150 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80120c2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d242      	bcs.n	8012150 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	3308      	adds	r3, #8
 80120d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120d2:	6a3b      	ldr	r3, [r7, #32]
 80120d4:	e853 3f00 	ldrex	r3, [r3]
 80120d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80120e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	3308      	adds	r3, #8
 80120ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80120ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80120f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80120f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120f6:	e841 2300 	strex	r3, r2, [r1]
 80120fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80120fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d1e3      	bne.n	80120ca <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	4a16      	ldr	r2, [pc, #88]	; (8012160 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012106:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	e853 3f00 	ldrex	r3, [r3]
 8012114:	60bb      	str	r3, [r7, #8]
   return(result);
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	f043 0320 	orr.w	r3, r3, #32
 801211c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	461a      	mov	r2, r3
 8012126:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801212a:	61bb      	str	r3, [r7, #24]
 801212c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801212e:	6979      	ldr	r1, [r7, #20]
 8012130:	69ba      	ldr	r2, [r7, #24]
 8012132:	e841 2300 	strex	r3, r2, [r1]
 8012136:	613b      	str	r3, [r7, #16]
   return(result);
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d1e4      	bne.n	8012108 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801213e:	e007      	b.n	8012150 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	699a      	ldr	r2, [r3, #24]
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	f042 0208 	orr.w	r2, r2, #8
 801214e:	619a      	str	r2, [r3, #24]
}
 8012150:	bf00      	nop
 8012152:	37b0      	adds	r7, #176	; 0xb0
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}
 8012158:	effffffe 	.word	0xeffffffe
 801215c:	58000c00 	.word	0x58000c00
 8012160:	08011a95 	.word	0x08011a95

08012164 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b0ae      	sub	sp, #184	; 0xb8
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012172:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	69db      	ldr	r3, [r3, #28]
 801217c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	689b      	ldr	r3, [r3, #8]
 8012190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801219a:	2b22      	cmp	r3, #34	; 0x22
 801219c:	f040 8184 	bne.w	80124a8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80121a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80121aa:	e127      	b.n	80123fc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80121be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80121c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80121c6:	4013      	ands	r3, r2
 80121c8:	b29a      	uxth	r2, r3
 80121ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80121ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121d4:	1c9a      	adds	r2, r3, #2
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	3b01      	subs	r3, #1
 80121e4:	b29a      	uxth	r2, r3
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	69db      	ldr	r3, [r3, #28]
 80121f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80121f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80121fa:	f003 0307 	and.w	r3, r3, #7
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d053      	beq.n	80122aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012206:	f003 0301 	and.w	r3, r3, #1
 801220a:	2b00      	cmp	r3, #0
 801220c:	d011      	beq.n	8012232 <UART_RxISR_16BIT_FIFOEN+0xce>
 801220e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012216:	2b00      	cmp	r3, #0
 8012218:	d00b      	beq.n	8012232 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2201      	movs	r2, #1
 8012220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012228:	f043 0201 	orr.w	r2, r3, #1
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012236:	f003 0302 	and.w	r3, r3, #2
 801223a:	2b00      	cmp	r3, #0
 801223c:	d011      	beq.n	8012262 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801223e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012242:	f003 0301 	and.w	r3, r3, #1
 8012246:	2b00      	cmp	r3, #0
 8012248:	d00b      	beq.n	8012262 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	2202      	movs	r2, #2
 8012250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012258:	f043 0204 	orr.w	r2, r3, #4
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012266:	f003 0304 	and.w	r3, r3, #4
 801226a:	2b00      	cmp	r3, #0
 801226c:	d011      	beq.n	8012292 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801226e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012272:	f003 0301 	and.w	r3, r3, #1
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00b      	beq.n	8012292 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	2204      	movs	r2, #4
 8012280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012288:	f043 0202 	orr.w	r2, r3, #2
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012298:	2b00      	cmp	r3, #0
 801229a:	d006      	beq.n	80122aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7fe fa1d 	bl	80106dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2200      	movs	r2, #0
 80122a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122b0:	b29b      	uxth	r3, r3
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f040 80a2 	bne.w	80123fc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80122c0:	e853 3f00 	ldrex	r3, [r3]
 80122c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80122c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80122c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80122cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	461a      	mov	r2, r3
 80122d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80122da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80122de:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80122e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80122e6:	e841 2300 	strex	r3, r2, [r1]
 80122ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80122ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d1e2      	bne.n	80122b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	3308      	adds	r3, #8
 80122f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122fc:	e853 3f00 	ldrex	r3, [r3]
 8012300:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012302:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012304:	4b6e      	ldr	r3, [pc, #440]	; (80124c0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012306:	4013      	ands	r3, r2
 8012308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	3308      	adds	r3, #8
 8012312:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012316:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012318:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801231a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801231c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801231e:	e841 2300 	strex	r3, r2, [r1]
 8012322:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012326:	2b00      	cmp	r3, #0
 8012328:	d1e3      	bne.n	80122f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2220      	movs	r2, #32
 801232e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2200      	movs	r2, #0
 8012336:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2200      	movs	r2, #0
 801233c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	4a60      	ldr	r2, [pc, #384]	; (80124c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012344:	4293      	cmp	r3, r2
 8012346:	d021      	beq.n	801238c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012352:	2b00      	cmp	r3, #0
 8012354:	d01a      	beq.n	801238c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801235c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801235e:	e853 3f00 	ldrex	r3, [r3]
 8012362:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012366:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801236a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	461a      	mov	r2, r3
 8012374:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012378:	65bb      	str	r3, [r7, #88]	; 0x58
 801237a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801237c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801237e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012380:	e841 2300 	strex	r3, r2, [r1]
 8012384:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012388:	2b00      	cmp	r3, #0
 801238a:	d1e4      	bne.n	8012356 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012390:	2b01      	cmp	r3, #1
 8012392:	d130      	bne.n	80123f6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2200      	movs	r2, #0
 8012398:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a2:	e853 3f00 	ldrex	r3, [r3]
 80123a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80123a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123aa:	f023 0310 	bic.w	r3, r3, #16
 80123ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	461a      	mov	r2, r3
 80123b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80123bc:	647b      	str	r3, [r7, #68]	; 0x44
 80123be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80123c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123c4:	e841 2300 	strex	r3, r2, [r1]
 80123c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80123ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d1e4      	bne.n	801239a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	69db      	ldr	r3, [r3, #28]
 80123d6:	f003 0310 	and.w	r3, r3, #16
 80123da:	2b10      	cmp	r3, #16
 80123dc:	d103      	bne.n	80123e6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	2210      	movs	r2, #16
 80123e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123ec:	4619      	mov	r1, r3
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f7fe f97e 	bl	80106f0 <HAL_UARTEx_RxEventCallback>
 80123f4:	e002      	b.n	80123fc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f7ee f92a 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80123fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012400:	2b00      	cmp	r3, #0
 8012402:	d006      	beq.n	8012412 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012404:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012408:	f003 0320 	and.w	r3, r3, #32
 801240c:	2b00      	cmp	r3, #0
 801240e:	f47f aecd 	bne.w	80121ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012418:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801241c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012420:	2b00      	cmp	r3, #0
 8012422:	d049      	beq.n	80124b8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801242a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801242e:	429a      	cmp	r2, r3
 8012430:	d242      	bcs.n	80124b8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	3308      	adds	r3, #8
 8012438:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243c:	e853 3f00 	ldrex	r3, [r3]
 8012440:	623b      	str	r3, [r7, #32]
   return(result);
 8012442:	6a3b      	ldr	r3, [r7, #32]
 8012444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	3308      	adds	r3, #8
 8012452:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012456:	633a      	str	r2, [r7, #48]	; 0x30
 8012458:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801245a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801245c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801245e:	e841 2300 	strex	r3, r2, [r1]
 8012462:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012466:	2b00      	cmp	r3, #0
 8012468:	d1e3      	bne.n	8012432 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	4a16      	ldr	r2, [pc, #88]	; (80124c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801246e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	e853 3f00 	ldrex	r3, [r3]
 801247c:	60fb      	str	r3, [r7, #12]
   return(result);
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	f043 0320 	orr.w	r3, r3, #32
 8012484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	461a      	mov	r2, r3
 801248e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012492:	61fb      	str	r3, [r7, #28]
 8012494:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012496:	69b9      	ldr	r1, [r7, #24]
 8012498:	69fa      	ldr	r2, [r7, #28]
 801249a:	e841 2300 	strex	r3, r2, [r1]
 801249e:	617b      	str	r3, [r7, #20]
   return(result);
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d1e4      	bne.n	8012470 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80124a6:	e007      	b.n	80124b8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	699a      	ldr	r2, [r3, #24]
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	f042 0208 	orr.w	r2, r2, #8
 80124b6:	619a      	str	r2, [r3, #24]
}
 80124b8:	bf00      	nop
 80124ba:	37b8      	adds	r7, #184	; 0xb8
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}
 80124c0:	effffffe 	.word	0xeffffffe
 80124c4:	58000c00 	.word	0x58000c00
 80124c8:	08011c4d 	.word	0x08011c4d

080124cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80124cc:	b480      	push	{r7}
 80124ce:	b083      	sub	sp, #12
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80124d4:	bf00      	nop
 80124d6:	370c      	adds	r7, #12
 80124d8:	46bd      	mov	sp, r7
 80124da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124de:	4770      	bx	lr

080124e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80124e0:	b480      	push	{r7}
 80124e2:	b083      	sub	sp, #12
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80124e8:	bf00      	nop
 80124ea:	370c      	adds	r7, #12
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr

080124f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80124f4:	b480      	push	{r7}
 80124f6:	b083      	sub	sp, #12
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80124fc:	bf00      	nop
 80124fe:	370c      	adds	r7, #12
 8012500:	46bd      	mov	sp, r7
 8012502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012506:	4770      	bx	lr

08012508 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012508:	b480      	push	{r7}
 801250a:	b085      	sub	sp, #20
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012516:	2b01      	cmp	r3, #1
 8012518:	d101      	bne.n	801251e <HAL_UARTEx_DisableFifoMode+0x16>
 801251a:	2302      	movs	r3, #2
 801251c:	e027      	b.n	801256e <HAL_UARTEx_DisableFifoMode+0x66>
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2201      	movs	r2, #1
 8012522:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2224      	movs	r2, #36	; 0x24
 801252a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	681a      	ldr	r2, [r3, #0]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	f022 0201 	bic.w	r2, r2, #1
 8012544:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801254c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2200      	movs	r2, #0
 8012552:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	68fa      	ldr	r2, [r7, #12]
 801255a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2220      	movs	r2, #32
 8012560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2200      	movs	r2, #0
 8012568:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801256c:	2300      	movs	r3, #0
}
 801256e:	4618      	mov	r0, r3
 8012570:	3714      	adds	r7, #20
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr

0801257a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801257a:	b580      	push	{r7, lr}
 801257c:	b084      	sub	sp, #16
 801257e:	af00      	add	r7, sp, #0
 8012580:	6078      	str	r0, [r7, #4]
 8012582:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801258a:	2b01      	cmp	r3, #1
 801258c:	d101      	bne.n	8012592 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801258e:	2302      	movs	r3, #2
 8012590:	e02d      	b.n	80125ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2201      	movs	r2, #1
 8012596:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2224      	movs	r2, #36	; 0x24
 801259e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	681a      	ldr	r2, [r3, #0]
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	f022 0201 	bic.w	r2, r2, #1
 80125b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	689b      	ldr	r3, [r3, #8]
 80125c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	683a      	ldr	r2, [r7, #0]
 80125ca:	430a      	orrs	r2, r1
 80125cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f000 f850 	bl	8012674 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	68fa      	ldr	r2, [r7, #12]
 80125da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2220      	movs	r2, #32
 80125e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2200      	movs	r2, #0
 80125e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80125ec:	2300      	movs	r3, #0
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	3710      	adds	r7, #16
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}

080125f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80125f6:	b580      	push	{r7, lr}
 80125f8:	b084      	sub	sp, #16
 80125fa:	af00      	add	r7, sp, #0
 80125fc:	6078      	str	r0, [r7, #4]
 80125fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012606:	2b01      	cmp	r3, #1
 8012608:	d101      	bne.n	801260e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801260a:	2302      	movs	r3, #2
 801260c:	e02d      	b.n	801266a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2201      	movs	r2, #1
 8012612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2224      	movs	r2, #36	; 0x24
 801261a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	681a      	ldr	r2, [r3, #0]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	f022 0201 	bic.w	r2, r2, #1
 8012634:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	689b      	ldr	r3, [r3, #8]
 801263c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	683a      	ldr	r2, [r7, #0]
 8012646:	430a      	orrs	r2, r1
 8012648:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f000 f812 	bl	8012674 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	68fa      	ldr	r2, [r7, #12]
 8012656:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2220      	movs	r2, #32
 801265c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2200      	movs	r2, #0
 8012664:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012668:	2300      	movs	r3, #0
}
 801266a:	4618      	mov	r0, r3
 801266c:	3710      	adds	r7, #16
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
	...

08012674 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012674:	b480      	push	{r7}
 8012676:	b085      	sub	sp, #20
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012680:	2b00      	cmp	r3, #0
 8012682:	d108      	bne.n	8012696 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2201      	movs	r2, #1
 8012688:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2201      	movs	r2, #1
 8012690:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012694:	e031      	b.n	80126fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012696:	2310      	movs	r3, #16
 8012698:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801269a:	2310      	movs	r3, #16
 801269c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	689b      	ldr	r3, [r3, #8]
 80126a4:	0e5b      	lsrs	r3, r3, #25
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	f003 0307 	and.w	r3, r3, #7
 80126ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	689b      	ldr	r3, [r3, #8]
 80126b4:	0f5b      	lsrs	r3, r3, #29
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	f003 0307 	and.w	r3, r3, #7
 80126bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80126be:	7bbb      	ldrb	r3, [r7, #14]
 80126c0:	7b3a      	ldrb	r2, [r7, #12]
 80126c2:	4911      	ldr	r1, [pc, #68]	; (8012708 <UARTEx_SetNbDataToProcess+0x94>)
 80126c4:	5c8a      	ldrb	r2, [r1, r2]
 80126c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80126ca:	7b3a      	ldrb	r2, [r7, #12]
 80126cc:	490f      	ldr	r1, [pc, #60]	; (801270c <UARTEx_SetNbDataToProcess+0x98>)
 80126ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80126d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80126d4:	b29a      	uxth	r2, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80126dc:	7bfb      	ldrb	r3, [r7, #15]
 80126de:	7b7a      	ldrb	r2, [r7, #13]
 80126e0:	4909      	ldr	r1, [pc, #36]	; (8012708 <UARTEx_SetNbDataToProcess+0x94>)
 80126e2:	5c8a      	ldrb	r2, [r1, r2]
 80126e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80126e8:	7b7a      	ldrb	r2, [r7, #13]
 80126ea:	4908      	ldr	r1, [pc, #32]	; (801270c <UARTEx_SetNbDataToProcess+0x98>)
 80126ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80126ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80126f2:	b29a      	uxth	r2, r3
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80126fa:	bf00      	nop
 80126fc:	3714      	adds	r7, #20
 80126fe:	46bd      	mov	sp, r7
 8012700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012704:	4770      	bx	lr
 8012706:	bf00      	nop
 8012708:	08016e70 	.word	0x08016e70
 801270c:	08016e78 	.word	0x08016e78

08012710 <__NVIC_SetPriority>:
{
 8012710:	b480      	push	{r7}
 8012712:	b083      	sub	sp, #12
 8012714:	af00      	add	r7, sp, #0
 8012716:	4603      	mov	r3, r0
 8012718:	6039      	str	r1, [r7, #0]
 801271a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801271c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012720:	2b00      	cmp	r3, #0
 8012722:	db0a      	blt.n	801273a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	b2da      	uxtb	r2, r3
 8012728:	490c      	ldr	r1, [pc, #48]	; (801275c <__NVIC_SetPriority+0x4c>)
 801272a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801272e:	0112      	lsls	r2, r2, #4
 8012730:	b2d2      	uxtb	r2, r2
 8012732:	440b      	add	r3, r1
 8012734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012738:	e00a      	b.n	8012750 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	b2da      	uxtb	r2, r3
 801273e:	4908      	ldr	r1, [pc, #32]	; (8012760 <__NVIC_SetPriority+0x50>)
 8012740:	88fb      	ldrh	r3, [r7, #6]
 8012742:	f003 030f 	and.w	r3, r3, #15
 8012746:	3b04      	subs	r3, #4
 8012748:	0112      	lsls	r2, r2, #4
 801274a:	b2d2      	uxtb	r2, r2
 801274c:	440b      	add	r3, r1
 801274e:	761a      	strb	r2, [r3, #24]
}
 8012750:	bf00      	nop
 8012752:	370c      	adds	r7, #12
 8012754:	46bd      	mov	sp, r7
 8012756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275a:	4770      	bx	lr
 801275c:	e000e100 	.word	0xe000e100
 8012760:	e000ed00 	.word	0xe000ed00

08012764 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012764:	b580      	push	{r7, lr}
 8012766:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012768:	4b05      	ldr	r3, [pc, #20]	; (8012780 <SysTick_Handler+0x1c>)
 801276a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801276c:	f002 fbba 	bl	8014ee4 <xTaskGetSchedulerState>
 8012770:	4603      	mov	r3, r0
 8012772:	2b01      	cmp	r3, #1
 8012774:	d001      	beq.n	801277a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012776:	f003 f9d7 	bl	8015b28 <xPortSysTickHandler>
  }
}
 801277a:	bf00      	nop
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	e000e010 	.word	0xe000e010

08012784 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012784:	b580      	push	{r7, lr}
 8012786:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012788:	2100      	movs	r1, #0
 801278a:	f06f 0004 	mvn.w	r0, #4
 801278e:	f7ff ffbf 	bl	8012710 <__NVIC_SetPriority>
#endif
}
 8012792:	bf00      	nop
 8012794:	bd80      	pop	{r7, pc}
	...

08012798 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012798:	b480      	push	{r7}
 801279a:	b083      	sub	sp, #12
 801279c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801279e:	f3ef 8305 	mrs	r3, IPSR
 80127a2:	603b      	str	r3, [r7, #0]
  return(result);
 80127a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d003      	beq.n	80127b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80127aa:	f06f 0305 	mvn.w	r3, #5
 80127ae:	607b      	str	r3, [r7, #4]
 80127b0:	e00c      	b.n	80127cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80127b2:	4b0a      	ldr	r3, [pc, #40]	; (80127dc <osKernelInitialize+0x44>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d105      	bne.n	80127c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80127ba:	4b08      	ldr	r3, [pc, #32]	; (80127dc <osKernelInitialize+0x44>)
 80127bc:	2201      	movs	r2, #1
 80127be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80127c0:	2300      	movs	r3, #0
 80127c2:	607b      	str	r3, [r7, #4]
 80127c4:	e002      	b.n	80127cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80127c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80127ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80127cc:	687b      	ldr	r3, [r7, #4]
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	370c      	adds	r7, #12
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr
 80127da:	bf00      	nop
 80127dc:	240010cc 	.word	0x240010cc

080127e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b082      	sub	sp, #8
 80127e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127e6:	f3ef 8305 	mrs	r3, IPSR
 80127ea:	603b      	str	r3, [r7, #0]
  return(result);
 80127ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d003      	beq.n	80127fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80127f2:	f06f 0305 	mvn.w	r3, #5
 80127f6:	607b      	str	r3, [r7, #4]
 80127f8:	e010      	b.n	801281c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80127fa:	4b0b      	ldr	r3, [pc, #44]	; (8012828 <osKernelStart+0x48>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	2b01      	cmp	r3, #1
 8012800:	d109      	bne.n	8012816 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012802:	f7ff ffbf 	bl	8012784 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012806:	4b08      	ldr	r3, [pc, #32]	; (8012828 <osKernelStart+0x48>)
 8012808:	2202      	movs	r2, #2
 801280a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801280c:	f001 fe84 	bl	8014518 <vTaskStartScheduler>
      stat = osOK;
 8012810:	2300      	movs	r3, #0
 8012812:	607b      	str	r3, [r7, #4]
 8012814:	e002      	b.n	801281c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801281a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801281c:	687b      	ldr	r3, [r7, #4]
}
 801281e:	4618      	mov	r0, r3
 8012820:	3708      	adds	r7, #8
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	240010cc 	.word	0x240010cc

0801282c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801282c:	b580      	push	{r7, lr}
 801282e:	b08e      	sub	sp, #56	; 0x38
 8012830:	af04      	add	r7, sp, #16
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	60b9      	str	r1, [r7, #8]
 8012836:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012838:	2300      	movs	r3, #0
 801283a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801283c:	f3ef 8305 	mrs	r3, IPSR
 8012840:	617b      	str	r3, [r7, #20]
  return(result);
 8012842:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012844:	2b00      	cmp	r3, #0
 8012846:	d17e      	bne.n	8012946 <osThreadNew+0x11a>
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d07b      	beq.n	8012946 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801284e:	2380      	movs	r3, #128	; 0x80
 8012850:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012852:	2318      	movs	r3, #24
 8012854:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012856:	2300      	movs	r3, #0
 8012858:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801285a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801285e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d045      	beq.n	80128f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d002      	beq.n	8012874 <osThreadNew+0x48>
        name = attr->name;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	699b      	ldr	r3, [r3, #24]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d002      	beq.n	8012882 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	699b      	ldr	r3, [r3, #24]
 8012880:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012882:	69fb      	ldr	r3, [r7, #28]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d008      	beq.n	801289a <osThreadNew+0x6e>
 8012888:	69fb      	ldr	r3, [r7, #28]
 801288a:	2b38      	cmp	r3, #56	; 0x38
 801288c:	d805      	bhi.n	801289a <osThreadNew+0x6e>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	f003 0301 	and.w	r3, r3, #1
 8012896:	2b00      	cmp	r3, #0
 8012898:	d001      	beq.n	801289e <osThreadNew+0x72>
        return (NULL);
 801289a:	2300      	movs	r3, #0
 801289c:	e054      	b.n	8012948 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	695b      	ldr	r3, [r3, #20]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d003      	beq.n	80128ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	695b      	ldr	r3, [r3, #20]
 80128aa:	089b      	lsrs	r3, r3, #2
 80128ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	689b      	ldr	r3, [r3, #8]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d00e      	beq.n	80128d4 <osThreadNew+0xa8>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	68db      	ldr	r3, [r3, #12]
 80128ba:	2b5b      	cmp	r3, #91	; 0x5b
 80128bc:	d90a      	bls.n	80128d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d006      	beq.n	80128d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	695b      	ldr	r3, [r3, #20]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d002      	beq.n	80128d4 <osThreadNew+0xa8>
        mem = 1;
 80128ce:	2301      	movs	r3, #1
 80128d0:	61bb      	str	r3, [r7, #24]
 80128d2:	e010      	b.n	80128f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	689b      	ldr	r3, [r3, #8]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d10c      	bne.n	80128f6 <osThreadNew+0xca>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	68db      	ldr	r3, [r3, #12]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d108      	bne.n	80128f6 <osThreadNew+0xca>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	691b      	ldr	r3, [r3, #16]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d104      	bne.n	80128f6 <osThreadNew+0xca>
          mem = 0;
 80128ec:	2300      	movs	r3, #0
 80128ee:	61bb      	str	r3, [r7, #24]
 80128f0:	e001      	b.n	80128f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80128f2:	2300      	movs	r3, #0
 80128f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	2b01      	cmp	r3, #1
 80128fa:	d110      	bne.n	801291e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012904:	9202      	str	r2, [sp, #8]
 8012906:	9301      	str	r3, [sp, #4]
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	9300      	str	r3, [sp, #0]
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	6a3a      	ldr	r2, [r7, #32]
 8012910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012912:	68f8      	ldr	r0, [r7, #12]
 8012914:	f001 fb10 	bl	8013f38 <xTaskCreateStatic>
 8012918:	4603      	mov	r3, r0
 801291a:	613b      	str	r3, [r7, #16]
 801291c:	e013      	b.n	8012946 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801291e:	69bb      	ldr	r3, [r7, #24]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d110      	bne.n	8012946 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012924:	6a3b      	ldr	r3, [r7, #32]
 8012926:	b29a      	uxth	r2, r3
 8012928:	f107 0310 	add.w	r3, r7, #16
 801292c:	9301      	str	r3, [sp, #4]
 801292e:	69fb      	ldr	r3, [r7, #28]
 8012930:	9300      	str	r3, [sp, #0]
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012936:	68f8      	ldr	r0, [r7, #12]
 8012938:	f001 fb5b 	bl	8013ff2 <xTaskCreate>
 801293c:	4603      	mov	r3, r0
 801293e:	2b01      	cmp	r3, #1
 8012940:	d001      	beq.n	8012946 <osThreadNew+0x11a>
            hTask = NULL;
 8012942:	2300      	movs	r3, #0
 8012944:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012946:	693b      	ldr	r3, [r7, #16]
}
 8012948:	4618      	mov	r0, r3
 801294a:	3728      	adds	r7, #40	; 0x28
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}

08012950 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012950:	b480      	push	{r7}
 8012952:	b083      	sub	sp, #12
 8012954:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012956:	f3ef 8305 	mrs	r3, IPSR
 801295a:	603b      	str	r3, [r7, #0]
  return(result);
 801295c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801295e:	2b00      	cmp	r3, #0
 8012960:	d003      	beq.n	801296a <osThreadYield+0x1a>
    stat = osErrorISR;
 8012962:	f06f 0305 	mvn.w	r3, #5
 8012966:	607b      	str	r3, [r7, #4]
 8012968:	e009      	b.n	801297e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801296a:	2300      	movs	r3, #0
 801296c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801296e:	4b07      	ldr	r3, [pc, #28]	; (801298c <osThreadYield+0x3c>)
 8012970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012974:	601a      	str	r2, [r3, #0]
 8012976:	f3bf 8f4f 	dsb	sy
 801297a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801297e:	687b      	ldr	r3, [r7, #4]
}
 8012980:	4618      	mov	r0, r3
 8012982:	370c      	adds	r7, #12
 8012984:	46bd      	mov	sp, r7
 8012986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298a:	4770      	bx	lr
 801298c:	e000ed04 	.word	0xe000ed04

08012990 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012990:	b580      	push	{r7, lr}
 8012992:	b086      	sub	sp, #24
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801299c:	f3ef 8305 	mrs	r3, IPSR
 80129a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80129a2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d003      	beq.n	80129b0 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80129a8:	f06f 0305 	mvn.w	r3, #5
 80129ac:	617b      	str	r3, [r7, #20]
 80129ae:	e00b      	b.n	80129c8 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d103      	bne.n	80129be <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80129b6:	f06f 0303 	mvn.w	r3, #3
 80129ba:	617b      	str	r3, [r7, #20]
 80129bc:	e004      	b.n	80129c8 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80129be:	2300      	movs	r3, #0
 80129c0:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80129c2:	6938      	ldr	r0, [r7, #16]
 80129c4:	f001 fc8e 	bl	80142e4 <vTaskSuspend>
  }

  return (stat);
 80129c8:	697b      	ldr	r3, [r7, #20]
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3718      	adds	r7, #24
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}

080129d2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80129d2:	b580      	push	{r7, lr}
 80129d4:	b084      	sub	sp, #16
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129da:	f3ef 8305 	mrs	r3, IPSR
 80129de:	60bb      	str	r3, [r7, #8]
  return(result);
 80129e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d003      	beq.n	80129ee <osDelay+0x1c>
    stat = osErrorISR;
 80129e6:	f06f 0305 	mvn.w	r3, #5
 80129ea:	60fb      	str	r3, [r7, #12]
 80129ec:	e007      	b.n	80129fe <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80129ee:	2300      	movs	r3, #0
 80129f0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d002      	beq.n	80129fe <osDelay+0x2c>
      vTaskDelay(ticks);
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f001 fc3f 	bl	801427c <vTaskDelay>
    }
  }

  return (stat);
 80129fe:	68fb      	ldr	r3, [r7, #12]
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3710      	adds	r7, #16
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}

08012a08 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b086      	sub	sp, #24
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012a10:	2300      	movs	r3, #0
 8012a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a14:	f3ef 8305 	mrs	r3, IPSR
 8012a18:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a1a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d12d      	bne.n	8012a7c <osEventFlagsNew+0x74>
    mem = -1;
 8012a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a24:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d015      	beq.n	8012a58 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	689b      	ldr	r3, [r3, #8]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d006      	beq.n	8012a42 <osEventFlagsNew+0x3a>
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	68db      	ldr	r3, [r3, #12]
 8012a38:	2b1f      	cmp	r3, #31
 8012a3a:	d902      	bls.n	8012a42 <osEventFlagsNew+0x3a>
        mem = 1;
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	613b      	str	r3, [r7, #16]
 8012a40:	e00c      	b.n	8012a5c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	689b      	ldr	r3, [r3, #8]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d108      	bne.n	8012a5c <osEventFlagsNew+0x54>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d104      	bne.n	8012a5c <osEventFlagsNew+0x54>
          mem = 0;
 8012a52:	2300      	movs	r3, #0
 8012a54:	613b      	str	r3, [r7, #16]
 8012a56:	e001      	b.n	8012a5c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	2b01      	cmp	r3, #1
 8012a60:	d106      	bne.n	8012a70 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	689b      	ldr	r3, [r3, #8]
 8012a66:	4618      	mov	r0, r3
 8012a68:	f000 fa1e 	bl	8012ea8 <xEventGroupCreateStatic>
 8012a6c:	6178      	str	r0, [r7, #20]
 8012a6e:	e005      	b.n	8012a7c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d102      	bne.n	8012a7c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012a76:	f000 fa4e 	bl	8012f16 <xEventGroupCreate>
 8012a7a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012a7c:	697b      	ldr	r3, [r7, #20]
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3718      	adds	r7, #24
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}
	...

08012a88 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b086      	sub	sp, #24
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
 8012a90:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d004      	beq.n	8012aa6 <osEventFlagsSet+0x1e>
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d003      	beq.n	8012aae <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012aa6:	f06f 0303 	mvn.w	r3, #3
 8012aaa:	617b      	str	r3, [r7, #20]
 8012aac:	e028      	b.n	8012b00 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012aae:	f3ef 8305 	mrs	r3, IPSR
 8012ab2:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ab4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d01d      	beq.n	8012af6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012aba:	2300      	movs	r3, #0
 8012abc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012abe:	f107 0308 	add.w	r3, r7, #8
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	6839      	ldr	r1, [r7, #0]
 8012ac6:	6938      	ldr	r0, [r7, #16]
 8012ac8:	f000 fbc8 	bl	801325c <xEventGroupSetBitsFromISR>
 8012acc:	4603      	mov	r3, r0
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d103      	bne.n	8012ada <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012ad2:	f06f 0302 	mvn.w	r3, #2
 8012ad6:	617b      	str	r3, [r7, #20]
 8012ad8:	e012      	b.n	8012b00 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d00d      	beq.n	8012b00 <osEventFlagsSet+0x78>
 8012ae4:	4b09      	ldr	r3, [pc, #36]	; (8012b0c <osEventFlagsSet+0x84>)
 8012ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012aea:	601a      	str	r2, [r3, #0]
 8012aec:	f3bf 8f4f 	dsb	sy
 8012af0:	f3bf 8f6f 	isb	sy
 8012af4:	e004      	b.n	8012b00 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012af6:	6839      	ldr	r1, [r7, #0]
 8012af8:	6938      	ldr	r0, [r7, #16]
 8012afa:	f000 faf5 	bl	80130e8 <xEventGroupSetBits>
 8012afe:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012b00:	697b      	ldr	r3, [r7, #20]
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3718      	adds	r7, #24
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	e000ed04 	.word	0xe000ed04

08012b10 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b08c      	sub	sp, #48	; 0x30
 8012b14:	af02      	add	r7, sp, #8
 8012b16:	60f8      	str	r0, [r7, #12]
 8012b18:	60b9      	str	r1, [r7, #8]
 8012b1a:	607a      	str	r2, [r7, #4]
 8012b1c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012b22:	69bb      	ldr	r3, [r7, #24]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d004      	beq.n	8012b32 <osEventFlagsWait+0x22>
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d003      	beq.n	8012b3a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012b32:	f06f 0303 	mvn.w	r3, #3
 8012b36:	61fb      	str	r3, [r7, #28]
 8012b38:	e04b      	b.n	8012bd2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b3a:	f3ef 8305 	mrs	r3, IPSR
 8012b3e:	617b      	str	r3, [r7, #20]
  return(result);
 8012b40:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d003      	beq.n	8012b4e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012b46:	f06f 0305 	mvn.w	r3, #5
 8012b4a:	61fb      	str	r3, [r7, #28]
 8012b4c:	e041      	b.n	8012bd2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f003 0301 	and.w	r3, r3, #1
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d002      	beq.n	8012b5e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012b58:	2301      	movs	r3, #1
 8012b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8012b5c:	e001      	b.n	8012b62 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f003 0302 	and.w	r3, r3, #2
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d002      	beq.n	8012b72 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	623b      	str	r3, [r7, #32]
 8012b70:	e001      	b.n	8012b76 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012b72:	2301      	movs	r3, #1
 8012b74:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	9300      	str	r3, [sp, #0]
 8012b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7c:	6a3a      	ldr	r2, [r7, #32]
 8012b7e:	68b9      	ldr	r1, [r7, #8]
 8012b80:	69b8      	ldr	r0, [r7, #24]
 8012b82:	f000 f9e3 	bl	8012f4c <xEventGroupWaitBits>
 8012b86:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f003 0301 	and.w	r3, r3, #1
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d010      	beq.n	8012bb4 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012b92:	68ba      	ldr	r2, [r7, #8]
 8012b94:	69fb      	ldr	r3, [r7, #28]
 8012b96:	4013      	ands	r3, r2
 8012b98:	68ba      	ldr	r2, [r7, #8]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d019      	beq.n	8012bd2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d003      	beq.n	8012bac <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012ba4:	f06f 0301 	mvn.w	r3, #1
 8012ba8:	61fb      	str	r3, [r7, #28]
 8012baa:	e012      	b.n	8012bd2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012bac:	f06f 0302 	mvn.w	r3, #2
 8012bb0:	61fb      	str	r3, [r7, #28]
 8012bb2:	e00e      	b.n	8012bd2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012bb4:	68ba      	ldr	r2, [r7, #8]
 8012bb6:	69fb      	ldr	r3, [r7, #28]
 8012bb8:	4013      	ands	r3, r2
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d109      	bne.n	8012bd2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d003      	beq.n	8012bcc <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012bc4:	f06f 0301 	mvn.w	r3, #1
 8012bc8:	61fb      	str	r3, [r7, #28]
 8012bca:	e002      	b.n	8012bd2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012bcc:	f06f 0302 	mvn.w	r3, #2
 8012bd0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012bd2:	69fb      	ldr	r3, [r7, #28]
}
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	3728      	adds	r7, #40	; 0x28
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}

08012bdc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b08a      	sub	sp, #40	; 0x28
 8012be0:	af02      	add	r7, sp, #8
 8012be2:	60f8      	str	r0, [r7, #12]
 8012be4:	60b9      	str	r1, [r7, #8]
 8012be6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012be8:	2300      	movs	r3, #0
 8012bea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bec:	f3ef 8305 	mrs	r3, IPSR
 8012bf0:	613b      	str	r3, [r7, #16]
  return(result);
 8012bf2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d15f      	bne.n	8012cb8 <osMessageQueueNew+0xdc>
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d05c      	beq.n	8012cb8 <osMessageQueueNew+0xdc>
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d059      	beq.n	8012cb8 <osMessageQueueNew+0xdc>
    mem = -1;
 8012c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c08:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d029      	beq.n	8012c64 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	689b      	ldr	r3, [r3, #8]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d012      	beq.n	8012c3e <osMessageQueueNew+0x62>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	68db      	ldr	r3, [r3, #12]
 8012c1c:	2b4f      	cmp	r3, #79	; 0x4f
 8012c1e:	d90e      	bls.n	8012c3e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d00a      	beq.n	8012c3e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	695a      	ldr	r2, [r3, #20]
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	68b9      	ldr	r1, [r7, #8]
 8012c30:	fb01 f303 	mul.w	r3, r1, r3
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d302      	bcc.n	8012c3e <osMessageQueueNew+0x62>
        mem = 1;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	61bb      	str	r3, [r7, #24]
 8012c3c:	e014      	b.n	8012c68 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	689b      	ldr	r3, [r3, #8]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d110      	bne.n	8012c68 <osMessageQueueNew+0x8c>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	68db      	ldr	r3, [r3, #12]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d10c      	bne.n	8012c68 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d108      	bne.n	8012c68 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	695b      	ldr	r3, [r3, #20]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d104      	bne.n	8012c68 <osMessageQueueNew+0x8c>
          mem = 0;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	61bb      	str	r3, [r7, #24]
 8012c62:	e001      	b.n	8012c68 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012c64:	2300      	movs	r3, #0
 8012c66:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012c68:	69bb      	ldr	r3, [r7, #24]
 8012c6a:	2b01      	cmp	r3, #1
 8012c6c:	d10b      	bne.n	8012c86 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	691a      	ldr	r2, [r3, #16]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	689b      	ldr	r3, [r3, #8]
 8012c76:	2100      	movs	r1, #0
 8012c78:	9100      	str	r1, [sp, #0]
 8012c7a:	68b9      	ldr	r1, [r7, #8]
 8012c7c:	68f8      	ldr	r0, [r7, #12]
 8012c7e:	f000 fc1d 	bl	80134bc <xQueueGenericCreateStatic>
 8012c82:	61f8      	str	r0, [r7, #28]
 8012c84:	e008      	b.n	8012c98 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012c86:	69bb      	ldr	r3, [r7, #24]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d105      	bne.n	8012c98 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	68b9      	ldr	r1, [r7, #8]
 8012c90:	68f8      	ldr	r0, [r7, #12]
 8012c92:	f000 fc8b 	bl	80135ac <xQueueGenericCreate>
 8012c96:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012c98:	69fb      	ldr	r3, [r7, #28]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d00c      	beq.n	8012cb8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d003      	beq.n	8012cac <osMessageQueueNew+0xd0>
        name = attr->name;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	617b      	str	r3, [r7, #20]
 8012caa:	e001      	b.n	8012cb0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012cac:	2300      	movs	r3, #0
 8012cae:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012cb0:	6979      	ldr	r1, [r7, #20]
 8012cb2:	69f8      	ldr	r0, [r7, #28]
 8012cb4:	f001 f8e2 	bl	8013e7c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012cb8:	69fb      	ldr	r3, [r7, #28]
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3720      	adds	r7, #32
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}
	...

08012cc4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b088      	sub	sp, #32
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	603b      	str	r3, [r7, #0]
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cdc:	f3ef 8305 	mrs	r3, IPSR
 8012ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8012ce2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d028      	beq.n	8012d3a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012ce8:	69bb      	ldr	r3, [r7, #24]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d005      	beq.n	8012cfa <osMessageQueuePut+0x36>
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d002      	beq.n	8012cfa <osMessageQueuePut+0x36>
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d003      	beq.n	8012d02 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012cfa:	f06f 0303 	mvn.w	r3, #3
 8012cfe:	61fb      	str	r3, [r7, #28]
 8012d00:	e038      	b.n	8012d74 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012d02:	2300      	movs	r3, #0
 8012d04:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012d06:	f107 0210 	add.w	r2, r7, #16
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	68b9      	ldr	r1, [r7, #8]
 8012d0e:	69b8      	ldr	r0, [r7, #24]
 8012d10:	f000 fda8 	bl	8013864 <xQueueGenericSendFromISR>
 8012d14:	4603      	mov	r3, r0
 8012d16:	2b01      	cmp	r3, #1
 8012d18:	d003      	beq.n	8012d22 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012d1a:	f06f 0302 	mvn.w	r3, #2
 8012d1e:	61fb      	str	r3, [r7, #28]
 8012d20:	e028      	b.n	8012d74 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d025      	beq.n	8012d74 <osMessageQueuePut+0xb0>
 8012d28:	4b15      	ldr	r3, [pc, #84]	; (8012d80 <osMessageQueuePut+0xbc>)
 8012d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d2e:	601a      	str	r2, [r3, #0]
 8012d30:	f3bf 8f4f 	dsb	sy
 8012d34:	f3bf 8f6f 	isb	sy
 8012d38:	e01c      	b.n	8012d74 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012d3a:	69bb      	ldr	r3, [r7, #24]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d002      	beq.n	8012d46 <osMessageQueuePut+0x82>
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d103      	bne.n	8012d4e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012d46:	f06f 0303 	mvn.w	r3, #3
 8012d4a:	61fb      	str	r3, [r7, #28]
 8012d4c:	e012      	b.n	8012d74 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012d4e:	2300      	movs	r3, #0
 8012d50:	683a      	ldr	r2, [r7, #0]
 8012d52:	68b9      	ldr	r1, [r7, #8]
 8012d54:	69b8      	ldr	r0, [r7, #24]
 8012d56:	f000 fc87 	bl	8013668 <xQueueGenericSend>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b01      	cmp	r3, #1
 8012d5e:	d009      	beq.n	8012d74 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d003      	beq.n	8012d6e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012d66:	f06f 0301 	mvn.w	r3, #1
 8012d6a:	61fb      	str	r3, [r7, #28]
 8012d6c:	e002      	b.n	8012d74 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012d6e:	f06f 0302 	mvn.w	r3, #2
 8012d72:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012d74:	69fb      	ldr	r3, [r7, #28]
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3720      	adds	r7, #32
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	e000ed04 	.word	0xe000ed04

08012d84 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b088      	sub	sp, #32
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	60f8      	str	r0, [r7, #12]
 8012d8c:	60b9      	str	r1, [r7, #8]
 8012d8e:	607a      	str	r2, [r7, #4]
 8012d90:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012d96:	2300      	movs	r3, #0
 8012d98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d9a:	f3ef 8305 	mrs	r3, IPSR
 8012d9e:	617b      	str	r3, [r7, #20]
  return(result);
 8012da0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d028      	beq.n	8012df8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012da6:	69bb      	ldr	r3, [r7, #24]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d005      	beq.n	8012db8 <osMessageQueueGet+0x34>
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d002      	beq.n	8012db8 <osMessageQueueGet+0x34>
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d003      	beq.n	8012dc0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012db8:	f06f 0303 	mvn.w	r3, #3
 8012dbc:	61fb      	str	r3, [r7, #28]
 8012dbe:	e037      	b.n	8012e30 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012dc4:	f107 0310 	add.w	r3, r7, #16
 8012dc8:	461a      	mov	r2, r3
 8012dca:	68b9      	ldr	r1, [r7, #8]
 8012dcc:	69b8      	ldr	r0, [r7, #24]
 8012dce:	f000 fec5 	bl	8013b5c <xQueueReceiveFromISR>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	2b01      	cmp	r3, #1
 8012dd6:	d003      	beq.n	8012de0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012dd8:	f06f 0302 	mvn.w	r3, #2
 8012ddc:	61fb      	str	r3, [r7, #28]
 8012dde:	e027      	b.n	8012e30 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d024      	beq.n	8012e30 <osMessageQueueGet+0xac>
 8012de6:	4b15      	ldr	r3, [pc, #84]	; (8012e3c <osMessageQueueGet+0xb8>)
 8012de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dec:	601a      	str	r2, [r3, #0]
 8012dee:	f3bf 8f4f 	dsb	sy
 8012df2:	f3bf 8f6f 	isb	sy
 8012df6:	e01b      	b.n	8012e30 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012df8:	69bb      	ldr	r3, [r7, #24]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d002      	beq.n	8012e04 <osMessageQueueGet+0x80>
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d103      	bne.n	8012e0c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012e04:	f06f 0303 	mvn.w	r3, #3
 8012e08:	61fb      	str	r3, [r7, #28]
 8012e0a:	e011      	b.n	8012e30 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012e0c:	683a      	ldr	r2, [r7, #0]
 8012e0e:	68b9      	ldr	r1, [r7, #8]
 8012e10:	69b8      	ldr	r0, [r7, #24]
 8012e12:	f000 fdc3 	bl	801399c <xQueueReceive>
 8012e16:	4603      	mov	r3, r0
 8012e18:	2b01      	cmp	r3, #1
 8012e1a:	d009      	beq.n	8012e30 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d003      	beq.n	8012e2a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012e22:	f06f 0301 	mvn.w	r3, #1
 8012e26:	61fb      	str	r3, [r7, #28]
 8012e28:	e002      	b.n	8012e30 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012e2a:	f06f 0302 	mvn.w	r3, #2
 8012e2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012e30:	69fb      	ldr	r3, [r7, #28]
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3720      	adds	r7, #32
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	e000ed04 	.word	0xe000ed04

08012e40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012e40:	b480      	push	{r7}
 8012e42:	b085      	sub	sp, #20
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	60f8      	str	r0, [r7, #12]
 8012e48:	60b9      	str	r1, [r7, #8]
 8012e4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	4a07      	ldr	r2, [pc, #28]	; (8012e6c <vApplicationGetIdleTaskMemory+0x2c>)
 8012e50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	4a06      	ldr	r2, [pc, #24]	; (8012e70 <vApplicationGetIdleTaskMemory+0x30>)
 8012e56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2280      	movs	r2, #128	; 0x80
 8012e5c:	601a      	str	r2, [r3, #0]
}
 8012e5e:	bf00      	nop
 8012e60:	3714      	adds	r7, #20
 8012e62:	46bd      	mov	sp, r7
 8012e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e68:	4770      	bx	lr
 8012e6a:	bf00      	nop
 8012e6c:	240010d0 	.word	0x240010d0
 8012e70:	2400112c 	.word	0x2400112c

08012e74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012e74:	b480      	push	{r7}
 8012e76:	b085      	sub	sp, #20
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	60f8      	str	r0, [r7, #12]
 8012e7c:	60b9      	str	r1, [r7, #8]
 8012e7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	4a07      	ldr	r2, [pc, #28]	; (8012ea0 <vApplicationGetTimerTaskMemory+0x2c>)
 8012e84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	4a06      	ldr	r2, [pc, #24]	; (8012ea4 <vApplicationGetTimerTaskMemory+0x30>)
 8012e8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012e92:	601a      	str	r2, [r3, #0]
}
 8012e94:	bf00      	nop
 8012e96:	3714      	adds	r7, #20
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9e:	4770      	bx	lr
 8012ea0:	2400132c 	.word	0x2400132c
 8012ea4:	24001388 	.word	0x24001388

08012ea8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b086      	sub	sp, #24
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d10a      	bne.n	8012ecc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eba:	f383 8811 	msr	BASEPRI, r3
 8012ebe:	f3bf 8f6f 	isb	sy
 8012ec2:	f3bf 8f4f 	dsb	sy
 8012ec6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012ec8:	bf00      	nop
 8012eca:	e7fe      	b.n	8012eca <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8012ecc:	2320      	movs	r3, #32
 8012ece:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	2b20      	cmp	r3, #32
 8012ed4:	d00a      	beq.n	8012eec <xEventGroupCreateStatic+0x44>
	__asm volatile
 8012ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eda:	f383 8811 	msr	BASEPRI, r3
 8012ede:	f3bf 8f6f 	isb	sy
 8012ee2:	f3bf 8f4f 	dsb	sy
 8012ee6:	60fb      	str	r3, [r7, #12]
}
 8012ee8:	bf00      	nop
 8012eea:	e7fe      	b.n	8012eea <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d00a      	beq.n	8012f0c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8012ef6:	697b      	ldr	r3, [r7, #20]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	3304      	adds	r3, #4
 8012f00:	4618      	mov	r0, r3
 8012f02:	f000 f9bf 	bl	8013284 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	2201      	movs	r2, #1
 8012f0a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8012f0c:	697b      	ldr	r3, [r7, #20]
	}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3718      	adds	r7, #24
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}

08012f16 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012f16:	b580      	push	{r7, lr}
 8012f18:	b082      	sub	sp, #8
 8012f1a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012f1c:	2020      	movs	r0, #32
 8012f1e:	f002 fe93 	bl	8015c48 <pvPortMalloc>
 8012f22:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d00a      	beq.n	8012f40 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	3304      	adds	r3, #4
 8012f34:	4618      	mov	r0, r3
 8012f36:	f000 f9a5 	bl	8013284 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012f40:	687b      	ldr	r3, [r7, #4]
	}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3708      	adds	r7, #8
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
	...

08012f4c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b090      	sub	sp, #64	; 0x40
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	60f8      	str	r0, [r7, #12]
 8012f54:	60b9      	str	r1, [r7, #8]
 8012f56:	607a      	str	r2, [r7, #4]
 8012f58:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012f62:	2300      	movs	r3, #0
 8012f64:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d10a      	bne.n	8012f82 <xEventGroupWaitBits+0x36>
	__asm volatile
 8012f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f70:	f383 8811 	msr	BASEPRI, r3
 8012f74:	f3bf 8f6f 	isb	sy
 8012f78:	f3bf 8f4f 	dsb	sy
 8012f7c:	623b      	str	r3, [r7, #32]
}
 8012f7e:	bf00      	nop
 8012f80:	e7fe      	b.n	8012f80 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d00a      	beq.n	8012fa2 <xEventGroupWaitBits+0x56>
	__asm volatile
 8012f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f90:	f383 8811 	msr	BASEPRI, r3
 8012f94:	f3bf 8f6f 	isb	sy
 8012f98:	f3bf 8f4f 	dsb	sy
 8012f9c:	61fb      	str	r3, [r7, #28]
}
 8012f9e:	bf00      	nop
 8012fa0:	e7fe      	b.n	8012fa0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10a      	bne.n	8012fbe <xEventGroupWaitBits+0x72>
	__asm volatile
 8012fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fac:	f383 8811 	msr	BASEPRI, r3
 8012fb0:	f3bf 8f6f 	isb	sy
 8012fb4:	f3bf 8f4f 	dsb	sy
 8012fb8:	61bb      	str	r3, [r7, #24]
}
 8012fba:	bf00      	nop
 8012fbc:	e7fe      	b.n	8012fbc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012fbe:	f001 ff91 	bl	8014ee4 <xTaskGetSchedulerState>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d102      	bne.n	8012fce <xEventGroupWaitBits+0x82>
 8012fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d101      	bne.n	8012fd2 <xEventGroupWaitBits+0x86>
 8012fce:	2301      	movs	r3, #1
 8012fd0:	e000      	b.n	8012fd4 <xEventGroupWaitBits+0x88>
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d10a      	bne.n	8012fee <xEventGroupWaitBits+0xa2>
	__asm volatile
 8012fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fdc:	f383 8811 	msr	BASEPRI, r3
 8012fe0:	f3bf 8f6f 	isb	sy
 8012fe4:	f3bf 8f4f 	dsb	sy
 8012fe8:	617b      	str	r3, [r7, #20]
}
 8012fea:	bf00      	nop
 8012fec:	e7fe      	b.n	8012fec <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8012fee:	f001 faf9 	bl	80145e4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8012ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8012ff8:	683a      	ldr	r2, [r7, #0]
 8012ffa:	68b9      	ldr	r1, [r7, #8]
 8012ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ffe:	f000 f90b 	bl	8013218 <prvTestWaitCondition>
 8013002:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013006:	2b00      	cmp	r3, #0
 8013008:	d00e      	beq.n	8013028 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801300c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801300e:	2300      	movs	r3, #0
 8013010:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d028      	beq.n	801306a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801301a:	681a      	ldr	r2, [r3, #0]
 801301c:	68bb      	ldr	r3, [r7, #8]
 801301e:	43db      	mvns	r3, r3
 8013020:	401a      	ands	r2, r3
 8013022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013024:	601a      	str	r2, [r3, #0]
 8013026:	e020      	b.n	801306a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801302a:	2b00      	cmp	r3, #0
 801302c:	d104      	bne.n	8013038 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013030:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013032:	2301      	movs	r3, #1
 8013034:	633b      	str	r3, [r7, #48]	; 0x30
 8013036:	e018      	b.n	801306a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d003      	beq.n	8013046 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013044:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013046:	683b      	ldr	r3, [r7, #0]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d003      	beq.n	8013054 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013052:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013056:	1d18      	adds	r0, r3, #4
 8013058:	68ba      	ldr	r2, [r7, #8]
 801305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305c:	4313      	orrs	r3, r2
 801305e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013060:	4619      	mov	r1, r3
 8013062:	f001 fcb7 	bl	80149d4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013066:	2300      	movs	r3, #0
 8013068:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801306a:	f001 fac9 	bl	8014600 <xTaskResumeAll>
 801306e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013072:	2b00      	cmp	r3, #0
 8013074:	d031      	beq.n	80130da <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013078:	2b00      	cmp	r3, #0
 801307a:	d107      	bne.n	801308c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801307c:	4b19      	ldr	r3, [pc, #100]	; (80130e4 <xEventGroupWaitBits+0x198>)
 801307e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013082:	601a      	str	r2, [r3, #0]
 8013084:	f3bf 8f4f 	dsb	sy
 8013088:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801308c:	f001 ffb6 	bl	8014ffc <uxTaskResetEventItemValue>
 8013090:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013098:	2b00      	cmp	r3, #0
 801309a:	d11a      	bne.n	80130d2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801309c:	f002 fcb2 	bl	8015a04 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80130a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80130a6:	683a      	ldr	r2, [r7, #0]
 80130a8:	68b9      	ldr	r1, [r7, #8]
 80130aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80130ac:	f000 f8b4 	bl	8013218 <prvTestWaitCondition>
 80130b0:	4603      	mov	r3, r0
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d009      	beq.n	80130ca <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d006      	beq.n	80130ca <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80130bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130be:	681a      	ldr	r2, [r3, #0]
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	43db      	mvns	r3, r3
 80130c4:	401a      	ands	r2, r3
 80130c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130c8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80130ca:	2301      	movs	r3, #1
 80130cc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80130ce:	f002 fcc9 	bl	8015a64 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80130d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80130d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80130da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80130dc:	4618      	mov	r0, r3
 80130de:	3740      	adds	r7, #64	; 0x40
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	e000ed04 	.word	0xe000ed04

080130e8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b08e      	sub	sp, #56	; 0x38
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80130f2:	2300      	movs	r3, #0
 80130f4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80130fa:	2300      	movs	r3, #0
 80130fc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d10a      	bne.n	801311a <xEventGroupSetBits+0x32>
	__asm volatile
 8013104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013108:	f383 8811 	msr	BASEPRI, r3
 801310c:	f3bf 8f6f 	isb	sy
 8013110:	f3bf 8f4f 	dsb	sy
 8013114:	613b      	str	r3, [r7, #16]
}
 8013116:	bf00      	nop
 8013118:	e7fe      	b.n	8013118 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013120:	2b00      	cmp	r3, #0
 8013122:	d00a      	beq.n	801313a <xEventGroupSetBits+0x52>
	__asm volatile
 8013124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013128:	f383 8811 	msr	BASEPRI, r3
 801312c:	f3bf 8f6f 	isb	sy
 8013130:	f3bf 8f4f 	dsb	sy
 8013134:	60fb      	str	r3, [r7, #12]
}
 8013136:	bf00      	nop
 8013138:	e7fe      	b.n	8013138 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801313c:	3304      	adds	r3, #4
 801313e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013142:	3308      	adds	r3, #8
 8013144:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013146:	f001 fa4d 	bl	80145e4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314c:	68db      	ldr	r3, [r3, #12]
 801314e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013152:	681a      	ldr	r2, [r3, #0]
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	431a      	orrs	r2, r3
 8013158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801315a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801315c:	e03c      	b.n	80131d8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013160:	685b      	ldr	r3, [r3, #4]
 8013162:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801316a:	2300      	movs	r3, #0
 801316c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801316e:	69bb      	ldr	r3, [r7, #24]
 8013170:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013174:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801317c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013184:	2b00      	cmp	r3, #0
 8013186:	d108      	bne.n	801319a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801318a:	681a      	ldr	r2, [r3, #0]
 801318c:	69bb      	ldr	r3, [r7, #24]
 801318e:	4013      	ands	r3, r2
 8013190:	2b00      	cmp	r3, #0
 8013192:	d00b      	beq.n	80131ac <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013194:	2301      	movs	r3, #1
 8013196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013198:	e008      	b.n	80131ac <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319c:	681a      	ldr	r2, [r3, #0]
 801319e:	69bb      	ldr	r3, [r7, #24]
 80131a0:	4013      	ands	r3, r2
 80131a2:	69ba      	ldr	r2, [r7, #24]
 80131a4:	429a      	cmp	r2, r3
 80131a6:	d101      	bne.n	80131ac <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80131a8:	2301      	movs	r3, #1
 80131aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80131ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d010      	beq.n	80131d4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d003      	beq.n	80131c4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80131bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131be:	69bb      	ldr	r3, [r7, #24]
 80131c0:	4313      	orrs	r3, r2
 80131c2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80131c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80131cc:	4619      	mov	r1, r3
 80131ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80131d0:	f001 fccc 	bl	8014b6c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80131d4:	69fb      	ldr	r3, [r7, #28]
 80131d6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80131d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131da:	6a3b      	ldr	r3, [r7, #32]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d1be      	bne.n	801315e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80131e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e2:	681a      	ldr	r2, [r3, #0]
 80131e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e6:	43db      	mvns	r3, r3
 80131e8:	401a      	ands	r2, r3
 80131ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ec:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80131ee:	f001 fa07 	bl	8014600 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80131f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f4:	681b      	ldr	r3, [r3, #0]
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	3738      	adds	r7, #56	; 0x38
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}

080131fe <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80131fe:	b580      	push	{r7, lr}
 8013200:	b082      	sub	sp, #8
 8013202:	af00      	add	r7, sp, #0
 8013204:	6078      	str	r0, [r7, #4]
 8013206:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013208:	6839      	ldr	r1, [r7, #0]
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f7ff ff6c 	bl	80130e8 <xEventGroupSetBits>
}
 8013210:	bf00      	nop
 8013212:	3708      	adds	r7, #8
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}

08013218 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013218:	b480      	push	{r7}
 801321a:	b087      	sub	sp, #28
 801321c:	af00      	add	r7, sp, #0
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013224:	2300      	movs	r3, #0
 8013226:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d107      	bne.n	801323e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801322e:	68fa      	ldr	r2, [r7, #12]
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	4013      	ands	r3, r2
 8013234:	2b00      	cmp	r3, #0
 8013236:	d00a      	beq.n	801324e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013238:	2301      	movs	r3, #1
 801323a:	617b      	str	r3, [r7, #20]
 801323c:	e007      	b.n	801324e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801323e:	68fa      	ldr	r2, [r7, #12]
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	4013      	ands	r3, r2
 8013244:	68ba      	ldr	r2, [r7, #8]
 8013246:	429a      	cmp	r2, r3
 8013248:	d101      	bne.n	801324e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801324a:	2301      	movs	r3, #1
 801324c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801324e:	697b      	ldr	r3, [r7, #20]
}
 8013250:	4618      	mov	r0, r3
 8013252:	371c      	adds	r7, #28
 8013254:	46bd      	mov	sp, r7
 8013256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325a:	4770      	bx	lr

0801325c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801325c:	b580      	push	{r7, lr}
 801325e:	b086      	sub	sp, #24
 8013260:	af00      	add	r7, sp, #0
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	68ba      	ldr	r2, [r7, #8]
 801326c:	68f9      	ldr	r1, [r7, #12]
 801326e:	4804      	ldr	r0, [pc, #16]	; (8013280 <xEventGroupSetBitsFromISR+0x24>)
 8013270:	f002 fa7e 	bl	8015770 <xTimerPendFunctionCallFromISR>
 8013274:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013276:	697b      	ldr	r3, [r7, #20]
	}
 8013278:	4618      	mov	r0, r3
 801327a:	3718      	adds	r7, #24
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}
 8013280:	080131ff 	.word	0x080131ff

08013284 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013284:	b480      	push	{r7}
 8013286:	b083      	sub	sp, #12
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f103 0208 	add.w	r2, r3, #8
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801329c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f103 0208 	add.w	r2, r3, #8
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f103 0208 	add.w	r2, r3, #8
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2200      	movs	r2, #0
 80132b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80132b8:	bf00      	nop
 80132ba:	370c      	adds	r7, #12
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr

080132c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80132c4:	b480      	push	{r7}
 80132c6:	b083      	sub	sp, #12
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	2200      	movs	r2, #0
 80132d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80132d2:	bf00      	nop
 80132d4:	370c      	adds	r7, #12
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr

080132de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80132de:	b480      	push	{r7}
 80132e0:	b085      	sub	sp, #20
 80132e2:	af00      	add	r7, sp, #0
 80132e4:	6078      	str	r0, [r7, #4]
 80132e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	685b      	ldr	r3, [r3, #4]
 80132ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	68fa      	ldr	r2, [r7, #12]
 80132f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	689a      	ldr	r2, [r3, #8]
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	689b      	ldr	r3, [r3, #8]
 8013300:	683a      	ldr	r2, [r7, #0]
 8013302:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	683a      	ldr	r2, [r7, #0]
 8013308:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	687a      	ldr	r2, [r7, #4]
 801330e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	1c5a      	adds	r2, r3, #1
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	601a      	str	r2, [r3, #0]
}
 801331a:	bf00      	nop
 801331c:	3714      	adds	r7, #20
 801331e:	46bd      	mov	sp, r7
 8013320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013324:	4770      	bx	lr

08013326 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013326:	b480      	push	{r7}
 8013328:	b085      	sub	sp, #20
 801332a:	af00      	add	r7, sp, #0
 801332c:	6078      	str	r0, [r7, #4]
 801332e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801333c:	d103      	bne.n	8013346 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	691b      	ldr	r3, [r3, #16]
 8013342:	60fb      	str	r3, [r7, #12]
 8013344:	e00c      	b.n	8013360 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	3308      	adds	r3, #8
 801334a:	60fb      	str	r3, [r7, #12]
 801334c:	e002      	b.n	8013354 <vListInsert+0x2e>
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	60fb      	str	r3, [r7, #12]
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	68ba      	ldr	r2, [r7, #8]
 801335c:	429a      	cmp	r2, r3
 801335e:	d2f6      	bcs.n	801334e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	685a      	ldr	r2, [r3, #4]
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	685b      	ldr	r3, [r3, #4]
 801336c:	683a      	ldr	r2, [r7, #0]
 801336e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	68fa      	ldr	r2, [r7, #12]
 8013374:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	683a      	ldr	r2, [r7, #0]
 801337a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	687a      	ldr	r2, [r7, #4]
 8013380:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	1c5a      	adds	r2, r3, #1
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	601a      	str	r2, [r3, #0]
}
 801338c:	bf00      	nop
 801338e:	3714      	adds	r7, #20
 8013390:	46bd      	mov	sp, r7
 8013392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013396:	4770      	bx	lr

08013398 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013398:	b480      	push	{r7}
 801339a:	b085      	sub	sp, #20
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	691b      	ldr	r3, [r3, #16]
 80133a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	685b      	ldr	r3, [r3, #4]
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	6892      	ldr	r2, [r2, #8]
 80133ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	689b      	ldr	r3, [r3, #8]
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	6852      	ldr	r2, [r2, #4]
 80133b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d103      	bne.n	80133cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	689a      	ldr	r2, [r3, #8]
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2200      	movs	r2, #0
 80133d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	1e5a      	subs	r2, r3, #1
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	681b      	ldr	r3, [r3, #0]
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	3714      	adds	r7, #20
 80133e4:	46bd      	mov	sp, r7
 80133e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ea:	4770      	bx	lr

080133ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d10a      	bne.n	8013416 <xQueueGenericReset+0x2a>
	__asm volatile
 8013400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013404:	f383 8811 	msr	BASEPRI, r3
 8013408:	f3bf 8f6f 	isb	sy
 801340c:	f3bf 8f4f 	dsb	sy
 8013410:	60bb      	str	r3, [r7, #8]
}
 8013412:	bf00      	nop
 8013414:	e7fe      	b.n	8013414 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013416:	f002 faf5 	bl	8015a04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	681a      	ldr	r2, [r3, #0]
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013422:	68f9      	ldr	r1, [r7, #12]
 8013424:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013426:	fb01 f303 	mul.w	r3, r1, r3
 801342a:	441a      	add	r2, r3
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	2200      	movs	r2, #0
 8013434:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	681a      	ldr	r2, [r3, #0]
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	681a      	ldr	r2, [r3, #0]
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013446:	3b01      	subs	r3, #1
 8013448:	68f9      	ldr	r1, [r7, #12]
 801344a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801344c:	fb01 f303 	mul.w	r3, r1, r3
 8013450:	441a      	add	r2, r3
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	22ff      	movs	r2, #255	; 0xff
 801345a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	22ff      	movs	r2, #255	; 0xff
 8013462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d114      	bne.n	8013496 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	691b      	ldr	r3, [r3, #16]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d01a      	beq.n	80134aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	3310      	adds	r3, #16
 8013478:	4618      	mov	r0, r3
 801347a:	f001 fb13 	bl	8014aa4 <xTaskRemoveFromEventList>
 801347e:	4603      	mov	r3, r0
 8013480:	2b00      	cmp	r3, #0
 8013482:	d012      	beq.n	80134aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013484:	4b0c      	ldr	r3, [pc, #48]	; (80134b8 <xQueueGenericReset+0xcc>)
 8013486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801348a:	601a      	str	r2, [r3, #0]
 801348c:	f3bf 8f4f 	dsb	sy
 8013490:	f3bf 8f6f 	isb	sy
 8013494:	e009      	b.n	80134aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	3310      	adds	r3, #16
 801349a:	4618      	mov	r0, r3
 801349c:	f7ff fef2 	bl	8013284 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	3324      	adds	r3, #36	; 0x24
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7ff feed 	bl	8013284 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80134aa:	f002 fadb 	bl	8015a64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80134ae:	2301      	movs	r3, #1
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	3710      	adds	r7, #16
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}
 80134b8:	e000ed04 	.word	0xe000ed04

080134bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b08e      	sub	sp, #56	; 0x38
 80134c0:	af02      	add	r7, sp, #8
 80134c2:	60f8      	str	r0, [r7, #12]
 80134c4:	60b9      	str	r1, [r7, #8]
 80134c6:	607a      	str	r2, [r7, #4]
 80134c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d10a      	bne.n	80134e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80134d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d4:	f383 8811 	msr	BASEPRI, r3
 80134d8:	f3bf 8f6f 	isb	sy
 80134dc:	f3bf 8f4f 	dsb	sy
 80134e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80134e2:	bf00      	nop
 80134e4:	e7fe      	b.n	80134e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d10a      	bne.n	8013502 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80134ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f0:	f383 8811 	msr	BASEPRI, r3
 80134f4:	f3bf 8f6f 	isb	sy
 80134f8:	f3bf 8f4f 	dsb	sy
 80134fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80134fe:	bf00      	nop
 8013500:	e7fe      	b.n	8013500 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d002      	beq.n	801350e <xQueueGenericCreateStatic+0x52>
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d001      	beq.n	8013512 <xQueueGenericCreateStatic+0x56>
 801350e:	2301      	movs	r3, #1
 8013510:	e000      	b.n	8013514 <xQueueGenericCreateStatic+0x58>
 8013512:	2300      	movs	r3, #0
 8013514:	2b00      	cmp	r3, #0
 8013516:	d10a      	bne.n	801352e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801351c:	f383 8811 	msr	BASEPRI, r3
 8013520:	f3bf 8f6f 	isb	sy
 8013524:	f3bf 8f4f 	dsb	sy
 8013528:	623b      	str	r3, [r7, #32]
}
 801352a:	bf00      	nop
 801352c:	e7fe      	b.n	801352c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d102      	bne.n	801353a <xQueueGenericCreateStatic+0x7e>
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d101      	bne.n	801353e <xQueueGenericCreateStatic+0x82>
 801353a:	2301      	movs	r3, #1
 801353c:	e000      	b.n	8013540 <xQueueGenericCreateStatic+0x84>
 801353e:	2300      	movs	r3, #0
 8013540:	2b00      	cmp	r3, #0
 8013542:	d10a      	bne.n	801355a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013548:	f383 8811 	msr	BASEPRI, r3
 801354c:	f3bf 8f6f 	isb	sy
 8013550:	f3bf 8f4f 	dsb	sy
 8013554:	61fb      	str	r3, [r7, #28]
}
 8013556:	bf00      	nop
 8013558:	e7fe      	b.n	8013558 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801355a:	2350      	movs	r3, #80	; 0x50
 801355c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	2b50      	cmp	r3, #80	; 0x50
 8013562:	d00a      	beq.n	801357a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013568:	f383 8811 	msr	BASEPRI, r3
 801356c:	f3bf 8f6f 	isb	sy
 8013570:	f3bf 8f4f 	dsb	sy
 8013574:	61bb      	str	r3, [r7, #24]
}
 8013576:	bf00      	nop
 8013578:	e7fe      	b.n	8013578 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801357a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013582:	2b00      	cmp	r3, #0
 8013584:	d00d      	beq.n	80135a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013588:	2201      	movs	r2, #1
 801358a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801358e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013594:	9300      	str	r3, [sp, #0]
 8013596:	4613      	mov	r3, r2
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	68b9      	ldr	r1, [r7, #8]
 801359c:	68f8      	ldr	r0, [r7, #12]
 801359e:	f000 f83f 	bl	8013620 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80135a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3730      	adds	r7, #48	; 0x30
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b08a      	sub	sp, #40	; 0x28
 80135b0:	af02      	add	r7, sp, #8
 80135b2:	60f8      	str	r0, [r7, #12]
 80135b4:	60b9      	str	r1, [r7, #8]
 80135b6:	4613      	mov	r3, r2
 80135b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d10a      	bne.n	80135d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80135c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135c4:	f383 8811 	msr	BASEPRI, r3
 80135c8:	f3bf 8f6f 	isb	sy
 80135cc:	f3bf 8f4f 	dsb	sy
 80135d0:	613b      	str	r3, [r7, #16]
}
 80135d2:	bf00      	nop
 80135d4:	e7fe      	b.n	80135d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	68ba      	ldr	r2, [r7, #8]
 80135da:	fb02 f303 	mul.w	r3, r2, r3
 80135de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80135e0:	69fb      	ldr	r3, [r7, #28]
 80135e2:	3350      	adds	r3, #80	; 0x50
 80135e4:	4618      	mov	r0, r3
 80135e6:	f002 fb2f 	bl	8015c48 <pvPortMalloc>
 80135ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80135ec:	69bb      	ldr	r3, [r7, #24]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d011      	beq.n	8013616 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80135f6:	697b      	ldr	r3, [r7, #20]
 80135f8:	3350      	adds	r3, #80	; 0x50
 80135fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80135fc:	69bb      	ldr	r3, [r7, #24]
 80135fe:	2200      	movs	r2, #0
 8013600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013604:	79fa      	ldrb	r2, [r7, #7]
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	9300      	str	r3, [sp, #0]
 801360a:	4613      	mov	r3, r2
 801360c:	697a      	ldr	r2, [r7, #20]
 801360e:	68b9      	ldr	r1, [r7, #8]
 8013610:	68f8      	ldr	r0, [r7, #12]
 8013612:	f000 f805 	bl	8013620 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013616:	69bb      	ldr	r3, [r7, #24]
	}
 8013618:	4618      	mov	r0, r3
 801361a:	3720      	adds	r7, #32
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	60b9      	str	r1, [r7, #8]
 801362a:	607a      	str	r2, [r7, #4]
 801362c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801362e:	68bb      	ldr	r3, [r7, #8]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d103      	bne.n	801363c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013634:	69bb      	ldr	r3, [r7, #24]
 8013636:	69ba      	ldr	r2, [r7, #24]
 8013638:	601a      	str	r2, [r3, #0]
 801363a:	e002      	b.n	8013642 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801363c:	69bb      	ldr	r3, [r7, #24]
 801363e:	687a      	ldr	r2, [r7, #4]
 8013640:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013642:	69bb      	ldr	r3, [r7, #24]
 8013644:	68fa      	ldr	r2, [r7, #12]
 8013646:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013648:	69bb      	ldr	r3, [r7, #24]
 801364a:	68ba      	ldr	r2, [r7, #8]
 801364c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801364e:	2101      	movs	r1, #1
 8013650:	69b8      	ldr	r0, [r7, #24]
 8013652:	f7ff fecb 	bl	80133ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013656:	69bb      	ldr	r3, [r7, #24]
 8013658:	78fa      	ldrb	r2, [r7, #3]
 801365a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801365e:	bf00      	nop
 8013660:	3710      	adds	r7, #16
 8013662:	46bd      	mov	sp, r7
 8013664:	bd80      	pop	{r7, pc}
	...

08013668 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b08e      	sub	sp, #56	; 0x38
 801366c:	af00      	add	r7, sp, #0
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
 8013674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013676:	2300      	movs	r3, #0
 8013678:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013680:	2b00      	cmp	r3, #0
 8013682:	d10a      	bne.n	801369a <xQueueGenericSend+0x32>
	__asm volatile
 8013684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013688:	f383 8811 	msr	BASEPRI, r3
 801368c:	f3bf 8f6f 	isb	sy
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013696:	bf00      	nop
 8013698:	e7fe      	b.n	8013698 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d103      	bne.n	80136a8 <xQueueGenericSend+0x40>
 80136a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d101      	bne.n	80136ac <xQueueGenericSend+0x44>
 80136a8:	2301      	movs	r3, #1
 80136aa:	e000      	b.n	80136ae <xQueueGenericSend+0x46>
 80136ac:	2300      	movs	r3, #0
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d10a      	bne.n	80136c8 <xQueueGenericSend+0x60>
	__asm volatile
 80136b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136b6:	f383 8811 	msr	BASEPRI, r3
 80136ba:	f3bf 8f6f 	isb	sy
 80136be:	f3bf 8f4f 	dsb	sy
 80136c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80136c4:	bf00      	nop
 80136c6:	e7fe      	b.n	80136c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	2b02      	cmp	r3, #2
 80136cc:	d103      	bne.n	80136d6 <xQueueGenericSend+0x6e>
 80136ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136d2:	2b01      	cmp	r3, #1
 80136d4:	d101      	bne.n	80136da <xQueueGenericSend+0x72>
 80136d6:	2301      	movs	r3, #1
 80136d8:	e000      	b.n	80136dc <xQueueGenericSend+0x74>
 80136da:	2300      	movs	r3, #0
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d10a      	bne.n	80136f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80136e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136e4:	f383 8811 	msr	BASEPRI, r3
 80136e8:	f3bf 8f6f 	isb	sy
 80136ec:	f3bf 8f4f 	dsb	sy
 80136f0:	623b      	str	r3, [r7, #32]
}
 80136f2:	bf00      	nop
 80136f4:	e7fe      	b.n	80136f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80136f6:	f001 fbf5 	bl	8014ee4 <xTaskGetSchedulerState>
 80136fa:	4603      	mov	r3, r0
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d102      	bne.n	8013706 <xQueueGenericSend+0x9e>
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d101      	bne.n	801370a <xQueueGenericSend+0xa2>
 8013706:	2301      	movs	r3, #1
 8013708:	e000      	b.n	801370c <xQueueGenericSend+0xa4>
 801370a:	2300      	movs	r3, #0
 801370c:	2b00      	cmp	r3, #0
 801370e:	d10a      	bne.n	8013726 <xQueueGenericSend+0xbe>
	__asm volatile
 8013710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013714:	f383 8811 	msr	BASEPRI, r3
 8013718:	f3bf 8f6f 	isb	sy
 801371c:	f3bf 8f4f 	dsb	sy
 8013720:	61fb      	str	r3, [r7, #28]
}
 8013722:	bf00      	nop
 8013724:	e7fe      	b.n	8013724 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013726:	f002 f96d 	bl	8015a04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013732:	429a      	cmp	r2, r3
 8013734:	d302      	bcc.n	801373c <xQueueGenericSend+0xd4>
 8013736:	683b      	ldr	r3, [r7, #0]
 8013738:	2b02      	cmp	r3, #2
 801373a:	d129      	bne.n	8013790 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801373c:	683a      	ldr	r2, [r7, #0]
 801373e:	68b9      	ldr	r1, [r7, #8]
 8013740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013742:	f000 fa8b 	bl	8013c5c <prvCopyDataToQueue>
 8013746:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801374c:	2b00      	cmp	r3, #0
 801374e:	d010      	beq.n	8013772 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013752:	3324      	adds	r3, #36	; 0x24
 8013754:	4618      	mov	r0, r3
 8013756:	f001 f9a5 	bl	8014aa4 <xTaskRemoveFromEventList>
 801375a:	4603      	mov	r3, r0
 801375c:	2b00      	cmp	r3, #0
 801375e:	d013      	beq.n	8013788 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013760:	4b3f      	ldr	r3, [pc, #252]	; (8013860 <xQueueGenericSend+0x1f8>)
 8013762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013766:	601a      	str	r2, [r3, #0]
 8013768:	f3bf 8f4f 	dsb	sy
 801376c:	f3bf 8f6f 	isb	sy
 8013770:	e00a      	b.n	8013788 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013774:	2b00      	cmp	r3, #0
 8013776:	d007      	beq.n	8013788 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013778:	4b39      	ldr	r3, [pc, #228]	; (8013860 <xQueueGenericSend+0x1f8>)
 801377a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801377e:	601a      	str	r2, [r3, #0]
 8013780:	f3bf 8f4f 	dsb	sy
 8013784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013788:	f002 f96c 	bl	8015a64 <vPortExitCritical>
				return pdPASS;
 801378c:	2301      	movs	r3, #1
 801378e:	e063      	b.n	8013858 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d103      	bne.n	801379e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013796:	f002 f965 	bl	8015a64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801379a:	2300      	movs	r3, #0
 801379c:	e05c      	b.n	8013858 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d106      	bne.n	80137b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80137a4:	f107 0314 	add.w	r3, r7, #20
 80137a8:	4618      	mov	r0, r3
 80137aa:	f001 fa41 	bl	8014c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80137ae:	2301      	movs	r3, #1
 80137b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80137b2:	f002 f957 	bl	8015a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80137b6:	f000 ff15 	bl	80145e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80137ba:	f002 f923 	bl	8015a04 <vPortEnterCritical>
 80137be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80137c4:	b25b      	sxtb	r3, r3
 80137c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137ca:	d103      	bne.n	80137d4 <xQueueGenericSend+0x16c>
 80137cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ce:	2200      	movs	r2, #0
 80137d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80137d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80137da:	b25b      	sxtb	r3, r3
 80137dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137e0:	d103      	bne.n	80137ea <xQueueGenericSend+0x182>
 80137e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e4:	2200      	movs	r2, #0
 80137e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80137ea:	f002 f93b 	bl	8015a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80137ee:	1d3a      	adds	r2, r7, #4
 80137f0:	f107 0314 	add.w	r3, r7, #20
 80137f4:	4611      	mov	r1, r2
 80137f6:	4618      	mov	r0, r3
 80137f8:	f001 fa30 	bl	8014c5c <xTaskCheckForTimeOut>
 80137fc:	4603      	mov	r3, r0
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d124      	bne.n	801384c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013804:	f000 fb22 	bl	8013e4c <prvIsQueueFull>
 8013808:	4603      	mov	r3, r0
 801380a:	2b00      	cmp	r3, #0
 801380c:	d018      	beq.n	8013840 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013810:	3310      	adds	r3, #16
 8013812:	687a      	ldr	r2, [r7, #4]
 8013814:	4611      	mov	r1, r2
 8013816:	4618      	mov	r0, r3
 8013818:	f001 f8b8 	bl	801498c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801381c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801381e:	f000 faad 	bl	8013d7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013822:	f000 feed 	bl	8014600 <xTaskResumeAll>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	f47f af7c 	bne.w	8013726 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801382e:	4b0c      	ldr	r3, [pc, #48]	; (8013860 <xQueueGenericSend+0x1f8>)
 8013830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013834:	601a      	str	r2, [r3, #0]
 8013836:	f3bf 8f4f 	dsb	sy
 801383a:	f3bf 8f6f 	isb	sy
 801383e:	e772      	b.n	8013726 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013842:	f000 fa9b 	bl	8013d7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013846:	f000 fedb 	bl	8014600 <xTaskResumeAll>
 801384a:	e76c      	b.n	8013726 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801384c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801384e:	f000 fa95 	bl	8013d7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013852:	f000 fed5 	bl	8014600 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013856:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013858:	4618      	mov	r0, r3
 801385a:	3738      	adds	r7, #56	; 0x38
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}
 8013860:	e000ed04 	.word	0xe000ed04

08013864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b090      	sub	sp, #64	; 0x40
 8013868:	af00      	add	r7, sp, #0
 801386a:	60f8      	str	r0, [r7, #12]
 801386c:	60b9      	str	r1, [r7, #8]
 801386e:	607a      	str	r2, [r7, #4]
 8013870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013878:	2b00      	cmp	r3, #0
 801387a:	d10a      	bne.n	8013892 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013880:	f383 8811 	msr	BASEPRI, r3
 8013884:	f3bf 8f6f 	isb	sy
 8013888:	f3bf 8f4f 	dsb	sy
 801388c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801388e:	bf00      	nop
 8013890:	e7fe      	b.n	8013890 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d103      	bne.n	80138a0 <xQueueGenericSendFromISR+0x3c>
 8013898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801389c:	2b00      	cmp	r3, #0
 801389e:	d101      	bne.n	80138a4 <xQueueGenericSendFromISR+0x40>
 80138a0:	2301      	movs	r3, #1
 80138a2:	e000      	b.n	80138a6 <xQueueGenericSendFromISR+0x42>
 80138a4:	2300      	movs	r3, #0
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d10a      	bne.n	80138c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80138aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ae:	f383 8811 	msr	BASEPRI, r3
 80138b2:	f3bf 8f6f 	isb	sy
 80138b6:	f3bf 8f4f 	dsb	sy
 80138ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80138bc:	bf00      	nop
 80138be:	e7fe      	b.n	80138be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	2b02      	cmp	r3, #2
 80138c4:	d103      	bne.n	80138ce <xQueueGenericSendFromISR+0x6a>
 80138c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138ca:	2b01      	cmp	r3, #1
 80138cc:	d101      	bne.n	80138d2 <xQueueGenericSendFromISR+0x6e>
 80138ce:	2301      	movs	r3, #1
 80138d0:	e000      	b.n	80138d4 <xQueueGenericSendFromISR+0x70>
 80138d2:	2300      	movs	r3, #0
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d10a      	bne.n	80138ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80138d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138dc:	f383 8811 	msr	BASEPRI, r3
 80138e0:	f3bf 8f6f 	isb	sy
 80138e4:	f3bf 8f4f 	dsb	sy
 80138e8:	623b      	str	r3, [r7, #32]
}
 80138ea:	bf00      	nop
 80138ec:	e7fe      	b.n	80138ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80138ee:	f002 f96b 	bl	8015bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80138f2:	f3ef 8211 	mrs	r2, BASEPRI
 80138f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138fa:	f383 8811 	msr	BASEPRI, r3
 80138fe:	f3bf 8f6f 	isb	sy
 8013902:	f3bf 8f4f 	dsb	sy
 8013906:	61fa      	str	r2, [r7, #28]
 8013908:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801390a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801390c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013916:	429a      	cmp	r2, r3
 8013918:	d302      	bcc.n	8013920 <xQueueGenericSendFromISR+0xbc>
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	2b02      	cmp	r3, #2
 801391e:	d12f      	bne.n	8013980 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801392e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013930:	683a      	ldr	r2, [r7, #0]
 8013932:	68b9      	ldr	r1, [r7, #8]
 8013934:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013936:	f000 f991 	bl	8013c5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801393a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801393e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013942:	d112      	bne.n	801396a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013948:	2b00      	cmp	r3, #0
 801394a:	d016      	beq.n	801397a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801394e:	3324      	adds	r3, #36	; 0x24
 8013950:	4618      	mov	r0, r3
 8013952:	f001 f8a7 	bl	8014aa4 <xTaskRemoveFromEventList>
 8013956:	4603      	mov	r3, r0
 8013958:	2b00      	cmp	r3, #0
 801395a:	d00e      	beq.n	801397a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d00b      	beq.n	801397a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2201      	movs	r2, #1
 8013966:	601a      	str	r2, [r3, #0]
 8013968:	e007      	b.n	801397a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801396a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801396e:	3301      	adds	r3, #1
 8013970:	b2db      	uxtb	r3, r3
 8013972:	b25a      	sxtb	r2, r3
 8013974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801397a:	2301      	movs	r3, #1
 801397c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801397e:	e001      	b.n	8013984 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013980:	2300      	movs	r3, #0
 8013982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013986:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013988:	697b      	ldr	r3, [r7, #20]
 801398a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801398e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013992:	4618      	mov	r0, r3
 8013994:	3740      	adds	r7, #64	; 0x40
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
	...

0801399c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b08c      	sub	sp, #48	; 0x30
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	60f8      	str	r0, [r7, #12]
 80139a4:	60b9      	str	r1, [r7, #8]
 80139a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80139a8:	2300      	movs	r3, #0
 80139aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80139b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d10a      	bne.n	80139cc <xQueueReceive+0x30>
	__asm volatile
 80139b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ba:	f383 8811 	msr	BASEPRI, r3
 80139be:	f3bf 8f6f 	isb	sy
 80139c2:	f3bf 8f4f 	dsb	sy
 80139c6:	623b      	str	r3, [r7, #32]
}
 80139c8:	bf00      	nop
 80139ca:	e7fe      	b.n	80139ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d103      	bne.n	80139da <xQueueReceive+0x3e>
 80139d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d101      	bne.n	80139de <xQueueReceive+0x42>
 80139da:	2301      	movs	r3, #1
 80139dc:	e000      	b.n	80139e0 <xQueueReceive+0x44>
 80139de:	2300      	movs	r3, #0
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d10a      	bne.n	80139fa <xQueueReceive+0x5e>
	__asm volatile
 80139e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e8:	f383 8811 	msr	BASEPRI, r3
 80139ec:	f3bf 8f6f 	isb	sy
 80139f0:	f3bf 8f4f 	dsb	sy
 80139f4:	61fb      	str	r3, [r7, #28]
}
 80139f6:	bf00      	nop
 80139f8:	e7fe      	b.n	80139f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80139fa:	f001 fa73 	bl	8014ee4 <xTaskGetSchedulerState>
 80139fe:	4603      	mov	r3, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d102      	bne.n	8013a0a <xQueueReceive+0x6e>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d101      	bne.n	8013a0e <xQueueReceive+0x72>
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	e000      	b.n	8013a10 <xQueueReceive+0x74>
 8013a0e:	2300      	movs	r3, #0
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d10a      	bne.n	8013a2a <xQueueReceive+0x8e>
	__asm volatile
 8013a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a18:	f383 8811 	msr	BASEPRI, r3
 8013a1c:	f3bf 8f6f 	isb	sy
 8013a20:	f3bf 8f4f 	dsb	sy
 8013a24:	61bb      	str	r3, [r7, #24]
}
 8013a26:	bf00      	nop
 8013a28:	e7fe      	b.n	8013a28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013a2a:	f001 ffeb 	bl	8015a04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d01f      	beq.n	8013a7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013a3a:	68b9      	ldr	r1, [r7, #8]
 8013a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a3e:	f000 f977 	bl	8013d30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a44:	1e5a      	subs	r2, r3, #1
 8013a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4c:	691b      	ldr	r3, [r3, #16]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d00f      	beq.n	8013a72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a54:	3310      	adds	r3, #16
 8013a56:	4618      	mov	r0, r3
 8013a58:	f001 f824 	bl	8014aa4 <xTaskRemoveFromEventList>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d007      	beq.n	8013a72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013a62:	4b3d      	ldr	r3, [pc, #244]	; (8013b58 <xQueueReceive+0x1bc>)
 8013a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a68:	601a      	str	r2, [r3, #0]
 8013a6a:	f3bf 8f4f 	dsb	sy
 8013a6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013a72:	f001 fff7 	bl	8015a64 <vPortExitCritical>
				return pdPASS;
 8013a76:	2301      	movs	r3, #1
 8013a78:	e069      	b.n	8013b4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d103      	bne.n	8013a88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013a80:	f001 fff0 	bl	8015a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013a84:	2300      	movs	r3, #0
 8013a86:	e062      	b.n	8013b4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d106      	bne.n	8013a9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013a8e:	f107 0310 	add.w	r3, r7, #16
 8013a92:	4618      	mov	r0, r3
 8013a94:	f001 f8cc 	bl	8014c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013a98:	2301      	movs	r3, #1
 8013a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013a9c:	f001 ffe2 	bl	8015a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013aa0:	f000 fda0 	bl	80145e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013aa4:	f001 ffae 	bl	8015a04 <vPortEnterCritical>
 8013aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013aae:	b25b      	sxtb	r3, r3
 8013ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ab4:	d103      	bne.n	8013abe <xQueueReceive+0x122>
 8013ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab8:	2200      	movs	r2, #0
 8013aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ac4:	b25b      	sxtb	r3, r3
 8013ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013aca:	d103      	bne.n	8013ad4 <xQueueReceive+0x138>
 8013acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ace:	2200      	movs	r2, #0
 8013ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013ad4:	f001 ffc6 	bl	8015a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013ad8:	1d3a      	adds	r2, r7, #4
 8013ada:	f107 0310 	add.w	r3, r7, #16
 8013ade:	4611      	mov	r1, r2
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f001 f8bb 	bl	8014c5c <xTaskCheckForTimeOut>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d123      	bne.n	8013b34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013aee:	f000 f997 	bl	8013e20 <prvIsQueueEmpty>
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d017      	beq.n	8013b28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013afa:	3324      	adds	r3, #36	; 0x24
 8013afc:	687a      	ldr	r2, [r7, #4]
 8013afe:	4611      	mov	r1, r2
 8013b00:	4618      	mov	r0, r3
 8013b02:	f000 ff43 	bl	801498c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b08:	f000 f938 	bl	8013d7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013b0c:	f000 fd78 	bl	8014600 <xTaskResumeAll>
 8013b10:	4603      	mov	r3, r0
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d189      	bne.n	8013a2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013b16:	4b10      	ldr	r3, [pc, #64]	; (8013b58 <xQueueReceive+0x1bc>)
 8013b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b1c:	601a      	str	r2, [r3, #0]
 8013b1e:	f3bf 8f4f 	dsb	sy
 8013b22:	f3bf 8f6f 	isb	sy
 8013b26:	e780      	b.n	8013a2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b2a:	f000 f927 	bl	8013d7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013b2e:	f000 fd67 	bl	8014600 <xTaskResumeAll>
 8013b32:	e77a      	b.n	8013a2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b36:	f000 f921 	bl	8013d7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013b3a:	f000 fd61 	bl	8014600 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b40:	f000 f96e 	bl	8013e20 <prvIsQueueEmpty>
 8013b44:	4603      	mov	r3, r0
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	f43f af6f 	beq.w	8013a2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3730      	adds	r7, #48	; 0x30
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}
 8013b56:	bf00      	nop
 8013b58:	e000ed04 	.word	0xe000ed04

08013b5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b08e      	sub	sp, #56	; 0x38
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	60f8      	str	r0, [r7, #12]
 8013b64:	60b9      	str	r1, [r7, #8]
 8013b66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d10a      	bne.n	8013b88 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b76:	f383 8811 	msr	BASEPRI, r3
 8013b7a:	f3bf 8f6f 	isb	sy
 8013b7e:	f3bf 8f4f 	dsb	sy
 8013b82:	623b      	str	r3, [r7, #32]
}
 8013b84:	bf00      	nop
 8013b86:	e7fe      	b.n	8013b86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d103      	bne.n	8013b96 <xQueueReceiveFromISR+0x3a>
 8013b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d101      	bne.n	8013b9a <xQueueReceiveFromISR+0x3e>
 8013b96:	2301      	movs	r3, #1
 8013b98:	e000      	b.n	8013b9c <xQueueReceiveFromISR+0x40>
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d10a      	bne.n	8013bb6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba4:	f383 8811 	msr	BASEPRI, r3
 8013ba8:	f3bf 8f6f 	isb	sy
 8013bac:	f3bf 8f4f 	dsb	sy
 8013bb0:	61fb      	str	r3, [r7, #28]
}
 8013bb2:	bf00      	nop
 8013bb4:	e7fe      	b.n	8013bb4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013bb6:	f002 f807 	bl	8015bc8 <vPortValidateInterruptPriority>
	__asm volatile
 8013bba:	f3ef 8211 	mrs	r2, BASEPRI
 8013bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc2:	f383 8811 	msr	BASEPRI, r3
 8013bc6:	f3bf 8f6f 	isb	sy
 8013bca:	f3bf 8f4f 	dsb	sy
 8013bce:	61ba      	str	r2, [r7, #24]
 8013bd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013bd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d02f      	beq.n	8013c42 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013bec:	68b9      	ldr	r1, [r7, #8]
 8013bee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bf0:	f000 f89e 	bl	8013d30 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bf6:	1e5a      	subs	r2, r3, #1
 8013bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013bfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c04:	d112      	bne.n	8013c2c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c08:	691b      	ldr	r3, [r3, #16]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d016      	beq.n	8013c3c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c10:	3310      	adds	r3, #16
 8013c12:	4618      	mov	r0, r3
 8013c14:	f000 ff46 	bl	8014aa4 <xTaskRemoveFromEventList>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d00e      	beq.n	8013c3c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d00b      	beq.n	8013c3c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2201      	movs	r2, #1
 8013c28:	601a      	str	r2, [r3, #0]
 8013c2a:	e007      	b.n	8013c3c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c30:	3301      	adds	r3, #1
 8013c32:	b2db      	uxtb	r3, r3
 8013c34:	b25a      	sxtb	r2, r3
 8013c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8013c40:	e001      	b.n	8013c46 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013c42:	2300      	movs	r3, #0
 8013c44:	637b      	str	r3, [r7, #52]	; 0x34
 8013c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	f383 8811 	msr	BASEPRI, r3
}
 8013c50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3738      	adds	r7, #56	; 0x38
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b086      	sub	sp, #24
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	60f8      	str	r0, [r7, #12]
 8013c64:	60b9      	str	r1, [r7, #8]
 8013c66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013c68:	2300      	movs	r3, #0
 8013c6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d10d      	bne.n	8013c96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d14d      	bne.n	8013d1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	689b      	ldr	r3, [r3, #8]
 8013c86:	4618      	mov	r0, r3
 8013c88:	f001 f94a 	bl	8014f20 <xTaskPriorityDisinherit>
 8013c8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2200      	movs	r2, #0
 8013c92:	609a      	str	r2, [r3, #8]
 8013c94:	e043      	b.n	8013d1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d119      	bne.n	8013cd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	6858      	ldr	r0, [r3, #4]
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	68b9      	ldr	r1, [r7, #8]
 8013ca8:	f002 f9f2 	bl	8016090 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	685a      	ldr	r2, [r3, #4]
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cb4:	441a      	add	r2, r3
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	685a      	ldr	r2, [r3, #4]
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	689b      	ldr	r3, [r3, #8]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d32b      	bcc.n	8013d1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	681a      	ldr	r2, [r3, #0]
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	605a      	str	r2, [r3, #4]
 8013cce:	e026      	b.n	8013d1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	68d8      	ldr	r0, [r3, #12]
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cd8:	461a      	mov	r2, r3
 8013cda:	68b9      	ldr	r1, [r7, #8]
 8013cdc:	f002 f9d8 	bl	8016090 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	68da      	ldr	r2, [r3, #12]
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ce8:	425b      	negs	r3, r3
 8013cea:	441a      	add	r2, r3
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	68da      	ldr	r2, [r3, #12]
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	d207      	bcs.n	8013d0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	689a      	ldr	r2, [r3, #8]
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d04:	425b      	negs	r3, r3
 8013d06:	441a      	add	r2, r3
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2b02      	cmp	r3, #2
 8013d10:	d105      	bne.n	8013d1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d002      	beq.n	8013d1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	3b01      	subs	r3, #1
 8013d1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013d1e:	693b      	ldr	r3, [r7, #16]
 8013d20:	1c5a      	adds	r2, r3, #1
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013d26:	697b      	ldr	r3, [r7, #20]
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3718      	adds	r7, #24
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}

08013d30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b082      	sub	sp, #8
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
 8013d38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d018      	beq.n	8013d74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	68da      	ldr	r2, [r3, #12]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d4a:	441a      	add	r2, r3
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	68da      	ldr	r2, [r3, #12]
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	689b      	ldr	r3, [r3, #8]
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	d303      	bcc.n	8013d64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	68d9      	ldr	r1, [r3, #12]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	6838      	ldr	r0, [r7, #0]
 8013d70:	f002 f98e 	bl	8016090 <memcpy>
	}
}
 8013d74:	bf00      	nop
 8013d76:	3708      	adds	r7, #8
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}

08013d7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b084      	sub	sp, #16
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013d84:	f001 fe3e 	bl	8015a04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013d90:	e011      	b.n	8013db6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d012      	beq.n	8013dc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	3324      	adds	r3, #36	; 0x24
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f000 fe80 	bl	8014aa4 <xTaskRemoveFromEventList>
 8013da4:	4603      	mov	r3, r0
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d001      	beq.n	8013dae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013daa:	f000 ffb9 	bl	8014d20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013dae:	7bfb      	ldrb	r3, [r7, #15]
 8013db0:	3b01      	subs	r3, #1
 8013db2:	b2db      	uxtb	r3, r3
 8013db4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	dce9      	bgt.n	8013d92 <prvUnlockQueue+0x16>
 8013dbe:	e000      	b.n	8013dc2 <prvUnlockQueue+0x46>
					break;
 8013dc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	22ff      	movs	r2, #255	; 0xff
 8013dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013dca:	f001 fe4b 	bl	8015a64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013dce:	f001 fe19 	bl	8015a04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013dd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013dda:	e011      	b.n	8013e00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	691b      	ldr	r3, [r3, #16]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d012      	beq.n	8013e0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	3310      	adds	r3, #16
 8013de8:	4618      	mov	r0, r3
 8013dea:	f000 fe5b 	bl	8014aa4 <xTaskRemoveFromEventList>
 8013dee:	4603      	mov	r3, r0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d001      	beq.n	8013df8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013df4:	f000 ff94 	bl	8014d20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013df8:	7bbb      	ldrb	r3, [r7, #14]
 8013dfa:	3b01      	subs	r3, #1
 8013dfc:	b2db      	uxtb	r3, r3
 8013dfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	dce9      	bgt.n	8013ddc <prvUnlockQueue+0x60>
 8013e08:	e000      	b.n	8013e0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013e0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	22ff      	movs	r2, #255	; 0xff
 8013e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013e14:	f001 fe26 	bl	8015a64 <vPortExitCritical>
}
 8013e18:	bf00      	nop
 8013e1a:	3710      	adds	r7, #16
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}

08013e20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b084      	sub	sp, #16
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013e28:	f001 fdec 	bl	8015a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d102      	bne.n	8013e3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013e34:	2301      	movs	r3, #1
 8013e36:	60fb      	str	r3, [r7, #12]
 8013e38:	e001      	b.n	8013e3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013e3e:	f001 fe11 	bl	8015a64 <vPortExitCritical>

	return xReturn;
 8013e42:	68fb      	ldr	r3, [r7, #12]
}
 8013e44:	4618      	mov	r0, r3
 8013e46:	3710      	adds	r7, #16
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}

08013e4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b084      	sub	sp, #16
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013e54:	f001 fdd6 	bl	8015a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d102      	bne.n	8013e6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013e64:	2301      	movs	r3, #1
 8013e66:	60fb      	str	r3, [r7, #12]
 8013e68:	e001      	b.n	8013e6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013e6e:	f001 fdf9 	bl	8015a64 <vPortExitCritical>

	return xReturn;
 8013e72:	68fb      	ldr	r3, [r7, #12]
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3710      	adds	r7, #16
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013e7c:	b480      	push	{r7}
 8013e7e:	b085      	sub	sp, #20
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e86:	2300      	movs	r3, #0
 8013e88:	60fb      	str	r3, [r7, #12]
 8013e8a:	e014      	b.n	8013eb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013e8c:	4a0f      	ldr	r2, [pc, #60]	; (8013ecc <vQueueAddToRegistry+0x50>)
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d10b      	bne.n	8013eb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013e98:	490c      	ldr	r1, [pc, #48]	; (8013ecc <vQueueAddToRegistry+0x50>)
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	683a      	ldr	r2, [r7, #0]
 8013e9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013ea2:	4a0a      	ldr	r2, [pc, #40]	; (8013ecc <vQueueAddToRegistry+0x50>)
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	00db      	lsls	r3, r3, #3
 8013ea8:	4413      	add	r3, r2
 8013eaa:	687a      	ldr	r2, [r7, #4]
 8013eac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013eae:	e006      	b.n	8013ebe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	60fb      	str	r3, [r7, #12]
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	2b07      	cmp	r3, #7
 8013eba:	d9e7      	bls.n	8013e8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013ebc:	bf00      	nop
 8013ebe:	bf00      	nop
 8013ec0:	3714      	adds	r7, #20
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec8:	4770      	bx	lr
 8013eca:	bf00      	nop
 8013ecc:	24001788 	.word	0x24001788

08013ed0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b086      	sub	sp, #24
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	60f8      	str	r0, [r7, #12]
 8013ed8:	60b9      	str	r1, [r7, #8]
 8013eda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013ee0:	f001 fd90 	bl	8015a04 <vPortEnterCritical>
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013eea:	b25b      	sxtb	r3, r3
 8013eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ef0:	d103      	bne.n	8013efa <vQueueWaitForMessageRestricted+0x2a>
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013efa:	697b      	ldr	r3, [r7, #20]
 8013efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f00:	b25b      	sxtb	r3, r3
 8013f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f06:	d103      	bne.n	8013f10 <vQueueWaitForMessageRestricted+0x40>
 8013f08:	697b      	ldr	r3, [r7, #20]
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013f10:	f001 fda8 	bl	8015a64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013f14:	697b      	ldr	r3, [r7, #20]
 8013f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d106      	bne.n	8013f2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	3324      	adds	r3, #36	; 0x24
 8013f20:	687a      	ldr	r2, [r7, #4]
 8013f22:	68b9      	ldr	r1, [r7, #8]
 8013f24:	4618      	mov	r0, r3
 8013f26:	f000 fd91 	bl	8014a4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013f2a:	6978      	ldr	r0, [r7, #20]
 8013f2c:	f7ff ff26 	bl	8013d7c <prvUnlockQueue>
	}
 8013f30:	bf00      	nop
 8013f32:	3718      	adds	r7, #24
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}

08013f38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b08e      	sub	sp, #56	; 0x38
 8013f3c:	af04      	add	r7, sp, #16
 8013f3e:	60f8      	str	r0, [r7, #12]
 8013f40:	60b9      	str	r1, [r7, #8]
 8013f42:	607a      	str	r2, [r7, #4]
 8013f44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d10a      	bne.n	8013f62 <xTaskCreateStatic+0x2a>
	__asm volatile
 8013f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f50:	f383 8811 	msr	BASEPRI, r3
 8013f54:	f3bf 8f6f 	isb	sy
 8013f58:	f3bf 8f4f 	dsb	sy
 8013f5c:	623b      	str	r3, [r7, #32]
}
 8013f5e:	bf00      	nop
 8013f60:	e7fe      	b.n	8013f60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d10a      	bne.n	8013f7e <xTaskCreateStatic+0x46>
	__asm volatile
 8013f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f6c:	f383 8811 	msr	BASEPRI, r3
 8013f70:	f3bf 8f6f 	isb	sy
 8013f74:	f3bf 8f4f 	dsb	sy
 8013f78:	61fb      	str	r3, [r7, #28]
}
 8013f7a:	bf00      	nop
 8013f7c:	e7fe      	b.n	8013f7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013f7e:	235c      	movs	r3, #92	; 0x5c
 8013f80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013f82:	693b      	ldr	r3, [r7, #16]
 8013f84:	2b5c      	cmp	r3, #92	; 0x5c
 8013f86:	d00a      	beq.n	8013f9e <xTaskCreateStatic+0x66>
	__asm volatile
 8013f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f8c:	f383 8811 	msr	BASEPRI, r3
 8013f90:	f3bf 8f6f 	isb	sy
 8013f94:	f3bf 8f4f 	dsb	sy
 8013f98:	61bb      	str	r3, [r7, #24]
}
 8013f9a:	bf00      	nop
 8013f9c:	e7fe      	b.n	8013f9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013f9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d01e      	beq.n	8013fe4 <xTaskCreateStatic+0xac>
 8013fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d01b      	beq.n	8013fe4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb8:	2202      	movs	r2, #2
 8013fba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	9303      	str	r3, [sp, #12]
 8013fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc4:	9302      	str	r3, [sp, #8]
 8013fc6:	f107 0314 	add.w	r3, r7, #20
 8013fca:	9301      	str	r3, [sp, #4]
 8013fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fce:	9300      	str	r3, [sp, #0]
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	687a      	ldr	r2, [r7, #4]
 8013fd4:	68b9      	ldr	r1, [r7, #8]
 8013fd6:	68f8      	ldr	r0, [r7, #12]
 8013fd8:	f000 f850 	bl	801407c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fde:	f000 f8dd 	bl	801419c <prvAddNewTaskToReadyList>
 8013fe2:	e001      	b.n	8013fe8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013fe8:	697b      	ldr	r3, [r7, #20]
	}
 8013fea:	4618      	mov	r0, r3
 8013fec:	3728      	adds	r7, #40	; 0x28
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}

08013ff2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013ff2:	b580      	push	{r7, lr}
 8013ff4:	b08c      	sub	sp, #48	; 0x30
 8013ff6:	af04      	add	r7, sp, #16
 8013ff8:	60f8      	str	r0, [r7, #12]
 8013ffa:	60b9      	str	r1, [r7, #8]
 8013ffc:	603b      	str	r3, [r7, #0]
 8013ffe:	4613      	mov	r3, r2
 8014000:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014002:	88fb      	ldrh	r3, [r7, #6]
 8014004:	009b      	lsls	r3, r3, #2
 8014006:	4618      	mov	r0, r3
 8014008:	f001 fe1e 	bl	8015c48 <pvPortMalloc>
 801400c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d00e      	beq.n	8014032 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014014:	205c      	movs	r0, #92	; 0x5c
 8014016:	f001 fe17 	bl	8015c48 <pvPortMalloc>
 801401a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801401c:	69fb      	ldr	r3, [r7, #28]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d003      	beq.n	801402a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014022:	69fb      	ldr	r3, [r7, #28]
 8014024:	697a      	ldr	r2, [r7, #20]
 8014026:	631a      	str	r2, [r3, #48]	; 0x30
 8014028:	e005      	b.n	8014036 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801402a:	6978      	ldr	r0, [r7, #20]
 801402c:	f001 fed8 	bl	8015de0 <vPortFree>
 8014030:	e001      	b.n	8014036 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014032:	2300      	movs	r3, #0
 8014034:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014036:	69fb      	ldr	r3, [r7, #28]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d017      	beq.n	801406c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801403c:	69fb      	ldr	r3, [r7, #28]
 801403e:	2200      	movs	r2, #0
 8014040:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014044:	88fa      	ldrh	r2, [r7, #6]
 8014046:	2300      	movs	r3, #0
 8014048:	9303      	str	r3, [sp, #12]
 801404a:	69fb      	ldr	r3, [r7, #28]
 801404c:	9302      	str	r3, [sp, #8]
 801404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014050:	9301      	str	r3, [sp, #4]
 8014052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014054:	9300      	str	r3, [sp, #0]
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	68b9      	ldr	r1, [r7, #8]
 801405a:	68f8      	ldr	r0, [r7, #12]
 801405c:	f000 f80e 	bl	801407c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014060:	69f8      	ldr	r0, [r7, #28]
 8014062:	f000 f89b 	bl	801419c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014066:	2301      	movs	r3, #1
 8014068:	61bb      	str	r3, [r7, #24]
 801406a:	e002      	b.n	8014072 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801406c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014070:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014072:	69bb      	ldr	r3, [r7, #24]
	}
 8014074:	4618      	mov	r0, r3
 8014076:	3720      	adds	r7, #32
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b088      	sub	sp, #32
 8014080:	af00      	add	r7, sp, #0
 8014082:	60f8      	str	r0, [r7, #12]
 8014084:	60b9      	str	r1, [r7, #8]
 8014086:	607a      	str	r2, [r7, #4]
 8014088:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801408c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	009b      	lsls	r3, r3, #2
 8014092:	461a      	mov	r2, r3
 8014094:	21a5      	movs	r1, #165	; 0xa5
 8014096:	f002 f809 	bl	80160ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801409c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801409e:	6879      	ldr	r1, [r7, #4]
 80140a0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80140a4:	440b      	add	r3, r1
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	4413      	add	r3, r2
 80140aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80140ac:	69bb      	ldr	r3, [r7, #24]
 80140ae:	f023 0307 	bic.w	r3, r3, #7
 80140b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	f003 0307 	and.w	r3, r3, #7
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d00a      	beq.n	80140d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80140be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c2:	f383 8811 	msr	BASEPRI, r3
 80140c6:	f3bf 8f6f 	isb	sy
 80140ca:	f3bf 8f4f 	dsb	sy
 80140ce:	617b      	str	r3, [r7, #20]
}
 80140d0:	bf00      	nop
 80140d2:	e7fe      	b.n	80140d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d01f      	beq.n	801411a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80140da:	2300      	movs	r3, #0
 80140dc:	61fb      	str	r3, [r7, #28]
 80140de:	e012      	b.n	8014106 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80140e0:	68ba      	ldr	r2, [r7, #8]
 80140e2:	69fb      	ldr	r3, [r7, #28]
 80140e4:	4413      	add	r3, r2
 80140e6:	7819      	ldrb	r1, [r3, #0]
 80140e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140ea:	69fb      	ldr	r3, [r7, #28]
 80140ec:	4413      	add	r3, r2
 80140ee:	3334      	adds	r3, #52	; 0x34
 80140f0:	460a      	mov	r2, r1
 80140f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80140f4:	68ba      	ldr	r2, [r7, #8]
 80140f6:	69fb      	ldr	r3, [r7, #28]
 80140f8:	4413      	add	r3, r2
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d006      	beq.n	801410e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014100:	69fb      	ldr	r3, [r7, #28]
 8014102:	3301      	adds	r3, #1
 8014104:	61fb      	str	r3, [r7, #28]
 8014106:	69fb      	ldr	r3, [r7, #28]
 8014108:	2b0f      	cmp	r3, #15
 801410a:	d9e9      	bls.n	80140e0 <prvInitialiseNewTask+0x64>
 801410c:	e000      	b.n	8014110 <prvInitialiseNewTask+0x94>
			{
				break;
 801410e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014112:	2200      	movs	r2, #0
 8014114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014118:	e003      	b.n	8014122 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801411c:	2200      	movs	r2, #0
 801411e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014124:	2b37      	cmp	r3, #55	; 0x37
 8014126:	d901      	bls.n	801412c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014128:	2337      	movs	r3, #55	; 0x37
 801412a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801412e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014130:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014136:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801413a:	2200      	movs	r2, #0
 801413c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014140:	3304      	adds	r3, #4
 8014142:	4618      	mov	r0, r3
 8014144:	f7ff f8be 	bl	80132c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801414a:	3318      	adds	r3, #24
 801414c:	4618      	mov	r0, r3
 801414e:	f7ff f8b9 	bl	80132c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014156:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801415a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014160:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014166:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801416a:	2200      	movs	r2, #0
 801416c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014170:	2200      	movs	r2, #0
 8014172:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014176:	683a      	ldr	r2, [r7, #0]
 8014178:	68f9      	ldr	r1, [r7, #12]
 801417a:	69b8      	ldr	r0, [r7, #24]
 801417c:	f001 fb18 	bl	80157b0 <pxPortInitialiseStack>
 8014180:	4602      	mov	r2, r0
 8014182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014184:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014188:	2b00      	cmp	r3, #0
 801418a:	d002      	beq.n	8014192 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014190:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014192:	bf00      	nop
 8014194:	3720      	adds	r7, #32
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
	...

0801419c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80141a4:	f001 fc2e 	bl	8015a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80141a8:	4b2d      	ldr	r3, [pc, #180]	; (8014260 <prvAddNewTaskToReadyList+0xc4>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	3301      	adds	r3, #1
 80141ae:	4a2c      	ldr	r2, [pc, #176]	; (8014260 <prvAddNewTaskToReadyList+0xc4>)
 80141b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80141b2:	4b2c      	ldr	r3, [pc, #176]	; (8014264 <prvAddNewTaskToReadyList+0xc8>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d109      	bne.n	80141ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80141ba:	4a2a      	ldr	r2, [pc, #168]	; (8014264 <prvAddNewTaskToReadyList+0xc8>)
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80141c0:	4b27      	ldr	r3, [pc, #156]	; (8014260 <prvAddNewTaskToReadyList+0xc4>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	2b01      	cmp	r3, #1
 80141c6:	d110      	bne.n	80141ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80141c8:	f000 fdce 	bl	8014d68 <prvInitialiseTaskLists>
 80141cc:	e00d      	b.n	80141ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80141ce:	4b26      	ldr	r3, [pc, #152]	; (8014268 <prvAddNewTaskToReadyList+0xcc>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d109      	bne.n	80141ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80141d6:	4b23      	ldr	r3, [pc, #140]	; (8014264 <prvAddNewTaskToReadyList+0xc8>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141e0:	429a      	cmp	r2, r3
 80141e2:	d802      	bhi.n	80141ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80141e4:	4a1f      	ldr	r2, [pc, #124]	; (8014264 <prvAddNewTaskToReadyList+0xc8>)
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80141ea:	4b20      	ldr	r3, [pc, #128]	; (801426c <prvAddNewTaskToReadyList+0xd0>)
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	3301      	adds	r3, #1
 80141f0:	4a1e      	ldr	r2, [pc, #120]	; (801426c <prvAddNewTaskToReadyList+0xd0>)
 80141f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80141f4:	4b1d      	ldr	r3, [pc, #116]	; (801426c <prvAddNewTaskToReadyList+0xd0>)
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014200:	4b1b      	ldr	r3, [pc, #108]	; (8014270 <prvAddNewTaskToReadyList+0xd4>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	429a      	cmp	r2, r3
 8014206:	d903      	bls.n	8014210 <prvAddNewTaskToReadyList+0x74>
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801420c:	4a18      	ldr	r2, [pc, #96]	; (8014270 <prvAddNewTaskToReadyList+0xd4>)
 801420e:	6013      	str	r3, [r2, #0]
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014214:	4613      	mov	r3, r2
 8014216:	009b      	lsls	r3, r3, #2
 8014218:	4413      	add	r3, r2
 801421a:	009b      	lsls	r3, r3, #2
 801421c:	4a15      	ldr	r2, [pc, #84]	; (8014274 <prvAddNewTaskToReadyList+0xd8>)
 801421e:	441a      	add	r2, r3
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	3304      	adds	r3, #4
 8014224:	4619      	mov	r1, r3
 8014226:	4610      	mov	r0, r2
 8014228:	f7ff f859 	bl	80132de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801422c:	f001 fc1a 	bl	8015a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014230:	4b0d      	ldr	r3, [pc, #52]	; (8014268 <prvAddNewTaskToReadyList+0xcc>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d00e      	beq.n	8014256 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014238:	4b0a      	ldr	r3, [pc, #40]	; (8014264 <prvAddNewTaskToReadyList+0xc8>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014242:	429a      	cmp	r2, r3
 8014244:	d207      	bcs.n	8014256 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014246:	4b0c      	ldr	r3, [pc, #48]	; (8014278 <prvAddNewTaskToReadyList+0xdc>)
 8014248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801424c:	601a      	str	r2, [r3, #0]
 801424e:	f3bf 8f4f 	dsb	sy
 8014252:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014256:	bf00      	nop
 8014258:	3708      	adds	r7, #8
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
 801425e:	bf00      	nop
 8014260:	24001c9c 	.word	0x24001c9c
 8014264:	240017c8 	.word	0x240017c8
 8014268:	24001ca8 	.word	0x24001ca8
 801426c:	24001cb8 	.word	0x24001cb8
 8014270:	24001ca4 	.word	0x24001ca4
 8014274:	240017cc 	.word	0x240017cc
 8014278:	e000ed04 	.word	0xe000ed04

0801427c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801427c:	b580      	push	{r7, lr}
 801427e:	b084      	sub	sp, #16
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014284:	2300      	movs	r3, #0
 8014286:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d017      	beq.n	80142be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801428e:	4b13      	ldr	r3, [pc, #76]	; (80142dc <vTaskDelay+0x60>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d00a      	beq.n	80142ac <vTaskDelay+0x30>
	__asm volatile
 8014296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801429a:	f383 8811 	msr	BASEPRI, r3
 801429e:	f3bf 8f6f 	isb	sy
 80142a2:	f3bf 8f4f 	dsb	sy
 80142a6:	60bb      	str	r3, [r7, #8]
}
 80142a8:	bf00      	nop
 80142aa:	e7fe      	b.n	80142aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80142ac:	f000 f99a 	bl	80145e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80142b0:	2100      	movs	r1, #0
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	f000 feba 	bl	801502c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80142b8:	f000 f9a2 	bl	8014600 <xTaskResumeAll>
 80142bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d107      	bne.n	80142d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80142c4:	4b06      	ldr	r3, [pc, #24]	; (80142e0 <vTaskDelay+0x64>)
 80142c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142ca:	601a      	str	r2, [r3, #0]
 80142cc:	f3bf 8f4f 	dsb	sy
 80142d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80142d4:	bf00      	nop
 80142d6:	3710      	adds	r7, #16
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}
 80142dc:	24001cc4 	.word	0x24001cc4
 80142e0:	e000ed04 	.word	0xe000ed04

080142e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b084      	sub	sp, #16
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80142ec:	f001 fb8a 	bl	8015a04 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d102      	bne.n	80142fc <vTaskSuspend+0x18>
 80142f6:	4b30      	ldr	r3, [pc, #192]	; (80143b8 <vTaskSuspend+0xd4>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	e000      	b.n	80142fe <vTaskSuspend+0x1a>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	3304      	adds	r3, #4
 8014304:	4618      	mov	r0, r3
 8014306:	f7ff f847 	bl	8013398 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801430e:	2b00      	cmp	r3, #0
 8014310:	d004      	beq.n	801431c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	3318      	adds	r3, #24
 8014316:	4618      	mov	r0, r3
 8014318:	f7ff f83e 	bl	8013398 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	3304      	adds	r3, #4
 8014320:	4619      	mov	r1, r3
 8014322:	4826      	ldr	r0, [pc, #152]	; (80143bc <vTaskSuspend+0xd8>)
 8014324:	f7fe ffdb 	bl	80132de <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801432e:	b2db      	uxtb	r3, r3
 8014330:	2b01      	cmp	r3, #1
 8014332:	d103      	bne.n	801433c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	2200      	movs	r2, #0
 8014338:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801433c:	f001 fb92 	bl	8015a64 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014340:	4b1f      	ldr	r3, [pc, #124]	; (80143c0 <vTaskSuspend+0xdc>)
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d005      	beq.n	8014354 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014348:	f001 fb5c 	bl	8015a04 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801434c:	f000 fdaa 	bl	8014ea4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014350:	f001 fb88 	bl	8015a64 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014354:	4b18      	ldr	r3, [pc, #96]	; (80143b8 <vTaskSuspend+0xd4>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	68fa      	ldr	r2, [r7, #12]
 801435a:	429a      	cmp	r2, r3
 801435c:	d127      	bne.n	80143ae <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 801435e:	4b18      	ldr	r3, [pc, #96]	; (80143c0 <vTaskSuspend+0xdc>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d017      	beq.n	8014396 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014366:	4b17      	ldr	r3, [pc, #92]	; (80143c4 <vTaskSuspend+0xe0>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d00a      	beq.n	8014384 <vTaskSuspend+0xa0>
	__asm volatile
 801436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014372:	f383 8811 	msr	BASEPRI, r3
 8014376:	f3bf 8f6f 	isb	sy
 801437a:	f3bf 8f4f 	dsb	sy
 801437e:	60bb      	str	r3, [r7, #8]
}
 8014380:	bf00      	nop
 8014382:	e7fe      	b.n	8014382 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014384:	4b10      	ldr	r3, [pc, #64]	; (80143c8 <vTaskSuspend+0xe4>)
 8014386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801438a:	601a      	str	r2, [r3, #0]
 801438c:	f3bf 8f4f 	dsb	sy
 8014390:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014394:	e00b      	b.n	80143ae <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014396:	4b09      	ldr	r3, [pc, #36]	; (80143bc <vTaskSuspend+0xd8>)
 8014398:	681a      	ldr	r2, [r3, #0]
 801439a:	4b0c      	ldr	r3, [pc, #48]	; (80143cc <vTaskSuspend+0xe8>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	429a      	cmp	r2, r3
 80143a0:	d103      	bne.n	80143aa <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80143a2:	4b05      	ldr	r3, [pc, #20]	; (80143b8 <vTaskSuspend+0xd4>)
 80143a4:	2200      	movs	r2, #0
 80143a6:	601a      	str	r2, [r3, #0]
	}
 80143a8:	e001      	b.n	80143ae <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80143aa:	f000 fa91 	bl	80148d0 <vTaskSwitchContext>
	}
 80143ae:	bf00      	nop
 80143b0:	3710      	adds	r7, #16
 80143b2:	46bd      	mov	sp, r7
 80143b4:	bd80      	pop	{r7, pc}
 80143b6:	bf00      	nop
 80143b8:	240017c8 	.word	0x240017c8
 80143bc:	24001c88 	.word	0x24001c88
 80143c0:	24001ca8 	.word	0x24001ca8
 80143c4:	24001cc4 	.word	0x24001cc4
 80143c8:	e000ed04 	.word	0xe000ed04
 80143cc:	24001c9c 	.word	0x24001c9c

080143d0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80143d0:	b480      	push	{r7}
 80143d2:	b087      	sub	sp, #28
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80143d8:	2300      	movs	r3, #0
 80143da:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d10a      	bne.n	80143fc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80143e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ea:	f383 8811 	msr	BASEPRI, r3
 80143ee:	f3bf 8f6f 	isb	sy
 80143f2:	f3bf 8f4f 	dsb	sy
 80143f6:	60fb      	str	r3, [r7, #12]
}
 80143f8:	bf00      	nop
 80143fa:	e7fe      	b.n	80143fa <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80143fc:	693b      	ldr	r3, [r7, #16]
 80143fe:	695b      	ldr	r3, [r3, #20]
 8014400:	4a0a      	ldr	r2, [pc, #40]	; (801442c <prvTaskIsTaskSuspended+0x5c>)
 8014402:	4293      	cmp	r3, r2
 8014404:	d10a      	bne.n	801441c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014406:	693b      	ldr	r3, [r7, #16]
 8014408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801440a:	4a09      	ldr	r2, [pc, #36]	; (8014430 <prvTaskIsTaskSuspended+0x60>)
 801440c:	4293      	cmp	r3, r2
 801440e:	d005      	beq.n	801441c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014410:	693b      	ldr	r3, [r7, #16]
 8014412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014414:	2b00      	cmp	r3, #0
 8014416:	d101      	bne.n	801441c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014418:	2301      	movs	r3, #1
 801441a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801441c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801441e:	4618      	mov	r0, r3
 8014420:	371c      	adds	r7, #28
 8014422:	46bd      	mov	sp, r7
 8014424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014428:	4770      	bx	lr
 801442a:	bf00      	nop
 801442c:	24001c88 	.word	0x24001c88
 8014430:	24001c5c 	.word	0x24001c5c

08014434 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014434:	b580      	push	{r7, lr}
 8014436:	b08a      	sub	sp, #40	; 0x28
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 801443c:	2300      	movs	r3, #0
 801443e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d10a      	bne.n	8014460 <xTaskResumeFromISR+0x2c>
	__asm volatile
 801444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801444e:	f383 8811 	msr	BASEPRI, r3
 8014452:	f3bf 8f6f 	isb	sy
 8014456:	f3bf 8f4f 	dsb	sy
 801445a:	61bb      	str	r3, [r7, #24]
}
 801445c:	bf00      	nop
 801445e:	e7fe      	b.n	801445e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014460:	f001 fbb2 	bl	8015bc8 <vPortValidateInterruptPriority>
	__asm volatile
 8014464:	f3ef 8211 	mrs	r2, BASEPRI
 8014468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801446c:	f383 8811 	msr	BASEPRI, r3
 8014470:	f3bf 8f6f 	isb	sy
 8014474:	f3bf 8f4f 	dsb	sy
 8014478:	617a      	str	r2, [r7, #20]
 801447a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801447c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801447e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014480:	6a38      	ldr	r0, [r7, #32]
 8014482:	f7ff ffa5 	bl	80143d0 <prvTaskIsTaskSuspended>
 8014486:	4603      	mov	r3, r0
 8014488:	2b00      	cmp	r3, #0
 801448a:	d030      	beq.n	80144ee <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801448c:	4b1d      	ldr	r3, [pc, #116]	; (8014504 <xTaskResumeFromISR+0xd0>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d126      	bne.n	80144e2 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014494:	6a3b      	ldr	r3, [r7, #32]
 8014496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014498:	4b1b      	ldr	r3, [pc, #108]	; (8014508 <xTaskResumeFromISR+0xd4>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801449e:	429a      	cmp	r2, r3
 80144a0:	d301      	bcc.n	80144a6 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80144a2:	2301      	movs	r3, #1
 80144a4:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80144a6:	6a3b      	ldr	r3, [r7, #32]
 80144a8:	3304      	adds	r3, #4
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7fe ff74 	bl	8013398 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80144b0:	6a3b      	ldr	r3, [r7, #32]
 80144b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144b4:	4b15      	ldr	r3, [pc, #84]	; (801450c <xTaskResumeFromISR+0xd8>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d903      	bls.n	80144c4 <xTaskResumeFromISR+0x90>
 80144bc:	6a3b      	ldr	r3, [r7, #32]
 80144be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144c0:	4a12      	ldr	r2, [pc, #72]	; (801450c <xTaskResumeFromISR+0xd8>)
 80144c2:	6013      	str	r3, [r2, #0]
 80144c4:	6a3b      	ldr	r3, [r7, #32]
 80144c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144c8:	4613      	mov	r3, r2
 80144ca:	009b      	lsls	r3, r3, #2
 80144cc:	4413      	add	r3, r2
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	4a0f      	ldr	r2, [pc, #60]	; (8014510 <xTaskResumeFromISR+0xdc>)
 80144d2:	441a      	add	r2, r3
 80144d4:	6a3b      	ldr	r3, [r7, #32]
 80144d6:	3304      	adds	r3, #4
 80144d8:	4619      	mov	r1, r3
 80144da:	4610      	mov	r0, r2
 80144dc:	f7fe feff 	bl	80132de <vListInsertEnd>
 80144e0:	e005      	b.n	80144ee <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80144e2:	6a3b      	ldr	r3, [r7, #32]
 80144e4:	3318      	adds	r3, #24
 80144e6:	4619      	mov	r1, r3
 80144e8:	480a      	ldr	r0, [pc, #40]	; (8014514 <xTaskResumeFromISR+0xe0>)
 80144ea:	f7fe fef8 	bl	80132de <vListInsertEnd>
 80144ee:	69fb      	ldr	r3, [r7, #28]
 80144f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	f383 8811 	msr	BASEPRI, r3
}
 80144f8:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80144fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80144fc:	4618      	mov	r0, r3
 80144fe:	3728      	adds	r7, #40	; 0x28
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}
 8014504:	24001cc4 	.word	0x24001cc4
 8014508:	240017c8 	.word	0x240017c8
 801450c:	24001ca4 	.word	0x24001ca4
 8014510:	240017cc 	.word	0x240017cc
 8014514:	24001c5c 	.word	0x24001c5c

08014518 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b08a      	sub	sp, #40	; 0x28
 801451c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801451e:	2300      	movs	r3, #0
 8014520:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014522:	2300      	movs	r3, #0
 8014524:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014526:	463a      	mov	r2, r7
 8014528:	1d39      	adds	r1, r7, #4
 801452a:	f107 0308 	add.w	r3, r7, #8
 801452e:	4618      	mov	r0, r3
 8014530:	f7fe fc86 	bl	8012e40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014534:	6839      	ldr	r1, [r7, #0]
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	68ba      	ldr	r2, [r7, #8]
 801453a:	9202      	str	r2, [sp, #8]
 801453c:	9301      	str	r3, [sp, #4]
 801453e:	2300      	movs	r3, #0
 8014540:	9300      	str	r3, [sp, #0]
 8014542:	2300      	movs	r3, #0
 8014544:	460a      	mov	r2, r1
 8014546:	4921      	ldr	r1, [pc, #132]	; (80145cc <vTaskStartScheduler+0xb4>)
 8014548:	4821      	ldr	r0, [pc, #132]	; (80145d0 <vTaskStartScheduler+0xb8>)
 801454a:	f7ff fcf5 	bl	8013f38 <xTaskCreateStatic>
 801454e:	4603      	mov	r3, r0
 8014550:	4a20      	ldr	r2, [pc, #128]	; (80145d4 <vTaskStartScheduler+0xbc>)
 8014552:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014554:	4b1f      	ldr	r3, [pc, #124]	; (80145d4 <vTaskStartScheduler+0xbc>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d002      	beq.n	8014562 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801455c:	2301      	movs	r3, #1
 801455e:	617b      	str	r3, [r7, #20]
 8014560:	e001      	b.n	8014566 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014562:	2300      	movs	r3, #0
 8014564:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	2b01      	cmp	r3, #1
 801456a:	d102      	bne.n	8014572 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801456c:	f000 fdb2 	bl	80150d4 <xTimerCreateTimerTask>
 8014570:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014572:	697b      	ldr	r3, [r7, #20]
 8014574:	2b01      	cmp	r3, #1
 8014576:	d116      	bne.n	80145a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8014578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801457c:	f383 8811 	msr	BASEPRI, r3
 8014580:	f3bf 8f6f 	isb	sy
 8014584:	f3bf 8f4f 	dsb	sy
 8014588:	613b      	str	r3, [r7, #16]
}
 801458a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801458c:	4b12      	ldr	r3, [pc, #72]	; (80145d8 <vTaskStartScheduler+0xc0>)
 801458e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014592:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014594:	4b11      	ldr	r3, [pc, #68]	; (80145dc <vTaskStartScheduler+0xc4>)
 8014596:	2201      	movs	r2, #1
 8014598:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801459a:	4b11      	ldr	r3, [pc, #68]	; (80145e0 <vTaskStartScheduler+0xc8>)
 801459c:	2200      	movs	r2, #0
 801459e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80145a0:	f001 f98e 	bl	80158c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80145a4:	e00e      	b.n	80145c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145ac:	d10a      	bne.n	80145c4 <vTaskStartScheduler+0xac>
	__asm volatile
 80145ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b2:	f383 8811 	msr	BASEPRI, r3
 80145b6:	f3bf 8f6f 	isb	sy
 80145ba:	f3bf 8f4f 	dsb	sy
 80145be:	60fb      	str	r3, [r7, #12]
}
 80145c0:	bf00      	nop
 80145c2:	e7fe      	b.n	80145c2 <vTaskStartScheduler+0xaa>
}
 80145c4:	bf00      	nop
 80145c6:	3718      	adds	r7, #24
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}
 80145cc:	08016d2c 	.word	0x08016d2c
 80145d0:	08014d39 	.word	0x08014d39
 80145d4:	24001cc0 	.word	0x24001cc0
 80145d8:	24001cbc 	.word	0x24001cbc
 80145dc:	24001ca8 	.word	0x24001ca8
 80145e0:	24001ca0 	.word	0x24001ca0

080145e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80145e4:	b480      	push	{r7}
 80145e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80145e8:	4b04      	ldr	r3, [pc, #16]	; (80145fc <vTaskSuspendAll+0x18>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	3301      	adds	r3, #1
 80145ee:	4a03      	ldr	r2, [pc, #12]	; (80145fc <vTaskSuspendAll+0x18>)
 80145f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80145f2:	bf00      	nop
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr
 80145fc:	24001cc4 	.word	0x24001cc4

08014600 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b084      	sub	sp, #16
 8014604:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014606:	2300      	movs	r3, #0
 8014608:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801460a:	2300      	movs	r3, #0
 801460c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801460e:	4b42      	ldr	r3, [pc, #264]	; (8014718 <xTaskResumeAll+0x118>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d10a      	bne.n	801462c <xTaskResumeAll+0x2c>
	__asm volatile
 8014616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801461a:	f383 8811 	msr	BASEPRI, r3
 801461e:	f3bf 8f6f 	isb	sy
 8014622:	f3bf 8f4f 	dsb	sy
 8014626:	603b      	str	r3, [r7, #0]
}
 8014628:	bf00      	nop
 801462a:	e7fe      	b.n	801462a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801462c:	f001 f9ea 	bl	8015a04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014630:	4b39      	ldr	r3, [pc, #228]	; (8014718 <xTaskResumeAll+0x118>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	3b01      	subs	r3, #1
 8014636:	4a38      	ldr	r2, [pc, #224]	; (8014718 <xTaskResumeAll+0x118>)
 8014638:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801463a:	4b37      	ldr	r3, [pc, #220]	; (8014718 <xTaskResumeAll+0x118>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d162      	bne.n	8014708 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014642:	4b36      	ldr	r3, [pc, #216]	; (801471c <xTaskResumeAll+0x11c>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d05e      	beq.n	8014708 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801464a:	e02f      	b.n	80146ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801464c:	4b34      	ldr	r3, [pc, #208]	; (8014720 <xTaskResumeAll+0x120>)
 801464e:	68db      	ldr	r3, [r3, #12]
 8014650:	68db      	ldr	r3, [r3, #12]
 8014652:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	3318      	adds	r3, #24
 8014658:	4618      	mov	r0, r3
 801465a:	f7fe fe9d 	bl	8013398 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	3304      	adds	r3, #4
 8014662:	4618      	mov	r0, r3
 8014664:	f7fe fe98 	bl	8013398 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801466c:	4b2d      	ldr	r3, [pc, #180]	; (8014724 <xTaskResumeAll+0x124>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	429a      	cmp	r2, r3
 8014672:	d903      	bls.n	801467c <xTaskResumeAll+0x7c>
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014678:	4a2a      	ldr	r2, [pc, #168]	; (8014724 <xTaskResumeAll+0x124>)
 801467a:	6013      	str	r3, [r2, #0]
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014680:	4613      	mov	r3, r2
 8014682:	009b      	lsls	r3, r3, #2
 8014684:	4413      	add	r3, r2
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	4a27      	ldr	r2, [pc, #156]	; (8014728 <xTaskResumeAll+0x128>)
 801468a:	441a      	add	r2, r3
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	3304      	adds	r3, #4
 8014690:	4619      	mov	r1, r3
 8014692:	4610      	mov	r0, r2
 8014694:	f7fe fe23 	bl	80132de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801469c:	4b23      	ldr	r3, [pc, #140]	; (801472c <xTaskResumeAll+0x12c>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d302      	bcc.n	80146ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80146a6:	4b22      	ldr	r3, [pc, #136]	; (8014730 <xTaskResumeAll+0x130>)
 80146a8:	2201      	movs	r2, #1
 80146aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80146ac:	4b1c      	ldr	r3, [pc, #112]	; (8014720 <xTaskResumeAll+0x120>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d1cb      	bne.n	801464c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d001      	beq.n	80146be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80146ba:	f000 fbf3 	bl	8014ea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80146be:	4b1d      	ldr	r3, [pc, #116]	; (8014734 <xTaskResumeAll+0x134>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d010      	beq.n	80146ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80146ca:	f000 f847 	bl	801475c <xTaskIncrementTick>
 80146ce:	4603      	mov	r3, r0
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d002      	beq.n	80146da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80146d4:	4b16      	ldr	r3, [pc, #88]	; (8014730 <xTaskResumeAll+0x130>)
 80146d6:	2201      	movs	r2, #1
 80146d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	3b01      	subs	r3, #1
 80146de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d1f1      	bne.n	80146ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80146e6:	4b13      	ldr	r3, [pc, #76]	; (8014734 <xTaskResumeAll+0x134>)
 80146e8:	2200      	movs	r2, #0
 80146ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80146ec:	4b10      	ldr	r3, [pc, #64]	; (8014730 <xTaskResumeAll+0x130>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d009      	beq.n	8014708 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80146f4:	2301      	movs	r3, #1
 80146f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80146f8:	4b0f      	ldr	r3, [pc, #60]	; (8014738 <xTaskResumeAll+0x138>)
 80146fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146fe:	601a      	str	r2, [r3, #0]
 8014700:	f3bf 8f4f 	dsb	sy
 8014704:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014708:	f001 f9ac 	bl	8015a64 <vPortExitCritical>

	return xAlreadyYielded;
 801470c:	68bb      	ldr	r3, [r7, #8]
}
 801470e:	4618      	mov	r0, r3
 8014710:	3710      	adds	r7, #16
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	24001cc4 	.word	0x24001cc4
 801471c:	24001c9c 	.word	0x24001c9c
 8014720:	24001c5c 	.word	0x24001c5c
 8014724:	24001ca4 	.word	0x24001ca4
 8014728:	240017cc 	.word	0x240017cc
 801472c:	240017c8 	.word	0x240017c8
 8014730:	24001cb0 	.word	0x24001cb0
 8014734:	24001cac 	.word	0x24001cac
 8014738:	e000ed04 	.word	0xe000ed04

0801473c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801473c:	b480      	push	{r7}
 801473e:	b083      	sub	sp, #12
 8014740:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014742:	4b05      	ldr	r3, [pc, #20]	; (8014758 <xTaskGetTickCount+0x1c>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014748:	687b      	ldr	r3, [r7, #4]
}
 801474a:	4618      	mov	r0, r3
 801474c:	370c      	adds	r7, #12
 801474e:	46bd      	mov	sp, r7
 8014750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014754:	4770      	bx	lr
 8014756:	bf00      	nop
 8014758:	24001ca0 	.word	0x24001ca0

0801475c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b086      	sub	sp, #24
 8014760:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014762:	2300      	movs	r3, #0
 8014764:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014766:	4b4f      	ldr	r3, [pc, #316]	; (80148a4 <xTaskIncrementTick+0x148>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	2b00      	cmp	r3, #0
 801476c:	f040 808f 	bne.w	801488e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014770:	4b4d      	ldr	r3, [pc, #308]	; (80148a8 <xTaskIncrementTick+0x14c>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	3301      	adds	r3, #1
 8014776:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014778:	4a4b      	ldr	r2, [pc, #300]	; (80148a8 <xTaskIncrementTick+0x14c>)
 801477a:	693b      	ldr	r3, [r7, #16]
 801477c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d120      	bne.n	80147c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014784:	4b49      	ldr	r3, [pc, #292]	; (80148ac <xTaskIncrementTick+0x150>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d00a      	beq.n	80147a4 <xTaskIncrementTick+0x48>
	__asm volatile
 801478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014792:	f383 8811 	msr	BASEPRI, r3
 8014796:	f3bf 8f6f 	isb	sy
 801479a:	f3bf 8f4f 	dsb	sy
 801479e:	603b      	str	r3, [r7, #0]
}
 80147a0:	bf00      	nop
 80147a2:	e7fe      	b.n	80147a2 <xTaskIncrementTick+0x46>
 80147a4:	4b41      	ldr	r3, [pc, #260]	; (80148ac <xTaskIncrementTick+0x150>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	60fb      	str	r3, [r7, #12]
 80147aa:	4b41      	ldr	r3, [pc, #260]	; (80148b0 <xTaskIncrementTick+0x154>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	4a3f      	ldr	r2, [pc, #252]	; (80148ac <xTaskIncrementTick+0x150>)
 80147b0:	6013      	str	r3, [r2, #0]
 80147b2:	4a3f      	ldr	r2, [pc, #252]	; (80148b0 <xTaskIncrementTick+0x154>)
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	6013      	str	r3, [r2, #0]
 80147b8:	4b3e      	ldr	r3, [pc, #248]	; (80148b4 <xTaskIncrementTick+0x158>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	3301      	adds	r3, #1
 80147be:	4a3d      	ldr	r2, [pc, #244]	; (80148b4 <xTaskIncrementTick+0x158>)
 80147c0:	6013      	str	r3, [r2, #0]
 80147c2:	f000 fb6f 	bl	8014ea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80147c6:	4b3c      	ldr	r3, [pc, #240]	; (80148b8 <xTaskIncrementTick+0x15c>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	693a      	ldr	r2, [r7, #16]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d349      	bcc.n	8014864 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80147d0:	4b36      	ldr	r3, [pc, #216]	; (80148ac <xTaskIncrementTick+0x150>)
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d104      	bne.n	80147e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147da:	4b37      	ldr	r3, [pc, #220]	; (80148b8 <xTaskIncrementTick+0x15c>)
 80147dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147e0:	601a      	str	r2, [r3, #0]
					break;
 80147e2:	e03f      	b.n	8014864 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147e4:	4b31      	ldr	r3, [pc, #196]	; (80148ac <xTaskIncrementTick+0x150>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	68db      	ldr	r3, [r3, #12]
 80147ea:	68db      	ldr	r3, [r3, #12]
 80147ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	685b      	ldr	r3, [r3, #4]
 80147f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80147f4:	693a      	ldr	r2, [r7, #16]
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d203      	bcs.n	8014804 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80147fc:	4a2e      	ldr	r2, [pc, #184]	; (80148b8 <xTaskIncrementTick+0x15c>)
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014802:	e02f      	b.n	8014864 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	3304      	adds	r3, #4
 8014808:	4618      	mov	r0, r3
 801480a:	f7fe fdc5 	bl	8013398 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014812:	2b00      	cmp	r3, #0
 8014814:	d004      	beq.n	8014820 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	3318      	adds	r3, #24
 801481a:	4618      	mov	r0, r3
 801481c:	f7fe fdbc 	bl	8013398 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014824:	4b25      	ldr	r3, [pc, #148]	; (80148bc <xTaskIncrementTick+0x160>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	429a      	cmp	r2, r3
 801482a:	d903      	bls.n	8014834 <xTaskIncrementTick+0xd8>
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014830:	4a22      	ldr	r2, [pc, #136]	; (80148bc <xTaskIncrementTick+0x160>)
 8014832:	6013      	str	r3, [r2, #0]
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014838:	4613      	mov	r3, r2
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	4413      	add	r3, r2
 801483e:	009b      	lsls	r3, r3, #2
 8014840:	4a1f      	ldr	r2, [pc, #124]	; (80148c0 <xTaskIncrementTick+0x164>)
 8014842:	441a      	add	r2, r3
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	3304      	adds	r3, #4
 8014848:	4619      	mov	r1, r3
 801484a:	4610      	mov	r0, r2
 801484c:	f7fe fd47 	bl	80132de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014854:	4b1b      	ldr	r3, [pc, #108]	; (80148c4 <xTaskIncrementTick+0x168>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801485a:	429a      	cmp	r2, r3
 801485c:	d3b8      	bcc.n	80147d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801485e:	2301      	movs	r3, #1
 8014860:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014862:	e7b5      	b.n	80147d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014864:	4b17      	ldr	r3, [pc, #92]	; (80148c4 <xTaskIncrementTick+0x168>)
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801486a:	4915      	ldr	r1, [pc, #84]	; (80148c0 <xTaskIncrementTick+0x164>)
 801486c:	4613      	mov	r3, r2
 801486e:	009b      	lsls	r3, r3, #2
 8014870:	4413      	add	r3, r2
 8014872:	009b      	lsls	r3, r3, #2
 8014874:	440b      	add	r3, r1
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	2b01      	cmp	r3, #1
 801487a:	d901      	bls.n	8014880 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801487c:	2301      	movs	r3, #1
 801487e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014880:	4b11      	ldr	r3, [pc, #68]	; (80148c8 <xTaskIncrementTick+0x16c>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d007      	beq.n	8014898 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014888:	2301      	movs	r3, #1
 801488a:	617b      	str	r3, [r7, #20]
 801488c:	e004      	b.n	8014898 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801488e:	4b0f      	ldr	r3, [pc, #60]	; (80148cc <xTaskIncrementTick+0x170>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	3301      	adds	r3, #1
 8014894:	4a0d      	ldr	r2, [pc, #52]	; (80148cc <xTaskIncrementTick+0x170>)
 8014896:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014898:	697b      	ldr	r3, [r7, #20]
}
 801489a:	4618      	mov	r0, r3
 801489c:	3718      	adds	r7, #24
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}
 80148a2:	bf00      	nop
 80148a4:	24001cc4 	.word	0x24001cc4
 80148a8:	24001ca0 	.word	0x24001ca0
 80148ac:	24001c54 	.word	0x24001c54
 80148b0:	24001c58 	.word	0x24001c58
 80148b4:	24001cb4 	.word	0x24001cb4
 80148b8:	24001cbc 	.word	0x24001cbc
 80148bc:	24001ca4 	.word	0x24001ca4
 80148c0:	240017cc 	.word	0x240017cc
 80148c4:	240017c8 	.word	0x240017c8
 80148c8:	24001cb0 	.word	0x24001cb0
 80148cc:	24001cac 	.word	0x24001cac

080148d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80148d0:	b480      	push	{r7}
 80148d2:	b085      	sub	sp, #20
 80148d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80148d6:	4b28      	ldr	r3, [pc, #160]	; (8014978 <vTaskSwitchContext+0xa8>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d003      	beq.n	80148e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80148de:	4b27      	ldr	r3, [pc, #156]	; (801497c <vTaskSwitchContext+0xac>)
 80148e0:	2201      	movs	r2, #1
 80148e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80148e4:	e041      	b.n	801496a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80148e6:	4b25      	ldr	r3, [pc, #148]	; (801497c <vTaskSwitchContext+0xac>)
 80148e8:	2200      	movs	r2, #0
 80148ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148ec:	4b24      	ldr	r3, [pc, #144]	; (8014980 <vTaskSwitchContext+0xb0>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	60fb      	str	r3, [r7, #12]
 80148f2:	e010      	b.n	8014916 <vTaskSwitchContext+0x46>
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d10a      	bne.n	8014910 <vTaskSwitchContext+0x40>
	__asm volatile
 80148fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148fe:	f383 8811 	msr	BASEPRI, r3
 8014902:	f3bf 8f6f 	isb	sy
 8014906:	f3bf 8f4f 	dsb	sy
 801490a:	607b      	str	r3, [r7, #4]
}
 801490c:	bf00      	nop
 801490e:	e7fe      	b.n	801490e <vTaskSwitchContext+0x3e>
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	3b01      	subs	r3, #1
 8014914:	60fb      	str	r3, [r7, #12]
 8014916:	491b      	ldr	r1, [pc, #108]	; (8014984 <vTaskSwitchContext+0xb4>)
 8014918:	68fa      	ldr	r2, [r7, #12]
 801491a:	4613      	mov	r3, r2
 801491c:	009b      	lsls	r3, r3, #2
 801491e:	4413      	add	r3, r2
 8014920:	009b      	lsls	r3, r3, #2
 8014922:	440b      	add	r3, r1
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d0e4      	beq.n	80148f4 <vTaskSwitchContext+0x24>
 801492a:	68fa      	ldr	r2, [r7, #12]
 801492c:	4613      	mov	r3, r2
 801492e:	009b      	lsls	r3, r3, #2
 8014930:	4413      	add	r3, r2
 8014932:	009b      	lsls	r3, r3, #2
 8014934:	4a13      	ldr	r2, [pc, #76]	; (8014984 <vTaskSwitchContext+0xb4>)
 8014936:	4413      	add	r3, r2
 8014938:	60bb      	str	r3, [r7, #8]
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	685b      	ldr	r3, [r3, #4]
 801493e:	685a      	ldr	r2, [r3, #4]
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	605a      	str	r2, [r3, #4]
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	685a      	ldr	r2, [r3, #4]
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	3308      	adds	r3, #8
 801494c:	429a      	cmp	r2, r3
 801494e:	d104      	bne.n	801495a <vTaskSwitchContext+0x8a>
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	685b      	ldr	r3, [r3, #4]
 8014954:	685a      	ldr	r2, [r3, #4]
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	605a      	str	r2, [r3, #4]
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	685b      	ldr	r3, [r3, #4]
 801495e:	68db      	ldr	r3, [r3, #12]
 8014960:	4a09      	ldr	r2, [pc, #36]	; (8014988 <vTaskSwitchContext+0xb8>)
 8014962:	6013      	str	r3, [r2, #0]
 8014964:	4a06      	ldr	r2, [pc, #24]	; (8014980 <vTaskSwitchContext+0xb0>)
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	6013      	str	r3, [r2, #0]
}
 801496a:	bf00      	nop
 801496c:	3714      	adds	r7, #20
 801496e:	46bd      	mov	sp, r7
 8014970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014974:	4770      	bx	lr
 8014976:	bf00      	nop
 8014978:	24001cc4 	.word	0x24001cc4
 801497c:	24001cb0 	.word	0x24001cb0
 8014980:	24001ca4 	.word	0x24001ca4
 8014984:	240017cc 	.word	0x240017cc
 8014988:	240017c8 	.word	0x240017c8

0801498c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d10a      	bne.n	80149b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a0:	f383 8811 	msr	BASEPRI, r3
 80149a4:	f3bf 8f6f 	isb	sy
 80149a8:	f3bf 8f4f 	dsb	sy
 80149ac:	60fb      	str	r3, [r7, #12]
}
 80149ae:	bf00      	nop
 80149b0:	e7fe      	b.n	80149b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80149b2:	4b07      	ldr	r3, [pc, #28]	; (80149d0 <vTaskPlaceOnEventList+0x44>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	3318      	adds	r3, #24
 80149b8:	4619      	mov	r1, r3
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f7fe fcb3 	bl	8013326 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80149c0:	2101      	movs	r1, #1
 80149c2:	6838      	ldr	r0, [r7, #0]
 80149c4:	f000 fb32 	bl	801502c <prvAddCurrentTaskToDelayedList>
}
 80149c8:	bf00      	nop
 80149ca:	3710      	adds	r7, #16
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}
 80149d0:	240017c8 	.word	0x240017c8

080149d4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b086      	sub	sp, #24
 80149d8:	af00      	add	r7, sp, #0
 80149da:	60f8      	str	r0, [r7, #12]
 80149dc:	60b9      	str	r1, [r7, #8]
 80149de:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d10a      	bne.n	80149fc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80149e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ea:	f383 8811 	msr	BASEPRI, r3
 80149ee:	f3bf 8f6f 	isb	sy
 80149f2:	f3bf 8f4f 	dsb	sy
 80149f6:	617b      	str	r3, [r7, #20]
}
 80149f8:	bf00      	nop
 80149fa:	e7fe      	b.n	80149fa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80149fc:	4b11      	ldr	r3, [pc, #68]	; (8014a44 <vTaskPlaceOnUnorderedEventList+0x70>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d10a      	bne.n	8014a1a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a08:	f383 8811 	msr	BASEPRI, r3
 8014a0c:	f3bf 8f6f 	isb	sy
 8014a10:	f3bf 8f4f 	dsb	sy
 8014a14:	613b      	str	r3, [r7, #16]
}
 8014a16:	bf00      	nop
 8014a18:	e7fe      	b.n	8014a18 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014a1a:	4b0b      	ldr	r3, [pc, #44]	; (8014a48 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	68ba      	ldr	r2, [r7, #8]
 8014a20:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014a24:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014a26:	4b08      	ldr	r3, [pc, #32]	; (8014a48 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	3318      	adds	r3, #24
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	68f8      	ldr	r0, [r7, #12]
 8014a30:	f7fe fc55 	bl	80132de <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014a34:	2101      	movs	r1, #1
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f000 faf8 	bl	801502c <prvAddCurrentTaskToDelayedList>
}
 8014a3c:	bf00      	nop
 8014a3e:	3718      	adds	r7, #24
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd80      	pop	{r7, pc}
 8014a44:	24001cc4 	.word	0x24001cc4
 8014a48:	240017c8 	.word	0x240017c8

08014a4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b086      	sub	sp, #24
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d10a      	bne.n	8014a74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a62:	f383 8811 	msr	BASEPRI, r3
 8014a66:	f3bf 8f6f 	isb	sy
 8014a6a:	f3bf 8f4f 	dsb	sy
 8014a6e:	617b      	str	r3, [r7, #20]
}
 8014a70:	bf00      	nop
 8014a72:	e7fe      	b.n	8014a72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014a74:	4b0a      	ldr	r3, [pc, #40]	; (8014aa0 <vTaskPlaceOnEventListRestricted+0x54>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	3318      	adds	r3, #24
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	68f8      	ldr	r0, [r7, #12]
 8014a7e:	f7fe fc2e 	bl	80132de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d002      	beq.n	8014a8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014a8e:	6879      	ldr	r1, [r7, #4]
 8014a90:	68b8      	ldr	r0, [r7, #8]
 8014a92:	f000 facb 	bl	801502c <prvAddCurrentTaskToDelayedList>
	}
 8014a96:	bf00      	nop
 8014a98:	3718      	adds	r7, #24
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	240017c8 	.word	0x240017c8

08014aa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b086      	sub	sp, #24
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	68db      	ldr	r3, [r3, #12]
 8014ab0:	68db      	ldr	r3, [r3, #12]
 8014ab2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014ab4:	693b      	ldr	r3, [r7, #16]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d10a      	bne.n	8014ad0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014abe:	f383 8811 	msr	BASEPRI, r3
 8014ac2:	f3bf 8f6f 	isb	sy
 8014ac6:	f3bf 8f4f 	dsb	sy
 8014aca:	60fb      	str	r3, [r7, #12]
}
 8014acc:	bf00      	nop
 8014ace:	e7fe      	b.n	8014ace <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014ad0:	693b      	ldr	r3, [r7, #16]
 8014ad2:	3318      	adds	r3, #24
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7fe fc5f 	bl	8013398 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ada:	4b1e      	ldr	r3, [pc, #120]	; (8014b54 <xTaskRemoveFromEventList+0xb0>)
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d11d      	bne.n	8014b1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014ae2:	693b      	ldr	r3, [r7, #16]
 8014ae4:	3304      	adds	r3, #4
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7fe fc56 	bl	8013398 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014aec:	693b      	ldr	r3, [r7, #16]
 8014aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014af0:	4b19      	ldr	r3, [pc, #100]	; (8014b58 <xTaskRemoveFromEventList+0xb4>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d903      	bls.n	8014b00 <xTaskRemoveFromEventList+0x5c>
 8014af8:	693b      	ldr	r3, [r7, #16]
 8014afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014afc:	4a16      	ldr	r2, [pc, #88]	; (8014b58 <xTaskRemoveFromEventList+0xb4>)
 8014afe:	6013      	str	r3, [r2, #0]
 8014b00:	693b      	ldr	r3, [r7, #16]
 8014b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b04:	4613      	mov	r3, r2
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	4413      	add	r3, r2
 8014b0a:	009b      	lsls	r3, r3, #2
 8014b0c:	4a13      	ldr	r2, [pc, #76]	; (8014b5c <xTaskRemoveFromEventList+0xb8>)
 8014b0e:	441a      	add	r2, r3
 8014b10:	693b      	ldr	r3, [r7, #16]
 8014b12:	3304      	adds	r3, #4
 8014b14:	4619      	mov	r1, r3
 8014b16:	4610      	mov	r0, r2
 8014b18:	f7fe fbe1 	bl	80132de <vListInsertEnd>
 8014b1c:	e005      	b.n	8014b2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014b1e:	693b      	ldr	r3, [r7, #16]
 8014b20:	3318      	adds	r3, #24
 8014b22:	4619      	mov	r1, r3
 8014b24:	480e      	ldr	r0, [pc, #56]	; (8014b60 <xTaskRemoveFromEventList+0xbc>)
 8014b26:	f7fe fbda 	bl	80132de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b2e:	4b0d      	ldr	r3, [pc, #52]	; (8014b64 <xTaskRemoveFromEventList+0xc0>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d905      	bls.n	8014b44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014b38:	2301      	movs	r3, #1
 8014b3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014b3c:	4b0a      	ldr	r3, [pc, #40]	; (8014b68 <xTaskRemoveFromEventList+0xc4>)
 8014b3e:	2201      	movs	r2, #1
 8014b40:	601a      	str	r2, [r3, #0]
 8014b42:	e001      	b.n	8014b48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014b44:	2300      	movs	r3, #0
 8014b46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014b48:	697b      	ldr	r3, [r7, #20]
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3718      	adds	r7, #24
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	bf00      	nop
 8014b54:	24001cc4 	.word	0x24001cc4
 8014b58:	24001ca4 	.word	0x24001ca4
 8014b5c:	240017cc 	.word	0x240017cc
 8014b60:	24001c5c 	.word	0x24001c5c
 8014b64:	240017c8 	.word	0x240017c8
 8014b68:	24001cb0 	.word	0x24001cb0

08014b6c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b086      	sub	sp, #24
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014b76:	4b29      	ldr	r3, [pc, #164]	; (8014c1c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d10a      	bne.n	8014b94 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b82:	f383 8811 	msr	BASEPRI, r3
 8014b86:	f3bf 8f6f 	isb	sy
 8014b8a:	f3bf 8f4f 	dsb	sy
 8014b8e:	613b      	str	r3, [r7, #16]
}
 8014b90:	bf00      	nop
 8014b92:	e7fe      	b.n	8014b92 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	68db      	ldr	r3, [r3, #12]
 8014ba2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d10a      	bne.n	8014bc0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bae:	f383 8811 	msr	BASEPRI, r3
 8014bb2:	f3bf 8f6f 	isb	sy
 8014bb6:	f3bf 8f4f 	dsb	sy
 8014bba:	60fb      	str	r3, [r7, #12]
}
 8014bbc:	bf00      	nop
 8014bbe:	e7fe      	b.n	8014bbe <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f7fe fbe9 	bl	8013398 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	3304      	adds	r3, #4
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7fe fbe4 	bl	8013398 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bd4:	4b12      	ldr	r3, [pc, #72]	; (8014c20 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	d903      	bls.n	8014be4 <vTaskRemoveFromUnorderedEventList+0x78>
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014be0:	4a0f      	ldr	r2, [pc, #60]	; (8014c20 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014be2:	6013      	str	r3, [r2, #0]
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014be8:	4613      	mov	r3, r2
 8014bea:	009b      	lsls	r3, r3, #2
 8014bec:	4413      	add	r3, r2
 8014bee:	009b      	lsls	r3, r3, #2
 8014bf0:	4a0c      	ldr	r2, [pc, #48]	; (8014c24 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014bf2:	441a      	add	r2, r3
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	3304      	adds	r3, #4
 8014bf8:	4619      	mov	r1, r3
 8014bfa:	4610      	mov	r0, r2
 8014bfc:	f7fe fb6f 	bl	80132de <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c04:	4b08      	ldr	r3, [pc, #32]	; (8014c28 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d902      	bls.n	8014c14 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014c0e:	4b07      	ldr	r3, [pc, #28]	; (8014c2c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014c10:	2201      	movs	r2, #1
 8014c12:	601a      	str	r2, [r3, #0]
	}
}
 8014c14:	bf00      	nop
 8014c16:	3718      	adds	r7, #24
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}
 8014c1c:	24001cc4 	.word	0x24001cc4
 8014c20:	24001ca4 	.word	0x24001ca4
 8014c24:	240017cc 	.word	0x240017cc
 8014c28:	240017c8 	.word	0x240017c8
 8014c2c:	24001cb0 	.word	0x24001cb0

08014c30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014c30:	b480      	push	{r7}
 8014c32:	b083      	sub	sp, #12
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014c38:	4b06      	ldr	r3, [pc, #24]	; (8014c54 <vTaskInternalSetTimeOutState+0x24>)
 8014c3a:	681a      	ldr	r2, [r3, #0]
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014c40:	4b05      	ldr	r3, [pc, #20]	; (8014c58 <vTaskInternalSetTimeOutState+0x28>)
 8014c42:	681a      	ldr	r2, [r3, #0]
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	605a      	str	r2, [r3, #4]
}
 8014c48:	bf00      	nop
 8014c4a:	370c      	adds	r7, #12
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr
 8014c54:	24001cb4 	.word	0x24001cb4
 8014c58:	24001ca0 	.word	0x24001ca0

08014c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b088      	sub	sp, #32
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
 8014c64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d10a      	bne.n	8014c82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c70:	f383 8811 	msr	BASEPRI, r3
 8014c74:	f3bf 8f6f 	isb	sy
 8014c78:	f3bf 8f4f 	dsb	sy
 8014c7c:	613b      	str	r3, [r7, #16]
}
 8014c7e:	bf00      	nop
 8014c80:	e7fe      	b.n	8014c80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d10a      	bne.n	8014c9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c8c:	f383 8811 	msr	BASEPRI, r3
 8014c90:	f3bf 8f6f 	isb	sy
 8014c94:	f3bf 8f4f 	dsb	sy
 8014c98:	60fb      	str	r3, [r7, #12]
}
 8014c9a:	bf00      	nop
 8014c9c:	e7fe      	b.n	8014c9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014c9e:	f000 feb1 	bl	8015a04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014ca2:	4b1d      	ldr	r3, [pc, #116]	; (8014d18 <xTaskCheckForTimeOut+0xbc>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	69ba      	ldr	r2, [r7, #24]
 8014cae:	1ad3      	subs	r3, r2, r3
 8014cb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014cba:	d102      	bne.n	8014cc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	61fb      	str	r3, [r7, #28]
 8014cc0:	e023      	b.n	8014d0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681a      	ldr	r2, [r3, #0]
 8014cc6:	4b15      	ldr	r3, [pc, #84]	; (8014d1c <xTaskCheckForTimeOut+0xc0>)
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d007      	beq.n	8014cde <xTaskCheckForTimeOut+0x82>
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	69ba      	ldr	r2, [r7, #24]
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	d302      	bcc.n	8014cde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014cd8:	2301      	movs	r3, #1
 8014cda:	61fb      	str	r3, [r7, #28]
 8014cdc:	e015      	b.n	8014d0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	697a      	ldr	r2, [r7, #20]
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d20b      	bcs.n	8014d00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	681a      	ldr	r2, [r3, #0]
 8014cec:	697b      	ldr	r3, [r7, #20]
 8014cee:	1ad2      	subs	r2, r2, r3
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014cf4:	6878      	ldr	r0, [r7, #4]
 8014cf6:	f7ff ff9b 	bl	8014c30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	61fb      	str	r3, [r7, #28]
 8014cfe:	e004      	b.n	8014d0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	2200      	movs	r2, #0
 8014d04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014d06:	2301      	movs	r3, #1
 8014d08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014d0a:	f000 feab 	bl	8015a64 <vPortExitCritical>

	return xReturn;
 8014d0e:	69fb      	ldr	r3, [r7, #28]
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3720      	adds	r7, #32
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}
 8014d18:	24001ca0 	.word	0x24001ca0
 8014d1c:	24001cb4 	.word	0x24001cb4

08014d20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014d20:	b480      	push	{r7}
 8014d22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014d24:	4b03      	ldr	r3, [pc, #12]	; (8014d34 <vTaskMissedYield+0x14>)
 8014d26:	2201      	movs	r2, #1
 8014d28:	601a      	str	r2, [r3, #0]
}
 8014d2a:	bf00      	nop
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d32:	4770      	bx	lr
 8014d34:	24001cb0 	.word	0x24001cb0

08014d38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014d40:	f000 f852 	bl	8014de8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014d44:	4b06      	ldr	r3, [pc, #24]	; (8014d60 <prvIdleTask+0x28>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	2b01      	cmp	r3, #1
 8014d4a:	d9f9      	bls.n	8014d40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014d4c:	4b05      	ldr	r3, [pc, #20]	; (8014d64 <prvIdleTask+0x2c>)
 8014d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d52:	601a      	str	r2, [r3, #0]
 8014d54:	f3bf 8f4f 	dsb	sy
 8014d58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014d5c:	e7f0      	b.n	8014d40 <prvIdleTask+0x8>
 8014d5e:	bf00      	nop
 8014d60:	240017cc 	.word	0x240017cc
 8014d64:	e000ed04 	.word	0xe000ed04

08014d68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b082      	sub	sp, #8
 8014d6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014d6e:	2300      	movs	r3, #0
 8014d70:	607b      	str	r3, [r7, #4]
 8014d72:	e00c      	b.n	8014d8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014d74:	687a      	ldr	r2, [r7, #4]
 8014d76:	4613      	mov	r3, r2
 8014d78:	009b      	lsls	r3, r3, #2
 8014d7a:	4413      	add	r3, r2
 8014d7c:	009b      	lsls	r3, r3, #2
 8014d7e:	4a12      	ldr	r2, [pc, #72]	; (8014dc8 <prvInitialiseTaskLists+0x60>)
 8014d80:	4413      	add	r3, r2
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7fe fa7e 	bl	8013284 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	3301      	adds	r3, #1
 8014d8c:	607b      	str	r3, [r7, #4]
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	2b37      	cmp	r3, #55	; 0x37
 8014d92:	d9ef      	bls.n	8014d74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014d94:	480d      	ldr	r0, [pc, #52]	; (8014dcc <prvInitialiseTaskLists+0x64>)
 8014d96:	f7fe fa75 	bl	8013284 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014d9a:	480d      	ldr	r0, [pc, #52]	; (8014dd0 <prvInitialiseTaskLists+0x68>)
 8014d9c:	f7fe fa72 	bl	8013284 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014da0:	480c      	ldr	r0, [pc, #48]	; (8014dd4 <prvInitialiseTaskLists+0x6c>)
 8014da2:	f7fe fa6f 	bl	8013284 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014da6:	480c      	ldr	r0, [pc, #48]	; (8014dd8 <prvInitialiseTaskLists+0x70>)
 8014da8:	f7fe fa6c 	bl	8013284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014dac:	480b      	ldr	r0, [pc, #44]	; (8014ddc <prvInitialiseTaskLists+0x74>)
 8014dae:	f7fe fa69 	bl	8013284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014db2:	4b0b      	ldr	r3, [pc, #44]	; (8014de0 <prvInitialiseTaskLists+0x78>)
 8014db4:	4a05      	ldr	r2, [pc, #20]	; (8014dcc <prvInitialiseTaskLists+0x64>)
 8014db6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014db8:	4b0a      	ldr	r3, [pc, #40]	; (8014de4 <prvInitialiseTaskLists+0x7c>)
 8014dba:	4a05      	ldr	r2, [pc, #20]	; (8014dd0 <prvInitialiseTaskLists+0x68>)
 8014dbc:	601a      	str	r2, [r3, #0]
}
 8014dbe:	bf00      	nop
 8014dc0:	3708      	adds	r7, #8
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}
 8014dc6:	bf00      	nop
 8014dc8:	240017cc 	.word	0x240017cc
 8014dcc:	24001c2c 	.word	0x24001c2c
 8014dd0:	24001c40 	.word	0x24001c40
 8014dd4:	24001c5c 	.word	0x24001c5c
 8014dd8:	24001c70 	.word	0x24001c70
 8014ddc:	24001c88 	.word	0x24001c88
 8014de0:	24001c54 	.word	0x24001c54
 8014de4:	24001c58 	.word	0x24001c58

08014de8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b082      	sub	sp, #8
 8014dec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014dee:	e019      	b.n	8014e24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014df0:	f000 fe08 	bl	8015a04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014df4:	4b10      	ldr	r3, [pc, #64]	; (8014e38 <prvCheckTasksWaitingTermination+0x50>)
 8014df6:	68db      	ldr	r3, [r3, #12]
 8014df8:	68db      	ldr	r3, [r3, #12]
 8014dfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	3304      	adds	r3, #4
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7fe fac9 	bl	8013398 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014e06:	4b0d      	ldr	r3, [pc, #52]	; (8014e3c <prvCheckTasksWaitingTermination+0x54>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	3b01      	subs	r3, #1
 8014e0c:	4a0b      	ldr	r2, [pc, #44]	; (8014e3c <prvCheckTasksWaitingTermination+0x54>)
 8014e0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014e10:	4b0b      	ldr	r3, [pc, #44]	; (8014e40 <prvCheckTasksWaitingTermination+0x58>)
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	3b01      	subs	r3, #1
 8014e16:	4a0a      	ldr	r2, [pc, #40]	; (8014e40 <prvCheckTasksWaitingTermination+0x58>)
 8014e18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014e1a:	f000 fe23 	bl	8015a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f000 f810 	bl	8014e44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014e24:	4b06      	ldr	r3, [pc, #24]	; (8014e40 <prvCheckTasksWaitingTermination+0x58>)
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d1e1      	bne.n	8014df0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014e2c:	bf00      	nop
 8014e2e:	bf00      	nop
 8014e30:	3708      	adds	r7, #8
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bd80      	pop	{r7, pc}
 8014e36:	bf00      	nop
 8014e38:	24001c70 	.word	0x24001c70
 8014e3c:	24001c9c 	.word	0x24001c9c
 8014e40:	24001c84 	.word	0x24001c84

08014e44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b084      	sub	sp, #16
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d108      	bne.n	8014e68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f000 ffc0 	bl	8015de0 <vPortFree>
				vPortFree( pxTCB );
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f000 ffbd 	bl	8015de0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014e66:	e018      	b.n	8014e9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014e6e:	2b01      	cmp	r3, #1
 8014e70:	d103      	bne.n	8014e7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f000 ffb4 	bl	8015de0 <vPortFree>
	}
 8014e78:	e00f      	b.n	8014e9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014e80:	2b02      	cmp	r3, #2
 8014e82:	d00a      	beq.n	8014e9a <prvDeleteTCB+0x56>
	__asm volatile
 8014e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e88:	f383 8811 	msr	BASEPRI, r3
 8014e8c:	f3bf 8f6f 	isb	sy
 8014e90:	f3bf 8f4f 	dsb	sy
 8014e94:	60fb      	str	r3, [r7, #12]
}
 8014e96:	bf00      	nop
 8014e98:	e7fe      	b.n	8014e98 <prvDeleteTCB+0x54>
	}
 8014e9a:	bf00      	nop
 8014e9c:	3710      	adds	r7, #16
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}
	...

08014ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b083      	sub	sp, #12
 8014ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014eaa:	4b0c      	ldr	r3, [pc, #48]	; (8014edc <prvResetNextTaskUnblockTime+0x38>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d104      	bne.n	8014ebe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014eb4:	4b0a      	ldr	r3, [pc, #40]	; (8014ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8014eb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014eba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014ebc:	e008      	b.n	8014ed0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ebe:	4b07      	ldr	r3, [pc, #28]	; (8014edc <prvResetNextTaskUnblockTime+0x38>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	68db      	ldr	r3, [r3, #12]
 8014ec4:	68db      	ldr	r3, [r3, #12]
 8014ec6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	685b      	ldr	r3, [r3, #4]
 8014ecc:	4a04      	ldr	r2, [pc, #16]	; (8014ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8014ece:	6013      	str	r3, [r2, #0]
}
 8014ed0:	bf00      	nop
 8014ed2:	370c      	adds	r7, #12
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr
 8014edc:	24001c54 	.word	0x24001c54
 8014ee0:	24001cbc 	.word	0x24001cbc

08014ee4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b083      	sub	sp, #12
 8014ee8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014eea:	4b0b      	ldr	r3, [pc, #44]	; (8014f18 <xTaskGetSchedulerState+0x34>)
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d102      	bne.n	8014ef8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	607b      	str	r3, [r7, #4]
 8014ef6:	e008      	b.n	8014f0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ef8:	4b08      	ldr	r3, [pc, #32]	; (8014f1c <xTaskGetSchedulerState+0x38>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d102      	bne.n	8014f06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014f00:	2302      	movs	r3, #2
 8014f02:	607b      	str	r3, [r7, #4]
 8014f04:	e001      	b.n	8014f0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014f06:	2300      	movs	r3, #0
 8014f08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014f0a:	687b      	ldr	r3, [r7, #4]
	}
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	370c      	adds	r7, #12
 8014f10:	46bd      	mov	sp, r7
 8014f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f16:	4770      	bx	lr
 8014f18:	24001ca8 	.word	0x24001ca8
 8014f1c:	24001cc4 	.word	0x24001cc4

08014f20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b086      	sub	sp, #24
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d056      	beq.n	8014fe4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014f36:	4b2e      	ldr	r3, [pc, #184]	; (8014ff0 <xTaskPriorityDisinherit+0xd0>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	693a      	ldr	r2, [r7, #16]
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d00a      	beq.n	8014f56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f44:	f383 8811 	msr	BASEPRI, r3
 8014f48:	f3bf 8f6f 	isb	sy
 8014f4c:	f3bf 8f4f 	dsb	sy
 8014f50:	60fb      	str	r3, [r7, #12]
}
 8014f52:	bf00      	nop
 8014f54:	e7fe      	b.n	8014f54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d10a      	bne.n	8014f74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f62:	f383 8811 	msr	BASEPRI, r3
 8014f66:	f3bf 8f6f 	isb	sy
 8014f6a:	f3bf 8f4f 	dsb	sy
 8014f6e:	60bb      	str	r3, [r7, #8]
}
 8014f70:	bf00      	nop
 8014f72:	e7fe      	b.n	8014f72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014f74:	693b      	ldr	r3, [r7, #16]
 8014f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f78:	1e5a      	subs	r2, r3, #1
 8014f7a:	693b      	ldr	r3, [r7, #16]
 8014f7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014f7e:	693b      	ldr	r3, [r7, #16]
 8014f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d02c      	beq.n	8014fe4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014f8a:	693b      	ldr	r3, [r7, #16]
 8014f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d128      	bne.n	8014fe4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f92:	693b      	ldr	r3, [r7, #16]
 8014f94:	3304      	adds	r3, #4
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7fe f9fe 	bl	8013398 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fa8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014fb0:	693b      	ldr	r3, [r7, #16]
 8014fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fb4:	4b0f      	ldr	r3, [pc, #60]	; (8014ff4 <xTaskPriorityDisinherit+0xd4>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d903      	bls.n	8014fc4 <xTaskPriorityDisinherit+0xa4>
 8014fbc:	693b      	ldr	r3, [r7, #16]
 8014fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fc0:	4a0c      	ldr	r2, [pc, #48]	; (8014ff4 <xTaskPriorityDisinherit+0xd4>)
 8014fc2:	6013      	str	r3, [r2, #0]
 8014fc4:	693b      	ldr	r3, [r7, #16]
 8014fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fc8:	4613      	mov	r3, r2
 8014fca:	009b      	lsls	r3, r3, #2
 8014fcc:	4413      	add	r3, r2
 8014fce:	009b      	lsls	r3, r3, #2
 8014fd0:	4a09      	ldr	r2, [pc, #36]	; (8014ff8 <xTaskPriorityDisinherit+0xd8>)
 8014fd2:	441a      	add	r2, r3
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	3304      	adds	r3, #4
 8014fd8:	4619      	mov	r1, r3
 8014fda:	4610      	mov	r0, r2
 8014fdc:	f7fe f97f 	bl	80132de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014fe4:	697b      	ldr	r3, [r7, #20]
	}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3718      	adds	r7, #24
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}
 8014fee:	bf00      	nop
 8014ff0:	240017c8 	.word	0x240017c8
 8014ff4:	24001ca4 	.word	0x24001ca4
 8014ff8:	240017cc 	.word	0x240017cc

08014ffc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8014ffc:	b480      	push	{r7}
 8014ffe:	b083      	sub	sp, #12
 8015000:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015002:	4b09      	ldr	r3, [pc, #36]	; (8015028 <uxTaskResetEventItemValue+0x2c>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	699b      	ldr	r3, [r3, #24]
 8015008:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801500a:	4b07      	ldr	r3, [pc, #28]	; (8015028 <uxTaskResetEventItemValue+0x2c>)
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015010:	4b05      	ldr	r3, [pc, #20]	; (8015028 <uxTaskResetEventItemValue+0x2c>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015018:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801501a:	687b      	ldr	r3, [r7, #4]
}
 801501c:	4618      	mov	r0, r3
 801501e:	370c      	adds	r7, #12
 8015020:	46bd      	mov	sp, r7
 8015022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015026:	4770      	bx	lr
 8015028:	240017c8 	.word	0x240017c8

0801502c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b084      	sub	sp, #16
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015036:	4b21      	ldr	r3, [pc, #132]	; (80150bc <prvAddCurrentTaskToDelayedList+0x90>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801503c:	4b20      	ldr	r3, [pc, #128]	; (80150c0 <prvAddCurrentTaskToDelayedList+0x94>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	3304      	adds	r3, #4
 8015042:	4618      	mov	r0, r3
 8015044:	f7fe f9a8 	bl	8013398 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801504e:	d10a      	bne.n	8015066 <prvAddCurrentTaskToDelayedList+0x3a>
 8015050:	683b      	ldr	r3, [r7, #0]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d007      	beq.n	8015066 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015056:	4b1a      	ldr	r3, [pc, #104]	; (80150c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	3304      	adds	r3, #4
 801505c:	4619      	mov	r1, r3
 801505e:	4819      	ldr	r0, [pc, #100]	; (80150c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8015060:	f7fe f93d 	bl	80132de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015064:	e026      	b.n	80150b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015066:	68fa      	ldr	r2, [r7, #12]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	4413      	add	r3, r2
 801506c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801506e:	4b14      	ldr	r3, [pc, #80]	; (80150c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	68ba      	ldr	r2, [r7, #8]
 8015074:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015076:	68ba      	ldr	r2, [r7, #8]
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	429a      	cmp	r2, r3
 801507c:	d209      	bcs.n	8015092 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801507e:	4b12      	ldr	r3, [pc, #72]	; (80150c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	4b0f      	ldr	r3, [pc, #60]	; (80150c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	3304      	adds	r3, #4
 8015088:	4619      	mov	r1, r3
 801508a:	4610      	mov	r0, r2
 801508c:	f7fe f94b 	bl	8013326 <vListInsert>
}
 8015090:	e010      	b.n	80150b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015092:	4b0e      	ldr	r3, [pc, #56]	; (80150cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8015094:	681a      	ldr	r2, [r3, #0]
 8015096:	4b0a      	ldr	r3, [pc, #40]	; (80150c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	3304      	adds	r3, #4
 801509c:	4619      	mov	r1, r3
 801509e:	4610      	mov	r0, r2
 80150a0:	f7fe f941 	bl	8013326 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80150a4:	4b0a      	ldr	r3, [pc, #40]	; (80150d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	68ba      	ldr	r2, [r7, #8]
 80150aa:	429a      	cmp	r2, r3
 80150ac:	d202      	bcs.n	80150b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80150ae:	4a08      	ldr	r2, [pc, #32]	; (80150d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	6013      	str	r3, [r2, #0]
}
 80150b4:	bf00      	nop
 80150b6:	3710      	adds	r7, #16
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}
 80150bc:	24001ca0 	.word	0x24001ca0
 80150c0:	240017c8 	.word	0x240017c8
 80150c4:	24001c88 	.word	0x24001c88
 80150c8:	24001c58 	.word	0x24001c58
 80150cc:	24001c54 	.word	0x24001c54
 80150d0:	24001cbc 	.word	0x24001cbc

080150d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b08a      	sub	sp, #40	; 0x28
 80150d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80150da:	2300      	movs	r3, #0
 80150dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80150de:	f000 fb07 	bl	80156f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80150e2:	4b1c      	ldr	r3, [pc, #112]	; (8015154 <xTimerCreateTimerTask+0x80>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d021      	beq.n	801512e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80150ea:	2300      	movs	r3, #0
 80150ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80150ee:	2300      	movs	r3, #0
 80150f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80150f2:	1d3a      	adds	r2, r7, #4
 80150f4:	f107 0108 	add.w	r1, r7, #8
 80150f8:	f107 030c 	add.w	r3, r7, #12
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7fd feb9 	bl	8012e74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015102:	6879      	ldr	r1, [r7, #4]
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	68fa      	ldr	r2, [r7, #12]
 8015108:	9202      	str	r2, [sp, #8]
 801510a:	9301      	str	r3, [sp, #4]
 801510c:	2302      	movs	r3, #2
 801510e:	9300      	str	r3, [sp, #0]
 8015110:	2300      	movs	r3, #0
 8015112:	460a      	mov	r2, r1
 8015114:	4910      	ldr	r1, [pc, #64]	; (8015158 <xTimerCreateTimerTask+0x84>)
 8015116:	4811      	ldr	r0, [pc, #68]	; (801515c <xTimerCreateTimerTask+0x88>)
 8015118:	f7fe ff0e 	bl	8013f38 <xTaskCreateStatic>
 801511c:	4603      	mov	r3, r0
 801511e:	4a10      	ldr	r2, [pc, #64]	; (8015160 <xTimerCreateTimerTask+0x8c>)
 8015120:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015122:	4b0f      	ldr	r3, [pc, #60]	; (8015160 <xTimerCreateTimerTask+0x8c>)
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d001      	beq.n	801512e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801512a:	2301      	movs	r3, #1
 801512c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d10a      	bne.n	801514a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015138:	f383 8811 	msr	BASEPRI, r3
 801513c:	f3bf 8f6f 	isb	sy
 8015140:	f3bf 8f4f 	dsb	sy
 8015144:	613b      	str	r3, [r7, #16]
}
 8015146:	bf00      	nop
 8015148:	e7fe      	b.n	8015148 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801514a:	697b      	ldr	r3, [r7, #20]
}
 801514c:	4618      	mov	r0, r3
 801514e:	3718      	adds	r7, #24
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}
 8015154:	24001cf8 	.word	0x24001cf8
 8015158:	08016d34 	.word	0x08016d34
 801515c:	08015299 	.word	0x08015299
 8015160:	24001cfc 	.word	0x24001cfc

08015164 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b08a      	sub	sp, #40	; 0x28
 8015168:	af00      	add	r7, sp, #0
 801516a:	60f8      	str	r0, [r7, #12]
 801516c:	60b9      	str	r1, [r7, #8]
 801516e:	607a      	str	r2, [r7, #4]
 8015170:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015172:	2300      	movs	r3, #0
 8015174:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d10a      	bne.n	8015192 <xTimerGenericCommand+0x2e>
	__asm volatile
 801517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015180:	f383 8811 	msr	BASEPRI, r3
 8015184:	f3bf 8f6f 	isb	sy
 8015188:	f3bf 8f4f 	dsb	sy
 801518c:	623b      	str	r3, [r7, #32]
}
 801518e:	bf00      	nop
 8015190:	e7fe      	b.n	8015190 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015192:	4b1a      	ldr	r3, [pc, #104]	; (80151fc <xTimerGenericCommand+0x98>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d02a      	beq.n	80151f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80151a6:	68bb      	ldr	r3, [r7, #8]
 80151a8:	2b05      	cmp	r3, #5
 80151aa:	dc18      	bgt.n	80151de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80151ac:	f7ff fe9a 	bl	8014ee4 <xTaskGetSchedulerState>
 80151b0:	4603      	mov	r3, r0
 80151b2:	2b02      	cmp	r3, #2
 80151b4:	d109      	bne.n	80151ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80151b6:	4b11      	ldr	r3, [pc, #68]	; (80151fc <xTimerGenericCommand+0x98>)
 80151b8:	6818      	ldr	r0, [r3, #0]
 80151ba:	f107 0110 	add.w	r1, r7, #16
 80151be:	2300      	movs	r3, #0
 80151c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151c2:	f7fe fa51 	bl	8013668 <xQueueGenericSend>
 80151c6:	6278      	str	r0, [r7, #36]	; 0x24
 80151c8:	e012      	b.n	80151f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80151ca:	4b0c      	ldr	r3, [pc, #48]	; (80151fc <xTimerGenericCommand+0x98>)
 80151cc:	6818      	ldr	r0, [r3, #0]
 80151ce:	f107 0110 	add.w	r1, r7, #16
 80151d2:	2300      	movs	r3, #0
 80151d4:	2200      	movs	r2, #0
 80151d6:	f7fe fa47 	bl	8013668 <xQueueGenericSend>
 80151da:	6278      	str	r0, [r7, #36]	; 0x24
 80151dc:	e008      	b.n	80151f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80151de:	4b07      	ldr	r3, [pc, #28]	; (80151fc <xTimerGenericCommand+0x98>)
 80151e0:	6818      	ldr	r0, [r3, #0]
 80151e2:	f107 0110 	add.w	r1, r7, #16
 80151e6:	2300      	movs	r3, #0
 80151e8:	683a      	ldr	r2, [r7, #0]
 80151ea:	f7fe fb3b 	bl	8013864 <xQueueGenericSendFromISR>
 80151ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80151f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	3728      	adds	r7, #40	; 0x28
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}
 80151fa:	bf00      	nop
 80151fc:	24001cf8 	.word	0x24001cf8

08015200 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b088      	sub	sp, #32
 8015204:	af02      	add	r7, sp, #8
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801520a:	4b22      	ldr	r3, [pc, #136]	; (8015294 <prvProcessExpiredTimer+0x94>)
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	68db      	ldr	r3, [r3, #12]
 8015210:	68db      	ldr	r3, [r3, #12]
 8015212:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015214:	697b      	ldr	r3, [r7, #20]
 8015216:	3304      	adds	r3, #4
 8015218:	4618      	mov	r0, r3
 801521a:	f7fe f8bd 	bl	8013398 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801521e:	697b      	ldr	r3, [r7, #20]
 8015220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015224:	f003 0304 	and.w	r3, r3, #4
 8015228:	2b00      	cmp	r3, #0
 801522a:	d022      	beq.n	8015272 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	699a      	ldr	r2, [r3, #24]
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	18d1      	adds	r1, r2, r3
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	683a      	ldr	r2, [r7, #0]
 8015238:	6978      	ldr	r0, [r7, #20]
 801523a:	f000 f8d1 	bl	80153e0 <prvInsertTimerInActiveList>
 801523e:	4603      	mov	r3, r0
 8015240:	2b00      	cmp	r3, #0
 8015242:	d01f      	beq.n	8015284 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015244:	2300      	movs	r3, #0
 8015246:	9300      	str	r3, [sp, #0]
 8015248:	2300      	movs	r3, #0
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	2100      	movs	r1, #0
 801524e:	6978      	ldr	r0, [r7, #20]
 8015250:	f7ff ff88 	bl	8015164 <xTimerGenericCommand>
 8015254:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015256:	693b      	ldr	r3, [r7, #16]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d113      	bne.n	8015284 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015260:	f383 8811 	msr	BASEPRI, r3
 8015264:	f3bf 8f6f 	isb	sy
 8015268:	f3bf 8f4f 	dsb	sy
 801526c:	60fb      	str	r3, [r7, #12]
}
 801526e:	bf00      	nop
 8015270:	e7fe      	b.n	8015270 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015278:	f023 0301 	bic.w	r3, r3, #1
 801527c:	b2da      	uxtb	r2, r3
 801527e:	697b      	ldr	r3, [r7, #20]
 8015280:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	6a1b      	ldr	r3, [r3, #32]
 8015288:	6978      	ldr	r0, [r7, #20]
 801528a:	4798      	blx	r3
}
 801528c:	bf00      	nop
 801528e:	3718      	adds	r7, #24
 8015290:	46bd      	mov	sp, r7
 8015292:	bd80      	pop	{r7, pc}
 8015294:	24001cf0 	.word	0x24001cf0

08015298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b084      	sub	sp, #16
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80152a0:	f107 0308 	add.w	r3, r7, #8
 80152a4:	4618      	mov	r0, r3
 80152a6:	f000 f857 	bl	8015358 <prvGetNextExpireTime>
 80152aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80152ac:	68bb      	ldr	r3, [r7, #8]
 80152ae:	4619      	mov	r1, r3
 80152b0:	68f8      	ldr	r0, [r7, #12]
 80152b2:	f000 f803 	bl	80152bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80152b6:	f000 f8d5 	bl	8015464 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80152ba:	e7f1      	b.n	80152a0 <prvTimerTask+0x8>

080152bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b084      	sub	sp, #16
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80152c6:	f7ff f98d 	bl	80145e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80152ca:	f107 0308 	add.w	r3, r7, #8
 80152ce:	4618      	mov	r0, r3
 80152d0:	f000 f866 	bl	80153a0 <prvSampleTimeNow>
 80152d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80152d6:	68bb      	ldr	r3, [r7, #8]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d130      	bne.n	801533e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d10a      	bne.n	80152f8 <prvProcessTimerOrBlockTask+0x3c>
 80152e2:	687a      	ldr	r2, [r7, #4]
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d806      	bhi.n	80152f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80152ea:	f7ff f989 	bl	8014600 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80152ee:	68f9      	ldr	r1, [r7, #12]
 80152f0:	6878      	ldr	r0, [r7, #4]
 80152f2:	f7ff ff85 	bl	8015200 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80152f6:	e024      	b.n	8015342 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d008      	beq.n	8015310 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80152fe:	4b13      	ldr	r3, [pc, #76]	; (801534c <prvProcessTimerOrBlockTask+0x90>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d101      	bne.n	801530c <prvProcessTimerOrBlockTask+0x50>
 8015308:	2301      	movs	r3, #1
 801530a:	e000      	b.n	801530e <prvProcessTimerOrBlockTask+0x52>
 801530c:	2300      	movs	r3, #0
 801530e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015310:	4b0f      	ldr	r3, [pc, #60]	; (8015350 <prvProcessTimerOrBlockTask+0x94>)
 8015312:	6818      	ldr	r0, [r3, #0]
 8015314:	687a      	ldr	r2, [r7, #4]
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	1ad3      	subs	r3, r2, r3
 801531a:	683a      	ldr	r2, [r7, #0]
 801531c:	4619      	mov	r1, r3
 801531e:	f7fe fdd7 	bl	8013ed0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015322:	f7ff f96d 	bl	8014600 <xTaskResumeAll>
 8015326:	4603      	mov	r3, r0
 8015328:	2b00      	cmp	r3, #0
 801532a:	d10a      	bne.n	8015342 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801532c:	4b09      	ldr	r3, [pc, #36]	; (8015354 <prvProcessTimerOrBlockTask+0x98>)
 801532e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015332:	601a      	str	r2, [r3, #0]
 8015334:	f3bf 8f4f 	dsb	sy
 8015338:	f3bf 8f6f 	isb	sy
}
 801533c:	e001      	b.n	8015342 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801533e:	f7ff f95f 	bl	8014600 <xTaskResumeAll>
}
 8015342:	bf00      	nop
 8015344:	3710      	adds	r7, #16
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}
 801534a:	bf00      	nop
 801534c:	24001cf4 	.word	0x24001cf4
 8015350:	24001cf8 	.word	0x24001cf8
 8015354:	e000ed04 	.word	0xe000ed04

08015358 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015358:	b480      	push	{r7}
 801535a:	b085      	sub	sp, #20
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015360:	4b0e      	ldr	r3, [pc, #56]	; (801539c <prvGetNextExpireTime+0x44>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d101      	bne.n	801536e <prvGetNextExpireTime+0x16>
 801536a:	2201      	movs	r2, #1
 801536c:	e000      	b.n	8015370 <prvGetNextExpireTime+0x18>
 801536e:	2200      	movs	r2, #0
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d105      	bne.n	8015388 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801537c:	4b07      	ldr	r3, [pc, #28]	; (801539c <prvGetNextExpireTime+0x44>)
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	68db      	ldr	r3, [r3, #12]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	60fb      	str	r3, [r7, #12]
 8015386:	e001      	b.n	801538c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015388:	2300      	movs	r3, #0
 801538a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801538c:	68fb      	ldr	r3, [r7, #12]
}
 801538e:	4618      	mov	r0, r3
 8015390:	3714      	adds	r7, #20
 8015392:	46bd      	mov	sp, r7
 8015394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015398:	4770      	bx	lr
 801539a:	bf00      	nop
 801539c:	24001cf0 	.word	0x24001cf0

080153a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b084      	sub	sp, #16
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80153a8:	f7ff f9c8 	bl	801473c <xTaskGetTickCount>
 80153ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80153ae:	4b0b      	ldr	r3, [pc, #44]	; (80153dc <prvSampleTimeNow+0x3c>)
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	68fa      	ldr	r2, [r7, #12]
 80153b4:	429a      	cmp	r2, r3
 80153b6:	d205      	bcs.n	80153c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80153b8:	f000 f936 	bl	8015628 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2201      	movs	r2, #1
 80153c0:	601a      	str	r2, [r3, #0]
 80153c2:	e002      	b.n	80153ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2200      	movs	r2, #0
 80153c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80153ca:	4a04      	ldr	r2, [pc, #16]	; (80153dc <prvSampleTimeNow+0x3c>)
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80153d0:	68fb      	ldr	r3, [r7, #12]
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	3710      	adds	r7, #16
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}
 80153da:	bf00      	nop
 80153dc:	24001d00 	.word	0x24001d00

080153e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b086      	sub	sp, #24
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	60f8      	str	r0, [r7, #12]
 80153e8:	60b9      	str	r1, [r7, #8]
 80153ea:	607a      	str	r2, [r7, #4]
 80153ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80153ee:	2300      	movs	r3, #0
 80153f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	68ba      	ldr	r2, [r7, #8]
 80153f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	68fa      	ldr	r2, [r7, #12]
 80153fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80153fe:	68ba      	ldr	r2, [r7, #8]
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	429a      	cmp	r2, r3
 8015404:	d812      	bhi.n	801542c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015406:	687a      	ldr	r2, [r7, #4]
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	1ad2      	subs	r2, r2, r3
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	699b      	ldr	r3, [r3, #24]
 8015410:	429a      	cmp	r2, r3
 8015412:	d302      	bcc.n	801541a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015414:	2301      	movs	r3, #1
 8015416:	617b      	str	r3, [r7, #20]
 8015418:	e01b      	b.n	8015452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801541a:	4b10      	ldr	r3, [pc, #64]	; (801545c <prvInsertTimerInActiveList+0x7c>)
 801541c:	681a      	ldr	r2, [r3, #0]
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	3304      	adds	r3, #4
 8015422:	4619      	mov	r1, r3
 8015424:	4610      	mov	r0, r2
 8015426:	f7fd ff7e 	bl	8013326 <vListInsert>
 801542a:	e012      	b.n	8015452 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801542c:	687a      	ldr	r2, [r7, #4]
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	429a      	cmp	r2, r3
 8015432:	d206      	bcs.n	8015442 <prvInsertTimerInActiveList+0x62>
 8015434:	68ba      	ldr	r2, [r7, #8]
 8015436:	683b      	ldr	r3, [r7, #0]
 8015438:	429a      	cmp	r2, r3
 801543a:	d302      	bcc.n	8015442 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801543c:	2301      	movs	r3, #1
 801543e:	617b      	str	r3, [r7, #20]
 8015440:	e007      	b.n	8015452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015442:	4b07      	ldr	r3, [pc, #28]	; (8015460 <prvInsertTimerInActiveList+0x80>)
 8015444:	681a      	ldr	r2, [r3, #0]
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	3304      	adds	r3, #4
 801544a:	4619      	mov	r1, r3
 801544c:	4610      	mov	r0, r2
 801544e:	f7fd ff6a 	bl	8013326 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015452:	697b      	ldr	r3, [r7, #20]
}
 8015454:	4618      	mov	r0, r3
 8015456:	3718      	adds	r7, #24
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}
 801545c:	24001cf4 	.word	0x24001cf4
 8015460:	24001cf0 	.word	0x24001cf0

08015464 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b08e      	sub	sp, #56	; 0x38
 8015468:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801546a:	e0ca      	b.n	8015602 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2b00      	cmp	r3, #0
 8015470:	da18      	bge.n	80154a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015472:	1d3b      	adds	r3, r7, #4
 8015474:	3304      	adds	r3, #4
 8015476:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801547a:	2b00      	cmp	r3, #0
 801547c:	d10a      	bne.n	8015494 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015482:	f383 8811 	msr	BASEPRI, r3
 8015486:	f3bf 8f6f 	isb	sy
 801548a:	f3bf 8f4f 	dsb	sy
 801548e:	61fb      	str	r3, [r7, #28]
}
 8015490:	bf00      	nop
 8015492:	e7fe      	b.n	8015492 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801549a:	6850      	ldr	r0, [r2, #4]
 801549c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801549e:	6892      	ldr	r2, [r2, #8]
 80154a0:	4611      	mov	r1, r2
 80154a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	f2c0 80aa 	blt.w	8015600 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80154b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154b2:	695b      	ldr	r3, [r3, #20]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d004      	beq.n	80154c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80154b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ba:	3304      	adds	r3, #4
 80154bc:	4618      	mov	r0, r3
 80154be:	f7fd ff6b 	bl	8013398 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80154c2:	463b      	mov	r3, r7
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7ff ff6b 	bl	80153a0 <prvSampleTimeNow>
 80154ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2b09      	cmp	r3, #9
 80154d0:	f200 8097 	bhi.w	8015602 <prvProcessReceivedCommands+0x19e>
 80154d4:	a201      	add	r2, pc, #4	; (adr r2, 80154dc <prvProcessReceivedCommands+0x78>)
 80154d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154da:	bf00      	nop
 80154dc:	08015505 	.word	0x08015505
 80154e0:	08015505 	.word	0x08015505
 80154e4:	08015505 	.word	0x08015505
 80154e8:	08015579 	.word	0x08015579
 80154ec:	0801558d 	.word	0x0801558d
 80154f0:	080155d7 	.word	0x080155d7
 80154f4:	08015505 	.word	0x08015505
 80154f8:	08015505 	.word	0x08015505
 80154fc:	08015579 	.word	0x08015579
 8015500:	0801558d 	.word	0x0801558d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801550a:	f043 0301 	orr.w	r3, r3, #1
 801550e:	b2da      	uxtb	r2, r3
 8015510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015516:	68ba      	ldr	r2, [r7, #8]
 8015518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801551a:	699b      	ldr	r3, [r3, #24]
 801551c:	18d1      	adds	r1, r2, r3
 801551e:	68bb      	ldr	r3, [r7, #8]
 8015520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015524:	f7ff ff5c 	bl	80153e0 <prvInsertTimerInActiveList>
 8015528:	4603      	mov	r3, r0
 801552a:	2b00      	cmp	r3, #0
 801552c:	d069      	beq.n	8015602 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015530:	6a1b      	ldr	r3, [r3, #32]
 8015532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015534:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801553c:	f003 0304 	and.w	r3, r3, #4
 8015540:	2b00      	cmp	r3, #0
 8015542:	d05e      	beq.n	8015602 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015544:	68ba      	ldr	r2, [r7, #8]
 8015546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015548:	699b      	ldr	r3, [r3, #24]
 801554a:	441a      	add	r2, r3
 801554c:	2300      	movs	r3, #0
 801554e:	9300      	str	r3, [sp, #0]
 8015550:	2300      	movs	r3, #0
 8015552:	2100      	movs	r1, #0
 8015554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015556:	f7ff fe05 	bl	8015164 <xTimerGenericCommand>
 801555a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801555c:	6a3b      	ldr	r3, [r7, #32]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d14f      	bne.n	8015602 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015566:	f383 8811 	msr	BASEPRI, r3
 801556a:	f3bf 8f6f 	isb	sy
 801556e:	f3bf 8f4f 	dsb	sy
 8015572:	61bb      	str	r3, [r7, #24]
}
 8015574:	bf00      	nop
 8015576:	e7fe      	b.n	8015576 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801557a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801557e:	f023 0301 	bic.w	r3, r3, #1
 8015582:	b2da      	uxtb	r2, r3
 8015584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801558a:	e03a      	b.n	8015602 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801558e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015592:	f043 0301 	orr.w	r3, r3, #1
 8015596:	b2da      	uxtb	r2, r3
 8015598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801559a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801559e:	68ba      	ldr	r2, [r7, #8]
 80155a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80155a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a6:	699b      	ldr	r3, [r3, #24]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d10a      	bne.n	80155c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80155ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155b0:	f383 8811 	msr	BASEPRI, r3
 80155b4:	f3bf 8f6f 	isb	sy
 80155b8:	f3bf 8f4f 	dsb	sy
 80155bc:	617b      	str	r3, [r7, #20]
}
 80155be:	bf00      	nop
 80155c0:	e7fe      	b.n	80155c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80155c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155c4:	699a      	ldr	r2, [r3, #24]
 80155c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155c8:	18d1      	adds	r1, r2, r3
 80155ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155d0:	f7ff ff06 	bl	80153e0 <prvInsertTimerInActiveList>
					break;
 80155d4:	e015      	b.n	8015602 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80155d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155dc:	f003 0302 	and.w	r3, r3, #2
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d103      	bne.n	80155ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80155e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155e6:	f000 fbfb 	bl	8015de0 <vPortFree>
 80155ea:	e00a      	b.n	8015602 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80155ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155f2:	f023 0301 	bic.w	r3, r3, #1
 80155f6:	b2da      	uxtb	r2, r3
 80155f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80155fe:	e000      	b.n	8015602 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015600:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015602:	4b08      	ldr	r3, [pc, #32]	; (8015624 <prvProcessReceivedCommands+0x1c0>)
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	1d39      	adds	r1, r7, #4
 8015608:	2200      	movs	r2, #0
 801560a:	4618      	mov	r0, r3
 801560c:	f7fe f9c6 	bl	801399c <xQueueReceive>
 8015610:	4603      	mov	r3, r0
 8015612:	2b00      	cmp	r3, #0
 8015614:	f47f af2a 	bne.w	801546c <prvProcessReceivedCommands+0x8>
	}
}
 8015618:	bf00      	nop
 801561a:	bf00      	nop
 801561c:	3730      	adds	r7, #48	; 0x30
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}
 8015622:	bf00      	nop
 8015624:	24001cf8 	.word	0x24001cf8

08015628 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b088      	sub	sp, #32
 801562c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801562e:	e048      	b.n	80156c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015630:	4b2d      	ldr	r3, [pc, #180]	; (80156e8 <prvSwitchTimerLists+0xc0>)
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	68db      	ldr	r3, [r3, #12]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801563a:	4b2b      	ldr	r3, [pc, #172]	; (80156e8 <prvSwitchTimerLists+0xc0>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	68db      	ldr	r3, [r3, #12]
 8015640:	68db      	ldr	r3, [r3, #12]
 8015642:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	3304      	adds	r3, #4
 8015648:	4618      	mov	r0, r3
 801564a:	f7fd fea5 	bl	8013398 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	6a1b      	ldr	r3, [r3, #32]
 8015652:	68f8      	ldr	r0, [r7, #12]
 8015654:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801565c:	f003 0304 	and.w	r3, r3, #4
 8015660:	2b00      	cmp	r3, #0
 8015662:	d02e      	beq.n	80156c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	699b      	ldr	r3, [r3, #24]
 8015668:	693a      	ldr	r2, [r7, #16]
 801566a:	4413      	add	r3, r2
 801566c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801566e:	68ba      	ldr	r2, [r7, #8]
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	429a      	cmp	r2, r3
 8015674:	d90e      	bls.n	8015694 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	68ba      	ldr	r2, [r7, #8]
 801567a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	68fa      	ldr	r2, [r7, #12]
 8015680:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015682:	4b19      	ldr	r3, [pc, #100]	; (80156e8 <prvSwitchTimerLists+0xc0>)
 8015684:	681a      	ldr	r2, [r3, #0]
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	3304      	adds	r3, #4
 801568a:	4619      	mov	r1, r3
 801568c:	4610      	mov	r0, r2
 801568e:	f7fd fe4a 	bl	8013326 <vListInsert>
 8015692:	e016      	b.n	80156c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015694:	2300      	movs	r3, #0
 8015696:	9300      	str	r3, [sp, #0]
 8015698:	2300      	movs	r3, #0
 801569a:	693a      	ldr	r2, [r7, #16]
 801569c:	2100      	movs	r1, #0
 801569e:	68f8      	ldr	r0, [r7, #12]
 80156a0:	f7ff fd60 	bl	8015164 <xTimerGenericCommand>
 80156a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d10a      	bne.n	80156c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80156ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b0:	f383 8811 	msr	BASEPRI, r3
 80156b4:	f3bf 8f6f 	isb	sy
 80156b8:	f3bf 8f4f 	dsb	sy
 80156bc:	603b      	str	r3, [r7, #0]
}
 80156be:	bf00      	nop
 80156c0:	e7fe      	b.n	80156c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80156c2:	4b09      	ldr	r3, [pc, #36]	; (80156e8 <prvSwitchTimerLists+0xc0>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d1b1      	bne.n	8015630 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80156cc:	4b06      	ldr	r3, [pc, #24]	; (80156e8 <prvSwitchTimerLists+0xc0>)
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80156d2:	4b06      	ldr	r3, [pc, #24]	; (80156ec <prvSwitchTimerLists+0xc4>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	4a04      	ldr	r2, [pc, #16]	; (80156e8 <prvSwitchTimerLists+0xc0>)
 80156d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80156da:	4a04      	ldr	r2, [pc, #16]	; (80156ec <prvSwitchTimerLists+0xc4>)
 80156dc:	697b      	ldr	r3, [r7, #20]
 80156de:	6013      	str	r3, [r2, #0]
}
 80156e0:	bf00      	nop
 80156e2:	3718      	adds	r7, #24
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	24001cf0 	.word	0x24001cf0
 80156ec:	24001cf4 	.word	0x24001cf4

080156f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b082      	sub	sp, #8
 80156f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80156f6:	f000 f985 	bl	8015a04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80156fa:	4b15      	ldr	r3, [pc, #84]	; (8015750 <prvCheckForValidListAndQueue+0x60>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d120      	bne.n	8015744 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015702:	4814      	ldr	r0, [pc, #80]	; (8015754 <prvCheckForValidListAndQueue+0x64>)
 8015704:	f7fd fdbe 	bl	8013284 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015708:	4813      	ldr	r0, [pc, #76]	; (8015758 <prvCheckForValidListAndQueue+0x68>)
 801570a:	f7fd fdbb 	bl	8013284 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801570e:	4b13      	ldr	r3, [pc, #76]	; (801575c <prvCheckForValidListAndQueue+0x6c>)
 8015710:	4a10      	ldr	r2, [pc, #64]	; (8015754 <prvCheckForValidListAndQueue+0x64>)
 8015712:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015714:	4b12      	ldr	r3, [pc, #72]	; (8015760 <prvCheckForValidListAndQueue+0x70>)
 8015716:	4a10      	ldr	r2, [pc, #64]	; (8015758 <prvCheckForValidListAndQueue+0x68>)
 8015718:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801571a:	2300      	movs	r3, #0
 801571c:	9300      	str	r3, [sp, #0]
 801571e:	4b11      	ldr	r3, [pc, #68]	; (8015764 <prvCheckForValidListAndQueue+0x74>)
 8015720:	4a11      	ldr	r2, [pc, #68]	; (8015768 <prvCheckForValidListAndQueue+0x78>)
 8015722:	2110      	movs	r1, #16
 8015724:	200a      	movs	r0, #10
 8015726:	f7fd fec9 	bl	80134bc <xQueueGenericCreateStatic>
 801572a:	4603      	mov	r3, r0
 801572c:	4a08      	ldr	r2, [pc, #32]	; (8015750 <prvCheckForValidListAndQueue+0x60>)
 801572e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015730:	4b07      	ldr	r3, [pc, #28]	; (8015750 <prvCheckForValidListAndQueue+0x60>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d005      	beq.n	8015744 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015738:	4b05      	ldr	r3, [pc, #20]	; (8015750 <prvCheckForValidListAndQueue+0x60>)
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	490b      	ldr	r1, [pc, #44]	; (801576c <prvCheckForValidListAndQueue+0x7c>)
 801573e:	4618      	mov	r0, r3
 8015740:	f7fe fb9c 	bl	8013e7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015744:	f000 f98e 	bl	8015a64 <vPortExitCritical>
}
 8015748:	bf00      	nop
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}
 801574e:	bf00      	nop
 8015750:	24001cf8 	.word	0x24001cf8
 8015754:	24001cc8 	.word	0x24001cc8
 8015758:	24001cdc 	.word	0x24001cdc
 801575c:	24001cf0 	.word	0x24001cf0
 8015760:	24001cf4 	.word	0x24001cf4
 8015764:	24001da4 	.word	0x24001da4
 8015768:	24001d04 	.word	0x24001d04
 801576c:	08016d3c 	.word	0x08016d3c

08015770 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015770:	b580      	push	{r7, lr}
 8015772:	b08a      	sub	sp, #40	; 0x28
 8015774:	af00      	add	r7, sp, #0
 8015776:	60f8      	str	r0, [r7, #12]
 8015778:	60b9      	str	r1, [r7, #8]
 801577a:	607a      	str	r2, [r7, #4]
 801577c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801577e:	f06f 0301 	mvn.w	r3, #1
 8015782:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015788:	68bb      	ldr	r3, [r7, #8]
 801578a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015790:	4b06      	ldr	r3, [pc, #24]	; (80157ac <xTimerPendFunctionCallFromISR+0x3c>)
 8015792:	6818      	ldr	r0, [r3, #0]
 8015794:	f107 0114 	add.w	r1, r7, #20
 8015798:	2300      	movs	r3, #0
 801579a:	683a      	ldr	r2, [r7, #0]
 801579c:	f7fe f862 	bl	8013864 <xQueueGenericSendFromISR>
 80157a0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80157a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80157a4:	4618      	mov	r0, r3
 80157a6:	3728      	adds	r7, #40	; 0x28
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	24001cf8 	.word	0x24001cf8

080157b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80157b0:	b480      	push	{r7}
 80157b2:	b085      	sub	sp, #20
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	60f8      	str	r0, [r7, #12]
 80157b8:	60b9      	str	r1, [r7, #8]
 80157ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	3b04      	subs	r3, #4
 80157c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80157c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	3b04      	subs	r3, #4
 80157ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	f023 0201 	bic.w	r2, r3, #1
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	3b04      	subs	r3, #4
 80157de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80157e0:	4a0c      	ldr	r2, [pc, #48]	; (8015814 <pxPortInitialiseStack+0x64>)
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	3b14      	subs	r3, #20
 80157ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80157ec:	687a      	ldr	r2, [r7, #4]
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	3b04      	subs	r3, #4
 80157f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	f06f 0202 	mvn.w	r2, #2
 80157fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	3b20      	subs	r3, #32
 8015804:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015806:	68fb      	ldr	r3, [r7, #12]
}
 8015808:	4618      	mov	r0, r3
 801580a:	3714      	adds	r7, #20
 801580c:	46bd      	mov	sp, r7
 801580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015812:	4770      	bx	lr
 8015814:	08015819 	.word	0x08015819

08015818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015818:	b480      	push	{r7}
 801581a:	b085      	sub	sp, #20
 801581c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801581e:	2300      	movs	r3, #0
 8015820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015822:	4b12      	ldr	r3, [pc, #72]	; (801586c <prvTaskExitError+0x54>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801582a:	d00a      	beq.n	8015842 <prvTaskExitError+0x2a>
	__asm volatile
 801582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015830:	f383 8811 	msr	BASEPRI, r3
 8015834:	f3bf 8f6f 	isb	sy
 8015838:	f3bf 8f4f 	dsb	sy
 801583c:	60fb      	str	r3, [r7, #12]
}
 801583e:	bf00      	nop
 8015840:	e7fe      	b.n	8015840 <prvTaskExitError+0x28>
	__asm volatile
 8015842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015846:	f383 8811 	msr	BASEPRI, r3
 801584a:	f3bf 8f6f 	isb	sy
 801584e:	f3bf 8f4f 	dsb	sy
 8015852:	60bb      	str	r3, [r7, #8]
}
 8015854:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015856:	bf00      	nop
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d0fc      	beq.n	8015858 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801585e:	bf00      	nop
 8015860:	bf00      	nop
 8015862:	3714      	adds	r7, #20
 8015864:	46bd      	mov	sp, r7
 8015866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586a:	4770      	bx	lr
 801586c:	240000a0 	.word	0x240000a0

08015870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015870:	4b07      	ldr	r3, [pc, #28]	; (8015890 <pxCurrentTCBConst2>)
 8015872:	6819      	ldr	r1, [r3, #0]
 8015874:	6808      	ldr	r0, [r1, #0]
 8015876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801587a:	f380 8809 	msr	PSP, r0
 801587e:	f3bf 8f6f 	isb	sy
 8015882:	f04f 0000 	mov.w	r0, #0
 8015886:	f380 8811 	msr	BASEPRI, r0
 801588a:	4770      	bx	lr
 801588c:	f3af 8000 	nop.w

08015890 <pxCurrentTCBConst2>:
 8015890:	240017c8 	.word	0x240017c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015894:	bf00      	nop
 8015896:	bf00      	nop

08015898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015898:	4808      	ldr	r0, [pc, #32]	; (80158bc <prvPortStartFirstTask+0x24>)
 801589a:	6800      	ldr	r0, [r0, #0]
 801589c:	6800      	ldr	r0, [r0, #0]
 801589e:	f380 8808 	msr	MSP, r0
 80158a2:	f04f 0000 	mov.w	r0, #0
 80158a6:	f380 8814 	msr	CONTROL, r0
 80158aa:	b662      	cpsie	i
 80158ac:	b661      	cpsie	f
 80158ae:	f3bf 8f4f 	dsb	sy
 80158b2:	f3bf 8f6f 	isb	sy
 80158b6:	df00      	svc	0
 80158b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80158ba:	bf00      	nop
 80158bc:	e000ed08 	.word	0xe000ed08

080158c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b086      	sub	sp, #24
 80158c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80158c6:	4b46      	ldr	r3, [pc, #280]	; (80159e0 <xPortStartScheduler+0x120>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	4a46      	ldr	r2, [pc, #280]	; (80159e4 <xPortStartScheduler+0x124>)
 80158cc:	4293      	cmp	r3, r2
 80158ce:	d10a      	bne.n	80158e6 <xPortStartScheduler+0x26>
	__asm volatile
 80158d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158d4:	f383 8811 	msr	BASEPRI, r3
 80158d8:	f3bf 8f6f 	isb	sy
 80158dc:	f3bf 8f4f 	dsb	sy
 80158e0:	613b      	str	r3, [r7, #16]
}
 80158e2:	bf00      	nop
 80158e4:	e7fe      	b.n	80158e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80158e6:	4b3e      	ldr	r3, [pc, #248]	; (80159e0 <xPortStartScheduler+0x120>)
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	4a3f      	ldr	r2, [pc, #252]	; (80159e8 <xPortStartScheduler+0x128>)
 80158ec:	4293      	cmp	r3, r2
 80158ee:	d10a      	bne.n	8015906 <xPortStartScheduler+0x46>
	__asm volatile
 80158f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158f4:	f383 8811 	msr	BASEPRI, r3
 80158f8:	f3bf 8f6f 	isb	sy
 80158fc:	f3bf 8f4f 	dsb	sy
 8015900:	60fb      	str	r3, [r7, #12]
}
 8015902:	bf00      	nop
 8015904:	e7fe      	b.n	8015904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015906:	4b39      	ldr	r3, [pc, #228]	; (80159ec <xPortStartScheduler+0x12c>)
 8015908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801590a:	697b      	ldr	r3, [r7, #20]
 801590c:	781b      	ldrb	r3, [r3, #0]
 801590e:	b2db      	uxtb	r3, r3
 8015910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015912:	697b      	ldr	r3, [r7, #20]
 8015914:	22ff      	movs	r2, #255	; 0xff
 8015916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015918:	697b      	ldr	r3, [r7, #20]
 801591a:	781b      	ldrb	r3, [r3, #0]
 801591c:	b2db      	uxtb	r3, r3
 801591e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015920:	78fb      	ldrb	r3, [r7, #3]
 8015922:	b2db      	uxtb	r3, r3
 8015924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015928:	b2da      	uxtb	r2, r3
 801592a:	4b31      	ldr	r3, [pc, #196]	; (80159f0 <xPortStartScheduler+0x130>)
 801592c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801592e:	4b31      	ldr	r3, [pc, #196]	; (80159f4 <xPortStartScheduler+0x134>)
 8015930:	2207      	movs	r2, #7
 8015932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015934:	e009      	b.n	801594a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015936:	4b2f      	ldr	r3, [pc, #188]	; (80159f4 <xPortStartScheduler+0x134>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	3b01      	subs	r3, #1
 801593c:	4a2d      	ldr	r2, [pc, #180]	; (80159f4 <xPortStartScheduler+0x134>)
 801593e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015940:	78fb      	ldrb	r3, [r7, #3]
 8015942:	b2db      	uxtb	r3, r3
 8015944:	005b      	lsls	r3, r3, #1
 8015946:	b2db      	uxtb	r3, r3
 8015948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801594a:	78fb      	ldrb	r3, [r7, #3]
 801594c:	b2db      	uxtb	r3, r3
 801594e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015952:	2b80      	cmp	r3, #128	; 0x80
 8015954:	d0ef      	beq.n	8015936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015956:	4b27      	ldr	r3, [pc, #156]	; (80159f4 <xPortStartScheduler+0x134>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	f1c3 0307 	rsb	r3, r3, #7
 801595e:	2b04      	cmp	r3, #4
 8015960:	d00a      	beq.n	8015978 <xPortStartScheduler+0xb8>
	__asm volatile
 8015962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015966:	f383 8811 	msr	BASEPRI, r3
 801596a:	f3bf 8f6f 	isb	sy
 801596e:	f3bf 8f4f 	dsb	sy
 8015972:	60bb      	str	r3, [r7, #8]
}
 8015974:	bf00      	nop
 8015976:	e7fe      	b.n	8015976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015978:	4b1e      	ldr	r3, [pc, #120]	; (80159f4 <xPortStartScheduler+0x134>)
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	021b      	lsls	r3, r3, #8
 801597e:	4a1d      	ldr	r2, [pc, #116]	; (80159f4 <xPortStartScheduler+0x134>)
 8015980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015982:	4b1c      	ldr	r3, [pc, #112]	; (80159f4 <xPortStartScheduler+0x134>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801598a:	4a1a      	ldr	r2, [pc, #104]	; (80159f4 <xPortStartScheduler+0x134>)
 801598c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	b2da      	uxtb	r2, r3
 8015992:	697b      	ldr	r3, [r7, #20]
 8015994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015996:	4b18      	ldr	r3, [pc, #96]	; (80159f8 <xPortStartScheduler+0x138>)
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	4a17      	ldr	r2, [pc, #92]	; (80159f8 <xPortStartScheduler+0x138>)
 801599c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80159a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80159a2:	4b15      	ldr	r3, [pc, #84]	; (80159f8 <xPortStartScheduler+0x138>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	4a14      	ldr	r2, [pc, #80]	; (80159f8 <xPortStartScheduler+0x138>)
 80159a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80159ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80159ae:	f000 f8dd 	bl	8015b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80159b2:	4b12      	ldr	r3, [pc, #72]	; (80159fc <xPortStartScheduler+0x13c>)
 80159b4:	2200      	movs	r2, #0
 80159b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80159b8:	f000 f8fc 	bl	8015bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80159bc:	4b10      	ldr	r3, [pc, #64]	; (8015a00 <xPortStartScheduler+0x140>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	4a0f      	ldr	r2, [pc, #60]	; (8015a00 <xPortStartScheduler+0x140>)
 80159c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80159c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80159c8:	f7ff ff66 	bl	8015898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80159cc:	f7fe ff80 	bl	80148d0 <vTaskSwitchContext>
	prvTaskExitError();
 80159d0:	f7ff ff22 	bl	8015818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80159d4:	2300      	movs	r3, #0
}
 80159d6:	4618      	mov	r0, r3
 80159d8:	3718      	adds	r7, #24
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd80      	pop	{r7, pc}
 80159de:	bf00      	nop
 80159e0:	e000ed00 	.word	0xe000ed00
 80159e4:	410fc271 	.word	0x410fc271
 80159e8:	410fc270 	.word	0x410fc270
 80159ec:	e000e400 	.word	0xe000e400
 80159f0:	24001df4 	.word	0x24001df4
 80159f4:	24001df8 	.word	0x24001df8
 80159f8:	e000ed20 	.word	0xe000ed20
 80159fc:	240000a0 	.word	0x240000a0
 8015a00:	e000ef34 	.word	0xe000ef34

08015a04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015a04:	b480      	push	{r7}
 8015a06:	b083      	sub	sp, #12
 8015a08:	af00      	add	r7, sp, #0
	__asm volatile
 8015a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a0e:	f383 8811 	msr	BASEPRI, r3
 8015a12:	f3bf 8f6f 	isb	sy
 8015a16:	f3bf 8f4f 	dsb	sy
 8015a1a:	607b      	str	r3, [r7, #4]
}
 8015a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015a1e:	4b0f      	ldr	r3, [pc, #60]	; (8015a5c <vPortEnterCritical+0x58>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	3301      	adds	r3, #1
 8015a24:	4a0d      	ldr	r2, [pc, #52]	; (8015a5c <vPortEnterCritical+0x58>)
 8015a26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015a28:	4b0c      	ldr	r3, [pc, #48]	; (8015a5c <vPortEnterCritical+0x58>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	2b01      	cmp	r3, #1
 8015a2e:	d10f      	bne.n	8015a50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015a30:	4b0b      	ldr	r3, [pc, #44]	; (8015a60 <vPortEnterCritical+0x5c>)
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	b2db      	uxtb	r3, r3
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d00a      	beq.n	8015a50 <vPortEnterCritical+0x4c>
	__asm volatile
 8015a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a3e:	f383 8811 	msr	BASEPRI, r3
 8015a42:	f3bf 8f6f 	isb	sy
 8015a46:	f3bf 8f4f 	dsb	sy
 8015a4a:	603b      	str	r3, [r7, #0]
}
 8015a4c:	bf00      	nop
 8015a4e:	e7fe      	b.n	8015a4e <vPortEnterCritical+0x4a>
	}
}
 8015a50:	bf00      	nop
 8015a52:	370c      	adds	r7, #12
 8015a54:	46bd      	mov	sp, r7
 8015a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5a:	4770      	bx	lr
 8015a5c:	240000a0 	.word	0x240000a0
 8015a60:	e000ed04 	.word	0xe000ed04

08015a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015a64:	b480      	push	{r7}
 8015a66:	b083      	sub	sp, #12
 8015a68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015a6a:	4b12      	ldr	r3, [pc, #72]	; (8015ab4 <vPortExitCritical+0x50>)
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d10a      	bne.n	8015a88 <vPortExitCritical+0x24>
	__asm volatile
 8015a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a76:	f383 8811 	msr	BASEPRI, r3
 8015a7a:	f3bf 8f6f 	isb	sy
 8015a7e:	f3bf 8f4f 	dsb	sy
 8015a82:	607b      	str	r3, [r7, #4]
}
 8015a84:	bf00      	nop
 8015a86:	e7fe      	b.n	8015a86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015a88:	4b0a      	ldr	r3, [pc, #40]	; (8015ab4 <vPortExitCritical+0x50>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	3b01      	subs	r3, #1
 8015a8e:	4a09      	ldr	r2, [pc, #36]	; (8015ab4 <vPortExitCritical+0x50>)
 8015a90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015a92:	4b08      	ldr	r3, [pc, #32]	; (8015ab4 <vPortExitCritical+0x50>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d105      	bne.n	8015aa6 <vPortExitCritical+0x42>
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015a9e:	683b      	ldr	r3, [r7, #0]
 8015aa0:	f383 8811 	msr	BASEPRI, r3
}
 8015aa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015aa6:	bf00      	nop
 8015aa8:	370c      	adds	r7, #12
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab0:	4770      	bx	lr
 8015ab2:	bf00      	nop
 8015ab4:	240000a0 	.word	0x240000a0
	...

08015ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015ac0:	f3ef 8009 	mrs	r0, PSP
 8015ac4:	f3bf 8f6f 	isb	sy
 8015ac8:	4b15      	ldr	r3, [pc, #84]	; (8015b20 <pxCurrentTCBConst>)
 8015aca:	681a      	ldr	r2, [r3, #0]
 8015acc:	f01e 0f10 	tst.w	lr, #16
 8015ad0:	bf08      	it	eq
 8015ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ada:	6010      	str	r0, [r2, #0]
 8015adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015ae4:	f380 8811 	msr	BASEPRI, r0
 8015ae8:	f3bf 8f4f 	dsb	sy
 8015aec:	f3bf 8f6f 	isb	sy
 8015af0:	f7fe feee 	bl	80148d0 <vTaskSwitchContext>
 8015af4:	f04f 0000 	mov.w	r0, #0
 8015af8:	f380 8811 	msr	BASEPRI, r0
 8015afc:	bc09      	pop	{r0, r3}
 8015afe:	6819      	ldr	r1, [r3, #0]
 8015b00:	6808      	ldr	r0, [r1, #0]
 8015b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b06:	f01e 0f10 	tst.w	lr, #16
 8015b0a:	bf08      	it	eq
 8015b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015b10:	f380 8809 	msr	PSP, r0
 8015b14:	f3bf 8f6f 	isb	sy
 8015b18:	4770      	bx	lr
 8015b1a:	bf00      	nop
 8015b1c:	f3af 8000 	nop.w

08015b20 <pxCurrentTCBConst>:
 8015b20:	240017c8 	.word	0x240017c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015b24:	bf00      	nop
 8015b26:	bf00      	nop

08015b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b082      	sub	sp, #8
 8015b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8015b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b32:	f383 8811 	msr	BASEPRI, r3
 8015b36:	f3bf 8f6f 	isb	sy
 8015b3a:	f3bf 8f4f 	dsb	sy
 8015b3e:	607b      	str	r3, [r7, #4]
}
 8015b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015b42:	f7fe fe0b 	bl	801475c <xTaskIncrementTick>
 8015b46:	4603      	mov	r3, r0
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d003      	beq.n	8015b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015b4c:	4b06      	ldr	r3, [pc, #24]	; (8015b68 <xPortSysTickHandler+0x40>)
 8015b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b52:	601a      	str	r2, [r3, #0]
 8015b54:	2300      	movs	r3, #0
 8015b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	f383 8811 	msr	BASEPRI, r3
}
 8015b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015b60:	bf00      	nop
 8015b62:	3708      	adds	r7, #8
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}
 8015b68:	e000ed04 	.word	0xe000ed04

08015b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015b6c:	b480      	push	{r7}
 8015b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015b70:	4b0b      	ldr	r3, [pc, #44]	; (8015ba0 <vPortSetupTimerInterrupt+0x34>)
 8015b72:	2200      	movs	r2, #0
 8015b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015b76:	4b0b      	ldr	r3, [pc, #44]	; (8015ba4 <vPortSetupTimerInterrupt+0x38>)
 8015b78:	2200      	movs	r2, #0
 8015b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015b7c:	4b0a      	ldr	r3, [pc, #40]	; (8015ba8 <vPortSetupTimerInterrupt+0x3c>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	4a0a      	ldr	r2, [pc, #40]	; (8015bac <vPortSetupTimerInterrupt+0x40>)
 8015b82:	fba2 2303 	umull	r2, r3, r2, r3
 8015b86:	099b      	lsrs	r3, r3, #6
 8015b88:	4a09      	ldr	r2, [pc, #36]	; (8015bb0 <vPortSetupTimerInterrupt+0x44>)
 8015b8a:	3b01      	subs	r3, #1
 8015b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015b8e:	4b04      	ldr	r3, [pc, #16]	; (8015ba0 <vPortSetupTimerInterrupt+0x34>)
 8015b90:	2207      	movs	r2, #7
 8015b92:	601a      	str	r2, [r3, #0]
}
 8015b94:	bf00      	nop
 8015b96:	46bd      	mov	sp, r7
 8015b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9c:	4770      	bx	lr
 8015b9e:	bf00      	nop
 8015ba0:	e000e010 	.word	0xe000e010
 8015ba4:	e000e018 	.word	0xe000e018
 8015ba8:	24000090 	.word	0x24000090
 8015bac:	10624dd3 	.word	0x10624dd3
 8015bb0:	e000e014 	.word	0xe000e014

08015bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015bc4 <vPortEnableVFP+0x10>
 8015bb8:	6801      	ldr	r1, [r0, #0]
 8015bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015bbe:	6001      	str	r1, [r0, #0]
 8015bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015bc2:	bf00      	nop
 8015bc4:	e000ed88 	.word	0xe000ed88

08015bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015bc8:	b480      	push	{r7}
 8015bca:	b085      	sub	sp, #20
 8015bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015bce:	f3ef 8305 	mrs	r3, IPSR
 8015bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	2b0f      	cmp	r3, #15
 8015bd8:	d914      	bls.n	8015c04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015bda:	4a17      	ldr	r2, [pc, #92]	; (8015c38 <vPortValidateInterruptPriority+0x70>)
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	4413      	add	r3, r2
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015be4:	4b15      	ldr	r3, [pc, #84]	; (8015c3c <vPortValidateInterruptPriority+0x74>)
 8015be6:	781b      	ldrb	r3, [r3, #0]
 8015be8:	7afa      	ldrb	r2, [r7, #11]
 8015bea:	429a      	cmp	r2, r3
 8015bec:	d20a      	bcs.n	8015c04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf2:	f383 8811 	msr	BASEPRI, r3
 8015bf6:	f3bf 8f6f 	isb	sy
 8015bfa:	f3bf 8f4f 	dsb	sy
 8015bfe:	607b      	str	r3, [r7, #4]
}
 8015c00:	bf00      	nop
 8015c02:	e7fe      	b.n	8015c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015c04:	4b0e      	ldr	r3, [pc, #56]	; (8015c40 <vPortValidateInterruptPriority+0x78>)
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015c0c:	4b0d      	ldr	r3, [pc, #52]	; (8015c44 <vPortValidateInterruptPriority+0x7c>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d90a      	bls.n	8015c2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c18:	f383 8811 	msr	BASEPRI, r3
 8015c1c:	f3bf 8f6f 	isb	sy
 8015c20:	f3bf 8f4f 	dsb	sy
 8015c24:	603b      	str	r3, [r7, #0]
}
 8015c26:	bf00      	nop
 8015c28:	e7fe      	b.n	8015c28 <vPortValidateInterruptPriority+0x60>
	}
 8015c2a:	bf00      	nop
 8015c2c:	3714      	adds	r7, #20
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c34:	4770      	bx	lr
 8015c36:	bf00      	nop
 8015c38:	e000e3f0 	.word	0xe000e3f0
 8015c3c:	24001df4 	.word	0x24001df4
 8015c40:	e000ed0c 	.word	0xe000ed0c
 8015c44:	24001df8 	.word	0x24001df8

08015c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b08a      	sub	sp, #40	; 0x28
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015c50:	2300      	movs	r3, #0
 8015c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015c54:	f7fe fcc6 	bl	80145e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015c58:	4b5b      	ldr	r3, [pc, #364]	; (8015dc8 <pvPortMalloc+0x180>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d101      	bne.n	8015c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015c60:	f000 f920 	bl	8015ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015c64:	4b59      	ldr	r3, [pc, #356]	; (8015dcc <pvPortMalloc+0x184>)
 8015c66:	681a      	ldr	r2, [r3, #0]
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	4013      	ands	r3, r2
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	f040 8093 	bne.w	8015d98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d01d      	beq.n	8015cb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015c78:	2208      	movs	r2, #8
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	4413      	add	r3, r2
 8015c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f003 0307 	and.w	r3, r3, #7
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d014      	beq.n	8015cb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f023 0307 	bic.w	r3, r3, #7
 8015c90:	3308      	adds	r3, #8
 8015c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f003 0307 	and.w	r3, r3, #7
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d00a      	beq.n	8015cb4 <pvPortMalloc+0x6c>
	__asm volatile
 8015c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ca2:	f383 8811 	msr	BASEPRI, r3
 8015ca6:	f3bf 8f6f 	isb	sy
 8015caa:	f3bf 8f4f 	dsb	sy
 8015cae:	617b      	str	r3, [r7, #20]
}
 8015cb0:	bf00      	nop
 8015cb2:	e7fe      	b.n	8015cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d06e      	beq.n	8015d98 <pvPortMalloc+0x150>
 8015cba:	4b45      	ldr	r3, [pc, #276]	; (8015dd0 <pvPortMalloc+0x188>)
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	687a      	ldr	r2, [r7, #4]
 8015cc0:	429a      	cmp	r2, r3
 8015cc2:	d869      	bhi.n	8015d98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015cc4:	4b43      	ldr	r3, [pc, #268]	; (8015dd4 <pvPortMalloc+0x18c>)
 8015cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015cc8:	4b42      	ldr	r3, [pc, #264]	; (8015dd4 <pvPortMalloc+0x18c>)
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015cce:	e004      	b.n	8015cda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	687a      	ldr	r2, [r7, #4]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	d903      	bls.n	8015cec <pvPortMalloc+0xa4>
 8015ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d1f1      	bne.n	8015cd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015cec:	4b36      	ldr	r3, [pc, #216]	; (8015dc8 <pvPortMalloc+0x180>)
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cf2:	429a      	cmp	r2, r3
 8015cf4:	d050      	beq.n	8015d98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015cf6:	6a3b      	ldr	r3, [r7, #32]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	2208      	movs	r2, #8
 8015cfc:	4413      	add	r3, r2
 8015cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d02:	681a      	ldr	r2, [r3, #0]
 8015d04:	6a3b      	ldr	r3, [r7, #32]
 8015d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d0a:	685a      	ldr	r2, [r3, #4]
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	1ad2      	subs	r2, r2, r3
 8015d10:	2308      	movs	r3, #8
 8015d12:	005b      	lsls	r3, r3, #1
 8015d14:	429a      	cmp	r2, r3
 8015d16:	d91f      	bls.n	8015d58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	4413      	add	r3, r2
 8015d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015d20:	69bb      	ldr	r3, [r7, #24]
 8015d22:	f003 0307 	and.w	r3, r3, #7
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d00a      	beq.n	8015d40 <pvPortMalloc+0xf8>
	__asm volatile
 8015d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d2e:	f383 8811 	msr	BASEPRI, r3
 8015d32:	f3bf 8f6f 	isb	sy
 8015d36:	f3bf 8f4f 	dsb	sy
 8015d3a:	613b      	str	r3, [r7, #16]
}
 8015d3c:	bf00      	nop
 8015d3e:	e7fe      	b.n	8015d3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d42:	685a      	ldr	r2, [r3, #4]
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	1ad2      	subs	r2, r2, r3
 8015d48:	69bb      	ldr	r3, [r7, #24]
 8015d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d4e:	687a      	ldr	r2, [r7, #4]
 8015d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015d52:	69b8      	ldr	r0, [r7, #24]
 8015d54:	f000 f908 	bl	8015f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015d58:	4b1d      	ldr	r3, [pc, #116]	; (8015dd0 <pvPortMalloc+0x188>)
 8015d5a:	681a      	ldr	r2, [r3, #0]
 8015d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	1ad3      	subs	r3, r2, r3
 8015d62:	4a1b      	ldr	r2, [pc, #108]	; (8015dd0 <pvPortMalloc+0x188>)
 8015d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015d66:	4b1a      	ldr	r3, [pc, #104]	; (8015dd0 <pvPortMalloc+0x188>)
 8015d68:	681a      	ldr	r2, [r3, #0]
 8015d6a:	4b1b      	ldr	r3, [pc, #108]	; (8015dd8 <pvPortMalloc+0x190>)
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	429a      	cmp	r2, r3
 8015d70:	d203      	bcs.n	8015d7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015d72:	4b17      	ldr	r3, [pc, #92]	; (8015dd0 <pvPortMalloc+0x188>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	4a18      	ldr	r2, [pc, #96]	; (8015dd8 <pvPortMalloc+0x190>)
 8015d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d7c:	685a      	ldr	r2, [r3, #4]
 8015d7e:	4b13      	ldr	r3, [pc, #76]	; (8015dcc <pvPortMalloc+0x184>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	431a      	orrs	r2, r3
 8015d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015d8e:	4b13      	ldr	r3, [pc, #76]	; (8015ddc <pvPortMalloc+0x194>)
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	3301      	adds	r3, #1
 8015d94:	4a11      	ldr	r2, [pc, #68]	; (8015ddc <pvPortMalloc+0x194>)
 8015d96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015d98:	f7fe fc32 	bl	8014600 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015d9c:	69fb      	ldr	r3, [r7, #28]
 8015d9e:	f003 0307 	and.w	r3, r3, #7
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d00a      	beq.n	8015dbc <pvPortMalloc+0x174>
	__asm volatile
 8015da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015daa:	f383 8811 	msr	BASEPRI, r3
 8015dae:	f3bf 8f6f 	isb	sy
 8015db2:	f3bf 8f4f 	dsb	sy
 8015db6:	60fb      	str	r3, [r7, #12]
}
 8015db8:	bf00      	nop
 8015dba:	e7fe      	b.n	8015dba <pvPortMalloc+0x172>
	return pvReturn;
 8015dbc:	69fb      	ldr	r3, [r7, #28]
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3728      	adds	r7, #40	; 0x28
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}
 8015dc6:	bf00      	nop
 8015dc8:	24005a04 	.word	0x24005a04
 8015dcc:	24005a18 	.word	0x24005a18
 8015dd0:	24005a08 	.word	0x24005a08
 8015dd4:	240059fc 	.word	0x240059fc
 8015dd8:	24005a0c 	.word	0x24005a0c
 8015ddc:	24005a10 	.word	0x24005a10

08015de0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b086      	sub	sp, #24
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d04d      	beq.n	8015e8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015df2:	2308      	movs	r3, #8
 8015df4:	425b      	negs	r3, r3
 8015df6:	697a      	ldr	r2, [r7, #20]
 8015df8:	4413      	add	r3, r2
 8015dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015dfc:	697b      	ldr	r3, [r7, #20]
 8015dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	685a      	ldr	r2, [r3, #4]
 8015e04:	4b24      	ldr	r3, [pc, #144]	; (8015e98 <vPortFree+0xb8>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	4013      	ands	r3, r2
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d10a      	bne.n	8015e24 <vPortFree+0x44>
	__asm volatile
 8015e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e12:	f383 8811 	msr	BASEPRI, r3
 8015e16:	f3bf 8f6f 	isb	sy
 8015e1a:	f3bf 8f4f 	dsb	sy
 8015e1e:	60fb      	str	r3, [r7, #12]
}
 8015e20:	bf00      	nop
 8015e22:	e7fe      	b.n	8015e22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015e24:	693b      	ldr	r3, [r7, #16]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d00a      	beq.n	8015e42 <vPortFree+0x62>
	__asm volatile
 8015e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e30:	f383 8811 	msr	BASEPRI, r3
 8015e34:	f3bf 8f6f 	isb	sy
 8015e38:	f3bf 8f4f 	dsb	sy
 8015e3c:	60bb      	str	r3, [r7, #8]
}
 8015e3e:	bf00      	nop
 8015e40:	e7fe      	b.n	8015e40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015e42:	693b      	ldr	r3, [r7, #16]
 8015e44:	685a      	ldr	r2, [r3, #4]
 8015e46:	4b14      	ldr	r3, [pc, #80]	; (8015e98 <vPortFree+0xb8>)
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	4013      	ands	r3, r2
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d01e      	beq.n	8015e8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015e50:	693b      	ldr	r3, [r7, #16]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d11a      	bne.n	8015e8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015e58:	693b      	ldr	r3, [r7, #16]
 8015e5a:	685a      	ldr	r2, [r3, #4]
 8015e5c:	4b0e      	ldr	r3, [pc, #56]	; (8015e98 <vPortFree+0xb8>)
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	43db      	mvns	r3, r3
 8015e62:	401a      	ands	r2, r3
 8015e64:	693b      	ldr	r3, [r7, #16]
 8015e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015e68:	f7fe fbbc 	bl	80145e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015e6c:	693b      	ldr	r3, [r7, #16]
 8015e6e:	685a      	ldr	r2, [r3, #4]
 8015e70:	4b0a      	ldr	r3, [pc, #40]	; (8015e9c <vPortFree+0xbc>)
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	4413      	add	r3, r2
 8015e76:	4a09      	ldr	r2, [pc, #36]	; (8015e9c <vPortFree+0xbc>)
 8015e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015e7a:	6938      	ldr	r0, [r7, #16]
 8015e7c:	f000 f874 	bl	8015f68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015e80:	4b07      	ldr	r3, [pc, #28]	; (8015ea0 <vPortFree+0xc0>)
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	3301      	adds	r3, #1
 8015e86:	4a06      	ldr	r2, [pc, #24]	; (8015ea0 <vPortFree+0xc0>)
 8015e88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015e8a:	f7fe fbb9 	bl	8014600 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015e8e:	bf00      	nop
 8015e90:	3718      	adds	r7, #24
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}
 8015e96:	bf00      	nop
 8015e98:	24005a18 	.word	0x24005a18
 8015e9c:	24005a08 	.word	0x24005a08
 8015ea0:	24005a14 	.word	0x24005a14

08015ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	b085      	sub	sp, #20
 8015ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015eaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015eb0:	4b27      	ldr	r3, [pc, #156]	; (8015f50 <prvHeapInit+0xac>)
 8015eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	f003 0307 	and.w	r3, r3, #7
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d00c      	beq.n	8015ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	3307      	adds	r3, #7
 8015ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	f023 0307 	bic.w	r3, r3, #7
 8015eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015ecc:	68ba      	ldr	r2, [r7, #8]
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	1ad3      	subs	r3, r2, r3
 8015ed2:	4a1f      	ldr	r2, [pc, #124]	; (8015f50 <prvHeapInit+0xac>)
 8015ed4:	4413      	add	r3, r2
 8015ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015edc:	4a1d      	ldr	r2, [pc, #116]	; (8015f54 <prvHeapInit+0xb0>)
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015ee2:	4b1c      	ldr	r3, [pc, #112]	; (8015f54 <prvHeapInit+0xb0>)
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	68ba      	ldr	r2, [r7, #8]
 8015eec:	4413      	add	r3, r2
 8015eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015ef0:	2208      	movs	r2, #8
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	1a9b      	subs	r3, r3, r2
 8015ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	f023 0307 	bic.w	r3, r3, #7
 8015efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	4a15      	ldr	r2, [pc, #84]	; (8015f58 <prvHeapInit+0xb4>)
 8015f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015f06:	4b14      	ldr	r3, [pc, #80]	; (8015f58 <prvHeapInit+0xb4>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015f0e:	4b12      	ldr	r3, [pc, #72]	; (8015f58 <prvHeapInit+0xb4>)
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	2200      	movs	r2, #0
 8015f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	68fa      	ldr	r2, [r7, #12]
 8015f1e:	1ad2      	subs	r2, r2, r3
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015f24:	4b0c      	ldr	r3, [pc, #48]	; (8015f58 <prvHeapInit+0xb4>)
 8015f26:	681a      	ldr	r2, [r3, #0]
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015f2c:	683b      	ldr	r3, [r7, #0]
 8015f2e:	685b      	ldr	r3, [r3, #4]
 8015f30:	4a0a      	ldr	r2, [pc, #40]	; (8015f5c <prvHeapInit+0xb8>)
 8015f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	685b      	ldr	r3, [r3, #4]
 8015f38:	4a09      	ldr	r2, [pc, #36]	; (8015f60 <prvHeapInit+0xbc>)
 8015f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015f3c:	4b09      	ldr	r3, [pc, #36]	; (8015f64 <prvHeapInit+0xc0>)
 8015f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015f42:	601a      	str	r2, [r3, #0]
}
 8015f44:	bf00      	nop
 8015f46:	3714      	adds	r7, #20
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4e:	4770      	bx	lr
 8015f50:	24001dfc 	.word	0x24001dfc
 8015f54:	240059fc 	.word	0x240059fc
 8015f58:	24005a04 	.word	0x24005a04
 8015f5c:	24005a0c 	.word	0x24005a0c
 8015f60:	24005a08 	.word	0x24005a08
 8015f64:	24005a18 	.word	0x24005a18

08015f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015f68:	b480      	push	{r7}
 8015f6a:	b085      	sub	sp, #20
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015f70:	4b28      	ldr	r3, [pc, #160]	; (8016014 <prvInsertBlockIntoFreeList+0xac>)
 8015f72:	60fb      	str	r3, [r7, #12]
 8015f74:	e002      	b.n	8015f7c <prvInsertBlockIntoFreeList+0x14>
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	60fb      	str	r3, [r7, #12]
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	687a      	ldr	r2, [r7, #4]
 8015f82:	429a      	cmp	r2, r3
 8015f84:	d8f7      	bhi.n	8015f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	685b      	ldr	r3, [r3, #4]
 8015f8e:	68ba      	ldr	r2, [r7, #8]
 8015f90:	4413      	add	r3, r2
 8015f92:	687a      	ldr	r2, [r7, #4]
 8015f94:	429a      	cmp	r2, r3
 8015f96:	d108      	bne.n	8015faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	685a      	ldr	r2, [r3, #4]
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	685b      	ldr	r3, [r3, #4]
 8015fa0:	441a      	add	r2, r3
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	68ba      	ldr	r2, [r7, #8]
 8015fb4:	441a      	add	r2, r3
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d118      	bne.n	8015ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	681a      	ldr	r2, [r3, #0]
 8015fc2:	4b15      	ldr	r3, [pc, #84]	; (8016018 <prvInsertBlockIntoFreeList+0xb0>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	429a      	cmp	r2, r3
 8015fc8:	d00d      	beq.n	8015fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	685a      	ldr	r2, [r3, #4]
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	441a      	add	r2, r3
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	681a      	ldr	r2, [r3, #0]
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	601a      	str	r2, [r3, #0]
 8015fe4:	e008      	b.n	8015ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015fe6:	4b0c      	ldr	r3, [pc, #48]	; (8016018 <prvInsertBlockIntoFreeList+0xb0>)
 8015fe8:	681a      	ldr	r2, [r3, #0]
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	601a      	str	r2, [r3, #0]
 8015fee:	e003      	b.n	8015ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	681a      	ldr	r2, [r3, #0]
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015ff8:	68fa      	ldr	r2, [r7, #12]
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	429a      	cmp	r2, r3
 8015ffe:	d002      	beq.n	8016006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	687a      	ldr	r2, [r7, #4]
 8016004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016006:	bf00      	nop
 8016008:	3714      	adds	r7, #20
 801600a:	46bd      	mov	sp, r7
 801600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016010:	4770      	bx	lr
 8016012:	bf00      	nop
 8016014:	240059fc 	.word	0x240059fc
 8016018:	24005a04 	.word	0x24005a04

0801601c <__errno>:
 801601c:	4b01      	ldr	r3, [pc, #4]	; (8016024 <__errno+0x8>)
 801601e:	6818      	ldr	r0, [r3, #0]
 8016020:	4770      	bx	lr
 8016022:	bf00      	nop
 8016024:	240000a4 	.word	0x240000a4

08016028 <__libc_init_array>:
 8016028:	b570      	push	{r4, r5, r6, lr}
 801602a:	4d0d      	ldr	r5, [pc, #52]	; (8016060 <__libc_init_array+0x38>)
 801602c:	4c0d      	ldr	r4, [pc, #52]	; (8016064 <__libc_init_array+0x3c>)
 801602e:	1b64      	subs	r4, r4, r5
 8016030:	10a4      	asrs	r4, r4, #2
 8016032:	2600      	movs	r6, #0
 8016034:	42a6      	cmp	r6, r4
 8016036:	d109      	bne.n	801604c <__libc_init_array+0x24>
 8016038:	4d0b      	ldr	r5, [pc, #44]	; (8016068 <__libc_init_array+0x40>)
 801603a:	4c0c      	ldr	r4, [pc, #48]	; (801606c <__libc_init_array+0x44>)
 801603c:	f000 fd3c 	bl	8016ab8 <_init>
 8016040:	1b64      	subs	r4, r4, r5
 8016042:	10a4      	asrs	r4, r4, #2
 8016044:	2600      	movs	r6, #0
 8016046:	42a6      	cmp	r6, r4
 8016048:	d105      	bne.n	8016056 <__libc_init_array+0x2e>
 801604a:	bd70      	pop	{r4, r5, r6, pc}
 801604c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016050:	4798      	blx	r3
 8016052:	3601      	adds	r6, #1
 8016054:	e7ee      	b.n	8016034 <__libc_init_array+0xc>
 8016056:	f855 3b04 	ldr.w	r3, [r5], #4
 801605a:	4798      	blx	r3
 801605c:	3601      	adds	r6, #1
 801605e:	e7f2      	b.n	8016046 <__libc_init_array+0x1e>
 8016060:	08016eec 	.word	0x08016eec
 8016064:	08016eec 	.word	0x08016eec
 8016068:	08016eec 	.word	0x08016eec
 801606c:	08016ef0 	.word	0x08016ef0

08016070 <malloc>:
 8016070:	4b02      	ldr	r3, [pc, #8]	; (801607c <malloc+0xc>)
 8016072:	4601      	mov	r1, r0
 8016074:	6818      	ldr	r0, [r3, #0]
 8016076:	f000 b88d 	b.w	8016194 <_malloc_r>
 801607a:	bf00      	nop
 801607c:	240000a4 	.word	0x240000a4

08016080 <free>:
 8016080:	4b02      	ldr	r3, [pc, #8]	; (801608c <free+0xc>)
 8016082:	4601      	mov	r1, r0
 8016084:	6818      	ldr	r0, [r3, #0]
 8016086:	f000 b819 	b.w	80160bc <_free_r>
 801608a:	bf00      	nop
 801608c:	240000a4 	.word	0x240000a4

08016090 <memcpy>:
 8016090:	440a      	add	r2, r1
 8016092:	4291      	cmp	r1, r2
 8016094:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016098:	d100      	bne.n	801609c <memcpy+0xc>
 801609a:	4770      	bx	lr
 801609c:	b510      	push	{r4, lr}
 801609e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80160a6:	4291      	cmp	r1, r2
 80160a8:	d1f9      	bne.n	801609e <memcpy+0xe>
 80160aa:	bd10      	pop	{r4, pc}

080160ac <memset>:
 80160ac:	4402      	add	r2, r0
 80160ae:	4603      	mov	r3, r0
 80160b0:	4293      	cmp	r3, r2
 80160b2:	d100      	bne.n	80160b6 <memset+0xa>
 80160b4:	4770      	bx	lr
 80160b6:	f803 1b01 	strb.w	r1, [r3], #1
 80160ba:	e7f9      	b.n	80160b0 <memset+0x4>

080160bc <_free_r>:
 80160bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80160be:	2900      	cmp	r1, #0
 80160c0:	d044      	beq.n	801614c <_free_r+0x90>
 80160c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160c6:	9001      	str	r0, [sp, #4]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	f1a1 0404 	sub.w	r4, r1, #4
 80160ce:	bfb8      	it	lt
 80160d0:	18e4      	addlt	r4, r4, r3
 80160d2:	f000 fc39 	bl	8016948 <__malloc_lock>
 80160d6:	4a1e      	ldr	r2, [pc, #120]	; (8016150 <_free_r+0x94>)
 80160d8:	9801      	ldr	r0, [sp, #4]
 80160da:	6813      	ldr	r3, [r2, #0]
 80160dc:	b933      	cbnz	r3, 80160ec <_free_r+0x30>
 80160de:	6063      	str	r3, [r4, #4]
 80160e0:	6014      	str	r4, [r2, #0]
 80160e2:	b003      	add	sp, #12
 80160e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80160e8:	f000 bc34 	b.w	8016954 <__malloc_unlock>
 80160ec:	42a3      	cmp	r3, r4
 80160ee:	d908      	bls.n	8016102 <_free_r+0x46>
 80160f0:	6825      	ldr	r5, [r4, #0]
 80160f2:	1961      	adds	r1, r4, r5
 80160f4:	428b      	cmp	r3, r1
 80160f6:	bf01      	itttt	eq
 80160f8:	6819      	ldreq	r1, [r3, #0]
 80160fa:	685b      	ldreq	r3, [r3, #4]
 80160fc:	1949      	addeq	r1, r1, r5
 80160fe:	6021      	streq	r1, [r4, #0]
 8016100:	e7ed      	b.n	80160de <_free_r+0x22>
 8016102:	461a      	mov	r2, r3
 8016104:	685b      	ldr	r3, [r3, #4]
 8016106:	b10b      	cbz	r3, 801610c <_free_r+0x50>
 8016108:	42a3      	cmp	r3, r4
 801610a:	d9fa      	bls.n	8016102 <_free_r+0x46>
 801610c:	6811      	ldr	r1, [r2, #0]
 801610e:	1855      	adds	r5, r2, r1
 8016110:	42a5      	cmp	r5, r4
 8016112:	d10b      	bne.n	801612c <_free_r+0x70>
 8016114:	6824      	ldr	r4, [r4, #0]
 8016116:	4421      	add	r1, r4
 8016118:	1854      	adds	r4, r2, r1
 801611a:	42a3      	cmp	r3, r4
 801611c:	6011      	str	r1, [r2, #0]
 801611e:	d1e0      	bne.n	80160e2 <_free_r+0x26>
 8016120:	681c      	ldr	r4, [r3, #0]
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	6053      	str	r3, [r2, #4]
 8016126:	4421      	add	r1, r4
 8016128:	6011      	str	r1, [r2, #0]
 801612a:	e7da      	b.n	80160e2 <_free_r+0x26>
 801612c:	d902      	bls.n	8016134 <_free_r+0x78>
 801612e:	230c      	movs	r3, #12
 8016130:	6003      	str	r3, [r0, #0]
 8016132:	e7d6      	b.n	80160e2 <_free_r+0x26>
 8016134:	6825      	ldr	r5, [r4, #0]
 8016136:	1961      	adds	r1, r4, r5
 8016138:	428b      	cmp	r3, r1
 801613a:	bf04      	itt	eq
 801613c:	6819      	ldreq	r1, [r3, #0]
 801613e:	685b      	ldreq	r3, [r3, #4]
 8016140:	6063      	str	r3, [r4, #4]
 8016142:	bf04      	itt	eq
 8016144:	1949      	addeq	r1, r1, r5
 8016146:	6021      	streq	r1, [r4, #0]
 8016148:	6054      	str	r4, [r2, #4]
 801614a:	e7ca      	b.n	80160e2 <_free_r+0x26>
 801614c:	b003      	add	sp, #12
 801614e:	bd30      	pop	{r4, r5, pc}
 8016150:	24005a1c 	.word	0x24005a1c

08016154 <sbrk_aligned>:
 8016154:	b570      	push	{r4, r5, r6, lr}
 8016156:	4e0e      	ldr	r6, [pc, #56]	; (8016190 <sbrk_aligned+0x3c>)
 8016158:	460c      	mov	r4, r1
 801615a:	6831      	ldr	r1, [r6, #0]
 801615c:	4605      	mov	r5, r0
 801615e:	b911      	cbnz	r1, 8016166 <sbrk_aligned+0x12>
 8016160:	f000 f902 	bl	8016368 <_sbrk_r>
 8016164:	6030      	str	r0, [r6, #0]
 8016166:	4621      	mov	r1, r4
 8016168:	4628      	mov	r0, r5
 801616a:	f000 f8fd 	bl	8016368 <_sbrk_r>
 801616e:	1c43      	adds	r3, r0, #1
 8016170:	d00a      	beq.n	8016188 <sbrk_aligned+0x34>
 8016172:	1cc4      	adds	r4, r0, #3
 8016174:	f024 0403 	bic.w	r4, r4, #3
 8016178:	42a0      	cmp	r0, r4
 801617a:	d007      	beq.n	801618c <sbrk_aligned+0x38>
 801617c:	1a21      	subs	r1, r4, r0
 801617e:	4628      	mov	r0, r5
 8016180:	f000 f8f2 	bl	8016368 <_sbrk_r>
 8016184:	3001      	adds	r0, #1
 8016186:	d101      	bne.n	801618c <sbrk_aligned+0x38>
 8016188:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801618c:	4620      	mov	r0, r4
 801618e:	bd70      	pop	{r4, r5, r6, pc}
 8016190:	24005a20 	.word	0x24005a20

08016194 <_malloc_r>:
 8016194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016198:	1ccd      	adds	r5, r1, #3
 801619a:	f025 0503 	bic.w	r5, r5, #3
 801619e:	3508      	adds	r5, #8
 80161a0:	2d0c      	cmp	r5, #12
 80161a2:	bf38      	it	cc
 80161a4:	250c      	movcc	r5, #12
 80161a6:	2d00      	cmp	r5, #0
 80161a8:	4607      	mov	r7, r0
 80161aa:	db01      	blt.n	80161b0 <_malloc_r+0x1c>
 80161ac:	42a9      	cmp	r1, r5
 80161ae:	d905      	bls.n	80161bc <_malloc_r+0x28>
 80161b0:	230c      	movs	r3, #12
 80161b2:	603b      	str	r3, [r7, #0]
 80161b4:	2600      	movs	r6, #0
 80161b6:	4630      	mov	r0, r6
 80161b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161bc:	4e2e      	ldr	r6, [pc, #184]	; (8016278 <_malloc_r+0xe4>)
 80161be:	f000 fbc3 	bl	8016948 <__malloc_lock>
 80161c2:	6833      	ldr	r3, [r6, #0]
 80161c4:	461c      	mov	r4, r3
 80161c6:	bb34      	cbnz	r4, 8016216 <_malloc_r+0x82>
 80161c8:	4629      	mov	r1, r5
 80161ca:	4638      	mov	r0, r7
 80161cc:	f7ff ffc2 	bl	8016154 <sbrk_aligned>
 80161d0:	1c43      	adds	r3, r0, #1
 80161d2:	4604      	mov	r4, r0
 80161d4:	d14d      	bne.n	8016272 <_malloc_r+0xde>
 80161d6:	6834      	ldr	r4, [r6, #0]
 80161d8:	4626      	mov	r6, r4
 80161da:	2e00      	cmp	r6, #0
 80161dc:	d140      	bne.n	8016260 <_malloc_r+0xcc>
 80161de:	6823      	ldr	r3, [r4, #0]
 80161e0:	4631      	mov	r1, r6
 80161e2:	4638      	mov	r0, r7
 80161e4:	eb04 0803 	add.w	r8, r4, r3
 80161e8:	f000 f8be 	bl	8016368 <_sbrk_r>
 80161ec:	4580      	cmp	r8, r0
 80161ee:	d13a      	bne.n	8016266 <_malloc_r+0xd2>
 80161f0:	6821      	ldr	r1, [r4, #0]
 80161f2:	3503      	adds	r5, #3
 80161f4:	1a6d      	subs	r5, r5, r1
 80161f6:	f025 0503 	bic.w	r5, r5, #3
 80161fa:	3508      	adds	r5, #8
 80161fc:	2d0c      	cmp	r5, #12
 80161fe:	bf38      	it	cc
 8016200:	250c      	movcc	r5, #12
 8016202:	4629      	mov	r1, r5
 8016204:	4638      	mov	r0, r7
 8016206:	f7ff ffa5 	bl	8016154 <sbrk_aligned>
 801620a:	3001      	adds	r0, #1
 801620c:	d02b      	beq.n	8016266 <_malloc_r+0xd2>
 801620e:	6823      	ldr	r3, [r4, #0]
 8016210:	442b      	add	r3, r5
 8016212:	6023      	str	r3, [r4, #0]
 8016214:	e00e      	b.n	8016234 <_malloc_r+0xa0>
 8016216:	6822      	ldr	r2, [r4, #0]
 8016218:	1b52      	subs	r2, r2, r5
 801621a:	d41e      	bmi.n	801625a <_malloc_r+0xc6>
 801621c:	2a0b      	cmp	r2, #11
 801621e:	d916      	bls.n	801624e <_malloc_r+0xba>
 8016220:	1961      	adds	r1, r4, r5
 8016222:	42a3      	cmp	r3, r4
 8016224:	6025      	str	r5, [r4, #0]
 8016226:	bf18      	it	ne
 8016228:	6059      	strne	r1, [r3, #4]
 801622a:	6863      	ldr	r3, [r4, #4]
 801622c:	bf08      	it	eq
 801622e:	6031      	streq	r1, [r6, #0]
 8016230:	5162      	str	r2, [r4, r5]
 8016232:	604b      	str	r3, [r1, #4]
 8016234:	4638      	mov	r0, r7
 8016236:	f104 060b 	add.w	r6, r4, #11
 801623a:	f000 fb8b 	bl	8016954 <__malloc_unlock>
 801623e:	f026 0607 	bic.w	r6, r6, #7
 8016242:	1d23      	adds	r3, r4, #4
 8016244:	1af2      	subs	r2, r6, r3
 8016246:	d0b6      	beq.n	80161b6 <_malloc_r+0x22>
 8016248:	1b9b      	subs	r3, r3, r6
 801624a:	50a3      	str	r3, [r4, r2]
 801624c:	e7b3      	b.n	80161b6 <_malloc_r+0x22>
 801624e:	6862      	ldr	r2, [r4, #4]
 8016250:	42a3      	cmp	r3, r4
 8016252:	bf0c      	ite	eq
 8016254:	6032      	streq	r2, [r6, #0]
 8016256:	605a      	strne	r2, [r3, #4]
 8016258:	e7ec      	b.n	8016234 <_malloc_r+0xa0>
 801625a:	4623      	mov	r3, r4
 801625c:	6864      	ldr	r4, [r4, #4]
 801625e:	e7b2      	b.n	80161c6 <_malloc_r+0x32>
 8016260:	4634      	mov	r4, r6
 8016262:	6876      	ldr	r6, [r6, #4]
 8016264:	e7b9      	b.n	80161da <_malloc_r+0x46>
 8016266:	230c      	movs	r3, #12
 8016268:	603b      	str	r3, [r7, #0]
 801626a:	4638      	mov	r0, r7
 801626c:	f000 fb72 	bl	8016954 <__malloc_unlock>
 8016270:	e7a1      	b.n	80161b6 <_malloc_r+0x22>
 8016272:	6025      	str	r5, [r4, #0]
 8016274:	e7de      	b.n	8016234 <_malloc_r+0xa0>
 8016276:	bf00      	nop
 8016278:	24005a1c 	.word	0x24005a1c

0801627c <_puts_r>:
 801627c:	b570      	push	{r4, r5, r6, lr}
 801627e:	460e      	mov	r6, r1
 8016280:	4605      	mov	r5, r0
 8016282:	b118      	cbz	r0, 801628c <_puts_r+0x10>
 8016284:	6983      	ldr	r3, [r0, #24]
 8016286:	b90b      	cbnz	r3, 801628c <_puts_r+0x10>
 8016288:	f000 fa58 	bl	801673c <__sinit>
 801628c:	69ab      	ldr	r3, [r5, #24]
 801628e:	68ac      	ldr	r4, [r5, #8]
 8016290:	b913      	cbnz	r3, 8016298 <_puts_r+0x1c>
 8016292:	4628      	mov	r0, r5
 8016294:	f000 fa52 	bl	801673c <__sinit>
 8016298:	4b2c      	ldr	r3, [pc, #176]	; (801634c <_puts_r+0xd0>)
 801629a:	429c      	cmp	r4, r3
 801629c:	d120      	bne.n	80162e0 <_puts_r+0x64>
 801629e:	686c      	ldr	r4, [r5, #4]
 80162a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80162a2:	07db      	lsls	r3, r3, #31
 80162a4:	d405      	bmi.n	80162b2 <_puts_r+0x36>
 80162a6:	89a3      	ldrh	r3, [r4, #12]
 80162a8:	0598      	lsls	r0, r3, #22
 80162aa:	d402      	bmi.n	80162b2 <_puts_r+0x36>
 80162ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162ae:	f000 fae3 	bl	8016878 <__retarget_lock_acquire_recursive>
 80162b2:	89a3      	ldrh	r3, [r4, #12]
 80162b4:	0719      	lsls	r1, r3, #28
 80162b6:	d51d      	bpl.n	80162f4 <_puts_r+0x78>
 80162b8:	6923      	ldr	r3, [r4, #16]
 80162ba:	b1db      	cbz	r3, 80162f4 <_puts_r+0x78>
 80162bc:	3e01      	subs	r6, #1
 80162be:	68a3      	ldr	r3, [r4, #8]
 80162c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80162c4:	3b01      	subs	r3, #1
 80162c6:	60a3      	str	r3, [r4, #8]
 80162c8:	bb39      	cbnz	r1, 801631a <_puts_r+0x9e>
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	da38      	bge.n	8016340 <_puts_r+0xc4>
 80162ce:	4622      	mov	r2, r4
 80162d0:	210a      	movs	r1, #10
 80162d2:	4628      	mov	r0, r5
 80162d4:	f000 f858 	bl	8016388 <__swbuf_r>
 80162d8:	3001      	adds	r0, #1
 80162da:	d011      	beq.n	8016300 <_puts_r+0x84>
 80162dc:	250a      	movs	r5, #10
 80162de:	e011      	b.n	8016304 <_puts_r+0x88>
 80162e0:	4b1b      	ldr	r3, [pc, #108]	; (8016350 <_puts_r+0xd4>)
 80162e2:	429c      	cmp	r4, r3
 80162e4:	d101      	bne.n	80162ea <_puts_r+0x6e>
 80162e6:	68ac      	ldr	r4, [r5, #8]
 80162e8:	e7da      	b.n	80162a0 <_puts_r+0x24>
 80162ea:	4b1a      	ldr	r3, [pc, #104]	; (8016354 <_puts_r+0xd8>)
 80162ec:	429c      	cmp	r4, r3
 80162ee:	bf08      	it	eq
 80162f0:	68ec      	ldreq	r4, [r5, #12]
 80162f2:	e7d5      	b.n	80162a0 <_puts_r+0x24>
 80162f4:	4621      	mov	r1, r4
 80162f6:	4628      	mov	r0, r5
 80162f8:	f000 f898 	bl	801642c <__swsetup_r>
 80162fc:	2800      	cmp	r0, #0
 80162fe:	d0dd      	beq.n	80162bc <_puts_r+0x40>
 8016300:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016306:	07da      	lsls	r2, r3, #31
 8016308:	d405      	bmi.n	8016316 <_puts_r+0x9a>
 801630a:	89a3      	ldrh	r3, [r4, #12]
 801630c:	059b      	lsls	r3, r3, #22
 801630e:	d402      	bmi.n	8016316 <_puts_r+0x9a>
 8016310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016312:	f000 fab2 	bl	801687a <__retarget_lock_release_recursive>
 8016316:	4628      	mov	r0, r5
 8016318:	bd70      	pop	{r4, r5, r6, pc}
 801631a:	2b00      	cmp	r3, #0
 801631c:	da04      	bge.n	8016328 <_puts_r+0xac>
 801631e:	69a2      	ldr	r2, [r4, #24]
 8016320:	429a      	cmp	r2, r3
 8016322:	dc06      	bgt.n	8016332 <_puts_r+0xb6>
 8016324:	290a      	cmp	r1, #10
 8016326:	d004      	beq.n	8016332 <_puts_r+0xb6>
 8016328:	6823      	ldr	r3, [r4, #0]
 801632a:	1c5a      	adds	r2, r3, #1
 801632c:	6022      	str	r2, [r4, #0]
 801632e:	7019      	strb	r1, [r3, #0]
 8016330:	e7c5      	b.n	80162be <_puts_r+0x42>
 8016332:	4622      	mov	r2, r4
 8016334:	4628      	mov	r0, r5
 8016336:	f000 f827 	bl	8016388 <__swbuf_r>
 801633a:	3001      	adds	r0, #1
 801633c:	d1bf      	bne.n	80162be <_puts_r+0x42>
 801633e:	e7df      	b.n	8016300 <_puts_r+0x84>
 8016340:	6823      	ldr	r3, [r4, #0]
 8016342:	250a      	movs	r5, #10
 8016344:	1c5a      	adds	r2, r3, #1
 8016346:	6022      	str	r2, [r4, #0]
 8016348:	701d      	strb	r5, [r3, #0]
 801634a:	e7db      	b.n	8016304 <_puts_r+0x88>
 801634c:	08016ea4 	.word	0x08016ea4
 8016350:	08016ec4 	.word	0x08016ec4
 8016354:	08016e84 	.word	0x08016e84

08016358 <puts>:
 8016358:	4b02      	ldr	r3, [pc, #8]	; (8016364 <puts+0xc>)
 801635a:	4601      	mov	r1, r0
 801635c:	6818      	ldr	r0, [r3, #0]
 801635e:	f7ff bf8d 	b.w	801627c <_puts_r>
 8016362:	bf00      	nop
 8016364:	240000a4 	.word	0x240000a4

08016368 <_sbrk_r>:
 8016368:	b538      	push	{r3, r4, r5, lr}
 801636a:	4d06      	ldr	r5, [pc, #24]	; (8016384 <_sbrk_r+0x1c>)
 801636c:	2300      	movs	r3, #0
 801636e:	4604      	mov	r4, r0
 8016370:	4608      	mov	r0, r1
 8016372:	602b      	str	r3, [r5, #0]
 8016374:	f7ed fa06 	bl	8003784 <_sbrk>
 8016378:	1c43      	adds	r3, r0, #1
 801637a:	d102      	bne.n	8016382 <_sbrk_r+0x1a>
 801637c:	682b      	ldr	r3, [r5, #0]
 801637e:	b103      	cbz	r3, 8016382 <_sbrk_r+0x1a>
 8016380:	6023      	str	r3, [r4, #0]
 8016382:	bd38      	pop	{r3, r4, r5, pc}
 8016384:	24005a28 	.word	0x24005a28

08016388 <__swbuf_r>:
 8016388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801638a:	460e      	mov	r6, r1
 801638c:	4614      	mov	r4, r2
 801638e:	4605      	mov	r5, r0
 8016390:	b118      	cbz	r0, 801639a <__swbuf_r+0x12>
 8016392:	6983      	ldr	r3, [r0, #24]
 8016394:	b90b      	cbnz	r3, 801639a <__swbuf_r+0x12>
 8016396:	f000 f9d1 	bl	801673c <__sinit>
 801639a:	4b21      	ldr	r3, [pc, #132]	; (8016420 <__swbuf_r+0x98>)
 801639c:	429c      	cmp	r4, r3
 801639e:	d12b      	bne.n	80163f8 <__swbuf_r+0x70>
 80163a0:	686c      	ldr	r4, [r5, #4]
 80163a2:	69a3      	ldr	r3, [r4, #24]
 80163a4:	60a3      	str	r3, [r4, #8]
 80163a6:	89a3      	ldrh	r3, [r4, #12]
 80163a8:	071a      	lsls	r2, r3, #28
 80163aa:	d52f      	bpl.n	801640c <__swbuf_r+0x84>
 80163ac:	6923      	ldr	r3, [r4, #16]
 80163ae:	b36b      	cbz	r3, 801640c <__swbuf_r+0x84>
 80163b0:	6923      	ldr	r3, [r4, #16]
 80163b2:	6820      	ldr	r0, [r4, #0]
 80163b4:	1ac0      	subs	r0, r0, r3
 80163b6:	6963      	ldr	r3, [r4, #20]
 80163b8:	b2f6      	uxtb	r6, r6
 80163ba:	4283      	cmp	r3, r0
 80163bc:	4637      	mov	r7, r6
 80163be:	dc04      	bgt.n	80163ca <__swbuf_r+0x42>
 80163c0:	4621      	mov	r1, r4
 80163c2:	4628      	mov	r0, r5
 80163c4:	f000 f926 	bl	8016614 <_fflush_r>
 80163c8:	bb30      	cbnz	r0, 8016418 <__swbuf_r+0x90>
 80163ca:	68a3      	ldr	r3, [r4, #8]
 80163cc:	3b01      	subs	r3, #1
 80163ce:	60a3      	str	r3, [r4, #8]
 80163d0:	6823      	ldr	r3, [r4, #0]
 80163d2:	1c5a      	adds	r2, r3, #1
 80163d4:	6022      	str	r2, [r4, #0]
 80163d6:	701e      	strb	r6, [r3, #0]
 80163d8:	6963      	ldr	r3, [r4, #20]
 80163da:	3001      	adds	r0, #1
 80163dc:	4283      	cmp	r3, r0
 80163de:	d004      	beq.n	80163ea <__swbuf_r+0x62>
 80163e0:	89a3      	ldrh	r3, [r4, #12]
 80163e2:	07db      	lsls	r3, r3, #31
 80163e4:	d506      	bpl.n	80163f4 <__swbuf_r+0x6c>
 80163e6:	2e0a      	cmp	r6, #10
 80163e8:	d104      	bne.n	80163f4 <__swbuf_r+0x6c>
 80163ea:	4621      	mov	r1, r4
 80163ec:	4628      	mov	r0, r5
 80163ee:	f000 f911 	bl	8016614 <_fflush_r>
 80163f2:	b988      	cbnz	r0, 8016418 <__swbuf_r+0x90>
 80163f4:	4638      	mov	r0, r7
 80163f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163f8:	4b0a      	ldr	r3, [pc, #40]	; (8016424 <__swbuf_r+0x9c>)
 80163fa:	429c      	cmp	r4, r3
 80163fc:	d101      	bne.n	8016402 <__swbuf_r+0x7a>
 80163fe:	68ac      	ldr	r4, [r5, #8]
 8016400:	e7cf      	b.n	80163a2 <__swbuf_r+0x1a>
 8016402:	4b09      	ldr	r3, [pc, #36]	; (8016428 <__swbuf_r+0xa0>)
 8016404:	429c      	cmp	r4, r3
 8016406:	bf08      	it	eq
 8016408:	68ec      	ldreq	r4, [r5, #12]
 801640a:	e7ca      	b.n	80163a2 <__swbuf_r+0x1a>
 801640c:	4621      	mov	r1, r4
 801640e:	4628      	mov	r0, r5
 8016410:	f000 f80c 	bl	801642c <__swsetup_r>
 8016414:	2800      	cmp	r0, #0
 8016416:	d0cb      	beq.n	80163b0 <__swbuf_r+0x28>
 8016418:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801641c:	e7ea      	b.n	80163f4 <__swbuf_r+0x6c>
 801641e:	bf00      	nop
 8016420:	08016ea4 	.word	0x08016ea4
 8016424:	08016ec4 	.word	0x08016ec4
 8016428:	08016e84 	.word	0x08016e84

0801642c <__swsetup_r>:
 801642c:	4b32      	ldr	r3, [pc, #200]	; (80164f8 <__swsetup_r+0xcc>)
 801642e:	b570      	push	{r4, r5, r6, lr}
 8016430:	681d      	ldr	r5, [r3, #0]
 8016432:	4606      	mov	r6, r0
 8016434:	460c      	mov	r4, r1
 8016436:	b125      	cbz	r5, 8016442 <__swsetup_r+0x16>
 8016438:	69ab      	ldr	r3, [r5, #24]
 801643a:	b913      	cbnz	r3, 8016442 <__swsetup_r+0x16>
 801643c:	4628      	mov	r0, r5
 801643e:	f000 f97d 	bl	801673c <__sinit>
 8016442:	4b2e      	ldr	r3, [pc, #184]	; (80164fc <__swsetup_r+0xd0>)
 8016444:	429c      	cmp	r4, r3
 8016446:	d10f      	bne.n	8016468 <__swsetup_r+0x3c>
 8016448:	686c      	ldr	r4, [r5, #4]
 801644a:	89a3      	ldrh	r3, [r4, #12]
 801644c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016450:	0719      	lsls	r1, r3, #28
 8016452:	d42c      	bmi.n	80164ae <__swsetup_r+0x82>
 8016454:	06dd      	lsls	r5, r3, #27
 8016456:	d411      	bmi.n	801647c <__swsetup_r+0x50>
 8016458:	2309      	movs	r3, #9
 801645a:	6033      	str	r3, [r6, #0]
 801645c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016460:	81a3      	strh	r3, [r4, #12]
 8016462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016466:	e03e      	b.n	80164e6 <__swsetup_r+0xba>
 8016468:	4b25      	ldr	r3, [pc, #148]	; (8016500 <__swsetup_r+0xd4>)
 801646a:	429c      	cmp	r4, r3
 801646c:	d101      	bne.n	8016472 <__swsetup_r+0x46>
 801646e:	68ac      	ldr	r4, [r5, #8]
 8016470:	e7eb      	b.n	801644a <__swsetup_r+0x1e>
 8016472:	4b24      	ldr	r3, [pc, #144]	; (8016504 <__swsetup_r+0xd8>)
 8016474:	429c      	cmp	r4, r3
 8016476:	bf08      	it	eq
 8016478:	68ec      	ldreq	r4, [r5, #12]
 801647a:	e7e6      	b.n	801644a <__swsetup_r+0x1e>
 801647c:	0758      	lsls	r0, r3, #29
 801647e:	d512      	bpl.n	80164a6 <__swsetup_r+0x7a>
 8016480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016482:	b141      	cbz	r1, 8016496 <__swsetup_r+0x6a>
 8016484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016488:	4299      	cmp	r1, r3
 801648a:	d002      	beq.n	8016492 <__swsetup_r+0x66>
 801648c:	4630      	mov	r0, r6
 801648e:	f7ff fe15 	bl	80160bc <_free_r>
 8016492:	2300      	movs	r3, #0
 8016494:	6363      	str	r3, [r4, #52]	; 0x34
 8016496:	89a3      	ldrh	r3, [r4, #12]
 8016498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801649c:	81a3      	strh	r3, [r4, #12]
 801649e:	2300      	movs	r3, #0
 80164a0:	6063      	str	r3, [r4, #4]
 80164a2:	6923      	ldr	r3, [r4, #16]
 80164a4:	6023      	str	r3, [r4, #0]
 80164a6:	89a3      	ldrh	r3, [r4, #12]
 80164a8:	f043 0308 	orr.w	r3, r3, #8
 80164ac:	81a3      	strh	r3, [r4, #12]
 80164ae:	6923      	ldr	r3, [r4, #16]
 80164b0:	b94b      	cbnz	r3, 80164c6 <__swsetup_r+0x9a>
 80164b2:	89a3      	ldrh	r3, [r4, #12]
 80164b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80164b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164bc:	d003      	beq.n	80164c6 <__swsetup_r+0x9a>
 80164be:	4621      	mov	r1, r4
 80164c0:	4630      	mov	r0, r6
 80164c2:	f000 fa01 	bl	80168c8 <__smakebuf_r>
 80164c6:	89a0      	ldrh	r0, [r4, #12]
 80164c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80164cc:	f010 0301 	ands.w	r3, r0, #1
 80164d0:	d00a      	beq.n	80164e8 <__swsetup_r+0xbc>
 80164d2:	2300      	movs	r3, #0
 80164d4:	60a3      	str	r3, [r4, #8]
 80164d6:	6963      	ldr	r3, [r4, #20]
 80164d8:	425b      	negs	r3, r3
 80164da:	61a3      	str	r3, [r4, #24]
 80164dc:	6923      	ldr	r3, [r4, #16]
 80164de:	b943      	cbnz	r3, 80164f2 <__swsetup_r+0xc6>
 80164e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80164e4:	d1ba      	bne.n	801645c <__swsetup_r+0x30>
 80164e6:	bd70      	pop	{r4, r5, r6, pc}
 80164e8:	0781      	lsls	r1, r0, #30
 80164ea:	bf58      	it	pl
 80164ec:	6963      	ldrpl	r3, [r4, #20]
 80164ee:	60a3      	str	r3, [r4, #8]
 80164f0:	e7f4      	b.n	80164dc <__swsetup_r+0xb0>
 80164f2:	2000      	movs	r0, #0
 80164f4:	e7f7      	b.n	80164e6 <__swsetup_r+0xba>
 80164f6:	bf00      	nop
 80164f8:	240000a4 	.word	0x240000a4
 80164fc:	08016ea4 	.word	0x08016ea4
 8016500:	08016ec4 	.word	0x08016ec4
 8016504:	08016e84 	.word	0x08016e84

08016508 <__sflush_r>:
 8016508:	898a      	ldrh	r2, [r1, #12]
 801650a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801650e:	4605      	mov	r5, r0
 8016510:	0710      	lsls	r0, r2, #28
 8016512:	460c      	mov	r4, r1
 8016514:	d458      	bmi.n	80165c8 <__sflush_r+0xc0>
 8016516:	684b      	ldr	r3, [r1, #4]
 8016518:	2b00      	cmp	r3, #0
 801651a:	dc05      	bgt.n	8016528 <__sflush_r+0x20>
 801651c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801651e:	2b00      	cmp	r3, #0
 8016520:	dc02      	bgt.n	8016528 <__sflush_r+0x20>
 8016522:	2000      	movs	r0, #0
 8016524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801652a:	2e00      	cmp	r6, #0
 801652c:	d0f9      	beq.n	8016522 <__sflush_r+0x1a>
 801652e:	2300      	movs	r3, #0
 8016530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016534:	682f      	ldr	r7, [r5, #0]
 8016536:	602b      	str	r3, [r5, #0]
 8016538:	d032      	beq.n	80165a0 <__sflush_r+0x98>
 801653a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801653c:	89a3      	ldrh	r3, [r4, #12]
 801653e:	075a      	lsls	r2, r3, #29
 8016540:	d505      	bpl.n	801654e <__sflush_r+0x46>
 8016542:	6863      	ldr	r3, [r4, #4]
 8016544:	1ac0      	subs	r0, r0, r3
 8016546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016548:	b10b      	cbz	r3, 801654e <__sflush_r+0x46>
 801654a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801654c:	1ac0      	subs	r0, r0, r3
 801654e:	2300      	movs	r3, #0
 8016550:	4602      	mov	r2, r0
 8016552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016554:	6a21      	ldr	r1, [r4, #32]
 8016556:	4628      	mov	r0, r5
 8016558:	47b0      	blx	r6
 801655a:	1c43      	adds	r3, r0, #1
 801655c:	89a3      	ldrh	r3, [r4, #12]
 801655e:	d106      	bne.n	801656e <__sflush_r+0x66>
 8016560:	6829      	ldr	r1, [r5, #0]
 8016562:	291d      	cmp	r1, #29
 8016564:	d82c      	bhi.n	80165c0 <__sflush_r+0xb8>
 8016566:	4a2a      	ldr	r2, [pc, #168]	; (8016610 <__sflush_r+0x108>)
 8016568:	40ca      	lsrs	r2, r1
 801656a:	07d6      	lsls	r6, r2, #31
 801656c:	d528      	bpl.n	80165c0 <__sflush_r+0xb8>
 801656e:	2200      	movs	r2, #0
 8016570:	6062      	str	r2, [r4, #4]
 8016572:	04d9      	lsls	r1, r3, #19
 8016574:	6922      	ldr	r2, [r4, #16]
 8016576:	6022      	str	r2, [r4, #0]
 8016578:	d504      	bpl.n	8016584 <__sflush_r+0x7c>
 801657a:	1c42      	adds	r2, r0, #1
 801657c:	d101      	bne.n	8016582 <__sflush_r+0x7a>
 801657e:	682b      	ldr	r3, [r5, #0]
 8016580:	b903      	cbnz	r3, 8016584 <__sflush_r+0x7c>
 8016582:	6560      	str	r0, [r4, #84]	; 0x54
 8016584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016586:	602f      	str	r7, [r5, #0]
 8016588:	2900      	cmp	r1, #0
 801658a:	d0ca      	beq.n	8016522 <__sflush_r+0x1a>
 801658c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016590:	4299      	cmp	r1, r3
 8016592:	d002      	beq.n	801659a <__sflush_r+0x92>
 8016594:	4628      	mov	r0, r5
 8016596:	f7ff fd91 	bl	80160bc <_free_r>
 801659a:	2000      	movs	r0, #0
 801659c:	6360      	str	r0, [r4, #52]	; 0x34
 801659e:	e7c1      	b.n	8016524 <__sflush_r+0x1c>
 80165a0:	6a21      	ldr	r1, [r4, #32]
 80165a2:	2301      	movs	r3, #1
 80165a4:	4628      	mov	r0, r5
 80165a6:	47b0      	blx	r6
 80165a8:	1c41      	adds	r1, r0, #1
 80165aa:	d1c7      	bne.n	801653c <__sflush_r+0x34>
 80165ac:	682b      	ldr	r3, [r5, #0]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d0c4      	beq.n	801653c <__sflush_r+0x34>
 80165b2:	2b1d      	cmp	r3, #29
 80165b4:	d001      	beq.n	80165ba <__sflush_r+0xb2>
 80165b6:	2b16      	cmp	r3, #22
 80165b8:	d101      	bne.n	80165be <__sflush_r+0xb6>
 80165ba:	602f      	str	r7, [r5, #0]
 80165bc:	e7b1      	b.n	8016522 <__sflush_r+0x1a>
 80165be:	89a3      	ldrh	r3, [r4, #12]
 80165c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165c4:	81a3      	strh	r3, [r4, #12]
 80165c6:	e7ad      	b.n	8016524 <__sflush_r+0x1c>
 80165c8:	690f      	ldr	r7, [r1, #16]
 80165ca:	2f00      	cmp	r7, #0
 80165cc:	d0a9      	beq.n	8016522 <__sflush_r+0x1a>
 80165ce:	0793      	lsls	r3, r2, #30
 80165d0:	680e      	ldr	r6, [r1, #0]
 80165d2:	bf08      	it	eq
 80165d4:	694b      	ldreq	r3, [r1, #20]
 80165d6:	600f      	str	r7, [r1, #0]
 80165d8:	bf18      	it	ne
 80165da:	2300      	movne	r3, #0
 80165dc:	eba6 0807 	sub.w	r8, r6, r7
 80165e0:	608b      	str	r3, [r1, #8]
 80165e2:	f1b8 0f00 	cmp.w	r8, #0
 80165e6:	dd9c      	ble.n	8016522 <__sflush_r+0x1a>
 80165e8:	6a21      	ldr	r1, [r4, #32]
 80165ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80165ec:	4643      	mov	r3, r8
 80165ee:	463a      	mov	r2, r7
 80165f0:	4628      	mov	r0, r5
 80165f2:	47b0      	blx	r6
 80165f4:	2800      	cmp	r0, #0
 80165f6:	dc06      	bgt.n	8016606 <__sflush_r+0xfe>
 80165f8:	89a3      	ldrh	r3, [r4, #12]
 80165fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165fe:	81a3      	strh	r3, [r4, #12]
 8016600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016604:	e78e      	b.n	8016524 <__sflush_r+0x1c>
 8016606:	4407      	add	r7, r0
 8016608:	eba8 0800 	sub.w	r8, r8, r0
 801660c:	e7e9      	b.n	80165e2 <__sflush_r+0xda>
 801660e:	bf00      	nop
 8016610:	20400001 	.word	0x20400001

08016614 <_fflush_r>:
 8016614:	b538      	push	{r3, r4, r5, lr}
 8016616:	690b      	ldr	r3, [r1, #16]
 8016618:	4605      	mov	r5, r0
 801661a:	460c      	mov	r4, r1
 801661c:	b913      	cbnz	r3, 8016624 <_fflush_r+0x10>
 801661e:	2500      	movs	r5, #0
 8016620:	4628      	mov	r0, r5
 8016622:	bd38      	pop	{r3, r4, r5, pc}
 8016624:	b118      	cbz	r0, 801662e <_fflush_r+0x1a>
 8016626:	6983      	ldr	r3, [r0, #24]
 8016628:	b90b      	cbnz	r3, 801662e <_fflush_r+0x1a>
 801662a:	f000 f887 	bl	801673c <__sinit>
 801662e:	4b14      	ldr	r3, [pc, #80]	; (8016680 <_fflush_r+0x6c>)
 8016630:	429c      	cmp	r4, r3
 8016632:	d11b      	bne.n	801666c <_fflush_r+0x58>
 8016634:	686c      	ldr	r4, [r5, #4]
 8016636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d0ef      	beq.n	801661e <_fflush_r+0xa>
 801663e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016640:	07d0      	lsls	r0, r2, #31
 8016642:	d404      	bmi.n	801664e <_fflush_r+0x3a>
 8016644:	0599      	lsls	r1, r3, #22
 8016646:	d402      	bmi.n	801664e <_fflush_r+0x3a>
 8016648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801664a:	f000 f915 	bl	8016878 <__retarget_lock_acquire_recursive>
 801664e:	4628      	mov	r0, r5
 8016650:	4621      	mov	r1, r4
 8016652:	f7ff ff59 	bl	8016508 <__sflush_r>
 8016656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016658:	07da      	lsls	r2, r3, #31
 801665a:	4605      	mov	r5, r0
 801665c:	d4e0      	bmi.n	8016620 <_fflush_r+0xc>
 801665e:	89a3      	ldrh	r3, [r4, #12]
 8016660:	059b      	lsls	r3, r3, #22
 8016662:	d4dd      	bmi.n	8016620 <_fflush_r+0xc>
 8016664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016666:	f000 f908 	bl	801687a <__retarget_lock_release_recursive>
 801666a:	e7d9      	b.n	8016620 <_fflush_r+0xc>
 801666c:	4b05      	ldr	r3, [pc, #20]	; (8016684 <_fflush_r+0x70>)
 801666e:	429c      	cmp	r4, r3
 8016670:	d101      	bne.n	8016676 <_fflush_r+0x62>
 8016672:	68ac      	ldr	r4, [r5, #8]
 8016674:	e7df      	b.n	8016636 <_fflush_r+0x22>
 8016676:	4b04      	ldr	r3, [pc, #16]	; (8016688 <_fflush_r+0x74>)
 8016678:	429c      	cmp	r4, r3
 801667a:	bf08      	it	eq
 801667c:	68ec      	ldreq	r4, [r5, #12]
 801667e:	e7da      	b.n	8016636 <_fflush_r+0x22>
 8016680:	08016ea4 	.word	0x08016ea4
 8016684:	08016ec4 	.word	0x08016ec4
 8016688:	08016e84 	.word	0x08016e84

0801668c <std>:
 801668c:	2300      	movs	r3, #0
 801668e:	b510      	push	{r4, lr}
 8016690:	4604      	mov	r4, r0
 8016692:	e9c0 3300 	strd	r3, r3, [r0]
 8016696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801669a:	6083      	str	r3, [r0, #8]
 801669c:	8181      	strh	r1, [r0, #12]
 801669e:	6643      	str	r3, [r0, #100]	; 0x64
 80166a0:	81c2      	strh	r2, [r0, #14]
 80166a2:	6183      	str	r3, [r0, #24]
 80166a4:	4619      	mov	r1, r3
 80166a6:	2208      	movs	r2, #8
 80166a8:	305c      	adds	r0, #92	; 0x5c
 80166aa:	f7ff fcff 	bl	80160ac <memset>
 80166ae:	4b05      	ldr	r3, [pc, #20]	; (80166c4 <std+0x38>)
 80166b0:	6263      	str	r3, [r4, #36]	; 0x24
 80166b2:	4b05      	ldr	r3, [pc, #20]	; (80166c8 <std+0x3c>)
 80166b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80166b6:	4b05      	ldr	r3, [pc, #20]	; (80166cc <std+0x40>)
 80166b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80166ba:	4b05      	ldr	r3, [pc, #20]	; (80166d0 <std+0x44>)
 80166bc:	6224      	str	r4, [r4, #32]
 80166be:	6323      	str	r3, [r4, #48]	; 0x30
 80166c0:	bd10      	pop	{r4, pc}
 80166c2:	bf00      	nop
 80166c4:	08016961 	.word	0x08016961
 80166c8:	08016983 	.word	0x08016983
 80166cc:	080169bb 	.word	0x080169bb
 80166d0:	080169df 	.word	0x080169df

080166d4 <_cleanup_r>:
 80166d4:	4901      	ldr	r1, [pc, #4]	; (80166dc <_cleanup_r+0x8>)
 80166d6:	f000 b8af 	b.w	8016838 <_fwalk_reent>
 80166da:	bf00      	nop
 80166dc:	08016615 	.word	0x08016615

080166e0 <__sfmoreglue>:
 80166e0:	b570      	push	{r4, r5, r6, lr}
 80166e2:	2268      	movs	r2, #104	; 0x68
 80166e4:	1e4d      	subs	r5, r1, #1
 80166e6:	4355      	muls	r5, r2
 80166e8:	460e      	mov	r6, r1
 80166ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80166ee:	f7ff fd51 	bl	8016194 <_malloc_r>
 80166f2:	4604      	mov	r4, r0
 80166f4:	b140      	cbz	r0, 8016708 <__sfmoreglue+0x28>
 80166f6:	2100      	movs	r1, #0
 80166f8:	e9c0 1600 	strd	r1, r6, [r0]
 80166fc:	300c      	adds	r0, #12
 80166fe:	60a0      	str	r0, [r4, #8]
 8016700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016704:	f7ff fcd2 	bl	80160ac <memset>
 8016708:	4620      	mov	r0, r4
 801670a:	bd70      	pop	{r4, r5, r6, pc}

0801670c <__sfp_lock_acquire>:
 801670c:	4801      	ldr	r0, [pc, #4]	; (8016714 <__sfp_lock_acquire+0x8>)
 801670e:	f000 b8b3 	b.w	8016878 <__retarget_lock_acquire_recursive>
 8016712:	bf00      	nop
 8016714:	24005a25 	.word	0x24005a25

08016718 <__sfp_lock_release>:
 8016718:	4801      	ldr	r0, [pc, #4]	; (8016720 <__sfp_lock_release+0x8>)
 801671a:	f000 b8ae 	b.w	801687a <__retarget_lock_release_recursive>
 801671e:	bf00      	nop
 8016720:	24005a25 	.word	0x24005a25

08016724 <__sinit_lock_acquire>:
 8016724:	4801      	ldr	r0, [pc, #4]	; (801672c <__sinit_lock_acquire+0x8>)
 8016726:	f000 b8a7 	b.w	8016878 <__retarget_lock_acquire_recursive>
 801672a:	bf00      	nop
 801672c:	24005a26 	.word	0x24005a26

08016730 <__sinit_lock_release>:
 8016730:	4801      	ldr	r0, [pc, #4]	; (8016738 <__sinit_lock_release+0x8>)
 8016732:	f000 b8a2 	b.w	801687a <__retarget_lock_release_recursive>
 8016736:	bf00      	nop
 8016738:	24005a26 	.word	0x24005a26

0801673c <__sinit>:
 801673c:	b510      	push	{r4, lr}
 801673e:	4604      	mov	r4, r0
 8016740:	f7ff fff0 	bl	8016724 <__sinit_lock_acquire>
 8016744:	69a3      	ldr	r3, [r4, #24]
 8016746:	b11b      	cbz	r3, 8016750 <__sinit+0x14>
 8016748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801674c:	f7ff bff0 	b.w	8016730 <__sinit_lock_release>
 8016750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016754:	6523      	str	r3, [r4, #80]	; 0x50
 8016756:	4b13      	ldr	r3, [pc, #76]	; (80167a4 <__sinit+0x68>)
 8016758:	4a13      	ldr	r2, [pc, #76]	; (80167a8 <__sinit+0x6c>)
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	62a2      	str	r2, [r4, #40]	; 0x28
 801675e:	42a3      	cmp	r3, r4
 8016760:	bf04      	itt	eq
 8016762:	2301      	moveq	r3, #1
 8016764:	61a3      	streq	r3, [r4, #24]
 8016766:	4620      	mov	r0, r4
 8016768:	f000 f820 	bl	80167ac <__sfp>
 801676c:	6060      	str	r0, [r4, #4]
 801676e:	4620      	mov	r0, r4
 8016770:	f000 f81c 	bl	80167ac <__sfp>
 8016774:	60a0      	str	r0, [r4, #8]
 8016776:	4620      	mov	r0, r4
 8016778:	f000 f818 	bl	80167ac <__sfp>
 801677c:	2200      	movs	r2, #0
 801677e:	60e0      	str	r0, [r4, #12]
 8016780:	2104      	movs	r1, #4
 8016782:	6860      	ldr	r0, [r4, #4]
 8016784:	f7ff ff82 	bl	801668c <std>
 8016788:	68a0      	ldr	r0, [r4, #8]
 801678a:	2201      	movs	r2, #1
 801678c:	2109      	movs	r1, #9
 801678e:	f7ff ff7d 	bl	801668c <std>
 8016792:	68e0      	ldr	r0, [r4, #12]
 8016794:	2202      	movs	r2, #2
 8016796:	2112      	movs	r1, #18
 8016798:	f7ff ff78 	bl	801668c <std>
 801679c:	2301      	movs	r3, #1
 801679e:	61a3      	str	r3, [r4, #24]
 80167a0:	e7d2      	b.n	8016748 <__sinit+0xc>
 80167a2:	bf00      	nop
 80167a4:	08016e80 	.word	0x08016e80
 80167a8:	080166d5 	.word	0x080166d5

080167ac <__sfp>:
 80167ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ae:	4607      	mov	r7, r0
 80167b0:	f7ff ffac 	bl	801670c <__sfp_lock_acquire>
 80167b4:	4b1e      	ldr	r3, [pc, #120]	; (8016830 <__sfp+0x84>)
 80167b6:	681e      	ldr	r6, [r3, #0]
 80167b8:	69b3      	ldr	r3, [r6, #24]
 80167ba:	b913      	cbnz	r3, 80167c2 <__sfp+0x16>
 80167bc:	4630      	mov	r0, r6
 80167be:	f7ff ffbd 	bl	801673c <__sinit>
 80167c2:	3648      	adds	r6, #72	; 0x48
 80167c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80167c8:	3b01      	subs	r3, #1
 80167ca:	d503      	bpl.n	80167d4 <__sfp+0x28>
 80167cc:	6833      	ldr	r3, [r6, #0]
 80167ce:	b30b      	cbz	r3, 8016814 <__sfp+0x68>
 80167d0:	6836      	ldr	r6, [r6, #0]
 80167d2:	e7f7      	b.n	80167c4 <__sfp+0x18>
 80167d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80167d8:	b9d5      	cbnz	r5, 8016810 <__sfp+0x64>
 80167da:	4b16      	ldr	r3, [pc, #88]	; (8016834 <__sfp+0x88>)
 80167dc:	60e3      	str	r3, [r4, #12]
 80167de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80167e2:	6665      	str	r5, [r4, #100]	; 0x64
 80167e4:	f000 f847 	bl	8016876 <__retarget_lock_init_recursive>
 80167e8:	f7ff ff96 	bl	8016718 <__sfp_lock_release>
 80167ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80167f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80167f4:	6025      	str	r5, [r4, #0]
 80167f6:	61a5      	str	r5, [r4, #24]
 80167f8:	2208      	movs	r2, #8
 80167fa:	4629      	mov	r1, r5
 80167fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016800:	f7ff fc54 	bl	80160ac <memset>
 8016804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801680c:	4620      	mov	r0, r4
 801680e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016810:	3468      	adds	r4, #104	; 0x68
 8016812:	e7d9      	b.n	80167c8 <__sfp+0x1c>
 8016814:	2104      	movs	r1, #4
 8016816:	4638      	mov	r0, r7
 8016818:	f7ff ff62 	bl	80166e0 <__sfmoreglue>
 801681c:	4604      	mov	r4, r0
 801681e:	6030      	str	r0, [r6, #0]
 8016820:	2800      	cmp	r0, #0
 8016822:	d1d5      	bne.n	80167d0 <__sfp+0x24>
 8016824:	f7ff ff78 	bl	8016718 <__sfp_lock_release>
 8016828:	230c      	movs	r3, #12
 801682a:	603b      	str	r3, [r7, #0]
 801682c:	e7ee      	b.n	801680c <__sfp+0x60>
 801682e:	bf00      	nop
 8016830:	08016e80 	.word	0x08016e80
 8016834:	ffff0001 	.word	0xffff0001

08016838 <_fwalk_reent>:
 8016838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801683c:	4606      	mov	r6, r0
 801683e:	4688      	mov	r8, r1
 8016840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016844:	2700      	movs	r7, #0
 8016846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801684a:	f1b9 0901 	subs.w	r9, r9, #1
 801684e:	d505      	bpl.n	801685c <_fwalk_reent+0x24>
 8016850:	6824      	ldr	r4, [r4, #0]
 8016852:	2c00      	cmp	r4, #0
 8016854:	d1f7      	bne.n	8016846 <_fwalk_reent+0xe>
 8016856:	4638      	mov	r0, r7
 8016858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801685c:	89ab      	ldrh	r3, [r5, #12]
 801685e:	2b01      	cmp	r3, #1
 8016860:	d907      	bls.n	8016872 <_fwalk_reent+0x3a>
 8016862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016866:	3301      	adds	r3, #1
 8016868:	d003      	beq.n	8016872 <_fwalk_reent+0x3a>
 801686a:	4629      	mov	r1, r5
 801686c:	4630      	mov	r0, r6
 801686e:	47c0      	blx	r8
 8016870:	4307      	orrs	r7, r0
 8016872:	3568      	adds	r5, #104	; 0x68
 8016874:	e7e9      	b.n	801684a <_fwalk_reent+0x12>

08016876 <__retarget_lock_init_recursive>:
 8016876:	4770      	bx	lr

08016878 <__retarget_lock_acquire_recursive>:
 8016878:	4770      	bx	lr

0801687a <__retarget_lock_release_recursive>:
 801687a:	4770      	bx	lr

0801687c <__swhatbuf_r>:
 801687c:	b570      	push	{r4, r5, r6, lr}
 801687e:	460e      	mov	r6, r1
 8016880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016884:	2900      	cmp	r1, #0
 8016886:	b096      	sub	sp, #88	; 0x58
 8016888:	4614      	mov	r4, r2
 801688a:	461d      	mov	r5, r3
 801688c:	da08      	bge.n	80168a0 <__swhatbuf_r+0x24>
 801688e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016892:	2200      	movs	r2, #0
 8016894:	602a      	str	r2, [r5, #0]
 8016896:	061a      	lsls	r2, r3, #24
 8016898:	d410      	bmi.n	80168bc <__swhatbuf_r+0x40>
 801689a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801689e:	e00e      	b.n	80168be <__swhatbuf_r+0x42>
 80168a0:	466a      	mov	r2, sp
 80168a2:	f000 f8c3 	bl	8016a2c <_fstat_r>
 80168a6:	2800      	cmp	r0, #0
 80168a8:	dbf1      	blt.n	801688e <__swhatbuf_r+0x12>
 80168aa:	9a01      	ldr	r2, [sp, #4]
 80168ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80168b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80168b4:	425a      	negs	r2, r3
 80168b6:	415a      	adcs	r2, r3
 80168b8:	602a      	str	r2, [r5, #0]
 80168ba:	e7ee      	b.n	801689a <__swhatbuf_r+0x1e>
 80168bc:	2340      	movs	r3, #64	; 0x40
 80168be:	2000      	movs	r0, #0
 80168c0:	6023      	str	r3, [r4, #0]
 80168c2:	b016      	add	sp, #88	; 0x58
 80168c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080168c8 <__smakebuf_r>:
 80168c8:	898b      	ldrh	r3, [r1, #12]
 80168ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80168cc:	079d      	lsls	r5, r3, #30
 80168ce:	4606      	mov	r6, r0
 80168d0:	460c      	mov	r4, r1
 80168d2:	d507      	bpl.n	80168e4 <__smakebuf_r+0x1c>
 80168d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80168d8:	6023      	str	r3, [r4, #0]
 80168da:	6123      	str	r3, [r4, #16]
 80168dc:	2301      	movs	r3, #1
 80168de:	6163      	str	r3, [r4, #20]
 80168e0:	b002      	add	sp, #8
 80168e2:	bd70      	pop	{r4, r5, r6, pc}
 80168e4:	ab01      	add	r3, sp, #4
 80168e6:	466a      	mov	r2, sp
 80168e8:	f7ff ffc8 	bl	801687c <__swhatbuf_r>
 80168ec:	9900      	ldr	r1, [sp, #0]
 80168ee:	4605      	mov	r5, r0
 80168f0:	4630      	mov	r0, r6
 80168f2:	f7ff fc4f 	bl	8016194 <_malloc_r>
 80168f6:	b948      	cbnz	r0, 801690c <__smakebuf_r+0x44>
 80168f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168fc:	059a      	lsls	r2, r3, #22
 80168fe:	d4ef      	bmi.n	80168e0 <__smakebuf_r+0x18>
 8016900:	f023 0303 	bic.w	r3, r3, #3
 8016904:	f043 0302 	orr.w	r3, r3, #2
 8016908:	81a3      	strh	r3, [r4, #12]
 801690a:	e7e3      	b.n	80168d4 <__smakebuf_r+0xc>
 801690c:	4b0d      	ldr	r3, [pc, #52]	; (8016944 <__smakebuf_r+0x7c>)
 801690e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016910:	89a3      	ldrh	r3, [r4, #12]
 8016912:	6020      	str	r0, [r4, #0]
 8016914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016918:	81a3      	strh	r3, [r4, #12]
 801691a:	9b00      	ldr	r3, [sp, #0]
 801691c:	6163      	str	r3, [r4, #20]
 801691e:	9b01      	ldr	r3, [sp, #4]
 8016920:	6120      	str	r0, [r4, #16]
 8016922:	b15b      	cbz	r3, 801693c <__smakebuf_r+0x74>
 8016924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016928:	4630      	mov	r0, r6
 801692a:	f000 f891 	bl	8016a50 <_isatty_r>
 801692e:	b128      	cbz	r0, 801693c <__smakebuf_r+0x74>
 8016930:	89a3      	ldrh	r3, [r4, #12]
 8016932:	f023 0303 	bic.w	r3, r3, #3
 8016936:	f043 0301 	orr.w	r3, r3, #1
 801693a:	81a3      	strh	r3, [r4, #12]
 801693c:	89a0      	ldrh	r0, [r4, #12]
 801693e:	4305      	orrs	r5, r0
 8016940:	81a5      	strh	r5, [r4, #12]
 8016942:	e7cd      	b.n	80168e0 <__smakebuf_r+0x18>
 8016944:	080166d5 	.word	0x080166d5

08016948 <__malloc_lock>:
 8016948:	4801      	ldr	r0, [pc, #4]	; (8016950 <__malloc_lock+0x8>)
 801694a:	f7ff bf95 	b.w	8016878 <__retarget_lock_acquire_recursive>
 801694e:	bf00      	nop
 8016950:	24005a24 	.word	0x24005a24

08016954 <__malloc_unlock>:
 8016954:	4801      	ldr	r0, [pc, #4]	; (801695c <__malloc_unlock+0x8>)
 8016956:	f7ff bf90 	b.w	801687a <__retarget_lock_release_recursive>
 801695a:	bf00      	nop
 801695c:	24005a24 	.word	0x24005a24

08016960 <__sread>:
 8016960:	b510      	push	{r4, lr}
 8016962:	460c      	mov	r4, r1
 8016964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016968:	f000 f894 	bl	8016a94 <_read_r>
 801696c:	2800      	cmp	r0, #0
 801696e:	bfab      	itete	ge
 8016970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016972:	89a3      	ldrhlt	r3, [r4, #12]
 8016974:	181b      	addge	r3, r3, r0
 8016976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801697a:	bfac      	ite	ge
 801697c:	6563      	strge	r3, [r4, #84]	; 0x54
 801697e:	81a3      	strhlt	r3, [r4, #12]
 8016980:	bd10      	pop	{r4, pc}

08016982 <__swrite>:
 8016982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016986:	461f      	mov	r7, r3
 8016988:	898b      	ldrh	r3, [r1, #12]
 801698a:	05db      	lsls	r3, r3, #23
 801698c:	4605      	mov	r5, r0
 801698e:	460c      	mov	r4, r1
 8016990:	4616      	mov	r6, r2
 8016992:	d505      	bpl.n	80169a0 <__swrite+0x1e>
 8016994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016998:	2302      	movs	r3, #2
 801699a:	2200      	movs	r2, #0
 801699c:	f000 f868 	bl	8016a70 <_lseek_r>
 80169a0:	89a3      	ldrh	r3, [r4, #12]
 80169a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80169aa:	81a3      	strh	r3, [r4, #12]
 80169ac:	4632      	mov	r2, r6
 80169ae:	463b      	mov	r3, r7
 80169b0:	4628      	mov	r0, r5
 80169b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169b6:	f000 b817 	b.w	80169e8 <_write_r>

080169ba <__sseek>:
 80169ba:	b510      	push	{r4, lr}
 80169bc:	460c      	mov	r4, r1
 80169be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169c2:	f000 f855 	bl	8016a70 <_lseek_r>
 80169c6:	1c43      	adds	r3, r0, #1
 80169c8:	89a3      	ldrh	r3, [r4, #12]
 80169ca:	bf15      	itete	ne
 80169cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80169ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80169d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80169d6:	81a3      	strheq	r3, [r4, #12]
 80169d8:	bf18      	it	ne
 80169da:	81a3      	strhne	r3, [r4, #12]
 80169dc:	bd10      	pop	{r4, pc}

080169de <__sclose>:
 80169de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169e2:	f000 b813 	b.w	8016a0c <_close_r>
	...

080169e8 <_write_r>:
 80169e8:	b538      	push	{r3, r4, r5, lr}
 80169ea:	4d07      	ldr	r5, [pc, #28]	; (8016a08 <_write_r+0x20>)
 80169ec:	4604      	mov	r4, r0
 80169ee:	4608      	mov	r0, r1
 80169f0:	4611      	mov	r1, r2
 80169f2:	2200      	movs	r2, #0
 80169f4:	602a      	str	r2, [r5, #0]
 80169f6:	461a      	mov	r2, r3
 80169f8:	f7ec fe73 	bl	80036e2 <_write>
 80169fc:	1c43      	adds	r3, r0, #1
 80169fe:	d102      	bne.n	8016a06 <_write_r+0x1e>
 8016a00:	682b      	ldr	r3, [r5, #0]
 8016a02:	b103      	cbz	r3, 8016a06 <_write_r+0x1e>
 8016a04:	6023      	str	r3, [r4, #0]
 8016a06:	bd38      	pop	{r3, r4, r5, pc}
 8016a08:	24005a28 	.word	0x24005a28

08016a0c <_close_r>:
 8016a0c:	b538      	push	{r3, r4, r5, lr}
 8016a0e:	4d06      	ldr	r5, [pc, #24]	; (8016a28 <_close_r+0x1c>)
 8016a10:	2300      	movs	r3, #0
 8016a12:	4604      	mov	r4, r0
 8016a14:	4608      	mov	r0, r1
 8016a16:	602b      	str	r3, [r5, #0]
 8016a18:	f7ec fe7f 	bl	800371a <_close>
 8016a1c:	1c43      	adds	r3, r0, #1
 8016a1e:	d102      	bne.n	8016a26 <_close_r+0x1a>
 8016a20:	682b      	ldr	r3, [r5, #0]
 8016a22:	b103      	cbz	r3, 8016a26 <_close_r+0x1a>
 8016a24:	6023      	str	r3, [r4, #0]
 8016a26:	bd38      	pop	{r3, r4, r5, pc}
 8016a28:	24005a28 	.word	0x24005a28

08016a2c <_fstat_r>:
 8016a2c:	b538      	push	{r3, r4, r5, lr}
 8016a2e:	4d07      	ldr	r5, [pc, #28]	; (8016a4c <_fstat_r+0x20>)
 8016a30:	2300      	movs	r3, #0
 8016a32:	4604      	mov	r4, r0
 8016a34:	4608      	mov	r0, r1
 8016a36:	4611      	mov	r1, r2
 8016a38:	602b      	str	r3, [r5, #0]
 8016a3a:	f7ec fe7a 	bl	8003732 <_fstat>
 8016a3e:	1c43      	adds	r3, r0, #1
 8016a40:	d102      	bne.n	8016a48 <_fstat_r+0x1c>
 8016a42:	682b      	ldr	r3, [r5, #0]
 8016a44:	b103      	cbz	r3, 8016a48 <_fstat_r+0x1c>
 8016a46:	6023      	str	r3, [r4, #0]
 8016a48:	bd38      	pop	{r3, r4, r5, pc}
 8016a4a:	bf00      	nop
 8016a4c:	24005a28 	.word	0x24005a28

08016a50 <_isatty_r>:
 8016a50:	b538      	push	{r3, r4, r5, lr}
 8016a52:	4d06      	ldr	r5, [pc, #24]	; (8016a6c <_isatty_r+0x1c>)
 8016a54:	2300      	movs	r3, #0
 8016a56:	4604      	mov	r4, r0
 8016a58:	4608      	mov	r0, r1
 8016a5a:	602b      	str	r3, [r5, #0]
 8016a5c:	f7ec fe79 	bl	8003752 <_isatty>
 8016a60:	1c43      	adds	r3, r0, #1
 8016a62:	d102      	bne.n	8016a6a <_isatty_r+0x1a>
 8016a64:	682b      	ldr	r3, [r5, #0]
 8016a66:	b103      	cbz	r3, 8016a6a <_isatty_r+0x1a>
 8016a68:	6023      	str	r3, [r4, #0]
 8016a6a:	bd38      	pop	{r3, r4, r5, pc}
 8016a6c:	24005a28 	.word	0x24005a28

08016a70 <_lseek_r>:
 8016a70:	b538      	push	{r3, r4, r5, lr}
 8016a72:	4d07      	ldr	r5, [pc, #28]	; (8016a90 <_lseek_r+0x20>)
 8016a74:	4604      	mov	r4, r0
 8016a76:	4608      	mov	r0, r1
 8016a78:	4611      	mov	r1, r2
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	602a      	str	r2, [r5, #0]
 8016a7e:	461a      	mov	r2, r3
 8016a80:	f7ec fe72 	bl	8003768 <_lseek>
 8016a84:	1c43      	adds	r3, r0, #1
 8016a86:	d102      	bne.n	8016a8e <_lseek_r+0x1e>
 8016a88:	682b      	ldr	r3, [r5, #0]
 8016a8a:	b103      	cbz	r3, 8016a8e <_lseek_r+0x1e>
 8016a8c:	6023      	str	r3, [r4, #0]
 8016a8e:	bd38      	pop	{r3, r4, r5, pc}
 8016a90:	24005a28 	.word	0x24005a28

08016a94 <_read_r>:
 8016a94:	b538      	push	{r3, r4, r5, lr}
 8016a96:	4d07      	ldr	r5, [pc, #28]	; (8016ab4 <_read_r+0x20>)
 8016a98:	4604      	mov	r4, r0
 8016a9a:	4608      	mov	r0, r1
 8016a9c:	4611      	mov	r1, r2
 8016a9e:	2200      	movs	r2, #0
 8016aa0:	602a      	str	r2, [r5, #0]
 8016aa2:	461a      	mov	r2, r3
 8016aa4:	f7ec fe00 	bl	80036a8 <_read>
 8016aa8:	1c43      	adds	r3, r0, #1
 8016aaa:	d102      	bne.n	8016ab2 <_read_r+0x1e>
 8016aac:	682b      	ldr	r3, [r5, #0]
 8016aae:	b103      	cbz	r3, 8016ab2 <_read_r+0x1e>
 8016ab0:	6023      	str	r3, [r4, #0]
 8016ab2:	bd38      	pop	{r3, r4, r5, pc}
 8016ab4:	24005a28 	.word	0x24005a28

08016ab8 <_init>:
 8016ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016aba:	bf00      	nop
 8016abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016abe:	bc08      	pop	{r3}
 8016ac0:	469e      	mov	lr, r3
 8016ac2:	4770      	bx	lr

08016ac4 <_fini>:
 8016ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ac6:	bf00      	nop
 8016ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016aca:	bc08      	pop	{r3}
 8016acc:	469e      	mov	lr, r3
 8016ace:	4770      	bx	lr
