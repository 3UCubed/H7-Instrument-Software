
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011538  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080117d8  080117d8  000217d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011a20  08011a20  00021a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011a28  08011a28  00021a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011a2c  08011a2c  00021a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  08011a30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000509c  24000020  08011a44  00030020  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240050bc  08011a44  000350bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035f79  00000000  00000000  00030042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006598  00000000  00000000  00065fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002658  00000000  00000000  0006c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000023c0  00000000  00000000  0006ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000425f8  00000000  00000000  00070f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037f38  00000000  00000000  000b3568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00193077  00000000  00000000  000eb4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0027e517  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a208  00000000  00000000  0027e568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000020 	.word	0x24000020
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080117c0 	.word	0x080117c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000024 	.word	0x24000024
 80002dc:	080117c0 	.word	0x080117c0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f002 fa45 	bl	8002af8 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f000 fea4 	bl	80013c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f003 fb60 	bl	8003d48 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f000 fe97 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f002 fca3 	bl	8003000 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f000 fe7e 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f002 fc95 	bl	8003000 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f000 fe70 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f002 fc87 	bl	8003000 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f000 fe62 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f002 fc79 	bl	8003000 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f000 fe54 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f002 fc6a 	bl	8003000 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f000 fe45 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f002 fc5b 	bl	8003000 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f000 fe36 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f002 fc4c 	bl	8003000 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f000 fe27 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f002 fc3d 	bl	8003000 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f000 fe18 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f002 fc2e 	bl	8003000 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f000 fe09 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f002 fc1f 	bl	8003000 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f000 fdfa 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f002 fc10 	bl	8003000 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f000 fdeb 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400003c 	.word	0x2400003c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f002 f92d 	bl	8002af8 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f000 fd8c 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f002 fb98 	bl	8003000 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f000 fd73 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f002 fb8a 	bl	8003000 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f000 fd65 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f002 fb7c 	bl	8003000 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f000 fd57 	bl	80013c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f002 fb6e 	bl	8003000 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f000 fd49 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240000a0 	.word	0x240000a0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f006 fb6c 	bl	80070d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f006 fb60 	bl	80070d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f006 fb54 	bl	80070d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f003 fcf3 	bl	8004460 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f000 fc9e 	bl	80013c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f001 fde6 	bl	80026b0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f001 fde0 	bl	80026b0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f003 fc93 	bl	8004460 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f000 fc3e 	bl	80013c0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000104 	.word	0x24000104
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400017c 	.word	0x2400017c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f010 fe0f 	bl	80117b0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f003 fa93 	bl	80040c4 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f000 fc0c 	bl	80013c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f003 fb00 	bl	80041c8 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f000 fbf7 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240001f4 	.word	0x240001f4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f006 fa3f 	bl	80070d8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f003 fbde 	bl	8004460 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f000 fb89 	bl	80013c0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f003 f9d8 	bl	8004074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f003 f9ef 	bl	80040a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000208 	.word	0x24000208
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f003 f9af 	bl	8004074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f003 f9c6 	bl	80040a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f003 f9a7 	bl	8004074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f003 f9be 	bl	80040a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f003 f99f 	bl	8004074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f003 f9b6 	bl	80040a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f003 f997 	bl	8004074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f003 f9ae 	bl	80040a8 <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d6c:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <MX_FREERTOS_Init+0xa8>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4828      	ldr	r0, [pc, #160]	; (8000e14 <MX_FREERTOS_Init+0xac>)
 8000d72:	f00d fea1 	bl	800eab8 <osThreadNew>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <MX_FREERTOS_Init+0xb0>)
 8000d7a:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000d7c:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <MX_FREERTOS_Init+0xb4>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4827      	ldr	r0, [pc, #156]	; (8000e20 <MX_FREERTOS_Init+0xb8>)
 8000d82:	f00d fe99 	bl	800eab8 <osThreadNew>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <MX_FREERTOS_Init+0xbc>)
 8000d8a:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000d8c:	4a26      	ldr	r2, [pc, #152]	; (8000e28 <MX_FREERTOS_Init+0xc0>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4826      	ldr	r0, [pc, #152]	; (8000e2c <MX_FREERTOS_Init+0xc4>)
 8000d92:	f00d fe91 	bl	800eab8 <osThreadNew>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <MX_FREERTOS_Init+0xc8>)
 8000d9a:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000d9c:	4a25      	ldr	r2, [pc, #148]	; (8000e34 <MX_FREERTOS_Init+0xcc>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4825      	ldr	r0, [pc, #148]	; (8000e38 <MX_FREERTOS_Init+0xd0>)
 8000da2:	f00d fe89 	bl	800eab8 <osThreadNew>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a24      	ldr	r2, [pc, #144]	; (8000e3c <MX_FREERTOS_Init+0xd4>)
 8000daa:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000dac:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <MX_FREERTOS_Init+0xd8>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4824      	ldr	r0, [pc, #144]	; (8000e44 <MX_FREERTOS_Init+0xdc>)
 8000db2:	f00d fe81 	bl	800eab8 <osThreadNew>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <MX_FREERTOS_Init+0xe0>)
 8000dba:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000dbc:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <MX_FREERTOS_Init+0xe4>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4823      	ldr	r0, [pc, #140]	; (8000e50 <MX_FREERTOS_Init+0xe8>)
 8000dc2:	f00d fe79 	bl	800eab8 <osThreadNew>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <MX_FREERTOS_Init+0xec>)
 8000dca:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <MX_FREERTOS_Init+0xf0>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4822      	ldr	r0, [pc, #136]	; (8000e5c <MX_FREERTOS_Init+0xf4>)
 8000dd2:	f00d fe71 	bl	800eab8 <osThreadNew>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <MX_FREERTOS_Init+0xf8>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <MX_FREERTOS_Init+0xfc>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4821      	ldr	r0, [pc, #132]	; (8000e68 <MX_FREERTOS_Init+0x100>)
 8000de2:	f00d fe69 	bl	800eab8 <osThreadNew>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <MX_FREERTOS_Init+0x104>)
 8000dea:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000dec:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <MX_FREERTOS_Init+0x108>)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4820      	ldr	r0, [pc, #128]	; (8000e74 <MX_FREERTOS_Init+0x10c>)
 8000df2:	f00d fe61 	bl	800eab8 <osThreadNew>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <MX_FREERTOS_Init+0x110>)
 8000dfa:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <MX_FREERTOS_Init+0x114>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <MX_FREERTOS_Init+0x118>)
 8000e02:	f00d fe59 	bl	800eab8 <osThreadNew>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <MX_FREERTOS_Init+0x11c>)
 8000e0a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	08011878 	.word	0x08011878
 8000e14:	08000e89 	.word	0x08000e89
 8000e18:	24000280 	.word	0x24000280
 8000e1c:	0801189c 	.word	0x0801189c
 8000e20:	08000e99 	.word	0x08000e99
 8000e24:	24000284 	.word	0x24000284
 8000e28:	080118c0 	.word	0x080118c0
 8000e2c:	08000ea9 	.word	0x08000ea9
 8000e30:	24000288 	.word	0x24000288
 8000e34:	080118e4 	.word	0x080118e4
 8000e38:	08000eb9 	.word	0x08000eb9
 8000e3c:	2400028c 	.word	0x2400028c
 8000e40:	08011908 	.word	0x08011908
 8000e44:	08000ec9 	.word	0x08000ec9
 8000e48:	24000290 	.word	0x24000290
 8000e4c:	0801192c 	.word	0x0801192c
 8000e50:	08000ed9 	.word	0x08000ed9
 8000e54:	24000294 	.word	0x24000294
 8000e58:	08011950 	.word	0x08011950
 8000e5c:	08000ee9 	.word	0x08000ee9
 8000e60:	24000298 	.word	0x24000298
 8000e64:	08011974 	.word	0x08011974
 8000e68:	08000ef9 	.word	0x08000ef9
 8000e6c:	2400029c 	.word	0x2400029c
 8000e70:	08011998 	.word	0x08011998
 8000e74:	08000f09 	.word	0x08000f09
 8000e78:	240002a0 	.word	0x240002a0
 8000e7c:	080119bc 	.word	0x080119bc
 8000e80:	08000f19 	.word	0x08000f19
 8000e84:	240002a4 	.word	0x240002a4

08000e88 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f00d fea3 	bl	800ebdc <osDelay>
 8000e96:	e7fb      	b.n	8000e90 <PMT_init+0x8>

08000e98 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f00d fe9b 	bl	800ebdc <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <ERPA_init+0x8>

08000ea8 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f00d fe93 	bl	800ebdc <osDelay>
 8000eb6:	e7fb      	b.n	8000eb0 <HK_init+0x8>

08000eb8 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f00d fe8b 	bl	800ebdc <osDelay>
 8000ec6:	e7fb      	b.n	8000ec0 <AUTOINIT_init+0x8>

08000ec8 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f00d fe83 	bl	800ebdc <osDelay>
 8000ed6:	e7fb      	b.n	8000ed0 <AUTODEINIT_init+0x8>

08000ed8 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	for (;;) {
		osDelay(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f00d fe7b 	bl	800ebdc <osDelay>
 8000ee6:	e7fb      	b.n	8000ee0 <UART_TX_init+0x8>

08000ee8 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	for (;;) {
		osDelay(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f00d fe73 	bl	800ebdc <osDelay>
 8000ef6:	e7fb      	b.n	8000ef0 <Voltage_Monitor_init+0x8>

08000ef8 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f00d fe6b 	bl	800ebdc <osDelay>
 8000f06:	e7fb      	b.n	8000f00 <STOP_init+0x8>

08000f08 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f00d fe63 	bl	800ebdc <osDelay>
 8000f16:	e7fb      	b.n	8000f10 <Science_init+0x8>

08000f18 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f00d fe5b 	bl	800ebdc <osDelay>
 8000f26:	e7fb      	b.n	8000f20 <Idle_init+0x8>

08000f28 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	4a32      	ldr	r2, [pc, #200]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f62:	4a2b      	ldr	r2, [pc, #172]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <MX_GPIO_Init+0xec>)
 8000fbe:	f006 fa3b 	bl	8007438 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2164      	movs	r1, #100	; 0x64
 8000fc6:	4814      	ldr	r0, [pc, #80]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000fc8:	f006 fa36 	bl	8007438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000fcc:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8000fd0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <MX_GPIO_Init+0xec>)
 8000fe6:	f006 f877 	bl	80070d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_GPIO_Init+0xf0>)
 8001002:	f006 f869 	bl	80070d8 <HAL_GPIO_Init>

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	58024400 	.word	0x58024400
 8001014:	58020800 	.word	0x58020800
 8001018:	58020400 	.word	0x58020400

0800101c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_I2C1_Init+0x78>)
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <MX_I2C1_Init+0x7c>)
 8001024:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_I2C1_Init+0x78>)
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <MX_I2C1_Init+0x80>)
 800102a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_I2C1_Init+0x78>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_I2C1_Init+0x78>)
 8001034:	2201      	movs	r2, #1
 8001036:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_I2C1_Init+0x78>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_I2C1_Init+0x78>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_I2C1_Init+0x78>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C1_Init+0x78>)
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_I2C1_Init+0x78>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001056:	480f      	ldr	r0, [pc, #60]	; (8001094 <MX_I2C1_Init+0x78>)
 8001058:	f006 fa08 	bl	800746c <HAL_I2C_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001062:	f000 f9ad 	bl	80013c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <MX_I2C1_Init+0x78>)
 800106a:	f006 fa9b 	bl	80075a4 <HAL_I2CEx_ConfigAnalogFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001074:	f000 f9a4 	bl	80013c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001078:	2100      	movs	r1, #0
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_I2C1_Init+0x78>)
 800107c:	f006 fadd 	bl	800763a <HAL_I2CEx_ConfigDigitalFilter>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001086:	f000 f99b 	bl	80013c0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800108a:	2001      	movs	r0, #1
 800108c:	f006 fb22 	bl	80076d4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	240002a8 	.word	0x240002a8
 8001098:	40005400 	.word	0x40005400
 800109c:	0020081f 	.word	0x0020081f

080010a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ba      	sub	sp, #232	; 0xe8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	22c0      	movs	r2, #192	; 0xc0
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f010 fb75 	bl	80117b0 <memset>
  if(i2cHandle->Instance==I2C1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a27      	ldr	r2, [pc, #156]	; (8001168 <HAL_I2C_MspInit+0xc8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d146      	bne.n	800115e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d0:	f04f 0208 	mov.w	r2, #8
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 fb7a 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010f2:	f000 f965 	bl	80013c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_I2C_MspInit+0xcc>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <HAL_I2C_MspInit+0xcc>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001114:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111c:	2312      	movs	r3, #18
 800111e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112e:	2304      	movs	r3, #4
 8001130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <HAL_I2C_MspInit+0xd0>)
 800113c:	f005 ffcc 	bl	80070d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800115e:	bf00      	nop
 8001160:	37e8      	adds	r7, #232	; 0xe8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40005400 	.word	0x40005400
 800116c:	58024400 	.word	0x58024400
 8001170:	58020400 	.word	0x58020400

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001178:	f001 fa32 	bl	80025e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117c:	f000 f826 	bl	80011cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001180:	f000 f8a4 	bl	80012cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f7ff fed0 	bl	8000f28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001188:	f7ff fdae 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 800118c:	f000 fe24 	bl	8001dd8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001190:	f000 ff50 	bl	8002034 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001194:	f7ff ff42 	bl	800101c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001198:	f000 fa42 	bl	8001620 <MX_SPI2_Init>
  MX_TIM2_Init();
 800119c:	f000 fda6 	bl	8001cec <MX_TIM2_Init>
  MX_TIM1_Init();
 80011a0:	f000 fcf6 	bl	8001b90 <MX_TIM1_Init>
  MX_ADC3_Init();
 80011a4:	f7ff fb40 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80011a8:	f7ff fa1c 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80011ac:	f7ff fce8 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80011b0:	f000 f9de 	bl	8001570 <MX_SPI1_Init>
  MX_RTC_Init();
 80011b4:	f000 f90a 	bl	80013cc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 80011b8:	f000 f8b8 	bl	800132c <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80011bc:	f00d fc32 	bl	800ea24 <osKernelInitialize>
  MX_FREERTOS_Init();
 80011c0:	f7ff fdd2 	bl	8000d68 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011c4:	f00d fc52 	bl	800ea6c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80011c8:	e7fe      	b.n	80011c8 <main+0x54>
	...

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b09c      	sub	sp, #112	; 0x70
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	224c      	movs	r2, #76	; 0x4c
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f010 fae8 	bl	80117b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2220      	movs	r2, #32
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f010 fae2 	bl	80117b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011ec:	2002      	movs	r0, #2
 80011ee:	f006 fa95 	bl	800771c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <SystemClock_Config+0xf8>)
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fa:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <SystemClock_Config+0xf8>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <SystemClock_Config+0xf8>)
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <SystemClock_Config+0xfc>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001214:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <SystemClock_Config+0xfc>)
 8001216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <SystemClock_Config+0xfc>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001228:	bf00      	nop
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <SystemClock_Config+0xfc>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001236:	d1f8      	bne.n	800122a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001238:	2303      	movs	r3, #3
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001242:	2309      	movs	r3, #9
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001246:	2340      	movs	r3, #64	; 0x40
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124a:	2302      	movs	r3, #2
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124e:	2302      	movs	r3, #2
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001252:	2304      	movs	r3, #4
 8001254:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001256:	2320      	movs	r3, #32
 8001258:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800125a:	2304      	movs	r3, #4
 800125c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800125e:	2304      	movs	r3, #4
 8001260:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001262:	2302      	movs	r3, #2
 8001264:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001266:	2308      	movs	r3, #8
 8001268:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800126a:	2300      	movs	r3, #0
 800126c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001276:	4618      	mov	r0, r3
 8001278:	f006 fa8a 	bl	8007790 <HAL_RCC_OscConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001282:	f000 f89d 	bl	80013c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001286:	233f      	movs	r3, #63	; 0x3f
 8001288:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128a:	2303      	movs	r3, #3
 800128c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2101      	movs	r1, #1
 80012aa:	4618      	mov	r0, r3
 80012ac:	f006 feca 	bl	8008044 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xee>
  {
    Error_Handler();
 80012b6:	f000 f883 	bl	80013c0 <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3770      	adds	r7, #112	; 0x70
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	58000400 	.word	0x58000400
 80012c8:	58024800 	.word	0x58024800

080012cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0b0      	sub	sp, #192	; 0xc0
 80012d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	22c0      	movs	r2, #192	; 0xc0
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f010 fa69 	bl	80117b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012ea:	2304      	movs	r3, #4
 80012ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 80012ee:	2320      	movs	r3, #32
 80012f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80012f2:	2308      	movs	r3, #8
 80012f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 80012f6:	2304      	movs	r3, #4
 80012f8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	4618      	mov	r0, r3
 8001314:	f007 fa64 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800131e:	f000 f84f 	bl	80013c0 <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	37c0      	adds	r7, #192	; 0xc0
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA


	// ---- 1 ---- //
	event_flags = osEventFlagsNew(NULL);
 8001330:	2000      	movs	r0, #0
 8001332:	f00d fc6e 	bl	800ec12 <osEventFlagsNew>
 8001336:	4603      	mov	r3, r0
 8001338:	4a15      	ldr	r2, [pc, #84]	; (8001390 <system_setup+0x64>)
 800133a:	6013      	str	r3, [r2, #0]
    if (event_flags == NULL) {
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <system_setup+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d100      	bne.n	8001346 <system_setup+0x1a>
        while (1);
 8001344:	e7fe      	b.n	8001344 <system_setup+0x18>
    }

	// ---- 2 ---- //
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_SIZE, sizeof(packet_t), NULL);
 8001346:	2200      	movs	r2, #0
 8001348:	2108      	movs	r1, #8
 800134a:	2080      	movs	r0, #128	; 0x80
 800134c:	f00d fca0 	bl	800ec90 <osMessageQueueNew>
 8001350:	4603      	mov	r3, r0
 8001352:	4a10      	ldr	r2, [pc, #64]	; (8001394 <system_setup+0x68>)
 8001354:	6013      	str	r3, [r2, #0]
	if (mid_MsgQueue == NULL) {
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <system_setup+0x68>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d100      	bne.n	8001360 <system_setup+0x34>
		while (1);
 800135e:	e7fe      	b.n	800135e <system_setup+0x32>
	}

	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8001360:	f000 ff56 	bl	8002210 <voltage_monitor_init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <system_setup+0x40>
		while (1);
 800136a:	e7fe      	b.n	800136a <system_setup+0x3e>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800136c:	2100      	movs	r1, #0
 800136e:	480a      	ldr	r0, [pc, #40]	; (8001398 <system_setup+0x6c>)
 8001370:	f00a fba0 	bl	800bab4 <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8001374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001378:	f44f 729c 	mov.w	r2, #312	; 0x138
 800137c:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 800137e:	f000 f8b7 	bl	80014f0 <init_adc_dma>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d100      	bne.n	800138a <system_setup+0x5e>
		while (1);
 8001388:	e7fe      	b.n	8001388 <system_setup+0x5c>
	}


}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	240002fc 	.word	0x240002fc
 8001394:	24000300 	.word	0x24000300
 8001398:	2400055c 	.word	0x2400055c

0800139c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ae:	f001 f953 	bl	8002658 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40001000 	.word	0x40001000

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>
	...

080013cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80013e0:	2300      	movs	r3, #0
 80013e2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013e4:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_RTC_Init+0xb4>)
 80013e6:	4a27      	ldr	r2, [pc, #156]	; (8001484 <MX_RTC_Init+0xb8>)
 80013e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <MX_RTC_Init+0xb4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_RTC_Init+0xb4>)
 80013f2:	2263      	movs	r2, #99	; 0x63
 80013f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_RTC_Init+0xb4>)
 80013f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80013fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_RTC_Init+0xb4>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_RTC_Init+0xb4>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_RTC_Init+0xb4>)
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_RTC_Init+0xb4>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001416:	481a      	ldr	r0, [pc, #104]	; (8001480 <MX_RTC_Init+0xb4>)
 8001418:	f009 fee0 	bl	800b1dc <HAL_RTC_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001422:	f7ff ffcd 	bl	80013c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001426:	2300      	movs	r3, #0
 8001428:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800142a:	2300      	movs	r3, #0
 800142c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800142e:	2300      	movs	r3, #0
 8001430:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2201      	movs	r2, #1
 800143e:	4619      	mov	r1, r3
 8001440:	480f      	ldr	r0, [pc, #60]	; (8001480 <MX_RTC_Init+0xb4>)
 8001442:	f009 ff4d 	bl	800b2e0 <HAL_RTC_SetTime>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800144c:	f7ff ffb8 	bl	80013c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001450:	2301      	movs	r3, #1
 8001452:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001454:	2301      	movs	r3, #1
 8001456:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001458:	2301      	movs	r3, #1
 800145a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800145c:	2300      	movs	r3, #0
 800145e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	2201      	movs	r2, #1
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_RTC_Init+0xb4>)
 8001468:	f009 ffd8 	bl	800b41c <HAL_RTC_SetDate>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001472:	f7ff ffa5 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	24000304 	.word	0x24000304
 8001484:	58004000 	.word	0x58004000

08001488 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0b2      	sub	sp, #200	; 0xc8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	22c0      	movs	r2, #192	; 0xc0
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f010 f989 	bl	80117b0 <memset>
  if(rtcHandle->Instance==RTC)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <HAL_RTC_MspInit+0x5c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d118      	bne.n	80014da <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_RTC_MspInit+0x60>)
 80014b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f007 f98e 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80014ca:	f7ff ff79 	bl	80013c0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <HAL_RTC_MspInit+0x64>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_RTC_MspInit+0x64>)
 80014d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014da:	bf00      	nop
 80014dc:	37c8      	adds	r7, #200	; 0xc8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	58004000 	.word	0x58004000
 80014e8:	00019300 	.word	0x00019300
 80014ec:	58024400 	.word	0x58024400

080014f0 <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80014fa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80014fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001502:	4817      	ldr	r0, [pc, #92]	; (8001560 <init_adc_dma+0x70>)
 8001504:	f002 fbbc 	bl	8003c80 <HAL_ADCEx_Calibration_Start>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800150e:	f7ff ff57 	bl	80013c0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001512:	220b      	movs	r2, #11
 8001514:	4913      	ldr	r1, [pc, #76]	; (8001564 <init_adc_dma+0x74>)
 8001516:	4812      	ldr	r0, [pc, #72]	; (8001560 <init_adc_dma+0x70>)
 8001518:	f001 fc90 	bl	8002e3c <HAL_ADC_Start_DMA>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001522:	f7ff ff4d 	bl	80013c0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001526:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800152a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <init_adc_dma+0x78>)
 8001530:	f002 fba6 	bl	8003c80 <HAL_ADCEx_Calibration_Start>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800153a:	f7ff ff41 	bl	80013c0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800153e:	2204      	movs	r2, #4
 8001540:	490a      	ldr	r1, [pc, #40]	; (800156c <init_adc_dma+0x7c>)
 8001542:	4809      	ldr	r0, [pc, #36]	; (8001568 <init_adc_dma+0x78>)
 8001544:	f001 fc7a 	bl	8002e3c <HAL_ADC_Start_DMA>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800154e:	f7ff ff37 	bl	80013c0 <Error_Handler>
	}
	status = 1;
 8001552:	2301      	movs	r3, #1
 8001554:	71fb      	strb	r3, [r7, #7]

	return status;
 8001556:	79fb      	ldrb	r3, [r7, #7]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2400003c 	.word	0x2400003c
 8001564:	24000340 	.word	0x24000340
 8001568:	240000a0 	.word	0x240000a0
 800156c:	24000360 	.word	0x24000360

08001570 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <MX_SPI1_Init+0xa8>)
 8001576:	4a29      	ldr	r2, [pc, #164]	; (800161c <MX_SPI1_Init+0xac>)
 8001578:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800157a:	4b27      	ldr	r3, [pc, #156]	; (8001618 <MX_SPI1_Init+0xa8>)
 800157c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001580:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001582:	4b25      	ldr	r3, [pc, #148]	; (8001618 <MX_SPI1_Init+0xa8>)
 8001584:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001588:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <MX_SPI1_Init+0xa8>)
 800158c:	220f      	movs	r2, #15
 800158e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001590:	4b21      	ldr	r3, [pc, #132]	; (8001618 <MX_SPI1_Init+0xa8>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <MX_SPI1_Init+0xa8>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_SPI1_Init+0xa8>)
 800159e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80015a4:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015a6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80015aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_SPI1_Init+0xa8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_SPI1_Init+0xa8>)
 8001604:	f00a f848 	bl	800b698 <HAL_SPI_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800160e:	f7ff fed7 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	24000368 	.word	0x24000368
 800161c:	40013000 	.word	0x40013000

08001620 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <MX_SPI2_Init+0xa8>)
 8001626:	4a29      	ldr	r2, [pc, #164]	; (80016cc <MX_SPI2_Init+0xac>)
 8001628:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800162a:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <MX_SPI2_Init+0xa8>)
 800162c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001630:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <MX_SPI2_Init+0xa8>)
 8001634:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001638:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800163a:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <MX_SPI2_Init+0xa8>)
 800163c:	220f      	movs	r2, #15
 800163e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <MX_SPI2_Init+0xa8>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <MX_SPI2_Init+0xa8>)
 8001648:	2200      	movs	r2, #0
 800164a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <MX_SPI2_Init+0xa8>)
 800164e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001652:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <MX_SPI2_Init+0xa8>)
 8001656:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800165a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_SPI2_Init+0xa8>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <MX_SPI2_Init+0xa8>)
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_SPI2_Init+0xa8>)
 800166a:	2200      	movs	r2, #0
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_SPI2_Init+0xa8>)
 8001670:	2200      	movs	r2, #0
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_SPI2_Init+0xa8>)
 8001676:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_SPI2_Init+0xa8>)
 800167e:	2200      	movs	r2, #0
 8001680:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_SPI2_Init+0xa8>)
 8001684:	2200      	movs	r2, #0
 8001686:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_SPI2_Init+0xa8>)
 800168a:	2200      	movs	r2, #0
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_SPI2_Init+0xa8>)
 8001690:	2200      	movs	r2, #0
 8001692:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_SPI2_Init+0xa8>)
 8001696:	2200      	movs	r2, #0
 8001698:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_SPI2_Init+0xa8>)
 800169c:	2200      	movs	r2, #0
 800169e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_SPI2_Init+0xa8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_SPI2_Init+0xa8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_SPI2_Init+0xa8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_SPI2_Init+0xa8>)
 80016b4:	f009 fff0 	bl	800b698 <HAL_SPI_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80016be:	f7ff fe7f 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	240003f0 	.word	0x240003f0
 80016cc:	40003800 	.word	0x40003800

080016d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b0bc      	sub	sp, #240	; 0xf0
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e8:	f107 0318 	add.w	r3, r7, #24
 80016ec:	22c0      	movs	r2, #192	; 0xc0
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f010 f85d 	bl	80117b0 <memset>
  if(spiHandle->Instance==SPI1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a4c      	ldr	r2, [pc, #304]	; (800182c <HAL_SPI_MspInit+0x15c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d145      	bne.n	800178c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001700:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800170c:	2300      	movs	r3, #0
 800170e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001710:	f107 0318 	add.w	r3, r7, #24
 8001714:	4618      	mov	r0, r3
 8001716:	f007 f863 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001720:	f7ff fe4e 	bl	80013c0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001724:	4b42      	ldr	r3, [pc, #264]	; (8001830 <HAL_SPI_MspInit+0x160>)
 8001726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800172a:	4a41      	ldr	r2, [pc, #260]	; (8001830 <HAL_SPI_MspInit+0x160>)
 800172c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001730:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001734:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <HAL_SPI_MspInit+0x160>)
 8001736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800173a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_SPI_MspInit+0x160>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001748:	4a39      	ldr	r2, [pc, #228]	; (8001830 <HAL_SPI_MspInit+0x160>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <HAL_SPI_MspInit+0x160>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001760:	2318      	movs	r3, #24
 8001762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001778:	2305      	movs	r3, #5
 800177a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001782:	4619      	mov	r1, r3
 8001784:	482b      	ldr	r0, [pc, #172]	; (8001834 <HAL_SPI_MspInit+0x164>)
 8001786:	f005 fca7 	bl	80070d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800178a:	e04a      	b.n	8001822 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a29      	ldr	r2, [pc, #164]	; (8001838 <HAL_SPI_MspInit+0x168>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d145      	bne.n	8001822 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	4618      	mov	r0, r3
 80017ac:	f007 f818 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80017b6:	f7ff fe03 	bl	80013c0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_SPI_MspInit+0x160>)
 80017bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c0:	4a1b      	ldr	r2, [pc, #108]	; (8001830 <HAL_SPI_MspInit+0x160>)
 80017c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_SPI_MspInit+0x160>)
 80017cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_SPI_MspInit+0x160>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017de:	4a14      	ldr	r2, [pc, #80]	; (8001830 <HAL_SPI_MspInit+0x160>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_SPI_MspInit+0x160>)
 80017ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80017f6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80017fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001810:	2305      	movs	r3, #5
 8001812:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_SPI_MspInit+0x164>)
 800181e:	f005 fc5b 	bl	80070d8 <HAL_GPIO_Init>
}
 8001822:	bf00      	nop
 8001824:	37f0      	adds	r7, #240	; 0xf0
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40013000 	.word	0x40013000
 8001830:	58024400 	.word	0x58024400
 8001834:	58020400 	.word	0x58020400
 8001838:	40003800 	.word	0x40003800

0800183c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_MspInit+0x38>)
 8001844:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_MspInit+0x38>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_MspInit+0x38>)
 8001854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	210f      	movs	r1, #15
 8001864:	f06f 0001 	mvn.w	r0, #1
 8001868:	f002 fc04 	bl	8004074 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	58024400 	.word	0x58024400

08001878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b090      	sub	sp, #64	; 0x40
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	d827      	bhi.n	80018d6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001886:	2200      	movs	r2, #0
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	2036      	movs	r0, #54	; 0x36
 800188c:	f002 fbf2 	bl	8004074 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001890:	2036      	movs	r0, #54	; 0x36
 8001892:	f002 fc09 	bl	80040a8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001896:	4a29      	ldr	r2, [pc, #164]	; (800193c <HAL_InitTick+0xc4>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_InitTick+0xc8>)
 800189e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018a2:	4a27      	ldr	r2, [pc, #156]	; (8001940 <HAL_InitTick+0xc8>)
 80018a4:	f043 0310 	orr.w	r3, r3, #16
 80018a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <HAL_InitTick+0xc8>)
 80018ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018ba:	f107 0210 	add.w	r2, r7, #16
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f006 ff49 	bl	800875c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d106      	bne.n	80018e2 <HAL_InitTick+0x6a>
 80018d4:	e001      	b.n	80018da <HAL_InitTick+0x62>
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e02b      	b.n	8001932 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018da:	f006 ff13 	bl	8008704 <HAL_RCC_GetPCLK1Freq>
 80018de:	63f8      	str	r0, [r7, #60]	; 0x3c
 80018e0:	e004      	b.n	80018ec <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018e2:	f006 ff0f 	bl	8008704 <HAL_RCC_GetPCLK1Freq>
 80018e6:	4603      	mov	r3, r0
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ee:	4a15      	ldr	r2, [pc, #84]	; (8001944 <HAL_InitTick+0xcc>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9b      	lsrs	r3, r3, #18
 80018f6:	3b01      	subs	r3, #1
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_InitTick+0xd0>)
 80018fc:	4a13      	ldr	r2, [pc, #76]	; (800194c <HAL_InitTick+0xd4>)
 80018fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_InitTick+0xd0>)
 8001902:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001906:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001908:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_InitTick+0xd0>)
 800190a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_InitTick+0xd0>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_InitTick+0xd0>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800191a:	480b      	ldr	r0, [pc, #44]	; (8001948 <HAL_InitTick+0xd0>)
 800191c:	f009 fffb 	bl	800b916 <HAL_TIM_Base_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d104      	bne.n	8001930 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001926:	4808      	ldr	r0, [pc, #32]	; (8001948 <HAL_InitTick+0xd0>)
 8001928:	f00a f84c 	bl	800b9c4 <HAL_TIM_Base_Start_IT>
 800192c:	4603      	mov	r3, r0
 800192e:	e000      	b.n	8001932 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	3740      	adds	r7, #64	; 0x40
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	24000008 	.word	0x24000008
 8001940:	58024400 	.word	0x58024400
 8001944:	431bde83 	.word	0x431bde83
 8001948:	24000478 	.word	0x24000478
 800194c:	40001000 	.word	0x40001000

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <DMA1_Stream0_IRQHandler+0x10>)
 8001982:	f004 f897 	bl	8005ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	24000104 	.word	0x24000104

08001990 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <DMA1_Stream1_IRQHandler+0x10>)
 8001996:	f004 f88d 	bl	8005ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2400017c 	.word	0x2400017c

080019a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <DMA1_Stream2_IRQHandler+0x10>)
 80019aa:	f004 f883 	bl	8005ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2400063c 	.word	0x2400063c

080019b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <DMA1_Stream5_IRQHandler+0x10>)
 80019be:	f004 f879 	bl	8005ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	24000208 	.word	0x24000208

080019cc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <TIM1_BRK_IRQHandler+0x10>)
 80019d2:	f00a fa2a 	bl	800be2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	240004c4 	.word	0x240004c4

080019e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <TIM1_UP_IRQHandler+0x10>)
 80019e6:	f00a fa20 	bl	800be2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	240004c4 	.word	0x240004c4

080019f4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM1_TRG_COM_IRQHandler+0x10>)
 80019fa:	f00a fa16 	bl	800be2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	240004c4 	.word	0x240004c4

08001a08 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <TIM1_CC_IRQHandler+0x10>)
 8001a0e:	f00a fa0c 	bl	800be2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	240004c4 	.word	0x240004c4

08001a1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <TIM2_IRQHandler+0x10>)
 8001a22:	f00a fa02 	bl	800be2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	24000510 	.word	0x24000510

08001a30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <TIM3_IRQHandler+0x10>)
 8001a36:	f00a f9f8 	bl	800be2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2400055c 	.word	0x2400055c

08001a44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <USART1_IRQHandler+0x10>)
 8001a4a:	f00b fae3 	bl	800d014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	240005a8 	.word	0x240005a8

08001a58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <TIM6_DAC_IRQHandler+0x20>)
 8001a5e:	791b      	ldrb	r3, [r3, #4]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8001a66:	4804      	ldr	r0, [pc, #16]	; (8001a78 <TIM6_DAC_IRQHandler+0x20>)
 8001a68:	f002 fb4e 	bl	8004108 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001a6c:	4803      	ldr	r0, [pc, #12]	; (8001a7c <TIM6_DAC_IRQHandler+0x24>)
 8001a6e:	f00a f9dc 	bl	800be2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	240001f4 	.word	0x240001f4
 8001a7c:	24000478 	.word	0x24000478

08001a80 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001a84:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <SystemInit+0xe4>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	4a36      	ldr	r2, [pc, #216]	; (8001b64 <SystemInit+0xe4>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <SystemInit+0xe8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d807      	bhi.n	8001ab0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001aa0:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <SystemInit+0xe8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 030f 	bic.w	r3, r3, #15
 8001aa8:	4a2f      	ldr	r2, [pc, #188]	; (8001b68 <SystemInit+0xe8>)
 8001aaa:	f043 0307 	orr.w	r3, r3, #7
 8001aae:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <SystemInit+0xec>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <SystemInit+0xec>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <SystemInit+0xec>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <SystemInit+0xec>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4929      	ldr	r1, [pc, #164]	; (8001b6c <SystemInit+0xec>)
 8001ac8:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <SystemInit+0xf0>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <SystemInit+0xe8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <SystemInit+0xe8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 030f 	bic.w	r3, r3, #15
 8001ae2:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <SystemInit+0xe8>)
 8001ae4:	f043 0307 	orr.w	r3, r3, #7
 8001ae8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <SystemInit+0xec>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <SystemInit+0xec>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <SystemInit+0xec>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <SystemInit+0xec>)
 8001afe:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <SystemInit+0xf4>)
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <SystemInit+0xec>)
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <SystemInit+0xf8>)
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <SystemInit+0xec>)
 8001b0a:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <SystemInit+0xfc>)
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <SystemInit+0xec>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <SystemInit+0xec>)
 8001b16:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <SystemInit+0xfc>)
 8001b18:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <SystemInit+0xec>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <SystemInit+0xec>)
 8001b22:	4a16      	ldr	r2, [pc, #88]	; (8001b7c <SystemInit+0xfc>)
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <SystemInit+0xec>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <SystemInit+0xec>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <SystemInit+0xec>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <SystemInit+0xec>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <SystemInit+0x100>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <SystemInit+0x104>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b4a:	d202      	bcs.n	8001b52 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <SystemInit+0x108>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <SystemInit+0x10c>)
 8001b54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00
 8001b68:	52002000 	.word	0x52002000
 8001b6c:	58024400 	.word	0x58024400
 8001b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b74:	02020200 	.word	0x02020200
 8001b78:	01ff0000 	.word	0x01ff0000
 8001b7c:	01010280 	.word	0x01010280
 8001b80:	5c001000 	.word	0x5c001000
 8001b84:	ffff0000 	.word	0xffff0000
 8001b88:	51008108 	.word	0x51008108
 8001b8c:	52004000 	.word	0x52004000

08001b90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b09a      	sub	sp, #104	; 0x68
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
 8001bc0:	615a      	str	r2, [r3, #20]
 8001bc2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	222c      	movs	r2, #44	; 0x2c
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f00f fdf0 	bl	80117b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bd0:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001bd2:	4a45      	ldr	r2, [pc, #276]	; (8001ce8 <MX_TIM1_Init+0x158>)
 8001bd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001bd6:	4b43      	ldr	r3, [pc, #268]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001bd8:	2231      	movs	r2, #49	; 0x31
 8001bda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001be2:	4b40      	ldr	r3, [pc, #256]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001be4:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001be8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b3e      	ldr	r3, [pc, #248]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bf0:	4b3c      	ldr	r3, [pc, #240]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bfc:	4839      	ldr	r0, [pc, #228]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001bfe:	f009 fe8a 	bl	800b916 <HAL_TIM_Base_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c08:	f7ff fbda 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c10:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c16:	4619      	mov	r1, r3
 8001c18:	4832      	ldr	r0, [pc, #200]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001c1a:	f00a fb21 	bl	800c260 <HAL_TIM_ConfigClockSource>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c24:	f7ff fbcc 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c28:	482e      	ldr	r0, [pc, #184]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001c2a:	f00a f89d 	bl	800bd68 <HAL_TIM_PWM_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c34:	f7ff fbc4 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4826      	ldr	r0, [pc, #152]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001c4c:	f00b f868 	bl	800cd20 <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c56:	f7ff fbb3 	bl	80013c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5a:	2360      	movs	r3, #96	; 0x60
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001c5e:	f240 13df 	movw	r3, #479	; 0x1df
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4818      	ldr	r0, [pc, #96]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001c82:	f00a f9d9 	bl	800c038 <HAL_TIM_PWM_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001c8c:	f7ff fb98 	bl	80013c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001cc6:	f00b f8b9 	bl	800ce3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001cd0:	f7ff fb76 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cd4:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <MX_TIM1_Init+0x154>)
 8001cd6:	f000 f949 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 8001cda:	bf00      	nop
 8001cdc:	3768      	adds	r7, #104	; 0x68
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	240004c4 	.word	0x240004c4
 8001ce8:	40010000 	.word	0x40010000

08001cec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08e      	sub	sp, #56	; 0x38
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	615a      	str	r2, [r3, #20]
 8001d1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <MX_TIM2_Init+0xe8>)
 8001d20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001d26:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <MX_TIM2_Init+0xe8>)
 8001d28:	2231      	movs	r2, #49	; 0x31
 8001d2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2c:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <MX_TIM2_Init+0xe8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001d32:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <MX_TIM2_Init+0xe8>)
 8001d34:	f640 4234 	movw	r2, #3124	; 0xc34
 8001d38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <MX_TIM2_Init+0xe8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <MX_TIM2_Init+0xe8>)
 8001d42:	2280      	movs	r2, #128	; 0x80
 8001d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d46:	4823      	ldr	r0, [pc, #140]	; (8001dd4 <MX_TIM2_Init+0xe8>)
 8001d48:	f009 fde5 	bl	800b916 <HAL_TIM_Base_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001d52:	f7ff fb35 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d60:	4619      	mov	r1, r3
 8001d62:	481c      	ldr	r0, [pc, #112]	; (8001dd4 <MX_TIM2_Init+0xe8>)
 8001d64:	f00a fa7c 	bl	800c260 <HAL_TIM_ConfigClockSource>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001d6e:	f7ff fb27 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d72:	4818      	ldr	r0, [pc, #96]	; (8001dd4 <MX_TIM2_Init+0xe8>)
 8001d74:	f009 fff8 	bl	800bd68 <HAL_TIM_PWM_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001d7e:	f7ff fb1f 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d82:	2320      	movs	r3, #32
 8001d84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4810      	ldr	r0, [pc, #64]	; (8001dd4 <MX_TIM2_Init+0xe8>)
 8001d92:	f00a ffc5 	bl	800cd20 <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d9c:	f7ff fb10 	bl	80013c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da0:	2360      	movs	r3, #96	; 0x60
 8001da2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001db0:	463b      	mov	r3, r7
 8001db2:	220c      	movs	r2, #12
 8001db4:	4619      	mov	r1, r3
 8001db6:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <MX_TIM2_Init+0xe8>)
 8001db8:	f00a f93e 	bl	800c038 <HAL_TIM_PWM_ConfigChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001dc2:	f7ff fafd 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dc6:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <MX_TIM2_Init+0xe8>)
 8001dc8:	f000 f8d0 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 8001dcc:	bf00      	nop
 8001dce:	3738      	adds	r7, #56	; 0x38
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	24000510 	.word	0x24000510

08001dd8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <MX_TIM3_Init+0x94>)
 8001df8:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <MX_TIM3_Init+0x98>)
 8001dfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <MX_TIM3_Init+0x94>)
 8001dfe:	2263      	movs	r2, #99	; 0x63
 8001e00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <MX_TIM3_Init+0x94>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <MX_TIM3_Init+0x94>)
 8001e0a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001e0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <MX_TIM3_Init+0x94>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <MX_TIM3_Init+0x94>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e1c:	4813      	ldr	r0, [pc, #76]	; (8001e6c <MX_TIM3_Init+0x94>)
 8001e1e:	f009 fd7a 	bl	800b916 <HAL_TIM_Base_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e28:	f7ff faca 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e32:	f107 0310 	add.w	r3, r7, #16
 8001e36:	4619      	mov	r1, r3
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <MX_TIM3_Init+0x94>)
 8001e3a:	f00a fa11 	bl	800c260 <HAL_TIM_ConfigClockSource>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e44:	f7ff fabc 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_TIM3_Init+0x94>)
 8001e56:	f00a ff63 	bl	800cd20 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e60:	f7ff faae 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	2400055c 	.word	0x2400055c
 8001e70:	40000400 	.word	0x40000400

08001e74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a37      	ldr	r2, [pc, #220]	; (8001f60 <HAL_TIM_Base_MspInit+0xec>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12f      	bne.n	8001ee6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_TIM_Base_MspInit+0xf0>)
 8001e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e8c:	4a35      	ldr	r2, [pc, #212]	; (8001f64 <HAL_TIM_Base_MspInit+0xf0>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_TIM_Base_MspInit+0xf0>)
 8001e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2105      	movs	r1, #5
 8001ea8:	2018      	movs	r0, #24
 8001eaa:	f002 f8e3 	bl	8004074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001eae:	2018      	movs	r0, #24
 8001eb0:	f002 f8fa 	bl	80040a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2105      	movs	r1, #5
 8001eb8:	2019      	movs	r0, #25
 8001eba:	f002 f8db 	bl	8004074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ebe:	2019      	movs	r0, #25
 8001ec0:	f002 f8f2 	bl	80040a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2105      	movs	r1, #5
 8001ec8:	201a      	movs	r0, #26
 8001eca:	f002 f8d3 	bl	8004074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001ece:	201a      	movs	r0, #26
 8001ed0:	f002 f8ea 	bl	80040a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2105      	movs	r1, #5
 8001ed8:	201b      	movs	r0, #27
 8001eda:	f002 f8cb 	bl	8004074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ede:	201b      	movs	r0, #27
 8001ee0:	f002 f8e2 	bl	80040a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ee4:	e038      	b.n	8001f58 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eee:	d117      	bne.n	8001f20 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_TIM_Base_MspInit+0xf0>)
 8001ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef6:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <HAL_TIM_Base_MspInit+0xf0>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_TIM_Base_MspInit+0xf0>)
 8001f02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2105      	movs	r1, #5
 8001f12:	201c      	movs	r0, #28
 8001f14:	f002 f8ae 	bl	8004074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f18:	201c      	movs	r0, #28
 8001f1a:	f002 f8c5 	bl	80040a8 <HAL_NVIC_EnableIRQ>
}
 8001f1e:	e01b      	b.n	8001f58 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <HAL_TIM_Base_MspInit+0xf4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d116      	bne.n	8001f58 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_TIM_Base_MspInit+0xf0>)
 8001f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f30:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <HAL_TIM_Base_MspInit+0xf0>)
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_TIM_Base_MspInit+0xf0>)
 8001f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2105      	movs	r1, #5
 8001f4c:	201d      	movs	r0, #29
 8001f4e:	f002 f891 	bl	8004074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f52:	201d      	movs	r0, #29
 8001f54:	f002 f8a8 	bl	80040a8 <HAL_NVIC_EnableIRQ>
}
 8001f58:	bf00      	nop
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40010000 	.word	0x40010000
 8001f64:	58024400 	.word	0x58024400
 8001f68:	40000400 	.word	0x40000400

08001f6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a26      	ldr	r2, [pc, #152]	; (8002024 <HAL_TIM_MspPostInit+0xb8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d120      	bne.n	8001fd0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	4b26      	ldr	r3, [pc, #152]	; (8002028 <HAL_TIM_MspPostInit+0xbc>)
 8001f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f94:	4a24      	ldr	r2, [pc, #144]	; (8002028 <HAL_TIM_MspPostInit+0xbc>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_TIM_MspPostInit+0xbc>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4818      	ldr	r0, [pc, #96]	; (800202c <HAL_TIM_MspPostInit+0xc0>)
 8001fca:	f005 f885 	bl	80070d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fce:	e024      	b.n	800201a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd8:	d11f      	bne.n	800201a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_TIM_MspPostInit+0xbc>)
 8001fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe0:	4a11      	ldr	r2, [pc, #68]	; (8002028 <HAL_TIM_MspPostInit+0xbc>)
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <HAL_TIM_MspPostInit+0xbc>)
 8001fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ff8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800200a:	2301      	movs	r3, #1
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	4806      	ldr	r0, [pc, #24]	; (8002030 <HAL_TIM_MspPostInit+0xc4>)
 8002016:	f005 f85f 	bl	80070d8 <HAL_GPIO_Init>
}
 800201a:	bf00      	nop
 800201c:	3728      	adds	r7, #40	; 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40010000 	.word	0x40010000
 8002028:	58024400 	.word	0x58024400
 800202c:	58020000 	.word	0x58020000
 8002030:	58020400 	.word	0x58020400

08002034 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 800203a:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <MX_USART1_UART_Init+0x94>)
 800203c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 8002040:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002044:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002046:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002052:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 800205a:	220c      	movs	r2, #12
 800205c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800207c:	4811      	ldr	r0, [pc, #68]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 800207e:	f00a ff79 	bl	800cf74 <HAL_UART_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002088:	f7ff f99a 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800208c:	2100      	movs	r1, #0
 800208e:	480d      	ldr	r0, [pc, #52]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 8002090:	f00c fbba 	bl	800e808 <HAL_UARTEx_SetTxFifoThreshold>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800209a:	f7ff f991 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800209e:	2100      	movs	r1, #0
 80020a0:	4808      	ldr	r0, [pc, #32]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 80020a2:	f00c fbef 	bl	800e884 <HAL_UARTEx_SetRxFifoThreshold>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020ac:	f7ff f988 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_USART1_UART_Init+0x90>)
 80020b2:	f00c fb70 	bl	800e796 <HAL_UARTEx_DisableFifoMode>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020bc:	f7ff f980 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	240005a8 	.word	0x240005a8
 80020c8:	40011000 	.word	0x40011000

080020cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b0ba      	sub	sp, #232	; 0xe8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	22c0      	movs	r2, #192	; 0xc0
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f00f fb5f 	bl	80117b0 <memset>
  if(uartHandle->Instance==USART1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a41      	ldr	r2, [pc, #260]	; (80021fc <HAL_UART_MspInit+0x130>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d17b      	bne.n	80021f4 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020fc:	f04f 0201 	mov.w	r2, #1
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8002108:	2318      	movs	r3, #24
 800210a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	4618      	mov	r0, r3
 8002114:	f006 fb64 	bl	80087e0 <HAL_RCCEx_PeriphCLKConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800211e:	f7ff f94f 	bl	80013c0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002122:	4b37      	ldr	r3, [pc, #220]	; (8002200 <HAL_UART_MspInit+0x134>)
 8002124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002128:	4a35      	ldr	r2, [pc, #212]	; (8002200 <HAL_UART_MspInit+0x134>)
 800212a:	f043 0310 	orr.w	r3, r3, #16
 800212e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002132:	4b33      	ldr	r3, [pc, #204]	; (8002200 <HAL_UART_MspInit+0x134>)
 8002134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002140:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <HAL_UART_MspInit+0x134>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002146:	4a2e      	ldr	r2, [pc, #184]	; (8002200 <HAL_UART_MspInit+0x134>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002150:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <HAL_UART_MspInit+0x134>)
 8002152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800215e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002178:	2307      	movs	r3, #7
 800217a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002182:	4619      	mov	r1, r3
 8002184:	481f      	ldr	r0, [pc, #124]	; (8002204 <HAL_UART_MspInit+0x138>)
 8002186:	f004 ffa7 	bl	80070d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <HAL_UART_MspInit+0x13c>)
 800218c:	4a1f      	ldr	r2, [pc, #124]	; (800220c <HAL_UART_MspInit+0x140>)
 800218e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_UART_MspInit+0x13c>)
 8002192:	222a      	movs	r2, #42	; 0x2a
 8002194:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <HAL_UART_MspInit+0x13c>)
 8002198:	2240      	movs	r2, #64	; 0x40
 800219a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_UART_MspInit+0x13c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021a2:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_UART_MspInit+0x13c>)
 80021a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_UART_MspInit+0x13c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_UART_MspInit+0x13c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_UART_MspInit+0x13c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_UART_MspInit+0x13c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_UART_MspInit+0x13c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021c8:	480f      	ldr	r0, [pc, #60]	; (8002208 <HAL_UART_MspInit+0x13c>)
 80021ca:	f002 f949 	bl	8004460 <HAL_DMA_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80021d4:	f7ff f8f4 	bl	80013c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <HAL_UART_MspInit+0x13c>)
 80021dc:	67da      	str	r2, [r3, #124]	; 0x7c
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_UART_MspInit+0x13c>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2105      	movs	r1, #5
 80021e8:	2025      	movs	r0, #37	; 0x25
 80021ea:	f001 ff43 	bl	8004074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021ee:	2025      	movs	r0, #37	; 0x25
 80021f0:	f001 ff5a 	bl	80040a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80021f4:	bf00      	nop
 80021f6:	37e8      	adds	r7, #232	; 0xe8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40011000 	.word	0x40011000
 8002200:	58024400 	.word	0x58024400
 8002204:	58020000 	.word	0x58020000
 8002208:	2400063c 	.word	0x2400063c
 800220c:	40020040 	.word	0x40020040

08002210 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 800221a:	4bc2      	ldr	r3, [pc, #776]	; (8002524 <voltage_monitor_init+0x314>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8002220:	4bc0      	ldr	r3, [pc, #768]	; (8002524 <voltage_monitor_init+0x314>)
 8002222:	2200      	movs	r2, #0
 8002224:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8002226:	4bbf      	ldr	r3, [pc, #764]	; (8002524 <voltage_monitor_init+0x314>)
 8002228:	2201      	movs	r2, #1
 800222a:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 800222c:	4bbd      	ldr	r3, [pc, #756]	; (8002524 <voltage_monitor_init+0x314>)
 800222e:	2200      	movs	r2, #0
 8002230:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002232:	4bbc      	ldr	r3, [pc, #752]	; (8002524 <voltage_monitor_init+0x314>)
 8002234:	f242 7210 	movw	r2, #10000	; 0x2710
 8002238:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 800223a:	4bba      	ldr	r3, [pc, #744]	; (8002524 <voltage_monitor_init+0x314>)
 800223c:	2200      	movs	r2, #0
 800223e:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8002240:	4bb8      	ldr	r3, [pc, #736]	; (8002524 <voltage_monitor_init+0x314>)
 8002242:	2201      	movs	r2, #1
 8002244:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8002246:	4bb7      	ldr	r3, [pc, #732]	; (8002524 <voltage_monitor_init+0x314>)
 8002248:	2200      	movs	r2, #0
 800224a:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 800224c:	4bb5      	ldr	r3, [pc, #724]	; (8002524 <voltage_monitor_init+0x314>)
 800224e:	2201      	movs	r2, #1
 8002250:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8002252:	4bb4      	ldr	r3, [pc, #720]	; (8002524 <voltage_monitor_init+0x314>)
 8002254:	2200      	movs	r2, #0
 8002256:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002258:	4bb2      	ldr	r3, [pc, #712]	; (8002524 <voltage_monitor_init+0x314>)
 800225a:	f242 7210 	movw	r2, #10000	; 0x2710
 800225e:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8002260:	4bb0      	ldr	r3, [pc, #704]	; (8002524 <voltage_monitor_init+0x314>)
 8002262:	2200      	movs	r2, #0
 8002264:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8002266:	4baf      	ldr	r3, [pc, #700]	; (8002524 <voltage_monitor_init+0x314>)
 8002268:	2202      	movs	r2, #2
 800226a:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 800226c:	4bad      	ldr	r3, [pc, #692]	; (8002524 <voltage_monitor_init+0x314>)
 800226e:	2200      	movs	r2, #0
 8002270:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8002272:	4bac      	ldr	r3, [pc, #688]	; (8002524 <voltage_monitor_init+0x314>)
 8002274:	2201      	movs	r2, #1
 8002276:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8002278:	4baa      	ldr	r3, [pc, #680]	; (8002524 <voltage_monitor_init+0x314>)
 800227a:	2200      	movs	r2, #0
 800227c:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 800227e:	4ba9      	ldr	r3, [pc, #676]	; (8002524 <voltage_monitor_init+0x314>)
 8002280:	f242 7210 	movw	r2, #10000	; 0x2710
 8002284:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8002286:	4ba7      	ldr	r3, [pc, #668]	; (8002524 <voltage_monitor_init+0x314>)
 8002288:	2200      	movs	r2, #0
 800228a:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 800228c:	4ba5      	ldr	r3, [pc, #660]	; (8002524 <voltage_monitor_init+0x314>)
 800228e:	2203      	movs	r2, #3
 8002290:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8002292:	4ba4      	ldr	r3, [pc, #656]	; (8002524 <voltage_monitor_init+0x314>)
 8002294:	2200      	movs	r2, #0
 8002296:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8002298:	4ba2      	ldr	r3, [pc, #648]	; (8002524 <voltage_monitor_init+0x314>)
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 80022a0:	4ba0      	ldr	r3, [pc, #640]	; (8002524 <voltage_monitor_init+0x314>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 80022a6:	4b9f      	ldr	r3, [pc, #636]	; (8002524 <voltage_monitor_init+0x314>)
 80022a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80022ac:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 80022ae:	4b9d      	ldr	r3, [pc, #628]	; (8002524 <voltage_monitor_init+0x314>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 80022b4:	4b9b      	ldr	r3, [pc, #620]	; (8002524 <voltage_monitor_init+0x314>)
 80022b6:	2204      	movs	r2, #4
 80022b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 80022bc:	4b99      	ldr	r3, [pc, #612]	; (8002524 <voltage_monitor_init+0x314>)
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 80022c4:	4b97      	ldr	r3, [pc, #604]	; (8002524 <voltage_monitor_init+0x314>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 80022cc:	4b95      	ldr	r3, [pc, #596]	; (8002524 <voltage_monitor_init+0x314>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 80022d2:	4b94      	ldr	r3, [pc, #592]	; (8002524 <voltage_monitor_init+0x314>)
 80022d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80022d8:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 80022da:	4b92      	ldr	r3, [pc, #584]	; (8002524 <voltage_monitor_init+0x314>)
 80022dc:	2200      	movs	r2, #0
 80022de:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 80022e0:	4b90      	ldr	r3, [pc, #576]	; (8002524 <voltage_monitor_init+0x314>)
 80022e2:	2205      	movs	r2, #5
 80022e4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 80022e8:	4b8e      	ldr	r3, [pc, #568]	; (8002524 <voltage_monitor_init+0x314>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 80022f0:	4b8c      	ldr	r3, [pc, #560]	; (8002524 <voltage_monitor_init+0x314>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 80022f8:	4b8a      	ldr	r3, [pc, #552]	; (8002524 <voltage_monitor_init+0x314>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 80022fe:	4b89      	ldr	r3, [pc, #548]	; (8002524 <voltage_monitor_init+0x314>)
 8002300:	f242 7210 	movw	r2, #10000	; 0x2710
 8002304:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8002306:	4b87      	ldr	r3, [pc, #540]	; (8002524 <voltage_monitor_init+0x314>)
 8002308:	2200      	movs	r2, #0
 800230a:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 800230c:	4b85      	ldr	r3, [pc, #532]	; (8002524 <voltage_monitor_init+0x314>)
 800230e:	2206      	movs	r2, #6
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8002314:	4b83      	ldr	r3, [pc, #524]	; (8002524 <voltage_monitor_init+0x314>)
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 800231c:	4b81      	ldr	r3, [pc, #516]	; (8002524 <voltage_monitor_init+0x314>)
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8002324:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <voltage_monitor_init+0x314>)
 8002326:	2200      	movs	r2, #0
 8002328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 800232c:	4b7d      	ldr	r3, [pc, #500]	; (8002524 <voltage_monitor_init+0x314>)
 800232e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002332:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8002336:	4b7b      	ldr	r3, [pc, #492]	; (8002524 <voltage_monitor_init+0x314>)
 8002338:	2200      	movs	r2, #0
 800233a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 800233e:	4b79      	ldr	r3, [pc, #484]	; (8002524 <voltage_monitor_init+0x314>)
 8002340:	2207      	movs	r2, #7
 8002342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8002346:	4b77      	ldr	r3, [pc, #476]	; (8002524 <voltage_monitor_init+0x314>)
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 800234e:	4b75      	ldr	r3, [pc, #468]	; (8002524 <voltage_monitor_init+0x314>)
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8002356:	4b73      	ldr	r3, [pc, #460]	; (8002524 <voltage_monitor_init+0x314>)
 8002358:	2200      	movs	r2, #0
 800235a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 800235e:	4b71      	ldr	r3, [pc, #452]	; (8002524 <voltage_monitor_init+0x314>)
 8002360:	f242 7210 	movw	r2, #10000	; 0x2710
 8002364:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8002368:	4b6e      	ldr	r3, [pc, #440]	; (8002524 <voltage_monitor_init+0x314>)
 800236a:	2200      	movs	r2, #0
 800236c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8002370:	4b6c      	ldr	r3, [pc, #432]	; (8002524 <voltage_monitor_init+0x314>)
 8002372:	2208      	movs	r2, #8
 8002374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8002378:	4b6a      	ldr	r3, [pc, #424]	; (8002524 <voltage_monitor_init+0x314>)
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8002380:	4b68      	ldr	r3, [pc, #416]	; (8002524 <voltage_monitor_init+0x314>)
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <voltage_monitor_init+0x314>)
 800238a:	2200      	movs	r2, #0
 800238c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8002390:	4b64      	ldr	r3, [pc, #400]	; (8002524 <voltage_monitor_init+0x314>)
 8002392:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8002396:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 800239a:	4b62      	ldr	r3, [pc, #392]	; (8002524 <voltage_monitor_init+0x314>)
 800239c:	f640 3283 	movw	r2, #2947	; 0xb83
 80023a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 80023a4:	4b5f      	ldr	r3, [pc, #380]	; (8002524 <voltage_monitor_init+0x314>)
 80023a6:	2209      	movs	r2, #9
 80023a8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 80023ac:	4b5d      	ldr	r3, [pc, #372]	; (8002524 <voltage_monitor_init+0x314>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 80023b4:	4b5b      	ldr	r3, [pc, #364]	; (8002524 <voltage_monitor_init+0x314>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <voltage_monitor_init+0x314>)
 80023be:	2200      	movs	r2, #0
 80023c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 80023c4:	4b57      	ldr	r3, [pc, #348]	; (8002524 <voltage_monitor_init+0x314>)
 80023c6:	f640 7245 	movw	r2, #3909	; 0xf45
 80023ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 80023ce:	4b55      	ldr	r3, [pc, #340]	; (8002524 <voltage_monitor_init+0x314>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 80023d6:	4b53      	ldr	r3, [pc, #332]	; (8002524 <voltage_monitor_init+0x314>)
 80023d8:	220a      	movs	r2, #10
 80023da:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 80023de:	4b51      	ldr	r3, [pc, #324]	; (8002524 <voltage_monitor_init+0x314>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 80023e6:	4b4f      	ldr	r3, [pc, #316]	; (8002524 <voltage_monitor_init+0x314>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 80023ee:	4b4d      	ldr	r3, [pc, #308]	; (8002524 <voltage_monitor_init+0x314>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 80023f6:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <voltage_monitor_init+0x314>)
 80023f8:	f640 7245 	movw	r2, #3909	; 0xf45
 80023fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8002400:	4b48      	ldr	r3, [pc, #288]	; (8002524 <voltage_monitor_init+0x314>)
 8002402:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8002406:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 800240a:	4b46      	ldr	r3, [pc, #280]	; (8002524 <voltage_monitor_init+0x314>)
 800240c:	220b      	movs	r2, #11
 800240e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8002412:	4b44      	ldr	r3, [pc, #272]	; (8002524 <voltage_monitor_init+0x314>)
 8002414:	2200      	movs	r2, #0
 8002416:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 800241a:	4b42      	ldr	r3, [pc, #264]	; (8002524 <voltage_monitor_init+0x314>)
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8002422:	4b40      	ldr	r3, [pc, #256]	; (8002524 <voltage_monitor_init+0x314>)
 8002424:	2200      	movs	r2, #0
 8002426:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <voltage_monitor_init+0x314>)
 800242c:	f640 72fb 	movw	r2, #4091	; 0xffb
 8002430:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8002434:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <voltage_monitor_init+0x314>)
 8002436:	f640 6276 	movw	r2, #3702	; 0xe76
 800243a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 800243e:	4b39      	ldr	r3, [pc, #228]	; (8002524 <voltage_monitor_init+0x314>)
 8002440:	220c      	movs	r2, #12
 8002442:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8002446:	4b37      	ldr	r3, [pc, #220]	; (8002524 <voltage_monitor_init+0x314>)
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 800244e:	4b35      	ldr	r3, [pc, #212]	; (8002524 <voltage_monitor_init+0x314>)
 8002450:	2200      	movs	r2, #0
 8002452:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8002456:	4b33      	ldr	r3, [pc, #204]	; (8002524 <voltage_monitor_init+0x314>)
 8002458:	2200      	movs	r2, #0
 800245a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <voltage_monitor_init+0x314>)
 8002460:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002464:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8002468:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <voltage_monitor_init+0x314>)
 800246a:	2200      	movs	r2, #0
 800246c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8002470:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <voltage_monitor_init+0x314>)
 8002472:	220d      	movs	r2, #13
 8002474:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8002478:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <voltage_monitor_init+0x314>)
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8002480:	4b28      	ldr	r3, [pc, #160]	; (8002524 <voltage_monitor_init+0x314>)
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8002488:	4b26      	ldr	r3, [pc, #152]	; (8002524 <voltage_monitor_init+0x314>)
 800248a:	2200      	movs	r2, #0
 800248c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8002490:	4b24      	ldr	r3, [pc, #144]	; (8002524 <voltage_monitor_init+0x314>)
 8002492:	f640 7238 	movw	r2, #3896	; 0xf38
 8002496:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 800249a:	4b22      	ldr	r3, [pc, #136]	; (8002524 <voltage_monitor_init+0x314>)
 800249c:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80024a0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80024a4:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <voltage_monitor_init+0x314>)
 80024a6:	220e      	movs	r2, #14
 80024a8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <voltage_monitor_init+0x314>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <voltage_monitor_init+0x314>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <voltage_monitor_init+0x314>)
 80024be:	2200      	movs	r2, #0
 80024c0:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <voltage_monitor_init+0x314>)
 80024c6:	f640 7245 	movw	r2, #3909	; 0xf45
 80024ca:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <voltage_monitor_init+0x314>)
 80024d0:	f640 52d1 	movw	r2, #3537	; 0xdd1
 80024d4:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <voltage_monitor_init+0x314>)
 80024da:	220f      	movs	r2, #15
 80024dc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <voltage_monitor_init+0x314>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <voltage_monitor_init+0x314>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <voltage_monitor_init+0x314>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <voltage_monitor_init+0x314>)
 80024fa:	f241 0264 	movw	r2, #4196	; 0x1064
 80024fe:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <voltage_monitor_init+0x314>)
 8002504:	2200      	movs	r2, #0
 8002506:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <voltage_monitor_init+0x314>)
 800250c:	2210      	movs	r2, #16
 800250e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <voltage_monitor_init+0x314>)
 8002514:	2200      	movs	r2, #0
 8002516:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 800251a:	4b02      	ldr	r3, [pc, #8]	; (8002524 <voltage_monitor_init+0x314>)
 800251c:	2200      	movs	r2, #0
 800251e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8002522:	e001      	b.n	8002528 <voltage_monitor_init+0x318>
 8002524:	240006b4 	.word	0x240006b4
	rail_monitor[RAIL_n800v].data = 0;
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <voltage_monitor_init+0x378>)
 800252a:	2200      	movs	r2, #0
 800252c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8002530:	4b15      	ldr	r3, [pc, #84]	; (8002588 <voltage_monitor_init+0x378>)
 8002532:	f640 5208 	movw	r2, #3336	; 0xd08
 8002536:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 800253a:	4b13      	ldr	r3, [pc, #76]	; (8002588 <voltage_monitor_init+0x378>)
 800253c:	f640 32ca 	movw	r2, #3018	; 0xbca
 8002540:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <voltage_monitor_init+0x378>)
 8002546:	2211      	movs	r2, #17
 8002548:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <voltage_monitor_init+0x378>)
 800254e:	2200      	movs	r2, #0
 8002550:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <voltage_monitor_init+0x378>)
 8002556:	2201      	movs	r2, #1
 8002558:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <voltage_monitor_init+0x378>)
 800255e:	2200      	movs	r2, #0
 8002560:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <voltage_monitor_init+0x378>)
 8002566:	f242 7210 	movw	r2, #10000	; 0x2710
 800256a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <voltage_monitor_init+0x378>)
 8002570:	2200      	movs	r2, #0
 8002572:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8002576:	2301      	movs	r3, #1
 8002578:	71fb      	strb	r3, [r7, #7]

	return status;
 800257a:	79fb      	ldrb	r3, [r7, #7]
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	240006b4 	.word	0x240006b4

0800258c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800258c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002590:	f7ff fa76 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002594:	480c      	ldr	r0, [pc, #48]	; (80025c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002596:	490d      	ldr	r1, [pc, #52]	; (80025cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002598:	4a0d      	ldr	r2, [pc, #52]	; (80025d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800259c:	e002      	b.n	80025a4 <LoopCopyDataInit>

0800259e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a2:	3304      	adds	r3, #4

080025a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a8:	d3f9      	bcc.n	800259e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025ac:	4c0a      	ldr	r4, [pc, #40]	; (80025d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b0:	e001      	b.n	80025b6 <LoopFillZerobss>

080025b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b4:	3204      	adds	r2, #4

080025b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b8:	d3fb      	bcc.n	80025b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ba:	f00f f8c7 	bl	801174c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025be:	f7fe fdd9 	bl	8001174 <main>
  bx  lr
 80025c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80025c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025cc:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80025d0:	08011a30 	.word	0x08011a30
  ldr r2, =_sbss
 80025d4:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 80025d8:	240050bc 	.word	0x240050bc

080025dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025dc:	e7fe      	b.n	80025dc <ADC3_IRQHandler>
	...

080025e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e6:	2003      	movs	r0, #3
 80025e8:	f001 fd39 	bl	800405e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025ec:	f005 fee0 	bl	80083b0 <HAL_RCC_GetSysClockFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_Init+0x68>)
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	4913      	ldr	r1, [pc, #76]	; (800264c <HAL_Init+0x6c>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
 8002608:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_Init+0x68>)
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <HAL_Init+0x6c>)
 8002614:	5cd3      	ldrb	r3, [r2, r3]
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
 8002620:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <HAL_Init+0x70>)
 8002622:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002624:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <HAL_Init+0x74>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800262a:	2005      	movs	r0, #5
 800262c:	f7ff f924 	bl	8001878 <HAL_InitTick>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e002      	b.n	8002640 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800263a:	f7ff f8ff 	bl	800183c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	58024400 	.word	0x58024400
 800264c:	080119e0 	.word	0x080119e0
 8002650:	24000004 	.word	0x24000004
 8002654:	24000000 	.word	0x24000000

08002658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_IncTick+0x20>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_IncTick+0x24>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4413      	add	r3, r2
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <HAL_IncTick+0x24>)
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	2400000c 	.word	0x2400000c
 800267c:	24000768 	.word	0x24000768

08002680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return uwTick;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_GetTick+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	24000768 	.word	0x24000768

08002698 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_GetREVID+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	0c1b      	lsrs	r3, r3, #16
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	5c001000 	.word	0x5c001000

080026b0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	401a      	ands	r2, r3
 80026c4:	4904      	ldr	r1, [pc, #16]	; (80026d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	58000400 	.word	0x58000400

080026dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	609a      	str	r2, [r3, #8]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	609a      	str	r2, [r3, #8]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3360      	adds	r3, #96	; 0x60
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	430b      	orrs	r3, r1
 8002772:	431a      	orrs	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	611a      	str	r2, [r3, #16]
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b087      	sub	sp, #28
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3360      	adds	r3, #96	; 0x60
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	431a      	orrs	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	601a      	str	r2, [r3, #0]
  }
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002812:	b480      	push	{r7}
 8002814:	b087      	sub	sp, #28
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3330      	adds	r3, #48	; 0x30
 8002822:	461a      	mov	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	4413      	add	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	211f      	movs	r1, #31
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	401a      	ands	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	f003 011f 	and.w	r1, r3, #31
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	431a      	orrs	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f023 0203 	bic.w	r2, r3, #3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	60da      	str	r2, [r3, #12]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3314      	adds	r3, #20
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	0e5b      	lsrs	r3, r3, #25
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	4413      	add	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	0d1b      	lsrs	r3, r3, #20
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2107      	movs	r1, #7
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	401a      	ands	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	0d1b      	lsrs	r3, r3, #20
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	431a      	orrs	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002900:	43db      	mvns	r3, r3
 8002902:	401a      	ands	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0318 	and.w	r3, r3, #24
 800290a:	4908      	ldr	r1, [pc, #32]	; (800292c <LL_ADC_SetChannelSingleDiff+0x44>)
 800290c:	40d9      	lsrs	r1, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	400b      	ands	r3, r1
 8002912:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002916:	431a      	orrs	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	000fffff 	.word	0x000fffff

08002930 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 031f 	and.w	r3, r3, #31
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <LL_ADC_DisableDeepPowerDown+0x20>)
 800295a:	4013      	ands	r3, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6093      	str	r3, [r2, #8]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	5fffffc0 	.word	0x5fffffc0

08002970 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002984:	d101      	bne.n	800298a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <LL_ADC_EnableInternalRegulator+0x24>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	6fffffc0 	.word	0x6fffffc0

080029c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d4:	d101      	bne.n	80029da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <LL_ADC_Enable+0x24>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	7fffffc0 	.word	0x7fffffc0

08002a10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <LL_ADC_Disable+0x24>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	f043 0202 	orr.w	r2, r3, #2
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	7fffffc0 	.word	0x7fffffc0

08002a38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <LL_ADC_IsEnabled+0x18>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <LL_ADC_IsEnabled+0x1a>
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d101      	bne.n	8002a76 <LL_ADC_IsDisableOngoing+0x18>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <LL_ADC_IsDisableOngoing+0x1a>
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <LL_ADC_REG_StartConversion+0x24>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	f043 0204 	orr.w	r2, r3, #4
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	7fffffc0 	.word	0x7fffffc0

08002aac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d101      	bne.n	8002ac4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d101      	bne.n	8002aea <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e18f      	b.n	8002e32 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7fd ff13 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff19 	bl	8002970 <LL_ADC_IsDeepPowerDownEnabled>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff feff 	bl	800294c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff34 	bl	80029c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d114      	bne.n	8002b88 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff18 	bl	8002998 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b68:	4b87      	ldr	r3, [pc, #540]	; (8002d88 <HAL_ADC_Init+0x290>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	099b      	lsrs	r3, r3, #6
 8002b6e:	4a87      	ldr	r2, [pc, #540]	; (8002d8c <HAL_ADC_Init+0x294>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	3301      	adds	r3, #1
 8002b78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b7a:	e002      	b.n	8002b82 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f9      	bne.n	8002b7c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff17 	bl	80029c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10d      	bne.n	8002bb4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	f043 0210 	orr.w	r2, r3, #16
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff77 	bl	8002aac <LL_ADC_REG_IsConversionOngoing>
 8002bbe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 8129 	bne.w	8002e20 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 8125 	bne.w	8002e20 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bde:	f043 0202 	orr.w	r2, r3, #2
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ff24 	bl	8002a38 <LL_ADC_IsEnabled>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d136      	bne.n	8002c64 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a65      	ldr	r2, [pc, #404]	; (8002d90 <HAL_ADC_Init+0x298>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d004      	beq.n	8002c0a <HAL_ADC_Init+0x112>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a63      	ldr	r2, [pc, #396]	; (8002d94 <HAL_ADC_Init+0x29c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d10e      	bne.n	8002c28 <HAL_ADC_Init+0x130>
 8002c0a:	4861      	ldr	r0, [pc, #388]	; (8002d90 <HAL_ADC_Init+0x298>)
 8002c0c:	f7ff ff14 	bl	8002a38 <LL_ADC_IsEnabled>
 8002c10:	4604      	mov	r4, r0
 8002c12:	4860      	ldr	r0, [pc, #384]	; (8002d94 <HAL_ADC_Init+0x29c>)
 8002c14:	f7ff ff10 	bl	8002a38 <LL_ADC_IsEnabled>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4323      	orrs	r3, r4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	e008      	b.n	8002c3a <HAL_ADC_Init+0x142>
 8002c28:	485b      	ldr	r0, [pc, #364]	; (8002d98 <HAL_ADC_Init+0x2a0>)
 8002c2a:	f7ff ff05 	bl	8002a38 <LL_ADC_IsEnabled>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf0c      	ite	eq
 8002c34:	2301      	moveq	r3, #1
 8002c36:	2300      	movne	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d012      	beq.n	8002c64 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a53      	ldr	r2, [pc, #332]	; (8002d90 <HAL_ADC_Init+0x298>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_ADC_Init+0x15a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a51      	ldr	r2, [pc, #324]	; (8002d94 <HAL_ADC_Init+0x29c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_Init+0x15e>
 8002c52:	4a52      	ldr	r2, [pc, #328]	; (8002d9c <HAL_ADC_Init+0x2a4>)
 8002c54:	e000      	b.n	8002c58 <HAL_ADC_Init+0x160>
 8002c56:	4a52      	ldr	r2, [pc, #328]	; (8002da0 <HAL_ADC_Init+0x2a8>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f7ff fd3c 	bl	80026dc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002c64:	f7ff fd18 	bl	8002698 <HAL_GetREVID>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d914      	bls.n	8002c9c <HAL_ADC_Init+0x1a4>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d110      	bne.n	8002c9c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7d5b      	ldrb	r3, [r3, #21]
 8002c7e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c84:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c8a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7f1b      	ldrb	r3, [r3, #28]
 8002c90:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c92:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c94:	f043 030c 	orr.w	r3, r3, #12
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	e00d      	b.n	8002cb8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7d5b      	ldrb	r3, [r3, #21]
 8002ca0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ca6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002cac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7f1b      	ldrb	r3, [r3, #28]
 8002cb2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7f1b      	ldrb	r3, [r3, #28]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d106      	bne.n	8002cce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	045b      	lsls	r3, r3, #17
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	; (8002da4 <HAL_ADC_Init+0x2ac>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	69b9      	ldr	r1, [r7, #24]
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fed2 	bl	8002aac <LL_ADC_REG_IsConversionOngoing>
 8002d08:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fedf 	bl	8002ad2 <LL_ADC_INJ_IsConversionOngoing>
 8002d14:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d15f      	bne.n	8002ddc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d15c      	bne.n	8002ddc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7d1b      	ldrb	r3, [r3, #20]
 8002d26:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <HAL_ADC_Init+0x2b0>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	69b9      	ldr	r1, [r7, #24]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d130      	bne.n	8002db0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <HAL_ADC_Init+0x2b4>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d62:	3a01      	subs	r2, #1
 8002d64:	0411      	lsls	r1, r2, #16
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d70:	4311      	orrs	r1, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d76:	430a      	orrs	r2, r1
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	611a      	str	r2, [r3, #16]
 8002d84:	e01c      	b.n	8002dc0 <HAL_ADC_Init+0x2c8>
 8002d86:	bf00      	nop
 8002d88:	24000000 	.word	0x24000000
 8002d8c:	053e2d63 	.word	0x053e2d63
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40022100 	.word	0x40022100
 8002d98:	58026000 	.word	0x58026000
 8002d9c:	40022300 	.word	0x40022300
 8002da0:	58026300 	.word	0x58026300
 8002da4:	fff0c003 	.word	0xfff0c003
 8002da8:	ffffbffc 	.word	0xffffbffc
 8002dac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fdec 	bl	80039b4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10c      	bne.n	8002dfe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f023 010f 	bic.w	r1, r3, #15
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	1e5a      	subs	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8002dfc:	e007      	b.n	8002e0e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 020f 	bic.w	r2, r2, #15
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
 8002e1e:	e007      	b.n	8002e30 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	f043 0210 	orr.w	r2, r3, #16
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e30:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd90      	pop	{r4, r7, pc}
 8002e3a:	bf00      	nop

08002e3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a55      	ldr	r2, [pc, #340]	; (8002fa4 <HAL_ADC_Start_DMA+0x168>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d004      	beq.n	8002e5c <HAL_ADC_Start_DMA+0x20>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a54      	ldr	r2, [pc, #336]	; (8002fa8 <HAL_ADC_Start_DMA+0x16c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_Start_DMA+0x24>
 8002e5c:	4b53      	ldr	r3, [pc, #332]	; (8002fac <HAL_ADC_Start_DMA+0x170>)
 8002e5e:	e000      	b.n	8002e62 <HAL_ADC_Start_DMA+0x26>
 8002e60:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <HAL_ADC_Start_DMA+0x174>)
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fd64 	bl	8002930 <LL_ADC_GetMultimode>
 8002e68:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fe1c 	bl	8002aac <LL_ADC_REG_IsConversionOngoing>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f040 808c 	bne.w	8002f94 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_Start_DMA+0x4e>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e087      	b.n	8002f9a <HAL_ADC_Start_DMA+0x15e>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d002      	beq.n	8002ea4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b09      	cmp	r3, #9
 8002ea2:	d170      	bne.n	8002f86 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fc07 	bl	80036b8 <ADC_Enable>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d163      	bne.n	8002f7c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eb8:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <HAL_ADC_Start_DMA+0x178>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a37      	ldr	r2, [pc, #220]	; (8002fa8 <HAL_ADC_Start_DMA+0x16c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d002      	beq.n	8002ed4 <HAL_ADC_Start_DMA+0x98>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	e000      	b.n	8002ed6 <HAL_ADC_Start_DMA+0x9a>
 8002ed4:	4b33      	ldr	r3, [pc, #204]	; (8002fa4 <HAL_ADC_Start_DMA+0x168>)
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d002      	beq.n	8002ee4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d006      	beq.n	8002f0a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	f023 0206 	bic.w	r2, r3, #6
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	659a      	str	r2, [r3, #88]	; 0x58
 8002f08:	e002      	b.n	8002f10 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f14:	4a28      	ldr	r2, [pc, #160]	; (8002fb8 <HAL_ADC_Start_DMA+0x17c>)
 8002f16:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1c:	4a27      	ldr	r2, [pc, #156]	; (8002fbc <HAL_ADC_Start_DMA+0x180>)
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f24:	4a26      	ldr	r2, [pc, #152]	; (8002fc0 <HAL_ADC_Start_DMA+0x184>)
 8002f26:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	221c      	movs	r2, #28
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0210 	orr.w	r2, r2, #16
 8002f46:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f7ff fc89 	bl	800286a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3340      	adds	r3, #64	; 0x40
 8002f62:	4619      	mov	r1, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f001 fdd6 	bl	8004b18 <HAL_DMA_Start_IT>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fd85 	bl	8002a84 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002f7a:	e00d      	b.n	8002f98 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002f84:	e008      	b.n	8002f98 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002f92:	e001      	b.n	8002f98 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
 8002f96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40022000 	.word	0x40022000
 8002fa8:	40022100 	.word	0x40022100
 8002fac:	40022300 	.word	0x40022300
 8002fb0:	58026300 	.word	0x58026300
 8002fb4:	fffff0fe 	.word	0xfffff0fe
 8002fb8:	0800388b 	.word	0x0800388b
 8002fbc:	08003963 	.word	0x08003963
 8002fc0:	0800397f 	.word	0x0800397f

08002fc4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b0a1      	sub	sp, #132	; 0x84
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4a65      	ldr	r2, [pc, #404]	; (80031b0 <HAL_ADC_ConfigChannel+0x1b0>)
 800301a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_ADC_ConfigChannel+0x2a>
 8003026:	2302      	movs	r3, #2
 8003028:	e32e      	b.n	8003688 <HAL_ADC_ConfigChannel+0x688>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fd38 	bl	8002aac <LL_ADC_REG_IsConversionOngoing>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 8313 	bne.w	800366a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	db2c      	blt.n	80030a6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003054:	2b00      	cmp	r3, #0
 8003056:	d108      	bne.n	800306a <HAL_ADC_ConfigChannel+0x6a>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	2201      	movs	r2, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	e016      	b.n	8003098 <HAL_ADC_ConfigChannel+0x98>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800307a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800307c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003082:	2320      	movs	r3, #32
 8003084:	e003      	b.n	800308e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	2201      	movs	r2, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	69d1      	ldr	r1, [r2, #28]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	430b      	orrs	r3, r1
 80030a4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f7ff fbad 	bl	8002812 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fcf5 	bl	8002aac <LL_ADC_REG_IsConversionOngoing>
 80030c2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fd02 	bl	8002ad2 <LL_ADC_INJ_IsConversionOngoing>
 80030ce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 80b8 	bne.w	8003248 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 80b4 	bne.w	8003248 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	6819      	ldr	r1, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	461a      	mov	r2, r3
 80030ee:	f7ff fbcf 	bl	8002890 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030f2:	4b30      	ldr	r3, [pc, #192]	; (80031b4 <HAL_ADC_ConfigChannel+0x1b4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80030fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030fe:	d10b      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x118>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	e01d      	b.n	8003154 <HAL_ADC_ConfigChannel+0x154>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <HAL_ADC_ConfigChannel+0x13e>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	e00a      	b.n	8003154 <HAL_ADC_ConfigChannel+0x154>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b04      	cmp	r3, #4
 800315c:	d02c      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6919      	ldr	r1, [r3, #16]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800316c:	f7ff faea 	bl	8002744 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6919      	ldr	r1, [r3, #16]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	7e5b      	ldrb	r3, [r3, #25]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d102      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x186>
 8003180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003184:	e000      	b.n	8003188 <HAL_ADC_ConfigChannel+0x188>
 8003186:	2300      	movs	r3, #0
 8003188:	461a      	mov	r2, r3
 800318a:	f7ff fb14 	bl	80027b6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6919      	ldr	r1, [r3, #16]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	7e1b      	ldrb	r3, [r3, #24]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x1a4>
 800319e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031a2:	e000      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x1a6>
 80031a4:	2300      	movs	r3, #0
 80031a6:	461a      	mov	r2, r3
 80031a8:	f7ff faec 	bl	8002784 <LL_ADC_SetDataRightShift>
 80031ac:	e04c      	b.n	8003248 <HAL_ADC_ConfigChannel+0x248>
 80031ae:	bf00      	nop
 80031b0:	47ff0000 	.word	0x47ff0000
 80031b4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	069b      	lsls	r3, r3, #26
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d107      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031da:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	069b      	lsls	r3, r3, #26
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d107      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031fe:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003206:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	069b      	lsls	r3, r3, #26
 8003210:	429a      	cmp	r2, r3
 8003212:	d107      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003222:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	069b      	lsls	r3, r3, #26
 8003234:	429a      	cmp	r2, r3
 8003236:	d107      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003246:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fbf3 	bl	8002a38 <LL_ADC_IsEnabled>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 8211 	bne.w	800367c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	461a      	mov	r2, r3
 8003268:	f7ff fb3e 	bl	80028e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4aa1      	ldr	r2, [pc, #644]	; (80034f8 <HAL_ADC_ConfigChannel+0x4f8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	f040 812e 	bne.w	80034d4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x2a0>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	0e9b      	lsrs	r3, r3, #26
 800328e:	3301      	adds	r3, #1
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2b09      	cmp	r3, #9
 8003296:	bf94      	ite	ls
 8003298:	2301      	movls	r3, #1
 800329a:	2300      	movhi	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e019      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x2d4>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80032ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80032b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80032b8:	2320      	movs	r3, #32
 80032ba:	e003      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80032bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2b09      	cmp	r3, #9
 80032cc:	bf94      	ite	ls
 80032ce:	2301      	movls	r3, #1
 80032d0:	2300      	movhi	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d079      	beq.n	80033cc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d107      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x2f4>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0e9b      	lsrs	r3, r3, #26
 80032ea:	3301      	adds	r3, #1
 80032ec:	069b      	lsls	r3, r3, #26
 80032ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032f2:	e015      	b.n	8003320 <HAL_ADC_ConfigChannel+0x320>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003304:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800330c:	2320      	movs	r3, #32
 800330e:	e003      	b.n	8003318 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	3301      	adds	r3, #1
 800331a:	069b      	lsls	r3, r3, #26
 800331c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x340>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	3301      	adds	r3, #1
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2101      	movs	r1, #1
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	e017      	b.n	8003370 <HAL_ADC_ConfigChannel+0x370>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800334e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003350:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e003      	b.n	8003364 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800335c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	3301      	adds	r3, #1
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	2101      	movs	r1, #1
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	ea42 0103 	orr.w	r1, r2, r3
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x396>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0e9b      	lsrs	r3, r3, #26
 8003386:	3301      	adds	r3, #1
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	051b      	lsls	r3, r3, #20
 8003394:	e018      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x3c8>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80033ae:	2320      	movs	r3, #32
 80033b0:	e003      	b.n	80033ba <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c8:	430b      	orrs	r3, r1
 80033ca:	e07e      	b.n	80034ca <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x3e8>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	0e9b      	lsrs	r3, r3, #26
 80033de:	3301      	adds	r3, #1
 80033e0:	069b      	lsls	r3, r3, #26
 80033e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e6:	e015      	b.n	8003414 <HAL_ADC_ConfigChannel+0x414>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003400:	2320      	movs	r3, #32
 8003402:	e003      	b.n	800340c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	3301      	adds	r3, #1
 800340e:	069b      	lsls	r3, r3, #26
 8003410:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x434>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	3301      	adds	r3, #1
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	e017      	b.n	8003464 <HAL_ADC_ConfigChannel+0x464>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	61bb      	str	r3, [r7, #24]
  return result;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	e003      	b.n	8003458 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	3301      	adds	r3, #1
 800345a:	f003 031f 	and.w	r3, r3, #31
 800345e:	2101      	movs	r1, #1
 8003460:	fa01 f303 	lsl.w	r3, r1, r3
 8003464:	ea42 0103 	orr.w	r1, r2, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10d      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x490>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0e9b      	lsrs	r3, r3, #26
 800347a:	3301      	adds	r3, #1
 800347c:	f003 021f 	and.w	r2, r3, #31
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	3b1e      	subs	r3, #30
 8003488:	051b      	lsls	r3, r3, #20
 800348a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800348e:	e01b      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x4c8>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	60fb      	str	r3, [r7, #12]
  return result;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80034a8:	2320      	movs	r3, #32
 80034aa:	e003      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	f003 021f 	and.w	r2, r3, #31
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	3b1e      	subs	r3, #30
 80034c2:	051b      	lsls	r3, r3, #20
 80034c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c8:	430b      	orrs	r3, r1
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	6892      	ldr	r2, [r2, #8]
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7ff f9de 	bl	8002890 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f280 80cf 	bge.w	800367c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a06      	ldr	r2, [pc, #24]	; (80034fc <HAL_ADC_ConfigChannel+0x4fc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_ADC_ConfigChannel+0x4f2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_ADC_ConfigChannel+0x500>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10a      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x508>
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <HAL_ADC_ConfigChannel+0x504>)
 80034f4:	e009      	b.n	800350a <HAL_ADC_ConfigChannel+0x50a>
 80034f6:	bf00      	nop
 80034f8:	47ff0000 	.word	0x47ff0000
 80034fc:	40022000 	.word	0x40022000
 8003500:	40022100 	.word	0x40022100
 8003504:	40022300 	.word	0x40022300
 8003508:	4b61      	ldr	r3, [pc, #388]	; (8003690 <HAL_ADC_ConfigChannel+0x690>)
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff f90c 	bl	8002728 <LL_ADC_GetCommonPathInternalCh>
 8003510:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a5f      	ldr	r2, [pc, #380]	; (8003694 <HAL_ADC_ConfigChannel+0x694>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_ADC_ConfigChannel+0x526>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a5d      	ldr	r2, [pc, #372]	; (8003698 <HAL_ADC_ConfigChannel+0x698>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10e      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x544>
 8003526:	485b      	ldr	r0, [pc, #364]	; (8003694 <HAL_ADC_ConfigChannel+0x694>)
 8003528:	f7ff fa86 	bl	8002a38 <LL_ADC_IsEnabled>
 800352c:	4604      	mov	r4, r0
 800352e:	485a      	ldr	r0, [pc, #360]	; (8003698 <HAL_ADC_ConfigChannel+0x698>)
 8003530:	f7ff fa82 	bl	8002a38 <LL_ADC_IsEnabled>
 8003534:	4603      	mov	r3, r0
 8003536:	4323      	orrs	r3, r4
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e008      	b.n	8003556 <HAL_ADC_ConfigChannel+0x556>
 8003544:	4855      	ldr	r0, [pc, #340]	; (800369c <HAL_ADC_ConfigChannel+0x69c>)
 8003546:	f7ff fa77 	bl	8002a38 <LL_ADC_IsEnabled>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d07d      	beq.n	8003656 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a50      	ldr	r2, [pc, #320]	; (80036a0 <HAL_ADC_ConfigChannel+0x6a0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d130      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x5c6>
 8003564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d12b      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a4a      	ldr	r2, [pc, #296]	; (800369c <HAL_ADC_ConfigChannel+0x69c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	f040 8081 	bne.w	800367c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a45      	ldr	r2, [pc, #276]	; (8003694 <HAL_ADC_ConfigChannel+0x694>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_ADC_ConfigChannel+0x58e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a43      	ldr	r2, [pc, #268]	; (8003698 <HAL_ADC_ConfigChannel+0x698>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x592>
 800358e:	4a45      	ldr	r2, [pc, #276]	; (80036a4 <HAL_ADC_ConfigChannel+0x6a4>)
 8003590:	e000      	b.n	8003594 <HAL_ADC_ConfigChannel+0x594>
 8003592:	4a3f      	ldr	r2, [pc, #252]	; (8003690 <HAL_ADC_ConfigChannel+0x690>)
 8003594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003596:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f7ff f8b0 	bl	8002702 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035a2:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_ADC_ConfigChannel+0x6a8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	4a40      	ldr	r2, [pc, #256]	; (80036ac <HAL_ADC_ConfigChannel+0x6ac>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	3301      	adds	r3, #1
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035b6:	e002      	b.n	80035be <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f9      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035c4:	e05a      	b.n	800367c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a39      	ldr	r2, [pc, #228]	; (80036b0 <HAL_ADC_ConfigChannel+0x6b0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d11e      	bne.n	800360e <HAL_ADC_ConfigChannel+0x60e>
 80035d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d119      	bne.n	800360e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a2f      	ldr	r2, [pc, #188]	; (800369c <HAL_ADC_ConfigChannel+0x69c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d14b      	bne.n	800367c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a2a      	ldr	r2, [pc, #168]	; (8003694 <HAL_ADC_ConfigChannel+0x694>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_ADC_ConfigChannel+0x5f8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a29      	ldr	r2, [pc, #164]	; (8003698 <HAL_ADC_ConfigChannel+0x698>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x5fc>
 80035f8:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <HAL_ADC_ConfigChannel+0x6a4>)
 80035fa:	e000      	b.n	80035fe <HAL_ADC_ConfigChannel+0x5fe>
 80035fc:	4a24      	ldr	r2, [pc, #144]	; (8003690 <HAL_ADC_ConfigChannel+0x690>)
 80035fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003600:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f7ff f87b 	bl	8002702 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800360c:	e036      	b.n	800367c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a28      	ldr	r2, [pc, #160]	; (80036b4 <HAL_ADC_ConfigChannel+0x6b4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d131      	bne.n	800367c <HAL_ADC_ConfigChannel+0x67c>
 8003618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d12c      	bne.n	800367c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1d      	ldr	r2, [pc, #116]	; (800369c <HAL_ADC_ConfigChannel+0x69c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d127      	bne.n	800367c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a18      	ldr	r2, [pc, #96]	; (8003694 <HAL_ADC_ConfigChannel+0x694>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_ADC_ConfigChannel+0x640>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a17      	ldr	r2, [pc, #92]	; (8003698 <HAL_ADC_ConfigChannel+0x698>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x644>
 8003640:	4a18      	ldr	r2, [pc, #96]	; (80036a4 <HAL_ADC_ConfigChannel+0x6a4>)
 8003642:	e000      	b.n	8003646 <HAL_ADC_ConfigChannel+0x646>
 8003644:	4a12      	ldr	r2, [pc, #72]	; (8003690 <HAL_ADC_ConfigChannel+0x690>)
 8003646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f7ff f857 	bl	8002702 <LL_ADC_SetCommonPathInternalCh>
 8003654:	e012      	b.n	800367c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003668:	e008      	b.n	800367c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	f043 0220 	orr.w	r2, r3, #32
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003684:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003688:	4618      	mov	r0, r3
 800368a:	3784      	adds	r7, #132	; 0x84
 800368c:	46bd      	mov	sp, r7
 800368e:	bd90      	pop	{r4, r7, pc}
 8003690:	58026300 	.word	0x58026300
 8003694:	40022000 	.word	0x40022000
 8003698:	40022100 	.word	0x40022100
 800369c:	58026000 	.word	0x58026000
 80036a0:	cb840000 	.word	0xcb840000
 80036a4:	40022300 	.word	0x40022300
 80036a8:	24000000 	.word	0x24000000
 80036ac:	053e2d63 	.word	0x053e2d63
 80036b0:	c7520000 	.word	0xc7520000
 80036b4:	cfb80000 	.word	0xcfb80000

080036b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff f9b7 	bl	8002a38 <LL_ADC_IsEnabled>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d16e      	bne.n	80037ae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	4b38      	ldr	r3, [pc, #224]	; (80037b8 <ADC_Enable+0x100>)
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00d      	beq.n	80036fa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e2:	f043 0210 	orr.w	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e05a      	b.n	80037b0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff f972 	bl	80029e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003704:	f7fe ffbc 	bl	8002680 <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2b      	ldr	r2, [pc, #172]	; (80037bc <ADC_Enable+0x104>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <ADC_Enable+0x66>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <ADC_Enable+0x108>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <ADC_Enable+0x6a>
 800371e:	4b29      	ldr	r3, [pc, #164]	; (80037c4 <ADC_Enable+0x10c>)
 8003720:	e000      	b.n	8003724 <ADC_Enable+0x6c>
 8003722:	4b29      	ldr	r3, [pc, #164]	; (80037c8 <ADC_Enable+0x110>)
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff f903 	bl	8002930 <LL_ADC_GetMultimode>
 800372a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <ADC_Enable+0x108>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d002      	beq.n	800373c <ADC_Enable+0x84>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	e000      	b.n	800373e <ADC_Enable+0x86>
 800373c:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <ADC_Enable+0x104>)
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	4293      	cmp	r3, r2
 8003744:	d02c      	beq.n	80037a0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d130      	bne.n	80037ae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800374c:	e028      	b.n	80037a0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f970 	bl	8002a38 <LL_ADC_IsEnabled>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f940 	bl	80029e8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003768:	f7fe ff8a 	bl	8002680 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d914      	bls.n	80037a0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d00d      	beq.n	80037a0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	f043 0210 	orr.w	r2, r3, #16
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f043 0201 	orr.w	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e007      	b.n	80037b0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d1cf      	bne.n	800374e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	8000003f 	.word	0x8000003f
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40022100 	.word	0x40022100
 80037c4:	40022300 	.word	0x40022300
 80037c8:	58026300 	.word	0x58026300

080037cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff f940 	bl	8002a5e <LL_ADC_IsDisableOngoing>
 80037de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff f927 	bl	8002a38 <LL_ADC_IsEnabled>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d047      	beq.n	8003880 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d144      	bne.n	8003880 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 030d 	and.w	r3, r3, #13
 8003800:	2b01      	cmp	r3, #1
 8003802:	d10c      	bne.n	800381e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff f901 	bl	8002a10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2203      	movs	r2, #3
 8003814:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003816:	f7fe ff33 	bl	8002680 <HAL_GetTick>
 800381a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800381c:	e029      	b.n	8003872 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	f043 0210 	orr.w	r2, r3, #16
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	f043 0201 	orr.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e023      	b.n	8003882 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800383a:	f7fe ff21 	bl	8002680 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d914      	bls.n	8003872 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	f043 0210 	orr.w	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e007      	b.n	8003882 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1dc      	bne.n	800383a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d14b      	bne.n	800393c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d021      	beq.n	8003902 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe ff92 	bl	80027ec <LL_ADC_REG_IsTriggerSourceSWStart>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d032      	beq.n	8003934 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d12b      	bne.n	8003934 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d11f      	bne.n	8003934 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f8:	f043 0201 	orr.w	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54
 8003900:	e018      	b.n	8003934 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d111      	bne.n	8003934 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff fb45 	bl	8002fc4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800393a:	e00e      	b.n	800395a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7ff fb4f 	bl	8002fec <HAL_ADC_ErrorCallback>
}
 800394e:	e004      	b.n	800395a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4798      	blx	r3
}
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7ff fb31 	bl	8002fd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	f043 0204 	orr.w	r2, r3, #4
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff fb21 	bl	8002fec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a7a      	ldr	r2, [pc, #488]	; (8003bac <ADC_ConfigureBoostMode+0x1f8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <ADC_ConfigureBoostMode+0x1c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a79      	ldr	r2, [pc, #484]	; (8003bb0 <ADC_ConfigureBoostMode+0x1fc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d109      	bne.n	80039e4 <ADC_ConfigureBoostMode+0x30>
 80039d0:	4b78      	ldr	r3, [pc, #480]	; (8003bb4 <ADC_ConfigureBoostMode+0x200>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e008      	b.n	80039f6 <ADC_ConfigureBoostMode+0x42>
 80039e4:	4b74      	ldr	r3, [pc, #464]	; (8003bb8 <ADC_ConfigureBoostMode+0x204>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01c      	beq.n	8003a34 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039fa:	f004 fe53 	bl	80086a4 <HAL_RCC_GetHCLKFreq>
 80039fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a08:	d010      	beq.n	8003a2c <ADC_ConfigureBoostMode+0x78>
 8003a0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a0e:	d873      	bhi.n	8003af8 <ADC_ConfigureBoostMode+0x144>
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a14:	d002      	beq.n	8003a1c <ADC_ConfigureBoostMode+0x68>
 8003a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a1a:	d16d      	bne.n	8003af8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a28:	60fb      	str	r3, [r7, #12]
        break;
 8003a2a:	e068      	b.n	8003afe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	089b      	lsrs	r3, r3, #2
 8003a30:	60fb      	str	r3, [r7, #12]
        break;
 8003a32:	e064      	b.n	8003afe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003a34:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	f006 f8da 	bl	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a40:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a4a:	d051      	beq.n	8003af0 <ADC_ConfigureBoostMode+0x13c>
 8003a4c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a50:	d854      	bhi.n	8003afc <ADC_ConfigureBoostMode+0x148>
 8003a52:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a56:	d047      	beq.n	8003ae8 <ADC_ConfigureBoostMode+0x134>
 8003a58:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a5c:	d84e      	bhi.n	8003afc <ADC_ConfigureBoostMode+0x148>
 8003a5e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a62:	d03d      	beq.n	8003ae0 <ADC_ConfigureBoostMode+0x12c>
 8003a64:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a68:	d848      	bhi.n	8003afc <ADC_ConfigureBoostMode+0x148>
 8003a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a6e:	d033      	beq.n	8003ad8 <ADC_ConfigureBoostMode+0x124>
 8003a70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a74:	d842      	bhi.n	8003afc <ADC_ConfigureBoostMode+0x148>
 8003a76:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a7a:	d029      	beq.n	8003ad0 <ADC_ConfigureBoostMode+0x11c>
 8003a7c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a80:	d83c      	bhi.n	8003afc <ADC_ConfigureBoostMode+0x148>
 8003a82:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a86:	d01a      	beq.n	8003abe <ADC_ConfigureBoostMode+0x10a>
 8003a88:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a8c:	d836      	bhi.n	8003afc <ADC_ConfigureBoostMode+0x148>
 8003a8e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a92:	d014      	beq.n	8003abe <ADC_ConfigureBoostMode+0x10a>
 8003a94:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a98:	d830      	bhi.n	8003afc <ADC_ConfigureBoostMode+0x148>
 8003a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a9e:	d00e      	beq.n	8003abe <ADC_ConfigureBoostMode+0x10a>
 8003aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa4:	d82a      	bhi.n	8003afc <ADC_ConfigureBoostMode+0x148>
 8003aa6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003aaa:	d008      	beq.n	8003abe <ADC_ConfigureBoostMode+0x10a>
 8003aac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ab0:	d824      	bhi.n	8003afc <ADC_ConfigureBoostMode+0x148>
 8003ab2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ab6:	d002      	beq.n	8003abe <ADC_ConfigureBoostMode+0x10a>
 8003ab8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003abc:	d11e      	bne.n	8003afc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	0c9b      	lsrs	r3, r3, #18
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	60fb      	str	r3, [r7, #12]
        break;
 8003ace:	e016      	b.n	8003afe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	60fb      	str	r3, [r7, #12]
        break;
 8003ad6:	e012      	b.n	8003afe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	60fb      	str	r3, [r7, #12]
        break;
 8003ade:	e00e      	b.n	8003afe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	60fb      	str	r3, [r7, #12]
        break;
 8003ae6:	e00a      	b.n	8003afe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	09db      	lsrs	r3, r3, #7
 8003aec:	60fb      	str	r3, [r7, #12]
        break;
 8003aee:	e006      	b.n	8003afe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	60fb      	str	r3, [r7, #12]
        break;
 8003af6:	e002      	b.n	8003afe <ADC_ConfigureBoostMode+0x14a>
        break;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003afc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003afe:	f7fe fdcb 	bl	8002698 <HAL_GetREVID>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d815      	bhi.n	8003b38 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a2b      	ldr	r2, [pc, #172]	; (8003bbc <ADC_ConfigureBoostMode+0x208>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d908      	bls.n	8003b26 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b22:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003b24:	e03e      	b.n	8003ba4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b34:	609a      	str	r2, [r3, #8]
}
 8003b36:	e035      	b.n	8003ba4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	085b      	lsrs	r3, r3, #1
 8003b3c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <ADC_ConfigureBoostMode+0x20c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d808      	bhi.n	8003b58 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b54:	609a      	str	r2, [r3, #8]
}
 8003b56:	e025      	b.n	8003ba4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	; (8003bc4 <ADC_ConfigureBoostMode+0x210>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d80a      	bhi.n	8003b76 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b72:	609a      	str	r2, [r3, #8]
}
 8003b74:	e016      	b.n	8003ba4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <ADC_ConfigureBoostMode+0x214>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d80a      	bhi.n	8003b94 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	609a      	str	r2, [r3, #8]
}
 8003b92:	e007      	b.n	8003ba4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ba2:	609a      	str	r2, [r3, #8]
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40022000 	.word	0x40022000
 8003bb0:	40022100 	.word	0x40022100
 8003bb4:	40022300 	.word	0x40022300
 8003bb8:	58026300 	.word	0x58026300
 8003bbc:	01312d00 	.word	0x01312d00
 8003bc0:	005f5e10 	.word	0x005f5e10
 8003bc4:	00bebc20 	.word	0x00bebc20
 8003bc8:	017d7840 	.word	0x017d7840

08003bcc <LL_ADC_IsEnabled>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <LL_ADC_IsEnabled+0x18>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <LL_ADC_IsEnabled+0x1a>
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <LL_ADC_StartCalibration>:
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <LL_ADC_StartCalibration+0x38>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c14:	430a      	orrs	r2, r1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	609a      	str	r2, [r3, #8]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	3ffeffc0 	.word	0x3ffeffc0

08003c30 <LL_ADC_IsCalibrationOnGoing>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c44:	d101      	bne.n	8003c4a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <LL_ADC_REG_IsConversionOngoing>:
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d101      	bne.n	8003c70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_ADCEx_Calibration_Start+0x1e>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e04c      	b.n	8003d38 <HAL_ADCEx_Calibration_Start+0xb8>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff fd90 	bl	80037cc <ADC_Disable>
 8003cac:	4603      	mov	r3, r0
 8003cae:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d135      	bne.n	8003d22 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cba:	4b21      	ldr	r3, [pc, #132]	; (8003d40 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	f043 0202 	orr.w	r2, r3, #2
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ff90 	bl	8003bf4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cd4:	e014      	b.n	8003d00 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4a19      	ldr	r2, [pc, #100]	; (8003d44 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d30d      	bcc.n	8003d00 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	f023 0312 	bic.w	r3, r3, #18
 8003cec:	f043 0210 	orr.w	r2, r3, #16
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e01b      	b.n	8003d38 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ff93 	bl	8003c30 <LL_ADC_IsCalibrationOnGoing>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e2      	bne.n	8003cd6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f023 0303 	bic.w	r3, r3, #3
 8003d18:	f043 0201 	orr.w	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	655a      	str	r2, [r3, #84]	; 0x54
 8003d20:	e005      	b.n	8003d2e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f043 0210 	orr.w	r2, r3, #16
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	ffffeefd 	.word	0xffffeefd
 8003d44:	25c3f800 	.word	0x25c3f800

08003d48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b09f      	sub	sp, #124	; 0x7c
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e0be      	b.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a5c      	ldr	r2, [pc, #368]	; (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d102      	bne.n	8003d86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d80:	4b5b      	ldr	r3, [pc, #364]	; (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	e001      	b.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e09d      	b.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ff54 	bl	8003c58 <LL_ADC_REG_IsConversionOngoing>
 8003db0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff4e 	bl	8003c58 <LL_ADC_REG_IsConversionOngoing>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d17f      	bne.n	8003ec2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d17c      	bne.n	8003ec2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a47      	ldr	r2, [pc, #284]	; (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a46      	ldr	r2, [pc, #280]	; (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003ddc:	4b45      	ldr	r3, [pc, #276]	; (8003ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dde:	e000      	b.n	8003de2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003de0:	4b45      	ldr	r3, [pc, #276]	; (8003ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003de2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d039      	beq.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a3a      	ldr	r2, [pc, #232]	; (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a38      	ldr	r2, [pc, #224]	; (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10e      	bne.n	8003e30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e12:	4836      	ldr	r0, [pc, #216]	; (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e14:	f7ff feda 	bl	8003bcc <LL_ADC_IsEnabled>
 8003e18:	4604      	mov	r4, r0
 8003e1a:	4835      	ldr	r0, [pc, #212]	; (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e1c:	f7ff fed6 	bl	8003bcc <LL_ADC_IsEnabled>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4323      	orrs	r3, r4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e008      	b.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003e30:	4832      	ldr	r0, [pc, #200]	; (8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e32:	f7ff fecb 	bl	8003bcc <LL_ADC_IsEnabled>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d047      	beq.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	6811      	ldr	r1, [r2, #0]
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	6892      	ldr	r2, [r2, #8]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e5e:	e03a      	b.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10e      	bne.n	8003e9e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003e80:	481a      	ldr	r0, [pc, #104]	; (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e82:	f7ff fea3 	bl	8003bcc <LL_ADC_IsEnabled>
 8003e86:	4604      	mov	r4, r0
 8003e88:	4819      	ldr	r0, [pc, #100]	; (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e8a:	f7ff fe9f 	bl	8003bcc <LL_ADC_IsEnabled>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4323      	orrs	r3, r4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	e008      	b.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e9e:	4817      	ldr	r0, [pc, #92]	; (8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ea0:	f7ff fe94 	bl	8003bcc <LL_ADC_IsEnabled>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d010      	beq.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ebe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ec0:	e009      	b.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	f043 0220 	orr.w	r2, r3, #32
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003ed4:	e000      	b.n	8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ed6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ee0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	377c      	adds	r7, #124	; 0x7c
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd90      	pop	{r4, r7, pc}
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40022100 	.word	0x40022100
 8003ef4:	40022300 	.word	0x40022300
 8003ef8:	58026300 	.word	0x58026300
 8003efc:	58026000 	.word	0x58026000
 8003f00:	fffff0e0 	.word	0xfffff0e0

08003f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <__NVIC_SetPriorityGrouping+0x40>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f20:	4013      	ands	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <__NVIC_SetPriorityGrouping+0x44>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f32:	4a04      	ldr	r2, [pc, #16]	; (8003f44 <__NVIC_SetPriorityGrouping+0x40>)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	60d3      	str	r3, [r2, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	e000ed00 	.word	0xe000ed00
 8003f48:	05fa0000 	.word	0x05fa0000

08003f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <__NVIC_GetPriorityGrouping+0x18>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	f003 0307 	and.w	r3, r3, #7
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	db0b      	blt.n	8003f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	f003 021f 	and.w	r2, r3, #31
 8003f80:	4907      	ldr	r1, [pc, #28]	; (8003fa0 <__NVIC_EnableIRQ+0x38>)
 8003f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	2001      	movs	r0, #1
 8003f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	e000e100 	.word	0xe000e100

08003fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	6039      	str	r1, [r7, #0]
 8003fae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	db0a      	blt.n	8003fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	490c      	ldr	r1, [pc, #48]	; (8003ff0 <__NVIC_SetPriority+0x4c>)
 8003fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fc2:	0112      	lsls	r2, r2, #4
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fcc:	e00a      	b.n	8003fe4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	4908      	ldr	r1, [pc, #32]	; (8003ff4 <__NVIC_SetPriority+0x50>)
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	3b04      	subs	r3, #4
 8003fdc:	0112      	lsls	r2, r2, #4
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	761a      	strb	r2, [r3, #24]
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	e000e100 	.word	0xe000e100
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	; 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f1c3 0307 	rsb	r3, r3, #7
 8004012:	2b04      	cmp	r3, #4
 8004014:	bf28      	it	cs
 8004016:	2304      	movcs	r3, #4
 8004018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3304      	adds	r3, #4
 800401e:	2b06      	cmp	r3, #6
 8004020:	d902      	bls.n	8004028 <NVIC_EncodePriority+0x30>
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	3b03      	subs	r3, #3
 8004026:	e000      	b.n	800402a <NVIC_EncodePriority+0x32>
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800402c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43da      	mvns	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	401a      	ands	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	fa01 f303 	lsl.w	r3, r1, r3
 800404a:	43d9      	mvns	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004050:	4313      	orrs	r3, r2
         );
}
 8004052:	4618      	mov	r0, r3
 8004054:	3724      	adds	r7, #36	; 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff ff4c 	bl	8003f04 <__NVIC_SetPriorityGrouping>
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004082:	f7ff ff63 	bl	8003f4c <__NVIC_GetPriorityGrouping>
 8004086:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	6978      	ldr	r0, [r7, #20]
 800408e:	f7ff ffb3 	bl	8003ff8 <NVIC_EncodePriority>
 8004092:	4602      	mov	r2, r0
 8004094:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff ff82 	bl	8003fa4 <__NVIC_SetPriority>
}
 80040a0:	bf00      	nop
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff ff56 	bl	8003f68 <__NVIC_EnableIRQ>
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e014      	b.n	8004100 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	791b      	ldrb	r3, [r3, #4]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fc fd7c 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01d      	beq.n	8004166 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d018      	beq.n	8004166 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2204      	movs	r2, #4
 8004138:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f043 0201 	orr.w	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800414e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800415e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f827 	bl	80041b4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01d      	beq.n	80041ac <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d018      	beq.n	80041ac <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2204      	movs	r2, #4
 800417e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f043 0202 	orr.w	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004194:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80041a4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f950 	bl	800444c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_DAC_ConfigChannel+0x1e>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e12a      	b.n	8004440 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	795b      	ldrb	r3, [r3, #5]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_DAC_ConfigChannel+0x2e>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e124      	b.n	8004440 <HAL_DAC_ConfigChannel+0x278>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2202      	movs	r2, #2
 8004200:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b04      	cmp	r3, #4
 8004208:	d17a      	bne.n	8004300 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800420a:	f7fe fa39 	bl	8002680 <HAL_GetTick>
 800420e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d13d      	bne.n	8004292 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004216:	e018      	b.n	800424a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004218:	f7fe fa32 	bl	8002680 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b01      	cmp	r3, #1
 8004224:	d911      	bls.n	800424a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800422c:	4b86      	ldr	r3, [pc, #536]	; (8004448 <HAL_DAC_ConfigChannel+0x280>)
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f043 0208 	orr.w	r2, r3, #8
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2203      	movs	r2, #3
 8004244:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e0fa      	b.n	8004440 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004250:	4b7d      	ldr	r3, [pc, #500]	; (8004448 <HAL_DAC_ConfigChannel+0x280>)
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1df      	bne.n	8004218 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	6992      	ldr	r2, [r2, #24]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40
 8004262:	e020      	b.n	80042a6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004264:	f7fe fa0c 	bl	8002680 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b01      	cmp	r3, #1
 8004270:	d90f      	bls.n	8004292 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004278:	2b00      	cmp	r3, #0
 800427a:	da0a      	bge.n	8004292 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f043 0208 	orr.w	r2, r3, #8
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2203      	movs	r2, #3
 800428c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e0d6      	b.n	8004440 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004298:	2b00      	cmp	r3, #0
 800429a:	dbe3      	blt.n	8004264 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	6992      	ldr	r2, [r2, #24]
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80042b6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	ea02 0103 	and.w	r1, r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	21ff      	movs	r1, #255	; 0xff
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	43db      	mvns	r3, r3
 80042e8:	ea02 0103 	and.w	r1, r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6a1a      	ldr	r2, [r3, #32]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	409a      	lsls	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d11d      	bne.n	8004344 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	221f      	movs	r2, #31
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2207      	movs	r2, #7
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d102      	bne.n	800436e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004368:	2300      	movs	r3, #0
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	e00f      	b.n	800438e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d102      	bne.n	800437c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004376:	2301      	movs	r3, #1
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
 800437a:	e008      	b.n	800438e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d102      	bne.n	800438a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004384:	2301      	movs	r3, #1
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	e001      	b.n	800438e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800438a:	2300      	movs	r3, #0
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	4313      	orrs	r3, r2
 8004398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43da      	mvns	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	400a      	ands	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6819      	ldr	r1, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	22c0      	movs	r2, #192	; 0xc0
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43da      	mvns	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	400a      	ands	r2, r1
 800442e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800443c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004440:	4618      	mov	r0, r3
 8004442:	3728      	adds	r7, #40	; 0x28
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20008000 	.word	0x20008000

0800444c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004468:	f7fe f90a 	bl	8002680 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e316      	b.n	8004aa6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a66      	ldr	r2, [pc, #408]	; (8004618 <HAL_DMA_Init+0x1b8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d04a      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a65      	ldr	r2, [pc, #404]	; (800461c <HAL_DMA_Init+0x1bc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d045      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a63      	ldr	r2, [pc, #396]	; (8004620 <HAL_DMA_Init+0x1c0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d040      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a62      	ldr	r2, [pc, #392]	; (8004624 <HAL_DMA_Init+0x1c4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d03b      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a60      	ldr	r2, [pc, #384]	; (8004628 <HAL_DMA_Init+0x1c8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d036      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a5f      	ldr	r2, [pc, #380]	; (800462c <HAL_DMA_Init+0x1cc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d031      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a5d      	ldr	r2, [pc, #372]	; (8004630 <HAL_DMA_Init+0x1d0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d02c      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a5c      	ldr	r2, [pc, #368]	; (8004634 <HAL_DMA_Init+0x1d4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d027      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a5a      	ldr	r2, [pc, #360]	; (8004638 <HAL_DMA_Init+0x1d8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d022      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a59      	ldr	r2, [pc, #356]	; (800463c <HAL_DMA_Init+0x1dc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d01d      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a57      	ldr	r2, [pc, #348]	; (8004640 <HAL_DMA_Init+0x1e0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d018      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a56      	ldr	r2, [pc, #344]	; (8004644 <HAL_DMA_Init+0x1e4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a54      	ldr	r2, [pc, #336]	; (8004648 <HAL_DMA_Init+0x1e8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a53      	ldr	r2, [pc, #332]	; (800464c <HAL_DMA_Init+0x1ec>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a51      	ldr	r2, [pc, #324]	; (8004650 <HAL_DMA_Init+0x1f0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_DMA_Init+0xb8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a50      	ldr	r2, [pc, #320]	; (8004654 <HAL_DMA_Init+0x1f4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d101      	bne.n	800451c <HAL_DMA_Init+0xbc>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <HAL_DMA_Init+0xbe>
 800451c:	2300      	movs	r3, #0
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 813b 	beq.w	800479a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a37      	ldr	r2, [pc, #220]	; (8004618 <HAL_DMA_Init+0x1b8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d04a      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a36      	ldr	r2, [pc, #216]	; (800461c <HAL_DMA_Init+0x1bc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d045      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a34      	ldr	r2, [pc, #208]	; (8004620 <HAL_DMA_Init+0x1c0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d040      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a33      	ldr	r2, [pc, #204]	; (8004624 <HAL_DMA_Init+0x1c4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d03b      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a31      	ldr	r2, [pc, #196]	; (8004628 <HAL_DMA_Init+0x1c8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d036      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a30      	ldr	r2, [pc, #192]	; (800462c <HAL_DMA_Init+0x1cc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d031      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2e      	ldr	r2, [pc, #184]	; (8004630 <HAL_DMA_Init+0x1d0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d02c      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a2d      	ldr	r2, [pc, #180]	; (8004634 <HAL_DMA_Init+0x1d4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d027      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2b      	ldr	r2, [pc, #172]	; (8004638 <HAL_DMA_Init+0x1d8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d022      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a2a      	ldr	r2, [pc, #168]	; (800463c <HAL_DMA_Init+0x1dc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d01d      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a28      	ldr	r2, [pc, #160]	; (8004640 <HAL_DMA_Init+0x1e0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d018      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a27      	ldr	r2, [pc, #156]	; (8004644 <HAL_DMA_Init+0x1e4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a25      	ldr	r2, [pc, #148]	; (8004648 <HAL_DMA_Init+0x1e8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00e      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a24      	ldr	r2, [pc, #144]	; (800464c <HAL_DMA_Init+0x1ec>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d009      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a22      	ldr	r2, [pc, #136]	; (8004650 <HAL_DMA_Init+0x1f0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_DMA_Init+0x174>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a21      	ldr	r2, [pc, #132]	; (8004654 <HAL_DMA_Init+0x1f4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d108      	bne.n	80045e6 <HAL_DMA_Init+0x186>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0201 	bic.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e007      	b.n	80045f6 <HAL_DMA_Init+0x196>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045f6:	e02f      	b.n	8004658 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045f8:	f7fe f842 	bl	8002680 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b05      	cmp	r3, #5
 8004604:	d928      	bls.n	8004658 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2203      	movs	r2, #3
 8004610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e246      	b.n	8004aa6 <HAL_DMA_Init+0x646>
 8004618:	40020010 	.word	0x40020010
 800461c:	40020028 	.word	0x40020028
 8004620:	40020040 	.word	0x40020040
 8004624:	40020058 	.word	0x40020058
 8004628:	40020070 	.word	0x40020070
 800462c:	40020088 	.word	0x40020088
 8004630:	400200a0 	.word	0x400200a0
 8004634:	400200b8 	.word	0x400200b8
 8004638:	40020410 	.word	0x40020410
 800463c:	40020428 	.word	0x40020428
 8004640:	40020440 	.word	0x40020440
 8004644:	40020458 	.word	0x40020458
 8004648:	40020470 	.word	0x40020470
 800464c:	40020488 	.word	0x40020488
 8004650:	400204a0 	.word	0x400204a0
 8004654:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1c8      	bne.n	80045f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4b83      	ldr	r3, [pc, #524]	; (8004880 <HAL_DMA_Init+0x420>)
 8004672:	4013      	ands	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800467e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800468a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004696:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d107      	bne.n	80046bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	4313      	orrs	r3, r2
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80046bc:	4b71      	ldr	r3, [pc, #452]	; (8004884 <HAL_DMA_Init+0x424>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b71      	ldr	r3, [pc, #452]	; (8004888 <HAL_DMA_Init+0x428>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c8:	d328      	bcc.n	800471c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b28      	cmp	r3, #40	; 0x28
 80046d0:	d903      	bls.n	80046da <HAL_DMA_Init+0x27a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b2e      	cmp	r3, #46	; 0x2e
 80046d8:	d917      	bls.n	800470a <HAL_DMA_Init+0x2aa>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b3e      	cmp	r3, #62	; 0x3e
 80046e0:	d903      	bls.n	80046ea <HAL_DMA_Init+0x28a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b42      	cmp	r3, #66	; 0x42
 80046e8:	d90f      	bls.n	800470a <HAL_DMA_Init+0x2aa>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b46      	cmp	r3, #70	; 0x46
 80046f0:	d903      	bls.n	80046fa <HAL_DMA_Init+0x29a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b48      	cmp	r3, #72	; 0x48
 80046f8:	d907      	bls.n	800470a <HAL_DMA_Init+0x2aa>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b4e      	cmp	r3, #78	; 0x4e
 8004700:	d905      	bls.n	800470e <HAL_DMA_Init+0x2ae>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b52      	cmp	r3, #82	; 0x52
 8004708:	d801      	bhi.n	800470e <HAL_DMA_Init+0x2ae>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_DMA_Init+0x2b0>
 800470e:	2300      	movs	r3, #0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800471a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f023 0307 	bic.w	r3, r3, #7
 8004732:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2b04      	cmp	r3, #4
 8004744:	d117      	bne.n	8004776 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00e      	beq.n	8004776 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f002 fb33 	bl	8006dc4 <DMA_CheckFifoParam>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2240      	movs	r2, #64	; 0x40
 8004768:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e197      	b.n	8004aa6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f002 fa6e 	bl	8006c60 <DMA_CalcBaseAndBitshift>
 8004784:	4603      	mov	r3, r0
 8004786:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	223f      	movs	r2, #63	; 0x3f
 8004792:	409a      	lsls	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	e0cd      	b.n	8004936 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a3b      	ldr	r2, [pc, #236]	; (800488c <HAL_DMA_Init+0x42c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d022      	beq.n	80047ea <HAL_DMA_Init+0x38a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a39      	ldr	r2, [pc, #228]	; (8004890 <HAL_DMA_Init+0x430>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d01d      	beq.n	80047ea <HAL_DMA_Init+0x38a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a38      	ldr	r2, [pc, #224]	; (8004894 <HAL_DMA_Init+0x434>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d018      	beq.n	80047ea <HAL_DMA_Init+0x38a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a36      	ldr	r2, [pc, #216]	; (8004898 <HAL_DMA_Init+0x438>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <HAL_DMA_Init+0x38a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a35      	ldr	r2, [pc, #212]	; (800489c <HAL_DMA_Init+0x43c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00e      	beq.n	80047ea <HAL_DMA_Init+0x38a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a33      	ldr	r2, [pc, #204]	; (80048a0 <HAL_DMA_Init+0x440>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d009      	beq.n	80047ea <HAL_DMA_Init+0x38a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a32      	ldr	r2, [pc, #200]	; (80048a4 <HAL_DMA_Init+0x444>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <HAL_DMA_Init+0x38a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a30      	ldr	r2, [pc, #192]	; (80048a8 <HAL_DMA_Init+0x448>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d101      	bne.n	80047ee <HAL_DMA_Init+0x38e>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <HAL_DMA_Init+0x390>
 80047ee:	2300      	movs	r3, #0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8097 	beq.w	8004924 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a24      	ldr	r2, [pc, #144]	; (800488c <HAL_DMA_Init+0x42c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d021      	beq.n	8004844 <HAL_DMA_Init+0x3e4>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a22      	ldr	r2, [pc, #136]	; (8004890 <HAL_DMA_Init+0x430>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d01c      	beq.n	8004844 <HAL_DMA_Init+0x3e4>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a21      	ldr	r2, [pc, #132]	; (8004894 <HAL_DMA_Init+0x434>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d017      	beq.n	8004844 <HAL_DMA_Init+0x3e4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1f      	ldr	r2, [pc, #124]	; (8004898 <HAL_DMA_Init+0x438>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d012      	beq.n	8004844 <HAL_DMA_Init+0x3e4>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1e      	ldr	r2, [pc, #120]	; (800489c <HAL_DMA_Init+0x43c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00d      	beq.n	8004844 <HAL_DMA_Init+0x3e4>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1c      	ldr	r2, [pc, #112]	; (80048a0 <HAL_DMA_Init+0x440>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d008      	beq.n	8004844 <HAL_DMA_Init+0x3e4>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <HAL_DMA_Init+0x444>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <HAL_DMA_Init+0x3e4>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a19      	ldr	r2, [pc, #100]	; (80048a8 <HAL_DMA_Init+0x448>)
 8004842:	4293      	cmp	r3, r2
 8004844:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2202      	movs	r2, #2
 800484a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4b12      	ldr	r3, [pc, #72]	; (80048ac <HAL_DMA_Init+0x44c>)
 8004862:	4013      	ands	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d020      	beq.n	80048b0 <HAL_DMA_Init+0x450>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b80      	cmp	r3, #128	; 0x80
 8004874:	d102      	bne.n	800487c <HAL_DMA_Init+0x41c>
 8004876:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800487a:	e01a      	b.n	80048b2 <HAL_DMA_Init+0x452>
 800487c:	2300      	movs	r3, #0
 800487e:	e018      	b.n	80048b2 <HAL_DMA_Init+0x452>
 8004880:	fe10803f 	.word	0xfe10803f
 8004884:	5c001000 	.word	0x5c001000
 8004888:	ffff0000 	.word	0xffff0000
 800488c:	58025408 	.word	0x58025408
 8004890:	5802541c 	.word	0x5802541c
 8004894:	58025430 	.word	0x58025430
 8004898:	58025444 	.word	0x58025444
 800489c:	58025458 	.word	0x58025458
 80048a0:	5802546c 	.word	0x5802546c
 80048a4:	58025480 	.word	0x58025480
 80048a8:	58025494 	.word	0x58025494
 80048ac:	fffe000f 	.word	0xfffe000f
 80048b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68d2      	ldr	r2, [r2, #12]
 80048b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	4b6e      	ldr	r3, [pc, #440]	; (8004ab0 <HAL_DMA_Init+0x650>)
 80048f8:	4413      	add	r3, r2
 80048fa:	4a6e      	ldr	r2, [pc, #440]	; (8004ab4 <HAL_DMA_Init+0x654>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	009a      	lsls	r2, r3, #2
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f002 f9a9 	bl	8006c60 <DMA_CalcBaseAndBitshift>
 800490e:	4603      	mov	r3, r0
 8004910:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	2201      	movs	r2, #1
 800491c:	409a      	lsls	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	e008      	b.n	8004936 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2240      	movs	r2, #64	; 0x40
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2203      	movs	r2, #3
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e0b7      	b.n	8004aa6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a5f      	ldr	r2, [pc, #380]	; (8004ab8 <HAL_DMA_Init+0x658>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d072      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a5d      	ldr	r2, [pc, #372]	; (8004abc <HAL_DMA_Init+0x65c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d06d      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a5c      	ldr	r2, [pc, #368]	; (8004ac0 <HAL_DMA_Init+0x660>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d068      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a5a      	ldr	r2, [pc, #360]	; (8004ac4 <HAL_DMA_Init+0x664>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d063      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a59      	ldr	r2, [pc, #356]	; (8004ac8 <HAL_DMA_Init+0x668>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d05e      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a57      	ldr	r2, [pc, #348]	; (8004acc <HAL_DMA_Init+0x66c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d059      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a56      	ldr	r2, [pc, #344]	; (8004ad0 <HAL_DMA_Init+0x670>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d054      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a54      	ldr	r2, [pc, #336]	; (8004ad4 <HAL_DMA_Init+0x674>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d04f      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a53      	ldr	r2, [pc, #332]	; (8004ad8 <HAL_DMA_Init+0x678>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d04a      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a51      	ldr	r2, [pc, #324]	; (8004adc <HAL_DMA_Init+0x67c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d045      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a50      	ldr	r2, [pc, #320]	; (8004ae0 <HAL_DMA_Init+0x680>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d040      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a4e      	ldr	r2, [pc, #312]	; (8004ae4 <HAL_DMA_Init+0x684>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d03b      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a4d      	ldr	r2, [pc, #308]	; (8004ae8 <HAL_DMA_Init+0x688>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d036      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a4b      	ldr	r2, [pc, #300]	; (8004aec <HAL_DMA_Init+0x68c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d031      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a4a      	ldr	r2, [pc, #296]	; (8004af0 <HAL_DMA_Init+0x690>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d02c      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a48      	ldr	r2, [pc, #288]	; (8004af4 <HAL_DMA_Init+0x694>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d027      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a47      	ldr	r2, [pc, #284]	; (8004af8 <HAL_DMA_Init+0x698>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d022      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a45      	ldr	r2, [pc, #276]	; (8004afc <HAL_DMA_Init+0x69c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01d      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a44      	ldr	r2, [pc, #272]	; (8004b00 <HAL_DMA_Init+0x6a0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d018      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a42      	ldr	r2, [pc, #264]	; (8004b04 <HAL_DMA_Init+0x6a4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a41      	ldr	r2, [pc, #260]	; (8004b08 <HAL_DMA_Init+0x6a8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00e      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3f      	ldr	r2, [pc, #252]	; (8004b0c <HAL_DMA_Init+0x6ac>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d009      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a3e      	ldr	r2, [pc, #248]	; (8004b10 <HAL_DMA_Init+0x6b0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <HAL_DMA_Init+0x5c6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a3c      	ldr	r2, [pc, #240]	; (8004b14 <HAL_DMA_Init+0x6b4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <HAL_DMA_Init+0x5ca>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_DMA_Init+0x5cc>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d032      	beq.n	8004a96 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f002 fa43 	bl	8006ebc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b80      	cmp	r3, #128	; 0x80
 8004a3c:	d102      	bne.n	8004a44 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d010      	beq.n	8004a84 <HAL_DMA_Init+0x624>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d80c      	bhi.n	8004a84 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f002 fac0 	bl	8006ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	e008      	b.n	8004a96 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	a7fdabf8 	.word	0xa7fdabf8
 8004ab4:	cccccccd 	.word	0xcccccccd
 8004ab8:	40020010 	.word	0x40020010
 8004abc:	40020028 	.word	0x40020028
 8004ac0:	40020040 	.word	0x40020040
 8004ac4:	40020058 	.word	0x40020058
 8004ac8:	40020070 	.word	0x40020070
 8004acc:	40020088 	.word	0x40020088
 8004ad0:	400200a0 	.word	0x400200a0
 8004ad4:	400200b8 	.word	0x400200b8
 8004ad8:	40020410 	.word	0x40020410
 8004adc:	40020428 	.word	0x40020428
 8004ae0:	40020440 	.word	0x40020440
 8004ae4:	40020458 	.word	0x40020458
 8004ae8:	40020470 	.word	0x40020470
 8004aec:	40020488 	.word	0x40020488
 8004af0:	400204a0 	.word	0x400204a0
 8004af4:	400204b8 	.word	0x400204b8
 8004af8:	58025408 	.word	0x58025408
 8004afc:	5802541c 	.word	0x5802541c
 8004b00:	58025430 	.word	0x58025430
 8004b04:	58025444 	.word	0x58025444
 8004b08:	58025458 	.word	0x58025458
 8004b0c:	5802546c 	.word	0x5802546c
 8004b10:	58025480 	.word	0x58025480
 8004b14:	58025494 	.word	0x58025494

08004b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e226      	b.n	8004f82 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_DMA_Start_IT+0x2a>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e21f      	b.n	8004f82 <HAL_DMA_Start_IT+0x46a>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	f040 820a 	bne.w	8004f6c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a68      	ldr	r2, [pc, #416]	; (8004d0c <HAL_DMA_Start_IT+0x1f4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d04a      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a66      	ldr	r2, [pc, #408]	; (8004d10 <HAL_DMA_Start_IT+0x1f8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d045      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a65      	ldr	r2, [pc, #404]	; (8004d14 <HAL_DMA_Start_IT+0x1fc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d040      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a63      	ldr	r2, [pc, #396]	; (8004d18 <HAL_DMA_Start_IT+0x200>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d03b      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a62      	ldr	r2, [pc, #392]	; (8004d1c <HAL_DMA_Start_IT+0x204>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d036      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a60      	ldr	r2, [pc, #384]	; (8004d20 <HAL_DMA_Start_IT+0x208>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d031      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a5f      	ldr	r2, [pc, #380]	; (8004d24 <HAL_DMA_Start_IT+0x20c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d02c      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a5d      	ldr	r2, [pc, #372]	; (8004d28 <HAL_DMA_Start_IT+0x210>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d027      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a5c      	ldr	r2, [pc, #368]	; (8004d2c <HAL_DMA_Start_IT+0x214>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d022      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a5a      	ldr	r2, [pc, #360]	; (8004d30 <HAL_DMA_Start_IT+0x218>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01d      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a59      	ldr	r2, [pc, #356]	; (8004d34 <HAL_DMA_Start_IT+0x21c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d018      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a57      	ldr	r2, [pc, #348]	; (8004d38 <HAL_DMA_Start_IT+0x220>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a56      	ldr	r2, [pc, #344]	; (8004d3c <HAL_DMA_Start_IT+0x224>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a54      	ldr	r2, [pc, #336]	; (8004d40 <HAL_DMA_Start_IT+0x228>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a53      	ldr	r2, [pc, #332]	; (8004d44 <HAL_DMA_Start_IT+0x22c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_DMA_Start_IT+0xee>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a51      	ldr	r2, [pc, #324]	; (8004d48 <HAL_DMA_Start_IT+0x230>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d108      	bne.n	8004c18 <HAL_DMA_Start_IT+0x100>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e007      	b.n	8004c28 <HAL_DMA_Start_IT+0x110>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f001 fe6a 	bl	8006908 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a34      	ldr	r2, [pc, #208]	; (8004d0c <HAL_DMA_Start_IT+0x1f4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d04a      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a33      	ldr	r2, [pc, #204]	; (8004d10 <HAL_DMA_Start_IT+0x1f8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d045      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a31      	ldr	r2, [pc, #196]	; (8004d14 <HAL_DMA_Start_IT+0x1fc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d040      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a30      	ldr	r2, [pc, #192]	; (8004d18 <HAL_DMA_Start_IT+0x200>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d03b      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a2e      	ldr	r2, [pc, #184]	; (8004d1c <HAL_DMA_Start_IT+0x204>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d036      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2d      	ldr	r2, [pc, #180]	; (8004d20 <HAL_DMA_Start_IT+0x208>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d031      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a2b      	ldr	r2, [pc, #172]	; (8004d24 <HAL_DMA_Start_IT+0x20c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d02c      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2a      	ldr	r2, [pc, #168]	; (8004d28 <HAL_DMA_Start_IT+0x210>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d027      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a28      	ldr	r2, [pc, #160]	; (8004d2c <HAL_DMA_Start_IT+0x214>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d022      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a27      	ldr	r2, [pc, #156]	; (8004d30 <HAL_DMA_Start_IT+0x218>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d01d      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a25      	ldr	r2, [pc, #148]	; (8004d34 <HAL_DMA_Start_IT+0x21c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d018      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a24      	ldr	r2, [pc, #144]	; (8004d38 <HAL_DMA_Start_IT+0x220>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d013      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a22      	ldr	r2, [pc, #136]	; (8004d3c <HAL_DMA_Start_IT+0x224>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00e      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a21      	ldr	r2, [pc, #132]	; (8004d40 <HAL_DMA_Start_IT+0x228>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d009      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1f      	ldr	r2, [pc, #124]	; (8004d44 <HAL_DMA_Start_IT+0x22c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d004      	beq.n	8004cd4 <HAL_DMA_Start_IT+0x1bc>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1e      	ldr	r2, [pc, #120]	; (8004d48 <HAL_DMA_Start_IT+0x230>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d101      	bne.n	8004cd8 <HAL_DMA_Start_IT+0x1c0>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e000      	b.n	8004cda <HAL_DMA_Start_IT+0x1c2>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d036      	beq.n	8004d4c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f023 021e 	bic.w	r2, r3, #30
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0216 	orr.w	r2, r2, #22
 8004cf0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d03e      	beq.n	8004d78 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0208 	orr.w	r2, r2, #8
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	e035      	b.n	8004d78 <HAL_DMA_Start_IT+0x260>
 8004d0c:	40020010 	.word	0x40020010
 8004d10:	40020028 	.word	0x40020028
 8004d14:	40020040 	.word	0x40020040
 8004d18:	40020058 	.word	0x40020058
 8004d1c:	40020070 	.word	0x40020070
 8004d20:	40020088 	.word	0x40020088
 8004d24:	400200a0 	.word	0x400200a0
 8004d28:	400200b8 	.word	0x400200b8
 8004d2c:	40020410 	.word	0x40020410
 8004d30:	40020428 	.word	0x40020428
 8004d34:	40020440 	.word	0x40020440
 8004d38:	40020458 	.word	0x40020458
 8004d3c:	40020470 	.word	0x40020470
 8004d40:	40020488 	.word	0x40020488
 8004d44:	400204a0 	.word	0x400204a0
 8004d48:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f023 020e 	bic.w	r2, r3, #14
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 020a 	orr.w	r2, r2, #10
 8004d5e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0204 	orr.w	r2, r2, #4
 8004d76:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a83      	ldr	r2, [pc, #524]	; (8004f8c <HAL_DMA_Start_IT+0x474>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d072      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a82      	ldr	r2, [pc, #520]	; (8004f90 <HAL_DMA_Start_IT+0x478>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d06d      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a80      	ldr	r2, [pc, #512]	; (8004f94 <HAL_DMA_Start_IT+0x47c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d068      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a7f      	ldr	r2, [pc, #508]	; (8004f98 <HAL_DMA_Start_IT+0x480>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d063      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a7d      	ldr	r2, [pc, #500]	; (8004f9c <HAL_DMA_Start_IT+0x484>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d05e      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a7c      	ldr	r2, [pc, #496]	; (8004fa0 <HAL_DMA_Start_IT+0x488>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d059      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a7a      	ldr	r2, [pc, #488]	; (8004fa4 <HAL_DMA_Start_IT+0x48c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d054      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a79      	ldr	r2, [pc, #484]	; (8004fa8 <HAL_DMA_Start_IT+0x490>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d04f      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a77      	ldr	r2, [pc, #476]	; (8004fac <HAL_DMA_Start_IT+0x494>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d04a      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a76      	ldr	r2, [pc, #472]	; (8004fb0 <HAL_DMA_Start_IT+0x498>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d045      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a74      	ldr	r2, [pc, #464]	; (8004fb4 <HAL_DMA_Start_IT+0x49c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d040      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a73      	ldr	r2, [pc, #460]	; (8004fb8 <HAL_DMA_Start_IT+0x4a0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d03b      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a71      	ldr	r2, [pc, #452]	; (8004fbc <HAL_DMA_Start_IT+0x4a4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d036      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a70      	ldr	r2, [pc, #448]	; (8004fc0 <HAL_DMA_Start_IT+0x4a8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d031      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a6e      	ldr	r2, [pc, #440]	; (8004fc4 <HAL_DMA_Start_IT+0x4ac>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d02c      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a6d      	ldr	r2, [pc, #436]	; (8004fc8 <HAL_DMA_Start_IT+0x4b0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d027      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a6b      	ldr	r2, [pc, #428]	; (8004fcc <HAL_DMA_Start_IT+0x4b4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d022      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a6a      	ldr	r2, [pc, #424]	; (8004fd0 <HAL_DMA_Start_IT+0x4b8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d01d      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a68      	ldr	r2, [pc, #416]	; (8004fd4 <HAL_DMA_Start_IT+0x4bc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d018      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a67      	ldr	r2, [pc, #412]	; (8004fd8 <HAL_DMA_Start_IT+0x4c0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d013      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a65      	ldr	r2, [pc, #404]	; (8004fdc <HAL_DMA_Start_IT+0x4c4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00e      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a64      	ldr	r2, [pc, #400]	; (8004fe0 <HAL_DMA_Start_IT+0x4c8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d009      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a62      	ldr	r2, [pc, #392]	; (8004fe4 <HAL_DMA_Start_IT+0x4cc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <HAL_DMA_Start_IT+0x350>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a61      	ldr	r2, [pc, #388]	; (8004fe8 <HAL_DMA_Start_IT+0x4d0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d101      	bne.n	8004e6c <HAL_DMA_Start_IT+0x354>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <HAL_DMA_Start_IT+0x356>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01a      	beq.n	8004ea8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e8e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a37      	ldr	r2, [pc, #220]	; (8004f8c <HAL_DMA_Start_IT+0x474>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d04a      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a36      	ldr	r2, [pc, #216]	; (8004f90 <HAL_DMA_Start_IT+0x478>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d045      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a34      	ldr	r2, [pc, #208]	; (8004f94 <HAL_DMA_Start_IT+0x47c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d040      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a33      	ldr	r2, [pc, #204]	; (8004f98 <HAL_DMA_Start_IT+0x480>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d03b      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a31      	ldr	r2, [pc, #196]	; (8004f9c <HAL_DMA_Start_IT+0x484>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d036      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a30      	ldr	r2, [pc, #192]	; (8004fa0 <HAL_DMA_Start_IT+0x488>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d031      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a2e      	ldr	r2, [pc, #184]	; (8004fa4 <HAL_DMA_Start_IT+0x48c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d02c      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a2d      	ldr	r2, [pc, #180]	; (8004fa8 <HAL_DMA_Start_IT+0x490>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d027      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a2b      	ldr	r2, [pc, #172]	; (8004fac <HAL_DMA_Start_IT+0x494>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d022      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a2a      	ldr	r2, [pc, #168]	; (8004fb0 <HAL_DMA_Start_IT+0x498>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d01d      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a28      	ldr	r2, [pc, #160]	; (8004fb4 <HAL_DMA_Start_IT+0x49c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d018      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a27      	ldr	r2, [pc, #156]	; (8004fb8 <HAL_DMA_Start_IT+0x4a0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d013      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a25      	ldr	r2, [pc, #148]	; (8004fbc <HAL_DMA_Start_IT+0x4a4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00e      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a24      	ldr	r2, [pc, #144]	; (8004fc0 <HAL_DMA_Start_IT+0x4a8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d009      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a22      	ldr	r2, [pc, #136]	; (8004fc4 <HAL_DMA_Start_IT+0x4ac>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d004      	beq.n	8004f48 <HAL_DMA_Start_IT+0x430>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a21      	ldr	r2, [pc, #132]	; (8004fc8 <HAL_DMA_Start_IT+0x4b0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d108      	bne.n	8004f5a <HAL_DMA_Start_IT+0x442>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e012      	b.n	8004f80 <HAL_DMA_Start_IT+0x468>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0201 	orr.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	e009      	b.n	8004f80 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40020010 	.word	0x40020010
 8004f90:	40020028 	.word	0x40020028
 8004f94:	40020040 	.word	0x40020040
 8004f98:	40020058 	.word	0x40020058
 8004f9c:	40020070 	.word	0x40020070
 8004fa0:	40020088 	.word	0x40020088
 8004fa4:	400200a0 	.word	0x400200a0
 8004fa8:	400200b8 	.word	0x400200b8
 8004fac:	40020410 	.word	0x40020410
 8004fb0:	40020428 	.word	0x40020428
 8004fb4:	40020440 	.word	0x40020440
 8004fb8:	40020458 	.word	0x40020458
 8004fbc:	40020470 	.word	0x40020470
 8004fc0:	40020488 	.word	0x40020488
 8004fc4:	400204a0 	.word	0x400204a0
 8004fc8:	400204b8 	.word	0x400204b8
 8004fcc:	58025408 	.word	0x58025408
 8004fd0:	5802541c 	.word	0x5802541c
 8004fd4:	58025430 	.word	0x58025430
 8004fd8:	58025444 	.word	0x58025444
 8004fdc:	58025458 	.word	0x58025458
 8004fe0:	5802546c 	.word	0x5802546c
 8004fe4:	58025480 	.word	0x58025480
 8004fe8:	58025494 	.word	0x58025494

08004fec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004ff4:	f7fd fb44 	bl	8002680 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e2dc      	b.n	80055be <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d008      	beq.n	8005022 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2280      	movs	r2, #128	; 0x80
 8005014:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e2cd      	b.n	80055be <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a76      	ldr	r2, [pc, #472]	; (8005200 <HAL_DMA_Abort+0x214>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d04a      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a74      	ldr	r2, [pc, #464]	; (8005204 <HAL_DMA_Abort+0x218>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d045      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a73      	ldr	r2, [pc, #460]	; (8005208 <HAL_DMA_Abort+0x21c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d040      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a71      	ldr	r2, [pc, #452]	; (800520c <HAL_DMA_Abort+0x220>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d03b      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a70      	ldr	r2, [pc, #448]	; (8005210 <HAL_DMA_Abort+0x224>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d036      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a6e      	ldr	r2, [pc, #440]	; (8005214 <HAL_DMA_Abort+0x228>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d031      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a6d      	ldr	r2, [pc, #436]	; (8005218 <HAL_DMA_Abort+0x22c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d02c      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a6b      	ldr	r2, [pc, #428]	; (800521c <HAL_DMA_Abort+0x230>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d027      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a6a      	ldr	r2, [pc, #424]	; (8005220 <HAL_DMA_Abort+0x234>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d022      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a68      	ldr	r2, [pc, #416]	; (8005224 <HAL_DMA_Abort+0x238>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01d      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a67      	ldr	r2, [pc, #412]	; (8005228 <HAL_DMA_Abort+0x23c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d018      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a65      	ldr	r2, [pc, #404]	; (800522c <HAL_DMA_Abort+0x240>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a64      	ldr	r2, [pc, #400]	; (8005230 <HAL_DMA_Abort+0x244>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00e      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a62      	ldr	r2, [pc, #392]	; (8005234 <HAL_DMA_Abort+0x248>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a61      	ldr	r2, [pc, #388]	; (8005238 <HAL_DMA_Abort+0x24c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <HAL_DMA_Abort+0xd6>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a5f      	ldr	r2, [pc, #380]	; (800523c <HAL_DMA_Abort+0x250>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d101      	bne.n	80050c6 <HAL_DMA_Abort+0xda>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <HAL_DMA_Abort+0xdc>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d013      	beq.n	80050f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 021e 	bic.w	r2, r2, #30
 80050da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695a      	ldr	r2, [r3, #20]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e00a      	b.n	800510a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 020e 	bic.w	r2, r2, #14
 8005102:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a3c      	ldr	r2, [pc, #240]	; (8005200 <HAL_DMA_Abort+0x214>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d072      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a3a      	ldr	r2, [pc, #232]	; (8005204 <HAL_DMA_Abort+0x218>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d06d      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a39      	ldr	r2, [pc, #228]	; (8005208 <HAL_DMA_Abort+0x21c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d068      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a37      	ldr	r2, [pc, #220]	; (800520c <HAL_DMA_Abort+0x220>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d063      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a36      	ldr	r2, [pc, #216]	; (8005210 <HAL_DMA_Abort+0x224>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d05e      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a34      	ldr	r2, [pc, #208]	; (8005214 <HAL_DMA_Abort+0x228>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d059      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a33      	ldr	r2, [pc, #204]	; (8005218 <HAL_DMA_Abort+0x22c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d054      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a31      	ldr	r2, [pc, #196]	; (800521c <HAL_DMA_Abort+0x230>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d04f      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a30      	ldr	r2, [pc, #192]	; (8005220 <HAL_DMA_Abort+0x234>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d04a      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2e      	ldr	r2, [pc, #184]	; (8005224 <HAL_DMA_Abort+0x238>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d045      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a2d      	ldr	r2, [pc, #180]	; (8005228 <HAL_DMA_Abort+0x23c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d040      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a2b      	ldr	r2, [pc, #172]	; (800522c <HAL_DMA_Abort+0x240>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d03b      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <HAL_DMA_Abort+0x244>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d036      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a28      	ldr	r2, [pc, #160]	; (8005234 <HAL_DMA_Abort+0x248>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d031      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a27      	ldr	r2, [pc, #156]	; (8005238 <HAL_DMA_Abort+0x24c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d02c      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a25      	ldr	r2, [pc, #148]	; (800523c <HAL_DMA_Abort+0x250>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d027      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a24      	ldr	r2, [pc, #144]	; (8005240 <HAL_DMA_Abort+0x254>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d022      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a22      	ldr	r2, [pc, #136]	; (8005244 <HAL_DMA_Abort+0x258>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01d      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a21      	ldr	r2, [pc, #132]	; (8005248 <HAL_DMA_Abort+0x25c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d018      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1f      	ldr	r2, [pc, #124]	; (800524c <HAL_DMA_Abort+0x260>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <HAL_DMA_Abort+0x264>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <HAL_DMA_Abort+0x268>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1b      	ldr	r2, [pc, #108]	; (8005258 <HAL_DMA_Abort+0x26c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_DMA_Abort+0x20e>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <HAL_DMA_Abort+0x270>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d132      	bne.n	8005260 <HAL_DMA_Abort+0x274>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e031      	b.n	8005262 <HAL_DMA_Abort+0x276>
 80051fe:	bf00      	nop
 8005200:	40020010 	.word	0x40020010
 8005204:	40020028 	.word	0x40020028
 8005208:	40020040 	.word	0x40020040
 800520c:	40020058 	.word	0x40020058
 8005210:	40020070 	.word	0x40020070
 8005214:	40020088 	.word	0x40020088
 8005218:	400200a0 	.word	0x400200a0
 800521c:	400200b8 	.word	0x400200b8
 8005220:	40020410 	.word	0x40020410
 8005224:	40020428 	.word	0x40020428
 8005228:	40020440 	.word	0x40020440
 800522c:	40020458 	.word	0x40020458
 8005230:	40020470 	.word	0x40020470
 8005234:	40020488 	.word	0x40020488
 8005238:	400204a0 	.word	0x400204a0
 800523c:	400204b8 	.word	0x400204b8
 8005240:	58025408 	.word	0x58025408
 8005244:	5802541c 	.word	0x5802541c
 8005248:	58025430 	.word	0x58025430
 800524c:	58025444 	.word	0x58025444
 8005250:	58025458 	.word	0x58025458
 8005254:	5802546c 	.word	0x5802546c
 8005258:	58025480 	.word	0x58025480
 800525c:	58025494 	.word	0x58025494
 8005260:	2300      	movs	r3, #0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005274:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a6d      	ldr	r2, [pc, #436]	; (8005430 <HAL_DMA_Abort+0x444>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d04a      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a6b      	ldr	r2, [pc, #428]	; (8005434 <HAL_DMA_Abort+0x448>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d045      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a6a      	ldr	r2, [pc, #424]	; (8005438 <HAL_DMA_Abort+0x44c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d040      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a68      	ldr	r2, [pc, #416]	; (800543c <HAL_DMA_Abort+0x450>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d03b      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a67      	ldr	r2, [pc, #412]	; (8005440 <HAL_DMA_Abort+0x454>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d036      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a65      	ldr	r2, [pc, #404]	; (8005444 <HAL_DMA_Abort+0x458>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d031      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a64      	ldr	r2, [pc, #400]	; (8005448 <HAL_DMA_Abort+0x45c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d02c      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a62      	ldr	r2, [pc, #392]	; (800544c <HAL_DMA_Abort+0x460>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d027      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a61      	ldr	r2, [pc, #388]	; (8005450 <HAL_DMA_Abort+0x464>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d022      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a5f      	ldr	r2, [pc, #380]	; (8005454 <HAL_DMA_Abort+0x468>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01d      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a5e      	ldr	r2, [pc, #376]	; (8005458 <HAL_DMA_Abort+0x46c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d018      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a5c      	ldr	r2, [pc, #368]	; (800545c <HAL_DMA_Abort+0x470>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a5b      	ldr	r2, [pc, #364]	; (8005460 <HAL_DMA_Abort+0x474>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00e      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a59      	ldr	r2, [pc, #356]	; (8005464 <HAL_DMA_Abort+0x478>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a58      	ldr	r2, [pc, #352]	; (8005468 <HAL_DMA_Abort+0x47c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <HAL_DMA_Abort+0x32a>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a56      	ldr	r2, [pc, #344]	; (800546c <HAL_DMA_Abort+0x480>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d108      	bne.n	8005328 <HAL_DMA_Abort+0x33c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0201 	bic.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	e007      	b.n	8005338 <HAL_DMA_Abort+0x34c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005338:	e013      	b.n	8005362 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800533a:	f7fd f9a1 	bl	8002680 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b05      	cmp	r3, #5
 8005346:	d90c      	bls.n	8005362 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2203      	movs	r2, #3
 8005352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e12d      	b.n	80055be <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e5      	bne.n	800533a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2f      	ldr	r2, [pc, #188]	; (8005430 <HAL_DMA_Abort+0x444>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d04a      	beq.n	800540e <HAL_DMA_Abort+0x422>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a2d      	ldr	r2, [pc, #180]	; (8005434 <HAL_DMA_Abort+0x448>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d045      	beq.n	800540e <HAL_DMA_Abort+0x422>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a2c      	ldr	r2, [pc, #176]	; (8005438 <HAL_DMA_Abort+0x44c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d040      	beq.n	800540e <HAL_DMA_Abort+0x422>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a2a      	ldr	r2, [pc, #168]	; (800543c <HAL_DMA_Abort+0x450>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d03b      	beq.n	800540e <HAL_DMA_Abort+0x422>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a29      	ldr	r2, [pc, #164]	; (8005440 <HAL_DMA_Abort+0x454>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d036      	beq.n	800540e <HAL_DMA_Abort+0x422>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a27      	ldr	r2, [pc, #156]	; (8005444 <HAL_DMA_Abort+0x458>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d031      	beq.n	800540e <HAL_DMA_Abort+0x422>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a26      	ldr	r2, [pc, #152]	; (8005448 <HAL_DMA_Abort+0x45c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d02c      	beq.n	800540e <HAL_DMA_Abort+0x422>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a24      	ldr	r2, [pc, #144]	; (800544c <HAL_DMA_Abort+0x460>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d027      	beq.n	800540e <HAL_DMA_Abort+0x422>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a23      	ldr	r2, [pc, #140]	; (8005450 <HAL_DMA_Abort+0x464>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d022      	beq.n	800540e <HAL_DMA_Abort+0x422>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a21      	ldr	r2, [pc, #132]	; (8005454 <HAL_DMA_Abort+0x468>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d01d      	beq.n	800540e <HAL_DMA_Abort+0x422>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a20      	ldr	r2, [pc, #128]	; (8005458 <HAL_DMA_Abort+0x46c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d018      	beq.n	800540e <HAL_DMA_Abort+0x422>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1e      	ldr	r2, [pc, #120]	; (800545c <HAL_DMA_Abort+0x470>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <HAL_DMA_Abort+0x422>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <HAL_DMA_Abort+0x474>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00e      	beq.n	800540e <HAL_DMA_Abort+0x422>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1b      	ldr	r2, [pc, #108]	; (8005464 <HAL_DMA_Abort+0x478>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d009      	beq.n	800540e <HAL_DMA_Abort+0x422>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1a      	ldr	r2, [pc, #104]	; (8005468 <HAL_DMA_Abort+0x47c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d004      	beq.n	800540e <HAL_DMA_Abort+0x422>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a18      	ldr	r2, [pc, #96]	; (800546c <HAL_DMA_Abort+0x480>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d101      	bne.n	8005412 <HAL_DMA_Abort+0x426>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <HAL_DMA_Abort+0x428>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d02b      	beq.n	8005470 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	223f      	movs	r2, #63	; 0x3f
 8005428:	409a      	lsls	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	609a      	str	r2, [r3, #8]
 800542e:	e02a      	b.n	8005486 <HAL_DMA_Abort+0x49a>
 8005430:	40020010 	.word	0x40020010
 8005434:	40020028 	.word	0x40020028
 8005438:	40020040 	.word	0x40020040
 800543c:	40020058 	.word	0x40020058
 8005440:	40020070 	.word	0x40020070
 8005444:	40020088 	.word	0x40020088
 8005448:	400200a0 	.word	0x400200a0
 800544c:	400200b8 	.word	0x400200b8
 8005450:	40020410 	.word	0x40020410
 8005454:	40020428 	.word	0x40020428
 8005458:	40020440 	.word	0x40020440
 800545c:	40020458 	.word	0x40020458
 8005460:	40020470 	.word	0x40020470
 8005464:	40020488 	.word	0x40020488
 8005468:	400204a0 	.word	0x400204a0
 800546c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005474:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	2201      	movs	r2, #1
 8005480:	409a      	lsls	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a4f      	ldr	r2, [pc, #316]	; (80055c8 <HAL_DMA_Abort+0x5dc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d072      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a4d      	ldr	r2, [pc, #308]	; (80055cc <HAL_DMA_Abort+0x5e0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d06d      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a4c      	ldr	r2, [pc, #304]	; (80055d0 <HAL_DMA_Abort+0x5e4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d068      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a4a      	ldr	r2, [pc, #296]	; (80055d4 <HAL_DMA_Abort+0x5e8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d063      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a49      	ldr	r2, [pc, #292]	; (80055d8 <HAL_DMA_Abort+0x5ec>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d05e      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a47      	ldr	r2, [pc, #284]	; (80055dc <HAL_DMA_Abort+0x5f0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d059      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a46      	ldr	r2, [pc, #280]	; (80055e0 <HAL_DMA_Abort+0x5f4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d054      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a44      	ldr	r2, [pc, #272]	; (80055e4 <HAL_DMA_Abort+0x5f8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d04f      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a43      	ldr	r2, [pc, #268]	; (80055e8 <HAL_DMA_Abort+0x5fc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d04a      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a41      	ldr	r2, [pc, #260]	; (80055ec <HAL_DMA_Abort+0x600>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d045      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a40      	ldr	r2, [pc, #256]	; (80055f0 <HAL_DMA_Abort+0x604>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d040      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a3e      	ldr	r2, [pc, #248]	; (80055f4 <HAL_DMA_Abort+0x608>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d03b      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a3d      	ldr	r2, [pc, #244]	; (80055f8 <HAL_DMA_Abort+0x60c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d036      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a3b      	ldr	r2, [pc, #236]	; (80055fc <HAL_DMA_Abort+0x610>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d031      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a3a      	ldr	r2, [pc, #232]	; (8005600 <HAL_DMA_Abort+0x614>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d02c      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a38      	ldr	r2, [pc, #224]	; (8005604 <HAL_DMA_Abort+0x618>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d027      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a37      	ldr	r2, [pc, #220]	; (8005608 <HAL_DMA_Abort+0x61c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d022      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a35      	ldr	r2, [pc, #212]	; (800560c <HAL_DMA_Abort+0x620>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01d      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a34      	ldr	r2, [pc, #208]	; (8005610 <HAL_DMA_Abort+0x624>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d018      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a32      	ldr	r2, [pc, #200]	; (8005614 <HAL_DMA_Abort+0x628>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a31      	ldr	r2, [pc, #196]	; (8005618 <HAL_DMA_Abort+0x62c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00e      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2f      	ldr	r2, [pc, #188]	; (800561c <HAL_DMA_Abort+0x630>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d009      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2e      	ldr	r2, [pc, #184]	; (8005620 <HAL_DMA_Abort+0x634>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d004      	beq.n	8005576 <HAL_DMA_Abort+0x58a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2c      	ldr	r2, [pc, #176]	; (8005624 <HAL_DMA_Abort+0x638>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d101      	bne.n	800557a <HAL_DMA_Abort+0x58e>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <HAL_DMA_Abort+0x590>
 800557a:	2300      	movs	r3, #0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d015      	beq.n	80055ac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005588:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00c      	beq.n	80055ac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800559c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055a0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055aa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40020010 	.word	0x40020010
 80055cc:	40020028 	.word	0x40020028
 80055d0:	40020040 	.word	0x40020040
 80055d4:	40020058 	.word	0x40020058
 80055d8:	40020070 	.word	0x40020070
 80055dc:	40020088 	.word	0x40020088
 80055e0:	400200a0 	.word	0x400200a0
 80055e4:	400200b8 	.word	0x400200b8
 80055e8:	40020410 	.word	0x40020410
 80055ec:	40020428 	.word	0x40020428
 80055f0:	40020440 	.word	0x40020440
 80055f4:	40020458 	.word	0x40020458
 80055f8:	40020470 	.word	0x40020470
 80055fc:	40020488 	.word	0x40020488
 8005600:	400204a0 	.word	0x400204a0
 8005604:	400204b8 	.word	0x400204b8
 8005608:	58025408 	.word	0x58025408
 800560c:	5802541c 	.word	0x5802541c
 8005610:	58025430 	.word	0x58025430
 8005614:	58025444 	.word	0x58025444
 8005618:	58025458 	.word	0x58025458
 800561c:	5802546c 	.word	0x5802546c
 8005620:	58025480 	.word	0x58025480
 8005624:	58025494 	.word	0x58025494

08005628 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e237      	b.n	8005aaa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d004      	beq.n	8005650 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2280      	movs	r2, #128	; 0x80
 800564a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e22c      	b.n	8005aaa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a5c      	ldr	r2, [pc, #368]	; (80057c8 <HAL_DMA_Abort_IT+0x1a0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d04a      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a5b      	ldr	r2, [pc, #364]	; (80057cc <HAL_DMA_Abort_IT+0x1a4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d045      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a59      	ldr	r2, [pc, #356]	; (80057d0 <HAL_DMA_Abort_IT+0x1a8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d040      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a58      	ldr	r2, [pc, #352]	; (80057d4 <HAL_DMA_Abort_IT+0x1ac>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d03b      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a56      	ldr	r2, [pc, #344]	; (80057d8 <HAL_DMA_Abort_IT+0x1b0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d036      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a55      	ldr	r2, [pc, #340]	; (80057dc <HAL_DMA_Abort_IT+0x1b4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d031      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a53      	ldr	r2, [pc, #332]	; (80057e0 <HAL_DMA_Abort_IT+0x1b8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d02c      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a52      	ldr	r2, [pc, #328]	; (80057e4 <HAL_DMA_Abort_IT+0x1bc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d027      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a50      	ldr	r2, [pc, #320]	; (80057e8 <HAL_DMA_Abort_IT+0x1c0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d022      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a4f      	ldr	r2, [pc, #316]	; (80057ec <HAL_DMA_Abort_IT+0x1c4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d01d      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a4d      	ldr	r2, [pc, #308]	; (80057f0 <HAL_DMA_Abort_IT+0x1c8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d018      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a4c      	ldr	r2, [pc, #304]	; (80057f4 <HAL_DMA_Abort_IT+0x1cc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d013      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a4a      	ldr	r2, [pc, #296]	; (80057f8 <HAL_DMA_Abort_IT+0x1d0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00e      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a49      	ldr	r2, [pc, #292]	; (80057fc <HAL_DMA_Abort_IT+0x1d4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d009      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a47      	ldr	r2, [pc, #284]	; (8005800 <HAL_DMA_Abort_IT+0x1d8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_DMA_Abort_IT+0xc8>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a46      	ldr	r2, [pc, #280]	; (8005804 <HAL_DMA_Abort_IT+0x1dc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d101      	bne.n	80056f4 <HAL_DMA_Abort_IT+0xcc>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <HAL_DMA_Abort_IT+0xce>
 80056f4:	2300      	movs	r3, #0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8086 	beq.w	8005808 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2204      	movs	r2, #4
 8005700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a2f      	ldr	r2, [pc, #188]	; (80057c8 <HAL_DMA_Abort_IT+0x1a0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d04a      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a2e      	ldr	r2, [pc, #184]	; (80057cc <HAL_DMA_Abort_IT+0x1a4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d045      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a2c      	ldr	r2, [pc, #176]	; (80057d0 <HAL_DMA_Abort_IT+0x1a8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d040      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a2b      	ldr	r2, [pc, #172]	; (80057d4 <HAL_DMA_Abort_IT+0x1ac>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d03b      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a29      	ldr	r2, [pc, #164]	; (80057d8 <HAL_DMA_Abort_IT+0x1b0>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d036      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a28      	ldr	r2, [pc, #160]	; (80057dc <HAL_DMA_Abort_IT+0x1b4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d031      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a26      	ldr	r2, [pc, #152]	; (80057e0 <HAL_DMA_Abort_IT+0x1b8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d02c      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <HAL_DMA_Abort_IT+0x1bc>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d027      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a23      	ldr	r2, [pc, #140]	; (80057e8 <HAL_DMA_Abort_IT+0x1c0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d022      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a22      	ldr	r2, [pc, #136]	; (80057ec <HAL_DMA_Abort_IT+0x1c4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d01d      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a20      	ldr	r2, [pc, #128]	; (80057f0 <HAL_DMA_Abort_IT+0x1c8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d018      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <HAL_DMA_Abort_IT+0x1cc>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <HAL_DMA_Abort_IT+0x1d0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <HAL_DMA_Abort_IT+0x1d4>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a1a      	ldr	r2, [pc, #104]	; (8005800 <HAL_DMA_Abort_IT+0x1d8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x17c>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a19      	ldr	r2, [pc, #100]	; (8005804 <HAL_DMA_Abort_IT+0x1dc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d108      	bne.n	80057b6 <HAL_DMA_Abort_IT+0x18e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0201 	bic.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	e178      	b.n	8005aa8 <HAL_DMA_Abort_IT+0x480>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	e16f      	b.n	8005aa8 <HAL_DMA_Abort_IT+0x480>
 80057c8:	40020010 	.word	0x40020010
 80057cc:	40020028 	.word	0x40020028
 80057d0:	40020040 	.word	0x40020040
 80057d4:	40020058 	.word	0x40020058
 80057d8:	40020070 	.word	0x40020070
 80057dc:	40020088 	.word	0x40020088
 80057e0:	400200a0 	.word	0x400200a0
 80057e4:	400200b8 	.word	0x400200b8
 80057e8:	40020410 	.word	0x40020410
 80057ec:	40020428 	.word	0x40020428
 80057f0:	40020440 	.word	0x40020440
 80057f4:	40020458 	.word	0x40020458
 80057f8:	40020470 	.word	0x40020470
 80057fc:	40020488 	.word	0x40020488
 8005800:	400204a0 	.word	0x400204a0
 8005804:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 020e 	bic.w	r2, r2, #14
 8005816:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a6c      	ldr	r2, [pc, #432]	; (80059d0 <HAL_DMA_Abort_IT+0x3a8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d04a      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a6b      	ldr	r2, [pc, #428]	; (80059d4 <HAL_DMA_Abort_IT+0x3ac>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d045      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a69      	ldr	r2, [pc, #420]	; (80059d8 <HAL_DMA_Abort_IT+0x3b0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d040      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a68      	ldr	r2, [pc, #416]	; (80059dc <HAL_DMA_Abort_IT+0x3b4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d03b      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a66      	ldr	r2, [pc, #408]	; (80059e0 <HAL_DMA_Abort_IT+0x3b8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d036      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a65      	ldr	r2, [pc, #404]	; (80059e4 <HAL_DMA_Abort_IT+0x3bc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d031      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a63      	ldr	r2, [pc, #396]	; (80059e8 <HAL_DMA_Abort_IT+0x3c0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d02c      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a62      	ldr	r2, [pc, #392]	; (80059ec <HAL_DMA_Abort_IT+0x3c4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d027      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a60      	ldr	r2, [pc, #384]	; (80059f0 <HAL_DMA_Abort_IT+0x3c8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d022      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a5f      	ldr	r2, [pc, #380]	; (80059f4 <HAL_DMA_Abort_IT+0x3cc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d01d      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a5d      	ldr	r2, [pc, #372]	; (80059f8 <HAL_DMA_Abort_IT+0x3d0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d018      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a5c      	ldr	r2, [pc, #368]	; (80059fc <HAL_DMA_Abort_IT+0x3d4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a5a      	ldr	r2, [pc, #360]	; (8005a00 <HAL_DMA_Abort_IT+0x3d8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00e      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a59      	ldr	r2, [pc, #356]	; (8005a04 <HAL_DMA_Abort_IT+0x3dc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d009      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a57      	ldr	r2, [pc, #348]	; (8005a08 <HAL_DMA_Abort_IT+0x3e0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <HAL_DMA_Abort_IT+0x290>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a56      	ldr	r2, [pc, #344]	; (8005a0c <HAL_DMA_Abort_IT+0x3e4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d108      	bne.n	80058ca <HAL_DMA_Abort_IT+0x2a2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e007      	b.n	80058da <HAL_DMA_Abort_IT+0x2b2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a3c      	ldr	r2, [pc, #240]	; (80059d0 <HAL_DMA_Abort_IT+0x3a8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d072      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a3a      	ldr	r2, [pc, #232]	; (80059d4 <HAL_DMA_Abort_IT+0x3ac>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d06d      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a39      	ldr	r2, [pc, #228]	; (80059d8 <HAL_DMA_Abort_IT+0x3b0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d068      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a37      	ldr	r2, [pc, #220]	; (80059dc <HAL_DMA_Abort_IT+0x3b4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d063      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a36      	ldr	r2, [pc, #216]	; (80059e0 <HAL_DMA_Abort_IT+0x3b8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d05e      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a34      	ldr	r2, [pc, #208]	; (80059e4 <HAL_DMA_Abort_IT+0x3bc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d059      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a33      	ldr	r2, [pc, #204]	; (80059e8 <HAL_DMA_Abort_IT+0x3c0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d054      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a31      	ldr	r2, [pc, #196]	; (80059ec <HAL_DMA_Abort_IT+0x3c4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d04f      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a30      	ldr	r2, [pc, #192]	; (80059f0 <HAL_DMA_Abort_IT+0x3c8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d04a      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2e      	ldr	r2, [pc, #184]	; (80059f4 <HAL_DMA_Abort_IT+0x3cc>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d045      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2d      	ldr	r2, [pc, #180]	; (80059f8 <HAL_DMA_Abort_IT+0x3d0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d040      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a2b      	ldr	r2, [pc, #172]	; (80059fc <HAL_DMA_Abort_IT+0x3d4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d03b      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a2a      	ldr	r2, [pc, #168]	; (8005a00 <HAL_DMA_Abort_IT+0x3d8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d036      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a28      	ldr	r2, [pc, #160]	; (8005a04 <HAL_DMA_Abort_IT+0x3dc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d031      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a27      	ldr	r2, [pc, #156]	; (8005a08 <HAL_DMA_Abort_IT+0x3e0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d02c      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a25      	ldr	r2, [pc, #148]	; (8005a0c <HAL_DMA_Abort_IT+0x3e4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d027      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a24      	ldr	r2, [pc, #144]	; (8005a10 <HAL_DMA_Abort_IT+0x3e8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d022      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a22      	ldr	r2, [pc, #136]	; (8005a14 <HAL_DMA_Abort_IT+0x3ec>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01d      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a21      	ldr	r2, [pc, #132]	; (8005a18 <HAL_DMA_Abort_IT+0x3f0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d018      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <HAL_DMA_Abort_IT+0x3f4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <HAL_DMA_Abort_IT+0x3f8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00e      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1c      	ldr	r2, [pc, #112]	; (8005a24 <HAL_DMA_Abort_IT+0x3fc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1b      	ldr	r2, [pc, #108]	; (8005a28 <HAL_DMA_Abort_IT+0x400>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_DMA_Abort_IT+0x3a2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a19      	ldr	r2, [pc, #100]	; (8005a2c <HAL_DMA_Abort_IT+0x404>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d132      	bne.n	8005a30 <HAL_DMA_Abort_IT+0x408>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e031      	b.n	8005a32 <HAL_DMA_Abort_IT+0x40a>
 80059ce:	bf00      	nop
 80059d0:	40020010 	.word	0x40020010
 80059d4:	40020028 	.word	0x40020028
 80059d8:	40020040 	.word	0x40020040
 80059dc:	40020058 	.word	0x40020058
 80059e0:	40020070 	.word	0x40020070
 80059e4:	40020088 	.word	0x40020088
 80059e8:	400200a0 	.word	0x400200a0
 80059ec:	400200b8 	.word	0x400200b8
 80059f0:	40020410 	.word	0x40020410
 80059f4:	40020428 	.word	0x40020428
 80059f8:	40020440 	.word	0x40020440
 80059fc:	40020458 	.word	0x40020458
 8005a00:	40020470 	.word	0x40020470
 8005a04:	40020488 	.word	0x40020488
 8005a08:	400204a0 	.word	0x400204a0
 8005a0c:	400204b8 	.word	0x400204b8
 8005a10:	58025408 	.word	0x58025408
 8005a14:	5802541c 	.word	0x5802541c
 8005a18:	58025430 	.word	0x58025430
 8005a1c:	58025444 	.word	0x58025444
 8005a20:	58025458 	.word	0x58025458
 8005a24:	5802546c 	.word	0x5802546c
 8005a28:	58025480 	.word	0x58025480
 8005a2c:	58025494 	.word	0x58025494
 8005a30:	2300      	movs	r3, #0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d028      	beq.n	8005a88 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a44:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	2201      	movs	r2, #1
 8005a56:	409a      	lsls	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a64:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00c      	beq.n	8005a88 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a7c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a86:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop

08005ab4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08a      	sub	sp, #40	; 0x28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ac0:	4b67      	ldr	r3, [pc, #412]	; (8005c60 <HAL_DMA_IRQHandler+0x1ac>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a67      	ldr	r2, [pc, #412]	; (8005c64 <HAL_DMA_IRQHandler+0x1b0>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	0a9b      	lsrs	r3, r3, #10
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a5f      	ldr	r2, [pc, #380]	; (8005c68 <HAL_DMA_IRQHandler+0x1b4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d04a      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a5d      	ldr	r2, [pc, #372]	; (8005c6c <HAL_DMA_IRQHandler+0x1b8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d045      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a5c      	ldr	r2, [pc, #368]	; (8005c70 <HAL_DMA_IRQHandler+0x1bc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d040      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a5a      	ldr	r2, [pc, #360]	; (8005c74 <HAL_DMA_IRQHandler+0x1c0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d03b      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a59      	ldr	r2, [pc, #356]	; (8005c78 <HAL_DMA_IRQHandler+0x1c4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d036      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a57      	ldr	r2, [pc, #348]	; (8005c7c <HAL_DMA_IRQHandler+0x1c8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d031      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a56      	ldr	r2, [pc, #344]	; (8005c80 <HAL_DMA_IRQHandler+0x1cc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d02c      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a54      	ldr	r2, [pc, #336]	; (8005c84 <HAL_DMA_IRQHandler+0x1d0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d027      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a53      	ldr	r2, [pc, #332]	; (8005c88 <HAL_DMA_IRQHandler+0x1d4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d022      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a51      	ldr	r2, [pc, #324]	; (8005c8c <HAL_DMA_IRQHandler+0x1d8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01d      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a50      	ldr	r2, [pc, #320]	; (8005c90 <HAL_DMA_IRQHandler+0x1dc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d018      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a4e      	ldr	r2, [pc, #312]	; (8005c94 <HAL_DMA_IRQHandler+0x1e0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d013      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a4d      	ldr	r2, [pc, #308]	; (8005c98 <HAL_DMA_IRQHandler+0x1e4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00e      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a4b      	ldr	r2, [pc, #300]	; (8005c9c <HAL_DMA_IRQHandler+0x1e8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d009      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a4a      	ldr	r2, [pc, #296]	; (8005ca0 <HAL_DMA_IRQHandler+0x1ec>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d004      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xd2>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a48      	ldr	r2, [pc, #288]	; (8005ca4 <HAL_DMA_IRQHandler+0x1f0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d101      	bne.n	8005b8a <HAL_DMA_IRQHandler+0xd6>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <HAL_DMA_IRQHandler+0xd8>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 842b 	beq.w	80063e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b96:	f003 031f 	and.w	r3, r3, #31
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	409a      	lsls	r2, r3
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 80a2 	beq.w	8005cec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a2e      	ldr	r2, [pc, #184]	; (8005c68 <HAL_DMA_IRQHandler+0x1b4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d04a      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a2d      	ldr	r2, [pc, #180]	; (8005c6c <HAL_DMA_IRQHandler+0x1b8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d045      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a2b      	ldr	r2, [pc, #172]	; (8005c70 <HAL_DMA_IRQHandler+0x1bc>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d040      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a2a      	ldr	r2, [pc, #168]	; (8005c74 <HAL_DMA_IRQHandler+0x1c0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d03b      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a28      	ldr	r2, [pc, #160]	; (8005c78 <HAL_DMA_IRQHandler+0x1c4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d036      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a27      	ldr	r2, [pc, #156]	; (8005c7c <HAL_DMA_IRQHandler+0x1c8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d031      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a25      	ldr	r2, [pc, #148]	; (8005c80 <HAL_DMA_IRQHandler+0x1cc>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d02c      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a24      	ldr	r2, [pc, #144]	; (8005c84 <HAL_DMA_IRQHandler+0x1d0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d027      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a22      	ldr	r2, [pc, #136]	; (8005c88 <HAL_DMA_IRQHandler+0x1d4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d022      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <HAL_DMA_IRQHandler+0x1d8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d01d      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1f      	ldr	r2, [pc, #124]	; (8005c90 <HAL_DMA_IRQHandler+0x1dc>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d018      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1e      	ldr	r2, [pc, #120]	; (8005c94 <HAL_DMA_IRQHandler+0x1e0>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1c      	ldr	r2, [pc, #112]	; (8005c98 <HAL_DMA_IRQHandler+0x1e4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00e      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <HAL_DMA_IRQHandler+0x1e8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d009      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a19      	ldr	r2, [pc, #100]	; (8005ca0 <HAL_DMA_IRQHandler+0x1ec>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d004      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x194>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <HAL_DMA_IRQHandler+0x1f0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d12f      	bne.n	8005ca8 <HAL_DMA_IRQHandler+0x1f4>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bf14      	ite	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	2300      	moveq	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	e02e      	b.n	8005cbc <HAL_DMA_IRQHandler+0x208>
 8005c5e:	bf00      	nop
 8005c60:	24000000 	.word	0x24000000
 8005c64:	1b4e81b5 	.word	0x1b4e81b5
 8005c68:	40020010 	.word	0x40020010
 8005c6c:	40020028 	.word	0x40020028
 8005c70:	40020040 	.word	0x40020040
 8005c74:	40020058 	.word	0x40020058
 8005c78:	40020070 	.word	0x40020070
 8005c7c:	40020088 	.word	0x40020088
 8005c80:	400200a0 	.word	0x400200a0
 8005c84:	400200b8 	.word	0x400200b8
 8005c88:	40020410 	.word	0x40020410
 8005c8c:	40020428 	.word	0x40020428
 8005c90:	40020440 	.word	0x40020440
 8005c94:	40020458 	.word	0x40020458
 8005c98:	40020470 	.word	0x40020470
 8005c9c:	40020488 	.word	0x40020488
 8005ca0:	400204a0 	.word	0x400204a0
 8005ca4:	400204b8 	.word	0x400204b8
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bf14      	ite	ne
 8005cb6:	2301      	movne	r3, #1
 8005cb8:	2300      	moveq	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d015      	beq.n	8005cec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0204 	bic.w	r2, r2, #4
 8005cce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd4:	f003 031f 	and.w	r3, r3, #31
 8005cd8:	2208      	movs	r2, #8
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce4:	f043 0201 	orr.w	r2, r3, #1
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d06e      	beq.n	8005de0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a69      	ldr	r2, [pc, #420]	; (8005eac <HAL_DMA_IRQHandler+0x3f8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d04a      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a67      	ldr	r2, [pc, #412]	; (8005eb0 <HAL_DMA_IRQHandler+0x3fc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d045      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a66      	ldr	r2, [pc, #408]	; (8005eb4 <HAL_DMA_IRQHandler+0x400>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d040      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a64      	ldr	r2, [pc, #400]	; (8005eb8 <HAL_DMA_IRQHandler+0x404>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d03b      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a63      	ldr	r2, [pc, #396]	; (8005ebc <HAL_DMA_IRQHandler+0x408>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d036      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a61      	ldr	r2, [pc, #388]	; (8005ec0 <HAL_DMA_IRQHandler+0x40c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d031      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a60      	ldr	r2, [pc, #384]	; (8005ec4 <HAL_DMA_IRQHandler+0x410>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d02c      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5e      	ldr	r2, [pc, #376]	; (8005ec8 <HAL_DMA_IRQHandler+0x414>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d027      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a5d      	ldr	r2, [pc, #372]	; (8005ecc <HAL_DMA_IRQHandler+0x418>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d022      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a5b      	ldr	r2, [pc, #364]	; (8005ed0 <HAL_DMA_IRQHandler+0x41c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d01d      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a5a      	ldr	r2, [pc, #360]	; (8005ed4 <HAL_DMA_IRQHandler+0x420>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d018      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a58      	ldr	r2, [pc, #352]	; (8005ed8 <HAL_DMA_IRQHandler+0x424>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a57      	ldr	r2, [pc, #348]	; (8005edc <HAL_DMA_IRQHandler+0x428>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00e      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a55      	ldr	r2, [pc, #340]	; (8005ee0 <HAL_DMA_IRQHandler+0x42c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d009      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a54      	ldr	r2, [pc, #336]	; (8005ee4 <HAL_DMA_IRQHandler+0x430>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x2ee>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a52      	ldr	r2, [pc, #328]	; (8005ee8 <HAL_DMA_IRQHandler+0x434>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d10a      	bne.n	8005db8 <HAL_DMA_IRQHandler+0x304>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	bf14      	ite	ne
 8005db0:	2301      	movne	r3, #1
 8005db2:	2300      	moveq	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	e003      	b.n	8005dc0 <HAL_DMA_IRQHandler+0x30c>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00d      	beq.n	8005de0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc8:	f003 031f 	and.w	r3, r3, #31
 8005dcc:	2201      	movs	r2, #1
 8005dce:	409a      	lsls	r2, r3
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd8:	f043 0202 	orr.w	r2, r3, #2
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	2204      	movs	r2, #4
 8005dea:	409a      	lsls	r2, r3
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 808f 	beq.w	8005f14 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a2c      	ldr	r2, [pc, #176]	; (8005eac <HAL_DMA_IRQHandler+0x3f8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04a      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a2a      	ldr	r2, [pc, #168]	; (8005eb0 <HAL_DMA_IRQHandler+0x3fc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d045      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a29      	ldr	r2, [pc, #164]	; (8005eb4 <HAL_DMA_IRQHandler+0x400>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d040      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a27      	ldr	r2, [pc, #156]	; (8005eb8 <HAL_DMA_IRQHandler+0x404>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d03b      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a26      	ldr	r2, [pc, #152]	; (8005ebc <HAL_DMA_IRQHandler+0x408>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d036      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a24      	ldr	r2, [pc, #144]	; (8005ec0 <HAL_DMA_IRQHandler+0x40c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d031      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a23      	ldr	r2, [pc, #140]	; (8005ec4 <HAL_DMA_IRQHandler+0x410>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d02c      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a21      	ldr	r2, [pc, #132]	; (8005ec8 <HAL_DMA_IRQHandler+0x414>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d027      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a20      	ldr	r2, [pc, #128]	; (8005ecc <HAL_DMA_IRQHandler+0x418>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1e      	ldr	r2, [pc, #120]	; (8005ed0 <HAL_DMA_IRQHandler+0x41c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <HAL_DMA_IRQHandler+0x420>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1b      	ldr	r2, [pc, #108]	; (8005ed8 <HAL_DMA_IRQHandler+0x424>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1a      	ldr	r2, [pc, #104]	; (8005edc <HAL_DMA_IRQHandler+0x428>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a18      	ldr	r2, [pc, #96]	; (8005ee0 <HAL_DMA_IRQHandler+0x42c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a17      	ldr	r2, [pc, #92]	; (8005ee4 <HAL_DMA_IRQHandler+0x430>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x3e2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <HAL_DMA_IRQHandler+0x434>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d12a      	bne.n	8005eec <HAL_DMA_IRQHandler+0x438>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bf14      	ite	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	2300      	moveq	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	e023      	b.n	8005ef4 <HAL_DMA_IRQHandler+0x440>
 8005eac:	40020010 	.word	0x40020010
 8005eb0:	40020028 	.word	0x40020028
 8005eb4:	40020040 	.word	0x40020040
 8005eb8:	40020058 	.word	0x40020058
 8005ebc:	40020070 	.word	0x40020070
 8005ec0:	40020088 	.word	0x40020088
 8005ec4:	400200a0 	.word	0x400200a0
 8005ec8:	400200b8 	.word	0x400200b8
 8005ecc:	40020410 	.word	0x40020410
 8005ed0:	40020428 	.word	0x40020428
 8005ed4:	40020440 	.word	0x40020440
 8005ed8:	40020458 	.word	0x40020458
 8005edc:	40020470 	.word	0x40020470
 8005ee0:	40020488 	.word	0x40020488
 8005ee4:	400204a0 	.word	0x400204a0
 8005ee8:	400204b8 	.word	0x400204b8
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00d      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efc:	f003 031f 	and.w	r3, r3, #31
 8005f00:	2204      	movs	r2, #4
 8005f02:	409a      	lsls	r2, r3
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0c:	f043 0204 	orr.w	r2, r3, #4
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f18:	f003 031f 	and.w	r3, r3, #31
 8005f1c:	2210      	movs	r2, #16
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	4013      	ands	r3, r2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80a6 	beq.w	8006076 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a85      	ldr	r2, [pc, #532]	; (8006144 <HAL_DMA_IRQHandler+0x690>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d04a      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a83      	ldr	r2, [pc, #524]	; (8006148 <HAL_DMA_IRQHandler+0x694>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d045      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a82      	ldr	r2, [pc, #520]	; (800614c <HAL_DMA_IRQHandler+0x698>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d040      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a80      	ldr	r2, [pc, #512]	; (8006150 <HAL_DMA_IRQHandler+0x69c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d03b      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a7f      	ldr	r2, [pc, #508]	; (8006154 <HAL_DMA_IRQHandler+0x6a0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d036      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a7d      	ldr	r2, [pc, #500]	; (8006158 <HAL_DMA_IRQHandler+0x6a4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d031      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a7c      	ldr	r2, [pc, #496]	; (800615c <HAL_DMA_IRQHandler+0x6a8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d02c      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a7a      	ldr	r2, [pc, #488]	; (8006160 <HAL_DMA_IRQHandler+0x6ac>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d027      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a79      	ldr	r2, [pc, #484]	; (8006164 <HAL_DMA_IRQHandler+0x6b0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d022      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a77      	ldr	r2, [pc, #476]	; (8006168 <HAL_DMA_IRQHandler+0x6b4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d01d      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a76      	ldr	r2, [pc, #472]	; (800616c <HAL_DMA_IRQHandler+0x6b8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d018      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a74      	ldr	r2, [pc, #464]	; (8006170 <HAL_DMA_IRQHandler+0x6bc>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a73      	ldr	r2, [pc, #460]	; (8006174 <HAL_DMA_IRQHandler+0x6c0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d00e      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a71      	ldr	r2, [pc, #452]	; (8006178 <HAL_DMA_IRQHandler+0x6c4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d009      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a70      	ldr	r2, [pc, #448]	; (800617c <HAL_DMA_IRQHandler+0x6c8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d004      	beq.n	8005fca <HAL_DMA_IRQHandler+0x516>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a6e      	ldr	r2, [pc, #440]	; (8006180 <HAL_DMA_IRQHandler+0x6cc>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d10a      	bne.n	8005fe0 <HAL_DMA_IRQHandler+0x52c>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	bf14      	ite	ne
 8005fd8:	2301      	movne	r3, #1
 8005fda:	2300      	moveq	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	e009      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x540>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	bf14      	ite	ne
 8005fee:	2301      	movne	r3, #1
 8005ff0:	2300      	moveq	r3, #0
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d03e      	beq.n	8006076 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffc:	f003 031f 	and.w	r3, r3, #31
 8006000:	2210      	movs	r2, #16
 8006002:	409a      	lsls	r2, r3
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d018      	beq.n	8006048 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d108      	bne.n	8006036 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d024      	beq.n	8006076 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4798      	blx	r3
 8006034:	e01f      	b.n	8006076 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01b      	beq.n	8006076 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	4798      	blx	r3
 8006046:	e016      	b.n	8006076 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d107      	bne.n	8006066 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0208 	bic.w	r2, r2, #8
 8006064:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	2220      	movs	r2, #32
 8006080:	409a      	lsls	r2, r3
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	4013      	ands	r3, r2
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 8110 	beq.w	80062ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a2c      	ldr	r2, [pc, #176]	; (8006144 <HAL_DMA_IRQHandler+0x690>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d04a      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a2b      	ldr	r2, [pc, #172]	; (8006148 <HAL_DMA_IRQHandler+0x694>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d045      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a29      	ldr	r2, [pc, #164]	; (800614c <HAL_DMA_IRQHandler+0x698>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d040      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a28      	ldr	r2, [pc, #160]	; (8006150 <HAL_DMA_IRQHandler+0x69c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d03b      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a26      	ldr	r2, [pc, #152]	; (8006154 <HAL_DMA_IRQHandler+0x6a0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d036      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a25      	ldr	r2, [pc, #148]	; (8006158 <HAL_DMA_IRQHandler+0x6a4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d031      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a23      	ldr	r2, [pc, #140]	; (800615c <HAL_DMA_IRQHandler+0x6a8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d02c      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a22      	ldr	r2, [pc, #136]	; (8006160 <HAL_DMA_IRQHandler+0x6ac>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d027      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a20      	ldr	r2, [pc, #128]	; (8006164 <HAL_DMA_IRQHandler+0x6b0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d022      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1f      	ldr	r2, [pc, #124]	; (8006168 <HAL_DMA_IRQHandler+0x6b4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d01d      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1d      	ldr	r2, [pc, #116]	; (800616c <HAL_DMA_IRQHandler+0x6b8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d018      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1c      	ldr	r2, [pc, #112]	; (8006170 <HAL_DMA_IRQHandler+0x6bc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1a      	ldr	r2, [pc, #104]	; (8006174 <HAL_DMA_IRQHandler+0x6c0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00e      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a19      	ldr	r2, [pc, #100]	; (8006178 <HAL_DMA_IRQHandler+0x6c4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d009      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a17      	ldr	r2, [pc, #92]	; (800617c <HAL_DMA_IRQHandler+0x6c8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d004      	beq.n	800612c <HAL_DMA_IRQHandler+0x678>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a16      	ldr	r2, [pc, #88]	; (8006180 <HAL_DMA_IRQHandler+0x6cc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d12b      	bne.n	8006184 <HAL_DMA_IRQHandler+0x6d0>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0310 	and.w	r3, r3, #16
 8006136:	2b00      	cmp	r3, #0
 8006138:	bf14      	ite	ne
 800613a:	2301      	movne	r3, #1
 800613c:	2300      	moveq	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	e02a      	b.n	8006198 <HAL_DMA_IRQHandler+0x6e4>
 8006142:	bf00      	nop
 8006144:	40020010 	.word	0x40020010
 8006148:	40020028 	.word	0x40020028
 800614c:	40020040 	.word	0x40020040
 8006150:	40020058 	.word	0x40020058
 8006154:	40020070 	.word	0x40020070
 8006158:	40020088 	.word	0x40020088
 800615c:	400200a0 	.word	0x400200a0
 8006160:	400200b8 	.word	0x400200b8
 8006164:	40020410 	.word	0x40020410
 8006168:	40020428 	.word	0x40020428
 800616c:	40020440 	.word	0x40020440
 8006170:	40020458 	.word	0x40020458
 8006174:	40020470 	.word	0x40020470
 8006178:	40020488 	.word	0x40020488
 800617c:	400204a0 	.word	0x400204a0
 8006180:	400204b8 	.word	0x400204b8
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	bf14      	ite	ne
 8006192:	2301      	movne	r3, #1
 8006194:	2300      	moveq	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8087 	beq.w	80062ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	2220      	movs	r2, #32
 80061a8:	409a      	lsls	r2, r3
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d139      	bne.n	800622e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0216 	bic.w	r2, r2, #22
 80061c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695a      	ldr	r2, [r3, #20]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <HAL_DMA_IRQHandler+0x736>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0208 	bic.w	r2, r2, #8
 80061f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061fe:	f003 031f 	and.w	r3, r3, #31
 8006202:	223f      	movs	r2, #63	; 0x3f
 8006204:	409a      	lsls	r2, r3
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 834a 	beq.w	80068b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4798      	blx	r3
          }
          return;
 800622c:	e344      	b.n	80068b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d018      	beq.n	800626e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d108      	bne.n	800625c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624e:	2b00      	cmp	r3, #0
 8006250:	d02c      	beq.n	80062ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	4798      	blx	r3
 800625a:	e027      	b.n	80062ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006260:	2b00      	cmp	r3, #0
 8006262:	d023      	beq.n	80062ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	4798      	blx	r3
 800626c:	e01e      	b.n	80062ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10f      	bne.n	800629c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0210 	bic.w	r2, r2, #16
 800628a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8306 	beq.w	80068c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 8088 	beq.w	80063d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2204      	movs	r2, #4
 80062c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a7a      	ldr	r2, [pc, #488]	; (80064bc <HAL_DMA_IRQHandler+0xa08>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d04a      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a79      	ldr	r2, [pc, #484]	; (80064c0 <HAL_DMA_IRQHandler+0xa0c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d045      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a77      	ldr	r2, [pc, #476]	; (80064c4 <HAL_DMA_IRQHandler+0xa10>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d040      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a76      	ldr	r2, [pc, #472]	; (80064c8 <HAL_DMA_IRQHandler+0xa14>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d03b      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a74      	ldr	r2, [pc, #464]	; (80064cc <HAL_DMA_IRQHandler+0xa18>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d036      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a73      	ldr	r2, [pc, #460]	; (80064d0 <HAL_DMA_IRQHandler+0xa1c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d031      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a71      	ldr	r2, [pc, #452]	; (80064d4 <HAL_DMA_IRQHandler+0xa20>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d02c      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a70      	ldr	r2, [pc, #448]	; (80064d8 <HAL_DMA_IRQHandler+0xa24>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d027      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a6e      	ldr	r2, [pc, #440]	; (80064dc <HAL_DMA_IRQHandler+0xa28>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d022      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a6d      	ldr	r2, [pc, #436]	; (80064e0 <HAL_DMA_IRQHandler+0xa2c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d01d      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a6b      	ldr	r2, [pc, #428]	; (80064e4 <HAL_DMA_IRQHandler+0xa30>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d018      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a6a      	ldr	r2, [pc, #424]	; (80064e8 <HAL_DMA_IRQHandler+0xa34>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d013      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a68      	ldr	r2, [pc, #416]	; (80064ec <HAL_DMA_IRQHandler+0xa38>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00e      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a67      	ldr	r2, [pc, #412]	; (80064f0 <HAL_DMA_IRQHandler+0xa3c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d009      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a65      	ldr	r2, [pc, #404]	; (80064f4 <HAL_DMA_IRQHandler+0xa40>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <HAL_DMA_IRQHandler+0x8b8>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a64      	ldr	r2, [pc, #400]	; (80064f8 <HAL_DMA_IRQHandler+0xa44>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d108      	bne.n	800637e <HAL_DMA_IRQHandler+0x8ca>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	e007      	b.n	800638e <HAL_DMA_IRQHandler+0x8da>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0201 	bic.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3301      	adds	r3, #1
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006396:	429a      	cmp	r2, r3
 8006398:	d307      	bcc.n	80063aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1f2      	bne.n	800638e <HAL_DMA_IRQHandler+0x8da>
 80063a8:	e000      	b.n	80063ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80063aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d004      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2203      	movs	r2, #3
 80063be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80063c2:	e003      	b.n	80063cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8272 	beq.w	80068c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	4798      	blx	r3
 80063e6:	e26c      	b.n	80068c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a43      	ldr	r2, [pc, #268]	; (80064fc <HAL_DMA_IRQHandler+0xa48>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d022      	beq.n	8006438 <HAL_DMA_IRQHandler+0x984>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a42      	ldr	r2, [pc, #264]	; (8006500 <HAL_DMA_IRQHandler+0xa4c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d01d      	beq.n	8006438 <HAL_DMA_IRQHandler+0x984>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a40      	ldr	r2, [pc, #256]	; (8006504 <HAL_DMA_IRQHandler+0xa50>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d018      	beq.n	8006438 <HAL_DMA_IRQHandler+0x984>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a3f      	ldr	r2, [pc, #252]	; (8006508 <HAL_DMA_IRQHandler+0xa54>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d013      	beq.n	8006438 <HAL_DMA_IRQHandler+0x984>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a3d      	ldr	r2, [pc, #244]	; (800650c <HAL_DMA_IRQHandler+0xa58>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00e      	beq.n	8006438 <HAL_DMA_IRQHandler+0x984>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a3c      	ldr	r2, [pc, #240]	; (8006510 <HAL_DMA_IRQHandler+0xa5c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d009      	beq.n	8006438 <HAL_DMA_IRQHandler+0x984>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a3a      	ldr	r2, [pc, #232]	; (8006514 <HAL_DMA_IRQHandler+0xa60>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <HAL_DMA_IRQHandler+0x984>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a39      	ldr	r2, [pc, #228]	; (8006518 <HAL_DMA_IRQHandler+0xa64>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d101      	bne.n	800643c <HAL_DMA_IRQHandler+0x988>
 8006438:	2301      	movs	r3, #1
 800643a:	e000      	b.n	800643e <HAL_DMA_IRQHandler+0x98a>
 800643c:	2300      	movs	r3, #0
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 823f 	beq.w	80068c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	2204      	movs	r2, #4
 8006456:	409a      	lsls	r2, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80cd 	beq.w	80065fc <HAL_DMA_IRQHandler+0xb48>
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 80c7 	beq.w	80065fc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006472:	f003 031f 	and.w	r3, r3, #31
 8006476:	2204      	movs	r2, #4
 8006478:	409a      	lsls	r2, r3
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d049      	beq.n	800651c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 8210 	beq.w	80068bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064a4:	e20a      	b.n	80068bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 8206 	beq.w	80068bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064b8:	e200      	b.n	80068bc <HAL_DMA_IRQHandler+0xe08>
 80064ba:	bf00      	nop
 80064bc:	40020010 	.word	0x40020010
 80064c0:	40020028 	.word	0x40020028
 80064c4:	40020040 	.word	0x40020040
 80064c8:	40020058 	.word	0x40020058
 80064cc:	40020070 	.word	0x40020070
 80064d0:	40020088 	.word	0x40020088
 80064d4:	400200a0 	.word	0x400200a0
 80064d8:	400200b8 	.word	0x400200b8
 80064dc:	40020410 	.word	0x40020410
 80064e0:	40020428 	.word	0x40020428
 80064e4:	40020440 	.word	0x40020440
 80064e8:	40020458 	.word	0x40020458
 80064ec:	40020470 	.word	0x40020470
 80064f0:	40020488 	.word	0x40020488
 80064f4:	400204a0 	.word	0x400204a0
 80064f8:	400204b8 	.word	0x400204b8
 80064fc:	58025408 	.word	0x58025408
 8006500:	5802541c 	.word	0x5802541c
 8006504:	58025430 	.word	0x58025430
 8006508:	58025444 	.word	0x58025444
 800650c:	58025458 	.word	0x58025458
 8006510:	5802546c 	.word	0x5802546c
 8006514:	58025480 	.word	0x58025480
 8006518:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d160      	bne.n	80065e8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a7f      	ldr	r2, [pc, #508]	; (8006728 <HAL_DMA_IRQHandler+0xc74>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d04a      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a7d      	ldr	r2, [pc, #500]	; (800672c <HAL_DMA_IRQHandler+0xc78>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d045      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a7c      	ldr	r2, [pc, #496]	; (8006730 <HAL_DMA_IRQHandler+0xc7c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d040      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a7a      	ldr	r2, [pc, #488]	; (8006734 <HAL_DMA_IRQHandler+0xc80>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d03b      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a79      	ldr	r2, [pc, #484]	; (8006738 <HAL_DMA_IRQHandler+0xc84>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d036      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a77      	ldr	r2, [pc, #476]	; (800673c <HAL_DMA_IRQHandler+0xc88>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d031      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a76      	ldr	r2, [pc, #472]	; (8006740 <HAL_DMA_IRQHandler+0xc8c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d02c      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a74      	ldr	r2, [pc, #464]	; (8006744 <HAL_DMA_IRQHandler+0xc90>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d027      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a73      	ldr	r2, [pc, #460]	; (8006748 <HAL_DMA_IRQHandler+0xc94>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d022      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a71      	ldr	r2, [pc, #452]	; (800674c <HAL_DMA_IRQHandler+0xc98>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d01d      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a70      	ldr	r2, [pc, #448]	; (8006750 <HAL_DMA_IRQHandler+0xc9c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d018      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a6e      	ldr	r2, [pc, #440]	; (8006754 <HAL_DMA_IRQHandler+0xca0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d013      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a6d      	ldr	r2, [pc, #436]	; (8006758 <HAL_DMA_IRQHandler+0xca4>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d00e      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a6b      	ldr	r2, [pc, #428]	; (800675c <HAL_DMA_IRQHandler+0xca8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d009      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a6a      	ldr	r2, [pc, #424]	; (8006760 <HAL_DMA_IRQHandler+0xcac>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d004      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xb12>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a68      	ldr	r2, [pc, #416]	; (8006764 <HAL_DMA_IRQHandler+0xcb0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d108      	bne.n	80065d8 <HAL_DMA_IRQHandler+0xb24>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0208 	bic.w	r2, r2, #8
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e007      	b.n	80065e8 <HAL_DMA_IRQHandler+0xb34>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0204 	bic.w	r2, r2, #4
 80065e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 8165 	beq.w	80068bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065fa:	e15f      	b.n	80068bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	2202      	movs	r2, #2
 8006606:	409a      	lsls	r2, r3
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	4013      	ands	r3, r2
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 80c5 	beq.w	800679c <HAL_DMA_IRQHandler+0xce8>
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80bf 	beq.w	800679c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	2202      	movs	r2, #2
 8006628:	409a      	lsls	r2, r3
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d018      	beq.n	800666a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d109      	bne.n	8006656 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 813a 	beq.w	80068c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006654:	e134      	b.n	80068c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8130 	beq.w	80068c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006668:	e12a      	b.n	80068c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	f040 8089 	bne.w	8006788 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2b      	ldr	r2, [pc, #172]	; (8006728 <HAL_DMA_IRQHandler+0xc74>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d04a      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a29      	ldr	r2, [pc, #164]	; (800672c <HAL_DMA_IRQHandler+0xc78>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d045      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a28      	ldr	r2, [pc, #160]	; (8006730 <HAL_DMA_IRQHandler+0xc7c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d040      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a26      	ldr	r2, [pc, #152]	; (8006734 <HAL_DMA_IRQHandler+0xc80>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d03b      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a25      	ldr	r2, [pc, #148]	; (8006738 <HAL_DMA_IRQHandler+0xc84>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d036      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a23      	ldr	r2, [pc, #140]	; (800673c <HAL_DMA_IRQHandler+0xc88>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d031      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a22      	ldr	r2, [pc, #136]	; (8006740 <HAL_DMA_IRQHandler+0xc8c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d02c      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a20      	ldr	r2, [pc, #128]	; (8006744 <HAL_DMA_IRQHandler+0xc90>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d027      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1f      	ldr	r2, [pc, #124]	; (8006748 <HAL_DMA_IRQHandler+0xc94>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d022      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1d      	ldr	r2, [pc, #116]	; (800674c <HAL_DMA_IRQHandler+0xc98>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d01d      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1c      	ldr	r2, [pc, #112]	; (8006750 <HAL_DMA_IRQHandler+0xc9c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d018      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1a      	ldr	r2, [pc, #104]	; (8006754 <HAL_DMA_IRQHandler+0xca0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a19      	ldr	r2, [pc, #100]	; (8006758 <HAL_DMA_IRQHandler+0xca4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00e      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a17      	ldr	r2, [pc, #92]	; (800675c <HAL_DMA_IRQHandler+0xca8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d009      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a16      	ldr	r2, [pc, #88]	; (8006760 <HAL_DMA_IRQHandler+0xcac>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d004      	beq.n	8006716 <HAL_DMA_IRQHandler+0xc62>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a14      	ldr	r2, [pc, #80]	; (8006764 <HAL_DMA_IRQHandler+0xcb0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d128      	bne.n	8006768 <HAL_DMA_IRQHandler+0xcb4>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0214 	bic.w	r2, r2, #20
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	e027      	b.n	8006778 <HAL_DMA_IRQHandler+0xcc4>
 8006728:	40020010 	.word	0x40020010
 800672c:	40020028 	.word	0x40020028
 8006730:	40020040 	.word	0x40020040
 8006734:	40020058 	.word	0x40020058
 8006738:	40020070 	.word	0x40020070
 800673c:	40020088 	.word	0x40020088
 8006740:	400200a0 	.word	0x400200a0
 8006744:	400200b8 	.word	0x400200b8
 8006748:	40020410 	.word	0x40020410
 800674c:	40020428 	.word	0x40020428
 8006750:	40020440 	.word	0x40020440
 8006754:	40020458 	.word	0x40020458
 8006758:	40020470 	.word	0x40020470
 800675c:	40020488 	.word	0x40020488
 8006760:	400204a0 	.word	0x400204a0
 8006764:	400204b8 	.word	0x400204b8
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 020a 	bic.w	r2, r2, #10
 8006776:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 8097 	beq.w	80068c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800679a:	e091      	b.n	80068c0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	2208      	movs	r2, #8
 80067a6:	409a      	lsls	r2, r3
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	4013      	ands	r3, r2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8088 	beq.w	80068c2 <HAL_DMA_IRQHandler+0xe0e>
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f003 0308 	and.w	r3, r3, #8
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 8082 	beq.w	80068c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a41      	ldr	r2, [pc, #260]	; (80068c8 <HAL_DMA_IRQHandler+0xe14>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d04a      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a3f      	ldr	r2, [pc, #252]	; (80068cc <HAL_DMA_IRQHandler+0xe18>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d045      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a3e      	ldr	r2, [pc, #248]	; (80068d0 <HAL_DMA_IRQHandler+0xe1c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d040      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a3c      	ldr	r2, [pc, #240]	; (80068d4 <HAL_DMA_IRQHandler+0xe20>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d03b      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a3b      	ldr	r2, [pc, #236]	; (80068d8 <HAL_DMA_IRQHandler+0xe24>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d036      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a39      	ldr	r2, [pc, #228]	; (80068dc <HAL_DMA_IRQHandler+0xe28>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d031      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a38      	ldr	r2, [pc, #224]	; (80068e0 <HAL_DMA_IRQHandler+0xe2c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d02c      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a36      	ldr	r2, [pc, #216]	; (80068e4 <HAL_DMA_IRQHandler+0xe30>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d027      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a35      	ldr	r2, [pc, #212]	; (80068e8 <HAL_DMA_IRQHandler+0xe34>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d022      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a33      	ldr	r2, [pc, #204]	; (80068ec <HAL_DMA_IRQHandler+0xe38>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d01d      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a32      	ldr	r2, [pc, #200]	; (80068f0 <HAL_DMA_IRQHandler+0xe3c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d018      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a30      	ldr	r2, [pc, #192]	; (80068f4 <HAL_DMA_IRQHandler+0xe40>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d013      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a2f      	ldr	r2, [pc, #188]	; (80068f8 <HAL_DMA_IRQHandler+0xe44>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00e      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a2d      	ldr	r2, [pc, #180]	; (80068fc <HAL_DMA_IRQHandler+0xe48>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d009      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a2c      	ldr	r2, [pc, #176]	; (8006900 <HAL_DMA_IRQHandler+0xe4c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d004      	beq.n	800685e <HAL_DMA_IRQHandler+0xdaa>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a2a      	ldr	r2, [pc, #168]	; (8006904 <HAL_DMA_IRQHandler+0xe50>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d108      	bne.n	8006870 <HAL_DMA_IRQHandler+0xdbc>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 021c 	bic.w	r2, r2, #28
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e007      	b.n	8006880 <HAL_DMA_IRQHandler+0xdcc>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 020e 	bic.w	r2, r2, #14
 800687e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	2201      	movs	r2, #1
 800688a:	409a      	lsls	r2, r3
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
 80068b6:	e004      	b.n	80068c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80068b8:	bf00      	nop
 80068ba:	e002      	b.n	80068c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068bc:	bf00      	nop
 80068be:	e000      	b.n	80068c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80068c2:	3728      	adds	r7, #40	; 0x28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40020010 	.word	0x40020010
 80068cc:	40020028 	.word	0x40020028
 80068d0:	40020040 	.word	0x40020040
 80068d4:	40020058 	.word	0x40020058
 80068d8:	40020070 	.word	0x40020070
 80068dc:	40020088 	.word	0x40020088
 80068e0:	400200a0 	.word	0x400200a0
 80068e4:	400200b8 	.word	0x400200b8
 80068e8:	40020410 	.word	0x40020410
 80068ec:	40020428 	.word	0x40020428
 80068f0:	40020440 	.word	0x40020440
 80068f4:	40020458 	.word	0x40020458
 80068f8:	40020470 	.word	0x40020470
 80068fc:	40020488 	.word	0x40020488
 8006900:	400204a0 	.word	0x400204a0
 8006904:	400204b8 	.word	0x400204b8

08006908 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006920:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a7f      	ldr	r2, [pc, #508]	; (8006b24 <DMA_SetConfig+0x21c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d072      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a7d      	ldr	r2, [pc, #500]	; (8006b28 <DMA_SetConfig+0x220>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d06d      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a7c      	ldr	r2, [pc, #496]	; (8006b2c <DMA_SetConfig+0x224>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d068      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a7a      	ldr	r2, [pc, #488]	; (8006b30 <DMA_SetConfig+0x228>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d063      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a79      	ldr	r2, [pc, #484]	; (8006b34 <DMA_SetConfig+0x22c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d05e      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a77      	ldr	r2, [pc, #476]	; (8006b38 <DMA_SetConfig+0x230>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d059      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a76      	ldr	r2, [pc, #472]	; (8006b3c <DMA_SetConfig+0x234>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d054      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a74      	ldr	r2, [pc, #464]	; (8006b40 <DMA_SetConfig+0x238>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d04f      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a73      	ldr	r2, [pc, #460]	; (8006b44 <DMA_SetConfig+0x23c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d04a      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a71      	ldr	r2, [pc, #452]	; (8006b48 <DMA_SetConfig+0x240>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d045      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a70      	ldr	r2, [pc, #448]	; (8006b4c <DMA_SetConfig+0x244>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d040      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a6e      	ldr	r2, [pc, #440]	; (8006b50 <DMA_SetConfig+0x248>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d03b      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a6d      	ldr	r2, [pc, #436]	; (8006b54 <DMA_SetConfig+0x24c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d036      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a6b      	ldr	r2, [pc, #428]	; (8006b58 <DMA_SetConfig+0x250>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d031      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a6a      	ldr	r2, [pc, #424]	; (8006b5c <DMA_SetConfig+0x254>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d02c      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a68      	ldr	r2, [pc, #416]	; (8006b60 <DMA_SetConfig+0x258>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d027      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a67      	ldr	r2, [pc, #412]	; (8006b64 <DMA_SetConfig+0x25c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d022      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a65      	ldr	r2, [pc, #404]	; (8006b68 <DMA_SetConfig+0x260>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01d      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a64      	ldr	r2, [pc, #400]	; (8006b6c <DMA_SetConfig+0x264>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d018      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a62      	ldr	r2, [pc, #392]	; (8006b70 <DMA_SetConfig+0x268>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a61      	ldr	r2, [pc, #388]	; (8006b74 <DMA_SetConfig+0x26c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a5f      	ldr	r2, [pc, #380]	; (8006b78 <DMA_SetConfig+0x270>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a5e      	ldr	r2, [pc, #376]	; (8006b7c <DMA_SetConfig+0x274>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <DMA_SetConfig+0x10a>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a5c      	ldr	r2, [pc, #368]	; (8006b80 <DMA_SetConfig+0x278>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d101      	bne.n	8006a16 <DMA_SetConfig+0x10e>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <DMA_SetConfig+0x110>
 8006a16:	2300      	movs	r3, #0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00d      	beq.n	8006a38 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a24:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a36:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a39      	ldr	r2, [pc, #228]	; (8006b24 <DMA_SetConfig+0x21c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d04a      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a38      	ldr	r2, [pc, #224]	; (8006b28 <DMA_SetConfig+0x220>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d045      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a36      	ldr	r2, [pc, #216]	; (8006b2c <DMA_SetConfig+0x224>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d040      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a35      	ldr	r2, [pc, #212]	; (8006b30 <DMA_SetConfig+0x228>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d03b      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a33      	ldr	r2, [pc, #204]	; (8006b34 <DMA_SetConfig+0x22c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d036      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a32      	ldr	r2, [pc, #200]	; (8006b38 <DMA_SetConfig+0x230>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d031      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a30      	ldr	r2, [pc, #192]	; (8006b3c <DMA_SetConfig+0x234>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d02c      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a2f      	ldr	r2, [pc, #188]	; (8006b40 <DMA_SetConfig+0x238>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d027      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a2d      	ldr	r2, [pc, #180]	; (8006b44 <DMA_SetConfig+0x23c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d022      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a2c      	ldr	r2, [pc, #176]	; (8006b48 <DMA_SetConfig+0x240>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d01d      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a2a      	ldr	r2, [pc, #168]	; (8006b4c <DMA_SetConfig+0x244>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d018      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a29      	ldr	r2, [pc, #164]	; (8006b50 <DMA_SetConfig+0x248>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d013      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a27      	ldr	r2, [pc, #156]	; (8006b54 <DMA_SetConfig+0x24c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00e      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a26      	ldr	r2, [pc, #152]	; (8006b58 <DMA_SetConfig+0x250>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d009      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a24      	ldr	r2, [pc, #144]	; (8006b5c <DMA_SetConfig+0x254>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d004      	beq.n	8006ad8 <DMA_SetConfig+0x1d0>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a23      	ldr	r2, [pc, #140]	; (8006b60 <DMA_SetConfig+0x258>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d101      	bne.n	8006adc <DMA_SetConfig+0x1d4>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <DMA_SetConfig+0x1d6>
 8006adc:	2300      	movs	r3, #0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d059      	beq.n	8006b96 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	223f      	movs	r2, #63	; 0x3f
 8006aec:	409a      	lsls	r2, r3
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b00:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d138      	bne.n	8006b84 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b22:	e086      	b.n	8006c32 <DMA_SetConfig+0x32a>
 8006b24:	40020010 	.word	0x40020010
 8006b28:	40020028 	.word	0x40020028
 8006b2c:	40020040 	.word	0x40020040
 8006b30:	40020058 	.word	0x40020058
 8006b34:	40020070 	.word	0x40020070
 8006b38:	40020088 	.word	0x40020088
 8006b3c:	400200a0 	.word	0x400200a0
 8006b40:	400200b8 	.word	0x400200b8
 8006b44:	40020410 	.word	0x40020410
 8006b48:	40020428 	.word	0x40020428
 8006b4c:	40020440 	.word	0x40020440
 8006b50:	40020458 	.word	0x40020458
 8006b54:	40020470 	.word	0x40020470
 8006b58:	40020488 	.word	0x40020488
 8006b5c:	400204a0 	.word	0x400204a0
 8006b60:	400204b8 	.word	0x400204b8
 8006b64:	58025408 	.word	0x58025408
 8006b68:	5802541c 	.word	0x5802541c
 8006b6c:	58025430 	.word	0x58025430
 8006b70:	58025444 	.word	0x58025444
 8006b74:	58025458 	.word	0x58025458
 8006b78:	5802546c 	.word	0x5802546c
 8006b7c:	58025480 	.word	0x58025480
 8006b80:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	60da      	str	r2, [r3, #12]
}
 8006b94:	e04d      	b.n	8006c32 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a29      	ldr	r2, [pc, #164]	; (8006c40 <DMA_SetConfig+0x338>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d022      	beq.n	8006be6 <DMA_SetConfig+0x2de>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a27      	ldr	r2, [pc, #156]	; (8006c44 <DMA_SetConfig+0x33c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d01d      	beq.n	8006be6 <DMA_SetConfig+0x2de>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a26      	ldr	r2, [pc, #152]	; (8006c48 <DMA_SetConfig+0x340>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d018      	beq.n	8006be6 <DMA_SetConfig+0x2de>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a24      	ldr	r2, [pc, #144]	; (8006c4c <DMA_SetConfig+0x344>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d013      	beq.n	8006be6 <DMA_SetConfig+0x2de>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a23      	ldr	r2, [pc, #140]	; (8006c50 <DMA_SetConfig+0x348>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00e      	beq.n	8006be6 <DMA_SetConfig+0x2de>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a21      	ldr	r2, [pc, #132]	; (8006c54 <DMA_SetConfig+0x34c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d009      	beq.n	8006be6 <DMA_SetConfig+0x2de>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a20      	ldr	r2, [pc, #128]	; (8006c58 <DMA_SetConfig+0x350>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d004      	beq.n	8006be6 <DMA_SetConfig+0x2de>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a1e      	ldr	r2, [pc, #120]	; (8006c5c <DMA_SetConfig+0x354>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d101      	bne.n	8006bea <DMA_SetConfig+0x2e2>
 8006be6:	2301      	movs	r3, #1
 8006be8:	e000      	b.n	8006bec <DMA_SetConfig+0x2e4>
 8006bea:	2300      	movs	r3, #0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d020      	beq.n	8006c32 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf4:	f003 031f 	and.w	r3, r3, #31
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	2b40      	cmp	r3, #64	; 0x40
 8006c0e:	d108      	bne.n	8006c22 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	60da      	str	r2, [r3, #12]
}
 8006c20:	e007      	b.n	8006c32 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	60da      	str	r2, [r3, #12]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	58025408 	.word	0x58025408
 8006c44:	5802541c 	.word	0x5802541c
 8006c48:	58025430 	.word	0x58025430
 8006c4c:	58025444 	.word	0x58025444
 8006c50:	58025458 	.word	0x58025458
 8006c54:	5802546c 	.word	0x5802546c
 8006c58:	58025480 	.word	0x58025480
 8006c5c:	58025494 	.word	0x58025494

08006c60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a42      	ldr	r2, [pc, #264]	; (8006d78 <DMA_CalcBaseAndBitshift+0x118>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d04a      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a41      	ldr	r2, [pc, #260]	; (8006d7c <DMA_CalcBaseAndBitshift+0x11c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d045      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a3f      	ldr	r2, [pc, #252]	; (8006d80 <DMA_CalcBaseAndBitshift+0x120>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d040      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a3e      	ldr	r2, [pc, #248]	; (8006d84 <DMA_CalcBaseAndBitshift+0x124>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d03b      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a3c      	ldr	r2, [pc, #240]	; (8006d88 <DMA_CalcBaseAndBitshift+0x128>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d036      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a3b      	ldr	r2, [pc, #236]	; (8006d8c <DMA_CalcBaseAndBitshift+0x12c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d031      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a39      	ldr	r2, [pc, #228]	; (8006d90 <DMA_CalcBaseAndBitshift+0x130>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d02c      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a38      	ldr	r2, [pc, #224]	; (8006d94 <DMA_CalcBaseAndBitshift+0x134>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d027      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a36      	ldr	r2, [pc, #216]	; (8006d98 <DMA_CalcBaseAndBitshift+0x138>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d022      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a35      	ldr	r2, [pc, #212]	; (8006d9c <DMA_CalcBaseAndBitshift+0x13c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d01d      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a33      	ldr	r2, [pc, #204]	; (8006da0 <DMA_CalcBaseAndBitshift+0x140>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d018      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a32      	ldr	r2, [pc, #200]	; (8006da4 <DMA_CalcBaseAndBitshift+0x144>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d013      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a30      	ldr	r2, [pc, #192]	; (8006da8 <DMA_CalcBaseAndBitshift+0x148>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00e      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a2f      	ldr	r2, [pc, #188]	; (8006dac <DMA_CalcBaseAndBitshift+0x14c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d009      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a2d      	ldr	r2, [pc, #180]	; (8006db0 <DMA_CalcBaseAndBitshift+0x150>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <DMA_CalcBaseAndBitshift+0xa8>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a2c      	ldr	r2, [pc, #176]	; (8006db4 <DMA_CalcBaseAndBitshift+0x154>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d101      	bne.n	8006d0c <DMA_CalcBaseAndBitshift+0xac>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <DMA_CalcBaseAndBitshift+0xae>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d024      	beq.n	8006d5c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	3b10      	subs	r3, #16
 8006d1a:	4a27      	ldr	r2, [pc, #156]	; (8006db8 <DMA_CalcBaseAndBitshift+0x158>)
 8006d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d20:	091b      	lsrs	r3, r3, #4
 8006d22:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	4a24      	ldr	r2, [pc, #144]	; (8006dbc <DMA_CalcBaseAndBitshift+0x15c>)
 8006d2c:	5cd3      	ldrb	r3, [r2, r3]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d908      	bls.n	8006d4c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	4b1f      	ldr	r3, [pc, #124]	; (8006dc0 <DMA_CalcBaseAndBitshift+0x160>)
 8006d42:	4013      	ands	r3, r2
 8006d44:	1d1a      	adds	r2, r3, #4
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	659a      	str	r2, [r3, #88]	; 0x58
 8006d4a:	e00d      	b.n	8006d68 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	4b1b      	ldr	r3, [pc, #108]	; (8006dc0 <DMA_CalcBaseAndBitshift+0x160>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6593      	str	r3, [r2, #88]	; 0x58
 8006d5a:	e005      	b.n	8006d68 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	40020010 	.word	0x40020010
 8006d7c:	40020028 	.word	0x40020028
 8006d80:	40020040 	.word	0x40020040
 8006d84:	40020058 	.word	0x40020058
 8006d88:	40020070 	.word	0x40020070
 8006d8c:	40020088 	.word	0x40020088
 8006d90:	400200a0 	.word	0x400200a0
 8006d94:	400200b8 	.word	0x400200b8
 8006d98:	40020410 	.word	0x40020410
 8006d9c:	40020428 	.word	0x40020428
 8006da0:	40020440 	.word	0x40020440
 8006da4:	40020458 	.word	0x40020458
 8006da8:	40020470 	.word	0x40020470
 8006dac:	40020488 	.word	0x40020488
 8006db0:	400204a0 	.word	0x400204a0
 8006db4:	400204b8 	.word	0x400204b8
 8006db8:	aaaaaaab 	.word	0xaaaaaaab
 8006dbc:	080119f0 	.word	0x080119f0
 8006dc0:	fffffc00 	.word	0xfffffc00

08006dc4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d120      	bne.n	8006e1a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d858      	bhi.n	8006e92 <DMA_CheckFifoParam+0xce>
 8006de0:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <DMA_CheckFifoParam+0x24>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006df9 	.word	0x08006df9
 8006dec:	08006e0b 	.word	0x08006e0b
 8006df0:	08006df9 	.word	0x08006df9
 8006df4:	08006e93 	.word	0x08006e93
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d048      	beq.n	8006e96 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e08:	e045      	b.n	8006e96 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e12:	d142      	bne.n	8006e9a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e18:	e03f      	b.n	8006e9a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e22:	d123      	bne.n	8006e6c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d838      	bhi.n	8006e9e <DMA_CheckFifoParam+0xda>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <DMA_CheckFifoParam+0x70>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e45 	.word	0x08006e45
 8006e38:	08006e4b 	.word	0x08006e4b
 8006e3c:	08006e45 	.word	0x08006e45
 8006e40:	08006e5d 	.word	0x08006e5d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	73fb      	strb	r3, [r7, #15]
        break;
 8006e48:	e030      	b.n	8006eac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d025      	beq.n	8006ea2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e5a:	e022      	b.n	8006ea2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e64:	d11f      	bne.n	8006ea6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e6a:	e01c      	b.n	8006ea6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d902      	bls.n	8006e7a <DMA_CheckFifoParam+0xb6>
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d003      	beq.n	8006e80 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006e78:	e018      	b.n	8006eac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	73fb      	strb	r3, [r7, #15]
        break;
 8006e7e:	e015      	b.n	8006eac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00e      	beq.n	8006eaa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e90:	e00b      	b.n	8006eaa <DMA_CheckFifoParam+0xe6>
        break;
 8006e92:	bf00      	nop
 8006e94:	e00a      	b.n	8006eac <DMA_CheckFifoParam+0xe8>
        break;
 8006e96:	bf00      	nop
 8006e98:	e008      	b.n	8006eac <DMA_CheckFifoParam+0xe8>
        break;
 8006e9a:	bf00      	nop
 8006e9c:	e006      	b.n	8006eac <DMA_CheckFifoParam+0xe8>
        break;
 8006e9e:	bf00      	nop
 8006ea0:	e004      	b.n	8006eac <DMA_CheckFifoParam+0xe8>
        break;
 8006ea2:	bf00      	nop
 8006ea4:	e002      	b.n	8006eac <DMA_CheckFifoParam+0xe8>
        break;
 8006ea6:	bf00      	nop
 8006ea8:	e000      	b.n	8006eac <DMA_CheckFifoParam+0xe8>
    break;
 8006eaa:	bf00      	nop
    }
  }

  return status;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop

08006ebc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a38      	ldr	r2, [pc, #224]	; (8006fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d022      	beq.n	8006f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a36      	ldr	r2, [pc, #216]	; (8006fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01d      	beq.n	8006f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a35      	ldr	r2, [pc, #212]	; (8006fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d018      	beq.n	8006f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a33      	ldr	r2, [pc, #204]	; (8006fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a32      	ldr	r2, [pc, #200]	; (8006fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00e      	beq.n	8006f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a30      	ldr	r2, [pc, #192]	; (8006fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a2f      	ldr	r2, [pc, #188]	; (8006fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a2d      	ldr	r2, [pc, #180]	; (8006fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d101      	bne.n	8006f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e000      	b.n	8006f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01a      	beq.n	8006f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	3b08      	subs	r3, #8
 8006f2c:	4a28      	ldr	r2, [pc, #160]	; (8006fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f32:	091b      	lsrs	r3, r3, #4
 8006f34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4b26      	ldr	r3, [pc, #152]	; (8006fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	461a      	mov	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a24      	ldr	r2, [pc, #144]	; (8006fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006f48:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2201      	movs	r2, #1
 8006f52:	409a      	lsls	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006f58:	e024      	b.n	8006fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	3b10      	subs	r3, #16
 8006f62:	4a1e      	ldr	r2, [pc, #120]	; (8006fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006f64:	fba2 2303 	umull	r2, r3, r2, r3
 8006f68:	091b      	lsrs	r3, r3, #4
 8006f6a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d806      	bhi.n	8006f82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4a1b      	ldr	r2, [pc, #108]	; (8006fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d902      	bls.n	8006f82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3308      	adds	r3, #8
 8006f80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4b18      	ldr	r3, [pc, #96]	; (8006fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a16      	ldr	r2, [pc, #88]	; (8006fec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006f94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f003 031f 	and.w	r3, r3, #31
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	409a      	lsls	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006fa4:	bf00      	nop
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	58025408 	.word	0x58025408
 8006fb4:	5802541c 	.word	0x5802541c
 8006fb8:	58025430 	.word	0x58025430
 8006fbc:	58025444 	.word	0x58025444
 8006fc0:	58025458 	.word	0x58025458
 8006fc4:	5802546c 	.word	0x5802546c
 8006fc8:	58025480 	.word	0x58025480
 8006fcc:	58025494 	.word	0x58025494
 8006fd0:	cccccccd 	.word	0xcccccccd
 8006fd4:	16009600 	.word	0x16009600
 8006fd8:	58025880 	.word	0x58025880
 8006fdc:	aaaaaaab 	.word	0xaaaaaaab
 8006fe0:	400204b8 	.word	0x400204b8
 8006fe4:	4002040f 	.word	0x4002040f
 8006fe8:	10008200 	.word	0x10008200
 8006fec:	40020880 	.word	0x40020880

08006ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d04a      	beq.n	800709c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d847      	bhi.n	800709c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a25      	ldr	r2, [pc, #148]	; (80070a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d022      	beq.n	800705c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a24      	ldr	r2, [pc, #144]	; (80070ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d01d      	beq.n	800705c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a22      	ldr	r2, [pc, #136]	; (80070b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d018      	beq.n	800705c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a21      	ldr	r2, [pc, #132]	; (80070b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d013      	beq.n	800705c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a1f      	ldr	r2, [pc, #124]	; (80070b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d00e      	beq.n	800705c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a1e      	ldr	r2, [pc, #120]	; (80070bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d009      	beq.n	800705c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a1c      	ldr	r2, [pc, #112]	; (80070c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d004      	beq.n	800705c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a1b      	ldr	r2, [pc, #108]	; (80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d101      	bne.n	8007060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800705c:	2301      	movs	r3, #1
 800705e:	e000      	b.n	8007062 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007060:	2300      	movs	r3, #0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4b17      	ldr	r3, [pc, #92]	; (80070c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	461a      	mov	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a15      	ldr	r2, [pc, #84]	; (80070cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007078:	671a      	str	r2, [r3, #112]	; 0x70
 800707a:	e009      	b.n	8007090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4b14      	ldr	r3, [pc, #80]	; (80070d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	461a      	mov	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a11      	ldr	r2, [pc, #68]	; (80070d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800708e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3b01      	subs	r3, #1
 8007094:	2201      	movs	r2, #1
 8007096:	409a      	lsls	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800709c:	bf00      	nop
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	58025408 	.word	0x58025408
 80070ac:	5802541c 	.word	0x5802541c
 80070b0:	58025430 	.word	0x58025430
 80070b4:	58025444 	.word	0x58025444
 80070b8:	58025458 	.word	0x58025458
 80070bc:	5802546c 	.word	0x5802546c
 80070c0:	58025480 	.word	0x58025480
 80070c4:	58025494 	.word	0x58025494
 80070c8:	1600963f 	.word	0x1600963f
 80070cc:	58025940 	.word	0x58025940
 80070d0:	1000823f 	.word	0x1000823f
 80070d4:	40020940 	.word	0x40020940

080070d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070d8:	b480      	push	{r7}
 80070da:	b089      	sub	sp, #36	; 0x24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80070e6:	4b89      	ldr	r3, [pc, #548]	; (800730c <HAL_GPIO_Init+0x234>)
 80070e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070ea:	e194      	b.n	8007416 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	2101      	movs	r1, #1
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	fa01 f303 	lsl.w	r3, r1, r3
 80070f8:	4013      	ands	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 8186 	beq.w	8007410 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f003 0303 	and.w	r3, r3, #3
 800710c:	2b01      	cmp	r3, #1
 800710e:	d005      	beq.n	800711c <HAL_GPIO_Init+0x44>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f003 0303 	and.w	r3, r3, #3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d130      	bne.n	800717e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	2203      	movs	r2, #3
 8007128:	fa02 f303 	lsl.w	r3, r2, r3
 800712c:	43db      	mvns	r3, r3
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	4013      	ands	r3, r2
 8007132:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	68da      	ldr	r2, [r3, #12]
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	fa02 f303 	lsl.w	r3, r2, r3
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	4313      	orrs	r3, r2
 8007144:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007152:	2201      	movs	r2, #1
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	43db      	mvns	r3, r3
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	4013      	ands	r3, r2
 8007160:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	091b      	lsrs	r3, r3, #4
 8007168:	f003 0201 	and.w	r2, r3, #1
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	fa02 f303 	lsl.w	r3, r2, r3
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	4313      	orrs	r3, r2
 8007176:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	2b03      	cmp	r3, #3
 8007188:	d017      	beq.n	80071ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	2203      	movs	r2, #3
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	43db      	mvns	r3, r3
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	4013      	ands	r3, r2
 80071a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	fa02 f303 	lsl.w	r3, r2, r3
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d123      	bne.n	800720e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	08da      	lsrs	r2, r3, #3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3208      	adds	r2, #8
 80071ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	220f      	movs	r2, #15
 80071de:	fa02 f303 	lsl.w	r3, r2, r3
 80071e2:	43db      	mvns	r3, r3
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	4013      	ands	r3, r2
 80071e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	691a      	ldr	r2, [r3, #16]
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	fa02 f303 	lsl.w	r3, r2, r3
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	08da      	lsrs	r2, r3, #3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3208      	adds	r2, #8
 8007208:	69b9      	ldr	r1, [r7, #24]
 800720a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	2203      	movs	r2, #3
 800721a:	fa02 f303 	lsl.w	r3, r2, r3
 800721e:	43db      	mvns	r3, r3
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	4013      	ands	r3, r2
 8007224:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f003 0203 	and.w	r2, r3, #3
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	fa02 f303 	lsl.w	r3, r2, r3
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	4313      	orrs	r3, r2
 800723a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 80e0 	beq.w	8007410 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007250:	4b2f      	ldr	r3, [pc, #188]	; (8007310 <HAL_GPIO_Init+0x238>)
 8007252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007256:	4a2e      	ldr	r2, [pc, #184]	; (8007310 <HAL_GPIO_Init+0x238>)
 8007258:	f043 0302 	orr.w	r3, r3, #2
 800725c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007260:	4b2b      	ldr	r3, [pc, #172]	; (8007310 <HAL_GPIO_Init+0x238>)
 8007262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800726e:	4a29      	ldr	r2, [pc, #164]	; (8007314 <HAL_GPIO_Init+0x23c>)
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	089b      	lsrs	r3, r3, #2
 8007274:	3302      	adds	r3, #2
 8007276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	220f      	movs	r2, #15
 8007286:	fa02 f303 	lsl.w	r3, r2, r3
 800728a:	43db      	mvns	r3, r3
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	4013      	ands	r3, r2
 8007290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a20      	ldr	r2, [pc, #128]	; (8007318 <HAL_GPIO_Init+0x240>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d052      	beq.n	8007340 <HAL_GPIO_Init+0x268>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a1f      	ldr	r2, [pc, #124]	; (800731c <HAL_GPIO_Init+0x244>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d031      	beq.n	8007306 <HAL_GPIO_Init+0x22e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a1e      	ldr	r2, [pc, #120]	; (8007320 <HAL_GPIO_Init+0x248>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d02b      	beq.n	8007302 <HAL_GPIO_Init+0x22a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a1d      	ldr	r2, [pc, #116]	; (8007324 <HAL_GPIO_Init+0x24c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d025      	beq.n	80072fe <HAL_GPIO_Init+0x226>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a1c      	ldr	r2, [pc, #112]	; (8007328 <HAL_GPIO_Init+0x250>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d01f      	beq.n	80072fa <HAL_GPIO_Init+0x222>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a1b      	ldr	r2, [pc, #108]	; (800732c <HAL_GPIO_Init+0x254>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d019      	beq.n	80072f6 <HAL_GPIO_Init+0x21e>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a1a      	ldr	r2, [pc, #104]	; (8007330 <HAL_GPIO_Init+0x258>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d013      	beq.n	80072f2 <HAL_GPIO_Init+0x21a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a19      	ldr	r2, [pc, #100]	; (8007334 <HAL_GPIO_Init+0x25c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00d      	beq.n	80072ee <HAL_GPIO_Init+0x216>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a18      	ldr	r2, [pc, #96]	; (8007338 <HAL_GPIO_Init+0x260>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d007      	beq.n	80072ea <HAL_GPIO_Init+0x212>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a17      	ldr	r2, [pc, #92]	; (800733c <HAL_GPIO_Init+0x264>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d101      	bne.n	80072e6 <HAL_GPIO_Init+0x20e>
 80072e2:	2309      	movs	r3, #9
 80072e4:	e02d      	b.n	8007342 <HAL_GPIO_Init+0x26a>
 80072e6:	230a      	movs	r3, #10
 80072e8:	e02b      	b.n	8007342 <HAL_GPIO_Init+0x26a>
 80072ea:	2308      	movs	r3, #8
 80072ec:	e029      	b.n	8007342 <HAL_GPIO_Init+0x26a>
 80072ee:	2307      	movs	r3, #7
 80072f0:	e027      	b.n	8007342 <HAL_GPIO_Init+0x26a>
 80072f2:	2306      	movs	r3, #6
 80072f4:	e025      	b.n	8007342 <HAL_GPIO_Init+0x26a>
 80072f6:	2305      	movs	r3, #5
 80072f8:	e023      	b.n	8007342 <HAL_GPIO_Init+0x26a>
 80072fa:	2304      	movs	r3, #4
 80072fc:	e021      	b.n	8007342 <HAL_GPIO_Init+0x26a>
 80072fe:	2303      	movs	r3, #3
 8007300:	e01f      	b.n	8007342 <HAL_GPIO_Init+0x26a>
 8007302:	2302      	movs	r3, #2
 8007304:	e01d      	b.n	8007342 <HAL_GPIO_Init+0x26a>
 8007306:	2301      	movs	r3, #1
 8007308:	e01b      	b.n	8007342 <HAL_GPIO_Init+0x26a>
 800730a:	bf00      	nop
 800730c:	58000080 	.word	0x58000080
 8007310:	58024400 	.word	0x58024400
 8007314:	58000400 	.word	0x58000400
 8007318:	58020000 	.word	0x58020000
 800731c:	58020400 	.word	0x58020400
 8007320:	58020800 	.word	0x58020800
 8007324:	58020c00 	.word	0x58020c00
 8007328:	58021000 	.word	0x58021000
 800732c:	58021400 	.word	0x58021400
 8007330:	58021800 	.word	0x58021800
 8007334:	58021c00 	.word	0x58021c00
 8007338:	58022000 	.word	0x58022000
 800733c:	58022400 	.word	0x58022400
 8007340:	2300      	movs	r3, #0
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	f002 0203 	and.w	r2, r2, #3
 8007348:	0092      	lsls	r2, r2, #2
 800734a:	4093      	lsls	r3, r2
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	4313      	orrs	r3, r2
 8007350:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007352:	4938      	ldr	r1, [pc, #224]	; (8007434 <HAL_GPIO_Init+0x35c>)
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	089b      	lsrs	r3, r3, #2
 8007358:	3302      	adds	r3, #2
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	43db      	mvns	r3, r3
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	4013      	ands	r3, r2
 8007370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	4313      	orrs	r3, r2
 8007384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800738e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	43db      	mvns	r3, r3
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	4013      	ands	r3, r2
 800739e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80073b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	43db      	mvns	r3, r3
 80073c6:	69ba      	ldr	r2, [r7, #24]
 80073c8:	4013      	ands	r3, r2
 80073ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	43db      	mvns	r3, r3
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	4013      	ands	r3, r2
 80073f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	4313      	orrs	r3, r2
 8007408:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	3301      	adds	r3, #1
 8007414:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	fa22 f303 	lsr.w	r3, r2, r3
 8007420:	2b00      	cmp	r3, #0
 8007422:	f47f ae63 	bne.w	80070ec <HAL_GPIO_Init+0x14>
  }
}
 8007426:	bf00      	nop
 8007428:	bf00      	nop
 800742a:	3724      	adds	r7, #36	; 0x24
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	58000400 	.word	0x58000400

08007438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	807b      	strh	r3, [r7, #2]
 8007444:	4613      	mov	r3, r2
 8007446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007448:	787b      	ldrb	r3, [r7, #1]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800744e:	887a      	ldrh	r2, [r7, #2]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007454:	e003      	b.n	800745e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007456:	887b      	ldrh	r3, [r7, #2]
 8007458:	041a      	lsls	r2, r3, #16
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	619a      	str	r2, [r3, #24]
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
	...

0800746c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e08b      	b.n	8007596 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7f9 fe04 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2224      	movs	r2, #36	; 0x24
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0201 	bic.w	r2, r2, #1
 80074ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d107      	bne.n	80074e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074e2:	609a      	str	r2, [r3, #8]
 80074e4:	e006      	b.n	80074f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80074f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d108      	bne.n	800750e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800750a:	605a      	str	r2, [r3, #4]
 800750c:	e007      	b.n	800751e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800751c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6859      	ldr	r1, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	4b1d      	ldr	r3, [pc, #116]	; (80075a0 <HAL_I2C_Init+0x134>)
 800752a:	430b      	orrs	r3, r1
 800752c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800753c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691a      	ldr	r2, [r3, #16]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69d9      	ldr	r1, [r3, #28]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a1a      	ldr	r2, [r3, #32]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0201 	orr.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	02008000 	.word	0x02008000

080075a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	d138      	bne.n	800762c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d101      	bne.n	80075c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075c4:	2302      	movs	r3, #2
 80075c6:	e032      	b.n	800762e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2224      	movs	r2, #36	; 0x24
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6819      	ldr	r1, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f042 0201 	orr.w	r2, r2, #1
 8007616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2220      	movs	r2, #32
 800761c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	e000      	b.n	800762e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800762c:	2302      	movs	r3, #2
  }
}
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800763a:	b480      	push	{r7}
 800763c:	b085      	sub	sp, #20
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b20      	cmp	r3, #32
 800764e:	d139      	bne.n	80076c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007656:	2b01      	cmp	r3, #1
 8007658:	d101      	bne.n	800765e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800765a:	2302      	movs	r3, #2
 800765c:	e033      	b.n	80076c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2224      	movs	r2, #36	; 0x24
 800766a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0201 	bic.w	r2, r2, #1
 800767c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800768c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	021b      	lsls	r3, r3, #8
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0201 	orr.w	r2, r2, #1
 80076ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e000      	b.n	80076c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076c4:	2302      	movs	r3, #2
  }
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
	...

080076d4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076dc:	4b0d      	ldr	r3, [pc, #52]	; (8007714 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80076de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076e2:	4a0c      	ldr	r2, [pc, #48]	; (8007714 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80076e4:	f043 0302 	orr.w	r3, r3, #2
 80076e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80076ec:	4b09      	ldr	r3, [pc, #36]	; (8007714 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80076ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80076fa:	4b07      	ldr	r3, [pc, #28]	; (8007718 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	4906      	ldr	r1, [pc, #24]	; (8007718 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4313      	orrs	r3, r2
 8007704:	604b      	str	r3, [r1, #4]
}
 8007706:	bf00      	nop
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	58024400 	.word	0x58024400
 8007718:	58000400 	.word	0x58000400

0800771c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007724:	4b19      	ldr	r3, [pc, #100]	; (800778c <HAL_PWREx_ConfigSupply+0x70>)
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b04      	cmp	r3, #4
 800772e:	d00a      	beq.n	8007746 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007730:	4b16      	ldr	r3, [pc, #88]	; (800778c <HAL_PWREx_ConfigSupply+0x70>)
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f003 0307 	and.w	r3, r3, #7
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	429a      	cmp	r2, r3
 800773c:	d001      	beq.n	8007742 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e01f      	b.n	8007782 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	e01d      	b.n	8007782 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007746:	4b11      	ldr	r3, [pc, #68]	; (800778c <HAL_PWREx_ConfigSupply+0x70>)
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f023 0207 	bic.w	r2, r3, #7
 800774e:	490f      	ldr	r1, [pc, #60]	; (800778c <HAL_PWREx_ConfigSupply+0x70>)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4313      	orrs	r3, r2
 8007754:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007756:	f7fa ff93 	bl	8002680 <HAL_GetTick>
 800775a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800775c:	e009      	b.n	8007772 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800775e:	f7fa ff8f 	bl	8002680 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800776c:	d901      	bls.n	8007772 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e007      	b.n	8007782 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007772:	4b06      	ldr	r3, [pc, #24]	; (800778c <HAL_PWREx_ConfigSupply+0x70>)
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800777a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800777e:	d1ee      	bne.n	800775e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	58024800 	.word	0x58024800

08007790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08c      	sub	sp, #48	; 0x30
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d102      	bne.n	80077a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	f000 bc48 	b.w	8008034 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 8088 	beq.w	80078c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077b2:	4b99      	ldr	r3, [pc, #612]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077bc:	4b96      	ldr	r3, [pc, #600]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	2b10      	cmp	r3, #16
 80077c6:	d007      	beq.n	80077d8 <HAL_RCC_OscConfig+0x48>
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	2b18      	cmp	r3, #24
 80077cc:	d111      	bne.n	80077f2 <HAL_RCC_OscConfig+0x62>
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	f003 0303 	and.w	r3, r3, #3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d10c      	bne.n	80077f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077d8:	4b8f      	ldr	r3, [pc, #572]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d06d      	beq.n	80078c0 <HAL_RCC_OscConfig+0x130>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d169      	bne.n	80078c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	f000 bc21 	b.w	8008034 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077fa:	d106      	bne.n	800780a <HAL_RCC_OscConfig+0x7a>
 80077fc:	4b86      	ldr	r3, [pc, #536]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a85      	ldr	r2, [pc, #532]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	e02e      	b.n	8007868 <HAL_RCC_OscConfig+0xd8>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10c      	bne.n	800782c <HAL_RCC_OscConfig+0x9c>
 8007812:	4b81      	ldr	r3, [pc, #516]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a80      	ldr	r2, [pc, #512]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	4b7e      	ldr	r3, [pc, #504]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a7d      	ldr	r2, [pc, #500]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	e01d      	b.n	8007868 <HAL_RCC_OscConfig+0xd8>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007834:	d10c      	bne.n	8007850 <HAL_RCC_OscConfig+0xc0>
 8007836:	4b78      	ldr	r3, [pc, #480]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a77      	ldr	r2, [pc, #476]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 800783c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	4b75      	ldr	r3, [pc, #468]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a74      	ldr	r2, [pc, #464]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	e00b      	b.n	8007868 <HAL_RCC_OscConfig+0xd8>
 8007850:	4b71      	ldr	r3, [pc, #452]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a70      	ldr	r2, [pc, #448]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	4b6e      	ldr	r3, [pc, #440]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a6d      	ldr	r2, [pc, #436]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d013      	beq.n	8007898 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007870:	f7fa ff06 	bl	8002680 <HAL_GetTick>
 8007874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007876:	e008      	b.n	800788a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007878:	f7fa ff02 	bl	8002680 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	2b64      	cmp	r3, #100	; 0x64
 8007884:	d901      	bls.n	800788a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e3d4      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800788a:	4b63      	ldr	r3, [pc, #396]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0f0      	beq.n	8007878 <HAL_RCC_OscConfig+0xe8>
 8007896:	e014      	b.n	80078c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007898:	f7fa fef2 	bl	8002680 <HAL_GetTick>
 800789c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800789e:	e008      	b.n	80078b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078a0:	f7fa feee 	bl	8002680 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b64      	cmp	r3, #100	; 0x64
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e3c0      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078b2:	4b59      	ldr	r3, [pc, #356]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1f0      	bne.n	80078a0 <HAL_RCC_OscConfig+0x110>
 80078be:	e000      	b.n	80078c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 80ca 	beq.w	8007a64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078d0:	4b51      	ldr	r3, [pc, #324]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078da:	4b4f      	ldr	r3, [pc, #316]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d007      	beq.n	80078f6 <HAL_RCC_OscConfig+0x166>
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	2b18      	cmp	r3, #24
 80078ea:	d156      	bne.n	800799a <HAL_RCC_OscConfig+0x20a>
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f003 0303 	and.w	r3, r3, #3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d151      	bne.n	800799a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078f6:	4b48      	ldr	r3, [pc, #288]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0304 	and.w	r3, r3, #4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <HAL_RCC_OscConfig+0x17e>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e392      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800790e:	4b42      	ldr	r3, [pc, #264]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f023 0219 	bic.w	r2, r3, #25
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	493f      	ldr	r1, [pc, #252]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 800791c:	4313      	orrs	r3, r2
 800791e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007920:	f7fa feae 	bl	8002680 <HAL_GetTick>
 8007924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007928:	f7fa feaa 	bl	8002680 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e37c      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800793a:	4b37      	ldr	r3, [pc, #220]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0304 	and.w	r3, r3, #4
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0f0      	beq.n	8007928 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007946:	f7fa fea7 	bl	8002698 <HAL_GetREVID>
 800794a:	4603      	mov	r3, r0
 800794c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007950:	4293      	cmp	r3, r2
 8007952:	d817      	bhi.n	8007984 <HAL_RCC_OscConfig+0x1f4>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b40      	cmp	r3, #64	; 0x40
 800795a:	d108      	bne.n	800796e <HAL_RCC_OscConfig+0x1de>
 800795c:	4b2e      	ldr	r3, [pc, #184]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007964:	4a2c      	ldr	r2, [pc, #176]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800796a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800796c:	e07a      	b.n	8007a64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800796e:	4b2a      	ldr	r3, [pc, #168]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	031b      	lsls	r3, r3, #12
 800797c:	4926      	ldr	r1, [pc, #152]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 800797e:	4313      	orrs	r3, r2
 8007980:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007982:	e06f      	b.n	8007a64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007984:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	061b      	lsls	r3, r3, #24
 8007992:	4921      	ldr	r1, [pc, #132]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007994:	4313      	orrs	r3, r2
 8007996:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007998:	e064      	b.n	8007a64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d047      	beq.n	8007a32 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079a2:	4b1d      	ldr	r3, [pc, #116]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f023 0219 	bic.w	r2, r3, #25
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	491a      	ldr	r1, [pc, #104]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b4:	f7fa fe64 	bl	8002680 <HAL_GetTick>
 80079b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ba:	e008      	b.n	80079ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079bc:	f7fa fe60 	bl	8002680 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e332      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ce:	4b12      	ldr	r3, [pc, #72]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0f0      	beq.n	80079bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079da:	f7fa fe5d 	bl	8002698 <HAL_GetREVID>
 80079de:	4603      	mov	r3, r0
 80079e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d819      	bhi.n	8007a1c <HAL_RCC_OscConfig+0x28c>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d108      	bne.n	8007a02 <HAL_RCC_OscConfig+0x272>
 80079f0:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80079f8:	4a07      	ldr	r2, [pc, #28]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 80079fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079fe:	6053      	str	r3, [r2, #4]
 8007a00:	e030      	b.n	8007a64 <HAL_RCC_OscConfig+0x2d4>
 8007a02:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	031b      	lsls	r3, r3, #12
 8007a10:	4901      	ldr	r1, [pc, #4]	; (8007a18 <HAL_RCC_OscConfig+0x288>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	604b      	str	r3, [r1, #4]
 8007a16:	e025      	b.n	8007a64 <HAL_RCC_OscConfig+0x2d4>
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	4b9a      	ldr	r3, [pc, #616]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	061b      	lsls	r3, r3, #24
 8007a2a:	4997      	ldr	r1, [pc, #604]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	604b      	str	r3, [r1, #4]
 8007a30:	e018      	b.n	8007a64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a32:	4b95      	ldr	r3, [pc, #596]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a94      	ldr	r2, [pc, #592]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007a38:	f023 0301 	bic.w	r3, r3, #1
 8007a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3e:	f7fa fe1f 	bl	8002680 <HAL_GetTick>
 8007a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a44:	e008      	b.n	8007a58 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a46:	f7fa fe1b 	bl	8002680 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d901      	bls.n	8007a58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e2ed      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a58:	4b8b      	ldr	r3, [pc, #556]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1f0      	bne.n	8007a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 80a9 	beq.w	8007bc4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a72:	4b85      	ldr	r3, [pc, #532]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a7c:	4b82      	ldr	r3, [pc, #520]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d007      	beq.n	8007a98 <HAL_RCC_OscConfig+0x308>
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	2b18      	cmp	r3, #24
 8007a8c:	d13a      	bne.n	8007b04 <HAL_RCC_OscConfig+0x374>
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d135      	bne.n	8007b04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a98:	4b7b      	ldr	r3, [pc, #492]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x320>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	2b80      	cmp	r3, #128	; 0x80
 8007aaa:	d001      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e2c1      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ab0:	f7fa fdf2 	bl	8002698 <HAL_GetREVID>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f241 0203 	movw	r2, #4099	; 0x1003
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d817      	bhi.n	8007aee <HAL_RCC_OscConfig+0x35e>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	2b20      	cmp	r3, #32
 8007ac4:	d108      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x348>
 8007ac6:	4b70      	ldr	r3, [pc, #448]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ace:	4a6e      	ldr	r2, [pc, #440]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007ad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ad4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ad6:	e075      	b.n	8007bc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ad8:	4b6b      	ldr	r3, [pc, #428]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	069b      	lsls	r3, r3, #26
 8007ae6:	4968      	ldr	r1, [pc, #416]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007aec:	e06a      	b.n	8007bc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007aee:	4b66      	ldr	r3, [pc, #408]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	061b      	lsls	r3, r3, #24
 8007afc:	4962      	ldr	r1, [pc, #392]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b02:	e05f      	b.n	8007bc4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d042      	beq.n	8007b92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b0c:	4b5e      	ldr	r3, [pc, #376]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a5d      	ldr	r2, [pc, #372]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b18:	f7fa fdb2 	bl	8002680 <HAL_GetTick>
 8007b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007b20:	f7fa fdae 	bl	8002680 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e280      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b32:	4b55      	ldr	r3, [pc, #340]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0f0      	beq.n	8007b20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b3e:	f7fa fdab 	bl	8002698 <HAL_GetREVID>
 8007b42:	4603      	mov	r3, r0
 8007b44:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d817      	bhi.n	8007b7c <HAL_RCC_OscConfig+0x3ec>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d108      	bne.n	8007b66 <HAL_RCC_OscConfig+0x3d6>
 8007b54:	4b4c      	ldr	r3, [pc, #304]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007b5c:	4a4a      	ldr	r2, [pc, #296]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007b5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b62:	6053      	str	r3, [r2, #4]
 8007b64:	e02e      	b.n	8007bc4 <HAL_RCC_OscConfig+0x434>
 8007b66:	4b48      	ldr	r3, [pc, #288]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	069b      	lsls	r3, r3, #26
 8007b74:	4944      	ldr	r1, [pc, #272]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	604b      	str	r3, [r1, #4]
 8007b7a:	e023      	b.n	8007bc4 <HAL_RCC_OscConfig+0x434>
 8007b7c:	4b42      	ldr	r3, [pc, #264]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	061b      	lsls	r3, r3, #24
 8007b8a:	493f      	ldr	r1, [pc, #252]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60cb      	str	r3, [r1, #12]
 8007b90:	e018      	b.n	8007bc4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007b92:	4b3d      	ldr	r3, [pc, #244]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a3c      	ldr	r2, [pc, #240]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007b98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9e:	f7fa fd6f 	bl	8002680 <HAL_GetTick>
 8007ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ba6:	f7fa fd6b 	bl	8002680 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e23d      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bb8:	4b33      	ldr	r3, [pc, #204]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1f0      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d036      	beq.n	8007c3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d019      	beq.n	8007c0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bd8:	4b2b      	ldr	r3, [pc, #172]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bdc:	4a2a      	ldr	r2, [pc, #168]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be4:	f7fa fd4c 	bl	8002680 <HAL_GetTick>
 8007be8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bec:	f7fa fd48 	bl	8002680 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e21a      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007bfe:	4b22      	ldr	r3, [pc, #136]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f0      	beq.n	8007bec <HAL_RCC_OscConfig+0x45c>
 8007c0a:	e018      	b.n	8007c3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c0c:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c10:	4a1d      	ldr	r2, [pc, #116]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c18:	f7fa fd32 	bl	8002680 <HAL_GetTick>
 8007c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c1e:	e008      	b.n	8007c32 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c20:	f7fa fd2e 	bl	8002680 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d901      	bls.n	8007c32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e200      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1f0      	bne.n	8007c20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0320 	and.w	r3, r3, #32
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d039      	beq.n	8007cbe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d01c      	beq.n	8007c8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c52:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a0c      	ldr	r2, [pc, #48]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007c58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c5e:	f7fa fd0f 	bl	8002680 <HAL_GetTick>
 8007c62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c64:	e008      	b.n	8007c78 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c66:	f7fa fd0b 	bl	8002680 <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d901      	bls.n	8007c78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e1dd      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c78:	4b03      	ldr	r3, [pc, #12]	; (8007c88 <HAL_RCC_OscConfig+0x4f8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0f0      	beq.n	8007c66 <HAL_RCC_OscConfig+0x4d6>
 8007c84:	e01b      	b.n	8007cbe <HAL_RCC_OscConfig+0x52e>
 8007c86:	bf00      	nop
 8007c88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c8c:	4b9b      	ldr	r3, [pc, #620]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a9a      	ldr	r2, [pc, #616]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c98:	f7fa fcf2 	bl	8002680 <HAL_GetTick>
 8007c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c9e:	e008      	b.n	8007cb2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ca0:	f7fa fcee 	bl	8002680 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d901      	bls.n	8007cb2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e1c0      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cb2:	4b92      	ldr	r3, [pc, #584]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1f0      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 8081 	beq.w	8007dce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ccc:	4b8c      	ldr	r3, [pc, #560]	; (8007f00 <HAL_RCC_OscConfig+0x770>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a8b      	ldr	r2, [pc, #556]	; (8007f00 <HAL_RCC_OscConfig+0x770>)
 8007cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cd8:	f7fa fcd2 	bl	8002680 <HAL_GetTick>
 8007cdc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cde:	e008      	b.n	8007cf2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ce0:	f7fa fcce 	bl	8002680 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	2b64      	cmp	r3, #100	; 0x64
 8007cec:	d901      	bls.n	8007cf2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e1a0      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cf2:	4b83      	ldr	r3, [pc, #524]	; (8007f00 <HAL_RCC_OscConfig+0x770>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0f0      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d106      	bne.n	8007d14 <HAL_RCC_OscConfig+0x584>
 8007d06:	4b7d      	ldr	r3, [pc, #500]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0a:	4a7c      	ldr	r2, [pc, #496]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d0c:	f043 0301 	orr.w	r3, r3, #1
 8007d10:	6713      	str	r3, [r2, #112]	; 0x70
 8007d12:	e02d      	b.n	8007d70 <HAL_RCC_OscConfig+0x5e0>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10c      	bne.n	8007d36 <HAL_RCC_OscConfig+0x5a6>
 8007d1c:	4b77      	ldr	r3, [pc, #476]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d20:	4a76      	ldr	r2, [pc, #472]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d22:	f023 0301 	bic.w	r3, r3, #1
 8007d26:	6713      	str	r3, [r2, #112]	; 0x70
 8007d28:	4b74      	ldr	r3, [pc, #464]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2c:	4a73      	ldr	r2, [pc, #460]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d2e:	f023 0304 	bic.w	r3, r3, #4
 8007d32:	6713      	str	r3, [r2, #112]	; 0x70
 8007d34:	e01c      	b.n	8007d70 <HAL_RCC_OscConfig+0x5e0>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	2b05      	cmp	r3, #5
 8007d3c:	d10c      	bne.n	8007d58 <HAL_RCC_OscConfig+0x5c8>
 8007d3e:	4b6f      	ldr	r3, [pc, #444]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d42:	4a6e      	ldr	r2, [pc, #440]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d44:	f043 0304 	orr.w	r3, r3, #4
 8007d48:	6713      	str	r3, [r2, #112]	; 0x70
 8007d4a:	4b6c      	ldr	r3, [pc, #432]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4e:	4a6b      	ldr	r2, [pc, #428]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d50:	f043 0301 	orr.w	r3, r3, #1
 8007d54:	6713      	str	r3, [r2, #112]	; 0x70
 8007d56:	e00b      	b.n	8007d70 <HAL_RCC_OscConfig+0x5e0>
 8007d58:	4b68      	ldr	r3, [pc, #416]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5c:	4a67      	ldr	r2, [pc, #412]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d5e:	f023 0301 	bic.w	r3, r3, #1
 8007d62:	6713      	str	r3, [r2, #112]	; 0x70
 8007d64:	4b65      	ldr	r3, [pc, #404]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d68:	4a64      	ldr	r2, [pc, #400]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d6a:	f023 0304 	bic.w	r3, r3, #4
 8007d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d015      	beq.n	8007da4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d78:	f7fa fc82 	bl	8002680 <HAL_GetTick>
 8007d7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d7e:	e00a      	b.n	8007d96 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d80:	f7fa fc7e 	bl	8002680 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e14e      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d96:	4b59      	ldr	r3, [pc, #356]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0ee      	beq.n	8007d80 <HAL_RCC_OscConfig+0x5f0>
 8007da2:	e014      	b.n	8007dce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da4:	f7fa fc6c 	bl	8002680 <HAL_GetTick>
 8007da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007daa:	e00a      	b.n	8007dc2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dac:	f7fa fc68 	bl	8002680 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e138      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dc2:	4b4e      	ldr	r3, [pc, #312]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1ee      	bne.n	8007dac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 812d 	beq.w	8008032 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007dd8:	4b48      	ldr	r3, [pc, #288]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007de0:	2b18      	cmp	r3, #24
 8007de2:	f000 80bd 	beq.w	8007f60 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	f040 809e 	bne.w	8007f2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007df0:	4b42      	ldr	r3, [pc, #264]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a41      	ldr	r2, [pc, #260]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfc:	f7fa fc40 	bl	8002680 <HAL_GetTick>
 8007e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e02:	e008      	b.n	8007e16 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e04:	f7fa fc3c 	bl	8002680 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e10e      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e16:	4b39      	ldr	r3, [pc, #228]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f0      	bne.n	8007e04 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e22:	4b36      	ldr	r3, [pc, #216]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e26:	4b37      	ldr	r3, [pc, #220]	; (8007f04 <HAL_RCC_OscConfig+0x774>)
 8007e28:	4013      	ands	r3, r2
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e32:	0112      	lsls	r2, r2, #4
 8007e34:	430a      	orrs	r2, r1
 8007e36:	4931      	ldr	r1, [pc, #196]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	628b      	str	r3, [r1, #40]	; 0x28
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e40:	3b01      	subs	r3, #1
 8007e42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	025b      	lsls	r3, r3, #9
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e56:	3b01      	subs	r3, #1
 8007e58:	041b      	lsls	r3, r3, #16
 8007e5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e64:	3b01      	subs	r3, #1
 8007e66:	061b      	lsls	r3, r3, #24
 8007e68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e6c:	4923      	ldr	r1, [pc, #140]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007e72:	4b22      	ldr	r3, [pc, #136]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e76:	4a21      	ldr	r2, [pc, #132]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007e78:	f023 0301 	bic.w	r3, r3, #1
 8007e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e7e:	4b1f      	ldr	r3, [pc, #124]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e82:	4b21      	ldr	r3, [pc, #132]	; (8007f08 <HAL_RCC_OscConfig+0x778>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e8a:	00d2      	lsls	r2, r2, #3
 8007e8c:	491b      	ldr	r1, [pc, #108]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007e92:	4b1a      	ldr	r3, [pc, #104]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e96:	f023 020c 	bic.w	r2, r3, #12
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9e:	4917      	ldr	r1, [pc, #92]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ea4:	4b15      	ldr	r3, [pc, #84]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea8:	f023 0202 	bic.w	r2, r3, #2
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb0:	4912      	ldr	r1, [pc, #72]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007eb6:	4b11      	ldr	r3, [pc, #68]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	4a10      	ldr	r2, [pc, #64]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec2:	4b0e      	ldr	r3, [pc, #56]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec6:	4a0d      	ldr	r2, [pc, #52]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ece:	4b0b      	ldr	r3, [pc, #44]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed2:	4a0a      	ldr	r2, [pc, #40]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007eda:	4b08      	ldr	r3, [pc, #32]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	4a07      	ldr	r2, [pc, #28]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007ee0:	f043 0301 	orr.w	r3, r3, #1
 8007ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ee6:	4b05      	ldr	r3, [pc, #20]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a04      	ldr	r2, [pc, #16]	; (8007efc <HAL_RCC_OscConfig+0x76c>)
 8007eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef2:	f7fa fbc5 	bl	8002680 <HAL_GetTick>
 8007ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ef8:	e011      	b.n	8007f1e <HAL_RCC_OscConfig+0x78e>
 8007efa:	bf00      	nop
 8007efc:	58024400 	.word	0x58024400
 8007f00:	58024800 	.word	0x58024800
 8007f04:	fffffc0c 	.word	0xfffffc0c
 8007f08:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f0c:	f7fa fbb8 	bl	8002680 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e08a      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f1e:	4b47      	ldr	r3, [pc, #284]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0f0      	beq.n	8007f0c <HAL_RCC_OscConfig+0x77c>
 8007f2a:	e082      	b.n	8008032 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f2c:	4b43      	ldr	r3, [pc, #268]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a42      	ldr	r2, [pc, #264]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 8007f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f38:	f7fa fba2 	bl	8002680 <HAL_GetTick>
 8007f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f40:	f7fa fb9e 	bl	8002680 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e070      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f52:	4b3a      	ldr	r3, [pc, #232]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f0      	bne.n	8007f40 <HAL_RCC_OscConfig+0x7b0>
 8007f5e:	e068      	b.n	8008032 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f60:	4b36      	ldr	r3, [pc, #216]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 8007f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f66:	4b35      	ldr	r3, [pc, #212]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 8007f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d031      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f003 0203 	and.w	r2, r3, #3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d12a      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	091b      	lsrs	r3, r3, #4
 8007f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d122      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d11a      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	0a5b      	lsrs	r3, r3, #9
 8007fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d111      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	0c1b      	lsrs	r3, r3, #16
 8007fb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d108      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	0e1b      	lsrs	r3, r3, #24
 8007fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d001      	beq.n	8007fdc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e02b      	b.n	8008034 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007fdc:	4b17      	ldr	r3, [pc, #92]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 8007fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe0:	08db      	lsrs	r3, r3, #3
 8007fe2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fe6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d01f      	beq.n	8008032 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007ff2:	4b12      	ldr	r3, [pc, #72]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	4a11      	ldr	r2, [pc, #68]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 8007ff8:	f023 0301 	bic.w	r3, r3, #1
 8007ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ffe:	f7fa fb3f 	bl	8002680 <HAL_GetTick>
 8008002:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008004:	bf00      	nop
 8008006:	f7fa fb3b 	bl	8002680 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	4293      	cmp	r3, r2
 8008010:	d0f9      	beq.n	8008006 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008012:	4b0a      	ldr	r3, [pc, #40]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 8008014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008016:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <HAL_RCC_OscConfig+0x8b0>)
 8008018:	4013      	ands	r3, r2
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800801e:	00d2      	lsls	r2, r2, #3
 8008020:	4906      	ldr	r1, [pc, #24]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 8008022:	4313      	orrs	r3, r2
 8008024:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008026:	4b05      	ldr	r3, [pc, #20]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 8008028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802a:	4a04      	ldr	r2, [pc, #16]	; (800803c <HAL_RCC_OscConfig+0x8ac>)
 800802c:	f043 0301 	orr.w	r3, r3, #1
 8008030:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3730      	adds	r7, #48	; 0x30
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	58024400 	.word	0x58024400
 8008040:	ffff0007 	.word	0xffff0007

08008044 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e19c      	b.n	8008392 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008058:	4b8a      	ldr	r3, [pc, #552]	; (8008284 <HAL_RCC_ClockConfig+0x240>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 030f 	and.w	r3, r3, #15
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	429a      	cmp	r2, r3
 8008064:	d910      	bls.n	8008088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008066:	4b87      	ldr	r3, [pc, #540]	; (8008284 <HAL_RCC_ClockConfig+0x240>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f023 020f 	bic.w	r2, r3, #15
 800806e:	4985      	ldr	r1, [pc, #532]	; (8008284 <HAL_RCC_ClockConfig+0x240>)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	4313      	orrs	r3, r2
 8008074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008076:	4b83      	ldr	r3, [pc, #524]	; (8008284 <HAL_RCC_ClockConfig+0x240>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 030f 	and.w	r3, r3, #15
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d001      	beq.n	8008088 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e184      	b.n	8008392 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0304 	and.w	r3, r3, #4
 8008090:	2b00      	cmp	r3, #0
 8008092:	d010      	beq.n	80080b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	4b7b      	ldr	r3, [pc, #492]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d908      	bls.n	80080b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80080a4:	4b78      	ldr	r3, [pc, #480]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	4975      	ldr	r1, [pc, #468]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0308 	and.w	r3, r3, #8
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d010      	beq.n	80080e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	695a      	ldr	r2, [r3, #20]
 80080c6:	4b70      	ldr	r3, [pc, #448]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d908      	bls.n	80080e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80080d2:	4b6d      	ldr	r3, [pc, #436]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	496a      	ldr	r1, [pc, #424]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0310 	and.w	r3, r3, #16
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d010      	beq.n	8008112 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699a      	ldr	r2, [r3, #24]
 80080f4:	4b64      	ldr	r3, [pc, #400]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d908      	bls.n	8008112 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008100:	4b61      	ldr	r3, [pc, #388]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	495e      	ldr	r1, [pc, #376]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 800810e:	4313      	orrs	r3, r2
 8008110:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0320 	and.w	r3, r3, #32
 800811a:	2b00      	cmp	r3, #0
 800811c:	d010      	beq.n	8008140 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69da      	ldr	r2, [r3, #28]
 8008122:	4b59      	ldr	r3, [pc, #356]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800812a:	429a      	cmp	r2, r3
 800812c:	d908      	bls.n	8008140 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800812e:	4b56      	ldr	r3, [pc, #344]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	4953      	ldr	r1, [pc, #332]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 800813c:	4313      	orrs	r3, r2
 800813e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d010      	beq.n	800816e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	4b4d      	ldr	r3, [pc, #308]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	f003 030f 	and.w	r3, r3, #15
 8008158:	429a      	cmp	r2, r3
 800815a:	d908      	bls.n	800816e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800815c:	4b4a      	ldr	r3, [pc, #296]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	f023 020f 	bic.w	r2, r3, #15
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	4947      	ldr	r1, [pc, #284]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 800816a:	4313      	orrs	r3, r2
 800816c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d055      	beq.n	8008226 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800817a:	4b43      	ldr	r3, [pc, #268]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	4940      	ldr	r1, [pc, #256]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 8008188:	4313      	orrs	r3, r2
 800818a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d107      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008194:	4b3c      	ldr	r3, [pc, #240]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d121      	bne.n	80081e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0f6      	b.n	8008392 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d107      	bne.n	80081bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081ac:	4b36      	ldr	r3, [pc, #216]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d115      	bne.n	80081e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e0ea      	b.n	8008392 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d107      	bne.n	80081d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081c4:	4b30      	ldr	r3, [pc, #192]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d109      	bne.n	80081e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e0de      	b.n	8008392 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081d4:	4b2c      	ldr	r3, [pc, #176]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e0d6      	b.n	8008392 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80081e4:	4b28      	ldr	r3, [pc, #160]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	f023 0207 	bic.w	r2, r3, #7
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	4925      	ldr	r1, [pc, #148]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081f6:	f7fa fa43 	bl	8002680 <HAL_GetTick>
 80081fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081fc:	e00a      	b.n	8008214 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081fe:	f7fa fa3f 	bl	8002680 <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	f241 3288 	movw	r2, #5000	; 0x1388
 800820c:	4293      	cmp	r3, r2
 800820e:	d901      	bls.n	8008214 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e0be      	b.n	8008392 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008214:	4b1c      	ldr	r3, [pc, #112]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	429a      	cmp	r2, r3
 8008224:	d1eb      	bne.n	80081fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d010      	beq.n	8008254 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	4b14      	ldr	r3, [pc, #80]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	f003 030f 	and.w	r3, r3, #15
 800823e:	429a      	cmp	r2, r3
 8008240:	d208      	bcs.n	8008254 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008242:	4b11      	ldr	r3, [pc, #68]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	f023 020f 	bic.w	r2, r3, #15
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	490e      	ldr	r1, [pc, #56]	; (8008288 <HAL_RCC_ClockConfig+0x244>)
 8008250:	4313      	orrs	r3, r2
 8008252:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008254:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <HAL_RCC_ClockConfig+0x240>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 030f 	and.w	r3, r3, #15
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	429a      	cmp	r2, r3
 8008260:	d214      	bcs.n	800828c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008262:	4b08      	ldr	r3, [pc, #32]	; (8008284 <HAL_RCC_ClockConfig+0x240>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f023 020f 	bic.w	r2, r3, #15
 800826a:	4906      	ldr	r1, [pc, #24]	; (8008284 <HAL_RCC_ClockConfig+0x240>)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	4313      	orrs	r3, r2
 8008270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008272:	4b04      	ldr	r3, [pc, #16]	; (8008284 <HAL_RCC_ClockConfig+0x240>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 030f 	and.w	r3, r3, #15
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d005      	beq.n	800828c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e086      	b.n	8008392 <HAL_RCC_ClockConfig+0x34e>
 8008284:	52002000 	.word	0x52002000
 8008288:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b00      	cmp	r3, #0
 8008296:	d010      	beq.n	80082ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	4b3f      	ldr	r3, [pc, #252]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d208      	bcs.n	80082ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082a8:	4b3c      	ldr	r3, [pc, #240]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	4939      	ldr	r1, [pc, #228]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0308 	and.w	r3, r3, #8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d010      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	695a      	ldr	r2, [r3, #20]
 80082ca:	4b34      	ldr	r3, [pc, #208]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d208      	bcs.n	80082e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082d6:	4b31      	ldr	r3, [pc, #196]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	492e      	ldr	r1, [pc, #184]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0310 	and.w	r3, r3, #16
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d010      	beq.n	8008316 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	699a      	ldr	r2, [r3, #24]
 80082f8:	4b28      	ldr	r3, [pc, #160]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008300:	429a      	cmp	r2, r3
 8008302:	d208      	bcs.n	8008316 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008304:	4b25      	ldr	r3, [pc, #148]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	4922      	ldr	r1, [pc, #136]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 8008312:	4313      	orrs	r3, r2
 8008314:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0320 	and.w	r3, r3, #32
 800831e:	2b00      	cmp	r3, #0
 8008320:	d010      	beq.n	8008344 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	69da      	ldr	r2, [r3, #28]
 8008326:	4b1d      	ldr	r3, [pc, #116]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800832e:	429a      	cmp	r2, r3
 8008330:	d208      	bcs.n	8008344 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008332:	4b1a      	ldr	r3, [pc, #104]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	4917      	ldr	r1, [pc, #92]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 8008340:	4313      	orrs	r3, r2
 8008342:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008344:	f000 f834 	bl	80083b0 <HAL_RCC_GetSysClockFreq>
 8008348:	4602      	mov	r2, r0
 800834a:	4b14      	ldr	r3, [pc, #80]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	0a1b      	lsrs	r3, r3, #8
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	4912      	ldr	r1, [pc, #72]	; (80083a0 <HAL_RCC_ClockConfig+0x35c>)
 8008356:	5ccb      	ldrb	r3, [r1, r3]
 8008358:	f003 031f 	and.w	r3, r3, #31
 800835c:	fa22 f303 	lsr.w	r3, r2, r3
 8008360:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008362:	4b0e      	ldr	r3, [pc, #56]	; (800839c <HAL_RCC_ClockConfig+0x358>)
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	f003 030f 	and.w	r3, r3, #15
 800836a:	4a0d      	ldr	r2, [pc, #52]	; (80083a0 <HAL_RCC_ClockConfig+0x35c>)
 800836c:	5cd3      	ldrb	r3, [r2, r3]
 800836e:	f003 031f 	and.w	r3, r3, #31
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	fa22 f303 	lsr.w	r3, r2, r3
 8008378:	4a0a      	ldr	r2, [pc, #40]	; (80083a4 <HAL_RCC_ClockConfig+0x360>)
 800837a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800837c:	4a0a      	ldr	r2, [pc, #40]	; (80083a8 <HAL_RCC_ClockConfig+0x364>)
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008382:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <HAL_RCC_ClockConfig+0x368>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f7f9 fa76 	bl	8001878 <HAL_InitTick>
 800838c:	4603      	mov	r3, r0
 800838e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	58024400 	.word	0x58024400
 80083a0:	080119e0 	.word	0x080119e0
 80083a4:	24000004 	.word	0x24000004
 80083a8:	24000000 	.word	0x24000000
 80083ac:	24000008 	.word	0x24000008

080083b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b089      	sub	sp, #36	; 0x24
 80083b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083b6:	4bb3      	ldr	r3, [pc, #716]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083be:	2b18      	cmp	r3, #24
 80083c0:	f200 8155 	bhi.w	800866e <HAL_RCC_GetSysClockFreq+0x2be>
 80083c4:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80083c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ca:	bf00      	nop
 80083cc:	08008431 	.word	0x08008431
 80083d0:	0800866f 	.word	0x0800866f
 80083d4:	0800866f 	.word	0x0800866f
 80083d8:	0800866f 	.word	0x0800866f
 80083dc:	0800866f 	.word	0x0800866f
 80083e0:	0800866f 	.word	0x0800866f
 80083e4:	0800866f 	.word	0x0800866f
 80083e8:	0800866f 	.word	0x0800866f
 80083ec:	08008457 	.word	0x08008457
 80083f0:	0800866f 	.word	0x0800866f
 80083f4:	0800866f 	.word	0x0800866f
 80083f8:	0800866f 	.word	0x0800866f
 80083fc:	0800866f 	.word	0x0800866f
 8008400:	0800866f 	.word	0x0800866f
 8008404:	0800866f 	.word	0x0800866f
 8008408:	0800866f 	.word	0x0800866f
 800840c:	0800845d 	.word	0x0800845d
 8008410:	0800866f 	.word	0x0800866f
 8008414:	0800866f 	.word	0x0800866f
 8008418:	0800866f 	.word	0x0800866f
 800841c:	0800866f 	.word	0x0800866f
 8008420:	0800866f 	.word	0x0800866f
 8008424:	0800866f 	.word	0x0800866f
 8008428:	0800866f 	.word	0x0800866f
 800842c:	08008463 	.word	0x08008463
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008430:	4b94      	ldr	r3, [pc, #592]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0320 	and.w	r3, r3, #32
 8008438:	2b00      	cmp	r3, #0
 800843a:	d009      	beq.n	8008450 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800843c:	4b91      	ldr	r3, [pc, #580]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	08db      	lsrs	r3, r3, #3
 8008442:	f003 0303 	and.w	r3, r3, #3
 8008446:	4a90      	ldr	r2, [pc, #576]	; (8008688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008448:	fa22 f303 	lsr.w	r3, r2, r3
 800844c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800844e:	e111      	b.n	8008674 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008450:	4b8d      	ldr	r3, [pc, #564]	; (8008688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008452:	61bb      	str	r3, [r7, #24]
      break;
 8008454:	e10e      	b.n	8008674 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008456:	4b8d      	ldr	r3, [pc, #564]	; (800868c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008458:	61bb      	str	r3, [r7, #24]
      break;
 800845a:	e10b      	b.n	8008674 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800845c:	4b8c      	ldr	r3, [pc, #560]	; (8008690 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800845e:	61bb      	str	r3, [r7, #24]
      break;
 8008460:	e108      	b.n	8008674 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008462:	4b88      	ldr	r3, [pc, #544]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800846c:	4b85      	ldr	r3, [pc, #532]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800846e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008470:	091b      	lsrs	r3, r3, #4
 8008472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008476:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008478:	4b82      	ldr	r3, [pc, #520]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008482:	4b80      	ldr	r3, [pc, #512]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008486:	08db      	lsrs	r3, r3, #3
 8008488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	fb02 f303 	mul.w	r3, r2, r3
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 80e1 	beq.w	8008668 <HAL_RCC_GetSysClockFreq+0x2b8>
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	f000 8083 	beq.w	80085b4 <HAL_RCC_GetSysClockFreq+0x204>
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	f200 80a1 	bhi.w	80085f8 <HAL_RCC_GetSysClockFreq+0x248>
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <HAL_RCC_GetSysClockFreq+0x114>
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d056      	beq.n	8008570 <HAL_RCC_GetSysClockFreq+0x1c0>
 80084c2:	e099      	b.n	80085f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084c4:	4b6f      	ldr	r3, [pc, #444]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0320 	and.w	r3, r3, #32
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d02d      	beq.n	800852c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084d0:	4b6c      	ldr	r3, [pc, #432]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	08db      	lsrs	r3, r3, #3
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	4a6b      	ldr	r2, [pc, #428]	; (8008688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80084dc:	fa22 f303 	lsr.w	r3, r2, r3
 80084e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fa:	4b62      	ldr	r3, [pc, #392]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850a:	ed97 6a02 	vldr	s12, [r7, #8]
 800850e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800851e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008526:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800852a:	e087      	b.n	800863c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008536:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008698 <HAL_RCC_GetSysClockFreq+0x2e8>
 800853a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853e:	4b51      	ldr	r3, [pc, #324]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008552:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800856e:	e065      	b.n	800863c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	ee07 3a90 	vmov	s15, r3
 8008576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800869c <HAL_RCC_GetSysClockFreq+0x2ec>
 800857e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008582:	4b40      	ldr	r3, [pc, #256]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008592:	ed97 6a02 	vldr	s12, [r7, #8]
 8008596:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008694 <HAL_RCC_GetSysClockFreq+0x2e4>
 800859a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085b2:	e043      	b.n	800863c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80086a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80085c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c6:	4b2f      	ldr	r3, [pc, #188]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80085da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008694 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085f6:	e021      	b.n	800863c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008602:	eddf 6a26 	vldr	s13, [pc, #152]	; 800869c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860a:	4b1e      	ldr	r3, [pc, #120]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800860c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861a:	ed97 6a02 	vldr	s12, [r7, #8]
 800861e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800862e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800863a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800863c:	4b11      	ldr	r3, [pc, #68]	; (8008684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800863e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008640:	0a5b      	lsrs	r3, r3, #9
 8008642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008646:	3301      	adds	r3, #1
 8008648:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	ee07 3a90 	vmov	s15, r3
 8008650:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008654:	edd7 6a07 	vldr	s13, [r7, #28]
 8008658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800865c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008660:	ee17 3a90 	vmov	r3, s15
 8008664:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008666:	e005      	b.n	8008674 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	61bb      	str	r3, [r7, #24]
      break;
 800866c:	e002      	b.n	8008674 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800866e:	4b07      	ldr	r3, [pc, #28]	; (800868c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008670:	61bb      	str	r3, [r7, #24]
      break;
 8008672:	bf00      	nop
  }

  return sysclockfreq;
 8008674:	69bb      	ldr	r3, [r7, #24]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3724      	adds	r7, #36	; 0x24
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	58024400 	.word	0x58024400
 8008688:	03d09000 	.word	0x03d09000
 800868c:	003d0900 	.word	0x003d0900
 8008690:	017d7840 	.word	0x017d7840
 8008694:	46000000 	.word	0x46000000
 8008698:	4c742400 	.word	0x4c742400
 800869c:	4a742400 	.word	0x4a742400
 80086a0:	4bbebc20 	.word	0x4bbebc20

080086a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80086aa:	f7ff fe81 	bl	80083b0 <HAL_RCC_GetSysClockFreq>
 80086ae:	4602      	mov	r2, r0
 80086b0:	4b10      	ldr	r3, [pc, #64]	; (80086f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	0a1b      	lsrs	r3, r3, #8
 80086b6:	f003 030f 	and.w	r3, r3, #15
 80086ba:	490f      	ldr	r1, [pc, #60]	; (80086f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80086bc:	5ccb      	ldrb	r3, [r1, r3]
 80086be:	f003 031f 	and.w	r3, r3, #31
 80086c2:	fa22 f303 	lsr.w	r3, r2, r3
 80086c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80086c8:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	f003 030f 	and.w	r3, r3, #15
 80086d0:	4a09      	ldr	r2, [pc, #36]	; (80086f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80086d2:	5cd3      	ldrb	r3, [r2, r3]
 80086d4:	f003 031f 	and.w	r3, r3, #31
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	fa22 f303 	lsr.w	r3, r2, r3
 80086de:	4a07      	ldr	r2, [pc, #28]	; (80086fc <HAL_RCC_GetHCLKFreq+0x58>)
 80086e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086e2:	4a07      	ldr	r2, [pc, #28]	; (8008700 <HAL_RCC_GetHCLKFreq+0x5c>)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80086e8:	4b04      	ldr	r3, [pc, #16]	; (80086fc <HAL_RCC_GetHCLKFreq+0x58>)
 80086ea:	681b      	ldr	r3, [r3, #0]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	58024400 	.word	0x58024400
 80086f8:	080119e0 	.word	0x080119e0
 80086fc:	24000004 	.word	0x24000004
 8008700:	24000000 	.word	0x24000000

08008704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008708:	f7ff ffcc 	bl	80086a4 <HAL_RCC_GetHCLKFreq>
 800870c:	4602      	mov	r2, r0
 800870e:	4b06      	ldr	r3, [pc, #24]	; (8008728 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	091b      	lsrs	r3, r3, #4
 8008714:	f003 0307 	and.w	r3, r3, #7
 8008718:	4904      	ldr	r1, [pc, #16]	; (800872c <HAL_RCC_GetPCLK1Freq+0x28>)
 800871a:	5ccb      	ldrb	r3, [r1, r3]
 800871c:	f003 031f 	and.w	r3, r3, #31
 8008720:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008724:	4618      	mov	r0, r3
 8008726:	bd80      	pop	{r7, pc}
 8008728:	58024400 	.word	0x58024400
 800872c:	080119e0 	.word	0x080119e0

08008730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008734:	f7ff ffb6 	bl	80086a4 <HAL_RCC_GetHCLKFreq>
 8008738:	4602      	mov	r2, r0
 800873a:	4b06      	ldr	r3, [pc, #24]	; (8008754 <HAL_RCC_GetPCLK2Freq+0x24>)
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	0a1b      	lsrs	r3, r3, #8
 8008740:	f003 0307 	and.w	r3, r3, #7
 8008744:	4904      	ldr	r1, [pc, #16]	; (8008758 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008746:	5ccb      	ldrb	r3, [r1, r3]
 8008748:	f003 031f 	and.w	r3, r3, #31
 800874c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008750:	4618      	mov	r0, r3
 8008752:	bd80      	pop	{r7, pc}
 8008754:	58024400 	.word	0x58024400
 8008758:	080119e0 	.word	0x080119e0

0800875c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	223f      	movs	r2, #63	; 0x3f
 800876a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800876c:	4b1a      	ldr	r3, [pc, #104]	; (80087d8 <HAL_RCC_GetClockConfig+0x7c>)
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f003 0207 	and.w	r2, r3, #7
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008778:	4b17      	ldr	r3, [pc, #92]	; (80087d8 <HAL_RCC_GetClockConfig+0x7c>)
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008784:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <HAL_RCC_GetClockConfig+0x7c>)
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	f003 020f 	and.w	r2, r3, #15
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008790:	4b11      	ldr	r3, [pc, #68]	; (80087d8 <HAL_RCC_GetClockConfig+0x7c>)
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800879c:	4b0e      	ldr	r3, [pc, #56]	; (80087d8 <HAL_RCC_GetClockConfig+0x7c>)
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80087a8:	4b0b      	ldr	r3, [pc, #44]	; (80087d8 <HAL_RCC_GetClockConfig+0x7c>)
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80087b4:	4b08      	ldr	r3, [pc, #32]	; (80087d8 <HAL_RCC_GetClockConfig+0x7c>)
 80087b6:	6a1b      	ldr	r3, [r3, #32]
 80087b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <HAL_RCC_GetClockConfig+0x80>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 020f 	and.w	r2, r3, #15
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	601a      	str	r2, [r3, #0]
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	58024400 	.word	0x58024400
 80087dc:	52002000 	.word	0x52002000

080087e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087e4:	b0ca      	sub	sp, #296	; 0x128
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80087ec:	2300      	movs	r3, #0
 80087ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80087f2:	2300      	movs	r3, #0
 80087f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80087f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008800:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008804:	2500      	movs	r5, #0
 8008806:	ea54 0305 	orrs.w	r3, r4, r5
 800880a:	d049      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800880c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008812:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008816:	d02f      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008818:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800881c:	d828      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800881e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008822:	d01a      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008828:	d822      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d003      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800882e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008832:	d007      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008834:	e01c      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008836:	4bb8      	ldr	r3, [pc, #736]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883a:	4ab7      	ldr	r2, [pc, #732]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800883c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008840:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008842:	e01a      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008848:	3308      	adds	r3, #8
 800884a:	2102      	movs	r1, #2
 800884c:	4618      	mov	r0, r3
 800884e:	f002 fb61 	bl	800af14 <RCCEx_PLL2_Config>
 8008852:	4603      	mov	r3, r0
 8008854:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008858:	e00f      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800885a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800885e:	3328      	adds	r3, #40	; 0x28
 8008860:	2102      	movs	r1, #2
 8008862:	4618      	mov	r0, r3
 8008864:	f002 fc08 	bl	800b078 <RCCEx_PLL3_Config>
 8008868:	4603      	mov	r3, r0
 800886a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800886e:	e004      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008876:	e000      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800887a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008882:	4ba5      	ldr	r3, [pc, #660]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008886:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800888a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800888e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008890:	4aa1      	ldr	r2, [pc, #644]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008892:	430b      	orrs	r3, r1
 8008894:	6513      	str	r3, [r2, #80]	; 0x50
 8008896:	e003      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800889c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80088a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80088ac:	f04f 0900 	mov.w	r9, #0
 80088b0:	ea58 0309 	orrs.w	r3, r8, r9
 80088b4:	d047      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80088b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088bc:	2b04      	cmp	r3, #4
 80088be:	d82a      	bhi.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80088c0:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80088c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c6:	bf00      	nop
 80088c8:	080088dd 	.word	0x080088dd
 80088cc:	080088eb 	.word	0x080088eb
 80088d0:	08008901 	.word	0x08008901
 80088d4:	0800891f 	.word	0x0800891f
 80088d8:	0800891f 	.word	0x0800891f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088dc:	4b8e      	ldr	r3, [pc, #568]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	4a8d      	ldr	r2, [pc, #564]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088e8:	e01a      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ee:	3308      	adds	r3, #8
 80088f0:	2100      	movs	r1, #0
 80088f2:	4618      	mov	r0, r3
 80088f4:	f002 fb0e 	bl	800af14 <RCCEx_PLL2_Config>
 80088f8:	4603      	mov	r3, r0
 80088fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088fe:	e00f      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008904:	3328      	adds	r3, #40	; 0x28
 8008906:	2100      	movs	r1, #0
 8008908:	4618      	mov	r0, r3
 800890a:	f002 fbb5 	bl	800b078 <RCCEx_PLL3_Config>
 800890e:	4603      	mov	r3, r0
 8008910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008914:	e004      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800891c:	e000      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800891e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008920:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10a      	bne.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008928:	4b7b      	ldr	r3, [pc, #492]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800892a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800892c:	f023 0107 	bic.w	r1, r3, #7
 8008930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008936:	4a78      	ldr	r2, [pc, #480]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008938:	430b      	orrs	r3, r1
 800893a:	6513      	str	r3, [r2, #80]	; 0x50
 800893c:	e003      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800893e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008942:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008952:	f04f 0b00 	mov.w	fp, #0
 8008956:	ea5a 030b 	orrs.w	r3, sl, fp
 800895a:	d04c      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800895c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008966:	d030      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800896c:	d829      	bhi.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800896e:	2bc0      	cmp	r3, #192	; 0xc0
 8008970:	d02d      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008972:	2bc0      	cmp	r3, #192	; 0xc0
 8008974:	d825      	bhi.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008976:	2b80      	cmp	r3, #128	; 0x80
 8008978:	d018      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800897a:	2b80      	cmp	r3, #128	; 0x80
 800897c:	d821      	bhi.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008982:	2b40      	cmp	r3, #64	; 0x40
 8008984:	d007      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008986:	e01c      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008988:	4b63      	ldr	r3, [pc, #396]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	4a62      	ldr	r2, [pc, #392]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800898e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008994:	e01c      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800899a:	3308      	adds	r3, #8
 800899c:	2100      	movs	r1, #0
 800899e:	4618      	mov	r0, r3
 80089a0:	f002 fab8 	bl	800af14 <RCCEx_PLL2_Config>
 80089a4:	4603      	mov	r3, r0
 80089a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80089aa:	e011      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b0:	3328      	adds	r3, #40	; 0x28
 80089b2:	2100      	movs	r1, #0
 80089b4:	4618      	mov	r0, r3
 80089b6:	f002 fb5f 	bl	800b078 <RCCEx_PLL3_Config>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80089c0:	e006      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089c8:	e002      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80089ca:	bf00      	nop
 80089cc:	e000      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80089ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10a      	bne.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80089d8:	4b4f      	ldr	r3, [pc, #316]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089dc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80089e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e6:	4a4c      	ldr	r2, [pc, #304]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089e8:	430b      	orrs	r3, r1
 80089ea:	6513      	str	r3, [r2, #80]	; 0x50
 80089ec:	e003      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008a02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008a06:	2300      	movs	r3, #0
 8008a08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008a0c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008a10:	460b      	mov	r3, r1
 8008a12:	4313      	orrs	r3, r2
 8008a14:	d053      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a22:	d035      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008a24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a28:	d82e      	bhi.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a2e:	d031      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008a30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a34:	d828      	bhi.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a3a:	d01a      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a40:	d822      	bhi.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a4a:	d007      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008a4c:	e01c      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a4e:	4b32      	ldr	r3, [pc, #200]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a52:	4a31      	ldr	r2, [pc, #196]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a5a:	e01c      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a60:	3308      	adds	r3, #8
 8008a62:	2100      	movs	r1, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f002 fa55 	bl	800af14 <RCCEx_PLL2_Config>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a70:	e011      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a76:	3328      	adds	r3, #40	; 0x28
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f002 fafc 	bl	800b078 <RCCEx_PLL3_Config>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a86:	e006      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a8e:	e002      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008a90:	bf00      	nop
 8008a92:	e000      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10b      	bne.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008a9e:	4b1e      	ldr	r3, [pc, #120]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008aae:	4a1a      	ldr	r2, [pc, #104]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ab0:	430b      	orrs	r3, r1
 8008ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8008ab4:	e003      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008aca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008ad4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4313      	orrs	r3, r2
 8008adc:	d056      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ae6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008aea:	d038      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008aec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008af0:	d831      	bhi.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008af2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008af6:	d034      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008af8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008afc:	d82b      	bhi.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008afe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b02:	d01d      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b08:	d825      	bhi.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d006      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008b0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b12:	d00a      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008b14:	e01f      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b16:	bf00      	nop
 8008b18:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b1c:	4ba2      	ldr	r3, [pc, #648]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b20:	4aa1      	ldr	r2, [pc, #644]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b28:	e01c      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b2e:	3308      	adds	r3, #8
 8008b30:	2100      	movs	r1, #0
 8008b32:	4618      	mov	r0, r3
 8008b34:	f002 f9ee 	bl	800af14 <RCCEx_PLL2_Config>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008b3e:	e011      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b44:	3328      	adds	r3, #40	; 0x28
 8008b46:	2100      	movs	r1, #0
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f002 fa95 	bl	800b078 <RCCEx_PLL3_Config>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b54:	e006      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b5c:	e002      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008b5e:	bf00      	nop
 8008b60:	e000      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10b      	bne.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008b6c:	4b8e      	ldr	r3, [pc, #568]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b70:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b7c:	4a8a      	ldr	r2, [pc, #552]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	6593      	str	r3, [r2, #88]	; 0x58
 8008b82:	e003      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008b98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ba2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	d03a      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb2:	2b30      	cmp	r3, #48	; 0x30
 8008bb4:	d01f      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008bb6:	2b30      	cmp	r3, #48	; 0x30
 8008bb8:	d819      	bhi.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	d00c      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008bbe:	2b20      	cmp	r3, #32
 8008bc0:	d815      	bhi.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d019      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008bc6:	2b10      	cmp	r3, #16
 8008bc8:	d111      	bne.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bca:	4b77      	ldr	r3, [pc, #476]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bce:	4a76      	ldr	r2, [pc, #472]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008bd6:	e011      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bdc:	3308      	adds	r3, #8
 8008bde:	2102      	movs	r1, #2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f002 f997 	bl	800af14 <RCCEx_PLL2_Config>
 8008be6:	4603      	mov	r3, r0
 8008be8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008bec:	e006      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bf4:	e002      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008bf6:	bf00      	nop
 8008bf8:	e000      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10a      	bne.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008c04:	4b68      	ldr	r3, [pc, #416]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c08:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c12:	4a65      	ldr	r2, [pc, #404]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c14:	430b      	orrs	r3, r1
 8008c16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c18:	e003      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008c2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c32:	2300      	movs	r3, #0
 8008c34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008c38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	d051      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c4c:	d035      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c52:	d82e      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008c54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c58:	d031      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008c5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c5e:	d828      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c64:	d01a      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c6a:	d822      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d003      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c74:	d007      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008c76:	e01c      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c78:	4b4b      	ldr	r3, [pc, #300]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7c:	4a4a      	ldr	r2, [pc, #296]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c84:	e01c      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f002 f940 	bl	800af14 <RCCEx_PLL2_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c9a:	e011      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca0:	3328      	adds	r3, #40	; 0x28
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f002 f9e7 	bl	800b078 <RCCEx_PLL3_Config>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008cb0:	e006      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cb8:	e002      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008cba:	bf00      	nop
 8008cbc:	e000      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10a      	bne.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008cc8:	4b37      	ldr	r3, [pc, #220]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ccc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cd6:	4a34      	ldr	r2, [pc, #208]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cd8:	430b      	orrs	r3, r1
 8008cda:	6513      	str	r3, [r2, #80]	; 0x50
 8008cdc:	e003      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ce2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008cfc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008d00:	460b      	mov	r3, r1
 8008d02:	4313      	orrs	r3, r2
 8008d04:	d056      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d10:	d033      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008d12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d16:	d82c      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d1c:	d02f      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008d1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d22:	d826      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d28:	d02b      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008d2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d2e:	d820      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d34:	d012      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d3a:	d81a      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d022      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d44:	d115      	bne.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	2101      	movs	r1, #1
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f002 f8e0 	bl	800af14 <RCCEx_PLL2_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008d5a:	e015      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d60:	3328      	adds	r3, #40	; 0x28
 8008d62:	2101      	movs	r1, #1
 8008d64:	4618      	mov	r0, r3
 8008d66:	f002 f987 	bl	800b078 <RCCEx_PLL3_Config>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008d70:	e00a      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d78:	e006      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d7a:	bf00      	nop
 8008d7c:	e004      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d7e:	bf00      	nop
 8008d80:	e002      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d82:	bf00      	nop
 8008d84:	e000      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10d      	bne.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008d90:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d94:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d9e:	4a02      	ldr	r2, [pc, #8]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008da0:	430b      	orrs	r3, r1
 8008da2:	6513      	str	r3, [r2, #80]	; 0x50
 8008da4:	e006      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008da6:	bf00      	nop
 8008da8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008db0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008dca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	d055      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008de0:	d033      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008de6:	d82c      	bhi.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dec:	d02f      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df2:	d826      	bhi.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008df4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008df8:	d02b      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008dfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008dfe:	d820      	bhi.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e04:	d012      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e0a:	d81a      	bhi.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d022      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e14:	d115      	bne.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f002 f878 	bl	800af14 <RCCEx_PLL2_Config>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e2a:	e015      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e30:	3328      	adds	r3, #40	; 0x28
 8008e32:	2101      	movs	r1, #1
 8008e34:	4618      	mov	r0, r3
 8008e36:	f002 f91f 	bl	800b078 <RCCEx_PLL3_Config>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e40:	e00a      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e48:	e006      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e4a:	bf00      	nop
 8008e4c:	e004      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e4e:	bf00      	nop
 8008e50:	e002      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e52:	bf00      	nop
 8008e54:	e000      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10b      	bne.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008e60:	4ba3      	ldr	r3, [pc, #652]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e64:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e70:	4a9f      	ldr	r2, [pc, #636]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e72:	430b      	orrs	r3, r1
 8008e74:	6593      	str	r3, [r2, #88]	; 0x58
 8008e76:	e003      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e90:	2300      	movs	r3, #0
 8008e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	d037      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eaa:	d00e      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eb0:	d816      	bhi.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d018      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eba:	d111      	bne.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ebc:	4b8c      	ldr	r3, [pc, #560]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	4a8b      	ldr	r2, [pc, #556]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008ec8:	e00f      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ece:	3308      	adds	r3, #8
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f002 f81e 	bl	800af14 <RCCEx_PLL2_Config>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008ede:	e004      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ee6:	e000      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10a      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008ef2:	4b7f      	ldr	r3, [pc, #508]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f00:	4a7b      	ldr	r2, [pc, #492]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f02:	430b      	orrs	r3, r1
 8008f04:	6513      	str	r3, [r2, #80]	; 0x50
 8008f06:	e003      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f20:	2300      	movs	r3, #0
 8008f22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008f26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	d039      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d81c      	bhi.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008f3a:	a201      	add	r2, pc, #4	; (adr r2, 8008f40 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f40:	08008f7d 	.word	0x08008f7d
 8008f44:	08008f51 	.word	0x08008f51
 8008f48:	08008f5f 	.word	0x08008f5f
 8008f4c:	08008f7d 	.word	0x08008f7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f50:	4b67      	ldr	r3, [pc, #412]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	4a66      	ldr	r2, [pc, #408]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008f5c:	e00f      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f62:	3308      	adds	r3, #8
 8008f64:	2102      	movs	r1, #2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f001 ffd4 	bl	800af14 <RCCEx_PLL2_Config>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008f72:	e004      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f7a:	e000      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10a      	bne.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008f86:	4b5a      	ldr	r3, [pc, #360]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f8a:	f023 0103 	bic.w	r1, r3, #3
 8008f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f94:	4a56      	ldr	r2, [pc, #344]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f96:	430b      	orrs	r3, r1
 8008f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f9a:	e003      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008fb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	f000 809f 	beq.w	8009104 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fc6:	4b4b      	ldr	r3, [pc, #300]	; (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a4a      	ldr	r2, [pc, #296]	; (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fd2:	f7f9 fb55 	bl	8002680 <HAL_GetTick>
 8008fd6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fda:	e00b      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fdc:	f7f9 fb50 	bl	8002680 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	2b64      	cmp	r3, #100	; 0x64
 8008fea:	d903      	bls.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ff2:	e005      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ff4:	4b3f      	ldr	r3, [pc, #252]	; (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d0ed      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009004:	2b00      	cmp	r3, #0
 8009006:	d179      	bne.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009008:	4b39      	ldr	r3, [pc, #228]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800900a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800900c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009010:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009014:	4053      	eors	r3, r2
 8009016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800901a:	2b00      	cmp	r3, #0
 800901c:	d015      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800901e:	4b34      	ldr	r3, [pc, #208]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009026:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800902a:	4b31      	ldr	r3, [pc, #196]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800902c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800902e:	4a30      	ldr	r2, [pc, #192]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009034:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009036:	4b2e      	ldr	r3, [pc, #184]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800903a:	4a2d      	ldr	r2, [pc, #180]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800903c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009040:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009042:	4a2b      	ldr	r2, [pc, #172]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009044:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009048:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800904a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009056:	d118      	bne.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009058:	f7f9 fb12 	bl	8002680 <HAL_GetTick>
 800905c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009060:	e00d      	b.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009062:	f7f9 fb0d 	bl	8002680 <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800906c:	1ad2      	subs	r2, r2, r3
 800906e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009072:	429a      	cmp	r2, r3
 8009074:	d903      	bls.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800907c:	e005      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800907e:	4b1c      	ldr	r3, [pc, #112]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0eb      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800908a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800908e:	2b00      	cmp	r3, #0
 8009090:	d129      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009096:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800909a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800909e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090a2:	d10e      	bne.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80090a4:	4b12      	ldr	r3, [pc, #72]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80090ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80090b4:	091a      	lsrs	r2, r3, #4
 80090b6:	4b10      	ldr	r3, [pc, #64]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80090b8:	4013      	ands	r3, r2
 80090ba:	4a0d      	ldr	r2, [pc, #52]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090bc:	430b      	orrs	r3, r1
 80090be:	6113      	str	r3, [r2, #16]
 80090c0:	e005      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80090c2:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	4a0a      	ldr	r2, [pc, #40]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80090cc:	6113      	str	r3, [r2, #16]
 80090ce:	4b08      	ldr	r3, [pc, #32]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80090d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80090da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090de:	4a04      	ldr	r2, [pc, #16]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090e0:	430b      	orrs	r3, r1
 80090e2:	6713      	str	r3, [r2, #112]	; 0x70
 80090e4:	e00e      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80090ee:	e009      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80090f0:	58024400 	.word	0x58024400
 80090f4:	58024800 	.word	0x58024800
 80090f8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009100:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f002 0301 	and.w	r3, r2, #1
 8009110:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009114:	2300      	movs	r3, #0
 8009116:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800911a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800911e:	460b      	mov	r3, r1
 8009120:	4313      	orrs	r3, r2
 8009122:	f000 8089 	beq.w	8009238 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800912a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800912c:	2b28      	cmp	r3, #40	; 0x28
 800912e:	d86b      	bhi.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009130:	a201      	add	r2, pc, #4	; (adr r2, 8009138 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009136:	bf00      	nop
 8009138:	08009211 	.word	0x08009211
 800913c:	08009209 	.word	0x08009209
 8009140:	08009209 	.word	0x08009209
 8009144:	08009209 	.word	0x08009209
 8009148:	08009209 	.word	0x08009209
 800914c:	08009209 	.word	0x08009209
 8009150:	08009209 	.word	0x08009209
 8009154:	08009209 	.word	0x08009209
 8009158:	080091dd 	.word	0x080091dd
 800915c:	08009209 	.word	0x08009209
 8009160:	08009209 	.word	0x08009209
 8009164:	08009209 	.word	0x08009209
 8009168:	08009209 	.word	0x08009209
 800916c:	08009209 	.word	0x08009209
 8009170:	08009209 	.word	0x08009209
 8009174:	08009209 	.word	0x08009209
 8009178:	080091f3 	.word	0x080091f3
 800917c:	08009209 	.word	0x08009209
 8009180:	08009209 	.word	0x08009209
 8009184:	08009209 	.word	0x08009209
 8009188:	08009209 	.word	0x08009209
 800918c:	08009209 	.word	0x08009209
 8009190:	08009209 	.word	0x08009209
 8009194:	08009209 	.word	0x08009209
 8009198:	08009211 	.word	0x08009211
 800919c:	08009209 	.word	0x08009209
 80091a0:	08009209 	.word	0x08009209
 80091a4:	08009209 	.word	0x08009209
 80091a8:	08009209 	.word	0x08009209
 80091ac:	08009209 	.word	0x08009209
 80091b0:	08009209 	.word	0x08009209
 80091b4:	08009209 	.word	0x08009209
 80091b8:	08009211 	.word	0x08009211
 80091bc:	08009209 	.word	0x08009209
 80091c0:	08009209 	.word	0x08009209
 80091c4:	08009209 	.word	0x08009209
 80091c8:	08009209 	.word	0x08009209
 80091cc:	08009209 	.word	0x08009209
 80091d0:	08009209 	.word	0x08009209
 80091d4:	08009209 	.word	0x08009209
 80091d8:	08009211 	.word	0x08009211
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e0:	3308      	adds	r3, #8
 80091e2:	2101      	movs	r1, #1
 80091e4:	4618      	mov	r0, r3
 80091e6:	f001 fe95 	bl	800af14 <RCCEx_PLL2_Config>
 80091ea:	4603      	mov	r3, r0
 80091ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80091f0:	e00f      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f6:	3328      	adds	r3, #40	; 0x28
 80091f8:	2101      	movs	r1, #1
 80091fa:	4618      	mov	r0, r3
 80091fc:	f001 ff3c 	bl	800b078 <RCCEx_PLL3_Config>
 8009200:	4603      	mov	r3, r0
 8009202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009206:	e004      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800920e:	e000      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10a      	bne.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800921a:	4bbf      	ldr	r3, [pc, #764]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800921c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009228:	4abb      	ldr	r2, [pc, #748]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800922a:	430b      	orrs	r3, r1
 800922c:	6553      	str	r3, [r2, #84]	; 0x54
 800922e:	e003      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009230:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009234:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	f002 0302 	and.w	r3, r2, #2
 8009244:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009248:	2300      	movs	r3, #0
 800924a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800924e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009252:	460b      	mov	r3, r1
 8009254:	4313      	orrs	r3, r2
 8009256:	d041      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800925c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800925e:	2b05      	cmp	r3, #5
 8009260:	d824      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009262:	a201      	add	r2, pc, #4	; (adr r2, 8009268 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009268:	080092b5 	.word	0x080092b5
 800926c:	08009281 	.word	0x08009281
 8009270:	08009297 	.word	0x08009297
 8009274:	080092b5 	.word	0x080092b5
 8009278:	080092b5 	.word	0x080092b5
 800927c:	080092b5 	.word	0x080092b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009284:	3308      	adds	r3, #8
 8009286:	2101      	movs	r1, #1
 8009288:	4618      	mov	r0, r3
 800928a:	f001 fe43 	bl	800af14 <RCCEx_PLL2_Config>
 800928e:	4603      	mov	r3, r0
 8009290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009294:	e00f      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800929a:	3328      	adds	r3, #40	; 0x28
 800929c:	2101      	movs	r1, #1
 800929e:	4618      	mov	r0, r3
 80092a0:	f001 feea 	bl	800b078 <RCCEx_PLL3_Config>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80092aa:	e004      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092b2:	e000      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80092b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092be:	4b96      	ldr	r3, [pc, #600]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c2:	f023 0107 	bic.w	r1, r3, #7
 80092c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092cc:	4a92      	ldr	r2, [pc, #584]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092ce:	430b      	orrs	r3, r1
 80092d0:	6553      	str	r3, [r2, #84]	; 0x54
 80092d2:	e003      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f002 0304 	and.w	r3, r2, #4
 80092e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092ec:	2300      	movs	r3, #0
 80092ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4313      	orrs	r3, r2
 80092fa:	d044      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80092fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009304:	2b05      	cmp	r3, #5
 8009306:	d825      	bhi.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009308:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	0800935d 	.word	0x0800935d
 8009314:	08009329 	.word	0x08009329
 8009318:	0800933f 	.word	0x0800933f
 800931c:	0800935d 	.word	0x0800935d
 8009320:	0800935d 	.word	0x0800935d
 8009324:	0800935d 	.word	0x0800935d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800932c:	3308      	adds	r3, #8
 800932e:	2101      	movs	r1, #1
 8009330:	4618      	mov	r0, r3
 8009332:	f001 fdef 	bl	800af14 <RCCEx_PLL2_Config>
 8009336:	4603      	mov	r3, r0
 8009338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800933c:	e00f      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800933e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009342:	3328      	adds	r3, #40	; 0x28
 8009344:	2101      	movs	r1, #1
 8009346:	4618      	mov	r0, r3
 8009348:	f001 fe96 	bl	800b078 <RCCEx_PLL3_Config>
 800934c:	4603      	mov	r3, r0
 800934e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009352:	e004      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800935a:	e000      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800935c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800935e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10b      	bne.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009366:	4b6c      	ldr	r3, [pc, #432]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800936a:	f023 0107 	bic.w	r1, r3, #7
 800936e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009376:	4a68      	ldr	r2, [pc, #416]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009378:	430b      	orrs	r3, r1
 800937a:	6593      	str	r3, [r2, #88]	; 0x58
 800937c:	e003      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009382:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	f002 0320 	and.w	r3, r2, #32
 8009392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009396:	2300      	movs	r3, #0
 8009398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800939c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80093a0:	460b      	mov	r3, r1
 80093a2:	4313      	orrs	r3, r2
 80093a4:	d055      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80093a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093b2:	d033      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80093b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093b8:	d82c      	bhi.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80093ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093be:	d02f      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80093c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c4:	d826      	bhi.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80093c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093ca:	d02b      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80093cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093d0:	d820      	bhi.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80093d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093d6:	d012      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80093d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093dc:	d81a      	bhi.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d022      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80093e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093e6:	d115      	bne.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ec:	3308      	adds	r3, #8
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f001 fd8f 	bl	800af14 <RCCEx_PLL2_Config>
 80093f6:	4603      	mov	r3, r0
 80093f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80093fc:	e015      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009402:	3328      	adds	r3, #40	; 0x28
 8009404:	2102      	movs	r1, #2
 8009406:	4618      	mov	r0, r3
 8009408:	f001 fe36 	bl	800b078 <RCCEx_PLL3_Config>
 800940c:	4603      	mov	r3, r0
 800940e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009412:	e00a      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800941a:	e006      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800941c:	bf00      	nop
 800941e:	e004      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009420:	bf00      	nop
 8009422:	e002      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009424:	bf00      	nop
 8009426:	e000      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800942a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10b      	bne.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009432:	4b39      	ldr	r3, [pc, #228]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009436:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800943a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800943e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009442:	4a35      	ldr	r2, [pc, #212]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009444:	430b      	orrs	r3, r1
 8009446:	6553      	str	r3, [r2, #84]	; 0x54
 8009448:	e003      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800944e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800945e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009462:	2300      	movs	r3, #0
 8009464:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009468:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800946c:	460b      	mov	r3, r1
 800946e:	4313      	orrs	r3, r2
 8009470:	d058      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009476:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800947a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800947e:	d033      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009480:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009484:	d82c      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800948a:	d02f      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800948c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009490:	d826      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009492:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009496:	d02b      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800949c:	d820      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800949e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094a2:	d012      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80094a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094a8:	d81a      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d022      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80094ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094b2:	d115      	bne.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b8:	3308      	adds	r3, #8
 80094ba:	2100      	movs	r1, #0
 80094bc:	4618      	mov	r0, r3
 80094be:	f001 fd29 	bl	800af14 <RCCEx_PLL2_Config>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80094c8:	e015      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ce:	3328      	adds	r3, #40	; 0x28
 80094d0:	2102      	movs	r1, #2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 fdd0 	bl	800b078 <RCCEx_PLL3_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80094de:	e00a      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094e6:	e006      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80094e8:	bf00      	nop
 80094ea:	e004      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80094ec:	bf00      	nop
 80094ee:	e002      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80094f0:	bf00      	nop
 80094f2:	e000      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80094f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10e      	bne.n	800951c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80094fe:	4b06      	ldr	r3, [pc, #24]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009502:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800950a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800950e:	4a02      	ldr	r2, [pc, #8]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009510:	430b      	orrs	r3, r1
 8009512:	6593      	str	r3, [r2, #88]	; 0x58
 8009514:	e006      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009516:	bf00      	nop
 8009518:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800951c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009520:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009534:	2300      	movs	r3, #0
 8009536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800953a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800953e:	460b      	mov	r3, r1
 8009540:	4313      	orrs	r3, r2
 8009542:	d055      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009548:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800954c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009550:	d033      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009552:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009556:	d82c      	bhi.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800955c:	d02f      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800955e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009562:	d826      	bhi.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009564:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009568:	d02b      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800956a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800956e:	d820      	bhi.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009574:	d012      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800957a:	d81a      	bhi.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800957c:	2b00      	cmp	r3, #0
 800957e:	d022      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009584:	d115      	bne.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958a:	3308      	adds	r3, #8
 800958c:	2100      	movs	r1, #0
 800958e:	4618      	mov	r0, r3
 8009590:	f001 fcc0 	bl	800af14 <RCCEx_PLL2_Config>
 8009594:	4603      	mov	r3, r0
 8009596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800959a:	e015      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800959c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a0:	3328      	adds	r3, #40	; 0x28
 80095a2:	2102      	movs	r1, #2
 80095a4:	4618      	mov	r0, r3
 80095a6:	f001 fd67 	bl	800b078 <RCCEx_PLL3_Config>
 80095aa:	4603      	mov	r3, r0
 80095ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80095b0:	e00a      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095b8:	e006      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80095ba:	bf00      	nop
 80095bc:	e004      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80095be:	bf00      	nop
 80095c0:	e002      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80095c2:	bf00      	nop
 80095c4:	e000      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80095c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10b      	bne.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80095d0:	4ba1      	ldr	r3, [pc, #644]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80095d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095e0:	4a9d      	ldr	r2, [pc, #628]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095e2:	430b      	orrs	r3, r1
 80095e4:	6593      	str	r3, [r2, #88]	; 0x58
 80095e6:	e003      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80095f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f8:	f002 0308 	and.w	r3, r2, #8
 80095fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009600:	2300      	movs	r3, #0
 8009602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009606:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800960a:	460b      	mov	r3, r1
 800960c:	4313      	orrs	r3, r2
 800960e:	d01e      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961c:	d10c      	bne.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800961e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009622:	3328      	adds	r3, #40	; 0x28
 8009624:	2102      	movs	r1, #2
 8009626:	4618      	mov	r0, r3
 8009628:	f001 fd26 	bl	800b078 <RCCEx_PLL3_Config>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009638:	4b87      	ldr	r3, [pc, #540]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800963a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009648:	4a83      	ldr	r2, [pc, #524]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800964a:	430b      	orrs	r3, r1
 800964c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800964e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	f002 0310 	and.w	r3, r2, #16
 800965a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800965e:	2300      	movs	r3, #0
 8009660:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009664:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009668:	460b      	mov	r3, r1
 800966a:	4313      	orrs	r3, r2
 800966c:	d01e      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800966e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800967a:	d10c      	bne.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800967c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009680:	3328      	adds	r3, #40	; 0x28
 8009682:	2102      	movs	r1, #2
 8009684:	4618      	mov	r0, r3
 8009686:	f001 fcf7 	bl	800b078 <RCCEx_PLL3_Config>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009696:	4b70      	ldr	r3, [pc, #448]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800969a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800969e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096a6:	4a6c      	ldr	r2, [pc, #432]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096a8:	430b      	orrs	r3, r1
 80096aa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80096b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096bc:	2300      	movs	r3, #0
 80096be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80096c6:	460b      	mov	r3, r1
 80096c8:	4313      	orrs	r3, r2
 80096ca:	d03e      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80096cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80096d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096d8:	d022      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80096da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096de:	d81b      	bhi.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d003      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80096e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096e8:	d00b      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80096ea:	e015      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f0:	3308      	adds	r3, #8
 80096f2:	2100      	movs	r1, #0
 80096f4:	4618      	mov	r0, r3
 80096f6:	f001 fc0d 	bl	800af14 <RCCEx_PLL2_Config>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009700:	e00f      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009706:	3328      	adds	r3, #40	; 0x28
 8009708:	2102      	movs	r1, #2
 800970a:	4618      	mov	r0, r3
 800970c:	f001 fcb4 	bl	800b078 <RCCEx_PLL3_Config>
 8009710:	4603      	mov	r3, r0
 8009712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009716:	e004      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800971e:	e000      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10b      	bne.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800972a:	4b4b      	ldr	r3, [pc, #300]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800972c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800972e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009736:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800973a:	4a47      	ldr	r2, [pc, #284]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800973c:	430b      	orrs	r3, r1
 800973e:	6593      	str	r3, [r2, #88]	; 0x58
 8009740:	e003      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009746:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800974a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009756:	67bb      	str	r3, [r7, #120]	; 0x78
 8009758:	2300      	movs	r3, #0
 800975a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800975c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009760:	460b      	mov	r3, r1
 8009762:	4313      	orrs	r3, r2
 8009764:	d03b      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800976a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800976e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009772:	d01f      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009774:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009778:	d818      	bhi.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800977a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800977e:	d003      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009780:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009784:	d007      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009786:	e011      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009788:	4b33      	ldr	r3, [pc, #204]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	4a32      	ldr	r2, [pc, #200]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800978e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009794:	e00f      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800979a:	3328      	adds	r3, #40	; 0x28
 800979c:	2101      	movs	r1, #1
 800979e:	4618      	mov	r0, r3
 80097a0:	f001 fc6a 	bl	800b078 <RCCEx_PLL3_Config>
 80097a4:	4603      	mov	r3, r0
 80097a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80097aa:	e004      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097b2:	e000      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80097b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10b      	bne.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097be:	4b26      	ldr	r3, [pc, #152]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80097c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ce:	4a22      	ldr	r2, [pc, #136]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097d0:	430b      	orrs	r3, r1
 80097d2:	6553      	str	r3, [r2, #84]	; 0x54
 80097d4:	e003      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80097de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80097ea:	673b      	str	r3, [r7, #112]	; 0x70
 80097ec:	2300      	movs	r3, #0
 80097ee:	677b      	str	r3, [r7, #116]	; 0x74
 80097f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80097f4:	460b      	mov	r3, r1
 80097f6:	4313      	orrs	r3, r2
 80097f8:	d034      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80097fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009800:	2b00      	cmp	r3, #0
 8009802:	d003      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009808:	d007      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800980a:	e011      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800980c:	4b12      	ldr	r3, [pc, #72]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009810:	4a11      	ldr	r2, [pc, #68]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009816:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009818:	e00e      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800981a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800981e:	3308      	adds	r3, #8
 8009820:	2102      	movs	r1, #2
 8009822:	4618      	mov	r0, r3
 8009824:	f001 fb76 	bl	800af14 <RCCEx_PLL2_Config>
 8009828:	4603      	mov	r3, r0
 800982a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800982e:	e003      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009838:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10d      	bne.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009840:	4b05      	ldr	r3, [pc, #20]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009844:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984e:	4a02      	ldr	r2, [pc, #8]	; (8009858 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009850:	430b      	orrs	r3, r1
 8009852:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009854:	e006      	b.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009856:	bf00      	nop
 8009858:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009860:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009870:	66bb      	str	r3, [r7, #104]	; 0x68
 8009872:	2300      	movs	r3, #0
 8009874:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009876:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800987a:	460b      	mov	r3, r1
 800987c:	4313      	orrs	r3, r2
 800987e:	d00c      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009884:	3328      	adds	r3, #40	; 0x28
 8009886:	2102      	movs	r1, #2
 8009888:	4618      	mov	r0, r3
 800988a:	f001 fbf5 	bl	800b078 <RCCEx_PLL3_Config>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800989a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80098a6:	663b      	str	r3, [r7, #96]	; 0x60
 80098a8:	2300      	movs	r3, #0
 80098aa:	667b      	str	r3, [r7, #100]	; 0x64
 80098ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80098b0:	460b      	mov	r3, r1
 80098b2:	4313      	orrs	r3, r2
 80098b4:	d038      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80098b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098c2:	d018      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80098c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098c8:	d811      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80098ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098ce:	d014      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80098d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098d4:	d80b      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d011      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80098da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098de:	d106      	bne.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e0:	4bc3      	ldr	r3, [pc, #780]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e4:	4ac2      	ldr	r2, [pc, #776]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80098ec:	e008      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098f4:	e004      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80098f6:	bf00      	nop
 80098f8:	e002      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80098fa:	bf00      	nop
 80098fc:	e000      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80098fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10b      	bne.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009908:	4bb9      	ldr	r3, [pc, #740]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800990a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800990c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009918:	4ab5      	ldr	r2, [pc, #724]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800991a:	430b      	orrs	r3, r1
 800991c:	6553      	str	r3, [r2, #84]	; 0x54
 800991e:	e003      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009920:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009924:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009934:	65bb      	str	r3, [r7, #88]	; 0x58
 8009936:	2300      	movs	r3, #0
 8009938:	65fb      	str	r3, [r7, #92]	; 0x5c
 800993a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800993e:	460b      	mov	r3, r1
 8009940:	4313      	orrs	r3, r2
 8009942:	d009      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009944:	4baa      	ldr	r3, [pc, #680]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009948:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800994c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009952:	4aa7      	ldr	r2, [pc, #668]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009954:	430b      	orrs	r3, r1
 8009956:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009964:	653b      	str	r3, [r7, #80]	; 0x50
 8009966:	2300      	movs	r3, #0
 8009968:	657b      	str	r3, [r7, #84]	; 0x54
 800996a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800996e:	460b      	mov	r3, r1
 8009970:	4313      	orrs	r3, r2
 8009972:	d00a      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009974:	4b9e      	ldr	r3, [pc, #632]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800997c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009980:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009984:	4a9a      	ldr	r2, [pc, #616]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009986:	430b      	orrs	r3, r1
 8009988:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009996:	64bb      	str	r3, [r7, #72]	; 0x48
 8009998:	2300      	movs	r3, #0
 800999a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800999c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80099a0:	460b      	mov	r3, r1
 80099a2:	4313      	orrs	r3, r2
 80099a4:	d009      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80099a6:	4b92      	ldr	r3, [pc, #584]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099aa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80099ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099b4:	4a8e      	ldr	r2, [pc, #568]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099b6:	430b      	orrs	r3, r1
 80099b8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80099ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80099c6:	643b      	str	r3, [r7, #64]	; 0x40
 80099c8:	2300      	movs	r3, #0
 80099ca:	647b      	str	r3, [r7, #68]	; 0x44
 80099cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80099d0:	460b      	mov	r3, r1
 80099d2:	4313      	orrs	r3, r2
 80099d4:	d00e      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099d6:	4b86      	ldr	r3, [pc, #536]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	4a85      	ldr	r2, [pc, #532]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099e0:	6113      	str	r3, [r2, #16]
 80099e2:	4b83      	ldr	r3, [pc, #524]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099e4:	6919      	ldr	r1, [r3, #16]
 80099e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80099ee:	4a80      	ldr	r2, [pc, #512]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099f0:	430b      	orrs	r3, r1
 80099f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80099f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009a00:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a02:	2300      	movs	r3, #0
 8009a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a06:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	d009      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a10:	4b77      	ldr	r3, [pc, #476]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a14:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a1e:	4a74      	ldr	r2, [pc, #464]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a20:	430b      	orrs	r3, r1
 8009a22:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009a30:	633b      	str	r3, [r7, #48]	; 0x30
 8009a32:	2300      	movs	r3, #0
 8009a34:	637b      	str	r3, [r7, #52]	; 0x34
 8009a36:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	d00a      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a40:	4b6b      	ldr	r3, [pc, #428]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a44:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a50:	4a67      	ldr	r2, [pc, #412]	; (8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a52:	430b      	orrs	r3, r1
 8009a54:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	2100      	movs	r1, #0
 8009a60:	62b9      	str	r1, [r7, #40]	; 0x28
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a68:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	d011      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a76:	3308      	adds	r3, #8
 8009a78:	2100      	movs	r1, #0
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 fa4a 	bl	800af14 <RCCEx_PLL2_Config>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	6239      	str	r1, [r7, #32]
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8009aa8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009aac:	460b      	mov	r3, r1
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	d011      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab6:	3308      	adds	r3, #8
 8009ab8:	2101      	movs	r1, #1
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 fa2a 	bl	800af14 <RCCEx_PLL2_Config>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ad2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	2100      	movs	r1, #0
 8009ae0:	61b9      	str	r1, [r7, #24]
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	61fb      	str	r3, [r7, #28]
 8009ae8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009aec:	460b      	mov	r3, r1
 8009aee:	4313      	orrs	r3, r2
 8009af0:	d011      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af6:	3308      	adds	r3, #8
 8009af8:	2102      	movs	r1, #2
 8009afa:	4618      	mov	r0, r3
 8009afc:	f001 fa0a 	bl	800af14 <RCCEx_PLL2_Config>
 8009b00:	4603      	mov	r3, r0
 8009b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	2100      	movs	r1, #0
 8009b20:	6139      	str	r1, [r7, #16]
 8009b22:	f003 0308 	and.w	r3, r3, #8
 8009b26:	617b      	str	r3, [r7, #20]
 8009b28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	d011      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b36:	3328      	adds	r3, #40	; 0x28
 8009b38:	2100      	movs	r1, #0
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 fa9c 	bl	800b078 <RCCEx_PLL3_Config>
 8009b40:	4603      	mov	r3, r0
 8009b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009b46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	2100      	movs	r1, #0
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	f003 0310 	and.w	r3, r3, #16
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	d011      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b76:	3328      	adds	r3, #40	; 0x28
 8009b78:	2101      	movs	r1, #1
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 fa7c 	bl	800b078 <RCCEx_PLL3_Config>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009b86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	6039      	str	r1, [r7, #0]
 8009ba2:	f003 0320 	and.w	r3, r3, #32
 8009ba6:	607b      	str	r3, [r7, #4]
 8009ba8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009bac:	460b      	mov	r3, r1
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	d011      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb6:	3328      	adds	r3, #40	; 0x28
 8009bb8:	2102      	movs	r1, #2
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 fa5c 	bl	800b078 <RCCEx_PLL3_Config>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009bd6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	e000      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009bea:	46bd      	mov	sp, r7
 8009bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bf0:	58024400 	.word	0x58024400

08009bf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b090      	sub	sp, #64	; 0x40
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c02:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009c06:	430b      	orrs	r3, r1
 8009c08:	f040 8094 	bne.w	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009c0c:	4b9e      	ldr	r3, [pc, #632]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c10:	f003 0307 	and.w	r3, r3, #7
 8009c14:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	f200 8087 	bhi.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009c1e:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c39 	.word	0x08009c39
 8009c28:	08009c61 	.word	0x08009c61
 8009c2c:	08009c89 	.word	0x08009c89
 8009c30:	08009d25 	.word	0x08009d25
 8009c34:	08009cb1 	.word	0x08009cb1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c38:	4b93      	ldr	r3, [pc, #588]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c44:	d108      	bne.n	8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f001 f810 	bl	800ac70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c54:	f000 bd45 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c5c:	f000 bd41 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c60:	4b89      	ldr	r3, [pc, #548]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c6c:	d108      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c6e:	f107 0318 	add.w	r3, r7, #24
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fd54 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c7c:	f000 bd31 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c84:	f000 bd2d 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c88:	4b7f      	ldr	r3, [pc, #508]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c94:	d108      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c96:	f107 030c 	add.w	r3, r7, #12
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fe94 	bl	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ca4:	f000 bd1d 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cac:	f000 bd19 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cb0:	4b75      	ldr	r3, [pc, #468]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009cb8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cba:	4b73      	ldr	r3, [pc, #460]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 0304 	and.w	r3, r3, #4
 8009cc2:	2b04      	cmp	r3, #4
 8009cc4:	d10c      	bne.n	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d109      	bne.n	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ccc:	4b6e      	ldr	r3, [pc, #440]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	08db      	lsrs	r3, r3, #3
 8009cd2:	f003 0303 	and.w	r3, r3, #3
 8009cd6:	4a6d      	ldr	r2, [pc, #436]	; (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cde:	e01f      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ce0:	4b69      	ldr	r3, [pc, #420]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cec:	d106      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cf4:	d102      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009cf6:	4b66      	ldr	r3, [pc, #408]	; (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cfa:	e011      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cfc:	4b62      	ldr	r3, [pc, #392]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d08:	d106      	bne.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d10:	d102      	bne.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d12:	4b60      	ldr	r3, [pc, #384]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d16:	e003      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009d1c:	f000 bce1 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d20:	f000 bcdf 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d24:	4b5c      	ldr	r3, [pc, #368]	; (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d28:	f000 bcdb 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d30:	f000 bcd7 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d38:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009d3c:	430b      	orrs	r3, r1
 8009d3e:	f040 80ad 	bne.w	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009d42:	4b51      	ldr	r3, [pc, #324]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d46:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009d4a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d52:	d056      	beq.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d5a:	f200 8090 	bhi.w	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	2bc0      	cmp	r3, #192	; 0xc0
 8009d62:	f000 8088 	beq.w	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d68:	2bc0      	cmp	r3, #192	; 0xc0
 8009d6a:	f200 8088 	bhi.w	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d70:	2b80      	cmp	r3, #128	; 0x80
 8009d72:	d032      	beq.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	2b80      	cmp	r3, #128	; 0x80
 8009d78:	f200 8081 	bhi.w	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d84:	2b40      	cmp	r3, #64	; 0x40
 8009d86:	d014      	beq.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009d88:	e079      	b.n	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d8a:	4b3f      	ldr	r3, [pc, #252]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d96:	d108      	bne.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 ff67 	bl	800ac70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009da6:	f000 bc9c 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dae:	f000 bc98 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009db2:	4b35      	ldr	r3, [pc, #212]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dbe:	d108      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dc0:	f107 0318 	add.w	r3, r7, #24
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 fcab 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dce:	f000 bc88 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dd6:	f000 bc84 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dda:	4b2b      	ldr	r3, [pc, #172]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009de6:	d108      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009de8:	f107 030c 	add.w	r3, r7, #12
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fdeb 	bl	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009df6:	f000 bc74 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dfe:	f000 bc70 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e02:	4b21      	ldr	r3, [pc, #132]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e0c:	4b1e      	ldr	r3, [pc, #120]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0304 	and.w	r3, r3, #4
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	d10c      	bne.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d109      	bne.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e1e:	4b1a      	ldr	r3, [pc, #104]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	08db      	lsrs	r3, r3, #3
 8009e24:	f003 0303 	and.w	r3, r3, #3
 8009e28:	4a18      	ldr	r2, [pc, #96]	; (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e30:	e01f      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e32:	4b15      	ldr	r3, [pc, #84]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e3e:	d106      	bne.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e46:	d102      	bne.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e48:	4b11      	ldr	r3, [pc, #68]	; (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e4c:	e011      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e4e:	4b0e      	ldr	r3, [pc, #56]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e5a:	d106      	bne.n	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e62:	d102      	bne.n	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e64:	4b0b      	ldr	r3, [pc, #44]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e68:	e003      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009e6e:	f000 bc38 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e72:	f000 bc36 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e76:	4b08      	ldr	r3, [pc, #32]	; (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e7a:	f000 bc32 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e82:	f000 bc2e 	b.w	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e86:	bf00      	nop
 8009e88:	58024400 	.word	0x58024400
 8009e8c:	03d09000 	.word	0x03d09000
 8009e90:	003d0900 	.word	0x003d0900
 8009e94:	017d7840 	.word	0x017d7840
 8009e98:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ea0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009ea4:	430b      	orrs	r3, r1
 8009ea6:	f040 809c 	bne.w	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009eaa:	4b9e      	ldr	r3, [pc, #632]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009eb2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009eba:	d054      	beq.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ec2:	f200 808b 	bhi.w	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ecc:	f000 8083 	beq.w	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ed6:	f200 8081 	bhi.w	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ee0:	d02f      	beq.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ee8:	d878      	bhi.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d004      	beq.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ef6:	d012      	beq.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009ef8:	e070      	b.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009efa:	4b8a      	ldr	r3, [pc, #552]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f06:	d107      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f000 feaf 	bl	800ac70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f16:	e3e4      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f1c:	e3e1      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f1e:	4b81      	ldr	r3, [pc, #516]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f2a:	d107      	bne.n	8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f2c:	f107 0318 	add.w	r3, r7, #24
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 fbf5 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f3a:	e3d2      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f40:	e3cf      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f42:	4b78      	ldr	r3, [pc, #480]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f4e:	d107      	bne.n	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f50:	f107 030c 	add.w	r3, r7, #12
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 fd37 	bl	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f5e:	e3c0      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f64:	e3bd      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f66:	4b6f      	ldr	r3, [pc, #444]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f6e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f70:	4b6c      	ldr	r3, [pc, #432]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 0304 	and.w	r3, r3, #4
 8009f78:	2b04      	cmp	r3, #4
 8009f7a:	d10c      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d109      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f82:	4b68      	ldr	r3, [pc, #416]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	08db      	lsrs	r3, r3, #3
 8009f88:	f003 0303 	and.w	r3, r3, #3
 8009f8c:	4a66      	ldr	r2, [pc, #408]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f94:	e01e      	b.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f96:	4b63      	ldr	r3, [pc, #396]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fa2:	d106      	bne.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009faa:	d102      	bne.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fac:	4b5f      	ldr	r3, [pc, #380]	; (800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fb0:	e010      	b.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fb2:	4b5c      	ldr	r3, [pc, #368]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fbe:	d106      	bne.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fc6:	d102      	bne.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fc8:	4b59      	ldr	r3, [pc, #356]	; (800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fcc:	e002      	b.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009fd2:	e386      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fd4:	e385      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fd6:	4b57      	ldr	r3, [pc, #348]	; (800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fda:	e382      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fe0:	e37f      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009fea:	430b      	orrs	r3, r1
 8009fec:	f040 80a7 	bne.w	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009ff0:	4b4c      	ldr	r3, [pc, #304]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009ff8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a000:	d055      	beq.n	800a0ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a008:	f200 8096 	bhi.w	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a012:	f000 8084 	beq.w	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a01c:	f200 808c 	bhi.w	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a026:	d030      	beq.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a02e:	f200 8083 	bhi.w	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a034:	2b00      	cmp	r3, #0
 800a036:	d004      	beq.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a03e:	d012      	beq.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a040:	e07a      	b.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a042:	4b38      	ldr	r3, [pc, #224]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a04a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a04e:	d107      	bne.n	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a054:	4618      	mov	r0, r3
 800a056:	f000 fe0b 	bl	800ac70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a05e:	e340      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a064:	e33d      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a066:	4b2f      	ldr	r3, [pc, #188]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a06e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a072:	d107      	bne.n	800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a074:	f107 0318 	add.w	r3, r7, #24
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 fb51 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a082:	e32e      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a088:	e32b      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a08a:	4b26      	ldr	r3, [pc, #152]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a096:	d107      	bne.n	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a098:	f107 030c 	add.w	r3, r7, #12
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 fc93 	bl	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0a6:	e31c      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ac:	e319      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0ae:	4b1d      	ldr	r3, [pc, #116]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0b8:	4b1a      	ldr	r3, [pc, #104]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 0304 	and.w	r3, r3, #4
 800a0c0:	2b04      	cmp	r3, #4
 800a0c2:	d10c      	bne.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d109      	bne.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0ca:	4b16      	ldr	r3, [pc, #88]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	08db      	lsrs	r3, r3, #3
 800a0d0:	f003 0303 	and.w	r3, r3, #3
 800a0d4:	4a14      	ldr	r2, [pc, #80]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a0d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0dc:	e01e      	b.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0de:	4b11      	ldr	r3, [pc, #68]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ea:	d106      	bne.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0f2:	d102      	bne.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a0f4:	4b0d      	ldr	r3, [pc, #52]	; (800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0f8:	e010      	b.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0fa:	4b0a      	ldr	r3, [pc, #40]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a106:	d106      	bne.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a10e:	d102      	bne.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a112:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a114:	e002      	b.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a11a:	e2e2      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a11c:	e2e1      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a11e:	4b05      	ldr	r3, [pc, #20]	; (800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a122:	e2de      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a124:	58024400 	.word	0x58024400
 800a128:	03d09000 	.word	0x03d09000
 800a12c:	003d0900 	.word	0x003d0900
 800a130:	017d7840 	.word	0x017d7840
 800a134:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a13c:	e2d1      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a13e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a142:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a146:	430b      	orrs	r3, r1
 800a148:	f040 809c 	bne.w	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a14c:	4b93      	ldr	r3, [pc, #588]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a150:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a154:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a15c:	d054      	beq.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a164:	f200 808b 	bhi.w	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a16e:	f000 8083 	beq.w	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a178:	f200 8081 	bhi.w	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a182:	d02f      	beq.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a18a:	d878      	bhi.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d004      	beq.n	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a198:	d012      	beq.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a19a:	e070      	b.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a19c:	4b7f      	ldr	r3, [pc, #508]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1a8:	d107      	bne.n	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 fd5e 	bl	800ac70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1b8:	e293      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1be:	e290      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1c0:	4b76      	ldr	r3, [pc, #472]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1cc:	d107      	bne.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ce:	f107 0318 	add.w	r3, r7, #24
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 faa4 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1dc:	e281      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1e2:	e27e      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1e4:	4b6d      	ldr	r3, [pc, #436]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1f0:	d107      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1f2:	f107 030c 	add.w	r3, r7, #12
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 fbe6 	bl	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a200:	e26f      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a202:	2300      	movs	r3, #0
 800a204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a206:	e26c      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a208:	4b64      	ldr	r3, [pc, #400]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a20a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a20c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a210:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a212:	4b62      	ldr	r3, [pc, #392]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0304 	and.w	r3, r3, #4
 800a21a:	2b04      	cmp	r3, #4
 800a21c:	d10c      	bne.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a220:	2b00      	cmp	r3, #0
 800a222:	d109      	bne.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a224:	4b5d      	ldr	r3, [pc, #372]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	08db      	lsrs	r3, r3, #3
 800a22a:	f003 0303 	and.w	r3, r3, #3
 800a22e:	4a5c      	ldr	r2, [pc, #368]	; (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a230:	fa22 f303 	lsr.w	r3, r2, r3
 800a234:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a236:	e01e      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a238:	4b58      	ldr	r3, [pc, #352]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a244:	d106      	bne.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a24c:	d102      	bne.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a24e:	4b55      	ldr	r3, [pc, #340]	; (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a250:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a252:	e010      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a254:	4b51      	ldr	r3, [pc, #324]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a25c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a260:	d106      	bne.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a268:	d102      	bne.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a26a:	4b4f      	ldr	r3, [pc, #316]	; (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a26c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a26e:	e002      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a274:	e235      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a276:	e234      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a278:	4b4c      	ldr	r3, [pc, #304]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a27c:	e231      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a27e:	2300      	movs	r3, #0
 800a280:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a282:	e22e      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a284:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a288:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a28c:	430b      	orrs	r3, r1
 800a28e:	f040 808f 	bne.w	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a292:	4b42      	ldr	r3, [pc, #264]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a296:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a29a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2a2:	d06b      	beq.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2aa:	d874      	bhi.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a2b2:	d056      	beq.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a2ba:	d86c      	bhi.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a2c2:	d03b      	beq.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a2ca:	d864      	bhi.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2d2:	d021      	beq.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2da:	d85c      	bhi.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d004      	beq.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2e8:	d004      	beq.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a2ea:	e054      	b.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a2ec:	f7fe fa0a 	bl	8008704 <HAL_RCC_GetPCLK1Freq>
 800a2f0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2f2:	e1f6      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2f4:	4b29      	ldr	r3, [pc, #164]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a300:	d107      	bne.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a302:	f107 0318 	add.w	r3, r7, #24
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fa0a 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a310:	e1e7      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a312:	2300      	movs	r3, #0
 800a314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a316:	e1e4      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a318:	4b20      	ldr	r3, [pc, #128]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a324:	d107      	bne.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a326:	f107 030c 	add.w	r3, r7, #12
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 fb4c 	bl	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a334:	e1d5      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a33a:	e1d2      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a33c:	4b17      	ldr	r3, [pc, #92]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	2b04      	cmp	r3, #4
 800a346:	d109      	bne.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a348:	4b14      	ldr	r3, [pc, #80]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	08db      	lsrs	r3, r3, #3
 800a34e:	f003 0303 	and.w	r3, r3, #3
 800a352:	4a13      	ldr	r2, [pc, #76]	; (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a354:	fa22 f303 	lsr.w	r3, r2, r3
 800a358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a35a:	e1c2      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a360:	e1bf      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a362:	4b0e      	ldr	r3, [pc, #56]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a36e:	d102      	bne.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a370:	4b0c      	ldr	r3, [pc, #48]	; (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a372:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a374:	e1b5      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a376:	2300      	movs	r3, #0
 800a378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a37a:	e1b2      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a37c:	4b07      	ldr	r3, [pc, #28]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a388:	d102      	bne.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a38a:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a38e:	e1a8      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a390:	2300      	movs	r3, #0
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a394:	e1a5      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a39a:	e1a2      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a39c:	58024400 	.word	0x58024400
 800a3a0:	03d09000 	.word	0x03d09000
 800a3a4:	003d0900 	.word	0x003d0900
 800a3a8:	017d7840 	.word	0x017d7840
 800a3ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a3b8:	430b      	orrs	r3, r1
 800a3ba:	d173      	bne.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a3bc:	4b9c      	ldr	r3, [pc, #624]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a3c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3cc:	d02f      	beq.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3d4:	d863      	bhi.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d004      	beq.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3e2:	d012      	beq.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a3e4:	e05b      	b.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3e6:	4b92      	ldr	r3, [pc, #584]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3f2:	d107      	bne.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3f4:	f107 0318 	add.w	r3, r7, #24
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 f991 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a402:	e16e      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a408:	e16b      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a40a:	4b89      	ldr	r3, [pc, #548]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a416:	d107      	bne.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a418:	f107 030c 	add.w	r3, r7, #12
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 fad3 	bl	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a426:	e15c      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a428:	2300      	movs	r3, #0
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a42c:	e159      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a42e:	4b80      	ldr	r3, [pc, #512]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a432:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a436:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a438:	4b7d      	ldr	r3, [pc, #500]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	2b04      	cmp	r3, #4
 800a442:	d10c      	bne.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a446:	2b00      	cmp	r3, #0
 800a448:	d109      	bne.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a44a:	4b79      	ldr	r3, [pc, #484]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	08db      	lsrs	r3, r3, #3
 800a450:	f003 0303 	and.w	r3, r3, #3
 800a454:	4a77      	ldr	r2, [pc, #476]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a456:	fa22 f303 	lsr.w	r3, r2, r3
 800a45a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a45c:	e01e      	b.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a45e:	4b74      	ldr	r3, [pc, #464]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a46a:	d106      	bne.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a472:	d102      	bne.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a474:	4b70      	ldr	r3, [pc, #448]	; (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a478:	e010      	b.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a47a:	4b6d      	ldr	r3, [pc, #436]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a486:	d106      	bne.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a48e:	d102      	bne.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a490:	4b6a      	ldr	r3, [pc, #424]	; (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a492:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a494:	e002      	b.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a49a:	e122      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a49c:	e121      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4a2:	e11e      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a4a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4a8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a4ac:	430b      	orrs	r3, r1
 800a4ae:	d133      	bne.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a4b0:	4b5f      	ldr	r3, [pc, #380]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d004      	beq.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c6:	d012      	beq.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a4c8:	e023      	b.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4ca:	4b59      	ldr	r3, [pc, #356]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4d6:	d107      	bne.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 fbc7 	bl	800ac70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4e6:	e0fc      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4ec:	e0f9      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4ee:	4b50      	ldr	r3, [pc, #320]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4fa:	d107      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4fc:	f107 0318 	add.w	r3, r7, #24
 800a500:	4618      	mov	r0, r3
 800a502:	f000 f90d 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a50a:	e0ea      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a510:	e0e7      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a516:	e0e4      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a51c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a520:	430b      	orrs	r3, r1
 800a522:	f040 808d 	bne.w	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a526:	4b42      	ldr	r3, [pc, #264]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a52a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a52e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a536:	d06b      	beq.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a53e:	d874      	bhi.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a546:	d056      	beq.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a54e:	d86c      	bhi.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a552:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a556:	d03b      	beq.n	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a55e:	d864      	bhi.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a566:	d021      	beq.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a56e:	d85c      	bhi.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	2b00      	cmp	r3, #0
 800a574:	d004      	beq.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a57c:	d004      	beq.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a57e:	e054      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a580:	f000 f8b8 	bl	800a6f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a584:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a586:	e0ac      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a588:	4b29      	ldr	r3, [pc, #164]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a594:	d107      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a596:	f107 0318 	add.w	r3, r7, #24
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 f8c0 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5a4:	e09d      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5aa:	e09a      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ac:	4b20      	ldr	r3, [pc, #128]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5b8:	d107      	bne.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ba:	f107 030c 	add.w	r3, r7, #12
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 fa02 	bl	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5c8:	e08b      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5ce:	e088      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5d0:	4b17      	ldr	r3, [pc, #92]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 0304 	and.w	r3, r3, #4
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	d109      	bne.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5dc:	4b14      	ldr	r3, [pc, #80]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	08db      	lsrs	r3, r3, #3
 800a5e2:	f003 0303 	and.w	r3, r3, #3
 800a5e6:	4a13      	ldr	r2, [pc, #76]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a5e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ee:	e078      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5f4:	e075      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a5f6:	4b0e      	ldr	r3, [pc, #56]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a602:	d102      	bne.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a604:	4b0c      	ldr	r3, [pc, #48]	; (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a608:	e06b      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a60e:	e068      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a610:	4b07      	ldr	r3, [pc, #28]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a61c:	d102      	bne.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a61e:	4b07      	ldr	r3, [pc, #28]	; (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a620:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a622:	e05e      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a624:	2300      	movs	r3, #0
 800a626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a628:	e05b      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a62e:	e058      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a630:	58024400 	.word	0x58024400
 800a634:	03d09000 	.word	0x03d09000
 800a638:	003d0900 	.word	0x003d0900
 800a63c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a640:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a644:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a648:	430b      	orrs	r3, r1
 800a64a:	d148      	bne.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a64c:	4b27      	ldr	r3, [pc, #156]	; (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a654:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a65c:	d02a      	beq.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a664:	d838      	bhi.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d004      	beq.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a672:	d00d      	beq.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a674:	e030      	b.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a676:	4b1d      	ldr	r3, [pc, #116]	; (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a67e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a682:	d102      	bne.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a684:	4b1a      	ldr	r3, [pc, #104]	; (800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a688:	e02b      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a68e:	e028      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a690:	4b16      	ldr	r3, [pc, #88]	; (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a69c:	d107      	bne.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a69e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f000 fae4 	bl	800ac70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ac:	e019      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6b2:	e016      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6b4:	4b0d      	ldr	r3, [pc, #52]	; (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6c0:	d107      	bne.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6c2:	f107 0318 	add.w	r3, r7, #24
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 f82a 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6d0:	e007      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d6:	e004      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6dc:	e001      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3740      	adds	r7, #64	; 0x40
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	58024400 	.word	0x58024400
 800a6f0:	017d7840 	.word	0x017d7840

0800a6f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a6f8:	f7fd ffd4 	bl	80086a4 <HAL_RCC_GetHCLKFreq>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	4b06      	ldr	r3, [pc, #24]	; (800a718 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	091b      	lsrs	r3, r3, #4
 800a704:	f003 0307 	and.w	r3, r3, #7
 800a708:	4904      	ldr	r1, [pc, #16]	; (800a71c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a70a:	5ccb      	ldrb	r3, [r1, r3]
 800a70c:	f003 031f 	and.w	r3, r3, #31
 800a710:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a714:	4618      	mov	r0, r3
 800a716:	bd80      	pop	{r7, pc}
 800a718:	58024400 	.word	0x58024400
 800a71c:	080119e0 	.word	0x080119e0

0800a720 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a720:	b480      	push	{r7}
 800a722:	b089      	sub	sp, #36	; 0x24
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a728:	4ba1      	ldr	r3, [pc, #644]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72c:	f003 0303 	and.w	r3, r3, #3
 800a730:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a732:	4b9f      	ldr	r3, [pc, #636]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a736:	0b1b      	lsrs	r3, r3, #12
 800a738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a73c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a73e:	4b9c      	ldr	r3, [pc, #624]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a742:	091b      	lsrs	r3, r3, #4
 800a744:	f003 0301 	and.w	r3, r3, #1
 800a748:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a74a:	4b99      	ldr	r3, [pc, #612]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74e:	08db      	lsrs	r3, r3, #3
 800a750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	fb02 f303 	mul.w	r3, r2, r3
 800a75a:	ee07 3a90 	vmov	s15, r3
 800a75e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a762:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f000 8111 	beq.w	800a990 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	2b02      	cmp	r3, #2
 800a772:	f000 8083 	beq.w	800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	2b02      	cmp	r3, #2
 800a77a:	f200 80a1 	bhi.w	800a8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d003      	beq.n	800a78c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d056      	beq.n	800a838 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a78a:	e099      	b.n	800a8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a78c:	4b88      	ldr	r3, [pc, #544]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0320 	and.w	r3, r3, #32
 800a794:	2b00      	cmp	r3, #0
 800a796:	d02d      	beq.n	800a7f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a798:	4b85      	ldr	r3, [pc, #532]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	08db      	lsrs	r3, r3, #3
 800a79e:	f003 0303 	and.w	r3, r3, #3
 800a7a2:	4a84      	ldr	r2, [pc, #528]	; (800a9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a7a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	ee07 3a90 	vmov	s15, r3
 800a7b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	ee07 3a90 	vmov	s15, r3
 800a7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7c2:	4b7b      	ldr	r3, [pc, #492]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ca:	ee07 3a90 	vmov	s15, r3
 800a7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a7f2:	e087      	b.n	800a904 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	ee07 3a90 	vmov	s15, r3
 800a7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a806:	4b6a      	ldr	r3, [pc, #424]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a80e:	ee07 3a90 	vmov	s15, r3
 800a812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a816:	ed97 6a03 	vldr	s12, [r7, #12]
 800a81a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a81e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a836:	e065      	b.n	800a904 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	ee07 3a90 	vmov	s15, r3
 800a83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a842:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a9c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a84a:	4b59      	ldr	r3, [pc, #356]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a852:	ee07 3a90 	vmov	s15, r3
 800a856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a85a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a85e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a86a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a87a:	e043      	b.n	800a904 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	ee07 3a90 	vmov	s15, r3
 800a882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a886:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a88a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a88e:	4b48      	ldr	r3, [pc, #288]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a896:	ee07 3a90 	vmov	s15, r3
 800a89a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a89e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8be:	e021      	b.n	800a904 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	ee07 3a90 	vmov	s15, r3
 800a8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a9c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a8ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8d2:	4b37      	ldr	r3, [pc, #220]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8da:	ee07 3a90 	vmov	s15, r3
 800a8de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a902:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a904:	4b2a      	ldr	r3, [pc, #168]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a908:	0a5b      	lsrs	r3, r3, #9
 800a90a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a90e:	ee07 3a90 	vmov	s15, r3
 800a912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a91a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a91e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a92a:	ee17 2a90 	vmov	r2, s15
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a932:	4b1f      	ldr	r3, [pc, #124]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a936:	0c1b      	lsrs	r3, r3, #16
 800a938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a93c:	ee07 3a90 	vmov	s15, r3
 800a940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a948:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a94c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a958:	ee17 2a90 	vmov	r2, s15
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a960:	4b13      	ldr	r3, [pc, #76]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a964:	0e1b      	lsrs	r3, r3, #24
 800a966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a96a:	ee07 3a90 	vmov	s15, r3
 800a96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a97a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a97e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a986:	ee17 2a90 	vmov	r2, s15
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a98e:	e008      	b.n	800a9a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	609a      	str	r2, [r3, #8]
}
 800a9a2:	bf00      	nop
 800a9a4:	3724      	adds	r7, #36	; 0x24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	58024400 	.word	0x58024400
 800a9b4:	03d09000 	.word	0x03d09000
 800a9b8:	46000000 	.word	0x46000000
 800a9bc:	4c742400 	.word	0x4c742400
 800a9c0:	4a742400 	.word	0x4a742400
 800a9c4:	4bbebc20 	.word	0x4bbebc20

0800a9c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b089      	sub	sp, #36	; 0x24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9d0:	4ba1      	ldr	r3, [pc, #644]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d4:	f003 0303 	and.w	r3, r3, #3
 800a9d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a9da:	4b9f      	ldr	r3, [pc, #636]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9de:	0d1b      	lsrs	r3, r3, #20
 800a9e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a9e6:	4b9c      	ldr	r3, [pc, #624]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ea:	0a1b      	lsrs	r3, r3, #8
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a9f2:	4b99      	ldr	r3, [pc, #612]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f6:	08db      	lsrs	r3, r3, #3
 800a9f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	fb02 f303 	mul.w	r3, r2, r3
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f000 8111 	beq.w	800ac38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	f000 8083 	beq.w	800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	f200 80a1 	bhi.w	800ab68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d003      	beq.n	800aa34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d056      	beq.n	800aae0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aa32:	e099      	b.n	800ab68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa34:	4b88      	ldr	r3, [pc, #544]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 0320 	and.w	r3, r3, #32
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d02d      	beq.n	800aa9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa40:	4b85      	ldr	r3, [pc, #532]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	08db      	lsrs	r3, r3, #3
 800aa46:	f003 0303 	and.w	r3, r3, #3
 800aa4a:	4a84      	ldr	r2, [pc, #528]	; (800ac5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aa4c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa50:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	ee07 3a90 	vmov	s15, r3
 800aa58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	ee07 3a90 	vmov	s15, r3
 800aa62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa6a:	4b7b      	ldr	r3, [pc, #492]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa72:	ee07 3a90 	vmov	s15, r3
 800aa76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa9a:	e087      	b.n	800abac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	ee07 3a90 	vmov	s15, r3
 800aaa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aaaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaae:	4b6a      	ldr	r3, [pc, #424]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aabe:	ed97 6a03 	vldr	s12, [r7, #12]
 800aac2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ac60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aade:	e065      	b.n	800abac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aaee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaf2:	4b59      	ldr	r3, [pc, #356]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab06:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ac60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab22:	e043      	b.n	800abac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ab32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab36:	4b48      	ldr	r3, [pc, #288]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab3e:	ee07 3a90 	vmov	s15, r3
 800ab42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab46:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab66:	e021      	b.n	800abac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab7a:	4b37      	ldr	r3, [pc, #220]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab82:	ee07 3a90 	vmov	s15, r3
 800ab86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ac60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abaa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800abac:	4b2a      	ldr	r3, [pc, #168]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb0:	0a5b      	lsrs	r3, r3, #9
 800abb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800abca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abd2:	ee17 2a90 	vmov	r2, s15
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800abda:	4b1f      	ldr	r3, [pc, #124]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abde:	0c1b      	lsrs	r3, r3, #16
 800abe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abe4:	ee07 3a90 	vmov	s15, r3
 800abe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abf4:	edd7 6a07 	vldr	s13, [r7, #28]
 800abf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac00:	ee17 2a90 	vmov	r2, s15
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ac08:	4b13      	ldr	r3, [pc, #76]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0c:	0e1b      	lsrs	r3, r3, #24
 800ac0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac12:	ee07 3a90 	vmov	s15, r3
 800ac16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac22:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac2e:	ee17 2a90 	vmov	r2, s15
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ac36:	e008      	b.n	800ac4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	609a      	str	r2, [r3, #8]
}
 800ac4a:	bf00      	nop
 800ac4c:	3724      	adds	r7, #36	; 0x24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	58024400 	.word	0x58024400
 800ac5c:	03d09000 	.word	0x03d09000
 800ac60:	46000000 	.word	0x46000000
 800ac64:	4c742400 	.word	0x4c742400
 800ac68:	4a742400 	.word	0x4a742400
 800ac6c:	4bbebc20 	.word	0x4bbebc20

0800ac70 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b089      	sub	sp, #36	; 0x24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac78:	4ba0      	ldr	r3, [pc, #640]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7c:	f003 0303 	and.w	r3, r3, #3
 800ac80:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ac82:	4b9e      	ldr	r3, [pc, #632]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac86:	091b      	lsrs	r3, r3, #4
 800ac88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac8c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ac8e:	4b9b      	ldr	r3, [pc, #620]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac98:	4b98      	ldr	r3, [pc, #608]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac9c:	08db      	lsrs	r3, r3, #3
 800ac9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	fb02 f303 	mul.w	r3, r2, r3
 800aca8:	ee07 3a90 	vmov	s15, r3
 800acac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 8111 	beq.w	800aede <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	f000 8083 	beq.w	800adca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	f200 80a1 	bhi.w	800ae0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d056      	beq.n	800ad86 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800acd8:	e099      	b.n	800ae0e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acda:	4b88      	ldr	r3, [pc, #544]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0320 	and.w	r3, r3, #32
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d02d      	beq.n	800ad42 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ace6:	4b85      	ldr	r3, [pc, #532]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	08db      	lsrs	r3, r3, #3
 800acec:	f003 0303 	and.w	r3, r3, #3
 800acf0:	4a83      	ldr	r2, [pc, #524]	; (800af00 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800acf2:	fa22 f303 	lsr.w	r3, r2, r3
 800acf6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	ee07 3a90 	vmov	s15, r3
 800acfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	ee07 3a90 	vmov	s15, r3
 800ad08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad10:	4b7a      	ldr	r3, [pc, #488]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad18:	ee07 3a90 	vmov	s15, r3
 800ad1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad20:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad24:	eddf 5a77 	vldr	s11, [pc, #476]	; 800af04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad40:	e087      	b.n	800ae52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	ee07 3a90 	vmov	s15, r3
 800ad48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ad50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad54:	4b69      	ldr	r3, [pc, #420]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad5c:	ee07 3a90 	vmov	s15, r3
 800ad60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad64:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad68:	eddf 5a66 	vldr	s11, [pc, #408]	; 800af04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad84:	e065      	b.n	800ae52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	ee07 3a90 	vmov	s15, r3
 800ad8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad90:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800af0c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ad94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad98:	4b58      	ldr	r3, [pc, #352]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ada0:	ee07 3a90 	vmov	s15, r3
 800ada4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada8:	ed97 6a03 	vldr	s12, [r7, #12]
 800adac:	eddf 5a55 	vldr	s11, [pc, #340]	; 800af04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800adb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adc8:	e043      	b.n	800ae52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	ee07 3a90 	vmov	s15, r3
 800add0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800af10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800add8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800addc:	4b47      	ldr	r3, [pc, #284]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade4:	ee07 3a90 	vmov	s15, r3
 800ade8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adec:	ed97 6a03 	vldr	s12, [r7, #12]
 800adf0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800af04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800adf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae0c:	e021      	b.n	800ae52 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	ee07 3a90 	vmov	s15, r3
 800ae14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae18:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ae1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae20:	4b36      	ldr	r3, [pc, #216]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae28:	ee07 3a90 	vmov	s15, r3
 800ae2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae30:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae34:	eddf 5a33 	vldr	s11, [pc, #204]	; 800af04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae50:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ae52:	4b2a      	ldr	r3, [pc, #168]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae56:	0a5b      	lsrs	r3, r3, #9
 800ae58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae5c:	ee07 3a90 	vmov	s15, r3
 800ae60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae78:	ee17 2a90 	vmov	r2, s15
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ae80:	4b1e      	ldr	r3, [pc, #120]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae84:	0c1b      	lsrs	r3, r3, #16
 800ae86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae8a:	ee07 3a90 	vmov	s15, r3
 800ae8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aea6:	ee17 2a90 	vmov	r2, s15
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800aeae:	4b13      	ldr	r3, [pc, #76]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb2:	0e1b      	lsrs	r3, r3, #24
 800aeb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeb8:	ee07 3a90 	vmov	s15, r3
 800aebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aec8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aed4:	ee17 2a90 	vmov	r2, s15
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aedc:	e008      	b.n	800aef0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	609a      	str	r2, [r3, #8]
}
 800aef0:	bf00      	nop
 800aef2:	3724      	adds	r7, #36	; 0x24
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr
 800aefc:	58024400 	.word	0x58024400
 800af00:	03d09000 	.word	0x03d09000
 800af04:	46000000 	.word	0x46000000
 800af08:	4c742400 	.word	0x4c742400
 800af0c:	4a742400 	.word	0x4a742400
 800af10:	4bbebc20 	.word	0x4bbebc20

0800af14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af22:	4b53      	ldr	r3, [pc, #332]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800af24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af26:	f003 0303 	and.w	r3, r3, #3
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d101      	bne.n	800af32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e099      	b.n	800b066 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800af32:	4b4f      	ldr	r3, [pc, #316]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a4e      	ldr	r2, [pc, #312]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800af38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af3e:	f7f7 fb9f 	bl	8002680 <HAL_GetTick>
 800af42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af44:	e008      	b.n	800af58 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af46:	f7f7 fb9b 	bl	8002680 <HAL_GetTick>
 800af4a:	4602      	mov	r2, r0
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	2b02      	cmp	r3, #2
 800af52:	d901      	bls.n	800af58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af54:	2303      	movs	r3, #3
 800af56:	e086      	b.n	800b066 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af58:	4b45      	ldr	r3, [pc, #276]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1f0      	bne.n	800af46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800af64:	4b42      	ldr	r3, [pc, #264]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800af66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	031b      	lsls	r3, r3, #12
 800af72:	493f      	ldr	r1, [pc, #252]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800af74:	4313      	orrs	r3, r2
 800af76:	628b      	str	r3, [r1, #40]	; 0x28
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	3b01      	subs	r3, #1
 800af7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	3b01      	subs	r3, #1
 800af88:	025b      	lsls	r3, r3, #9
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	431a      	orrs	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	3b01      	subs	r3, #1
 800af94:	041b      	lsls	r3, r3, #16
 800af96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800af9a:	431a      	orrs	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	3b01      	subs	r3, #1
 800afa2:	061b      	lsls	r3, r3, #24
 800afa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800afa8:	4931      	ldr	r1, [pc, #196]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800afae:	4b30      	ldr	r3, [pc, #192]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800afb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	492d      	ldr	r1, [pc, #180]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800afbc:	4313      	orrs	r3, r2
 800afbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800afc0:	4b2b      	ldr	r3, [pc, #172]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc4:	f023 0220 	bic.w	r2, r3, #32
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	4928      	ldr	r1, [pc, #160]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800afce:	4313      	orrs	r3, r2
 800afd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800afd2:	4b27      	ldr	r3, [pc, #156]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800afd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd6:	4a26      	ldr	r2, [pc, #152]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800afd8:	f023 0310 	bic.w	r3, r3, #16
 800afdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800afde:	4b24      	ldr	r3, [pc, #144]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800afe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afe2:	4b24      	ldr	r3, [pc, #144]	; (800b074 <RCCEx_PLL2_Config+0x160>)
 800afe4:	4013      	ands	r3, r2
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	69d2      	ldr	r2, [r2, #28]
 800afea:	00d2      	lsls	r2, r2, #3
 800afec:	4920      	ldr	r1, [pc, #128]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aff2:	4b1f      	ldr	r3, [pc, #124]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800aff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff6:	4a1e      	ldr	r2, [pc, #120]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800aff8:	f043 0310 	orr.w	r3, r3, #16
 800affc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d106      	bne.n	800b012 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b004:	4b1a      	ldr	r3, [pc, #104]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800b006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b008:	4a19      	ldr	r2, [pc, #100]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800b00a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b00e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b010:	e00f      	b.n	800b032 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d106      	bne.n	800b026 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b018:	4b15      	ldr	r3, [pc, #84]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800b01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01c:	4a14      	ldr	r2, [pc, #80]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800b01e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b022:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b024:	e005      	b.n	800b032 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b026:	4b12      	ldr	r3, [pc, #72]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800b028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02a:	4a11      	ldr	r2, [pc, #68]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800b02c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b030:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b032:	4b0f      	ldr	r3, [pc, #60]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a0e      	ldr	r2, [pc, #56]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800b038:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b03c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b03e:	f7f7 fb1f 	bl	8002680 <HAL_GetTick>
 800b042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b044:	e008      	b.n	800b058 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b046:	f7f7 fb1b 	bl	8002680 <HAL_GetTick>
 800b04a:	4602      	mov	r2, r0
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	2b02      	cmp	r3, #2
 800b052:	d901      	bls.n	800b058 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b054:	2303      	movs	r3, #3
 800b056:	e006      	b.n	800b066 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b058:	4b05      	ldr	r3, [pc, #20]	; (800b070 <RCCEx_PLL2_Config+0x15c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b060:	2b00      	cmp	r3, #0
 800b062:	d0f0      	beq.n	800b046 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b064:	7bfb      	ldrb	r3, [r7, #15]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	58024400 	.word	0x58024400
 800b074:	ffff0007 	.word	0xffff0007

0800b078 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b086:	4b53      	ldr	r3, [pc, #332]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08a:	f003 0303 	and.w	r3, r3, #3
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d101      	bne.n	800b096 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	e099      	b.n	800b1ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b096:	4b4f      	ldr	r3, [pc, #316]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a4e      	ldr	r2, [pc, #312]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b09c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0a2:	f7f7 faed 	bl	8002680 <HAL_GetTick>
 800b0a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b0a8:	e008      	b.n	800b0bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b0aa:	f7f7 fae9 	bl	8002680 <HAL_GetTick>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	1ad3      	subs	r3, r2, r3
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d901      	bls.n	800b0bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e086      	b.n	800b1ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b0bc:	4b45      	ldr	r3, [pc, #276]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1f0      	bne.n	800b0aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b0c8:	4b42      	ldr	r3, [pc, #264]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	051b      	lsls	r3, r3, #20
 800b0d6:	493f      	ldr	r1, [pc, #252]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	628b      	str	r3, [r1, #40]	; 0x28
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	025b      	lsls	r3, r3, #9
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	431a      	orrs	r2, r3
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	041b      	lsls	r3, r3, #16
 800b0fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b0fe:	431a      	orrs	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	3b01      	subs	r3, #1
 800b106:	061b      	lsls	r3, r3, #24
 800b108:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b10c:	4931      	ldr	r1, [pc, #196]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b112:	4b30      	ldr	r3, [pc, #192]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b116:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	492d      	ldr	r1, [pc, #180]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b120:	4313      	orrs	r3, r2
 800b122:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b124:	4b2b      	ldr	r3, [pc, #172]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b128:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	4928      	ldr	r1, [pc, #160]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b132:	4313      	orrs	r3, r2
 800b134:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b136:	4b27      	ldr	r3, [pc, #156]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13a:	4a26      	ldr	r2, [pc, #152]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b13c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b142:	4b24      	ldr	r3, [pc, #144]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b146:	4b24      	ldr	r3, [pc, #144]	; (800b1d8 <RCCEx_PLL3_Config+0x160>)
 800b148:	4013      	ands	r3, r2
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	69d2      	ldr	r2, [r2, #28]
 800b14e:	00d2      	lsls	r2, r2, #3
 800b150:	4920      	ldr	r1, [pc, #128]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b152:	4313      	orrs	r3, r2
 800b154:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b156:	4b1f      	ldr	r3, [pc, #124]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15a:	4a1e      	ldr	r2, [pc, #120]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b15c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b160:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d106      	bne.n	800b176 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b168:	4b1a      	ldr	r3, [pc, #104]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16c:	4a19      	ldr	r2, [pc, #100]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b16e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b172:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b174:	e00f      	b.n	800b196 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d106      	bne.n	800b18a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b17c:	4b15      	ldr	r3, [pc, #84]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b180:	4a14      	ldr	r2, [pc, #80]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b182:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b186:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b188:	e005      	b.n	800b196 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b18a:	4b12      	ldr	r3, [pc, #72]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18e:	4a11      	ldr	r2, [pc, #68]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b194:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b196:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a0e      	ldr	r2, [pc, #56]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b19c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1a2:	f7f7 fa6d 	bl	8002680 <HAL_GetTick>
 800b1a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b1a8:	e008      	b.n	800b1bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b1aa:	f7f7 fa69 	bl	8002680 <HAL_GetTick>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d901      	bls.n	800b1bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	e006      	b.n	800b1ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b1bc:	4b05      	ldr	r3, [pc, #20]	; (800b1d4 <RCCEx_PLL3_Config+0x15c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d0f0      	beq.n	800b1aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	58024400 	.word	0x58024400
 800b1d8:	ffff0007 	.word	0xffff0007

0800b1dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d071      	beq.n	800b2d2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d106      	bne.n	800b208 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f7f6 f940 	bl	8001488 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2202      	movs	r2, #2
 800b20c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	f003 0310 	and.w	r3, r3, #16
 800b21a:	2b10      	cmp	r3, #16
 800b21c:	d050      	beq.n	800b2c0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	22ca      	movs	r2, #202	; 0xca
 800b224:	625a      	str	r2, [r3, #36]	; 0x24
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2253      	movs	r2, #83	; 0x53
 800b22c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 f9a0 	bl	800b574 <RTC_EnterInitMode>
 800b234:	4603      	mov	r3, r0
 800b236:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800b238:	7bfb      	ldrb	r3, [r7, #15]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d124      	bne.n	800b288 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6899      	ldr	r1, [r3, #8]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	4b24      	ldr	r3, [pc, #144]	; (800b2dc <HAL_RTC_Init+0x100>)
 800b24a:	400b      	ands	r3, r1
 800b24c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6899      	ldr	r1, [r3, #8]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685a      	ldr	r2, [r3, #4]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	431a      	orrs	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	431a      	orrs	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	430a      	orrs	r2, r1
 800b26a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	0419      	lsls	r1, r3, #16
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68da      	ldr	r2, [r3, #12]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	430a      	orrs	r2, r1
 800b27c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f9ac 	bl	800b5dc <RTC_ExitInitMode>
 800b284:	4603      	mov	r3, r0
 800b286:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d113      	bne.n	800b2b6 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f022 0203 	bic.w	r2, r2, #3
 800b29c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	69da      	ldr	r2, [r3, #28]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	431a      	orrs	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	430a      	orrs	r2, r1
 800b2b4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	22ff      	movs	r2, #255	; 0xff
 800b2bc:	625a      	str	r2, [r3, #36]	; 0x24
 800b2be:	e001      	b.n	800b2c4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d103      	bne.n	800b2d2 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800b2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3710      	adds	r7, #16
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	ff8fffbf 	.word	0xff8fffbf

0800b2e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b2e0:	b590      	push	{r4, r7, lr}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d101      	bne.n	800b2fa <HAL_RTC_SetTime+0x1a>
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	e089      	b.n	800b40e <HAL_RTC_SetTime+0x12e>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2202      	movs	r2, #2
 800b306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	22ca      	movs	r2, #202	; 0xca
 800b310:	625a      	str	r2, [r3, #36]	; 0x24
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2253      	movs	r2, #83	; 0x53
 800b318:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f000 f92a 	bl	800b574 <RTC_EnterInitMode>
 800b320:	4603      	mov	r3, r0
 800b322:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b324:	7cfb      	ldrb	r3, [r7, #19]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d161      	bne.n	800b3ee <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d126      	bne.n	800b37e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d102      	bne.n	800b344 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2200      	movs	r2, #0
 800b342:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 f985 	bl	800b658 <RTC_ByteToBcd2>
 800b34e:	4603      	mov	r3, r0
 800b350:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	785b      	ldrb	r3, [r3, #1]
 800b356:	4618      	mov	r0, r3
 800b358:	f000 f97e 	bl	800b658 <RTC_ByteToBcd2>
 800b35c:	4603      	mov	r3, r0
 800b35e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b360:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	789b      	ldrb	r3, [r3, #2]
 800b366:	4618      	mov	r0, r3
 800b368:	f000 f976 	bl	800b658 <RTC_ByteToBcd2>
 800b36c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b36e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	78db      	ldrb	r3, [r3, #3]
 800b376:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b378:	4313      	orrs	r3, r2
 800b37a:	617b      	str	r3, [r7, #20]
 800b37c:	e018      	b.n	800b3b0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d102      	bne.n	800b392 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2200      	movs	r2, #0
 800b390:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	785b      	ldrb	r3, [r3, #1]
 800b39c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b39e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b3a4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	78db      	ldrb	r3, [r3, #3]
 800b3aa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	6979      	ldr	r1, [r7, #20]
 800b3b6:	4b18      	ldr	r3, [pc, #96]	; (800b418 <HAL_RTC_SetTime+0x138>)
 800b3b8:	400b      	ands	r3, r1
 800b3ba:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	689a      	ldr	r2, [r3, #8]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b3ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6899      	ldr	r1, [r3, #8]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	68da      	ldr	r2, [r3, #12]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	431a      	orrs	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	430a      	orrs	r2, r1
 800b3e2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f000 f8f9 	bl	800b5dc <RTC_ExitInitMode>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	22ff      	movs	r2, #255	; 0xff
 800b3f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b3f6:	7cfb      	ldrb	r3, [r7, #19]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d103      	bne.n	800b404 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b40c:	7cfb      	ldrb	r3, [r7, #19]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	371c      	adds	r7, #28
 800b412:	46bd      	mov	sp, r7
 800b414:	bd90      	pop	{r4, r7, pc}
 800b416:	bf00      	nop
 800b418:	007f7f7f 	.word	0x007f7f7f

0800b41c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b41c:	b590      	push	{r4, r7, lr}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d101      	bne.n	800b436 <HAL_RTC_SetDate+0x1a>
 800b432:	2302      	movs	r3, #2
 800b434:	e073      	b.n	800b51e <HAL_RTC_SetDate+0x102>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2202      	movs	r2, #2
 800b442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10e      	bne.n	800b46a <HAL_RTC_SetDate+0x4e>
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	785b      	ldrb	r3, [r3, #1]
 800b450:	f003 0310 	and.w	r3, r3, #16
 800b454:	2b00      	cmp	r3, #0
 800b456:	d008      	beq.n	800b46a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	785b      	ldrb	r3, [r3, #1]
 800b45c:	f023 0310 	bic.w	r3, r3, #16
 800b460:	b2db      	uxtb	r3, r3
 800b462:	330a      	adds	r3, #10
 800b464:	b2da      	uxtb	r2, r3
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d11c      	bne.n	800b4aa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	78db      	ldrb	r3, [r3, #3]
 800b474:	4618      	mov	r0, r3
 800b476:	f000 f8ef 	bl	800b658 <RTC_ByteToBcd2>
 800b47a:	4603      	mov	r3, r0
 800b47c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	785b      	ldrb	r3, [r3, #1]
 800b482:	4618      	mov	r0, r3
 800b484:	f000 f8e8 	bl	800b658 <RTC_ByteToBcd2>
 800b488:	4603      	mov	r3, r0
 800b48a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b48c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	789b      	ldrb	r3, [r3, #2]
 800b492:	4618      	mov	r0, r3
 800b494:	f000 f8e0 	bl	800b658 <RTC_ByteToBcd2>
 800b498:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b49a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	617b      	str	r3, [r7, #20]
 800b4a8:	e00e      	b.n	800b4c8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	78db      	ldrb	r3, [r3, #3]
 800b4ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	785b      	ldrb	r3, [r3, #1]
 800b4b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b4b6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b4bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	22ca      	movs	r2, #202	; 0xca
 800b4ce:	625a      	str	r2, [r3, #36]	; 0x24
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2253      	movs	r2, #83	; 0x53
 800b4d6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f000 f84b 	bl	800b574 <RTC_EnterInitMode>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b4e2:	7cfb      	ldrb	r3, [r7, #19]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10a      	bne.n	800b4fe <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	6979      	ldr	r1, [r7, #20]
 800b4ee:	4b0e      	ldr	r3, [pc, #56]	; (800b528 <HAL_RTC_SetDate+0x10c>)
 800b4f0:	400b      	ands	r3, r1
 800b4f2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b4f4:	68f8      	ldr	r0, [r7, #12]
 800b4f6:	f000 f871 	bl	800b5dc <RTC_ExitInitMode>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	22ff      	movs	r2, #255	; 0xff
 800b504:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b506:	7cfb      	ldrb	r3, [r7, #19]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d103      	bne.n	800b514 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b51c:	7cfb      	ldrb	r3, [r7, #19]


}
 800b51e:	4618      	mov	r0, r3
 800b520:	371c      	adds	r7, #28
 800b522:	46bd      	mov	sp, r7
 800b524:	bd90      	pop	{r4, r7, pc}
 800b526:	bf00      	nop
 800b528:	00ffff3f 	.word	0x00ffff3f

0800b52c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a0d      	ldr	r2, [pc, #52]	; (800b570 <HAL_RTC_WaitForSynchro+0x44>)
 800b53a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800b53c:	f7f7 f8a0 	bl	8002680 <HAL_GetTick>
 800b540:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b542:	e009      	b.n	800b558 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b544:	f7f7 f89c 	bl	8002680 <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b552:	d901      	bls.n	800b558 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800b554:	2303      	movs	r3, #3
 800b556:	e007      	b.n	800b568 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	f003 0320 	and.w	r3, r3, #32
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0ee      	beq.n	800b544 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	0003ff5f 	.word	0x0003ff5f

0800b574 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b57c:	2300      	movs	r3, #0
 800b57e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d120      	bne.n	800b5d0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b596:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b598:	f7f7 f872 	bl	8002680 <HAL_GetTick>
 800b59c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b59e:	e00d      	b.n	800b5bc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b5a0:	f7f7 f86e 	bl	8002680 <HAL_GetTick>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b5ae:	d905      	bls.n	800b5bc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2203      	movs	r2, #3
 800b5b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d102      	bne.n	800b5d0 <RTC_EnterInitMode+0x5c>
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	2b03      	cmp	r3, #3
 800b5ce:	d1e7      	bne.n	800b5a0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
	...

0800b5dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800b5e8:	4b1a      	ldr	r3, [pc, #104]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	4a19      	ldr	r2, [pc, #100]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b5ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5f2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b5f4:	4b17      	ldr	r3, [pc, #92]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	f003 0320 	and.w	r3, r3, #32
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10c      	bne.n	800b61a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff ff93 	bl	800b52c <HAL_RTC_WaitForSynchro>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d01e      	beq.n	800b64a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2203      	movs	r2, #3
 800b610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b614:	2303      	movs	r3, #3
 800b616:	73fb      	strb	r3, [r7, #15]
 800b618:	e017      	b.n	800b64a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b61a:	4b0e      	ldr	r3, [pc, #56]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	4a0d      	ldr	r2, [pc, #52]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b620:	f023 0320 	bic.w	r3, r3, #32
 800b624:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7ff ff80 	bl	800b52c <HAL_RTC_WaitForSynchro>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d005      	beq.n	800b63e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2203      	movs	r2, #3
 800b636:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b63e:	4b05      	ldr	r3, [pc, #20]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	4a04      	ldr	r2, [pc, #16]	; (800b654 <RTC_ExitInitMode+0x78>)
 800b644:	f043 0320 	orr.w	r3, r3, #32
 800b648:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	58004000 	.word	0x58004000

0800b658 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b662:	2300      	movs	r3, #0
 800b664:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800b666:	79fb      	ldrb	r3, [r7, #7]
 800b668:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800b66a:	e005      	b.n	800b678 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	3301      	adds	r3, #1
 800b670:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800b672:	7afb      	ldrb	r3, [r7, #11]
 800b674:	3b0a      	subs	r3, #10
 800b676:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800b678:	7afb      	ldrb	r3, [r7, #11]
 800b67a:	2b09      	cmp	r3, #9
 800b67c:	d8f6      	bhi.n	800b66c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	b2db      	uxtb	r3, r3
 800b682:	011b      	lsls	r3, r3, #4
 800b684:	b2da      	uxtb	r2, r3
 800b686:	7afb      	ldrb	r3, [r7, #11]
 800b688:	4313      	orrs	r3, r2
 800b68a:	b2db      	uxtb	r3, r3
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d101      	bne.n	800b6aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e10f      	b.n	800b8ca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a87      	ldr	r2, [pc, #540]	; (800b8d4 <HAL_SPI_Init+0x23c>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d00f      	beq.n	800b6da <HAL_SPI_Init+0x42>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a86      	ldr	r2, [pc, #536]	; (800b8d8 <HAL_SPI_Init+0x240>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d00a      	beq.n	800b6da <HAL_SPI_Init+0x42>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a84      	ldr	r2, [pc, #528]	; (800b8dc <HAL_SPI_Init+0x244>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d005      	beq.n	800b6da <HAL_SPI_Init+0x42>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	2b0f      	cmp	r3, #15
 800b6d4:	d901      	bls.n	800b6da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e0f7      	b.n	800b8ca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 f900 	bl	800b8e0 <SPI_GetPacketSize>
 800b6e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a7b      	ldr	r2, [pc, #492]	; (800b8d4 <HAL_SPI_Init+0x23c>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d00c      	beq.n	800b706 <HAL_SPI_Init+0x6e>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a79      	ldr	r2, [pc, #484]	; (800b8d8 <HAL_SPI_Init+0x240>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d007      	beq.n	800b706 <HAL_SPI_Init+0x6e>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a78      	ldr	r2, [pc, #480]	; (800b8dc <HAL_SPI_Init+0x244>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d002      	beq.n	800b706 <HAL_SPI_Init+0x6e>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b08      	cmp	r3, #8
 800b704:	d811      	bhi.n	800b72a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b70a:	4a72      	ldr	r2, [pc, #456]	; (800b8d4 <HAL_SPI_Init+0x23c>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d009      	beq.n	800b724 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a70      	ldr	r2, [pc, #448]	; (800b8d8 <HAL_SPI_Init+0x240>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d004      	beq.n	800b724 <HAL_SPI_Init+0x8c>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a6f      	ldr	r2, [pc, #444]	; (800b8dc <HAL_SPI_Init+0x244>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d104      	bne.n	800b72e <HAL_SPI_Init+0x96>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b10      	cmp	r3, #16
 800b728:	d901      	bls.n	800b72e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	e0cd      	b.n	800b8ca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	d106      	bne.n	800b748 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7f5 ffc4 	bl	80016d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2202      	movs	r2, #2
 800b74c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f022 0201 	bic.w	r2, r2, #1
 800b75e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b76a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	699b      	ldr	r3, [r3, #24]
 800b770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b774:	d119      	bne.n	800b7aa <HAL_SPI_Init+0x112>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b77e:	d103      	bne.n	800b788 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b784:	2b00      	cmp	r3, #0
 800b786:	d008      	beq.n	800b79a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10c      	bne.n	800b7aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b798:	d107      	bne.n	800b7aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b7a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00f      	beq.n	800b7d6 <HAL_SPI_Init+0x13e>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	2b06      	cmp	r3, #6
 800b7bc:	d90b      	bls.n	800b7d6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	430a      	orrs	r2, r1
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	e007      	b.n	800b7e6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b7e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	69da      	ldr	r2, [r3, #28]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ee:	431a      	orrs	r2, r3
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	431a      	orrs	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f8:	ea42 0103 	orr.w	r1, r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	68da      	ldr	r2, [r3, #12]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	430a      	orrs	r2, r1
 800b806:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	431a      	orrs	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	431a      	orrs	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	431a      	orrs	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	431a      	orrs	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	695b      	ldr	r3, [r3, #20]
 800b828:	431a      	orrs	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a1b      	ldr	r3, [r3, #32]
 800b82e:	431a      	orrs	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	431a      	orrs	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b83a:	431a      	orrs	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	431a      	orrs	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b846:	ea42 0103 	orr.w	r1, r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	430a      	orrs	r2, r1
 800b854:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d113      	bne.n	800b886 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b870:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b884:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f022 0201 	bic.w	r2, r2, #1
 800b894:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00a      	beq.n	800b8b8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	430a      	orrs	r2, r1
 800b8b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	40013000 	.word	0x40013000
 800b8d8:	40003800 	.word	0x40003800
 800b8dc:	40003c00 	.word	0x40003c00

0800b8e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ec:	095b      	lsrs	r3, r3, #5
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	3307      	adds	r3, #7
 800b8fe:	08db      	lsrs	r3, r3, #3
 800b900:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	fb02 f303 	mul.w	r3, r2, r3
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b082      	sub	sp, #8
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d101      	bne.n	800b928 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	e049      	b.n	800b9bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	2b00      	cmp	r3, #0
 800b932:	d106      	bne.n	800b942 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f7f6 fa99 	bl	8001e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2202      	movs	r2, #2
 800b946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	3304      	adds	r3, #4
 800b952:	4619      	mov	r1, r3
 800b954:	4610      	mov	r0, r2
 800b956:	f000 fda3 	bl	800c4a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2201      	movs	r2, #1
 800b996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d001      	beq.n	800b9dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e054      	b.n	800ba86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2202      	movs	r2, #2
 800b9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68da      	ldr	r2, [r3, #12]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f042 0201 	orr.w	r2, r2, #1
 800b9f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a26      	ldr	r2, [pc, #152]	; (800ba94 <HAL_TIM_Base_Start_IT+0xd0>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d022      	beq.n	800ba44 <HAL_TIM_Base_Start_IT+0x80>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba06:	d01d      	beq.n	800ba44 <HAL_TIM_Base_Start_IT+0x80>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a22      	ldr	r2, [pc, #136]	; (800ba98 <HAL_TIM_Base_Start_IT+0xd4>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d018      	beq.n	800ba44 <HAL_TIM_Base_Start_IT+0x80>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a21      	ldr	r2, [pc, #132]	; (800ba9c <HAL_TIM_Base_Start_IT+0xd8>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d013      	beq.n	800ba44 <HAL_TIM_Base_Start_IT+0x80>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a1f      	ldr	r2, [pc, #124]	; (800baa0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d00e      	beq.n	800ba44 <HAL_TIM_Base_Start_IT+0x80>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a1e      	ldr	r2, [pc, #120]	; (800baa4 <HAL_TIM_Base_Start_IT+0xe0>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d009      	beq.n	800ba44 <HAL_TIM_Base_Start_IT+0x80>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a1c      	ldr	r2, [pc, #112]	; (800baa8 <HAL_TIM_Base_Start_IT+0xe4>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d004      	beq.n	800ba44 <HAL_TIM_Base_Start_IT+0x80>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a1b      	ldr	r2, [pc, #108]	; (800baac <HAL_TIM_Base_Start_IT+0xe8>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d115      	bne.n	800ba70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	689a      	ldr	r2, [r3, #8]
 800ba4a:	4b19      	ldr	r3, [pc, #100]	; (800bab0 <HAL_TIM_Base_Start_IT+0xec>)
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2b06      	cmp	r3, #6
 800ba54:	d015      	beq.n	800ba82 <HAL_TIM_Base_Start_IT+0xbe>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba5c:	d011      	beq.n	800ba82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f042 0201 	orr.w	r2, r2, #1
 800ba6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba6e:	e008      	b.n	800ba82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f042 0201 	orr.w	r2, r2, #1
 800ba7e:	601a      	str	r2, [r3, #0]
 800ba80:	e000      	b.n	800ba84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	40010000 	.word	0x40010000
 800ba98:	40000400 	.word	0x40000400
 800ba9c:	40000800 	.word	0x40000800
 800baa0:	40000c00 	.word	0x40000c00
 800baa4:	40010400 	.word	0x40010400
 800baa8:	40001800 	.word	0x40001800
 800baac:	40014000 	.word	0x40014000
 800bab0:	00010007 	.word	0x00010007

0800bab4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800babe:	2300      	movs	r3, #0
 800bac0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d109      	bne.n	800badc <HAL_TIM_OC_Start_IT+0x28>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	bf14      	ite	ne
 800bad4:	2301      	movne	r3, #1
 800bad6:	2300      	moveq	r3, #0
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	e03c      	b.n	800bb56 <HAL_TIM_OC_Start_IT+0xa2>
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	2b04      	cmp	r3, #4
 800bae0:	d109      	bne.n	800baf6 <HAL_TIM_OC_Start_IT+0x42>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b01      	cmp	r3, #1
 800baec:	bf14      	ite	ne
 800baee:	2301      	movne	r3, #1
 800baf0:	2300      	moveq	r3, #0
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	e02f      	b.n	800bb56 <HAL_TIM_OC_Start_IT+0xa2>
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b08      	cmp	r3, #8
 800bafa:	d109      	bne.n	800bb10 <HAL_TIM_OC_Start_IT+0x5c>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	bf14      	ite	ne
 800bb08:	2301      	movne	r3, #1
 800bb0a:	2300      	moveq	r3, #0
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	e022      	b.n	800bb56 <HAL_TIM_OC_Start_IT+0xa2>
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2b0c      	cmp	r3, #12
 800bb14:	d109      	bne.n	800bb2a <HAL_TIM_OC_Start_IT+0x76>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	bf14      	ite	ne
 800bb22:	2301      	movne	r3, #1
 800bb24:	2300      	moveq	r3, #0
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	e015      	b.n	800bb56 <HAL_TIM_OC_Start_IT+0xa2>
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	2b10      	cmp	r3, #16
 800bb2e:	d109      	bne.n	800bb44 <HAL_TIM_OC_Start_IT+0x90>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	bf14      	ite	ne
 800bb3c:	2301      	movne	r3, #1
 800bb3e:	2300      	moveq	r3, #0
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	e008      	b.n	800bb56 <HAL_TIM_OC_Start_IT+0xa2>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	bf14      	ite	ne
 800bb50:	2301      	movne	r3, #1
 800bb52:	2300      	moveq	r3, #0
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e0ec      	b.n	800bd38 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d104      	bne.n	800bb6e <HAL_TIM_OC_Start_IT+0xba>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2202      	movs	r2, #2
 800bb68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb6c:	e023      	b.n	800bbb6 <HAL_TIM_OC_Start_IT+0x102>
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	2b04      	cmp	r3, #4
 800bb72:	d104      	bne.n	800bb7e <HAL_TIM_OC_Start_IT+0xca>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2202      	movs	r2, #2
 800bb78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb7c:	e01b      	b.n	800bbb6 <HAL_TIM_OC_Start_IT+0x102>
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	d104      	bne.n	800bb8e <HAL_TIM_OC_Start_IT+0xda>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2202      	movs	r2, #2
 800bb88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb8c:	e013      	b.n	800bbb6 <HAL_TIM_OC_Start_IT+0x102>
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b0c      	cmp	r3, #12
 800bb92:	d104      	bne.n	800bb9e <HAL_TIM_OC_Start_IT+0xea>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2202      	movs	r2, #2
 800bb98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb9c:	e00b      	b.n	800bbb6 <HAL_TIM_OC_Start_IT+0x102>
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	2b10      	cmp	r3, #16
 800bba2:	d104      	bne.n	800bbae <HAL_TIM_OC_Start_IT+0xfa>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2202      	movs	r2, #2
 800bba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbac:	e003      	b.n	800bbb6 <HAL_TIM_OC_Start_IT+0x102>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2202      	movs	r2, #2
 800bbb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2b0c      	cmp	r3, #12
 800bbba:	d841      	bhi.n	800bc40 <HAL_TIM_OC_Start_IT+0x18c>
 800bbbc:	a201      	add	r2, pc, #4	; (adr r2, 800bbc4 <HAL_TIM_OC_Start_IT+0x110>)
 800bbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc2:	bf00      	nop
 800bbc4:	0800bbf9 	.word	0x0800bbf9
 800bbc8:	0800bc41 	.word	0x0800bc41
 800bbcc:	0800bc41 	.word	0x0800bc41
 800bbd0:	0800bc41 	.word	0x0800bc41
 800bbd4:	0800bc0b 	.word	0x0800bc0b
 800bbd8:	0800bc41 	.word	0x0800bc41
 800bbdc:	0800bc41 	.word	0x0800bc41
 800bbe0:	0800bc41 	.word	0x0800bc41
 800bbe4:	0800bc1d 	.word	0x0800bc1d
 800bbe8:	0800bc41 	.word	0x0800bc41
 800bbec:	0800bc41 	.word	0x0800bc41
 800bbf0:	0800bc41 	.word	0x0800bc41
 800bbf4:	0800bc2f 	.word	0x0800bc2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68da      	ldr	r2, [r3, #12]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f042 0202 	orr.w	r2, r2, #2
 800bc06:	60da      	str	r2, [r3, #12]
      break;
 800bc08:	e01d      	b.n	800bc46 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68da      	ldr	r2, [r3, #12]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f042 0204 	orr.w	r2, r2, #4
 800bc18:	60da      	str	r2, [r3, #12]
      break;
 800bc1a:	e014      	b.n	800bc46 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	68da      	ldr	r2, [r3, #12]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f042 0208 	orr.w	r2, r2, #8
 800bc2a:	60da      	str	r2, [r3, #12]
      break;
 800bc2c:	e00b      	b.n	800bc46 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68da      	ldr	r2, [r3, #12]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f042 0210 	orr.w	r2, r2, #16
 800bc3c:	60da      	str	r2, [r3, #12]
      break;
 800bc3e:	e002      	b.n	800bc46 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	73fb      	strb	r3, [r7, #15]
      break;
 800bc44:	bf00      	nop
  }

  if (status == HAL_OK)
 800bc46:	7bfb      	ldrb	r3, [r7, #15]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d174      	bne.n	800bd36 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2201      	movs	r2, #1
 800bc52:	6839      	ldr	r1, [r7, #0]
 800bc54:	4618      	mov	r0, r3
 800bc56:	f001 f83d 	bl	800ccd4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a38      	ldr	r2, [pc, #224]	; (800bd40 <HAL_TIM_OC_Start_IT+0x28c>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d013      	beq.n	800bc8c <HAL_TIM_OC_Start_IT+0x1d8>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a36      	ldr	r2, [pc, #216]	; (800bd44 <HAL_TIM_OC_Start_IT+0x290>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d00e      	beq.n	800bc8c <HAL_TIM_OC_Start_IT+0x1d8>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a35      	ldr	r2, [pc, #212]	; (800bd48 <HAL_TIM_OC_Start_IT+0x294>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d009      	beq.n	800bc8c <HAL_TIM_OC_Start_IT+0x1d8>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a33      	ldr	r2, [pc, #204]	; (800bd4c <HAL_TIM_OC_Start_IT+0x298>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d004      	beq.n	800bc8c <HAL_TIM_OC_Start_IT+0x1d8>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a32      	ldr	r2, [pc, #200]	; (800bd50 <HAL_TIM_OC_Start_IT+0x29c>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d101      	bne.n	800bc90 <HAL_TIM_OC_Start_IT+0x1dc>
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e000      	b.n	800bc92 <HAL_TIM_OC_Start_IT+0x1de>
 800bc90:	2300      	movs	r3, #0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d007      	beq.n	800bca6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a25      	ldr	r2, [pc, #148]	; (800bd40 <HAL_TIM_OC_Start_IT+0x28c>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d022      	beq.n	800bcf6 <HAL_TIM_OC_Start_IT+0x242>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcb8:	d01d      	beq.n	800bcf6 <HAL_TIM_OC_Start_IT+0x242>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a25      	ldr	r2, [pc, #148]	; (800bd54 <HAL_TIM_OC_Start_IT+0x2a0>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d018      	beq.n	800bcf6 <HAL_TIM_OC_Start_IT+0x242>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a23      	ldr	r2, [pc, #140]	; (800bd58 <HAL_TIM_OC_Start_IT+0x2a4>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d013      	beq.n	800bcf6 <HAL_TIM_OC_Start_IT+0x242>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a22      	ldr	r2, [pc, #136]	; (800bd5c <HAL_TIM_OC_Start_IT+0x2a8>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d00e      	beq.n	800bcf6 <HAL_TIM_OC_Start_IT+0x242>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a19      	ldr	r2, [pc, #100]	; (800bd44 <HAL_TIM_OC_Start_IT+0x290>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d009      	beq.n	800bcf6 <HAL_TIM_OC_Start_IT+0x242>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a1e      	ldr	r2, [pc, #120]	; (800bd60 <HAL_TIM_OC_Start_IT+0x2ac>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d004      	beq.n	800bcf6 <HAL_TIM_OC_Start_IT+0x242>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a15      	ldr	r2, [pc, #84]	; (800bd48 <HAL_TIM_OC_Start_IT+0x294>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d115      	bne.n	800bd22 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	689a      	ldr	r2, [r3, #8]
 800bcfc:	4b19      	ldr	r3, [pc, #100]	; (800bd64 <HAL_TIM_OC_Start_IT+0x2b0>)
 800bcfe:	4013      	ands	r3, r2
 800bd00:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	2b06      	cmp	r3, #6
 800bd06:	d015      	beq.n	800bd34 <HAL_TIM_OC_Start_IT+0x280>
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd0e:	d011      	beq.n	800bd34 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f042 0201 	orr.w	r2, r2, #1
 800bd1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd20:	e008      	b.n	800bd34 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f042 0201 	orr.w	r2, r2, #1
 800bd30:	601a      	str	r2, [r3, #0]
 800bd32:	e000      	b.n	800bd36 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	40010000 	.word	0x40010000
 800bd44:	40010400 	.word	0x40010400
 800bd48:	40014000 	.word	0x40014000
 800bd4c:	40014400 	.word	0x40014400
 800bd50:	40014800 	.word	0x40014800
 800bd54:	40000400 	.word	0x40000400
 800bd58:	40000800 	.word	0x40000800
 800bd5c:	40000c00 	.word	0x40000c00
 800bd60:	40001800 	.word	0x40001800
 800bd64:	00010007 	.word	0x00010007

0800bd68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e049      	b.n	800be0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d106      	bne.n	800bd94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f841 	bl	800be16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2202      	movs	r2, #2
 800bd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	3304      	adds	r3, #4
 800bda4:	4619      	mov	r1, r3
 800bda6:	4610      	mov	r0, r2
 800bda8:	f000 fb7a 	bl	800c4a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be16:	b480      	push	{r7}
 800be18:	b083      	sub	sp, #12
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be1e:	bf00      	nop
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	f003 0302 	and.w	r3, r3, #2
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d020      	beq.n	800be8e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f003 0302 	and.w	r3, r3, #2
 800be52:	2b00      	cmp	r3, #0
 800be54:	d01b      	beq.n	800be8e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f06f 0202 	mvn.w	r2, #2
 800be5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	f003 0303 	and.w	r3, r3, #3
 800be70:	2b00      	cmp	r3, #0
 800be72:	d003      	beq.n	800be7c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 faf5 	bl	800c464 <HAL_TIM_IC_CaptureCallback>
 800be7a:	e005      	b.n	800be88 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fae7 	bl	800c450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 faf8 	bl	800c478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	f003 0304 	and.w	r3, r3, #4
 800be94:	2b00      	cmp	r3, #0
 800be96:	d020      	beq.n	800beda <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f003 0304 	and.w	r3, r3, #4
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d01b      	beq.n	800beda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f06f 0204 	mvn.w	r2, #4
 800beaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2202      	movs	r2, #2
 800beb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	699b      	ldr	r3, [r3, #24]
 800beb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d003      	beq.n	800bec8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 facf 	bl	800c464 <HAL_TIM_IC_CaptureCallback>
 800bec6:	e005      	b.n	800bed4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 fac1 	bl	800c450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fad2 	bl	800c478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	f003 0308 	and.w	r3, r3, #8
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d020      	beq.n	800bf26 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f003 0308 	and.w	r3, r3, #8
 800beea:	2b00      	cmp	r3, #0
 800beec:	d01b      	beq.n	800bf26 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f06f 0208 	mvn.w	r2, #8
 800bef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2204      	movs	r2, #4
 800befc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	69db      	ldr	r3, [r3, #28]
 800bf04:	f003 0303 	and.w	r3, r3, #3
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d003      	beq.n	800bf14 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 faa9 	bl	800c464 <HAL_TIM_IC_CaptureCallback>
 800bf12:	e005      	b.n	800bf20 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fa9b 	bl	800c450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 faac 	bl	800c478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	f003 0310 	and.w	r3, r3, #16
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d020      	beq.n	800bf72 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f003 0310 	and.w	r3, r3, #16
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d01b      	beq.n	800bf72 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f06f 0210 	mvn.w	r2, #16
 800bf42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2208      	movs	r2, #8
 800bf48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	69db      	ldr	r3, [r3, #28]
 800bf50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d003      	beq.n	800bf60 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fa83 	bl	800c464 <HAL_TIM_IC_CaptureCallback>
 800bf5e:	e005      	b.n	800bf6c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 fa75 	bl	800c450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fa86 	bl	800c478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	f003 0301 	and.w	r3, r3, #1
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00c      	beq.n	800bf96 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f003 0301 	and.w	r3, r3, #1
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d007      	beq.n	800bf96 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f06f 0201 	mvn.w	r2, #1
 800bf8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f7f5 fa03 	bl	800139c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d104      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00c      	beq.n	800bfc4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d007      	beq.n	800bfc4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800bfbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 ffc4 	bl	800cf4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00c      	beq.n	800bfe8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d007      	beq.n	800bfe8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bfe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 ffbc 	bl	800cf60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00c      	beq.n	800c00c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d007      	beq.n	800c00c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fa40 	bl	800c48c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	f003 0320 	and.w	r3, r3, #32
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00c      	beq.n	800c030 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f003 0320 	and.w	r3, r3, #32
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d007      	beq.n	800c030 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f06f 0220 	mvn.w	r2, #32
 800c028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 ff84 	bl	800cf38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c030:	bf00      	nop
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d101      	bne.n	800c056 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c052:	2302      	movs	r3, #2
 800c054:	e0ff      	b.n	800c256 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2201      	movs	r2, #1
 800c05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2b14      	cmp	r3, #20
 800c062:	f200 80f0 	bhi.w	800c246 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c066:	a201      	add	r2, pc, #4	; (adr r2, 800c06c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06c:	0800c0c1 	.word	0x0800c0c1
 800c070:	0800c247 	.word	0x0800c247
 800c074:	0800c247 	.word	0x0800c247
 800c078:	0800c247 	.word	0x0800c247
 800c07c:	0800c101 	.word	0x0800c101
 800c080:	0800c247 	.word	0x0800c247
 800c084:	0800c247 	.word	0x0800c247
 800c088:	0800c247 	.word	0x0800c247
 800c08c:	0800c143 	.word	0x0800c143
 800c090:	0800c247 	.word	0x0800c247
 800c094:	0800c247 	.word	0x0800c247
 800c098:	0800c247 	.word	0x0800c247
 800c09c:	0800c183 	.word	0x0800c183
 800c0a0:	0800c247 	.word	0x0800c247
 800c0a4:	0800c247 	.word	0x0800c247
 800c0a8:	0800c247 	.word	0x0800c247
 800c0ac:	0800c1c5 	.word	0x0800c1c5
 800c0b0:	0800c247 	.word	0x0800c247
 800c0b4:	0800c247 	.word	0x0800c247
 800c0b8:	0800c247 	.word	0x0800c247
 800c0bc:	0800c205 	.word	0x0800c205
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	68b9      	ldr	r1, [r7, #8]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 fa90 	bl	800c5ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	699a      	ldr	r2, [r3, #24]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f042 0208 	orr.w	r2, r2, #8
 800c0da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	699a      	ldr	r2, [r3, #24]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f022 0204 	bic.w	r2, r2, #4
 800c0ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6999      	ldr	r1, [r3, #24]
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	691a      	ldr	r2, [r3, #16]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	430a      	orrs	r2, r1
 800c0fc:	619a      	str	r2, [r3, #24]
      break;
 800c0fe:	e0a5      	b.n	800c24c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68b9      	ldr	r1, [r7, #8]
 800c106:	4618      	mov	r0, r3
 800c108:	f000 fb00 	bl	800c70c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	699a      	ldr	r2, [r3, #24]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c11a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	699a      	ldr	r2, [r3, #24]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c12a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	6999      	ldr	r1, [r3, #24]
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	021a      	lsls	r2, r3, #8
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	430a      	orrs	r2, r1
 800c13e:	619a      	str	r2, [r3, #24]
      break;
 800c140:	e084      	b.n	800c24c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	68b9      	ldr	r1, [r7, #8]
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 fb69 	bl	800c820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	69da      	ldr	r2, [r3, #28]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f042 0208 	orr.w	r2, r2, #8
 800c15c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	69da      	ldr	r2, [r3, #28]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f022 0204 	bic.w	r2, r2, #4
 800c16c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	69d9      	ldr	r1, [r3, #28]
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	691a      	ldr	r2, [r3, #16]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	430a      	orrs	r2, r1
 800c17e:	61da      	str	r2, [r3, #28]
      break;
 800c180:	e064      	b.n	800c24c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68b9      	ldr	r1, [r7, #8]
 800c188:	4618      	mov	r0, r3
 800c18a:	f000 fbd1 	bl	800c930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	69da      	ldr	r2, [r3, #28]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c19c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	69da      	ldr	r2, [r3, #28]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	69d9      	ldr	r1, [r3, #28]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	021a      	lsls	r2, r3, #8
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	61da      	str	r2, [r3, #28]
      break;
 800c1c2:	e043      	b.n	800c24c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	68b9      	ldr	r1, [r7, #8]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 fc1a 	bl	800ca04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f042 0208 	orr.w	r2, r2, #8
 800c1de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f022 0204 	bic.w	r2, r2, #4
 800c1ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	691a      	ldr	r2, [r3, #16]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	430a      	orrs	r2, r1
 800c200:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c202:	e023      	b.n	800c24c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	68b9      	ldr	r1, [r7, #8]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 fc5e 	bl	800cacc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c21e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c22e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	021a      	lsls	r2, r3, #8
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	430a      	orrs	r2, r1
 800c242:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c244:	e002      	b.n	800c24c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c246:	2301      	movs	r3, #1
 800c248:	75fb      	strb	r3, [r7, #23]
      break;
 800c24a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c254:	7dfb      	ldrb	r3, [r7, #23]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop

0800c260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c274:	2b01      	cmp	r3, #1
 800c276:	d101      	bne.n	800c27c <HAL_TIM_ConfigClockSource+0x1c>
 800c278:	2302      	movs	r3, #2
 800c27a:	e0dc      	b.n	800c436 <HAL_TIM_ConfigClockSource+0x1d6>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2201      	movs	r2, #1
 800c280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2202      	movs	r2, #2
 800c288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	4b6a      	ldr	r3, [pc, #424]	; (800c440 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c298:	4013      	ands	r3, r2
 800c29a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	68ba      	ldr	r2, [r7, #8]
 800c2aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a64      	ldr	r2, [pc, #400]	; (800c444 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	f000 80a9 	beq.w	800c40a <HAL_TIM_ConfigClockSource+0x1aa>
 800c2b8:	4a62      	ldr	r2, [pc, #392]	; (800c444 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	f200 80ae 	bhi.w	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c2c0:	4a61      	ldr	r2, [pc, #388]	; (800c448 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	f000 80a1 	beq.w	800c40a <HAL_TIM_ConfigClockSource+0x1aa>
 800c2c8:	4a5f      	ldr	r2, [pc, #380]	; (800c448 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	f200 80a6 	bhi.w	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c2d0:	4a5e      	ldr	r2, [pc, #376]	; (800c44c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	f000 8099 	beq.w	800c40a <HAL_TIM_ConfigClockSource+0x1aa>
 800c2d8:	4a5c      	ldr	r2, [pc, #368]	; (800c44c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	f200 809e 	bhi.w	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c2e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c2e4:	f000 8091 	beq.w	800c40a <HAL_TIM_ConfigClockSource+0x1aa>
 800c2e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c2ec:	f200 8096 	bhi.w	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c2f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2f4:	f000 8089 	beq.w	800c40a <HAL_TIM_ConfigClockSource+0x1aa>
 800c2f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2fc:	f200 808e 	bhi.w	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c304:	d03e      	beq.n	800c384 <HAL_TIM_ConfigClockSource+0x124>
 800c306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c30a:	f200 8087 	bhi.w	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c30e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c312:	f000 8086 	beq.w	800c422 <HAL_TIM_ConfigClockSource+0x1c2>
 800c316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c31a:	d87f      	bhi.n	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c31c:	2b70      	cmp	r3, #112	; 0x70
 800c31e:	d01a      	beq.n	800c356 <HAL_TIM_ConfigClockSource+0xf6>
 800c320:	2b70      	cmp	r3, #112	; 0x70
 800c322:	d87b      	bhi.n	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c324:	2b60      	cmp	r3, #96	; 0x60
 800c326:	d050      	beq.n	800c3ca <HAL_TIM_ConfigClockSource+0x16a>
 800c328:	2b60      	cmp	r3, #96	; 0x60
 800c32a:	d877      	bhi.n	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c32c:	2b50      	cmp	r3, #80	; 0x50
 800c32e:	d03c      	beq.n	800c3aa <HAL_TIM_ConfigClockSource+0x14a>
 800c330:	2b50      	cmp	r3, #80	; 0x50
 800c332:	d873      	bhi.n	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c334:	2b40      	cmp	r3, #64	; 0x40
 800c336:	d058      	beq.n	800c3ea <HAL_TIM_ConfigClockSource+0x18a>
 800c338:	2b40      	cmp	r3, #64	; 0x40
 800c33a:	d86f      	bhi.n	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c33c:	2b30      	cmp	r3, #48	; 0x30
 800c33e:	d064      	beq.n	800c40a <HAL_TIM_ConfigClockSource+0x1aa>
 800c340:	2b30      	cmp	r3, #48	; 0x30
 800c342:	d86b      	bhi.n	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c344:	2b20      	cmp	r3, #32
 800c346:	d060      	beq.n	800c40a <HAL_TIM_ConfigClockSource+0x1aa>
 800c348:	2b20      	cmp	r3, #32
 800c34a:	d867      	bhi.n	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d05c      	beq.n	800c40a <HAL_TIM_ConfigClockSource+0x1aa>
 800c350:	2b10      	cmp	r3, #16
 800c352:	d05a      	beq.n	800c40a <HAL_TIM_ConfigClockSource+0x1aa>
 800c354:	e062      	b.n	800c41c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6818      	ldr	r0, [r3, #0]
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	6899      	ldr	r1, [r3, #8]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	f000 fc95 	bl	800cc94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	609a      	str	r2, [r3, #8]
      break;
 800c382:	e04f      	b.n	800c424 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6818      	ldr	r0, [r3, #0]
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	6899      	ldr	r1, [r3, #8]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	685a      	ldr	r2, [r3, #4]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	f000 fc7e 	bl	800cc94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	689a      	ldr	r2, [r3, #8]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3a6:	609a      	str	r2, [r3, #8]
      break;
 800c3a8:	e03c      	b.n	800c424 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6818      	ldr	r0, [r3, #0]
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	6859      	ldr	r1, [r3, #4]
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	f000 fbee 	bl	800cb98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2150      	movs	r1, #80	; 0x50
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f000 fc48 	bl	800cc58 <TIM_ITRx_SetConfig>
      break;
 800c3c8:	e02c      	b.n	800c424 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6818      	ldr	r0, [r3, #0]
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	6859      	ldr	r1, [r3, #4]
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f000 fc0d 	bl	800cbf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2160      	movs	r1, #96	; 0x60
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f000 fc38 	bl	800cc58 <TIM_ITRx_SetConfig>
      break;
 800c3e8:	e01c      	b.n	800c424 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6818      	ldr	r0, [r3, #0]
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	6859      	ldr	r1, [r3, #4]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f000 fbce 	bl	800cb98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2140      	movs	r1, #64	; 0x40
 800c402:	4618      	mov	r0, r3
 800c404:	f000 fc28 	bl	800cc58 <TIM_ITRx_SetConfig>
      break;
 800c408:	e00c      	b.n	800c424 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4619      	mov	r1, r3
 800c414:	4610      	mov	r0, r2
 800c416:	f000 fc1f 	bl	800cc58 <TIM_ITRx_SetConfig>
      break;
 800c41a:	e003      	b.n	800c424 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	73fb      	strb	r3, [r7, #15]
      break;
 800c420:	e000      	b.n	800c424 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c434:	7bfb      	ldrb	r3, [r7, #15]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	ffceff88 	.word	0xffceff88
 800c444:	00100040 	.word	0x00100040
 800c448:	00100030 	.word	0x00100030
 800c44c:	00100020 	.word	0x00100020

0800c450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c458:	bf00      	nop
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4a46      	ldr	r2, [pc, #280]	; (800c5cc <TIM_Base_SetConfig+0x12c>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d013      	beq.n	800c4e0 <TIM_Base_SetConfig+0x40>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4be:	d00f      	beq.n	800c4e0 <TIM_Base_SetConfig+0x40>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a43      	ldr	r2, [pc, #268]	; (800c5d0 <TIM_Base_SetConfig+0x130>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d00b      	beq.n	800c4e0 <TIM_Base_SetConfig+0x40>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4a42      	ldr	r2, [pc, #264]	; (800c5d4 <TIM_Base_SetConfig+0x134>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d007      	beq.n	800c4e0 <TIM_Base_SetConfig+0x40>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a41      	ldr	r2, [pc, #260]	; (800c5d8 <TIM_Base_SetConfig+0x138>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d003      	beq.n	800c4e0 <TIM_Base_SetConfig+0x40>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a40      	ldr	r2, [pc, #256]	; (800c5dc <TIM_Base_SetConfig+0x13c>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d108      	bne.n	800c4f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4a35      	ldr	r2, [pc, #212]	; (800c5cc <TIM_Base_SetConfig+0x12c>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d01f      	beq.n	800c53a <TIM_Base_SetConfig+0x9a>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c500:	d01b      	beq.n	800c53a <TIM_Base_SetConfig+0x9a>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a32      	ldr	r2, [pc, #200]	; (800c5d0 <TIM_Base_SetConfig+0x130>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d017      	beq.n	800c53a <TIM_Base_SetConfig+0x9a>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a31      	ldr	r2, [pc, #196]	; (800c5d4 <TIM_Base_SetConfig+0x134>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d013      	beq.n	800c53a <TIM_Base_SetConfig+0x9a>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a30      	ldr	r2, [pc, #192]	; (800c5d8 <TIM_Base_SetConfig+0x138>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d00f      	beq.n	800c53a <TIM_Base_SetConfig+0x9a>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a2f      	ldr	r2, [pc, #188]	; (800c5dc <TIM_Base_SetConfig+0x13c>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d00b      	beq.n	800c53a <TIM_Base_SetConfig+0x9a>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4a2e      	ldr	r2, [pc, #184]	; (800c5e0 <TIM_Base_SetConfig+0x140>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d007      	beq.n	800c53a <TIM_Base_SetConfig+0x9a>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a2d      	ldr	r2, [pc, #180]	; (800c5e4 <TIM_Base_SetConfig+0x144>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d003      	beq.n	800c53a <TIM_Base_SetConfig+0x9a>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4a2c      	ldr	r2, [pc, #176]	; (800c5e8 <TIM_Base_SetConfig+0x148>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d108      	bne.n	800c54c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	68db      	ldr	r3, [r3, #12]
 800c546:	68fa      	ldr	r2, [r7, #12]
 800c548:	4313      	orrs	r3, r2
 800c54a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	4313      	orrs	r3, r2
 800c558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	689a      	ldr	r2, [r3, #8]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4a16      	ldr	r2, [pc, #88]	; (800c5cc <TIM_Base_SetConfig+0x12c>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d00f      	beq.n	800c598 <TIM_Base_SetConfig+0xf8>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a18      	ldr	r2, [pc, #96]	; (800c5dc <TIM_Base_SetConfig+0x13c>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d00b      	beq.n	800c598 <TIM_Base_SetConfig+0xf8>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a17      	ldr	r2, [pc, #92]	; (800c5e0 <TIM_Base_SetConfig+0x140>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d007      	beq.n	800c598 <TIM_Base_SetConfig+0xf8>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4a16      	ldr	r2, [pc, #88]	; (800c5e4 <TIM_Base_SetConfig+0x144>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d003      	beq.n	800c598 <TIM_Base_SetConfig+0xf8>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a15      	ldr	r2, [pc, #84]	; (800c5e8 <TIM_Base_SetConfig+0x148>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d103      	bne.n	800c5a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	691a      	ldr	r2, [r3, #16]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	f003 0301 	and.w	r3, r3, #1
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d105      	bne.n	800c5be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	f023 0201 	bic.w	r2, r3, #1
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	611a      	str	r2, [r3, #16]
  }
}
 800c5be:	bf00      	nop
 800c5c0:	3714      	adds	r7, #20
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	40010000 	.word	0x40010000
 800c5d0:	40000400 	.word	0x40000400
 800c5d4:	40000800 	.word	0x40000800
 800c5d8:	40000c00 	.word	0x40000c00
 800c5dc:	40010400 	.word	0x40010400
 800c5e0:	40014000 	.word	0x40014000
 800c5e4:	40014400 	.word	0x40014400
 800c5e8:	40014800 	.word	0x40014800

0800c5ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b087      	sub	sp, #28
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a1b      	ldr	r3, [r3, #32]
 800c5fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6a1b      	ldr	r3, [r3, #32]
 800c600:	f023 0201 	bic.w	r2, r3, #1
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	699b      	ldr	r3, [r3, #24]
 800c612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	4b37      	ldr	r3, [pc, #220]	; (800c6f4 <TIM_OC1_SetConfig+0x108>)
 800c618:	4013      	ands	r3, r2
 800c61a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f023 0303 	bic.w	r3, r3, #3
 800c622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	f023 0302 	bic.w	r3, r3, #2
 800c634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	4313      	orrs	r3, r2
 800c63e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a2d      	ldr	r2, [pc, #180]	; (800c6f8 <TIM_OC1_SetConfig+0x10c>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d00f      	beq.n	800c668 <TIM_OC1_SetConfig+0x7c>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4a2c      	ldr	r2, [pc, #176]	; (800c6fc <TIM_OC1_SetConfig+0x110>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d00b      	beq.n	800c668 <TIM_OC1_SetConfig+0x7c>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a2b      	ldr	r2, [pc, #172]	; (800c700 <TIM_OC1_SetConfig+0x114>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d007      	beq.n	800c668 <TIM_OC1_SetConfig+0x7c>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a2a      	ldr	r2, [pc, #168]	; (800c704 <TIM_OC1_SetConfig+0x118>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d003      	beq.n	800c668 <TIM_OC1_SetConfig+0x7c>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4a29      	ldr	r2, [pc, #164]	; (800c708 <TIM_OC1_SetConfig+0x11c>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d10c      	bne.n	800c682 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	f023 0308 	bic.w	r3, r3, #8
 800c66e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	4313      	orrs	r3, r2
 800c678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	f023 0304 	bic.w	r3, r3, #4
 800c680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a1c      	ldr	r2, [pc, #112]	; (800c6f8 <TIM_OC1_SetConfig+0x10c>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d00f      	beq.n	800c6aa <TIM_OC1_SetConfig+0xbe>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a1b      	ldr	r2, [pc, #108]	; (800c6fc <TIM_OC1_SetConfig+0x110>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d00b      	beq.n	800c6aa <TIM_OC1_SetConfig+0xbe>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a1a      	ldr	r2, [pc, #104]	; (800c700 <TIM_OC1_SetConfig+0x114>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d007      	beq.n	800c6aa <TIM_OC1_SetConfig+0xbe>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a19      	ldr	r2, [pc, #100]	; (800c704 <TIM_OC1_SetConfig+0x118>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d003      	beq.n	800c6aa <TIM_OC1_SetConfig+0xbe>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a18      	ldr	r2, [pc, #96]	; (800c708 <TIM_OC1_SetConfig+0x11c>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d111      	bne.n	800c6ce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	695b      	ldr	r3, [r3, #20]
 800c6be:	693a      	ldr	r2, [r7, #16]
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	699b      	ldr	r3, [r3, #24]
 800c6c8:	693a      	ldr	r2, [r7, #16]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	685a      	ldr	r2, [r3, #4]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	697a      	ldr	r2, [r7, #20]
 800c6e6:	621a      	str	r2, [r3, #32]
}
 800c6e8:	bf00      	nop
 800c6ea:	371c      	adds	r7, #28
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr
 800c6f4:	fffeff8f 	.word	0xfffeff8f
 800c6f8:	40010000 	.word	0x40010000
 800c6fc:	40010400 	.word	0x40010400
 800c700:	40014000 	.word	0x40014000
 800c704:	40014400 	.word	0x40014400
 800c708:	40014800 	.word	0x40014800

0800c70c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a1b      	ldr	r3, [r3, #32]
 800c71a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a1b      	ldr	r3, [r3, #32]
 800c720:	f023 0210 	bic.w	r2, r3, #16
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	699b      	ldr	r3, [r3, #24]
 800c732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	4b34      	ldr	r3, [pc, #208]	; (800c808 <TIM_OC2_SetConfig+0xfc>)
 800c738:	4013      	ands	r3, r2
 800c73a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	021b      	lsls	r3, r3, #8
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f023 0320 	bic.w	r3, r3, #32
 800c756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	011b      	lsls	r3, r3, #4
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	4313      	orrs	r3, r2
 800c762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	4a29      	ldr	r2, [pc, #164]	; (800c80c <TIM_OC2_SetConfig+0x100>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d003      	beq.n	800c774 <TIM_OC2_SetConfig+0x68>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4a28      	ldr	r2, [pc, #160]	; (800c810 <TIM_OC2_SetConfig+0x104>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d10d      	bne.n	800c790 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c77a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	011b      	lsls	r3, r3, #4
 800c782:	697a      	ldr	r2, [r7, #20]
 800c784:	4313      	orrs	r3, r2
 800c786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c78e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a1e      	ldr	r2, [pc, #120]	; (800c80c <TIM_OC2_SetConfig+0x100>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d00f      	beq.n	800c7b8 <TIM_OC2_SetConfig+0xac>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a1d      	ldr	r2, [pc, #116]	; (800c810 <TIM_OC2_SetConfig+0x104>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d00b      	beq.n	800c7b8 <TIM_OC2_SetConfig+0xac>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a1c      	ldr	r2, [pc, #112]	; (800c814 <TIM_OC2_SetConfig+0x108>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d007      	beq.n	800c7b8 <TIM_OC2_SetConfig+0xac>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a1b      	ldr	r2, [pc, #108]	; (800c818 <TIM_OC2_SetConfig+0x10c>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d003      	beq.n	800c7b8 <TIM_OC2_SetConfig+0xac>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a1a      	ldr	r2, [pc, #104]	; (800c81c <TIM_OC2_SetConfig+0x110>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d113      	bne.n	800c7e0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	695b      	ldr	r3, [r3, #20]
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	693a      	ldr	r2, [r7, #16]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	693a      	ldr	r2, [r7, #16]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	693a      	ldr	r2, [r7, #16]
 800c7e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	621a      	str	r2, [r3, #32]
}
 800c7fa:	bf00      	nop
 800c7fc:	371c      	adds	r7, #28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	feff8fff 	.word	0xfeff8fff
 800c80c:	40010000 	.word	0x40010000
 800c810:	40010400 	.word	0x40010400
 800c814:	40014000 	.word	0x40014000
 800c818:	40014400 	.word	0x40014400
 800c81c:	40014800 	.word	0x40014800

0800c820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c820:	b480      	push	{r7}
 800c822:	b087      	sub	sp, #28
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a1b      	ldr	r3, [r3, #32]
 800c82e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	69db      	ldr	r3, [r3, #28]
 800c846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	4b33      	ldr	r3, [pc, #204]	; (800c918 <TIM_OC3_SetConfig+0xf8>)
 800c84c:	4013      	ands	r3, r2
 800c84e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f023 0303 	bic.w	r3, r3, #3
 800c856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	4313      	orrs	r3, r2
 800c860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	021b      	lsls	r3, r3, #8
 800c870:	697a      	ldr	r2, [r7, #20]
 800c872:	4313      	orrs	r3, r2
 800c874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a28      	ldr	r2, [pc, #160]	; (800c91c <TIM_OC3_SetConfig+0xfc>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d003      	beq.n	800c886 <TIM_OC3_SetConfig+0x66>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a27      	ldr	r2, [pc, #156]	; (800c920 <TIM_OC3_SetConfig+0x100>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d10d      	bne.n	800c8a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c88c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	021b      	lsls	r3, r3, #8
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	4313      	orrs	r3, r2
 800c898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4a1d      	ldr	r2, [pc, #116]	; (800c91c <TIM_OC3_SetConfig+0xfc>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d00f      	beq.n	800c8ca <TIM_OC3_SetConfig+0xaa>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	4a1c      	ldr	r2, [pc, #112]	; (800c920 <TIM_OC3_SetConfig+0x100>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d00b      	beq.n	800c8ca <TIM_OC3_SetConfig+0xaa>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4a1b      	ldr	r2, [pc, #108]	; (800c924 <TIM_OC3_SetConfig+0x104>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d007      	beq.n	800c8ca <TIM_OC3_SetConfig+0xaa>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4a1a      	ldr	r2, [pc, #104]	; (800c928 <TIM_OC3_SetConfig+0x108>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d003      	beq.n	800c8ca <TIM_OC3_SetConfig+0xaa>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	4a19      	ldr	r2, [pc, #100]	; (800c92c <TIM_OC3_SetConfig+0x10c>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d113      	bne.n	800c8f2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	695b      	ldr	r3, [r3, #20]
 800c8de:	011b      	lsls	r3, r3, #4
 800c8e0:	693a      	ldr	r2, [r7, #16]
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	699b      	ldr	r3, [r3, #24]
 800c8ea:	011b      	lsls	r3, r3, #4
 800c8ec:	693a      	ldr	r2, [r7, #16]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	693a      	ldr	r2, [r7, #16]
 800c8f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	685a      	ldr	r2, [r3, #4]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	621a      	str	r2, [r3, #32]
}
 800c90c:	bf00      	nop
 800c90e:	371c      	adds	r7, #28
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr
 800c918:	fffeff8f 	.word	0xfffeff8f
 800c91c:	40010000 	.word	0x40010000
 800c920:	40010400 	.word	0x40010400
 800c924:	40014000 	.word	0x40014000
 800c928:	40014400 	.word	0x40014400
 800c92c:	40014800 	.word	0x40014800

0800c930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c930:	b480      	push	{r7}
 800c932:	b087      	sub	sp, #28
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6a1b      	ldr	r3, [r3, #32]
 800c944:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	69db      	ldr	r3, [r3, #28]
 800c956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	4b24      	ldr	r3, [pc, #144]	; (800c9ec <TIM_OC4_SetConfig+0xbc>)
 800c95c:	4013      	ands	r3, r2
 800c95e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	021b      	lsls	r3, r3, #8
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	4313      	orrs	r3, r2
 800c972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c97a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	031b      	lsls	r3, r3, #12
 800c982:	693a      	ldr	r2, [r7, #16]
 800c984:	4313      	orrs	r3, r2
 800c986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	4a19      	ldr	r2, [pc, #100]	; (800c9f0 <TIM_OC4_SetConfig+0xc0>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d00f      	beq.n	800c9b0 <TIM_OC4_SetConfig+0x80>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4a18      	ldr	r2, [pc, #96]	; (800c9f4 <TIM_OC4_SetConfig+0xc4>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d00b      	beq.n	800c9b0 <TIM_OC4_SetConfig+0x80>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a17      	ldr	r2, [pc, #92]	; (800c9f8 <TIM_OC4_SetConfig+0xc8>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d007      	beq.n	800c9b0 <TIM_OC4_SetConfig+0x80>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4a16      	ldr	r2, [pc, #88]	; (800c9fc <TIM_OC4_SetConfig+0xcc>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d003      	beq.n	800c9b0 <TIM_OC4_SetConfig+0x80>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a15      	ldr	r2, [pc, #84]	; (800ca00 <TIM_OC4_SetConfig+0xd0>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d109      	bne.n	800c9c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	695b      	ldr	r3, [r3, #20]
 800c9bc:	019b      	lsls	r3, r3, #6
 800c9be:	697a      	ldr	r2, [r7, #20]
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	685a      	ldr	r2, [r3, #4]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	621a      	str	r2, [r3, #32]
}
 800c9de:	bf00      	nop
 800c9e0:	371c      	adds	r7, #28
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	feff8fff 	.word	0xfeff8fff
 800c9f0:	40010000 	.word	0x40010000
 800c9f4:	40010400 	.word	0x40010400
 800c9f8:	40014000 	.word	0x40014000
 800c9fc:	40014400 	.word	0x40014400
 800ca00:	40014800 	.word	0x40014800

0800ca04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b087      	sub	sp, #28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a1b      	ldr	r3, [r3, #32]
 800ca12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6a1b      	ldr	r3, [r3, #32]
 800ca18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	4b21      	ldr	r3, [pc, #132]	; (800cab4 <TIM_OC5_SetConfig+0xb0>)
 800ca30:	4013      	ands	r3, r2
 800ca32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ca44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	041b      	lsls	r3, r3, #16
 800ca4c:	693a      	ldr	r2, [r7, #16]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4a18      	ldr	r2, [pc, #96]	; (800cab8 <TIM_OC5_SetConfig+0xb4>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d00f      	beq.n	800ca7a <TIM_OC5_SetConfig+0x76>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4a17      	ldr	r2, [pc, #92]	; (800cabc <TIM_OC5_SetConfig+0xb8>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d00b      	beq.n	800ca7a <TIM_OC5_SetConfig+0x76>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a16      	ldr	r2, [pc, #88]	; (800cac0 <TIM_OC5_SetConfig+0xbc>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d007      	beq.n	800ca7a <TIM_OC5_SetConfig+0x76>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a15      	ldr	r2, [pc, #84]	; (800cac4 <TIM_OC5_SetConfig+0xc0>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d003      	beq.n	800ca7a <TIM_OC5_SetConfig+0x76>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a14      	ldr	r2, [pc, #80]	; (800cac8 <TIM_OC5_SetConfig+0xc4>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d109      	bne.n	800ca8e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	695b      	ldr	r3, [r3, #20]
 800ca86:	021b      	lsls	r3, r3, #8
 800ca88:	697a      	ldr	r2, [r7, #20]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	697a      	ldr	r2, [r7, #20]
 800ca92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	685a      	ldr	r2, [r3, #4]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	693a      	ldr	r2, [r7, #16]
 800caa6:	621a      	str	r2, [r3, #32]
}
 800caa8:	bf00      	nop
 800caaa:	371c      	adds	r7, #28
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr
 800cab4:	fffeff8f 	.word	0xfffeff8f
 800cab8:	40010000 	.word	0x40010000
 800cabc:	40010400 	.word	0x40010400
 800cac0:	40014000 	.word	0x40014000
 800cac4:	40014400 	.word	0x40014400
 800cac8:	40014800 	.word	0x40014800

0800cacc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cacc:	b480      	push	{r7}
 800cace:	b087      	sub	sp, #28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6a1b      	ldr	r3, [r3, #32]
 800cae0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800caf4:	68fa      	ldr	r2, [r7, #12]
 800caf6:	4b22      	ldr	r3, [pc, #136]	; (800cb80 <TIM_OC6_SetConfig+0xb4>)
 800caf8:	4013      	ands	r3, r2
 800cafa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	021b      	lsls	r3, r3, #8
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	4313      	orrs	r3, r2
 800cb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	051b      	lsls	r3, r3, #20
 800cb16:	693a      	ldr	r2, [r7, #16]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a19      	ldr	r2, [pc, #100]	; (800cb84 <TIM_OC6_SetConfig+0xb8>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d00f      	beq.n	800cb44 <TIM_OC6_SetConfig+0x78>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a18      	ldr	r2, [pc, #96]	; (800cb88 <TIM_OC6_SetConfig+0xbc>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d00b      	beq.n	800cb44 <TIM_OC6_SetConfig+0x78>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a17      	ldr	r2, [pc, #92]	; (800cb8c <TIM_OC6_SetConfig+0xc0>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d007      	beq.n	800cb44 <TIM_OC6_SetConfig+0x78>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a16      	ldr	r2, [pc, #88]	; (800cb90 <TIM_OC6_SetConfig+0xc4>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d003      	beq.n	800cb44 <TIM_OC6_SetConfig+0x78>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a15      	ldr	r2, [pc, #84]	; (800cb94 <TIM_OC6_SetConfig+0xc8>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d109      	bne.n	800cb58 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	029b      	lsls	r3, r3, #10
 800cb52:	697a      	ldr	r2, [r7, #20]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	685a      	ldr	r2, [r3, #4]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	693a      	ldr	r2, [r7, #16]
 800cb70:	621a      	str	r2, [r3, #32]
}
 800cb72:	bf00      	nop
 800cb74:	371c      	adds	r7, #28
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	feff8fff 	.word	0xfeff8fff
 800cb84:	40010000 	.word	0x40010000
 800cb88:	40010400 	.word	0x40010400
 800cb8c:	40014000 	.word	0x40014000
 800cb90:	40014400 	.word	0x40014400
 800cb94:	40014800 	.word	0x40014800

0800cb98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b087      	sub	sp, #28
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6a1b      	ldr	r3, [r3, #32]
 800cba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	f023 0201 	bic.w	r2, r3, #1
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	011b      	lsls	r3, r3, #4
 800cbc8:	693a      	ldr	r2, [r7, #16]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f023 030a 	bic.w	r3, r3, #10
 800cbd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	697a      	ldr	r2, [r7, #20]
 800cbe8:	621a      	str	r2, [r3, #32]
}
 800cbea:	bf00      	nop
 800cbec:	371c      	adds	r7, #28
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr

0800cbf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbf6:	b480      	push	{r7}
 800cbf8:	b087      	sub	sp, #28
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	60f8      	str	r0, [r7, #12]
 800cbfe:	60b9      	str	r1, [r7, #8]
 800cc00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6a1b      	ldr	r3, [r3, #32]
 800cc0c:	f023 0210 	bic.w	r2, r3, #16
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	699b      	ldr	r3, [r3, #24]
 800cc18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	031b      	lsls	r3, r3, #12
 800cc26:	693a      	ldr	r2, [r7, #16]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	011b      	lsls	r3, r3, #4
 800cc38:	697a      	ldr	r2, [r7, #20]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	621a      	str	r2, [r3, #32]
}
 800cc4a:	bf00      	nop
 800cc4c:	371c      	adds	r7, #28
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
	...

0800cc58 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	689b      	ldr	r3, [r3, #8]
 800cc66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	4b09      	ldr	r3, [pc, #36]	; (800cc90 <TIM_ITRx_SetConfig+0x38>)
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc70:	683a      	ldr	r2, [r7, #0]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	f043 0307 	orr.w	r3, r3, #7
 800cc7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	609a      	str	r2, [r3, #8]
}
 800cc82:	bf00      	nop
 800cc84:	3714      	adds	r7, #20
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	ffcfff8f 	.word	0xffcfff8f

0800cc94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b087      	sub	sp, #28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	021a      	lsls	r2, r3, #8
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	431a      	orrs	r2, r3
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	697a      	ldr	r2, [r7, #20]
 800ccc6:	609a      	str	r2, [r3, #8]
}
 800ccc8:	bf00      	nop
 800ccca:	371c      	adds	r7, #28
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b087      	sub	sp, #28
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	f003 031f 	and.w	r3, r3, #31
 800cce6:	2201      	movs	r2, #1
 800cce8:	fa02 f303 	lsl.w	r3, r2, r3
 800ccec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6a1a      	ldr	r2, [r3, #32]
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	43db      	mvns	r3, r3
 800ccf6:	401a      	ands	r2, r3
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6a1a      	ldr	r2, [r3, #32]
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	f003 031f 	and.w	r3, r3, #31
 800cd06:	6879      	ldr	r1, [r7, #4]
 800cd08:	fa01 f303 	lsl.w	r3, r1, r3
 800cd0c:	431a      	orrs	r2, r3
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	621a      	str	r2, [r3, #32]
}
 800cd12:	bf00      	nop
 800cd14:	371c      	adds	r7, #28
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr
	...

0800cd20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d101      	bne.n	800cd38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd34:	2302      	movs	r3, #2
 800cd36:	e06d      	b.n	800ce14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2202      	movs	r2, #2
 800cd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a30      	ldr	r2, [pc, #192]	; (800ce20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d004      	beq.n	800cd6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a2f      	ldr	r2, [pc, #188]	; (800ce24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d108      	bne.n	800cd7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68fa      	ldr	r2, [r7, #12]
 800cd96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a20      	ldr	r2, [pc, #128]	; (800ce20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d022      	beq.n	800cde8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdaa:	d01d      	beq.n	800cde8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a1d      	ldr	r2, [pc, #116]	; (800ce28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d018      	beq.n	800cde8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a1c      	ldr	r2, [pc, #112]	; (800ce2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d013      	beq.n	800cde8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a1a      	ldr	r2, [pc, #104]	; (800ce30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d00e      	beq.n	800cde8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a15      	ldr	r2, [pc, #84]	; (800ce24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d009      	beq.n	800cde8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a16      	ldr	r2, [pc, #88]	; (800ce34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d004      	beq.n	800cde8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a15      	ldr	r2, [pc, #84]	; (800ce38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d10c      	bne.n	800ce02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2201      	movs	r2, #1
 800ce06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3714      	adds	r7, #20
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr
 800ce20:	40010000 	.word	0x40010000
 800ce24:	40010400 	.word	0x40010400
 800ce28:	40000400 	.word	0x40000400
 800ce2c:	40000800 	.word	0x40000800
 800ce30:	40000c00 	.word	0x40000c00
 800ce34:	40001800 	.word	0x40001800
 800ce38:	40014000 	.word	0x40014000

0800ce3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b085      	sub	sp, #20
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ce46:	2300      	movs	r3, #0
 800ce48:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d101      	bne.n	800ce58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ce54:	2302      	movs	r3, #2
 800ce56:	e065      	b.n	800cf24 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4313      	orrs	r3, r2
 800ce96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	691b      	ldr	r3, [r3, #16]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	695b      	ldr	r3, [r3, #20]
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cebe:	4313      	orrs	r3, r2
 800cec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	699b      	ldr	r3, [r3, #24]
 800cecc:	041b      	lsls	r3, r3, #16
 800cece:	4313      	orrs	r3, r2
 800ced0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a16      	ldr	r2, [pc, #88]	; (800cf30 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d004      	beq.n	800cee6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a14      	ldr	r2, [pc, #80]	; (800cf34 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d115      	bne.n	800cf12 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef0:	051b      	lsls	r3, r3, #20
 800cef2:	4313      	orrs	r3, r2
 800cef4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	69db      	ldr	r3, [r3, #28]
 800cf00:	4313      	orrs	r3, r2
 800cf02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf22:	2300      	movs	r3, #0
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3714      	adds	r7, #20
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr
 800cf30:	40010000 	.word	0x40010000
 800cf34:	40010400 	.word	0x40010400

0800cf38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf40:	bf00      	nop
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d101      	bne.n	800cf86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf82:	2301      	movs	r3, #1
 800cf84:	e042      	b.n	800d00c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d106      	bne.n	800cf9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f7f5 f897 	bl	80020cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2224      	movs	r2, #36	; 0x24
 800cfa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f022 0201 	bic.w	r2, r2, #1
 800cfb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d002      	beq.n	800cfc4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f001 f96a 	bl	800e298 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 fbff 	bl	800d7c8 <UART_SetConfig>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d101      	bne.n	800cfd4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e01b      	b.n	800d00c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	685a      	ldr	r2, [r3, #4]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cfe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	689a      	ldr	r2, [r3, #8]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cff2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f042 0201 	orr.w	r2, r2, #1
 800d002:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f001 f9e9 	bl	800e3dc <UART_CheckIdleState>
 800d00a:	4603      	mov	r3, r0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3708      	adds	r7, #8
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b0ba      	sub	sp, #232	; 0xe8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	69db      	ldr	r3, [r3, #28]
 800d022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d03a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d03e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d042:	4013      	ands	r3, r2
 800d044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d11b      	bne.n	800d088 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d054:	f003 0320 	and.w	r3, r3, #32
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d015      	beq.n	800d088 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d05c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d060:	f003 0320 	and.w	r3, r3, #32
 800d064:	2b00      	cmp	r3, #0
 800d066:	d105      	bne.n	800d074 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d06c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d070:	2b00      	cmp	r3, #0
 800d072:	d009      	beq.n	800d088 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 8377 	beq.w	800d76c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	4798      	blx	r3
      }
      return;
 800d086:	e371      	b.n	800d76c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f000 8123 	beq.w	800d2d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d092:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d096:	4b8d      	ldr	r3, [pc, #564]	; (800d2cc <HAL_UART_IRQHandler+0x2b8>)
 800d098:	4013      	ands	r3, r2
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d106      	bne.n	800d0ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d09e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d0a2:	4b8b      	ldr	r3, [pc, #556]	; (800d2d0 <HAL_UART_IRQHandler+0x2bc>)
 800d0a4:	4013      	ands	r3, r2
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f000 8116 	beq.w	800d2d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0b0:	f003 0301 	and.w	r3, r3, #1
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d011      	beq.n	800d0dc <HAL_UART_IRQHandler+0xc8>
 800d0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00b      	beq.n	800d0dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0d2:	f043 0201 	orr.w	r2, r3, #1
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0e0:	f003 0302 	and.w	r3, r3, #2
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d011      	beq.n	800d10c <HAL_UART_IRQHandler+0xf8>
 800d0e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0ec:	f003 0301 	and.w	r3, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00b      	beq.n	800d10c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2202      	movs	r2, #2
 800d0fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d102:	f043 0204 	orr.w	r2, r3, #4
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d10c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d110:	f003 0304 	and.w	r3, r3, #4
 800d114:	2b00      	cmp	r3, #0
 800d116:	d011      	beq.n	800d13c <HAL_UART_IRQHandler+0x128>
 800d118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d11c:	f003 0301 	and.w	r3, r3, #1
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00b      	beq.n	800d13c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2204      	movs	r2, #4
 800d12a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d132:	f043 0202 	orr.w	r2, r3, #2
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d140:	f003 0308 	and.w	r3, r3, #8
 800d144:	2b00      	cmp	r3, #0
 800d146:	d017      	beq.n	800d178 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d14c:	f003 0320 	and.w	r3, r3, #32
 800d150:	2b00      	cmp	r3, #0
 800d152:	d105      	bne.n	800d160 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d154:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d158:	4b5c      	ldr	r3, [pc, #368]	; (800d2cc <HAL_UART_IRQHandler+0x2b8>)
 800d15a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00b      	beq.n	800d178 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2208      	movs	r2, #8
 800d166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d16e:	f043 0208 	orr.w	r2, r3, #8
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d17c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d180:	2b00      	cmp	r3, #0
 800d182:	d012      	beq.n	800d1aa <HAL_UART_IRQHandler+0x196>
 800d184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00c      	beq.n	800d1aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d198:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1a0:	f043 0220 	orr.w	r2, r3, #32
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f000 82dd 	beq.w	800d770 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1ba:	f003 0320 	and.w	r3, r3, #32
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d013      	beq.n	800d1ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1c6:	f003 0320 	and.w	r3, r3, #32
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d105      	bne.n	800d1da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d007      	beq.n	800d1ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d003      	beq.n	800d1ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1fe:	2b40      	cmp	r3, #64	; 0x40
 800d200:	d005      	beq.n	800d20e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d206:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d054      	beq.n	800d2b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f001 f9fc 	bl	800e60c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d21e:	2b40      	cmp	r3, #64	; 0x40
 800d220:	d146      	bne.n	800d2b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	3308      	adds	r3, #8
 800d228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d230:	e853 3f00 	ldrex	r3, [r3]
 800d234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d23c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	3308      	adds	r3, #8
 800d24a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d24e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d256:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d25a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d25e:	e841 2300 	strex	r3, r2, [r1]
 800d262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d1d9      	bne.n	800d222 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d274:	2b00      	cmp	r3, #0
 800d276:	d017      	beq.n	800d2a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d27e:	4a15      	ldr	r2, [pc, #84]	; (800d2d4 <HAL_UART_IRQHandler+0x2c0>)
 800d280:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d288:	4618      	mov	r0, r3
 800d28a:	f7f8 f9cd 	bl	8005628 <HAL_DMA_Abort_IT>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d019      	beq.n	800d2c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d2a2:	4610      	mov	r0, r2
 800d2a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2a6:	e00f      	b.n	800d2c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 fa77 	bl	800d79c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2ae:	e00b      	b.n	800d2c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 fa73 	bl	800d79c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2b6:	e007      	b.n	800d2c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 fa6f 	bl	800d79c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d2c6:	e253      	b.n	800d770 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2c8:	bf00      	nop
    return;
 800d2ca:	e251      	b.n	800d770 <HAL_UART_IRQHandler+0x75c>
 800d2cc:	10000001 	.word	0x10000001
 800d2d0:	04000120 	.word	0x04000120
 800d2d4:	0800e6d9 	.word	0x0800e6d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	f040 81e7 	bne.w	800d6b0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d2e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2e6:	f003 0310 	and.w	r3, r3, #16
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	f000 81e0 	beq.w	800d6b0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d2f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2f4:	f003 0310 	and.w	r3, r3, #16
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f000 81d9 	beq.w	800d6b0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2210      	movs	r2, #16
 800d304:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d310:	2b40      	cmp	r3, #64	; 0x40
 800d312:	f040 8151 	bne.w	800d5b8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a96      	ldr	r2, [pc, #600]	; (800d578 <HAL_UART_IRQHandler+0x564>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d068      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a93      	ldr	r2, [pc, #588]	; (800d57c <HAL_UART_IRQHandler+0x568>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d061      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a91      	ldr	r2, [pc, #580]	; (800d580 <HAL_UART_IRQHandler+0x56c>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d05a      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a8e      	ldr	r2, [pc, #568]	; (800d584 <HAL_UART_IRQHandler+0x570>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d053      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a8c      	ldr	r2, [pc, #560]	; (800d588 <HAL_UART_IRQHandler+0x574>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d04c      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a89      	ldr	r2, [pc, #548]	; (800d58c <HAL_UART_IRQHandler+0x578>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d045      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a87      	ldr	r2, [pc, #540]	; (800d590 <HAL_UART_IRQHandler+0x57c>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d03e      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a84      	ldr	r2, [pc, #528]	; (800d594 <HAL_UART_IRQHandler+0x580>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d037      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a82      	ldr	r2, [pc, #520]	; (800d598 <HAL_UART_IRQHandler+0x584>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d030      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a7f      	ldr	r2, [pc, #508]	; (800d59c <HAL_UART_IRQHandler+0x588>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d029      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a7d      	ldr	r2, [pc, #500]	; (800d5a0 <HAL_UART_IRQHandler+0x58c>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d022      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a7a      	ldr	r2, [pc, #488]	; (800d5a4 <HAL_UART_IRQHandler+0x590>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d01b      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a78      	ldr	r2, [pc, #480]	; (800d5a8 <HAL_UART_IRQHandler+0x594>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d014      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a75      	ldr	r2, [pc, #468]	; (800d5ac <HAL_UART_IRQHandler+0x598>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d00d      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a73      	ldr	r2, [pc, #460]	; (800d5b0 <HAL_UART_IRQHandler+0x59c>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d006      	beq.n	800d3f6 <HAL_UART_IRQHandler+0x3e2>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a70      	ldr	r2, [pc, #448]	; (800d5b4 <HAL_UART_IRQHandler+0x5a0>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d106      	bne.n	800d404 <HAL_UART_IRQHandler+0x3f0>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	b29b      	uxth	r3, r3
 800d402:	e005      	b.n	800d410 <HAL_UART_IRQHandler+0x3fc>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	b29b      	uxth	r3, r3
 800d410:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d414:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f000 81ab 	beq.w	800d774 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d424:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d428:	429a      	cmp	r2, r3
 800d42a:	f080 81a3 	bcs.w	800d774 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d43e:	69db      	ldr	r3, [r3, #28]
 800d440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d444:	f000 8087 	beq.w	800d556 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d454:	e853 3f00 	ldrex	r3, [r3]
 800d458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d45c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	461a      	mov	r2, r3
 800d46e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d476:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d47e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d482:	e841 2300 	strex	r3, r2, [r1]
 800d486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d48a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1da      	bne.n	800d448 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	3308      	adds	r3, #8
 800d498:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d49a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d49c:	e853 3f00 	ldrex	r3, [r3]
 800d4a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d4a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4a4:	f023 0301 	bic.w	r3, r3, #1
 800d4a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	3308      	adds	r3, #8
 800d4b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d4b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d4ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d4be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d4c2:	e841 2300 	strex	r3, r2, [r1]
 800d4c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d4c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1e1      	bne.n	800d492 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	3308      	adds	r3, #8
 800d4d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4d8:	e853 3f00 	ldrex	r3, [r3]
 800d4dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d4de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3308      	adds	r3, #8
 800d4ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d4f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d4f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d4f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d4fa:	e841 2300 	strex	r3, r2, [r1]
 800d4fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1e3      	bne.n	800d4ce <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2220      	movs	r2, #32
 800d50a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d51c:	e853 3f00 	ldrex	r3, [r3]
 800d520:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d524:	f023 0310 	bic.w	r3, r3, #16
 800d528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	461a      	mov	r2, r3
 800d532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d536:	65bb      	str	r3, [r7, #88]	; 0x58
 800d538:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d53c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d53e:	e841 2300 	strex	r3, r2, [r1]
 800d542:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1e4      	bne.n	800d514 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d550:	4618      	mov	r0, r3
 800d552:	f7f7 fd4b 	bl	8004fec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2202      	movs	r2, #2
 800d55a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d568:	b29b      	uxth	r3, r3
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	4619      	mov	r1, r3
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 f91d 	bl	800d7b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d576:	e0fd      	b.n	800d774 <HAL_UART_IRQHandler+0x760>
 800d578:	40020010 	.word	0x40020010
 800d57c:	40020028 	.word	0x40020028
 800d580:	40020040 	.word	0x40020040
 800d584:	40020058 	.word	0x40020058
 800d588:	40020070 	.word	0x40020070
 800d58c:	40020088 	.word	0x40020088
 800d590:	400200a0 	.word	0x400200a0
 800d594:	400200b8 	.word	0x400200b8
 800d598:	40020410 	.word	0x40020410
 800d59c:	40020428 	.word	0x40020428
 800d5a0:	40020440 	.word	0x40020440
 800d5a4:	40020458 	.word	0x40020458
 800d5a8:	40020470 	.word	0x40020470
 800d5ac:	40020488 	.word	0x40020488
 800d5b0:	400204a0 	.word	0x400204a0
 800d5b4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	1ad3      	subs	r3, r2, r3
 800d5c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f000 80cf 	beq.w	800d778 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d5da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	f000 80ca 	beq.w	800d778 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ec:	e853 3f00 	ldrex	r3, [r3]
 800d5f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d5f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	461a      	mov	r2, r3
 800d602:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d606:	647b      	str	r3, [r7, #68]	; 0x44
 800d608:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d60c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d60e:	e841 2300 	strex	r3, r2, [r1]
 800d612:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1e4      	bne.n	800d5e4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	3308      	adds	r3, #8
 800d620:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d624:	e853 3f00 	ldrex	r3, [r3]
 800d628:	623b      	str	r3, [r7, #32]
   return(result);
 800d62a:	6a3a      	ldr	r2, [r7, #32]
 800d62c:	4b55      	ldr	r3, [pc, #340]	; (800d784 <HAL_UART_IRQHandler+0x770>)
 800d62e:	4013      	ands	r3, r2
 800d630:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	3308      	adds	r3, #8
 800d63a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d63e:	633a      	str	r2, [r7, #48]	; 0x30
 800d640:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d646:	e841 2300 	strex	r3, r2, [r1]
 800d64a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d1e3      	bne.n	800d61a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2220      	movs	r2, #32
 800d656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	e853 3f00 	ldrex	r3, [r3]
 800d672:	60fb      	str	r3, [r7, #12]
   return(result);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f023 0310 	bic.w	r3, r3, #16
 800d67a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	461a      	mov	r2, r3
 800d684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d688:	61fb      	str	r3, [r7, #28]
 800d68a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d68c:	69b9      	ldr	r1, [r7, #24]
 800d68e:	69fa      	ldr	r2, [r7, #28]
 800d690:	e841 2300 	strex	r3, r2, [r1]
 800d694:	617b      	str	r3, [r7, #20]
   return(result);
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d1e4      	bne.n	800d666 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2202      	movs	r2, #2
 800d6a0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d6a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f000 f881 	bl	800d7b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d6ae:	e063      	b.n	800d778 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00e      	beq.n	800d6da <HAL_UART_IRQHandler+0x6c6>
 800d6bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d008      	beq.n	800d6da <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d6d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f001 f841 	bl	800e75a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6d8:	e051      	b.n	800d77e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d014      	beq.n	800d710 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d6e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d105      	bne.n	800d6fe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d6f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d008      	beq.n	800d710 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d702:	2b00      	cmp	r3, #0
 800d704:	d03a      	beq.n	800d77c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	4798      	blx	r3
    }
    return;
 800d70e:	e035      	b.n	800d77c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d009      	beq.n	800d730 <HAL_UART_IRQHandler+0x71c>
 800d71c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d724:	2b00      	cmp	r3, #0
 800d726:	d003      	beq.n	800d730 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 ffeb 	bl	800e704 <UART_EndTransmit_IT>
    return;
 800d72e:	e026      	b.n	800d77e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d009      	beq.n	800d750 <HAL_UART_IRQHandler+0x73c>
 800d73c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d740:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d744:	2b00      	cmp	r3, #0
 800d746:	d003      	beq.n	800d750 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f001 f81a 	bl	800e782 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d74e:	e016      	b.n	800d77e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d010      	beq.n	800d77e <HAL_UART_IRQHandler+0x76a>
 800d75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d760:	2b00      	cmp	r3, #0
 800d762:	da0c      	bge.n	800d77e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f001 f802 	bl	800e76e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d76a:	e008      	b.n	800d77e <HAL_UART_IRQHandler+0x76a>
      return;
 800d76c:	bf00      	nop
 800d76e:	e006      	b.n	800d77e <HAL_UART_IRQHandler+0x76a>
    return;
 800d770:	bf00      	nop
 800d772:	e004      	b.n	800d77e <HAL_UART_IRQHandler+0x76a>
      return;
 800d774:	bf00      	nop
 800d776:	e002      	b.n	800d77e <HAL_UART_IRQHandler+0x76a>
      return;
 800d778:	bf00      	nop
 800d77a:	e000      	b.n	800d77e <HAL_UART_IRQHandler+0x76a>
    return;
 800d77c:	bf00      	nop
  }
}
 800d77e:	37e8      	adds	r7, #232	; 0xe8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	effffffe 	.word	0xeffffffe

0800d788 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d790:	bf00      	nop
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d7a4:	bf00      	nop
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7cc:	b092      	sub	sp, #72	; 0x48
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	689a      	ldr	r2, [r3, #8]
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	431a      	orrs	r2, r3
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	695b      	ldr	r3, [r3, #20]
 800d7e6:	431a      	orrs	r2, r3
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	69db      	ldr	r3, [r3, #28]
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	4bbe      	ldr	r3, [pc, #760]	; (800daf0 <UART_SetConfig+0x328>)
 800d7f8:	4013      	ands	r3, r2
 800d7fa:	697a      	ldr	r2, [r7, #20]
 800d7fc:	6812      	ldr	r2, [r2, #0]
 800d7fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d800:	430b      	orrs	r3, r1
 800d802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	68da      	ldr	r2, [r3, #12]
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	430a      	orrs	r2, r1
 800d818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	699b      	ldr	r3, [r3, #24]
 800d81e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4ab3      	ldr	r2, [pc, #716]	; (800daf4 <UART_SetConfig+0x32c>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d004      	beq.n	800d834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d830:	4313      	orrs	r3, r2
 800d832:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	689a      	ldr	r2, [r3, #8]
 800d83a:	4baf      	ldr	r3, [pc, #700]	; (800daf8 <UART_SetConfig+0x330>)
 800d83c:	4013      	ands	r3, r2
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	6812      	ldr	r2, [r2, #0]
 800d842:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d844:	430b      	orrs	r3, r1
 800d846:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84e:	f023 010f 	bic.w	r1, r3, #15
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	430a      	orrs	r2, r1
 800d85c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4aa6      	ldr	r2, [pc, #664]	; (800dafc <UART_SetConfig+0x334>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d177      	bne.n	800d958 <UART_SetConfig+0x190>
 800d868:	4ba5      	ldr	r3, [pc, #660]	; (800db00 <UART_SetConfig+0x338>)
 800d86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d86c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d870:	2b28      	cmp	r3, #40	; 0x28
 800d872:	d86d      	bhi.n	800d950 <UART_SetConfig+0x188>
 800d874:	a201      	add	r2, pc, #4	; (adr r2, 800d87c <UART_SetConfig+0xb4>)
 800d876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d87a:	bf00      	nop
 800d87c:	0800d921 	.word	0x0800d921
 800d880:	0800d951 	.word	0x0800d951
 800d884:	0800d951 	.word	0x0800d951
 800d888:	0800d951 	.word	0x0800d951
 800d88c:	0800d951 	.word	0x0800d951
 800d890:	0800d951 	.word	0x0800d951
 800d894:	0800d951 	.word	0x0800d951
 800d898:	0800d951 	.word	0x0800d951
 800d89c:	0800d929 	.word	0x0800d929
 800d8a0:	0800d951 	.word	0x0800d951
 800d8a4:	0800d951 	.word	0x0800d951
 800d8a8:	0800d951 	.word	0x0800d951
 800d8ac:	0800d951 	.word	0x0800d951
 800d8b0:	0800d951 	.word	0x0800d951
 800d8b4:	0800d951 	.word	0x0800d951
 800d8b8:	0800d951 	.word	0x0800d951
 800d8bc:	0800d931 	.word	0x0800d931
 800d8c0:	0800d951 	.word	0x0800d951
 800d8c4:	0800d951 	.word	0x0800d951
 800d8c8:	0800d951 	.word	0x0800d951
 800d8cc:	0800d951 	.word	0x0800d951
 800d8d0:	0800d951 	.word	0x0800d951
 800d8d4:	0800d951 	.word	0x0800d951
 800d8d8:	0800d951 	.word	0x0800d951
 800d8dc:	0800d939 	.word	0x0800d939
 800d8e0:	0800d951 	.word	0x0800d951
 800d8e4:	0800d951 	.word	0x0800d951
 800d8e8:	0800d951 	.word	0x0800d951
 800d8ec:	0800d951 	.word	0x0800d951
 800d8f0:	0800d951 	.word	0x0800d951
 800d8f4:	0800d951 	.word	0x0800d951
 800d8f8:	0800d951 	.word	0x0800d951
 800d8fc:	0800d941 	.word	0x0800d941
 800d900:	0800d951 	.word	0x0800d951
 800d904:	0800d951 	.word	0x0800d951
 800d908:	0800d951 	.word	0x0800d951
 800d90c:	0800d951 	.word	0x0800d951
 800d910:	0800d951 	.word	0x0800d951
 800d914:	0800d951 	.word	0x0800d951
 800d918:	0800d951 	.word	0x0800d951
 800d91c:	0800d949 	.word	0x0800d949
 800d920:	2301      	movs	r3, #1
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d926:	e222      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d928:	2304      	movs	r3, #4
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92e:	e21e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d930:	2308      	movs	r3, #8
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d936:	e21a      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d938:	2310      	movs	r3, #16
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d93e:	e216      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d940:	2320      	movs	r3, #32
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d946:	e212      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d948:	2340      	movs	r3, #64	; 0x40
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d94e:	e20e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d950:	2380      	movs	r3, #128	; 0x80
 800d952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d956:	e20a      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a69      	ldr	r2, [pc, #420]	; (800db04 <UART_SetConfig+0x33c>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d130      	bne.n	800d9c4 <UART_SetConfig+0x1fc>
 800d962:	4b67      	ldr	r3, [pc, #412]	; (800db00 <UART_SetConfig+0x338>)
 800d964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d966:	f003 0307 	and.w	r3, r3, #7
 800d96a:	2b05      	cmp	r3, #5
 800d96c:	d826      	bhi.n	800d9bc <UART_SetConfig+0x1f4>
 800d96e:	a201      	add	r2, pc, #4	; (adr r2, 800d974 <UART_SetConfig+0x1ac>)
 800d970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d974:	0800d98d 	.word	0x0800d98d
 800d978:	0800d995 	.word	0x0800d995
 800d97c:	0800d99d 	.word	0x0800d99d
 800d980:	0800d9a5 	.word	0x0800d9a5
 800d984:	0800d9ad 	.word	0x0800d9ad
 800d988:	0800d9b5 	.word	0x0800d9b5
 800d98c:	2300      	movs	r3, #0
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d992:	e1ec      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d994:	2304      	movs	r3, #4
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99a:	e1e8      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d99c:	2308      	movs	r3, #8
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9a2:	e1e4      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d9a4:	2310      	movs	r3, #16
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9aa:	e1e0      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d9ac:	2320      	movs	r3, #32
 800d9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9b2:	e1dc      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d9b4:	2340      	movs	r3, #64	; 0x40
 800d9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ba:	e1d8      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d9bc:	2380      	movs	r3, #128	; 0x80
 800d9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9c2:	e1d4      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a4f      	ldr	r2, [pc, #316]	; (800db08 <UART_SetConfig+0x340>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d130      	bne.n	800da30 <UART_SetConfig+0x268>
 800d9ce:	4b4c      	ldr	r3, [pc, #304]	; (800db00 <UART_SetConfig+0x338>)
 800d9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9d2:	f003 0307 	and.w	r3, r3, #7
 800d9d6:	2b05      	cmp	r3, #5
 800d9d8:	d826      	bhi.n	800da28 <UART_SetConfig+0x260>
 800d9da:	a201      	add	r2, pc, #4	; (adr r2, 800d9e0 <UART_SetConfig+0x218>)
 800d9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e0:	0800d9f9 	.word	0x0800d9f9
 800d9e4:	0800da01 	.word	0x0800da01
 800d9e8:	0800da09 	.word	0x0800da09
 800d9ec:	0800da11 	.word	0x0800da11
 800d9f0:	0800da19 	.word	0x0800da19
 800d9f4:	0800da21 	.word	0x0800da21
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fe:	e1b6      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da00:	2304      	movs	r3, #4
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da06:	e1b2      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da08:	2308      	movs	r3, #8
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0e:	e1ae      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da10:	2310      	movs	r3, #16
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da16:	e1aa      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da18:	2320      	movs	r3, #32
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1e:	e1a6      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da20:	2340      	movs	r3, #64	; 0x40
 800da22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da26:	e1a2      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da28:	2380      	movs	r3, #128	; 0x80
 800da2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da2e:	e19e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a35      	ldr	r2, [pc, #212]	; (800db0c <UART_SetConfig+0x344>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d130      	bne.n	800da9c <UART_SetConfig+0x2d4>
 800da3a:	4b31      	ldr	r3, [pc, #196]	; (800db00 <UART_SetConfig+0x338>)
 800da3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da3e:	f003 0307 	and.w	r3, r3, #7
 800da42:	2b05      	cmp	r3, #5
 800da44:	d826      	bhi.n	800da94 <UART_SetConfig+0x2cc>
 800da46:	a201      	add	r2, pc, #4	; (adr r2, 800da4c <UART_SetConfig+0x284>)
 800da48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4c:	0800da65 	.word	0x0800da65
 800da50:	0800da6d 	.word	0x0800da6d
 800da54:	0800da75 	.word	0x0800da75
 800da58:	0800da7d 	.word	0x0800da7d
 800da5c:	0800da85 	.word	0x0800da85
 800da60:	0800da8d 	.word	0x0800da8d
 800da64:	2300      	movs	r3, #0
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6a:	e180      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da6c:	2304      	movs	r3, #4
 800da6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da72:	e17c      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da74:	2308      	movs	r3, #8
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7a:	e178      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da7c:	2310      	movs	r3, #16
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da82:	e174      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da84:	2320      	movs	r3, #32
 800da86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8a:	e170      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da8c:	2340      	movs	r3, #64	; 0x40
 800da8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da92:	e16c      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da94:	2380      	movs	r3, #128	; 0x80
 800da96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9a:	e168      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a1b      	ldr	r2, [pc, #108]	; (800db10 <UART_SetConfig+0x348>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d142      	bne.n	800db2c <UART_SetConfig+0x364>
 800daa6:	4b16      	ldr	r3, [pc, #88]	; (800db00 <UART_SetConfig+0x338>)
 800daa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daaa:	f003 0307 	and.w	r3, r3, #7
 800daae:	2b05      	cmp	r3, #5
 800dab0:	d838      	bhi.n	800db24 <UART_SetConfig+0x35c>
 800dab2:	a201      	add	r2, pc, #4	; (adr r2, 800dab8 <UART_SetConfig+0x2f0>)
 800dab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab8:	0800dad1 	.word	0x0800dad1
 800dabc:	0800dad9 	.word	0x0800dad9
 800dac0:	0800dae1 	.word	0x0800dae1
 800dac4:	0800dae9 	.word	0x0800dae9
 800dac8:	0800db15 	.word	0x0800db15
 800dacc:	0800db1d 	.word	0x0800db1d
 800dad0:	2300      	movs	r3, #0
 800dad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad6:	e14a      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dad8:	2304      	movs	r3, #4
 800dada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dade:	e146      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dae0:	2308      	movs	r3, #8
 800dae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae6:	e142      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dae8:	2310      	movs	r3, #16
 800daea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daee:	e13e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800daf0:	cfff69f3 	.word	0xcfff69f3
 800daf4:	58000c00 	.word	0x58000c00
 800daf8:	11fff4ff 	.word	0x11fff4ff
 800dafc:	40011000 	.word	0x40011000
 800db00:	58024400 	.word	0x58024400
 800db04:	40004400 	.word	0x40004400
 800db08:	40004800 	.word	0x40004800
 800db0c:	40004c00 	.word	0x40004c00
 800db10:	40005000 	.word	0x40005000
 800db14:	2320      	movs	r3, #32
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1a:	e128      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800db1c:	2340      	movs	r3, #64	; 0x40
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db22:	e124      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800db24:	2380      	movs	r3, #128	; 0x80
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2a:	e120      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4acb      	ldr	r2, [pc, #812]	; (800de60 <UART_SetConfig+0x698>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d176      	bne.n	800dc24 <UART_SetConfig+0x45c>
 800db36:	4bcb      	ldr	r3, [pc, #812]	; (800de64 <UART_SetConfig+0x69c>)
 800db38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db3e:	2b28      	cmp	r3, #40	; 0x28
 800db40:	d86c      	bhi.n	800dc1c <UART_SetConfig+0x454>
 800db42:	a201      	add	r2, pc, #4	; (adr r2, 800db48 <UART_SetConfig+0x380>)
 800db44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db48:	0800dbed 	.word	0x0800dbed
 800db4c:	0800dc1d 	.word	0x0800dc1d
 800db50:	0800dc1d 	.word	0x0800dc1d
 800db54:	0800dc1d 	.word	0x0800dc1d
 800db58:	0800dc1d 	.word	0x0800dc1d
 800db5c:	0800dc1d 	.word	0x0800dc1d
 800db60:	0800dc1d 	.word	0x0800dc1d
 800db64:	0800dc1d 	.word	0x0800dc1d
 800db68:	0800dbf5 	.word	0x0800dbf5
 800db6c:	0800dc1d 	.word	0x0800dc1d
 800db70:	0800dc1d 	.word	0x0800dc1d
 800db74:	0800dc1d 	.word	0x0800dc1d
 800db78:	0800dc1d 	.word	0x0800dc1d
 800db7c:	0800dc1d 	.word	0x0800dc1d
 800db80:	0800dc1d 	.word	0x0800dc1d
 800db84:	0800dc1d 	.word	0x0800dc1d
 800db88:	0800dbfd 	.word	0x0800dbfd
 800db8c:	0800dc1d 	.word	0x0800dc1d
 800db90:	0800dc1d 	.word	0x0800dc1d
 800db94:	0800dc1d 	.word	0x0800dc1d
 800db98:	0800dc1d 	.word	0x0800dc1d
 800db9c:	0800dc1d 	.word	0x0800dc1d
 800dba0:	0800dc1d 	.word	0x0800dc1d
 800dba4:	0800dc1d 	.word	0x0800dc1d
 800dba8:	0800dc05 	.word	0x0800dc05
 800dbac:	0800dc1d 	.word	0x0800dc1d
 800dbb0:	0800dc1d 	.word	0x0800dc1d
 800dbb4:	0800dc1d 	.word	0x0800dc1d
 800dbb8:	0800dc1d 	.word	0x0800dc1d
 800dbbc:	0800dc1d 	.word	0x0800dc1d
 800dbc0:	0800dc1d 	.word	0x0800dc1d
 800dbc4:	0800dc1d 	.word	0x0800dc1d
 800dbc8:	0800dc0d 	.word	0x0800dc0d
 800dbcc:	0800dc1d 	.word	0x0800dc1d
 800dbd0:	0800dc1d 	.word	0x0800dc1d
 800dbd4:	0800dc1d 	.word	0x0800dc1d
 800dbd8:	0800dc1d 	.word	0x0800dc1d
 800dbdc:	0800dc1d 	.word	0x0800dc1d
 800dbe0:	0800dc1d 	.word	0x0800dc1d
 800dbe4:	0800dc1d 	.word	0x0800dc1d
 800dbe8:	0800dc15 	.word	0x0800dc15
 800dbec:	2301      	movs	r3, #1
 800dbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf2:	e0bc      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dbf4:	2304      	movs	r3, #4
 800dbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfa:	e0b8      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dbfc:	2308      	movs	r3, #8
 800dbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc02:	e0b4      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc04:	2310      	movs	r3, #16
 800dc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0a:	e0b0      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc0c:	2320      	movs	r3, #32
 800dc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc12:	e0ac      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc14:	2340      	movs	r3, #64	; 0x40
 800dc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc1a:	e0a8      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc1c:	2380      	movs	r3, #128	; 0x80
 800dc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc22:	e0a4      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a8f      	ldr	r2, [pc, #572]	; (800de68 <UART_SetConfig+0x6a0>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d130      	bne.n	800dc90 <UART_SetConfig+0x4c8>
 800dc2e:	4b8d      	ldr	r3, [pc, #564]	; (800de64 <UART_SetConfig+0x69c>)
 800dc30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc32:	f003 0307 	and.w	r3, r3, #7
 800dc36:	2b05      	cmp	r3, #5
 800dc38:	d826      	bhi.n	800dc88 <UART_SetConfig+0x4c0>
 800dc3a:	a201      	add	r2, pc, #4	; (adr r2, 800dc40 <UART_SetConfig+0x478>)
 800dc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc40:	0800dc59 	.word	0x0800dc59
 800dc44:	0800dc61 	.word	0x0800dc61
 800dc48:	0800dc69 	.word	0x0800dc69
 800dc4c:	0800dc71 	.word	0x0800dc71
 800dc50:	0800dc79 	.word	0x0800dc79
 800dc54:	0800dc81 	.word	0x0800dc81
 800dc58:	2300      	movs	r3, #0
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5e:	e086      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc60:	2304      	movs	r3, #4
 800dc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc66:	e082      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc68:	2308      	movs	r3, #8
 800dc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6e:	e07e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc70:	2310      	movs	r3, #16
 800dc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc76:	e07a      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc78:	2320      	movs	r3, #32
 800dc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7e:	e076      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc80:	2340      	movs	r3, #64	; 0x40
 800dc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc86:	e072      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc88:	2380      	movs	r3, #128	; 0x80
 800dc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc8e:	e06e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a75      	ldr	r2, [pc, #468]	; (800de6c <UART_SetConfig+0x6a4>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d130      	bne.n	800dcfc <UART_SetConfig+0x534>
 800dc9a:	4b72      	ldr	r3, [pc, #456]	; (800de64 <UART_SetConfig+0x69c>)
 800dc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc9e:	f003 0307 	and.w	r3, r3, #7
 800dca2:	2b05      	cmp	r3, #5
 800dca4:	d826      	bhi.n	800dcf4 <UART_SetConfig+0x52c>
 800dca6:	a201      	add	r2, pc, #4	; (adr r2, 800dcac <UART_SetConfig+0x4e4>)
 800dca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcac:	0800dcc5 	.word	0x0800dcc5
 800dcb0:	0800dccd 	.word	0x0800dccd
 800dcb4:	0800dcd5 	.word	0x0800dcd5
 800dcb8:	0800dcdd 	.word	0x0800dcdd
 800dcbc:	0800dce5 	.word	0x0800dce5
 800dcc0:	0800dced 	.word	0x0800dced
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcca:	e050      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dccc:	2304      	movs	r3, #4
 800dcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd2:	e04c      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dcd4:	2308      	movs	r3, #8
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcda:	e048      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dcdc:	2310      	movs	r3, #16
 800dcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce2:	e044      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dce4:	2320      	movs	r3, #32
 800dce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcea:	e040      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dcec:	2340      	movs	r3, #64	; 0x40
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf2:	e03c      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dcf4:	2380      	movs	r3, #128	; 0x80
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfa:	e038      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a5b      	ldr	r2, [pc, #364]	; (800de70 <UART_SetConfig+0x6a8>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d130      	bne.n	800dd68 <UART_SetConfig+0x5a0>
 800dd06:	4b57      	ldr	r3, [pc, #348]	; (800de64 <UART_SetConfig+0x69c>)
 800dd08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd0a:	f003 0307 	and.w	r3, r3, #7
 800dd0e:	2b05      	cmp	r3, #5
 800dd10:	d826      	bhi.n	800dd60 <UART_SetConfig+0x598>
 800dd12:	a201      	add	r2, pc, #4	; (adr r2, 800dd18 <UART_SetConfig+0x550>)
 800dd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd18:	0800dd31 	.word	0x0800dd31
 800dd1c:	0800dd39 	.word	0x0800dd39
 800dd20:	0800dd41 	.word	0x0800dd41
 800dd24:	0800dd49 	.word	0x0800dd49
 800dd28:	0800dd51 	.word	0x0800dd51
 800dd2c:	0800dd59 	.word	0x0800dd59
 800dd30:	2302      	movs	r3, #2
 800dd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd36:	e01a      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd38:	2304      	movs	r3, #4
 800dd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd3e:	e016      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd40:	2308      	movs	r3, #8
 800dd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd46:	e012      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd48:	2310      	movs	r3, #16
 800dd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4e:	e00e      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd50:	2320      	movs	r3, #32
 800dd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd56:	e00a      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd58:	2340      	movs	r3, #64	; 0x40
 800dd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5e:	e006      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd60:	2380      	movs	r3, #128	; 0x80
 800dd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd66:	e002      	b.n	800dd6e <UART_SetConfig+0x5a6>
 800dd68:	2380      	movs	r3, #128	; 0x80
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a3f      	ldr	r2, [pc, #252]	; (800de70 <UART_SetConfig+0x6a8>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	f040 80f8 	bne.w	800df6a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dd7e:	2b20      	cmp	r3, #32
 800dd80:	dc46      	bgt.n	800de10 <UART_SetConfig+0x648>
 800dd82:	2b02      	cmp	r3, #2
 800dd84:	f2c0 8082 	blt.w	800de8c <UART_SetConfig+0x6c4>
 800dd88:	3b02      	subs	r3, #2
 800dd8a:	2b1e      	cmp	r3, #30
 800dd8c:	d87e      	bhi.n	800de8c <UART_SetConfig+0x6c4>
 800dd8e:	a201      	add	r2, pc, #4	; (adr r2, 800dd94 <UART_SetConfig+0x5cc>)
 800dd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd94:	0800de17 	.word	0x0800de17
 800dd98:	0800de8d 	.word	0x0800de8d
 800dd9c:	0800de1f 	.word	0x0800de1f
 800dda0:	0800de8d 	.word	0x0800de8d
 800dda4:	0800de8d 	.word	0x0800de8d
 800dda8:	0800de8d 	.word	0x0800de8d
 800ddac:	0800de2f 	.word	0x0800de2f
 800ddb0:	0800de8d 	.word	0x0800de8d
 800ddb4:	0800de8d 	.word	0x0800de8d
 800ddb8:	0800de8d 	.word	0x0800de8d
 800ddbc:	0800de8d 	.word	0x0800de8d
 800ddc0:	0800de8d 	.word	0x0800de8d
 800ddc4:	0800de8d 	.word	0x0800de8d
 800ddc8:	0800de8d 	.word	0x0800de8d
 800ddcc:	0800de3f 	.word	0x0800de3f
 800ddd0:	0800de8d 	.word	0x0800de8d
 800ddd4:	0800de8d 	.word	0x0800de8d
 800ddd8:	0800de8d 	.word	0x0800de8d
 800dddc:	0800de8d 	.word	0x0800de8d
 800dde0:	0800de8d 	.word	0x0800de8d
 800dde4:	0800de8d 	.word	0x0800de8d
 800dde8:	0800de8d 	.word	0x0800de8d
 800ddec:	0800de8d 	.word	0x0800de8d
 800ddf0:	0800de8d 	.word	0x0800de8d
 800ddf4:	0800de8d 	.word	0x0800de8d
 800ddf8:	0800de8d 	.word	0x0800de8d
 800ddfc:	0800de8d 	.word	0x0800de8d
 800de00:	0800de8d 	.word	0x0800de8d
 800de04:	0800de8d 	.word	0x0800de8d
 800de08:	0800de8d 	.word	0x0800de8d
 800de0c:	0800de7f 	.word	0x0800de7f
 800de10:	2b40      	cmp	r3, #64	; 0x40
 800de12:	d037      	beq.n	800de84 <UART_SetConfig+0x6bc>
 800de14:	e03a      	b.n	800de8c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800de16:	f7fc fc6d 	bl	800a6f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800de1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de1c:	e03c      	b.n	800de98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de22:	4618      	mov	r0, r3
 800de24:	f7fc fc7c 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de2c:	e034      	b.n	800de98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de2e:	f107 0318 	add.w	r3, r7, #24
 800de32:	4618      	mov	r0, r3
 800de34:	f7fc fdc8 	bl	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de3c:	e02c      	b.n	800de98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de3e:	4b09      	ldr	r3, [pc, #36]	; (800de64 <UART_SetConfig+0x69c>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f003 0320 	and.w	r3, r3, #32
 800de46:	2b00      	cmp	r3, #0
 800de48:	d016      	beq.n	800de78 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de4a:	4b06      	ldr	r3, [pc, #24]	; (800de64 <UART_SetConfig+0x69c>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	08db      	lsrs	r3, r3, #3
 800de50:	f003 0303 	and.w	r3, r3, #3
 800de54:	4a07      	ldr	r2, [pc, #28]	; (800de74 <UART_SetConfig+0x6ac>)
 800de56:	fa22 f303 	lsr.w	r3, r2, r3
 800de5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de5c:	e01c      	b.n	800de98 <UART_SetConfig+0x6d0>
 800de5e:	bf00      	nop
 800de60:	40011400 	.word	0x40011400
 800de64:	58024400 	.word	0x58024400
 800de68:	40007800 	.word	0x40007800
 800de6c:	40007c00 	.word	0x40007c00
 800de70:	58000c00 	.word	0x58000c00
 800de74:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800de78:	4b9d      	ldr	r3, [pc, #628]	; (800e0f0 <UART_SetConfig+0x928>)
 800de7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de7c:	e00c      	b.n	800de98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de7e:	4b9d      	ldr	r3, [pc, #628]	; (800e0f4 <UART_SetConfig+0x92c>)
 800de80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de82:	e009      	b.n	800de98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de8a:	e005      	b.n	800de98 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800de8c:	2300      	movs	r3, #0
 800de8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800de90:	2301      	movs	r3, #1
 800de92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800de96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f000 81de 	beq.w	800e25c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea4:	4a94      	ldr	r2, [pc, #592]	; (800e0f8 <UART_SetConfig+0x930>)
 800dea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800deaa:	461a      	mov	r2, r3
 800deac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deae:	fbb3 f3f2 	udiv	r3, r3, r2
 800deb2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	685a      	ldr	r2, [r3, #4]
 800deb8:	4613      	mov	r3, r2
 800deba:	005b      	lsls	r3, r3, #1
 800debc:	4413      	add	r3, r2
 800debe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d305      	bcc.n	800ded0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800deca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800decc:	429a      	cmp	r2, r3
 800dece:	d903      	bls.n	800ded8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ded0:	2301      	movs	r3, #1
 800ded2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ded6:	e1c1      	b.n	800e25c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ded8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deda:	2200      	movs	r2, #0
 800dedc:	60bb      	str	r3, [r7, #8]
 800dede:	60fa      	str	r2, [r7, #12]
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee4:	4a84      	ldr	r2, [pc, #528]	; (800e0f8 <UART_SetConfig+0x930>)
 800dee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800deea:	b29b      	uxth	r3, r3
 800deec:	2200      	movs	r2, #0
 800deee:	603b      	str	r3, [r7, #0]
 800def0:	607a      	str	r2, [r7, #4]
 800def2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800def6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800defa:	f7f2 f9f1 	bl	80002e0 <__aeabi_uldivmod>
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	4610      	mov	r0, r2
 800df04:	4619      	mov	r1, r3
 800df06:	f04f 0200 	mov.w	r2, #0
 800df0a:	f04f 0300 	mov.w	r3, #0
 800df0e:	020b      	lsls	r3, r1, #8
 800df10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df14:	0202      	lsls	r2, r0, #8
 800df16:	6979      	ldr	r1, [r7, #20]
 800df18:	6849      	ldr	r1, [r1, #4]
 800df1a:	0849      	lsrs	r1, r1, #1
 800df1c:	2000      	movs	r0, #0
 800df1e:	460c      	mov	r4, r1
 800df20:	4605      	mov	r5, r0
 800df22:	eb12 0804 	adds.w	r8, r2, r4
 800df26:	eb43 0905 	adc.w	r9, r3, r5
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	469a      	mov	sl, r3
 800df32:	4693      	mov	fp, r2
 800df34:	4652      	mov	r2, sl
 800df36:	465b      	mov	r3, fp
 800df38:	4640      	mov	r0, r8
 800df3a:	4649      	mov	r1, r9
 800df3c:	f7f2 f9d0 	bl	80002e0 <__aeabi_uldivmod>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4613      	mov	r3, r2
 800df46:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df4e:	d308      	bcc.n	800df62 <UART_SetConfig+0x79a>
 800df50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df56:	d204      	bcs.n	800df62 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df5e:	60da      	str	r2, [r3, #12]
 800df60:	e17c      	b.n	800e25c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800df62:	2301      	movs	r3, #1
 800df64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df68:	e178      	b.n	800e25c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	69db      	ldr	r3, [r3, #28]
 800df6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df72:	f040 80c5 	bne.w	800e100 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800df76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df7a:	2b20      	cmp	r3, #32
 800df7c:	dc48      	bgt.n	800e010 <UART_SetConfig+0x848>
 800df7e:	2b00      	cmp	r3, #0
 800df80:	db7b      	blt.n	800e07a <UART_SetConfig+0x8b2>
 800df82:	2b20      	cmp	r3, #32
 800df84:	d879      	bhi.n	800e07a <UART_SetConfig+0x8b2>
 800df86:	a201      	add	r2, pc, #4	; (adr r2, 800df8c <UART_SetConfig+0x7c4>)
 800df88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df8c:	0800e017 	.word	0x0800e017
 800df90:	0800e01f 	.word	0x0800e01f
 800df94:	0800e07b 	.word	0x0800e07b
 800df98:	0800e07b 	.word	0x0800e07b
 800df9c:	0800e027 	.word	0x0800e027
 800dfa0:	0800e07b 	.word	0x0800e07b
 800dfa4:	0800e07b 	.word	0x0800e07b
 800dfa8:	0800e07b 	.word	0x0800e07b
 800dfac:	0800e037 	.word	0x0800e037
 800dfb0:	0800e07b 	.word	0x0800e07b
 800dfb4:	0800e07b 	.word	0x0800e07b
 800dfb8:	0800e07b 	.word	0x0800e07b
 800dfbc:	0800e07b 	.word	0x0800e07b
 800dfc0:	0800e07b 	.word	0x0800e07b
 800dfc4:	0800e07b 	.word	0x0800e07b
 800dfc8:	0800e07b 	.word	0x0800e07b
 800dfcc:	0800e047 	.word	0x0800e047
 800dfd0:	0800e07b 	.word	0x0800e07b
 800dfd4:	0800e07b 	.word	0x0800e07b
 800dfd8:	0800e07b 	.word	0x0800e07b
 800dfdc:	0800e07b 	.word	0x0800e07b
 800dfe0:	0800e07b 	.word	0x0800e07b
 800dfe4:	0800e07b 	.word	0x0800e07b
 800dfe8:	0800e07b 	.word	0x0800e07b
 800dfec:	0800e07b 	.word	0x0800e07b
 800dff0:	0800e07b 	.word	0x0800e07b
 800dff4:	0800e07b 	.word	0x0800e07b
 800dff8:	0800e07b 	.word	0x0800e07b
 800dffc:	0800e07b 	.word	0x0800e07b
 800e000:	0800e07b 	.word	0x0800e07b
 800e004:	0800e07b 	.word	0x0800e07b
 800e008:	0800e07b 	.word	0x0800e07b
 800e00c:	0800e06d 	.word	0x0800e06d
 800e010:	2b40      	cmp	r3, #64	; 0x40
 800e012:	d02e      	beq.n	800e072 <UART_SetConfig+0x8aa>
 800e014:	e031      	b.n	800e07a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e016:	f7fa fb75 	bl	8008704 <HAL_RCC_GetPCLK1Freq>
 800e01a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e01c:	e033      	b.n	800e086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e01e:	f7fa fb87 	bl	8008730 <HAL_RCC_GetPCLK2Freq>
 800e022:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e024:	e02f      	b.n	800e086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fc fb78 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e034:	e027      	b.n	800e086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e036:	f107 0318 	add.w	r3, r7, #24
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fc fcc4 	bl	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e044:	e01f      	b.n	800e086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e046:	4b2d      	ldr	r3, [pc, #180]	; (800e0fc <UART_SetConfig+0x934>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f003 0320 	and.w	r3, r3, #32
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d009      	beq.n	800e066 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e052:	4b2a      	ldr	r3, [pc, #168]	; (800e0fc <UART_SetConfig+0x934>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	08db      	lsrs	r3, r3, #3
 800e058:	f003 0303 	and.w	r3, r3, #3
 800e05c:	4a24      	ldr	r2, [pc, #144]	; (800e0f0 <UART_SetConfig+0x928>)
 800e05e:	fa22 f303 	lsr.w	r3, r2, r3
 800e062:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e064:	e00f      	b.n	800e086 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e066:	4b22      	ldr	r3, [pc, #136]	; (800e0f0 <UART_SetConfig+0x928>)
 800e068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e06a:	e00c      	b.n	800e086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e06c:	4b21      	ldr	r3, [pc, #132]	; (800e0f4 <UART_SetConfig+0x92c>)
 800e06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e070:	e009      	b.n	800e086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e078:	e005      	b.n	800e086 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e07a:	2300      	movs	r3, #0
 800e07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f000 80e7 	beq.w	800e25c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e092:	4a19      	ldr	r2, [pc, #100]	; (800e0f8 <UART_SetConfig+0x930>)
 800e094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e098:	461a      	mov	r2, r3
 800e09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0a0:	005a      	lsls	r2, r3, #1
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	085b      	lsrs	r3, r3, #1
 800e0a8:	441a      	add	r2, r3
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b6:	2b0f      	cmp	r3, #15
 800e0b8:	d916      	bls.n	800e0e8 <UART_SetConfig+0x920>
 800e0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0c0:	d212      	bcs.n	800e0e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	f023 030f 	bic.w	r3, r3, #15
 800e0ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ce:	085b      	lsrs	r3, r3, #1
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	f003 0307 	and.w	r3, r3, #7
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e0e4:	60da      	str	r2, [r3, #12]
 800e0e6:	e0b9      	b.n	800e25c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e0ee:	e0b5      	b.n	800e25c <UART_SetConfig+0xa94>
 800e0f0:	03d09000 	.word	0x03d09000
 800e0f4:	003d0900 	.word	0x003d0900
 800e0f8:	080119f8 	.word	0x080119f8
 800e0fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e100:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e104:	2b20      	cmp	r3, #32
 800e106:	dc49      	bgt.n	800e19c <UART_SetConfig+0x9d4>
 800e108:	2b00      	cmp	r3, #0
 800e10a:	db7c      	blt.n	800e206 <UART_SetConfig+0xa3e>
 800e10c:	2b20      	cmp	r3, #32
 800e10e:	d87a      	bhi.n	800e206 <UART_SetConfig+0xa3e>
 800e110:	a201      	add	r2, pc, #4	; (adr r2, 800e118 <UART_SetConfig+0x950>)
 800e112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e116:	bf00      	nop
 800e118:	0800e1a3 	.word	0x0800e1a3
 800e11c:	0800e1ab 	.word	0x0800e1ab
 800e120:	0800e207 	.word	0x0800e207
 800e124:	0800e207 	.word	0x0800e207
 800e128:	0800e1b3 	.word	0x0800e1b3
 800e12c:	0800e207 	.word	0x0800e207
 800e130:	0800e207 	.word	0x0800e207
 800e134:	0800e207 	.word	0x0800e207
 800e138:	0800e1c3 	.word	0x0800e1c3
 800e13c:	0800e207 	.word	0x0800e207
 800e140:	0800e207 	.word	0x0800e207
 800e144:	0800e207 	.word	0x0800e207
 800e148:	0800e207 	.word	0x0800e207
 800e14c:	0800e207 	.word	0x0800e207
 800e150:	0800e207 	.word	0x0800e207
 800e154:	0800e207 	.word	0x0800e207
 800e158:	0800e1d3 	.word	0x0800e1d3
 800e15c:	0800e207 	.word	0x0800e207
 800e160:	0800e207 	.word	0x0800e207
 800e164:	0800e207 	.word	0x0800e207
 800e168:	0800e207 	.word	0x0800e207
 800e16c:	0800e207 	.word	0x0800e207
 800e170:	0800e207 	.word	0x0800e207
 800e174:	0800e207 	.word	0x0800e207
 800e178:	0800e207 	.word	0x0800e207
 800e17c:	0800e207 	.word	0x0800e207
 800e180:	0800e207 	.word	0x0800e207
 800e184:	0800e207 	.word	0x0800e207
 800e188:	0800e207 	.word	0x0800e207
 800e18c:	0800e207 	.word	0x0800e207
 800e190:	0800e207 	.word	0x0800e207
 800e194:	0800e207 	.word	0x0800e207
 800e198:	0800e1f9 	.word	0x0800e1f9
 800e19c:	2b40      	cmp	r3, #64	; 0x40
 800e19e:	d02e      	beq.n	800e1fe <UART_SetConfig+0xa36>
 800e1a0:	e031      	b.n	800e206 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1a2:	f7fa faaf 	bl	8008704 <HAL_RCC_GetPCLK1Freq>
 800e1a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1a8:	e033      	b.n	800e212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1aa:	f7fa fac1 	bl	8008730 <HAL_RCC_GetPCLK2Freq>
 800e1ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1b0:	e02f      	b.n	800e212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fc fab2 	bl	800a720 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1c0:	e027      	b.n	800e212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1c2:	f107 0318 	add.w	r3, r7, #24
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fc fbfe 	bl	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1d0:	e01f      	b.n	800e212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1d2:	4b2d      	ldr	r3, [pc, #180]	; (800e288 <UART_SetConfig+0xac0>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f003 0320 	and.w	r3, r3, #32
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d009      	beq.n	800e1f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1de:	4b2a      	ldr	r3, [pc, #168]	; (800e288 <UART_SetConfig+0xac0>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	08db      	lsrs	r3, r3, #3
 800e1e4:	f003 0303 	and.w	r3, r3, #3
 800e1e8:	4a28      	ldr	r2, [pc, #160]	; (800e28c <UART_SetConfig+0xac4>)
 800e1ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1f0:	e00f      	b.n	800e212 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e1f2:	4b26      	ldr	r3, [pc, #152]	; (800e28c <UART_SetConfig+0xac4>)
 800e1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1f6:	e00c      	b.n	800e212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1f8:	4b25      	ldr	r3, [pc, #148]	; (800e290 <UART_SetConfig+0xac8>)
 800e1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1fc:	e009      	b.n	800e212 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e204:	e005      	b.n	800e212 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e206:	2300      	movs	r3, #0
 800e208:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e210:	bf00      	nop
    }

    if (pclk != 0U)
 800e212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e214:	2b00      	cmp	r3, #0
 800e216:	d021      	beq.n	800e25c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e21c:	4a1d      	ldr	r2, [pc, #116]	; (800e294 <UART_SetConfig+0xacc>)
 800e21e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e222:	461a      	mov	r2, r3
 800e224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e226:	fbb3 f2f2 	udiv	r2, r3, r2
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	085b      	lsrs	r3, r3, #1
 800e230:	441a      	add	r2, r3
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	fbb2 f3f3 	udiv	r3, r2, r3
 800e23a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23e:	2b0f      	cmp	r3, #15
 800e240:	d909      	bls.n	800e256 <UART_SetConfig+0xa8e>
 800e242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e248:	d205      	bcs.n	800e256 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24c:	b29a      	uxth	r2, r3
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	60da      	str	r2, [r3, #12]
 800e254:	e002      	b.n	800e25c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e256:	2301      	movs	r3, #1
 800e258:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	2201      	movs	r2, #1
 800e260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	2201      	movs	r2, #1
 800e268:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	2200      	movs	r2, #0
 800e270:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	2200      	movs	r2, #0
 800e276:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e278:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3748      	adds	r7, #72	; 0x48
 800e280:	46bd      	mov	sp, r7
 800e282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e286:	bf00      	nop
 800e288:	58024400 	.word	0x58024400
 800e28c:	03d09000 	.word	0x03d09000
 800e290:	003d0900 	.word	0x003d0900
 800e294:	080119f8 	.word	0x080119f8

0800e298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2a4:	f003 0308 	and.w	r3, r3, #8
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00a      	beq.n	800e2c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	430a      	orrs	r2, r1
 800e2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2c6:	f003 0301 	and.w	r3, r3, #1
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00a      	beq.n	800e2e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	430a      	orrs	r2, r1
 800e2e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2e8:	f003 0302 	and.w	r3, r3, #2
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00a      	beq.n	800e306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	430a      	orrs	r2, r1
 800e304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e30a:	f003 0304 	and.w	r3, r3, #4
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00a      	beq.n	800e328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	430a      	orrs	r2, r1
 800e326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e32c:	f003 0310 	and.w	r3, r3, #16
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00a      	beq.n	800e34a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	430a      	orrs	r2, r1
 800e348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e34e:	f003 0320 	and.w	r3, r3, #32
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00a      	beq.n	800e36c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	430a      	orrs	r2, r1
 800e36a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e374:	2b00      	cmp	r3, #0
 800e376:	d01a      	beq.n	800e3ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	430a      	orrs	r2, r1
 800e38c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e396:	d10a      	bne.n	800e3ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	430a      	orrs	r2, r1
 800e3ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00a      	beq.n	800e3d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	430a      	orrs	r2, r1
 800e3ce:	605a      	str	r2, [r3, #4]
  }
}
 800e3d0:	bf00      	nop
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b098      	sub	sp, #96	; 0x60
 800e3e0:	af02      	add	r7, sp, #8
 800e3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e3ec:	f7f4 f948 	bl	8002680 <HAL_GetTick>
 800e3f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f003 0308 	and.w	r3, r3, #8
 800e3fc:	2b08      	cmp	r3, #8
 800e3fe:	d12f      	bne.n	800e460 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e404:	9300      	str	r3, [sp, #0]
 800e406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e408:	2200      	movs	r2, #0
 800e40a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 f88e 	bl	800e530 <UART_WaitOnFlagUntilTimeout>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d022      	beq.n	800e460 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e422:	e853 3f00 	ldrex	r3, [r3]
 800e426:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e42a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e42e:	653b      	str	r3, [r7, #80]	; 0x50
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	461a      	mov	r2, r3
 800e436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e438:	647b      	str	r3, [r7, #68]	; 0x44
 800e43a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e43e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e440:	e841 2300 	strex	r3, r2, [r1]
 800e444:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1e6      	bne.n	800e41a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2220      	movs	r2, #32
 800e450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e45c:	2303      	movs	r3, #3
 800e45e:	e063      	b.n	800e528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 0304 	and.w	r3, r3, #4
 800e46a:	2b04      	cmp	r3, #4
 800e46c:	d149      	bne.n	800e502 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e46e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e476:	2200      	movs	r2, #0
 800e478:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 f857 	bl	800e530 <UART_WaitOnFlagUntilTimeout>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d03c      	beq.n	800e502 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e490:	e853 3f00 	ldrex	r3, [r3]
 800e494:	623b      	str	r3, [r7, #32]
   return(result);
 800e496:	6a3b      	ldr	r3, [r7, #32]
 800e498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e49c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4a6:	633b      	str	r3, [r7, #48]	; 0x30
 800e4a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4ae:	e841 2300 	strex	r3, r2, [r1]
 800e4b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1e6      	bne.n	800e488 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	3308      	adds	r3, #8
 800e4c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	e853 3f00 	ldrex	r3, [r3]
 800e4c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f023 0301 	bic.w	r3, r3, #1
 800e4d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	3308      	adds	r3, #8
 800e4d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4da:	61fa      	str	r2, [r7, #28]
 800e4dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4de:	69b9      	ldr	r1, [r7, #24]
 800e4e0:	69fa      	ldr	r2, [r7, #28]
 800e4e2:	e841 2300 	strex	r3, r2, [r1]
 800e4e6:	617b      	str	r3, [r7, #20]
   return(result);
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1e5      	bne.n	800e4ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2220      	movs	r2, #32
 800e4f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4fe:	2303      	movs	r3, #3
 800e500:	e012      	b.n	800e528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2220      	movs	r2, #32
 800e506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2220      	movs	r2, #32
 800e50e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2200      	movs	r2, #0
 800e522:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e526:	2300      	movs	r3, #0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3758      	adds	r7, #88	; 0x58
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	603b      	str	r3, [r7, #0]
 800e53c:	4613      	mov	r3, r2
 800e53e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e540:	e04f      	b.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e548:	d04b      	beq.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e54a:	f7f4 f899 	bl	8002680 <HAL_GetTick>
 800e54e:	4602      	mov	r2, r0
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	1ad3      	subs	r3, r2, r3
 800e554:	69ba      	ldr	r2, [r7, #24]
 800e556:	429a      	cmp	r2, r3
 800e558:	d302      	bcc.n	800e560 <UART_WaitOnFlagUntilTimeout+0x30>
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d101      	bne.n	800e564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e560:	2303      	movs	r3, #3
 800e562:	e04e      	b.n	800e602 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f003 0304 	and.w	r3, r3, #4
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d037      	beq.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	2b80      	cmp	r3, #128	; 0x80
 800e576:	d034      	beq.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	2b40      	cmp	r3, #64	; 0x40
 800e57c:	d031      	beq.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	69db      	ldr	r3, [r3, #28]
 800e584:	f003 0308 	and.w	r3, r3, #8
 800e588:	2b08      	cmp	r3, #8
 800e58a:	d110      	bne.n	800e5ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2208      	movs	r2, #8
 800e592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e594:	68f8      	ldr	r0, [r7, #12]
 800e596:	f000 f839 	bl	800e60c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2208      	movs	r2, #8
 800e59e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e029      	b.n	800e602 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	69db      	ldr	r3, [r3, #28]
 800e5b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5bc:	d111      	bne.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f000 f81f 	bl	800e60c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2220      	movs	r2, #32
 800e5d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e5de:	2303      	movs	r3, #3
 800e5e0:	e00f      	b.n	800e602 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	69da      	ldr	r2, [r3, #28]
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	4013      	ands	r3, r2
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	bf0c      	ite	eq
 800e5f2:	2301      	moveq	r3, #1
 800e5f4:	2300      	movne	r3, #0
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	79fb      	ldrb	r3, [r7, #7]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d0a0      	beq.n	800e542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
	...

0800e60c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b095      	sub	sp, #84	; 0x54
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e61c:	e853 3f00 	ldrex	r3, [r3]
 800e620:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	461a      	mov	r2, r3
 800e630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e632:	643b      	str	r3, [r7, #64]	; 0x40
 800e634:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e636:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e63a:	e841 2300 	strex	r3, r2, [r1]
 800e63e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1e6      	bne.n	800e614 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	3308      	adds	r3, #8
 800e64c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e64e:	6a3b      	ldr	r3, [r7, #32]
 800e650:	e853 3f00 	ldrex	r3, [r3]
 800e654:	61fb      	str	r3, [r7, #28]
   return(result);
 800e656:	69fa      	ldr	r2, [r7, #28]
 800e658:	4b1e      	ldr	r3, [pc, #120]	; (800e6d4 <UART_EndRxTransfer+0xc8>)
 800e65a:	4013      	ands	r3, r2
 800e65c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3308      	adds	r3, #8
 800e664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e666:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e668:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e66c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e66e:	e841 2300 	strex	r3, r2, [r1]
 800e672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1e5      	bne.n	800e646 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e67e:	2b01      	cmp	r3, #1
 800e680:	d118      	bne.n	800e6b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	e853 3f00 	ldrex	r3, [r3]
 800e68e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	f023 0310 	bic.w	r3, r3, #16
 800e696:	647b      	str	r3, [r7, #68]	; 0x44
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	461a      	mov	r2, r3
 800e69e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6a0:	61bb      	str	r3, [r7, #24]
 800e6a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a4:	6979      	ldr	r1, [r7, #20]
 800e6a6:	69ba      	ldr	r2, [r7, #24]
 800e6a8:	e841 2300 	strex	r3, r2, [r1]
 800e6ac:	613b      	str	r3, [r7, #16]
   return(result);
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d1e6      	bne.n	800e682 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2220      	movs	r2, #32
 800e6b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e6c8:	bf00      	nop
 800e6ca:	3754      	adds	r7, #84	; 0x54
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr
 800e6d4:	effffffe 	.word	0xeffffffe

0800e6d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6f6:	68f8      	ldr	r0, [r7, #12]
 800e6f8:	f7ff f850 	bl	800d79c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6fc:	bf00      	nop
 800e6fe:	3710      	adds	r7, #16
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b088      	sub	sp, #32
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	e853 3f00 	ldrex	r3, [r3]
 800e718:	60bb      	str	r3, [r7, #8]
   return(result);
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e720:	61fb      	str	r3, [r7, #28]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	461a      	mov	r2, r3
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	61bb      	str	r3, [r7, #24]
 800e72c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72e:	6979      	ldr	r1, [r7, #20]
 800e730:	69ba      	ldr	r2, [r7, #24]
 800e732:	e841 2300 	strex	r3, r2, [r1]
 800e736:	613b      	str	r3, [r7, #16]
   return(result);
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1e6      	bne.n	800e70c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2220      	movs	r2, #32
 800e742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2200      	movs	r2, #0
 800e74a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7ff f81b 	bl	800d788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e752:	bf00      	nop
 800e754:	3720      	adds	r7, #32
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e75a:	b480      	push	{r7}
 800e75c:	b083      	sub	sp, #12
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e762:	bf00      	nop
 800e764:	370c      	adds	r7, #12
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr

0800e76e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e76e:	b480      	push	{r7}
 800e770:	b083      	sub	sp, #12
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e776:	bf00      	nop
 800e778:	370c      	adds	r7, #12
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr

0800e782 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e782:	b480      	push	{r7}
 800e784:	b083      	sub	sp, #12
 800e786:	af00      	add	r7, sp, #0
 800e788:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e78a:	bf00      	nop
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr

0800e796 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e796:	b480      	push	{r7}
 800e798:	b085      	sub	sp, #20
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d101      	bne.n	800e7ac <HAL_UARTEx_DisableFifoMode+0x16>
 800e7a8:	2302      	movs	r3, #2
 800e7aa:	e027      	b.n	800e7fc <HAL_UARTEx_DisableFifoMode+0x66>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2224      	movs	r2, #36	; 0x24
 800e7b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f022 0201 	bic.w	r2, r2, #1
 800e7d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e7da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	68fa      	ldr	r2, [r7, #12]
 800e7e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2220      	movs	r2, #32
 800e7ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e7fa:	2300      	movs	r3, #0
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3714      	adds	r7, #20
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d101      	bne.n	800e820 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e81c:	2302      	movs	r3, #2
 800e81e:	e02d      	b.n	800e87c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2201      	movs	r2, #1
 800e824:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2224      	movs	r2, #36	; 0x24
 800e82c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f022 0201 	bic.w	r2, r2, #1
 800e846:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	430a      	orrs	r2, r1
 800e85a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f000 f84f 	bl	800e900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	68fa      	ldr	r2, [r7, #12]
 800e868:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2220      	movs	r2, #32
 800e86e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2200      	movs	r2, #0
 800e876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e87a:	2300      	movs	r3, #0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e894:	2b01      	cmp	r3, #1
 800e896:	d101      	bne.n	800e89c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e898:	2302      	movs	r3, #2
 800e89a:	e02d      	b.n	800e8f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2201      	movs	r2, #1
 800e8a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2224      	movs	r2, #36	; 0x24
 800e8a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f022 0201 	bic.w	r2, r2, #1
 800e8c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	683a      	ldr	r2, [r7, #0]
 800e8d4:	430a      	orrs	r2, r1
 800e8d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 f811 	bl	800e900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	68fa      	ldr	r2, [r7, #12]
 800e8e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2220      	movs	r2, #32
 800e8ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3710      	adds	r7, #16
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e900:	b480      	push	{r7}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d108      	bne.n	800e922 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2201      	movs	r2, #1
 800e91c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e920:	e031      	b.n	800e986 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e922:	2310      	movs	r3, #16
 800e924:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e926:	2310      	movs	r3, #16
 800e928:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	0e5b      	lsrs	r3, r3, #25
 800e932:	b2db      	uxtb	r3, r3
 800e934:	f003 0307 	and.w	r3, r3, #7
 800e938:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	0f5b      	lsrs	r3, r3, #29
 800e942:	b2db      	uxtb	r3, r3
 800e944:	f003 0307 	and.w	r3, r3, #7
 800e948:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e94a:	7bbb      	ldrb	r3, [r7, #14]
 800e94c:	7b3a      	ldrb	r2, [r7, #12]
 800e94e:	4911      	ldr	r1, [pc, #68]	; (800e994 <UARTEx_SetNbDataToProcess+0x94>)
 800e950:	5c8a      	ldrb	r2, [r1, r2]
 800e952:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e956:	7b3a      	ldrb	r2, [r7, #12]
 800e958:	490f      	ldr	r1, [pc, #60]	; (800e998 <UARTEx_SetNbDataToProcess+0x98>)
 800e95a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e95c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e960:	b29a      	uxth	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e968:	7bfb      	ldrb	r3, [r7, #15]
 800e96a:	7b7a      	ldrb	r2, [r7, #13]
 800e96c:	4909      	ldr	r1, [pc, #36]	; (800e994 <UARTEx_SetNbDataToProcess+0x94>)
 800e96e:	5c8a      	ldrb	r2, [r1, r2]
 800e970:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e974:	7b7a      	ldrb	r2, [r7, #13]
 800e976:	4908      	ldr	r1, [pc, #32]	; (800e998 <UARTEx_SetNbDataToProcess+0x98>)
 800e978:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e97a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e97e:	b29a      	uxth	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e986:	bf00      	nop
 800e988:	3714      	adds	r7, #20
 800e98a:	46bd      	mov	sp, r7
 800e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e990:	4770      	bx	lr
 800e992:	bf00      	nop
 800e994:	08011a10 	.word	0x08011a10
 800e998:	08011a18 	.word	0x08011a18

0800e99c <__NVIC_SetPriority>:
{
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	6039      	str	r1, [r7, #0]
 800e9a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e9a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	db0a      	blt.n	800e9c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	b2da      	uxtb	r2, r3
 800e9b4:	490c      	ldr	r1, [pc, #48]	; (800e9e8 <__NVIC_SetPriority+0x4c>)
 800e9b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9ba:	0112      	lsls	r2, r2, #4
 800e9bc:	b2d2      	uxtb	r2, r2
 800e9be:	440b      	add	r3, r1
 800e9c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e9c4:	e00a      	b.n	800e9dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	b2da      	uxtb	r2, r3
 800e9ca:	4908      	ldr	r1, [pc, #32]	; (800e9ec <__NVIC_SetPriority+0x50>)
 800e9cc:	88fb      	ldrh	r3, [r7, #6]
 800e9ce:	f003 030f 	and.w	r3, r3, #15
 800e9d2:	3b04      	subs	r3, #4
 800e9d4:	0112      	lsls	r2, r2, #4
 800e9d6:	b2d2      	uxtb	r2, r2
 800e9d8:	440b      	add	r3, r1
 800e9da:	761a      	strb	r2, [r3, #24]
}
 800e9dc:	bf00      	nop
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr
 800e9e8:	e000e100 	.word	0xe000e100
 800e9ec:	e000ed00 	.word	0xe000ed00

0800e9f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e9f4:	4b05      	ldr	r3, [pc, #20]	; (800ea0c <SysTick_Handler+0x1c>)
 800e9f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e9f8:	f001 fe44 	bl	8010684 <xTaskGetSchedulerState>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d001      	beq.n	800ea06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ea02:	f002 fc29 	bl	8011258 <xPortSysTickHandler>
  }
}
 800ea06:	bf00      	nop
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	e000e010 	.word	0xe000e010

0800ea10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ea10:	b580      	push	{r7, lr}
 800ea12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ea14:	2100      	movs	r1, #0
 800ea16:	f06f 0004 	mvn.w	r0, #4
 800ea1a:	f7ff ffbf 	bl	800e99c <__NVIC_SetPriority>
#endif
}
 800ea1e:	bf00      	nop
 800ea20:	bd80      	pop	{r7, pc}
	...

0800ea24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea2a:	f3ef 8305 	mrs	r3, IPSR
 800ea2e:	603b      	str	r3, [r7, #0]
  return(result);
 800ea30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d003      	beq.n	800ea3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ea36:	f06f 0305 	mvn.w	r3, #5
 800ea3a:	607b      	str	r3, [r7, #4]
 800ea3c:	e00c      	b.n	800ea58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ea3e:	4b0a      	ldr	r3, [pc, #40]	; (800ea68 <osKernelInitialize+0x44>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d105      	bne.n	800ea52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ea46:	4b08      	ldr	r3, [pc, #32]	; (800ea68 <osKernelInitialize+0x44>)
 800ea48:	2201      	movs	r2, #1
 800ea4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	607b      	str	r3, [r7, #4]
 800ea50:	e002      	b.n	800ea58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ea52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ea58:	687b      	ldr	r3, [r7, #4]
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr
 800ea66:	bf00      	nop
 800ea68:	2400076c 	.word	0x2400076c

0800ea6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea72:	f3ef 8305 	mrs	r3, IPSR
 800ea76:	603b      	str	r3, [r7, #0]
  return(result);
 800ea78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d003      	beq.n	800ea86 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ea7e:	f06f 0305 	mvn.w	r3, #5
 800ea82:	607b      	str	r3, [r7, #4]
 800ea84:	e010      	b.n	800eaa8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ea86:	4b0b      	ldr	r3, [pc, #44]	; (800eab4 <osKernelStart+0x48>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d109      	bne.n	800eaa2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ea8e:	f7ff ffbf 	bl	800ea10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ea92:	4b08      	ldr	r3, [pc, #32]	; (800eab4 <osKernelStart+0x48>)
 800ea94:	2202      	movs	r2, #2
 800ea96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ea98:	f001 f9a4 	bl	800fde4 <vTaskStartScheduler>
      stat = osOK;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	607b      	str	r3, [r7, #4]
 800eaa0:	e002      	b.n	800eaa8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800eaa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800eaa8:	687b      	ldr	r3, [r7, #4]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3708      	adds	r7, #8
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	2400076c 	.word	0x2400076c

0800eab8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b08e      	sub	sp, #56	; 0x38
 800eabc:	af04      	add	r7, sp, #16
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eac4:	2300      	movs	r3, #0
 800eac6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eac8:	f3ef 8305 	mrs	r3, IPSR
 800eacc:	617b      	str	r3, [r7, #20]
  return(result);
 800eace:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d17e      	bne.n	800ebd2 <osThreadNew+0x11a>
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d07b      	beq.n	800ebd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800eada:	2380      	movs	r3, #128	; 0x80
 800eadc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800eade:	2318      	movs	r3, #24
 800eae0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800eae2:	2300      	movs	r3, #0
 800eae4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800eae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d045      	beq.n	800eb7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d002      	beq.n	800eb00 <osThreadNew+0x48>
        name = attr->name;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	699b      	ldr	r3, [r3, #24]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d002      	beq.n	800eb0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	699b      	ldr	r3, [r3, #24]
 800eb0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d008      	beq.n	800eb26 <osThreadNew+0x6e>
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	2b38      	cmp	r3, #56	; 0x38
 800eb18:	d805      	bhi.n	800eb26 <osThreadNew+0x6e>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	f003 0301 	and.w	r3, r3, #1
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d001      	beq.n	800eb2a <osThreadNew+0x72>
        return (NULL);
 800eb26:	2300      	movs	r3, #0
 800eb28:	e054      	b.n	800ebd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	695b      	ldr	r3, [r3, #20]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d003      	beq.n	800eb3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	695b      	ldr	r3, [r3, #20]
 800eb36:	089b      	lsrs	r3, r3, #2
 800eb38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	689b      	ldr	r3, [r3, #8]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00e      	beq.n	800eb60 <osThreadNew+0xa8>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	68db      	ldr	r3, [r3, #12]
 800eb46:	2b5b      	cmp	r3, #91	; 0x5b
 800eb48:	d90a      	bls.n	800eb60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d006      	beq.n	800eb60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	695b      	ldr	r3, [r3, #20]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d002      	beq.n	800eb60 <osThreadNew+0xa8>
        mem = 1;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	61bb      	str	r3, [r7, #24]
 800eb5e:	e010      	b.n	800eb82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	689b      	ldr	r3, [r3, #8]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d10c      	bne.n	800eb82 <osThreadNew+0xca>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d108      	bne.n	800eb82 <osThreadNew+0xca>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d104      	bne.n	800eb82 <osThreadNew+0xca>
          mem = 0;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	61bb      	str	r3, [r7, #24]
 800eb7c:	e001      	b.n	800eb82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d110      	bne.n	800ebaa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eb90:	9202      	str	r2, [sp, #8]
 800eb92:	9301      	str	r3, [sp, #4]
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	9300      	str	r3, [sp, #0]
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	6a3a      	ldr	r2, [r7, #32]
 800eb9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f000 ff4a 	bl	800fa38 <xTaskCreateStatic>
 800eba4:	4603      	mov	r3, r0
 800eba6:	613b      	str	r3, [r7, #16]
 800eba8:	e013      	b.n	800ebd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ebaa:	69bb      	ldr	r3, [r7, #24]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d110      	bne.n	800ebd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ebb0:	6a3b      	ldr	r3, [r7, #32]
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	f107 0310 	add.w	r3, r7, #16
 800ebb8:	9301      	str	r3, [sp, #4]
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	9300      	str	r3, [sp, #0]
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	f000 ff95 	bl	800faf2 <xTaskCreate>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d001      	beq.n	800ebd2 <osThreadNew+0x11a>
            hTask = NULL;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ebd2:	693b      	ldr	r3, [r7, #16]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3728      	adds	r7, #40	; 0x28
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebe4:	f3ef 8305 	mrs	r3, IPSR
 800ebe8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ebea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d003      	beq.n	800ebf8 <osDelay+0x1c>
    stat = osErrorISR;
 800ebf0:	f06f 0305 	mvn.w	r3, #5
 800ebf4:	60fb      	str	r3, [r7, #12]
 800ebf6:	e007      	b.n	800ec08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d002      	beq.n	800ec08 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f001 f8ba 	bl	800fd7c <vTaskDelay>
    }
  }

  return (stat);
 800ec08:	68fb      	ldr	r3, [r7, #12]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b086      	sub	sp, #24
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec1e:	f3ef 8305 	mrs	r3, IPSR
 800ec22:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec24:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d12d      	bne.n	800ec86 <osEventFlagsNew+0x74>
    mem = -1;
 800ec2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec2e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d015      	beq.n	800ec62 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	689b      	ldr	r3, [r3, #8]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d006      	beq.n	800ec4c <osEventFlagsNew+0x3a>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	2b1f      	cmp	r3, #31
 800ec44:	d902      	bls.n	800ec4c <osEventFlagsNew+0x3a>
        mem = 1;
 800ec46:	2301      	movs	r3, #1
 800ec48:	613b      	str	r3, [r7, #16]
 800ec4a:	e00c      	b.n	800ec66 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d108      	bne.n	800ec66 <osEventFlagsNew+0x54>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d104      	bne.n	800ec66 <osEventFlagsNew+0x54>
          mem = 0;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	613b      	str	r3, [r7, #16]
 800ec60:	e001      	b.n	800ec66 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800ec62:	2300      	movs	r3, #0
 800ec64:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d106      	bne.n	800ec7a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	4618      	mov	r0, r3
 800ec72:	f000 f8b5 	bl	800ede0 <xEventGroupCreateStatic>
 800ec76:	6178      	str	r0, [r7, #20]
 800ec78:	e005      	b.n	800ec86 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d102      	bne.n	800ec86 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800ec80:	f000 f8e5 	bl	800ee4e <xEventGroupCreate>
 800ec84:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800ec86:	697b      	ldr	r3, [r7, #20]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3718      	adds	r7, #24
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b08a      	sub	sp, #40	; 0x28
 800ec94:	af02      	add	r7, sp, #8
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eca0:	f3ef 8305 	mrs	r3, IPSR
 800eca4:	613b      	str	r3, [r7, #16]
  return(result);
 800eca6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d15f      	bne.n	800ed6c <osMessageQueueNew+0xdc>
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d05c      	beq.n	800ed6c <osMessageQueueNew+0xdc>
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d059      	beq.n	800ed6c <osMessageQueueNew+0xdc>
    mem = -1;
 800ecb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecbc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d029      	beq.n	800ed18 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d012      	beq.n	800ecf2 <osMessageQueueNew+0x62>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	2b4f      	cmp	r3, #79	; 0x4f
 800ecd2:	d90e      	bls.n	800ecf2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d00a      	beq.n	800ecf2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	695a      	ldr	r2, [r3, #20]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	68b9      	ldr	r1, [r7, #8]
 800ece4:	fb01 f303 	mul.w	r3, r1, r3
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d302      	bcc.n	800ecf2 <osMessageQueueNew+0x62>
        mem = 1;
 800ecec:	2301      	movs	r3, #1
 800ecee:	61bb      	str	r3, [r7, #24]
 800ecf0:	e014      	b.n	800ed1c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d110      	bne.n	800ed1c <osMessageQueueNew+0x8c>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	68db      	ldr	r3, [r3, #12]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d10c      	bne.n	800ed1c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d108      	bne.n	800ed1c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	695b      	ldr	r3, [r3, #20]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d104      	bne.n	800ed1c <osMessageQueueNew+0x8c>
          mem = 0;
 800ed12:	2300      	movs	r3, #0
 800ed14:	61bb      	str	r3, [r7, #24]
 800ed16:	e001      	b.n	800ed1c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d10b      	bne.n	800ed3a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	691a      	ldr	r2, [r3, #16]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	2100      	movs	r1, #0
 800ed2c:	9100      	str	r1, [sp, #0]
 800ed2e:	68b9      	ldr	r1, [r7, #8]
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	f000 f9c3 	bl	800f0bc <xQueueGenericCreateStatic>
 800ed36:	61f8      	str	r0, [r7, #28]
 800ed38:	e008      	b.n	800ed4c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d105      	bne.n	800ed4c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ed40:	2200      	movs	r2, #0
 800ed42:	68b9      	ldr	r1, [r7, #8]
 800ed44:	68f8      	ldr	r0, [r7, #12]
 800ed46:	f000 fa31 	bl	800f1ac <xQueueGenericCreate>
 800ed4a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d00c      	beq.n	800ed6c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d003      	beq.n	800ed60 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	617b      	str	r3, [r7, #20]
 800ed5e:	e001      	b.n	800ed64 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ed60:	2300      	movs	r3, #0
 800ed62:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ed64:	6979      	ldr	r1, [r7, #20]
 800ed66:	69f8      	ldr	r0, [r7, #28]
 800ed68:	f000 fe08 	bl	800f97c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ed6c:	69fb      	ldr	r3, [r7, #28]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3720      	adds	r7, #32
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
	...

0800ed78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ed78:	b480      	push	{r7}
 800ed7a:	b085      	sub	sp, #20
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	60f8      	str	r0, [r7, #12]
 800ed80:	60b9      	str	r1, [r7, #8]
 800ed82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	4a07      	ldr	r2, [pc, #28]	; (800eda4 <vApplicationGetIdleTaskMemory+0x2c>)
 800ed88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	4a06      	ldr	r2, [pc, #24]	; (800eda8 <vApplicationGetIdleTaskMemory+0x30>)
 800ed8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2280      	movs	r2, #128	; 0x80
 800ed94:	601a      	str	r2, [r3, #0]
}
 800ed96:	bf00      	nop
 800ed98:	3714      	adds	r7, #20
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	24000770 	.word	0x24000770
 800eda8:	240007cc 	.word	0x240007cc

0800edac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800edac:	b480      	push	{r7}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	60b9      	str	r1, [r7, #8]
 800edb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	4a07      	ldr	r2, [pc, #28]	; (800edd8 <vApplicationGetTimerTaskMemory+0x2c>)
 800edbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	4a06      	ldr	r2, [pc, #24]	; (800eddc <vApplicationGetTimerTaskMemory+0x30>)
 800edc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800edca:	601a      	str	r2, [r3, #0]
}
 800edcc:	bf00      	nop
 800edce:	3714      	adds	r7, #20
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr
 800edd8:	240009cc 	.word	0x240009cc
 800eddc:	24000a28 	.word	0x24000a28

0800ede0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d10a      	bne.n	800ee04 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800edee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf2:	f383 8811 	msr	BASEPRI, r3
 800edf6:	f3bf 8f6f 	isb	sy
 800edfa:	f3bf 8f4f 	dsb	sy
 800edfe:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ee00:	bf00      	nop
 800ee02:	e7fe      	b.n	800ee02 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800ee04:	2320      	movs	r3, #32
 800ee06:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	2b20      	cmp	r3, #32
 800ee0c:	d00a      	beq.n	800ee24 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800ee0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee12:	f383 8811 	msr	BASEPRI, r3
 800ee16:	f3bf 8f6f 	isb	sy
 800ee1a:	f3bf 8f4f 	dsb	sy
 800ee1e:	60fb      	str	r3, [r7, #12]
}
 800ee20:	bf00      	nop
 800ee22:	e7fe      	b.n	800ee22 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d00a      	beq.n	800ee44 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	2200      	movs	r2, #0
 800ee32:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	3304      	adds	r3, #4
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f000 f822 	bl	800ee82 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	2201      	movs	r2, #1
 800ee42:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800ee44:	697b      	ldr	r3, [r7, #20]
	}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3718      	adds	r7, #24
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b082      	sub	sp, #8
 800ee52:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800ee54:	2020      	movs	r0, #32
 800ee56:	f002 fa8f 	bl	8011378 <pvPortMalloc>
 800ee5a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d00a      	beq.n	800ee78 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	3304      	adds	r3, #4
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f000 f808 	bl	800ee82 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800ee78:	687b      	ldr	r3, [r7, #4]
	}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ee82:	b480      	push	{r7}
 800ee84:	b083      	sub	sp, #12
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f103 0208 	add.w	r2, r3, #8
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee9a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f103 0208 	add.w	r2, r3, #8
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f103 0208 	add.w	r2, r3, #8
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eeb6:	bf00      	nop
 800eeb8:	370c      	adds	r7, #12
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eec2:	b480      	push	{r7}
 800eec4:	b083      	sub	sp, #12
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2200      	movs	r2, #0
 800eece:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eed0:	bf00      	nop
 800eed2:	370c      	adds	r7, #12
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	68fa      	ldr	r2, [r7, #12]
 800eef0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	689a      	ldr	r2, [r3, #8]
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	683a      	ldr	r2, [r7, #0]
 800ef00:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	683a      	ldr	r2, [r7, #0]
 800ef06:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	1c5a      	adds	r2, r3, #1
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	601a      	str	r2, [r3, #0]
}
 800ef18:	bf00      	nop
 800ef1a:	3714      	adds	r7, #20
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef24:	b480      	push	{r7}
 800ef26:	b085      	sub	sp, #20
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef3a:	d103      	bne.n	800ef44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	691b      	ldr	r3, [r3, #16]
 800ef40:	60fb      	str	r3, [r7, #12]
 800ef42:	e00c      	b.n	800ef5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	3308      	adds	r3, #8
 800ef48:	60fb      	str	r3, [r7, #12]
 800ef4a:	e002      	b.n	800ef52 <vListInsert+0x2e>
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	60fb      	str	r3, [r7, #12]
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	68ba      	ldr	r2, [r7, #8]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d2f6      	bcs.n	800ef4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	685a      	ldr	r2, [r3, #4]
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	683a      	ldr	r2, [r7, #0]
 800ef6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	68fa      	ldr	r2, [r7, #12]
 800ef72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	683a      	ldr	r2, [r7, #0]
 800ef78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	1c5a      	adds	r2, r3, #1
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	601a      	str	r2, [r3, #0]
}
 800ef8a:	bf00      	nop
 800ef8c:	3714      	adds	r7, #20
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr

0800ef96 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ef96:	b480      	push	{r7}
 800ef98:	b085      	sub	sp, #20
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	691b      	ldr	r3, [r3, #16]
 800efa2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	6892      	ldr	r2, [r2, #8]
 800efac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	6852      	ldr	r2, [r2, #4]
 800efb6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d103      	bne.n	800efca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	689a      	ldr	r2, [r3, #8]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	1e5a      	subs	r2, r3, #1
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3714      	adds	r7, #20
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr
	...

0800efec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d10a      	bne.n	800f016 <xQueueGenericReset+0x2a>
	__asm volatile
 800f000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f004:	f383 8811 	msr	BASEPRI, r3
 800f008:	f3bf 8f6f 	isb	sy
 800f00c:	f3bf 8f4f 	dsb	sy
 800f010:	60bb      	str	r3, [r7, #8]
}
 800f012:	bf00      	nop
 800f014:	e7fe      	b.n	800f014 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f016:	f002 f88d 	bl	8011134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f022:	68f9      	ldr	r1, [r7, #12]
 800f024:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f026:	fb01 f303 	mul.w	r3, r1, r3
 800f02a:	441a      	add	r2, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2200      	movs	r2, #0
 800f034:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f046:	3b01      	subs	r3, #1
 800f048:	68f9      	ldr	r1, [r7, #12]
 800f04a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f04c:	fb01 f303 	mul.w	r3, r1, r3
 800f050:	441a      	add	r2, r3
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	22ff      	movs	r2, #255	; 0xff
 800f05a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	22ff      	movs	r2, #255	; 0xff
 800f062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d114      	bne.n	800f096 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	691b      	ldr	r3, [r3, #16]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d01a      	beq.n	800f0aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	3310      	adds	r3, #16
 800f078:	4618      	mov	r0, r3
 800f07a:	f001 f945 	bl	8010308 <xTaskRemoveFromEventList>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d012      	beq.n	800f0aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f084:	4b0c      	ldr	r3, [pc, #48]	; (800f0b8 <xQueueGenericReset+0xcc>)
 800f086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f08a:	601a      	str	r2, [r3, #0]
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	f3bf 8f6f 	isb	sy
 800f094:	e009      	b.n	800f0aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	3310      	adds	r3, #16
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7ff fef1 	bl	800ee82 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	3324      	adds	r3, #36	; 0x24
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7ff feec 	bl	800ee82 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f0aa:	f002 f873 	bl	8011194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f0ae:	2301      	movs	r3, #1
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3710      	adds	r7, #16
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	e000ed04 	.word	0xe000ed04

0800f0bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b08e      	sub	sp, #56	; 0x38
 800f0c0:	af02      	add	r7, sp, #8
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	607a      	str	r2, [r7, #4]
 800f0c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d10a      	bne.n	800f0e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d4:	f383 8811 	msr	BASEPRI, r3
 800f0d8:	f3bf 8f6f 	isb	sy
 800f0dc:	f3bf 8f4f 	dsb	sy
 800f0e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f0e2:	bf00      	nop
 800f0e4:	e7fe      	b.n	800f0e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d10a      	bne.n	800f102 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f0:	f383 8811 	msr	BASEPRI, r3
 800f0f4:	f3bf 8f6f 	isb	sy
 800f0f8:	f3bf 8f4f 	dsb	sy
 800f0fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f0fe:	bf00      	nop
 800f100:	e7fe      	b.n	800f100 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d002      	beq.n	800f10e <xQueueGenericCreateStatic+0x52>
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d001      	beq.n	800f112 <xQueueGenericCreateStatic+0x56>
 800f10e:	2301      	movs	r3, #1
 800f110:	e000      	b.n	800f114 <xQueueGenericCreateStatic+0x58>
 800f112:	2300      	movs	r3, #0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d10a      	bne.n	800f12e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11c:	f383 8811 	msr	BASEPRI, r3
 800f120:	f3bf 8f6f 	isb	sy
 800f124:	f3bf 8f4f 	dsb	sy
 800f128:	623b      	str	r3, [r7, #32]
}
 800f12a:	bf00      	nop
 800f12c:	e7fe      	b.n	800f12c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d102      	bne.n	800f13a <xQueueGenericCreateStatic+0x7e>
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d101      	bne.n	800f13e <xQueueGenericCreateStatic+0x82>
 800f13a:	2301      	movs	r3, #1
 800f13c:	e000      	b.n	800f140 <xQueueGenericCreateStatic+0x84>
 800f13e:	2300      	movs	r3, #0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d10a      	bne.n	800f15a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f148:	f383 8811 	msr	BASEPRI, r3
 800f14c:	f3bf 8f6f 	isb	sy
 800f150:	f3bf 8f4f 	dsb	sy
 800f154:	61fb      	str	r3, [r7, #28]
}
 800f156:	bf00      	nop
 800f158:	e7fe      	b.n	800f158 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f15a:	2350      	movs	r3, #80	; 0x50
 800f15c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	2b50      	cmp	r3, #80	; 0x50
 800f162:	d00a      	beq.n	800f17a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f168:	f383 8811 	msr	BASEPRI, r3
 800f16c:	f3bf 8f6f 	isb	sy
 800f170:	f3bf 8f4f 	dsb	sy
 800f174:	61bb      	str	r3, [r7, #24]
}
 800f176:	bf00      	nop
 800f178:	e7fe      	b.n	800f178 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f17a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00d      	beq.n	800f1a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f188:	2201      	movs	r2, #1
 800f18a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f18e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f194:	9300      	str	r3, [sp, #0]
 800f196:	4613      	mov	r3, r2
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	68b9      	ldr	r1, [r7, #8]
 800f19c:	68f8      	ldr	r0, [r7, #12]
 800f19e:	f000 f83f 	bl	800f220 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3730      	adds	r7, #48	; 0x30
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b08a      	sub	sp, #40	; 0x28
 800f1b0:	af02      	add	r7, sp, #8
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d10a      	bne.n	800f1d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c4:	f383 8811 	msr	BASEPRI, r3
 800f1c8:	f3bf 8f6f 	isb	sy
 800f1cc:	f3bf 8f4f 	dsb	sy
 800f1d0:	613b      	str	r3, [r7, #16]
}
 800f1d2:	bf00      	nop
 800f1d4:	e7fe      	b.n	800f1d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	fb02 f303 	mul.w	r3, r2, r3
 800f1de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	3350      	adds	r3, #80	; 0x50
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f002 f8c7 	bl	8011378 <pvPortMalloc>
 800f1ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f1ec:	69bb      	ldr	r3, [r7, #24]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d011      	beq.n	800f216 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	3350      	adds	r3, #80	; 0x50
 800f1fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	2200      	movs	r2, #0
 800f200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f204:	79fa      	ldrb	r2, [r7, #7]
 800f206:	69bb      	ldr	r3, [r7, #24]
 800f208:	9300      	str	r3, [sp, #0]
 800f20a:	4613      	mov	r3, r2
 800f20c:	697a      	ldr	r2, [r7, #20]
 800f20e:	68b9      	ldr	r1, [r7, #8]
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	f000 f805 	bl	800f220 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f216:	69bb      	ldr	r3, [r7, #24]
	}
 800f218:	4618      	mov	r0, r3
 800f21a:	3720      	adds	r7, #32
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}

0800f220 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b084      	sub	sp, #16
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	607a      	str	r2, [r7, #4]
 800f22c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d103      	bne.n	800f23c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	69ba      	ldr	r2, [r7, #24]
 800f238:	601a      	str	r2, [r3, #0]
 800f23a:	e002      	b.n	800f242 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f248:	69bb      	ldr	r3, [r7, #24]
 800f24a:	68ba      	ldr	r2, [r7, #8]
 800f24c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f24e:	2101      	movs	r1, #1
 800f250:	69b8      	ldr	r0, [r7, #24]
 800f252:	f7ff fecb 	bl	800efec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	78fa      	ldrb	r2, [r7, #3]
 800f25a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f25e:	bf00      	nop
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
	...

0800f268 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b08e      	sub	sp, #56	; 0x38
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	607a      	str	r2, [r7, #4]
 800f274:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f276:	2300      	movs	r3, #0
 800f278:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f280:	2b00      	cmp	r3, #0
 800f282:	d10a      	bne.n	800f29a <xQueueGenericSend+0x32>
	__asm volatile
 800f284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f288:	f383 8811 	msr	BASEPRI, r3
 800f28c:	f3bf 8f6f 	isb	sy
 800f290:	f3bf 8f4f 	dsb	sy
 800f294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f296:	bf00      	nop
 800f298:	e7fe      	b.n	800f298 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d103      	bne.n	800f2a8 <xQueueGenericSend+0x40>
 800f2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d101      	bne.n	800f2ac <xQueueGenericSend+0x44>
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	e000      	b.n	800f2ae <xQueueGenericSend+0x46>
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d10a      	bne.n	800f2c8 <xQueueGenericSend+0x60>
	__asm volatile
 800f2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b6:	f383 8811 	msr	BASEPRI, r3
 800f2ba:	f3bf 8f6f 	isb	sy
 800f2be:	f3bf 8f4f 	dsb	sy
 800f2c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f2c4:	bf00      	nop
 800f2c6:	e7fe      	b.n	800f2c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	2b02      	cmp	r3, #2
 800f2cc:	d103      	bne.n	800f2d6 <xQueueGenericSend+0x6e>
 800f2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d101      	bne.n	800f2da <xQueueGenericSend+0x72>
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	e000      	b.n	800f2dc <xQueueGenericSend+0x74>
 800f2da:	2300      	movs	r3, #0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d10a      	bne.n	800f2f6 <xQueueGenericSend+0x8e>
	__asm volatile
 800f2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e4:	f383 8811 	msr	BASEPRI, r3
 800f2e8:	f3bf 8f6f 	isb	sy
 800f2ec:	f3bf 8f4f 	dsb	sy
 800f2f0:	623b      	str	r3, [r7, #32]
}
 800f2f2:	bf00      	nop
 800f2f4:	e7fe      	b.n	800f2f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f2f6:	f001 f9c5 	bl	8010684 <xTaskGetSchedulerState>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d102      	bne.n	800f306 <xQueueGenericSend+0x9e>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d101      	bne.n	800f30a <xQueueGenericSend+0xa2>
 800f306:	2301      	movs	r3, #1
 800f308:	e000      	b.n	800f30c <xQueueGenericSend+0xa4>
 800f30a:	2300      	movs	r3, #0
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d10a      	bne.n	800f326 <xQueueGenericSend+0xbe>
	__asm volatile
 800f310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f314:	f383 8811 	msr	BASEPRI, r3
 800f318:	f3bf 8f6f 	isb	sy
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	61fb      	str	r3, [r7, #28]
}
 800f322:	bf00      	nop
 800f324:	e7fe      	b.n	800f324 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f326:	f001 ff05 	bl	8011134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f332:	429a      	cmp	r2, r3
 800f334:	d302      	bcc.n	800f33c <xQueueGenericSend+0xd4>
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	2b02      	cmp	r3, #2
 800f33a:	d129      	bne.n	800f390 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f33c:	683a      	ldr	r2, [r7, #0]
 800f33e:	68b9      	ldr	r1, [r7, #8]
 800f340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f342:	f000 fa0b 	bl	800f75c <prvCopyDataToQueue>
 800f346:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d010      	beq.n	800f372 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f352:	3324      	adds	r3, #36	; 0x24
 800f354:	4618      	mov	r0, r3
 800f356:	f000 ffd7 	bl	8010308 <xTaskRemoveFromEventList>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d013      	beq.n	800f388 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f360:	4b3f      	ldr	r3, [pc, #252]	; (800f460 <xQueueGenericSend+0x1f8>)
 800f362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f366:	601a      	str	r2, [r3, #0]
 800f368:	f3bf 8f4f 	dsb	sy
 800f36c:	f3bf 8f6f 	isb	sy
 800f370:	e00a      	b.n	800f388 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f374:	2b00      	cmp	r3, #0
 800f376:	d007      	beq.n	800f388 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f378:	4b39      	ldr	r3, [pc, #228]	; (800f460 <xQueueGenericSend+0x1f8>)
 800f37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f37e:	601a      	str	r2, [r3, #0]
 800f380:	f3bf 8f4f 	dsb	sy
 800f384:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f388:	f001 ff04 	bl	8011194 <vPortExitCritical>
				return pdPASS;
 800f38c:	2301      	movs	r3, #1
 800f38e:	e063      	b.n	800f458 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d103      	bne.n	800f39e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f396:	f001 fefd 	bl	8011194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f39a:	2300      	movs	r3, #0
 800f39c:	e05c      	b.n	800f458 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d106      	bne.n	800f3b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f3a4:	f107 0314 	add.w	r3, r7, #20
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f001 f811 	bl	80103d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f3b2:	f001 feef 	bl	8011194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f3b6:	f000 fd7b 	bl	800feb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f3ba:	f001 febb 	bl	8011134 <vPortEnterCritical>
 800f3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3c4:	b25b      	sxtb	r3, r3
 800f3c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3ca:	d103      	bne.n	800f3d4 <xQueueGenericSend+0x16c>
 800f3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3da:	b25b      	sxtb	r3, r3
 800f3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3e0:	d103      	bne.n	800f3ea <xQueueGenericSend+0x182>
 800f3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3ea:	f001 fed3 	bl	8011194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f3ee:	1d3a      	adds	r2, r7, #4
 800f3f0:	f107 0314 	add.w	r3, r7, #20
 800f3f4:	4611      	mov	r1, r2
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f001 f800 	bl	80103fc <xTaskCheckForTimeOut>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d124      	bne.n	800f44c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f404:	f000 faa2 	bl	800f94c <prvIsQueueFull>
 800f408:	4603      	mov	r3, r0
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d018      	beq.n	800f440 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f410:	3310      	adds	r3, #16
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	4611      	mov	r1, r2
 800f416:	4618      	mov	r0, r3
 800f418:	f000 ff26 	bl	8010268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f41c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f41e:	f000 fa2d 	bl	800f87c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f422:	f000 fd53 	bl	800fecc <xTaskResumeAll>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	f47f af7c 	bne.w	800f326 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f42e:	4b0c      	ldr	r3, [pc, #48]	; (800f460 <xQueueGenericSend+0x1f8>)
 800f430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f434:	601a      	str	r2, [r3, #0]
 800f436:	f3bf 8f4f 	dsb	sy
 800f43a:	f3bf 8f6f 	isb	sy
 800f43e:	e772      	b.n	800f326 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f442:	f000 fa1b 	bl	800f87c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f446:	f000 fd41 	bl	800fecc <xTaskResumeAll>
 800f44a:	e76c      	b.n	800f326 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f44c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f44e:	f000 fa15 	bl	800f87c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f452:	f000 fd3b 	bl	800fecc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f456:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3738      	adds	r7, #56	; 0x38
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	e000ed04 	.word	0xe000ed04

0800f464 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b090      	sub	sp, #64	; 0x40
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	607a      	str	r2, [r7, #4]
 800f470:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d10a      	bne.n	800f492 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f480:	f383 8811 	msr	BASEPRI, r3
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	f3bf 8f4f 	dsb	sy
 800f48c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f48e:	bf00      	nop
 800f490:	e7fe      	b.n	800f490 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d103      	bne.n	800f4a0 <xQueueGenericSendFromISR+0x3c>
 800f498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d101      	bne.n	800f4a4 <xQueueGenericSendFromISR+0x40>
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	e000      	b.n	800f4a6 <xQueueGenericSendFromISR+0x42>
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d10a      	bne.n	800f4c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ae:	f383 8811 	msr	BASEPRI, r3
 800f4b2:	f3bf 8f6f 	isb	sy
 800f4b6:	f3bf 8f4f 	dsb	sy
 800f4ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f4bc:	bf00      	nop
 800f4be:	e7fe      	b.n	800f4be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	2b02      	cmp	r3, #2
 800f4c4:	d103      	bne.n	800f4ce <xQueueGenericSendFromISR+0x6a>
 800f4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	d101      	bne.n	800f4d2 <xQueueGenericSendFromISR+0x6e>
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	e000      	b.n	800f4d4 <xQueueGenericSendFromISR+0x70>
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d10a      	bne.n	800f4ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4dc:	f383 8811 	msr	BASEPRI, r3
 800f4e0:	f3bf 8f6f 	isb	sy
 800f4e4:	f3bf 8f4f 	dsb	sy
 800f4e8:	623b      	str	r3, [r7, #32]
}
 800f4ea:	bf00      	nop
 800f4ec:	e7fe      	b.n	800f4ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f4ee:	f001 ff03 	bl	80112f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f4f2:	f3ef 8211 	mrs	r2, BASEPRI
 800f4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fa:	f383 8811 	msr	BASEPRI, r3
 800f4fe:	f3bf 8f6f 	isb	sy
 800f502:	f3bf 8f4f 	dsb	sy
 800f506:	61fa      	str	r2, [r7, #28]
 800f508:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f50a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f50c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f516:	429a      	cmp	r2, r3
 800f518:	d302      	bcc.n	800f520 <xQueueGenericSendFromISR+0xbc>
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d12f      	bne.n	800f580 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f52e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f530:	683a      	ldr	r2, [r7, #0]
 800f532:	68b9      	ldr	r1, [r7, #8]
 800f534:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f536:	f000 f911 	bl	800f75c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f53a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f53e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f542:	d112      	bne.n	800f56a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d016      	beq.n	800f57a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54e:	3324      	adds	r3, #36	; 0x24
 800f550:	4618      	mov	r0, r3
 800f552:	f000 fed9 	bl	8010308 <xTaskRemoveFromEventList>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d00e      	beq.n	800f57a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d00b      	beq.n	800f57a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2201      	movs	r2, #1
 800f566:	601a      	str	r2, [r3, #0]
 800f568:	e007      	b.n	800f57a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f56a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f56e:	3301      	adds	r3, #1
 800f570:	b2db      	uxtb	r3, r3
 800f572:	b25a      	sxtb	r2, r3
 800f574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f57a:	2301      	movs	r3, #1
 800f57c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f57e:	e001      	b.n	800f584 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f580:	2300      	movs	r3, #0
 800f582:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f586:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f58e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f592:	4618      	mov	r0, r3
 800f594:	3740      	adds	r7, #64	; 0x40
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
	...

0800f59c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b08c      	sub	sp, #48	; 0x30
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d10a      	bne.n	800f5cc <xQueueReceive+0x30>
	__asm volatile
 800f5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ba:	f383 8811 	msr	BASEPRI, r3
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f3bf 8f4f 	dsb	sy
 800f5c6:	623b      	str	r3, [r7, #32]
}
 800f5c8:	bf00      	nop
 800f5ca:	e7fe      	b.n	800f5ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d103      	bne.n	800f5da <xQueueReceive+0x3e>
 800f5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d101      	bne.n	800f5de <xQueueReceive+0x42>
 800f5da:	2301      	movs	r3, #1
 800f5dc:	e000      	b.n	800f5e0 <xQueueReceive+0x44>
 800f5de:	2300      	movs	r3, #0
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d10a      	bne.n	800f5fa <xQueueReceive+0x5e>
	__asm volatile
 800f5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e8:	f383 8811 	msr	BASEPRI, r3
 800f5ec:	f3bf 8f6f 	isb	sy
 800f5f0:	f3bf 8f4f 	dsb	sy
 800f5f4:	61fb      	str	r3, [r7, #28]
}
 800f5f6:	bf00      	nop
 800f5f8:	e7fe      	b.n	800f5f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5fa:	f001 f843 	bl	8010684 <xTaskGetSchedulerState>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2b00      	cmp	r3, #0
 800f602:	d102      	bne.n	800f60a <xQueueReceive+0x6e>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d101      	bne.n	800f60e <xQueueReceive+0x72>
 800f60a:	2301      	movs	r3, #1
 800f60c:	e000      	b.n	800f610 <xQueueReceive+0x74>
 800f60e:	2300      	movs	r3, #0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d10a      	bne.n	800f62a <xQueueReceive+0x8e>
	__asm volatile
 800f614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f618:	f383 8811 	msr	BASEPRI, r3
 800f61c:	f3bf 8f6f 	isb	sy
 800f620:	f3bf 8f4f 	dsb	sy
 800f624:	61bb      	str	r3, [r7, #24]
}
 800f626:	bf00      	nop
 800f628:	e7fe      	b.n	800f628 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f62a:	f001 fd83 	bl	8011134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f632:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f636:	2b00      	cmp	r3, #0
 800f638:	d01f      	beq.n	800f67a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f63a:	68b9      	ldr	r1, [r7, #8]
 800f63c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f63e:	f000 f8f7 	bl	800f830 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f644:	1e5a      	subs	r2, r3, #1
 800f646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f648:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f64c:	691b      	ldr	r3, [r3, #16]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d00f      	beq.n	800f672 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f654:	3310      	adds	r3, #16
 800f656:	4618      	mov	r0, r3
 800f658:	f000 fe56 	bl	8010308 <xTaskRemoveFromEventList>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d007      	beq.n	800f672 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f662:	4b3d      	ldr	r3, [pc, #244]	; (800f758 <xQueueReceive+0x1bc>)
 800f664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f668:	601a      	str	r2, [r3, #0]
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f672:	f001 fd8f 	bl	8011194 <vPortExitCritical>
				return pdPASS;
 800f676:	2301      	movs	r3, #1
 800f678:	e069      	b.n	800f74e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d103      	bne.n	800f688 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f680:	f001 fd88 	bl	8011194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f684:	2300      	movs	r3, #0
 800f686:	e062      	b.n	800f74e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d106      	bne.n	800f69c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f68e:	f107 0310 	add.w	r3, r7, #16
 800f692:	4618      	mov	r0, r3
 800f694:	f000 fe9c 	bl	80103d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f698:	2301      	movs	r3, #1
 800f69a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f69c:	f001 fd7a 	bl	8011194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f6a0:	f000 fc06 	bl	800feb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f6a4:	f001 fd46 	bl	8011134 <vPortEnterCritical>
 800f6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6ae:	b25b      	sxtb	r3, r3
 800f6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6b4:	d103      	bne.n	800f6be <xQueueReceive+0x122>
 800f6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6c4:	b25b      	sxtb	r3, r3
 800f6c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6ca:	d103      	bne.n	800f6d4 <xQueueReceive+0x138>
 800f6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6d4:	f001 fd5e 	bl	8011194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f6d8:	1d3a      	adds	r2, r7, #4
 800f6da:	f107 0310 	add.w	r3, r7, #16
 800f6de:	4611      	mov	r1, r2
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f000 fe8b 	bl	80103fc <xTaskCheckForTimeOut>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d123      	bne.n	800f734 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6ee:	f000 f917 	bl	800f920 <prvIsQueueEmpty>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d017      	beq.n	800f728 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fa:	3324      	adds	r3, #36	; 0x24
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	4611      	mov	r1, r2
 800f700:	4618      	mov	r0, r3
 800f702:	f000 fdb1 	bl	8010268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f708:	f000 f8b8 	bl	800f87c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f70c:	f000 fbde 	bl	800fecc <xTaskResumeAll>
 800f710:	4603      	mov	r3, r0
 800f712:	2b00      	cmp	r3, #0
 800f714:	d189      	bne.n	800f62a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f716:	4b10      	ldr	r3, [pc, #64]	; (800f758 <xQueueReceive+0x1bc>)
 800f718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f71c:	601a      	str	r2, [r3, #0]
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	f3bf 8f6f 	isb	sy
 800f726:	e780      	b.n	800f62a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f72a:	f000 f8a7 	bl	800f87c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f72e:	f000 fbcd 	bl	800fecc <xTaskResumeAll>
 800f732:	e77a      	b.n	800f62a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f736:	f000 f8a1 	bl	800f87c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f73a:	f000 fbc7 	bl	800fecc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f740:	f000 f8ee 	bl	800f920 <prvIsQueueEmpty>
 800f744:	4603      	mov	r3, r0
 800f746:	2b00      	cmp	r3, #0
 800f748:	f43f af6f 	beq.w	800f62a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f74c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3730      	adds	r7, #48	; 0x30
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	e000ed04 	.word	0xe000ed04

0800f75c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b086      	sub	sp, #24
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f768:	2300      	movs	r3, #0
 800f76a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f770:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f776:	2b00      	cmp	r3, #0
 800f778:	d10d      	bne.n	800f796 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d14d      	bne.n	800f81e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	4618      	mov	r0, r3
 800f788:	f000 ff9a 	bl	80106c0 <xTaskPriorityDisinherit>
 800f78c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2200      	movs	r2, #0
 800f792:	609a      	str	r2, [r3, #8]
 800f794:	e043      	b.n	800f81e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d119      	bne.n	800f7d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	6858      	ldr	r0, [r3, #4]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	68b9      	ldr	r1, [r7, #8]
 800f7a8:	f001 fff4 	bl	8011794 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	685a      	ldr	r2, [r3, #4]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7b4:	441a      	add	r2, r3
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	685a      	ldr	r2, [r3, #4]
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	689b      	ldr	r3, [r3, #8]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d32b      	bcc.n	800f81e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	605a      	str	r2, [r3, #4]
 800f7ce:	e026      	b.n	800f81e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	68d8      	ldr	r0, [r3, #12]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7d8:	461a      	mov	r2, r3
 800f7da:	68b9      	ldr	r1, [r7, #8]
 800f7dc:	f001 ffda 	bl	8011794 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	68da      	ldr	r2, [r3, #12]
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e8:	425b      	negs	r3, r3
 800f7ea:	441a      	add	r2, r3
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	68da      	ldr	r2, [r3, #12]
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d207      	bcs.n	800f80c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	689a      	ldr	r2, [r3, #8]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f804:	425b      	negs	r3, r3
 800f806:	441a      	add	r2, r3
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2b02      	cmp	r3, #2
 800f810:	d105      	bne.n	800f81e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d002      	beq.n	800f81e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	3b01      	subs	r3, #1
 800f81c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	1c5a      	adds	r2, r3, #1
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f826:	697b      	ldr	r3, [r7, #20]
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3718      	adds	r7, #24
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d018      	beq.n	800f874 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	68da      	ldr	r2, [r3, #12]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f84a:	441a      	add	r2, r3
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	68da      	ldr	r2, [r3, #12]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	689b      	ldr	r3, [r3, #8]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d303      	bcc.n	800f864 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681a      	ldr	r2, [r3, #0]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	68d9      	ldr	r1, [r3, #12]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f86c:	461a      	mov	r2, r3
 800f86e:	6838      	ldr	r0, [r7, #0]
 800f870:	f001 ff90 	bl	8011794 <memcpy>
	}
}
 800f874:	bf00      	nop
 800f876:	3708      	adds	r7, #8
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f884:	f001 fc56 	bl	8011134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f88e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f890:	e011      	b.n	800f8b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f896:	2b00      	cmp	r3, #0
 800f898:	d012      	beq.n	800f8c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	3324      	adds	r3, #36	; 0x24
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f000 fd32 	bl	8010308 <xTaskRemoveFromEventList>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d001      	beq.n	800f8ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f8aa:	f000 fe09 	bl	80104c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f8ae:	7bfb      	ldrb	r3, [r7, #15]
 800f8b0:	3b01      	subs	r3, #1
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	dce9      	bgt.n	800f892 <prvUnlockQueue+0x16>
 800f8be:	e000      	b.n	800f8c2 <prvUnlockQueue+0x46>
					break;
 800f8c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	22ff      	movs	r2, #255	; 0xff
 800f8c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f8ca:	f001 fc63 	bl	8011194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f8ce:	f001 fc31 	bl	8011134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f8d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f8da:	e011      	b.n	800f900 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	691b      	ldr	r3, [r3, #16]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d012      	beq.n	800f90a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	3310      	adds	r3, #16
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f000 fd0d 	bl	8010308 <xTaskRemoveFromEventList>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d001      	beq.n	800f8f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f8f4:	f000 fde4 	bl	80104c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f8f8:	7bbb      	ldrb	r3, [r7, #14]
 800f8fa:	3b01      	subs	r3, #1
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f900:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f904:	2b00      	cmp	r3, #0
 800f906:	dce9      	bgt.n	800f8dc <prvUnlockQueue+0x60>
 800f908:	e000      	b.n	800f90c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f90a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	22ff      	movs	r2, #255	; 0xff
 800f910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f914:	f001 fc3e 	bl	8011194 <vPortExitCritical>
}
 800f918:	bf00      	nop
 800f91a:	3710      	adds	r7, #16
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f928:	f001 fc04 	bl	8011134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f930:	2b00      	cmp	r3, #0
 800f932:	d102      	bne.n	800f93a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f934:	2301      	movs	r3, #1
 800f936:	60fb      	str	r3, [r7, #12]
 800f938:	e001      	b.n	800f93e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f93a:	2300      	movs	r3, #0
 800f93c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f93e:	f001 fc29 	bl	8011194 <vPortExitCritical>

	return xReturn;
 800f942:	68fb      	ldr	r3, [r7, #12]
}
 800f944:	4618      	mov	r0, r3
 800f946:	3710      	adds	r7, #16
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f954:	f001 fbee 	bl	8011134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f960:	429a      	cmp	r2, r3
 800f962:	d102      	bne.n	800f96a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f964:	2301      	movs	r3, #1
 800f966:	60fb      	str	r3, [r7, #12]
 800f968:	e001      	b.n	800f96e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f96a:	2300      	movs	r3, #0
 800f96c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f96e:	f001 fc11 	bl	8011194 <vPortExitCritical>

	return xReturn;
 800f972:	68fb      	ldr	r3, [r7, #12]
}
 800f974:	4618      	mov	r0, r3
 800f976:	3710      	adds	r7, #16
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f97c:	b480      	push	{r7}
 800f97e:	b085      	sub	sp, #20
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f986:	2300      	movs	r3, #0
 800f988:	60fb      	str	r3, [r7, #12]
 800f98a:	e014      	b.n	800f9b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f98c:	4a0f      	ldr	r2, [pc, #60]	; (800f9cc <vQueueAddToRegistry+0x50>)
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d10b      	bne.n	800f9b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f998:	490c      	ldr	r1, [pc, #48]	; (800f9cc <vQueueAddToRegistry+0x50>)
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	683a      	ldr	r2, [r7, #0]
 800f99e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f9a2:	4a0a      	ldr	r2, [pc, #40]	; (800f9cc <vQueueAddToRegistry+0x50>)
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	00db      	lsls	r3, r3, #3
 800f9a8:	4413      	add	r3, r2
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f9ae:	e006      	b.n	800f9be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	60fb      	str	r3, [r7, #12]
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	2b07      	cmp	r3, #7
 800f9ba:	d9e7      	bls.n	800f98c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f9bc:	bf00      	nop
 800f9be:	bf00      	nop
 800f9c0:	3714      	adds	r7, #20
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr
 800f9ca:	bf00      	nop
 800f9cc:	24000e28 	.word	0x24000e28

0800f9d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b086      	sub	sp, #24
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	60f8      	str	r0, [r7, #12]
 800f9d8:	60b9      	str	r1, [r7, #8]
 800f9da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f9e0:	f001 fba8 	bl	8011134 <vPortEnterCritical>
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9ea:	b25b      	sxtb	r3, r3
 800f9ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9f0:	d103      	bne.n	800f9fa <vQueueWaitForMessageRestricted+0x2a>
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa00:	b25b      	sxtb	r3, r3
 800fa02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa06:	d103      	bne.n	800fa10 <vQueueWaitForMessageRestricted+0x40>
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa10:	f001 fbc0 	bl	8011194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d106      	bne.n	800fa2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	3324      	adds	r3, #36	; 0x24
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	68b9      	ldr	r1, [r7, #8]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f000 fc43 	bl	80102b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fa2a:	6978      	ldr	r0, [r7, #20]
 800fa2c:	f7ff ff26 	bl	800f87c <prvUnlockQueue>
	}
 800fa30:	bf00      	nop
 800fa32:	3718      	adds	r7, #24
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b08e      	sub	sp, #56	; 0x38
 800fa3c:	af04      	add	r7, sp, #16
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
 800fa44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d10a      	bne.n	800fa62 <xTaskCreateStatic+0x2a>
	__asm volatile
 800fa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa50:	f383 8811 	msr	BASEPRI, r3
 800fa54:	f3bf 8f6f 	isb	sy
 800fa58:	f3bf 8f4f 	dsb	sy
 800fa5c:	623b      	str	r3, [r7, #32]
}
 800fa5e:	bf00      	nop
 800fa60:	e7fe      	b.n	800fa60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d10a      	bne.n	800fa7e <xTaskCreateStatic+0x46>
	__asm volatile
 800fa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6c:	f383 8811 	msr	BASEPRI, r3
 800fa70:	f3bf 8f6f 	isb	sy
 800fa74:	f3bf 8f4f 	dsb	sy
 800fa78:	61fb      	str	r3, [r7, #28]
}
 800fa7a:	bf00      	nop
 800fa7c:	e7fe      	b.n	800fa7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fa7e:	235c      	movs	r3, #92	; 0x5c
 800fa80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	2b5c      	cmp	r3, #92	; 0x5c
 800fa86:	d00a      	beq.n	800fa9e <xTaskCreateStatic+0x66>
	__asm volatile
 800fa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8c:	f383 8811 	msr	BASEPRI, r3
 800fa90:	f3bf 8f6f 	isb	sy
 800fa94:	f3bf 8f4f 	dsb	sy
 800fa98:	61bb      	str	r3, [r7, #24]
}
 800fa9a:	bf00      	nop
 800fa9c:	e7fe      	b.n	800fa9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fa9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800faa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d01e      	beq.n	800fae4 <xTaskCreateStatic+0xac>
 800faa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d01b      	beq.n	800fae4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800faac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fab4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab8:	2202      	movs	r2, #2
 800faba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fabe:	2300      	movs	r3, #0
 800fac0:	9303      	str	r3, [sp, #12]
 800fac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac4:	9302      	str	r3, [sp, #8]
 800fac6:	f107 0314 	add.w	r3, r7, #20
 800faca:	9301      	str	r3, [sp, #4]
 800facc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800face:	9300      	str	r3, [sp, #0]
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	687a      	ldr	r2, [r7, #4]
 800fad4:	68b9      	ldr	r1, [r7, #8]
 800fad6:	68f8      	ldr	r0, [r7, #12]
 800fad8:	f000 f850 	bl	800fb7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fadc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fade:	f000 f8dd 	bl	800fc9c <prvAddNewTaskToReadyList>
 800fae2:	e001      	b.n	800fae8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fae4:	2300      	movs	r3, #0
 800fae6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fae8:	697b      	ldr	r3, [r7, #20]
	}
 800faea:	4618      	mov	r0, r3
 800faec:	3728      	adds	r7, #40	; 0x28
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b08c      	sub	sp, #48	; 0x30
 800faf6:	af04      	add	r7, sp, #16
 800faf8:	60f8      	str	r0, [r7, #12]
 800fafa:	60b9      	str	r1, [r7, #8]
 800fafc:	603b      	str	r3, [r7, #0]
 800fafe:	4613      	mov	r3, r2
 800fb00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fb02:	88fb      	ldrh	r3, [r7, #6]
 800fb04:	009b      	lsls	r3, r3, #2
 800fb06:	4618      	mov	r0, r3
 800fb08:	f001 fc36 	bl	8011378 <pvPortMalloc>
 800fb0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d00e      	beq.n	800fb32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fb14:	205c      	movs	r0, #92	; 0x5c
 800fb16:	f001 fc2f 	bl	8011378 <pvPortMalloc>
 800fb1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d003      	beq.n	800fb2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	697a      	ldr	r2, [r7, #20]
 800fb26:	631a      	str	r2, [r3, #48]	; 0x30
 800fb28:	e005      	b.n	800fb36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fb2a:	6978      	ldr	r0, [r7, #20]
 800fb2c:	f001 fcf0 	bl	8011510 <vPortFree>
 800fb30:	e001      	b.n	800fb36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fb32:	2300      	movs	r3, #0
 800fb34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fb36:	69fb      	ldr	r3, [r7, #28]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d017      	beq.n	800fb6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fb44:	88fa      	ldrh	r2, [r7, #6]
 800fb46:	2300      	movs	r3, #0
 800fb48:	9303      	str	r3, [sp, #12]
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	9302      	str	r3, [sp, #8]
 800fb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb50:	9301      	str	r3, [sp, #4]
 800fb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	68b9      	ldr	r1, [r7, #8]
 800fb5a:	68f8      	ldr	r0, [r7, #12]
 800fb5c:	f000 f80e 	bl	800fb7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb60:	69f8      	ldr	r0, [r7, #28]
 800fb62:	f000 f89b 	bl	800fc9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fb66:	2301      	movs	r3, #1
 800fb68:	61bb      	str	r3, [r7, #24]
 800fb6a:	e002      	b.n	800fb72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fb6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fb72:	69bb      	ldr	r3, [r7, #24]
	}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3720      	adds	r7, #32
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b088      	sub	sp, #32
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	607a      	str	r2, [r7, #4]
 800fb88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	009b      	lsls	r3, r3, #2
 800fb92:	461a      	mov	r2, r3
 800fb94:	21a5      	movs	r1, #165	; 0xa5
 800fb96:	f001 fe0b 	bl	80117b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb9e:	6879      	ldr	r1, [r7, #4]
 800fba0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fba4:	440b      	add	r3, r1
 800fba6:	009b      	lsls	r3, r3, #2
 800fba8:	4413      	add	r3, r2
 800fbaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fbac:	69bb      	ldr	r3, [r7, #24]
 800fbae:	f023 0307 	bic.w	r3, r3, #7
 800fbb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fbb4:	69bb      	ldr	r3, [r7, #24]
 800fbb6:	f003 0307 	and.w	r3, r3, #7
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d00a      	beq.n	800fbd4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	617b      	str	r3, [r7, #20]
}
 800fbd0:	bf00      	nop
 800fbd2:	e7fe      	b.n	800fbd2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d01f      	beq.n	800fc1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fbda:	2300      	movs	r3, #0
 800fbdc:	61fb      	str	r3, [r7, #28]
 800fbde:	e012      	b.n	800fc06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fbe0:	68ba      	ldr	r2, [r7, #8]
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	7819      	ldrb	r1, [r3, #0]
 800fbe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbea:	69fb      	ldr	r3, [r7, #28]
 800fbec:	4413      	add	r3, r2
 800fbee:	3334      	adds	r3, #52	; 0x34
 800fbf0:	460a      	mov	r2, r1
 800fbf2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fbf4:	68ba      	ldr	r2, [r7, #8]
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d006      	beq.n	800fc0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	3301      	adds	r3, #1
 800fc04:	61fb      	str	r3, [r7, #28]
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	2b0f      	cmp	r3, #15
 800fc0a:	d9e9      	bls.n	800fbe0 <prvInitialiseNewTask+0x64>
 800fc0c:	e000      	b.n	800fc10 <prvInitialiseNewTask+0x94>
			{
				break;
 800fc0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc12:	2200      	movs	r2, #0
 800fc14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fc18:	e003      	b.n	800fc22 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc24:	2b37      	cmp	r3, #55	; 0x37
 800fc26:	d901      	bls.n	800fc2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fc28:	2337      	movs	r3, #55	; 0x37
 800fc2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc40:	3304      	adds	r3, #4
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7ff f93d 	bl	800eec2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4a:	3318      	adds	r3, #24
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7ff f938 	bl	800eec2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc70:	2200      	movs	r2, #0
 800fc72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fc76:	683a      	ldr	r2, [r7, #0]
 800fc78:	68f9      	ldr	r1, [r7, #12]
 800fc7a:	69b8      	ldr	r0, [r7, #24]
 800fc7c:	f001 f930 	bl	8010ee0 <pxPortInitialiseStack>
 800fc80:	4602      	mov	r2, r0
 800fc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d002      	beq.n	800fc92 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc92:	bf00      	nop
 800fc94:	3720      	adds	r7, #32
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
	...

0800fc9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fca4:	f001 fa46 	bl	8011134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fca8:	4b2d      	ldr	r3, [pc, #180]	; (800fd60 <prvAddNewTaskToReadyList+0xc4>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	3301      	adds	r3, #1
 800fcae:	4a2c      	ldr	r2, [pc, #176]	; (800fd60 <prvAddNewTaskToReadyList+0xc4>)
 800fcb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fcb2:	4b2c      	ldr	r3, [pc, #176]	; (800fd64 <prvAddNewTaskToReadyList+0xc8>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d109      	bne.n	800fcce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fcba:	4a2a      	ldr	r2, [pc, #168]	; (800fd64 <prvAddNewTaskToReadyList+0xc8>)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fcc0:	4b27      	ldr	r3, [pc, #156]	; (800fd60 <prvAddNewTaskToReadyList+0xc4>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d110      	bne.n	800fcea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fcc8:	f000 fc1e 	bl	8010508 <prvInitialiseTaskLists>
 800fccc:	e00d      	b.n	800fcea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fcce:	4b26      	ldr	r3, [pc, #152]	; (800fd68 <prvAddNewTaskToReadyList+0xcc>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d109      	bne.n	800fcea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fcd6:	4b23      	ldr	r3, [pc, #140]	; (800fd64 <prvAddNewTaskToReadyList+0xc8>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d802      	bhi.n	800fcea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fce4:	4a1f      	ldr	r2, [pc, #124]	; (800fd64 <prvAddNewTaskToReadyList+0xc8>)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fcea:	4b20      	ldr	r3, [pc, #128]	; (800fd6c <prvAddNewTaskToReadyList+0xd0>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	3301      	adds	r3, #1
 800fcf0:	4a1e      	ldr	r2, [pc, #120]	; (800fd6c <prvAddNewTaskToReadyList+0xd0>)
 800fcf2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fcf4:	4b1d      	ldr	r3, [pc, #116]	; (800fd6c <prvAddNewTaskToReadyList+0xd0>)
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd00:	4b1b      	ldr	r3, [pc, #108]	; (800fd70 <prvAddNewTaskToReadyList+0xd4>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d903      	bls.n	800fd10 <prvAddNewTaskToReadyList+0x74>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd0c:	4a18      	ldr	r2, [pc, #96]	; (800fd70 <prvAddNewTaskToReadyList+0xd4>)
 800fd0e:	6013      	str	r3, [r2, #0]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd14:	4613      	mov	r3, r2
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	4413      	add	r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	4a15      	ldr	r2, [pc, #84]	; (800fd74 <prvAddNewTaskToReadyList+0xd8>)
 800fd1e:	441a      	add	r2, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	3304      	adds	r3, #4
 800fd24:	4619      	mov	r1, r3
 800fd26:	4610      	mov	r0, r2
 800fd28:	f7ff f8d8 	bl	800eedc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fd2c:	f001 fa32 	bl	8011194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fd30:	4b0d      	ldr	r3, [pc, #52]	; (800fd68 <prvAddNewTaskToReadyList+0xcc>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d00e      	beq.n	800fd56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fd38:	4b0a      	ldr	r3, [pc, #40]	; (800fd64 <prvAddNewTaskToReadyList+0xc8>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d207      	bcs.n	800fd56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fd46:	4b0c      	ldr	r3, [pc, #48]	; (800fd78 <prvAddNewTaskToReadyList+0xdc>)
 800fd48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd4c:	601a      	str	r2, [r3, #0]
 800fd4e:	f3bf 8f4f 	dsb	sy
 800fd52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd56:	bf00      	nop
 800fd58:	3708      	adds	r7, #8
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	2400133c 	.word	0x2400133c
 800fd64:	24000e68 	.word	0x24000e68
 800fd68:	24001348 	.word	0x24001348
 800fd6c:	24001358 	.word	0x24001358
 800fd70:	24001344 	.word	0x24001344
 800fd74:	24000e6c 	.word	0x24000e6c
 800fd78:	e000ed04 	.word	0xe000ed04

0800fd7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fd84:	2300      	movs	r3, #0
 800fd86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d017      	beq.n	800fdbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fd8e:	4b13      	ldr	r3, [pc, #76]	; (800fddc <vTaskDelay+0x60>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00a      	beq.n	800fdac <vTaskDelay+0x30>
	__asm volatile
 800fd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd9a:	f383 8811 	msr	BASEPRI, r3
 800fd9e:	f3bf 8f6f 	isb	sy
 800fda2:	f3bf 8f4f 	dsb	sy
 800fda6:	60bb      	str	r3, [r7, #8]
}
 800fda8:	bf00      	nop
 800fdaa:	e7fe      	b.n	800fdaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fdac:	f000 f880 	bl	800feb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f000 fcf2 	bl	801079c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fdb8:	f000 f888 	bl	800fecc <xTaskResumeAll>
 800fdbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d107      	bne.n	800fdd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fdc4:	4b06      	ldr	r3, [pc, #24]	; (800fde0 <vTaskDelay+0x64>)
 800fdc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	f3bf 8f4f 	dsb	sy
 800fdd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fdd4:	bf00      	nop
 800fdd6:	3710      	adds	r7, #16
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	24001364 	.word	0x24001364
 800fde0:	e000ed04 	.word	0xe000ed04

0800fde4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08a      	sub	sp, #40	; 0x28
 800fde8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fdea:	2300      	movs	r3, #0
 800fdec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fdf2:	463a      	mov	r2, r7
 800fdf4:	1d39      	adds	r1, r7, #4
 800fdf6:	f107 0308 	add.w	r3, r7, #8
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7fe ffbc 	bl	800ed78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fe00:	6839      	ldr	r1, [r7, #0]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	68ba      	ldr	r2, [r7, #8]
 800fe06:	9202      	str	r2, [sp, #8]
 800fe08:	9301      	str	r3, [sp, #4]
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	9300      	str	r3, [sp, #0]
 800fe0e:	2300      	movs	r3, #0
 800fe10:	460a      	mov	r2, r1
 800fe12:	4921      	ldr	r1, [pc, #132]	; (800fe98 <vTaskStartScheduler+0xb4>)
 800fe14:	4821      	ldr	r0, [pc, #132]	; (800fe9c <vTaskStartScheduler+0xb8>)
 800fe16:	f7ff fe0f 	bl	800fa38 <xTaskCreateStatic>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	4a20      	ldr	r2, [pc, #128]	; (800fea0 <vTaskStartScheduler+0xbc>)
 800fe1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fe20:	4b1f      	ldr	r3, [pc, #124]	; (800fea0 <vTaskStartScheduler+0xbc>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d002      	beq.n	800fe2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fe28:	2301      	movs	r3, #1
 800fe2a:	617b      	str	r3, [r7, #20]
 800fe2c:	e001      	b.n	800fe32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d102      	bne.n	800fe3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fe38:	f000 fd04 	bl	8010844 <xTimerCreateTimerTask>
 800fe3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	2b01      	cmp	r3, #1
 800fe42:	d116      	bne.n	800fe72 <vTaskStartScheduler+0x8e>
	__asm volatile
 800fe44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe48:	f383 8811 	msr	BASEPRI, r3
 800fe4c:	f3bf 8f6f 	isb	sy
 800fe50:	f3bf 8f4f 	dsb	sy
 800fe54:	613b      	str	r3, [r7, #16]
}
 800fe56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fe58:	4b12      	ldr	r3, [pc, #72]	; (800fea4 <vTaskStartScheduler+0xc0>)
 800fe5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fe60:	4b11      	ldr	r3, [pc, #68]	; (800fea8 <vTaskStartScheduler+0xc4>)
 800fe62:	2201      	movs	r2, #1
 800fe64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fe66:	4b11      	ldr	r3, [pc, #68]	; (800feac <vTaskStartScheduler+0xc8>)
 800fe68:	2200      	movs	r2, #0
 800fe6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fe6c:	f001 f8c0 	bl	8010ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fe70:	e00e      	b.n	800fe90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe78:	d10a      	bne.n	800fe90 <vTaskStartScheduler+0xac>
	__asm volatile
 800fe7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe7e:	f383 8811 	msr	BASEPRI, r3
 800fe82:	f3bf 8f6f 	isb	sy
 800fe86:	f3bf 8f4f 	dsb	sy
 800fe8a:	60fb      	str	r3, [r7, #12]
}
 800fe8c:	bf00      	nop
 800fe8e:	e7fe      	b.n	800fe8e <vTaskStartScheduler+0xaa>
}
 800fe90:	bf00      	nop
 800fe92:	3718      	adds	r7, #24
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	08011860 	.word	0x08011860
 800fe9c:	080104d9 	.word	0x080104d9
 800fea0:	24001360 	.word	0x24001360
 800fea4:	2400135c 	.word	0x2400135c
 800fea8:	24001348 	.word	0x24001348
 800feac:	24001340 	.word	0x24001340

0800feb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800feb0:	b480      	push	{r7}
 800feb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800feb4:	4b04      	ldr	r3, [pc, #16]	; (800fec8 <vTaskSuspendAll+0x18>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	3301      	adds	r3, #1
 800feba:	4a03      	ldr	r2, [pc, #12]	; (800fec8 <vTaskSuspendAll+0x18>)
 800febc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800febe:	bf00      	nop
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr
 800fec8:	24001364 	.word	0x24001364

0800fecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b084      	sub	sp, #16
 800fed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fed2:	2300      	movs	r3, #0
 800fed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fed6:	2300      	movs	r3, #0
 800fed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800feda:	4b42      	ldr	r3, [pc, #264]	; (800ffe4 <xTaskResumeAll+0x118>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d10a      	bne.n	800fef8 <xTaskResumeAll+0x2c>
	__asm volatile
 800fee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee6:	f383 8811 	msr	BASEPRI, r3
 800feea:	f3bf 8f6f 	isb	sy
 800feee:	f3bf 8f4f 	dsb	sy
 800fef2:	603b      	str	r3, [r7, #0]
}
 800fef4:	bf00      	nop
 800fef6:	e7fe      	b.n	800fef6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fef8:	f001 f91c 	bl	8011134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fefc:	4b39      	ldr	r3, [pc, #228]	; (800ffe4 <xTaskResumeAll+0x118>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	3b01      	subs	r3, #1
 800ff02:	4a38      	ldr	r2, [pc, #224]	; (800ffe4 <xTaskResumeAll+0x118>)
 800ff04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff06:	4b37      	ldr	r3, [pc, #220]	; (800ffe4 <xTaskResumeAll+0x118>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d162      	bne.n	800ffd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ff0e:	4b36      	ldr	r3, [pc, #216]	; (800ffe8 <xTaskResumeAll+0x11c>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d05e      	beq.n	800ffd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff16:	e02f      	b.n	800ff78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff18:	4b34      	ldr	r3, [pc, #208]	; (800ffec <xTaskResumeAll+0x120>)
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	68db      	ldr	r3, [r3, #12]
 800ff1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	3318      	adds	r3, #24
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7ff f836 	bl	800ef96 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	3304      	adds	r3, #4
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7ff f831 	bl	800ef96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff38:	4b2d      	ldr	r3, [pc, #180]	; (800fff0 <xTaskResumeAll+0x124>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d903      	bls.n	800ff48 <xTaskResumeAll+0x7c>
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff44:	4a2a      	ldr	r2, [pc, #168]	; (800fff0 <xTaskResumeAll+0x124>)
 800ff46:	6013      	str	r3, [r2, #0]
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff4c:	4613      	mov	r3, r2
 800ff4e:	009b      	lsls	r3, r3, #2
 800ff50:	4413      	add	r3, r2
 800ff52:	009b      	lsls	r3, r3, #2
 800ff54:	4a27      	ldr	r2, [pc, #156]	; (800fff4 <xTaskResumeAll+0x128>)
 800ff56:	441a      	add	r2, r3
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	3304      	adds	r3, #4
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	4610      	mov	r0, r2
 800ff60:	f7fe ffbc 	bl	800eedc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff68:	4b23      	ldr	r3, [pc, #140]	; (800fff8 <xTaskResumeAll+0x12c>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d302      	bcc.n	800ff78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ff72:	4b22      	ldr	r3, [pc, #136]	; (800fffc <xTaskResumeAll+0x130>)
 800ff74:	2201      	movs	r2, #1
 800ff76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff78:	4b1c      	ldr	r3, [pc, #112]	; (800ffec <xTaskResumeAll+0x120>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d1cb      	bne.n	800ff18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d001      	beq.n	800ff8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ff86:	f000 fb5d 	bl	8010644 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ff8a:	4b1d      	ldr	r3, [pc, #116]	; (8010000 <xTaskResumeAll+0x134>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d010      	beq.n	800ffb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ff96:	f000 f847 	bl	8010028 <xTaskIncrementTick>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d002      	beq.n	800ffa6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ffa0:	4b16      	ldr	r3, [pc, #88]	; (800fffc <xTaskResumeAll+0x130>)
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	3b01      	subs	r3, #1
 800ffaa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d1f1      	bne.n	800ff96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ffb2:	4b13      	ldr	r3, [pc, #76]	; (8010000 <xTaskResumeAll+0x134>)
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ffb8:	4b10      	ldr	r3, [pc, #64]	; (800fffc <xTaskResumeAll+0x130>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d009      	beq.n	800ffd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ffc4:	4b0f      	ldr	r3, [pc, #60]	; (8010004 <xTaskResumeAll+0x138>)
 800ffc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffca:	601a      	str	r2, [r3, #0]
 800ffcc:	f3bf 8f4f 	dsb	sy
 800ffd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ffd4:	f001 f8de 	bl	8011194 <vPortExitCritical>

	return xAlreadyYielded;
 800ffd8:	68bb      	ldr	r3, [r7, #8]
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3710      	adds	r7, #16
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
 800ffe2:	bf00      	nop
 800ffe4:	24001364 	.word	0x24001364
 800ffe8:	2400133c 	.word	0x2400133c
 800ffec:	240012fc 	.word	0x240012fc
 800fff0:	24001344 	.word	0x24001344
 800fff4:	24000e6c 	.word	0x24000e6c
 800fff8:	24000e68 	.word	0x24000e68
 800fffc:	24001350 	.word	0x24001350
 8010000:	2400134c 	.word	0x2400134c
 8010004:	e000ed04 	.word	0xe000ed04

08010008 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801000e:	4b05      	ldr	r3, [pc, #20]	; (8010024 <xTaskGetTickCount+0x1c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010014:	687b      	ldr	r3, [r7, #4]
}
 8010016:	4618      	mov	r0, r3
 8010018:	370c      	adds	r7, #12
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop
 8010024:	24001340 	.word	0x24001340

08010028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b086      	sub	sp, #24
 801002c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801002e:	2300      	movs	r3, #0
 8010030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010032:	4b53      	ldr	r3, [pc, #332]	; (8010180 <xTaskIncrementTick+0x158>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	f040 8095 	bne.w	8010166 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801003c:	4b51      	ldr	r3, [pc, #324]	; (8010184 <xTaskIncrementTick+0x15c>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	3301      	adds	r3, #1
 8010042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010044:	4a4f      	ldr	r2, [pc, #316]	; (8010184 <xTaskIncrementTick+0x15c>)
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d120      	bne.n	8010092 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010050:	4b4d      	ldr	r3, [pc, #308]	; (8010188 <xTaskIncrementTick+0x160>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d00a      	beq.n	8010070 <xTaskIncrementTick+0x48>
	__asm volatile
 801005a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005e:	f383 8811 	msr	BASEPRI, r3
 8010062:	f3bf 8f6f 	isb	sy
 8010066:	f3bf 8f4f 	dsb	sy
 801006a:	603b      	str	r3, [r7, #0]
}
 801006c:	bf00      	nop
 801006e:	e7fe      	b.n	801006e <xTaskIncrementTick+0x46>
 8010070:	4b45      	ldr	r3, [pc, #276]	; (8010188 <xTaskIncrementTick+0x160>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	60fb      	str	r3, [r7, #12]
 8010076:	4b45      	ldr	r3, [pc, #276]	; (801018c <xTaskIncrementTick+0x164>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4a43      	ldr	r2, [pc, #268]	; (8010188 <xTaskIncrementTick+0x160>)
 801007c:	6013      	str	r3, [r2, #0]
 801007e:	4a43      	ldr	r2, [pc, #268]	; (801018c <xTaskIncrementTick+0x164>)
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6013      	str	r3, [r2, #0]
 8010084:	4b42      	ldr	r3, [pc, #264]	; (8010190 <xTaskIncrementTick+0x168>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	3301      	adds	r3, #1
 801008a:	4a41      	ldr	r2, [pc, #260]	; (8010190 <xTaskIncrementTick+0x168>)
 801008c:	6013      	str	r3, [r2, #0]
 801008e:	f000 fad9 	bl	8010644 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010092:	4b40      	ldr	r3, [pc, #256]	; (8010194 <xTaskIncrementTick+0x16c>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	693a      	ldr	r2, [r7, #16]
 8010098:	429a      	cmp	r2, r3
 801009a:	d349      	bcc.n	8010130 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801009c:	4b3a      	ldr	r3, [pc, #232]	; (8010188 <xTaskIncrementTick+0x160>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d104      	bne.n	80100b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100a6:	4b3b      	ldr	r3, [pc, #236]	; (8010194 <xTaskIncrementTick+0x16c>)
 80100a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100ac:	601a      	str	r2, [r3, #0]
					break;
 80100ae:	e03f      	b.n	8010130 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100b0:	4b35      	ldr	r3, [pc, #212]	; (8010188 <xTaskIncrementTick+0x160>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	68db      	ldr	r3, [r3, #12]
 80100b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80100c0:	693a      	ldr	r2, [r7, #16]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d203      	bcs.n	80100d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80100c8:	4a32      	ldr	r2, [pc, #200]	; (8010194 <xTaskIncrementTick+0x16c>)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80100ce:	e02f      	b.n	8010130 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	3304      	adds	r3, #4
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7fe ff5e 	bl	800ef96 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d004      	beq.n	80100ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	3318      	adds	r3, #24
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7fe ff55 	bl	800ef96 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100f0:	4b29      	ldr	r3, [pc, #164]	; (8010198 <xTaskIncrementTick+0x170>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d903      	bls.n	8010100 <xTaskIncrementTick+0xd8>
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100fc:	4a26      	ldr	r2, [pc, #152]	; (8010198 <xTaskIncrementTick+0x170>)
 80100fe:	6013      	str	r3, [r2, #0]
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010104:	4613      	mov	r3, r2
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	4413      	add	r3, r2
 801010a:	009b      	lsls	r3, r3, #2
 801010c:	4a23      	ldr	r2, [pc, #140]	; (801019c <xTaskIncrementTick+0x174>)
 801010e:	441a      	add	r2, r3
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	3304      	adds	r3, #4
 8010114:	4619      	mov	r1, r3
 8010116:	4610      	mov	r0, r2
 8010118:	f7fe fee0 	bl	800eedc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010120:	4b1f      	ldr	r3, [pc, #124]	; (80101a0 <xTaskIncrementTick+0x178>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010126:	429a      	cmp	r2, r3
 8010128:	d3b8      	bcc.n	801009c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801012a:	2301      	movs	r3, #1
 801012c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801012e:	e7b5      	b.n	801009c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010130:	4b1b      	ldr	r3, [pc, #108]	; (80101a0 <xTaskIncrementTick+0x178>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010136:	4919      	ldr	r1, [pc, #100]	; (801019c <xTaskIncrementTick+0x174>)
 8010138:	4613      	mov	r3, r2
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	4413      	add	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	440b      	add	r3, r1
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	2b01      	cmp	r3, #1
 8010146:	d901      	bls.n	801014c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010148:	2301      	movs	r3, #1
 801014a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 801014c:	4b15      	ldr	r3, [pc, #84]	; (80101a4 <xTaskIncrementTick+0x17c>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d101      	bne.n	8010158 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8010154:	f7f0 fe00 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010158:	4b13      	ldr	r3, [pc, #76]	; (80101a8 <xTaskIncrementTick+0x180>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d009      	beq.n	8010174 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8010160:	2301      	movs	r3, #1
 8010162:	617b      	str	r3, [r7, #20]
 8010164:	e006      	b.n	8010174 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010166:	4b0f      	ldr	r3, [pc, #60]	; (80101a4 <xTaskIncrementTick+0x17c>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	3301      	adds	r3, #1
 801016c:	4a0d      	ldr	r2, [pc, #52]	; (80101a4 <xTaskIncrementTick+0x17c>)
 801016e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8010170:	f7f0 fdf2 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8010174:	697b      	ldr	r3, [r7, #20]
}
 8010176:	4618      	mov	r0, r3
 8010178:	3718      	adds	r7, #24
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}
 801017e:	bf00      	nop
 8010180:	24001364 	.word	0x24001364
 8010184:	24001340 	.word	0x24001340
 8010188:	240012f4 	.word	0x240012f4
 801018c:	240012f8 	.word	0x240012f8
 8010190:	24001354 	.word	0x24001354
 8010194:	2400135c 	.word	0x2400135c
 8010198:	24001344 	.word	0x24001344
 801019c:	24000e6c 	.word	0x24000e6c
 80101a0:	24000e68 	.word	0x24000e68
 80101a4:	2400134c 	.word	0x2400134c
 80101a8:	24001350 	.word	0x24001350

080101ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80101ac:	b480      	push	{r7}
 80101ae:	b085      	sub	sp, #20
 80101b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80101b2:	4b28      	ldr	r3, [pc, #160]	; (8010254 <vTaskSwitchContext+0xa8>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d003      	beq.n	80101c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80101ba:	4b27      	ldr	r3, [pc, #156]	; (8010258 <vTaskSwitchContext+0xac>)
 80101bc:	2201      	movs	r2, #1
 80101be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80101c0:	e041      	b.n	8010246 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80101c2:	4b25      	ldr	r3, [pc, #148]	; (8010258 <vTaskSwitchContext+0xac>)
 80101c4:	2200      	movs	r2, #0
 80101c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101c8:	4b24      	ldr	r3, [pc, #144]	; (801025c <vTaskSwitchContext+0xb0>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	60fb      	str	r3, [r7, #12]
 80101ce:	e010      	b.n	80101f2 <vTaskSwitchContext+0x46>
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d10a      	bne.n	80101ec <vTaskSwitchContext+0x40>
	__asm volatile
 80101d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101da:	f383 8811 	msr	BASEPRI, r3
 80101de:	f3bf 8f6f 	isb	sy
 80101e2:	f3bf 8f4f 	dsb	sy
 80101e6:	607b      	str	r3, [r7, #4]
}
 80101e8:	bf00      	nop
 80101ea:	e7fe      	b.n	80101ea <vTaskSwitchContext+0x3e>
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	3b01      	subs	r3, #1
 80101f0:	60fb      	str	r3, [r7, #12]
 80101f2:	491b      	ldr	r1, [pc, #108]	; (8010260 <vTaskSwitchContext+0xb4>)
 80101f4:	68fa      	ldr	r2, [r7, #12]
 80101f6:	4613      	mov	r3, r2
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	4413      	add	r3, r2
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	440b      	add	r3, r1
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d0e4      	beq.n	80101d0 <vTaskSwitchContext+0x24>
 8010206:	68fa      	ldr	r2, [r7, #12]
 8010208:	4613      	mov	r3, r2
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	4413      	add	r3, r2
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	4a13      	ldr	r2, [pc, #76]	; (8010260 <vTaskSwitchContext+0xb4>)
 8010212:	4413      	add	r3, r2
 8010214:	60bb      	str	r3, [r7, #8]
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	685a      	ldr	r2, [r3, #4]
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	605a      	str	r2, [r3, #4]
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	685a      	ldr	r2, [r3, #4]
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	3308      	adds	r3, #8
 8010228:	429a      	cmp	r2, r3
 801022a:	d104      	bne.n	8010236 <vTaskSwitchContext+0x8a>
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	685a      	ldr	r2, [r3, #4]
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	605a      	str	r2, [r3, #4]
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	68db      	ldr	r3, [r3, #12]
 801023c:	4a09      	ldr	r2, [pc, #36]	; (8010264 <vTaskSwitchContext+0xb8>)
 801023e:	6013      	str	r3, [r2, #0]
 8010240:	4a06      	ldr	r2, [pc, #24]	; (801025c <vTaskSwitchContext+0xb0>)
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	6013      	str	r3, [r2, #0]
}
 8010246:	bf00      	nop
 8010248:	3714      	adds	r7, #20
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr
 8010252:	bf00      	nop
 8010254:	24001364 	.word	0x24001364
 8010258:	24001350 	.word	0x24001350
 801025c:	24001344 	.word	0x24001344
 8010260:	24000e6c 	.word	0x24000e6c
 8010264:	24000e68 	.word	0x24000e68

08010268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d10a      	bne.n	801028e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027c:	f383 8811 	msr	BASEPRI, r3
 8010280:	f3bf 8f6f 	isb	sy
 8010284:	f3bf 8f4f 	dsb	sy
 8010288:	60fb      	str	r3, [r7, #12]
}
 801028a:	bf00      	nop
 801028c:	e7fe      	b.n	801028c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801028e:	4b07      	ldr	r3, [pc, #28]	; (80102ac <vTaskPlaceOnEventList+0x44>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3318      	adds	r3, #24
 8010294:	4619      	mov	r1, r3
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f7fe fe44 	bl	800ef24 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801029c:	2101      	movs	r1, #1
 801029e:	6838      	ldr	r0, [r7, #0]
 80102a0:	f000 fa7c 	bl	801079c <prvAddCurrentTaskToDelayedList>
}
 80102a4:	bf00      	nop
 80102a6:	3710      	adds	r7, #16
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}
 80102ac:	24000e68 	.word	0x24000e68

080102b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b086      	sub	sp, #24
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d10a      	bne.n	80102d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80102c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c6:	f383 8811 	msr	BASEPRI, r3
 80102ca:	f3bf 8f6f 	isb	sy
 80102ce:	f3bf 8f4f 	dsb	sy
 80102d2:	617b      	str	r3, [r7, #20]
}
 80102d4:	bf00      	nop
 80102d6:	e7fe      	b.n	80102d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80102d8:	4b0a      	ldr	r3, [pc, #40]	; (8010304 <vTaskPlaceOnEventListRestricted+0x54>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	3318      	adds	r3, #24
 80102de:	4619      	mov	r1, r3
 80102e0:	68f8      	ldr	r0, [r7, #12]
 80102e2:	f7fe fdfb 	bl	800eedc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d002      	beq.n	80102f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80102ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80102f2:	6879      	ldr	r1, [r7, #4]
 80102f4:	68b8      	ldr	r0, [r7, #8]
 80102f6:	f000 fa51 	bl	801079c <prvAddCurrentTaskToDelayedList>
	}
 80102fa:	bf00      	nop
 80102fc:	3718      	adds	r7, #24
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	24000e68 	.word	0x24000e68

08010308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b086      	sub	sp, #24
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	68db      	ldr	r3, [r3, #12]
 8010314:	68db      	ldr	r3, [r3, #12]
 8010316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d10a      	bne.n	8010334 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801031e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010322:	f383 8811 	msr	BASEPRI, r3
 8010326:	f3bf 8f6f 	isb	sy
 801032a:	f3bf 8f4f 	dsb	sy
 801032e:	60fb      	str	r3, [r7, #12]
}
 8010330:	bf00      	nop
 8010332:	e7fe      	b.n	8010332 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	3318      	adds	r3, #24
 8010338:	4618      	mov	r0, r3
 801033a:	f7fe fe2c 	bl	800ef96 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801033e:	4b1e      	ldr	r3, [pc, #120]	; (80103b8 <xTaskRemoveFromEventList+0xb0>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d11d      	bne.n	8010382 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	3304      	adds	r3, #4
 801034a:	4618      	mov	r0, r3
 801034c:	f7fe fe23 	bl	800ef96 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010354:	4b19      	ldr	r3, [pc, #100]	; (80103bc <xTaskRemoveFromEventList+0xb4>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	429a      	cmp	r2, r3
 801035a:	d903      	bls.n	8010364 <xTaskRemoveFromEventList+0x5c>
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010360:	4a16      	ldr	r2, [pc, #88]	; (80103bc <xTaskRemoveFromEventList+0xb4>)
 8010362:	6013      	str	r3, [r2, #0]
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010368:	4613      	mov	r3, r2
 801036a:	009b      	lsls	r3, r3, #2
 801036c:	4413      	add	r3, r2
 801036e:	009b      	lsls	r3, r3, #2
 8010370:	4a13      	ldr	r2, [pc, #76]	; (80103c0 <xTaskRemoveFromEventList+0xb8>)
 8010372:	441a      	add	r2, r3
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	3304      	adds	r3, #4
 8010378:	4619      	mov	r1, r3
 801037a:	4610      	mov	r0, r2
 801037c:	f7fe fdae 	bl	800eedc <vListInsertEnd>
 8010380:	e005      	b.n	801038e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	3318      	adds	r3, #24
 8010386:	4619      	mov	r1, r3
 8010388:	480e      	ldr	r0, [pc, #56]	; (80103c4 <xTaskRemoveFromEventList+0xbc>)
 801038a:	f7fe fda7 	bl	800eedc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010392:	4b0d      	ldr	r3, [pc, #52]	; (80103c8 <xTaskRemoveFromEventList+0xc0>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010398:	429a      	cmp	r2, r3
 801039a:	d905      	bls.n	80103a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801039c:	2301      	movs	r3, #1
 801039e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80103a0:	4b0a      	ldr	r3, [pc, #40]	; (80103cc <xTaskRemoveFromEventList+0xc4>)
 80103a2:	2201      	movs	r2, #1
 80103a4:	601a      	str	r2, [r3, #0]
 80103a6:	e001      	b.n	80103ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80103a8:	2300      	movs	r3, #0
 80103aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80103ac:	697b      	ldr	r3, [r7, #20]
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3718      	adds	r7, #24
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop
 80103b8:	24001364 	.word	0x24001364
 80103bc:	24001344 	.word	0x24001344
 80103c0:	24000e6c 	.word	0x24000e6c
 80103c4:	240012fc 	.word	0x240012fc
 80103c8:	24000e68 	.word	0x24000e68
 80103cc:	24001350 	.word	0x24001350

080103d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80103d0:	b480      	push	{r7}
 80103d2:	b083      	sub	sp, #12
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80103d8:	4b06      	ldr	r3, [pc, #24]	; (80103f4 <vTaskInternalSetTimeOutState+0x24>)
 80103da:	681a      	ldr	r2, [r3, #0]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80103e0:	4b05      	ldr	r3, [pc, #20]	; (80103f8 <vTaskInternalSetTimeOutState+0x28>)
 80103e2:	681a      	ldr	r2, [r3, #0]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	605a      	str	r2, [r3, #4]
}
 80103e8:	bf00      	nop
 80103ea:	370c      	adds	r7, #12
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr
 80103f4:	24001354 	.word	0x24001354
 80103f8:	24001340 	.word	0x24001340

080103fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b088      	sub	sp, #32
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d10a      	bne.n	8010422 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801040c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010410:	f383 8811 	msr	BASEPRI, r3
 8010414:	f3bf 8f6f 	isb	sy
 8010418:	f3bf 8f4f 	dsb	sy
 801041c:	613b      	str	r3, [r7, #16]
}
 801041e:	bf00      	nop
 8010420:	e7fe      	b.n	8010420 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d10a      	bne.n	801043e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042c:	f383 8811 	msr	BASEPRI, r3
 8010430:	f3bf 8f6f 	isb	sy
 8010434:	f3bf 8f4f 	dsb	sy
 8010438:	60fb      	str	r3, [r7, #12]
}
 801043a:	bf00      	nop
 801043c:	e7fe      	b.n	801043c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801043e:	f000 fe79 	bl	8011134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010442:	4b1d      	ldr	r3, [pc, #116]	; (80104b8 <xTaskCheckForTimeOut+0xbc>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	69ba      	ldr	r2, [r7, #24]
 801044e:	1ad3      	subs	r3, r2, r3
 8010450:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801045a:	d102      	bne.n	8010462 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801045c:	2300      	movs	r3, #0
 801045e:	61fb      	str	r3, [r7, #28]
 8010460:	e023      	b.n	80104aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	4b15      	ldr	r3, [pc, #84]	; (80104bc <xTaskCheckForTimeOut+0xc0>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	429a      	cmp	r2, r3
 801046c:	d007      	beq.n	801047e <xTaskCheckForTimeOut+0x82>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	69ba      	ldr	r2, [r7, #24]
 8010474:	429a      	cmp	r2, r3
 8010476:	d302      	bcc.n	801047e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010478:	2301      	movs	r3, #1
 801047a:	61fb      	str	r3, [r7, #28]
 801047c:	e015      	b.n	80104aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	697a      	ldr	r2, [r7, #20]
 8010484:	429a      	cmp	r2, r3
 8010486:	d20b      	bcs.n	80104a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	1ad2      	subs	r2, r2, r3
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f7ff ff9b 	bl	80103d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801049a:	2300      	movs	r3, #0
 801049c:	61fb      	str	r3, [r7, #28]
 801049e:	e004      	b.n	80104aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	2200      	movs	r2, #0
 80104a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80104a6:	2301      	movs	r3, #1
 80104a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80104aa:	f000 fe73 	bl	8011194 <vPortExitCritical>

	return xReturn;
 80104ae:	69fb      	ldr	r3, [r7, #28]
}
 80104b0:	4618      	mov	r0, r3
 80104b2:	3720      	adds	r7, #32
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	24001340 	.word	0x24001340
 80104bc:	24001354 	.word	0x24001354

080104c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80104c0:	b480      	push	{r7}
 80104c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80104c4:	4b03      	ldr	r3, [pc, #12]	; (80104d4 <vTaskMissedYield+0x14>)
 80104c6:	2201      	movs	r2, #1
 80104c8:	601a      	str	r2, [r3, #0]
}
 80104ca:	bf00      	nop
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr
 80104d4:	24001350 	.word	0x24001350

080104d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80104e0:	f000 f852 	bl	8010588 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80104e4:	4b06      	ldr	r3, [pc, #24]	; (8010500 <prvIdleTask+0x28>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d9f9      	bls.n	80104e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80104ec:	4b05      	ldr	r3, [pc, #20]	; (8010504 <prvIdleTask+0x2c>)
 80104ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104f2:	601a      	str	r2, [r3, #0]
 80104f4:	f3bf 8f4f 	dsb	sy
 80104f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80104fc:	e7f0      	b.n	80104e0 <prvIdleTask+0x8>
 80104fe:	bf00      	nop
 8010500:	24000e6c 	.word	0x24000e6c
 8010504:	e000ed04 	.word	0xe000ed04

08010508 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801050e:	2300      	movs	r3, #0
 8010510:	607b      	str	r3, [r7, #4]
 8010512:	e00c      	b.n	801052e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	4613      	mov	r3, r2
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	4413      	add	r3, r2
 801051c:	009b      	lsls	r3, r3, #2
 801051e:	4a12      	ldr	r2, [pc, #72]	; (8010568 <prvInitialiseTaskLists+0x60>)
 8010520:	4413      	add	r3, r2
 8010522:	4618      	mov	r0, r3
 8010524:	f7fe fcad 	bl	800ee82 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	3301      	adds	r3, #1
 801052c:	607b      	str	r3, [r7, #4]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2b37      	cmp	r3, #55	; 0x37
 8010532:	d9ef      	bls.n	8010514 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010534:	480d      	ldr	r0, [pc, #52]	; (801056c <prvInitialiseTaskLists+0x64>)
 8010536:	f7fe fca4 	bl	800ee82 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801053a:	480d      	ldr	r0, [pc, #52]	; (8010570 <prvInitialiseTaskLists+0x68>)
 801053c:	f7fe fca1 	bl	800ee82 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010540:	480c      	ldr	r0, [pc, #48]	; (8010574 <prvInitialiseTaskLists+0x6c>)
 8010542:	f7fe fc9e 	bl	800ee82 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010546:	480c      	ldr	r0, [pc, #48]	; (8010578 <prvInitialiseTaskLists+0x70>)
 8010548:	f7fe fc9b 	bl	800ee82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801054c:	480b      	ldr	r0, [pc, #44]	; (801057c <prvInitialiseTaskLists+0x74>)
 801054e:	f7fe fc98 	bl	800ee82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010552:	4b0b      	ldr	r3, [pc, #44]	; (8010580 <prvInitialiseTaskLists+0x78>)
 8010554:	4a05      	ldr	r2, [pc, #20]	; (801056c <prvInitialiseTaskLists+0x64>)
 8010556:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010558:	4b0a      	ldr	r3, [pc, #40]	; (8010584 <prvInitialiseTaskLists+0x7c>)
 801055a:	4a05      	ldr	r2, [pc, #20]	; (8010570 <prvInitialiseTaskLists+0x68>)
 801055c:	601a      	str	r2, [r3, #0]
}
 801055e:	bf00      	nop
 8010560:	3708      	adds	r7, #8
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	24000e6c 	.word	0x24000e6c
 801056c:	240012cc 	.word	0x240012cc
 8010570:	240012e0 	.word	0x240012e0
 8010574:	240012fc 	.word	0x240012fc
 8010578:	24001310 	.word	0x24001310
 801057c:	24001328 	.word	0x24001328
 8010580:	240012f4 	.word	0x240012f4
 8010584:	240012f8 	.word	0x240012f8

08010588 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801058e:	e019      	b.n	80105c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010590:	f000 fdd0 	bl	8011134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010594:	4b10      	ldr	r3, [pc, #64]	; (80105d8 <prvCheckTasksWaitingTermination+0x50>)
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	3304      	adds	r3, #4
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7fe fcf8 	bl	800ef96 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80105a6:	4b0d      	ldr	r3, [pc, #52]	; (80105dc <prvCheckTasksWaitingTermination+0x54>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	3b01      	subs	r3, #1
 80105ac:	4a0b      	ldr	r2, [pc, #44]	; (80105dc <prvCheckTasksWaitingTermination+0x54>)
 80105ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80105b0:	4b0b      	ldr	r3, [pc, #44]	; (80105e0 <prvCheckTasksWaitingTermination+0x58>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	3b01      	subs	r3, #1
 80105b6:	4a0a      	ldr	r2, [pc, #40]	; (80105e0 <prvCheckTasksWaitingTermination+0x58>)
 80105b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80105ba:	f000 fdeb 	bl	8011194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 f810 	bl	80105e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80105c4:	4b06      	ldr	r3, [pc, #24]	; (80105e0 <prvCheckTasksWaitingTermination+0x58>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d1e1      	bne.n	8010590 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80105cc:	bf00      	nop
 80105ce:	bf00      	nop
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	24001310 	.word	0x24001310
 80105dc:	2400133c 	.word	0x2400133c
 80105e0:	24001324 	.word	0x24001324

080105e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b084      	sub	sp, #16
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d108      	bne.n	8010608 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105fa:	4618      	mov	r0, r3
 80105fc:	f000 ff88 	bl	8011510 <vPortFree>
				vPortFree( pxTCB );
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 ff85 	bl	8011510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010606:	e018      	b.n	801063a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801060e:	2b01      	cmp	r3, #1
 8010610:	d103      	bne.n	801061a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 ff7c 	bl	8011510 <vPortFree>
	}
 8010618:	e00f      	b.n	801063a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010620:	2b02      	cmp	r3, #2
 8010622:	d00a      	beq.n	801063a <prvDeleteTCB+0x56>
	__asm volatile
 8010624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010628:	f383 8811 	msr	BASEPRI, r3
 801062c:	f3bf 8f6f 	isb	sy
 8010630:	f3bf 8f4f 	dsb	sy
 8010634:	60fb      	str	r3, [r7, #12]
}
 8010636:	bf00      	nop
 8010638:	e7fe      	b.n	8010638 <prvDeleteTCB+0x54>
	}
 801063a:	bf00      	nop
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
	...

08010644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010644:	b480      	push	{r7}
 8010646:	b083      	sub	sp, #12
 8010648:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801064a:	4b0c      	ldr	r3, [pc, #48]	; (801067c <prvResetNextTaskUnblockTime+0x38>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d104      	bne.n	801065e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010654:	4b0a      	ldr	r3, [pc, #40]	; (8010680 <prvResetNextTaskUnblockTime+0x3c>)
 8010656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801065a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801065c:	e008      	b.n	8010670 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801065e:	4b07      	ldr	r3, [pc, #28]	; (801067c <prvResetNextTaskUnblockTime+0x38>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	4a04      	ldr	r2, [pc, #16]	; (8010680 <prvResetNextTaskUnblockTime+0x3c>)
 801066e:	6013      	str	r3, [r2, #0]
}
 8010670:	bf00      	nop
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr
 801067c:	240012f4 	.word	0x240012f4
 8010680:	2400135c 	.word	0x2400135c

08010684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010684:	b480      	push	{r7}
 8010686:	b083      	sub	sp, #12
 8010688:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801068a:	4b0b      	ldr	r3, [pc, #44]	; (80106b8 <xTaskGetSchedulerState+0x34>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d102      	bne.n	8010698 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010692:	2301      	movs	r3, #1
 8010694:	607b      	str	r3, [r7, #4]
 8010696:	e008      	b.n	80106aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010698:	4b08      	ldr	r3, [pc, #32]	; (80106bc <xTaskGetSchedulerState+0x38>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d102      	bne.n	80106a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80106a0:	2302      	movs	r3, #2
 80106a2:	607b      	str	r3, [r7, #4]
 80106a4:	e001      	b.n	80106aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80106a6:	2300      	movs	r3, #0
 80106a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80106aa:	687b      	ldr	r3, [r7, #4]
	}
 80106ac:	4618      	mov	r0, r3
 80106ae:	370c      	adds	r7, #12
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr
 80106b8:	24001348 	.word	0x24001348
 80106bc:	24001364 	.word	0x24001364

080106c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b086      	sub	sp, #24
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80106cc:	2300      	movs	r3, #0
 80106ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d056      	beq.n	8010784 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80106d6:	4b2e      	ldr	r3, [pc, #184]	; (8010790 <xTaskPriorityDisinherit+0xd0>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	693a      	ldr	r2, [r7, #16]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d00a      	beq.n	80106f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80106e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e4:	f383 8811 	msr	BASEPRI, r3
 80106e8:	f3bf 8f6f 	isb	sy
 80106ec:	f3bf 8f4f 	dsb	sy
 80106f0:	60fb      	str	r3, [r7, #12]
}
 80106f2:	bf00      	nop
 80106f4:	e7fe      	b.n	80106f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d10a      	bne.n	8010714 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80106fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010702:	f383 8811 	msr	BASEPRI, r3
 8010706:	f3bf 8f6f 	isb	sy
 801070a:	f3bf 8f4f 	dsb	sy
 801070e:	60bb      	str	r3, [r7, #8]
}
 8010710:	bf00      	nop
 8010712:	e7fe      	b.n	8010712 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010718:	1e5a      	subs	r2, r3, #1
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010726:	429a      	cmp	r2, r3
 8010728:	d02c      	beq.n	8010784 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801072e:	2b00      	cmp	r3, #0
 8010730:	d128      	bne.n	8010784 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	3304      	adds	r3, #4
 8010736:	4618      	mov	r0, r3
 8010738:	f7fe fc2d 	bl	800ef96 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010748:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010754:	4b0f      	ldr	r3, [pc, #60]	; (8010794 <xTaskPriorityDisinherit+0xd4>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	429a      	cmp	r2, r3
 801075a:	d903      	bls.n	8010764 <xTaskPriorityDisinherit+0xa4>
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010760:	4a0c      	ldr	r2, [pc, #48]	; (8010794 <xTaskPriorityDisinherit+0xd4>)
 8010762:	6013      	str	r3, [r2, #0]
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010768:	4613      	mov	r3, r2
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	4413      	add	r3, r2
 801076e:	009b      	lsls	r3, r3, #2
 8010770:	4a09      	ldr	r2, [pc, #36]	; (8010798 <xTaskPriorityDisinherit+0xd8>)
 8010772:	441a      	add	r2, r3
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	3304      	adds	r3, #4
 8010778:	4619      	mov	r1, r3
 801077a:	4610      	mov	r0, r2
 801077c:	f7fe fbae 	bl	800eedc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010780:	2301      	movs	r3, #1
 8010782:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010784:	697b      	ldr	r3, [r7, #20]
	}
 8010786:	4618      	mov	r0, r3
 8010788:	3718      	adds	r7, #24
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	24000e68 	.word	0x24000e68
 8010794:	24001344 	.word	0x24001344
 8010798:	24000e6c 	.word	0x24000e6c

0801079c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80107a6:	4b21      	ldr	r3, [pc, #132]	; (801082c <prvAddCurrentTaskToDelayedList+0x90>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107ac:	4b20      	ldr	r3, [pc, #128]	; (8010830 <prvAddCurrentTaskToDelayedList+0x94>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	3304      	adds	r3, #4
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fe fbef 	bl	800ef96 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107be:	d10a      	bne.n	80107d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d007      	beq.n	80107d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107c6:	4b1a      	ldr	r3, [pc, #104]	; (8010830 <prvAddCurrentTaskToDelayedList+0x94>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	3304      	adds	r3, #4
 80107cc:	4619      	mov	r1, r3
 80107ce:	4819      	ldr	r0, [pc, #100]	; (8010834 <prvAddCurrentTaskToDelayedList+0x98>)
 80107d0:	f7fe fb84 	bl	800eedc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80107d4:	e026      	b.n	8010824 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80107d6:	68fa      	ldr	r2, [r7, #12]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4413      	add	r3, r2
 80107dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80107de:	4b14      	ldr	r3, [pc, #80]	; (8010830 <prvAddCurrentTaskToDelayedList+0x94>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80107e6:	68ba      	ldr	r2, [r7, #8]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d209      	bcs.n	8010802 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107ee:	4b12      	ldr	r3, [pc, #72]	; (8010838 <prvAddCurrentTaskToDelayedList+0x9c>)
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	4b0f      	ldr	r3, [pc, #60]	; (8010830 <prvAddCurrentTaskToDelayedList+0x94>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	3304      	adds	r3, #4
 80107f8:	4619      	mov	r1, r3
 80107fa:	4610      	mov	r0, r2
 80107fc:	f7fe fb92 	bl	800ef24 <vListInsert>
}
 8010800:	e010      	b.n	8010824 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010802:	4b0e      	ldr	r3, [pc, #56]	; (801083c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	4b0a      	ldr	r3, [pc, #40]	; (8010830 <prvAddCurrentTaskToDelayedList+0x94>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	3304      	adds	r3, #4
 801080c:	4619      	mov	r1, r3
 801080e:	4610      	mov	r0, r2
 8010810:	f7fe fb88 	bl	800ef24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010814:	4b0a      	ldr	r3, [pc, #40]	; (8010840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	429a      	cmp	r2, r3
 801081c:	d202      	bcs.n	8010824 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801081e:	4a08      	ldr	r2, [pc, #32]	; (8010840 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	6013      	str	r3, [r2, #0]
}
 8010824:	bf00      	nop
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}
 801082c:	24001340 	.word	0x24001340
 8010830:	24000e68 	.word	0x24000e68
 8010834:	24001328 	.word	0x24001328
 8010838:	240012f8 	.word	0x240012f8
 801083c:	240012f4 	.word	0x240012f4
 8010840:	2400135c 	.word	0x2400135c

08010844 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b08a      	sub	sp, #40	; 0x28
 8010848:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801084a:	2300      	movs	r3, #0
 801084c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801084e:	f000 fb07 	bl	8010e60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010852:	4b1c      	ldr	r3, [pc, #112]	; (80108c4 <xTimerCreateTimerTask+0x80>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d021      	beq.n	801089e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801085a:	2300      	movs	r3, #0
 801085c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801085e:	2300      	movs	r3, #0
 8010860:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010862:	1d3a      	adds	r2, r7, #4
 8010864:	f107 0108 	add.w	r1, r7, #8
 8010868:	f107 030c 	add.w	r3, r7, #12
 801086c:	4618      	mov	r0, r3
 801086e:	f7fe fa9d 	bl	800edac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010872:	6879      	ldr	r1, [r7, #4]
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	9202      	str	r2, [sp, #8]
 801087a:	9301      	str	r3, [sp, #4]
 801087c:	2302      	movs	r3, #2
 801087e:	9300      	str	r3, [sp, #0]
 8010880:	2300      	movs	r3, #0
 8010882:	460a      	mov	r2, r1
 8010884:	4910      	ldr	r1, [pc, #64]	; (80108c8 <xTimerCreateTimerTask+0x84>)
 8010886:	4811      	ldr	r0, [pc, #68]	; (80108cc <xTimerCreateTimerTask+0x88>)
 8010888:	f7ff f8d6 	bl	800fa38 <xTaskCreateStatic>
 801088c:	4603      	mov	r3, r0
 801088e:	4a10      	ldr	r2, [pc, #64]	; (80108d0 <xTimerCreateTimerTask+0x8c>)
 8010890:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010892:	4b0f      	ldr	r3, [pc, #60]	; (80108d0 <xTimerCreateTimerTask+0x8c>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d001      	beq.n	801089e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801089a:	2301      	movs	r3, #1
 801089c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d10a      	bne.n	80108ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80108a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a8:	f383 8811 	msr	BASEPRI, r3
 80108ac:	f3bf 8f6f 	isb	sy
 80108b0:	f3bf 8f4f 	dsb	sy
 80108b4:	613b      	str	r3, [r7, #16]
}
 80108b6:	bf00      	nop
 80108b8:	e7fe      	b.n	80108b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80108ba:	697b      	ldr	r3, [r7, #20]
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3718      	adds	r7, #24
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	24001398 	.word	0x24001398
 80108c8:	08011868 	.word	0x08011868
 80108cc:	08010a09 	.word	0x08010a09
 80108d0:	2400139c 	.word	0x2400139c

080108d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b08a      	sub	sp, #40	; 0x28
 80108d8:	af00      	add	r7, sp, #0
 80108da:	60f8      	str	r0, [r7, #12]
 80108dc:	60b9      	str	r1, [r7, #8]
 80108de:	607a      	str	r2, [r7, #4]
 80108e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80108e2:	2300      	movs	r3, #0
 80108e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d10a      	bne.n	8010902 <xTimerGenericCommand+0x2e>
	__asm volatile
 80108ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f0:	f383 8811 	msr	BASEPRI, r3
 80108f4:	f3bf 8f6f 	isb	sy
 80108f8:	f3bf 8f4f 	dsb	sy
 80108fc:	623b      	str	r3, [r7, #32]
}
 80108fe:	bf00      	nop
 8010900:	e7fe      	b.n	8010900 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010902:	4b1a      	ldr	r3, [pc, #104]	; (801096c <xTimerGenericCommand+0x98>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d02a      	beq.n	8010960 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	2b05      	cmp	r3, #5
 801091a:	dc18      	bgt.n	801094e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801091c:	f7ff feb2 	bl	8010684 <xTaskGetSchedulerState>
 8010920:	4603      	mov	r3, r0
 8010922:	2b02      	cmp	r3, #2
 8010924:	d109      	bne.n	801093a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010926:	4b11      	ldr	r3, [pc, #68]	; (801096c <xTimerGenericCommand+0x98>)
 8010928:	6818      	ldr	r0, [r3, #0]
 801092a:	f107 0110 	add.w	r1, r7, #16
 801092e:	2300      	movs	r3, #0
 8010930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010932:	f7fe fc99 	bl	800f268 <xQueueGenericSend>
 8010936:	6278      	str	r0, [r7, #36]	; 0x24
 8010938:	e012      	b.n	8010960 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801093a:	4b0c      	ldr	r3, [pc, #48]	; (801096c <xTimerGenericCommand+0x98>)
 801093c:	6818      	ldr	r0, [r3, #0]
 801093e:	f107 0110 	add.w	r1, r7, #16
 8010942:	2300      	movs	r3, #0
 8010944:	2200      	movs	r2, #0
 8010946:	f7fe fc8f 	bl	800f268 <xQueueGenericSend>
 801094a:	6278      	str	r0, [r7, #36]	; 0x24
 801094c:	e008      	b.n	8010960 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801094e:	4b07      	ldr	r3, [pc, #28]	; (801096c <xTimerGenericCommand+0x98>)
 8010950:	6818      	ldr	r0, [r3, #0]
 8010952:	f107 0110 	add.w	r1, r7, #16
 8010956:	2300      	movs	r3, #0
 8010958:	683a      	ldr	r2, [r7, #0]
 801095a:	f7fe fd83 	bl	800f464 <xQueueGenericSendFromISR>
 801095e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010962:	4618      	mov	r0, r3
 8010964:	3728      	adds	r7, #40	; 0x28
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	24001398 	.word	0x24001398

08010970 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b088      	sub	sp, #32
 8010974:	af02      	add	r7, sp, #8
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801097a:	4b22      	ldr	r3, [pc, #136]	; (8010a04 <prvProcessExpiredTimer+0x94>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	68db      	ldr	r3, [r3, #12]
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	3304      	adds	r3, #4
 8010988:	4618      	mov	r0, r3
 801098a:	f7fe fb04 	bl	800ef96 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010994:	f003 0304 	and.w	r3, r3, #4
 8010998:	2b00      	cmp	r3, #0
 801099a:	d022      	beq.n	80109e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	699a      	ldr	r2, [r3, #24]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	18d1      	adds	r1, r2, r3
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	683a      	ldr	r2, [r7, #0]
 80109a8:	6978      	ldr	r0, [r7, #20]
 80109aa:	f000 f8d1 	bl	8010b50 <prvInsertTimerInActiveList>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d01f      	beq.n	80109f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80109b4:	2300      	movs	r3, #0
 80109b6:	9300      	str	r3, [sp, #0]
 80109b8:	2300      	movs	r3, #0
 80109ba:	687a      	ldr	r2, [r7, #4]
 80109bc:	2100      	movs	r1, #0
 80109be:	6978      	ldr	r0, [r7, #20]
 80109c0:	f7ff ff88 	bl	80108d4 <xTimerGenericCommand>
 80109c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d113      	bne.n	80109f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80109cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	60fb      	str	r3, [r7, #12]
}
 80109de:	bf00      	nop
 80109e0:	e7fe      	b.n	80109e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109e8:	f023 0301 	bic.w	r3, r3, #1
 80109ec:	b2da      	uxtb	r2, r3
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	6a1b      	ldr	r3, [r3, #32]
 80109f8:	6978      	ldr	r0, [r7, #20]
 80109fa:	4798      	blx	r3
}
 80109fc:	bf00      	nop
 80109fe:	3718      	adds	r7, #24
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}
 8010a04:	24001390 	.word	0x24001390

08010a08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b084      	sub	sp, #16
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a10:	f107 0308 	add.w	r3, r7, #8
 8010a14:	4618      	mov	r0, r3
 8010a16:	f000 f857 	bl	8010ac8 <prvGetNextExpireTime>
 8010a1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	4619      	mov	r1, r3
 8010a20:	68f8      	ldr	r0, [r7, #12]
 8010a22:	f000 f803 	bl	8010a2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010a26:	f000 f8d5 	bl	8010bd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a2a:	e7f1      	b.n	8010a10 <prvTimerTask+0x8>

08010a2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b084      	sub	sp, #16
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010a36:	f7ff fa3b 	bl	800feb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a3a:	f107 0308 	add.w	r3, r7, #8
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f000 f866 	bl	8010b10 <prvSampleTimeNow>
 8010a44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d130      	bne.n	8010aae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d10a      	bne.n	8010a68 <prvProcessTimerOrBlockTask+0x3c>
 8010a52:	687a      	ldr	r2, [r7, #4]
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d806      	bhi.n	8010a68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010a5a:	f7ff fa37 	bl	800fecc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010a5e:	68f9      	ldr	r1, [r7, #12]
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f7ff ff85 	bl	8010970 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010a66:	e024      	b.n	8010ab2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d008      	beq.n	8010a80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010a6e:	4b13      	ldr	r3, [pc, #76]	; (8010abc <prvProcessTimerOrBlockTask+0x90>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d101      	bne.n	8010a7c <prvProcessTimerOrBlockTask+0x50>
 8010a78:	2301      	movs	r3, #1
 8010a7a:	e000      	b.n	8010a7e <prvProcessTimerOrBlockTask+0x52>
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010a80:	4b0f      	ldr	r3, [pc, #60]	; (8010ac0 <prvProcessTimerOrBlockTask+0x94>)
 8010a82:	6818      	ldr	r0, [r3, #0]
 8010a84:	687a      	ldr	r2, [r7, #4]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	1ad3      	subs	r3, r2, r3
 8010a8a:	683a      	ldr	r2, [r7, #0]
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	f7fe ff9f 	bl	800f9d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010a92:	f7ff fa1b 	bl	800fecc <xTaskResumeAll>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d10a      	bne.n	8010ab2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010a9c:	4b09      	ldr	r3, [pc, #36]	; (8010ac4 <prvProcessTimerOrBlockTask+0x98>)
 8010a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010aa2:	601a      	str	r2, [r3, #0]
 8010aa4:	f3bf 8f4f 	dsb	sy
 8010aa8:	f3bf 8f6f 	isb	sy
}
 8010aac:	e001      	b.n	8010ab2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010aae:	f7ff fa0d 	bl	800fecc <xTaskResumeAll>
}
 8010ab2:	bf00      	nop
 8010ab4:	3710      	adds	r7, #16
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop
 8010abc:	24001394 	.word	0x24001394
 8010ac0:	24001398 	.word	0x24001398
 8010ac4:	e000ed04 	.word	0xe000ed04

08010ac8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b085      	sub	sp, #20
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010ad0:	4b0e      	ldr	r3, [pc, #56]	; (8010b0c <prvGetNextExpireTime+0x44>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d101      	bne.n	8010ade <prvGetNextExpireTime+0x16>
 8010ada:	2201      	movs	r2, #1
 8010adc:	e000      	b.n	8010ae0 <prvGetNextExpireTime+0x18>
 8010ade:	2200      	movs	r2, #0
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d105      	bne.n	8010af8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010aec:	4b07      	ldr	r3, [pc, #28]	; (8010b0c <prvGetNextExpireTime+0x44>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	68db      	ldr	r3, [r3, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	60fb      	str	r3, [r7, #12]
 8010af6:	e001      	b.n	8010afc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010af8:	2300      	movs	r3, #0
 8010afa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010afc:	68fb      	ldr	r3, [r7, #12]
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3714      	adds	r7, #20
 8010b02:	46bd      	mov	sp, r7
 8010b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop
 8010b0c:	24001390 	.word	0x24001390

08010b10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010b18:	f7ff fa76 	bl	8010008 <xTaskGetTickCount>
 8010b1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010b1e:	4b0b      	ldr	r3, [pc, #44]	; (8010b4c <prvSampleTimeNow+0x3c>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	68fa      	ldr	r2, [r7, #12]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d205      	bcs.n	8010b34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010b28:	f000 f936 	bl	8010d98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2201      	movs	r2, #1
 8010b30:	601a      	str	r2, [r3, #0]
 8010b32:	e002      	b.n	8010b3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2200      	movs	r2, #0
 8010b38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010b3a:	4a04      	ldr	r2, [pc, #16]	; (8010b4c <prvSampleTimeNow+0x3c>)
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010b40:	68fb      	ldr	r3, [r7, #12]
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3710      	adds	r7, #16
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	240013a0 	.word	0x240013a0

08010b50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b086      	sub	sp, #24
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	60f8      	str	r0, [r7, #12]
 8010b58:	60b9      	str	r1, [r7, #8]
 8010b5a:	607a      	str	r2, [r7, #4]
 8010b5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	68ba      	ldr	r2, [r7, #8]
 8010b66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	68fa      	ldr	r2, [r7, #12]
 8010b6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010b6e:	68ba      	ldr	r2, [r7, #8]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d812      	bhi.n	8010b9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	1ad2      	subs	r2, r2, r3
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	699b      	ldr	r3, [r3, #24]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d302      	bcc.n	8010b8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010b84:	2301      	movs	r3, #1
 8010b86:	617b      	str	r3, [r7, #20]
 8010b88:	e01b      	b.n	8010bc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010b8a:	4b10      	ldr	r3, [pc, #64]	; (8010bcc <prvInsertTimerInActiveList+0x7c>)
 8010b8c:	681a      	ldr	r2, [r3, #0]
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	3304      	adds	r3, #4
 8010b92:	4619      	mov	r1, r3
 8010b94:	4610      	mov	r0, r2
 8010b96:	f7fe f9c5 	bl	800ef24 <vListInsert>
 8010b9a:	e012      	b.n	8010bc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d206      	bcs.n	8010bb2 <prvInsertTimerInActiveList+0x62>
 8010ba4:	68ba      	ldr	r2, [r7, #8]
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d302      	bcc.n	8010bb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010bac:	2301      	movs	r3, #1
 8010bae:	617b      	str	r3, [r7, #20]
 8010bb0:	e007      	b.n	8010bc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010bb2:	4b07      	ldr	r3, [pc, #28]	; (8010bd0 <prvInsertTimerInActiveList+0x80>)
 8010bb4:	681a      	ldr	r2, [r3, #0]
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	3304      	adds	r3, #4
 8010bba:	4619      	mov	r1, r3
 8010bbc:	4610      	mov	r0, r2
 8010bbe:	f7fe f9b1 	bl	800ef24 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010bc2:	697b      	ldr	r3, [r7, #20]
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3718      	adds	r7, #24
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}
 8010bcc:	24001394 	.word	0x24001394
 8010bd0:	24001390 	.word	0x24001390

08010bd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b08e      	sub	sp, #56	; 0x38
 8010bd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010bda:	e0ca      	b.n	8010d72 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	da18      	bge.n	8010c14 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010be2:	1d3b      	adds	r3, r7, #4
 8010be4:	3304      	adds	r3, #4
 8010be6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d10a      	bne.n	8010c04 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf2:	f383 8811 	msr	BASEPRI, r3
 8010bf6:	f3bf 8f6f 	isb	sy
 8010bfa:	f3bf 8f4f 	dsb	sy
 8010bfe:	61fb      	str	r3, [r7, #28]
}
 8010c00:	bf00      	nop
 8010c02:	e7fe      	b.n	8010c02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c0a:	6850      	ldr	r0, [r2, #4]
 8010c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c0e:	6892      	ldr	r2, [r2, #8]
 8010c10:	4611      	mov	r1, r2
 8010c12:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	f2c0 80aa 	blt.w	8010d70 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c22:	695b      	ldr	r3, [r3, #20]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d004      	beq.n	8010c32 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c2a:	3304      	adds	r3, #4
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fe f9b2 	bl	800ef96 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010c32:	463b      	mov	r3, r7
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7ff ff6b 	bl	8010b10 <prvSampleTimeNow>
 8010c3a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2b09      	cmp	r3, #9
 8010c40:	f200 8097 	bhi.w	8010d72 <prvProcessReceivedCommands+0x19e>
 8010c44:	a201      	add	r2, pc, #4	; (adr r2, 8010c4c <prvProcessReceivedCommands+0x78>)
 8010c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c4a:	bf00      	nop
 8010c4c:	08010c75 	.word	0x08010c75
 8010c50:	08010c75 	.word	0x08010c75
 8010c54:	08010c75 	.word	0x08010c75
 8010c58:	08010ce9 	.word	0x08010ce9
 8010c5c:	08010cfd 	.word	0x08010cfd
 8010c60:	08010d47 	.word	0x08010d47
 8010c64:	08010c75 	.word	0x08010c75
 8010c68:	08010c75 	.word	0x08010c75
 8010c6c:	08010ce9 	.word	0x08010ce9
 8010c70:	08010cfd 	.word	0x08010cfd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c7a:	f043 0301 	orr.w	r3, r3, #1
 8010c7e:	b2da      	uxtb	r2, r3
 8010c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010c86:	68ba      	ldr	r2, [r7, #8]
 8010c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8a:	699b      	ldr	r3, [r3, #24]
 8010c8c:	18d1      	adds	r1, r2, r3
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c94:	f7ff ff5c 	bl	8010b50 <prvInsertTimerInActiveList>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d069      	beq.n	8010d72 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca0:	6a1b      	ldr	r3, [r3, #32]
 8010ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ca4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cac:	f003 0304 	and.w	r3, r3, #4
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d05e      	beq.n	8010d72 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010cb4:	68ba      	ldr	r2, [r7, #8]
 8010cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb8:	699b      	ldr	r3, [r3, #24]
 8010cba:	441a      	add	r2, r3
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	9300      	str	r3, [sp, #0]
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	2100      	movs	r1, #0
 8010cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cc6:	f7ff fe05 	bl	80108d4 <xTimerGenericCommand>
 8010cca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010ccc:	6a3b      	ldr	r3, [r7, #32]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d14f      	bne.n	8010d72 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd6:	f383 8811 	msr	BASEPRI, r3
 8010cda:	f3bf 8f6f 	isb	sy
 8010cde:	f3bf 8f4f 	dsb	sy
 8010ce2:	61bb      	str	r3, [r7, #24]
}
 8010ce4:	bf00      	nop
 8010ce6:	e7fe      	b.n	8010ce6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cee:	f023 0301 	bic.w	r3, r3, #1
 8010cf2:	b2da      	uxtb	r2, r3
 8010cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010cfa:	e03a      	b.n	8010d72 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d02:	f043 0301 	orr.w	r3, r3, #1
 8010d06:	b2da      	uxtb	r2, r3
 8010d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010d0e:	68ba      	ldr	r2, [r7, #8]
 8010d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d16:	699b      	ldr	r3, [r3, #24]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d10a      	bne.n	8010d32 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d20:	f383 8811 	msr	BASEPRI, r3
 8010d24:	f3bf 8f6f 	isb	sy
 8010d28:	f3bf 8f4f 	dsb	sy
 8010d2c:	617b      	str	r3, [r7, #20]
}
 8010d2e:	bf00      	nop
 8010d30:	e7fe      	b.n	8010d30 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d34:	699a      	ldr	r2, [r3, #24]
 8010d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d38:	18d1      	adds	r1, r2, r3
 8010d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d40:	f7ff ff06 	bl	8010b50 <prvInsertTimerInActiveList>
					break;
 8010d44:	e015      	b.n	8010d72 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d4c:	f003 0302 	and.w	r3, r3, #2
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d103      	bne.n	8010d5c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d56:	f000 fbdb 	bl	8011510 <vPortFree>
 8010d5a:	e00a      	b.n	8010d72 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d62:	f023 0301 	bic.w	r3, r3, #1
 8010d66:	b2da      	uxtb	r2, r3
 8010d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010d6e:	e000      	b.n	8010d72 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010d70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d72:	4b08      	ldr	r3, [pc, #32]	; (8010d94 <prvProcessReceivedCommands+0x1c0>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	1d39      	adds	r1, r7, #4
 8010d78:	2200      	movs	r2, #0
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7fe fc0e 	bl	800f59c <xQueueReceive>
 8010d80:	4603      	mov	r3, r0
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	f47f af2a 	bne.w	8010bdc <prvProcessReceivedCommands+0x8>
	}
}
 8010d88:	bf00      	nop
 8010d8a:	bf00      	nop
 8010d8c:	3730      	adds	r7, #48	; 0x30
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	bf00      	nop
 8010d94:	24001398 	.word	0x24001398

08010d98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b088      	sub	sp, #32
 8010d9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d9e:	e048      	b.n	8010e32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010da0:	4b2d      	ldr	r3, [pc, #180]	; (8010e58 <prvSwitchTimerLists+0xc0>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	68db      	ldr	r3, [r3, #12]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010daa:	4b2b      	ldr	r3, [pc, #172]	; (8010e58 <prvSwitchTimerLists+0xc0>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	68db      	ldr	r3, [r3, #12]
 8010db0:	68db      	ldr	r3, [r3, #12]
 8010db2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	3304      	adds	r3, #4
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7fe f8ec 	bl	800ef96 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	6a1b      	ldr	r3, [r3, #32]
 8010dc2:	68f8      	ldr	r0, [r7, #12]
 8010dc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dcc:	f003 0304 	and.w	r3, r3, #4
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d02e      	beq.n	8010e32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	699b      	ldr	r3, [r3, #24]
 8010dd8:	693a      	ldr	r2, [r7, #16]
 8010dda:	4413      	add	r3, r2
 8010ddc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010dde:	68ba      	ldr	r2, [r7, #8]
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d90e      	bls.n	8010e04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	68ba      	ldr	r2, [r7, #8]
 8010dea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	68fa      	ldr	r2, [r7, #12]
 8010df0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010df2:	4b19      	ldr	r3, [pc, #100]	; (8010e58 <prvSwitchTimerLists+0xc0>)
 8010df4:	681a      	ldr	r2, [r3, #0]
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	3304      	adds	r3, #4
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	4610      	mov	r0, r2
 8010dfe:	f7fe f891 	bl	800ef24 <vListInsert>
 8010e02:	e016      	b.n	8010e32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010e04:	2300      	movs	r3, #0
 8010e06:	9300      	str	r3, [sp, #0]
 8010e08:	2300      	movs	r3, #0
 8010e0a:	693a      	ldr	r2, [r7, #16]
 8010e0c:	2100      	movs	r1, #0
 8010e0e:	68f8      	ldr	r0, [r7, #12]
 8010e10:	f7ff fd60 	bl	80108d4 <xTimerGenericCommand>
 8010e14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d10a      	bne.n	8010e32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e20:	f383 8811 	msr	BASEPRI, r3
 8010e24:	f3bf 8f6f 	isb	sy
 8010e28:	f3bf 8f4f 	dsb	sy
 8010e2c:	603b      	str	r3, [r7, #0]
}
 8010e2e:	bf00      	nop
 8010e30:	e7fe      	b.n	8010e30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e32:	4b09      	ldr	r3, [pc, #36]	; (8010e58 <prvSwitchTimerLists+0xc0>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1b1      	bne.n	8010da0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010e3c:	4b06      	ldr	r3, [pc, #24]	; (8010e58 <prvSwitchTimerLists+0xc0>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010e42:	4b06      	ldr	r3, [pc, #24]	; (8010e5c <prvSwitchTimerLists+0xc4>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4a04      	ldr	r2, [pc, #16]	; (8010e58 <prvSwitchTimerLists+0xc0>)
 8010e48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010e4a:	4a04      	ldr	r2, [pc, #16]	; (8010e5c <prvSwitchTimerLists+0xc4>)
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	6013      	str	r3, [r2, #0]
}
 8010e50:	bf00      	nop
 8010e52:	3718      	adds	r7, #24
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	24001390 	.word	0x24001390
 8010e5c:	24001394 	.word	0x24001394

08010e60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010e66:	f000 f965 	bl	8011134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010e6a:	4b15      	ldr	r3, [pc, #84]	; (8010ec0 <prvCheckForValidListAndQueue+0x60>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d120      	bne.n	8010eb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010e72:	4814      	ldr	r0, [pc, #80]	; (8010ec4 <prvCheckForValidListAndQueue+0x64>)
 8010e74:	f7fe f805 	bl	800ee82 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010e78:	4813      	ldr	r0, [pc, #76]	; (8010ec8 <prvCheckForValidListAndQueue+0x68>)
 8010e7a:	f7fe f802 	bl	800ee82 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010e7e:	4b13      	ldr	r3, [pc, #76]	; (8010ecc <prvCheckForValidListAndQueue+0x6c>)
 8010e80:	4a10      	ldr	r2, [pc, #64]	; (8010ec4 <prvCheckForValidListAndQueue+0x64>)
 8010e82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010e84:	4b12      	ldr	r3, [pc, #72]	; (8010ed0 <prvCheckForValidListAndQueue+0x70>)
 8010e86:	4a10      	ldr	r2, [pc, #64]	; (8010ec8 <prvCheckForValidListAndQueue+0x68>)
 8010e88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	9300      	str	r3, [sp, #0]
 8010e8e:	4b11      	ldr	r3, [pc, #68]	; (8010ed4 <prvCheckForValidListAndQueue+0x74>)
 8010e90:	4a11      	ldr	r2, [pc, #68]	; (8010ed8 <prvCheckForValidListAndQueue+0x78>)
 8010e92:	2110      	movs	r1, #16
 8010e94:	200a      	movs	r0, #10
 8010e96:	f7fe f911 	bl	800f0bc <xQueueGenericCreateStatic>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	4a08      	ldr	r2, [pc, #32]	; (8010ec0 <prvCheckForValidListAndQueue+0x60>)
 8010e9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010ea0:	4b07      	ldr	r3, [pc, #28]	; (8010ec0 <prvCheckForValidListAndQueue+0x60>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d005      	beq.n	8010eb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010ea8:	4b05      	ldr	r3, [pc, #20]	; (8010ec0 <prvCheckForValidListAndQueue+0x60>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	490b      	ldr	r1, [pc, #44]	; (8010edc <prvCheckForValidListAndQueue+0x7c>)
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fe fd64 	bl	800f97c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010eb4:	f000 f96e 	bl	8011194 <vPortExitCritical>
}
 8010eb8:	bf00      	nop
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	24001398 	.word	0x24001398
 8010ec4:	24001368 	.word	0x24001368
 8010ec8:	2400137c 	.word	0x2400137c
 8010ecc:	24001390 	.word	0x24001390
 8010ed0:	24001394 	.word	0x24001394
 8010ed4:	24001444 	.word	0x24001444
 8010ed8:	240013a4 	.word	0x240013a4
 8010edc:	08011870 	.word	0x08011870

08010ee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b085      	sub	sp, #20
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	3b04      	subs	r3, #4
 8010ef0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	3b04      	subs	r3, #4
 8010efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	f023 0201 	bic.w	r2, r3, #1
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	3b04      	subs	r3, #4
 8010f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010f10:	4a0c      	ldr	r2, [pc, #48]	; (8010f44 <pxPortInitialiseStack+0x64>)
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	3b14      	subs	r3, #20
 8010f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010f1c:	687a      	ldr	r2, [r7, #4]
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	3b04      	subs	r3, #4
 8010f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	f06f 0202 	mvn.w	r2, #2
 8010f2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	3b20      	subs	r3, #32
 8010f34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010f36:	68fb      	ldr	r3, [r7, #12]
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3714      	adds	r7, #20
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f42:	4770      	bx	lr
 8010f44:	08010f49 	.word	0x08010f49

08010f48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b085      	sub	sp, #20
 8010f4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010f52:	4b12      	ldr	r3, [pc, #72]	; (8010f9c <prvTaskExitError+0x54>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f5a:	d00a      	beq.n	8010f72 <prvTaskExitError+0x2a>
	__asm volatile
 8010f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f60:	f383 8811 	msr	BASEPRI, r3
 8010f64:	f3bf 8f6f 	isb	sy
 8010f68:	f3bf 8f4f 	dsb	sy
 8010f6c:	60fb      	str	r3, [r7, #12]
}
 8010f6e:	bf00      	nop
 8010f70:	e7fe      	b.n	8010f70 <prvTaskExitError+0x28>
	__asm volatile
 8010f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f76:	f383 8811 	msr	BASEPRI, r3
 8010f7a:	f3bf 8f6f 	isb	sy
 8010f7e:	f3bf 8f4f 	dsb	sy
 8010f82:	60bb      	str	r3, [r7, #8]
}
 8010f84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010f86:	bf00      	nop
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d0fc      	beq.n	8010f88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010f8e:	bf00      	nop
 8010f90:	bf00      	nop
 8010f92:	3714      	adds	r7, #20
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr
 8010f9c:	24000010 	.word	0x24000010

08010fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010fa0:	4b07      	ldr	r3, [pc, #28]	; (8010fc0 <pxCurrentTCBConst2>)
 8010fa2:	6819      	ldr	r1, [r3, #0]
 8010fa4:	6808      	ldr	r0, [r1, #0]
 8010fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010faa:	f380 8809 	msr	PSP, r0
 8010fae:	f3bf 8f6f 	isb	sy
 8010fb2:	f04f 0000 	mov.w	r0, #0
 8010fb6:	f380 8811 	msr	BASEPRI, r0
 8010fba:	4770      	bx	lr
 8010fbc:	f3af 8000 	nop.w

08010fc0 <pxCurrentTCBConst2>:
 8010fc0:	24000e68 	.word	0x24000e68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010fc4:	bf00      	nop
 8010fc6:	bf00      	nop

08010fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010fc8:	4808      	ldr	r0, [pc, #32]	; (8010fec <prvPortStartFirstTask+0x24>)
 8010fca:	6800      	ldr	r0, [r0, #0]
 8010fcc:	6800      	ldr	r0, [r0, #0]
 8010fce:	f380 8808 	msr	MSP, r0
 8010fd2:	f04f 0000 	mov.w	r0, #0
 8010fd6:	f380 8814 	msr	CONTROL, r0
 8010fda:	b662      	cpsie	i
 8010fdc:	b661      	cpsie	f
 8010fde:	f3bf 8f4f 	dsb	sy
 8010fe2:	f3bf 8f6f 	isb	sy
 8010fe6:	df00      	svc	0
 8010fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010fea:	bf00      	nop
 8010fec:	e000ed08 	.word	0xe000ed08

08010ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b086      	sub	sp, #24
 8010ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010ff6:	4b46      	ldr	r3, [pc, #280]	; (8011110 <xPortStartScheduler+0x120>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	4a46      	ldr	r2, [pc, #280]	; (8011114 <xPortStartScheduler+0x124>)
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	d10a      	bne.n	8011016 <xPortStartScheduler+0x26>
	__asm volatile
 8011000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011004:	f383 8811 	msr	BASEPRI, r3
 8011008:	f3bf 8f6f 	isb	sy
 801100c:	f3bf 8f4f 	dsb	sy
 8011010:	613b      	str	r3, [r7, #16]
}
 8011012:	bf00      	nop
 8011014:	e7fe      	b.n	8011014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011016:	4b3e      	ldr	r3, [pc, #248]	; (8011110 <xPortStartScheduler+0x120>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	4a3f      	ldr	r2, [pc, #252]	; (8011118 <xPortStartScheduler+0x128>)
 801101c:	4293      	cmp	r3, r2
 801101e:	d10a      	bne.n	8011036 <xPortStartScheduler+0x46>
	__asm volatile
 8011020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011024:	f383 8811 	msr	BASEPRI, r3
 8011028:	f3bf 8f6f 	isb	sy
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	60fb      	str	r3, [r7, #12]
}
 8011032:	bf00      	nop
 8011034:	e7fe      	b.n	8011034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011036:	4b39      	ldr	r3, [pc, #228]	; (801111c <xPortStartScheduler+0x12c>)
 8011038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	b2db      	uxtb	r3, r3
 8011040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	22ff      	movs	r2, #255	; 0xff
 8011046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011048:	697b      	ldr	r3, [r7, #20]
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	b2db      	uxtb	r3, r3
 801104e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011050:	78fb      	ldrb	r3, [r7, #3]
 8011052:	b2db      	uxtb	r3, r3
 8011054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011058:	b2da      	uxtb	r2, r3
 801105a:	4b31      	ldr	r3, [pc, #196]	; (8011120 <xPortStartScheduler+0x130>)
 801105c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801105e:	4b31      	ldr	r3, [pc, #196]	; (8011124 <xPortStartScheduler+0x134>)
 8011060:	2207      	movs	r2, #7
 8011062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011064:	e009      	b.n	801107a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011066:	4b2f      	ldr	r3, [pc, #188]	; (8011124 <xPortStartScheduler+0x134>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	3b01      	subs	r3, #1
 801106c:	4a2d      	ldr	r2, [pc, #180]	; (8011124 <xPortStartScheduler+0x134>)
 801106e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011070:	78fb      	ldrb	r3, [r7, #3]
 8011072:	b2db      	uxtb	r3, r3
 8011074:	005b      	lsls	r3, r3, #1
 8011076:	b2db      	uxtb	r3, r3
 8011078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801107a:	78fb      	ldrb	r3, [r7, #3]
 801107c:	b2db      	uxtb	r3, r3
 801107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011082:	2b80      	cmp	r3, #128	; 0x80
 8011084:	d0ef      	beq.n	8011066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011086:	4b27      	ldr	r3, [pc, #156]	; (8011124 <xPortStartScheduler+0x134>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f1c3 0307 	rsb	r3, r3, #7
 801108e:	2b04      	cmp	r3, #4
 8011090:	d00a      	beq.n	80110a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8011092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011096:	f383 8811 	msr	BASEPRI, r3
 801109a:	f3bf 8f6f 	isb	sy
 801109e:	f3bf 8f4f 	dsb	sy
 80110a2:	60bb      	str	r3, [r7, #8]
}
 80110a4:	bf00      	nop
 80110a6:	e7fe      	b.n	80110a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80110a8:	4b1e      	ldr	r3, [pc, #120]	; (8011124 <xPortStartScheduler+0x134>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	021b      	lsls	r3, r3, #8
 80110ae:	4a1d      	ldr	r2, [pc, #116]	; (8011124 <xPortStartScheduler+0x134>)
 80110b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80110b2:	4b1c      	ldr	r3, [pc, #112]	; (8011124 <xPortStartScheduler+0x134>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80110ba:	4a1a      	ldr	r2, [pc, #104]	; (8011124 <xPortStartScheduler+0x134>)
 80110bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	b2da      	uxtb	r2, r3
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80110c6:	4b18      	ldr	r3, [pc, #96]	; (8011128 <xPortStartScheduler+0x138>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4a17      	ldr	r2, [pc, #92]	; (8011128 <xPortStartScheduler+0x138>)
 80110cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80110d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80110d2:	4b15      	ldr	r3, [pc, #84]	; (8011128 <xPortStartScheduler+0x138>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	4a14      	ldr	r2, [pc, #80]	; (8011128 <xPortStartScheduler+0x138>)
 80110d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80110dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80110de:	f000 f8dd 	bl	801129c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80110e2:	4b12      	ldr	r3, [pc, #72]	; (801112c <xPortStartScheduler+0x13c>)
 80110e4:	2200      	movs	r2, #0
 80110e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80110e8:	f000 f8fc 	bl	80112e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80110ec:	4b10      	ldr	r3, [pc, #64]	; (8011130 <xPortStartScheduler+0x140>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	4a0f      	ldr	r2, [pc, #60]	; (8011130 <xPortStartScheduler+0x140>)
 80110f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80110f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80110f8:	f7ff ff66 	bl	8010fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80110fc:	f7ff f856 	bl	80101ac <vTaskSwitchContext>
	prvTaskExitError();
 8011100:	f7ff ff22 	bl	8010f48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011104:	2300      	movs	r3, #0
}
 8011106:	4618      	mov	r0, r3
 8011108:	3718      	adds	r7, #24
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	e000ed00 	.word	0xe000ed00
 8011114:	410fc271 	.word	0x410fc271
 8011118:	410fc270 	.word	0x410fc270
 801111c:	e000e400 	.word	0xe000e400
 8011120:	24001494 	.word	0x24001494
 8011124:	24001498 	.word	0x24001498
 8011128:	e000ed20 	.word	0xe000ed20
 801112c:	24000010 	.word	0x24000010
 8011130:	e000ef34 	.word	0xe000ef34

08011134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011134:	b480      	push	{r7}
 8011136:	b083      	sub	sp, #12
 8011138:	af00      	add	r7, sp, #0
	__asm volatile
 801113a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801113e:	f383 8811 	msr	BASEPRI, r3
 8011142:	f3bf 8f6f 	isb	sy
 8011146:	f3bf 8f4f 	dsb	sy
 801114a:	607b      	str	r3, [r7, #4]
}
 801114c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801114e:	4b0f      	ldr	r3, [pc, #60]	; (801118c <vPortEnterCritical+0x58>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	3301      	adds	r3, #1
 8011154:	4a0d      	ldr	r2, [pc, #52]	; (801118c <vPortEnterCritical+0x58>)
 8011156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011158:	4b0c      	ldr	r3, [pc, #48]	; (801118c <vPortEnterCritical+0x58>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b01      	cmp	r3, #1
 801115e:	d10f      	bne.n	8011180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011160:	4b0b      	ldr	r3, [pc, #44]	; (8011190 <vPortEnterCritical+0x5c>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	b2db      	uxtb	r3, r3
 8011166:	2b00      	cmp	r3, #0
 8011168:	d00a      	beq.n	8011180 <vPortEnterCritical+0x4c>
	__asm volatile
 801116a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801116e:	f383 8811 	msr	BASEPRI, r3
 8011172:	f3bf 8f6f 	isb	sy
 8011176:	f3bf 8f4f 	dsb	sy
 801117a:	603b      	str	r3, [r7, #0]
}
 801117c:	bf00      	nop
 801117e:	e7fe      	b.n	801117e <vPortEnterCritical+0x4a>
	}
}
 8011180:	bf00      	nop
 8011182:	370c      	adds	r7, #12
 8011184:	46bd      	mov	sp, r7
 8011186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118a:	4770      	bx	lr
 801118c:	24000010 	.word	0x24000010
 8011190:	e000ed04 	.word	0xe000ed04

08011194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011194:	b480      	push	{r7}
 8011196:	b083      	sub	sp, #12
 8011198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801119a:	4b12      	ldr	r3, [pc, #72]	; (80111e4 <vPortExitCritical+0x50>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d10a      	bne.n	80111b8 <vPortExitCritical+0x24>
	__asm volatile
 80111a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a6:	f383 8811 	msr	BASEPRI, r3
 80111aa:	f3bf 8f6f 	isb	sy
 80111ae:	f3bf 8f4f 	dsb	sy
 80111b2:	607b      	str	r3, [r7, #4]
}
 80111b4:	bf00      	nop
 80111b6:	e7fe      	b.n	80111b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80111b8:	4b0a      	ldr	r3, [pc, #40]	; (80111e4 <vPortExitCritical+0x50>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	3b01      	subs	r3, #1
 80111be:	4a09      	ldr	r2, [pc, #36]	; (80111e4 <vPortExitCritical+0x50>)
 80111c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80111c2:	4b08      	ldr	r3, [pc, #32]	; (80111e4 <vPortExitCritical+0x50>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d105      	bne.n	80111d6 <vPortExitCritical+0x42>
 80111ca:	2300      	movs	r3, #0
 80111cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	f383 8811 	msr	BASEPRI, r3
}
 80111d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80111d6:	bf00      	nop
 80111d8:	370c      	adds	r7, #12
 80111da:	46bd      	mov	sp, r7
 80111dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	24000010 	.word	0x24000010
	...

080111f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80111f0:	f3ef 8009 	mrs	r0, PSP
 80111f4:	f3bf 8f6f 	isb	sy
 80111f8:	4b15      	ldr	r3, [pc, #84]	; (8011250 <pxCurrentTCBConst>)
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	f01e 0f10 	tst.w	lr, #16
 8011200:	bf08      	it	eq
 8011202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120a:	6010      	str	r0, [r2, #0]
 801120c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011214:	f380 8811 	msr	BASEPRI, r0
 8011218:	f3bf 8f4f 	dsb	sy
 801121c:	f3bf 8f6f 	isb	sy
 8011220:	f7fe ffc4 	bl	80101ac <vTaskSwitchContext>
 8011224:	f04f 0000 	mov.w	r0, #0
 8011228:	f380 8811 	msr	BASEPRI, r0
 801122c:	bc09      	pop	{r0, r3}
 801122e:	6819      	ldr	r1, [r3, #0]
 8011230:	6808      	ldr	r0, [r1, #0]
 8011232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011236:	f01e 0f10 	tst.w	lr, #16
 801123a:	bf08      	it	eq
 801123c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011240:	f380 8809 	msr	PSP, r0
 8011244:	f3bf 8f6f 	isb	sy
 8011248:	4770      	bx	lr
 801124a:	bf00      	nop
 801124c:	f3af 8000 	nop.w

08011250 <pxCurrentTCBConst>:
 8011250:	24000e68 	.word	0x24000e68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011254:	bf00      	nop
 8011256:	bf00      	nop

08011258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
	__asm volatile
 801125e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011262:	f383 8811 	msr	BASEPRI, r3
 8011266:	f3bf 8f6f 	isb	sy
 801126a:	f3bf 8f4f 	dsb	sy
 801126e:	607b      	str	r3, [r7, #4]
}
 8011270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011272:	f7fe fed9 	bl	8010028 <xTaskIncrementTick>
 8011276:	4603      	mov	r3, r0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d003      	beq.n	8011284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801127c:	4b06      	ldr	r3, [pc, #24]	; (8011298 <xPortSysTickHandler+0x40>)
 801127e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011282:	601a      	str	r2, [r3, #0]
 8011284:	2300      	movs	r3, #0
 8011286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	f383 8811 	msr	BASEPRI, r3
}
 801128e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011290:	bf00      	nop
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}
 8011298:	e000ed04 	.word	0xe000ed04

0801129c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801129c:	b480      	push	{r7}
 801129e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80112a0:	4b0b      	ldr	r3, [pc, #44]	; (80112d0 <vPortSetupTimerInterrupt+0x34>)
 80112a2:	2200      	movs	r2, #0
 80112a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80112a6:	4b0b      	ldr	r3, [pc, #44]	; (80112d4 <vPortSetupTimerInterrupt+0x38>)
 80112a8:	2200      	movs	r2, #0
 80112aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80112ac:	4b0a      	ldr	r3, [pc, #40]	; (80112d8 <vPortSetupTimerInterrupt+0x3c>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	4a0a      	ldr	r2, [pc, #40]	; (80112dc <vPortSetupTimerInterrupt+0x40>)
 80112b2:	fba2 2303 	umull	r2, r3, r2, r3
 80112b6:	099b      	lsrs	r3, r3, #6
 80112b8:	4a09      	ldr	r2, [pc, #36]	; (80112e0 <vPortSetupTimerInterrupt+0x44>)
 80112ba:	3b01      	subs	r3, #1
 80112bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80112be:	4b04      	ldr	r3, [pc, #16]	; (80112d0 <vPortSetupTimerInterrupt+0x34>)
 80112c0:	2207      	movs	r2, #7
 80112c2:	601a      	str	r2, [r3, #0]
}
 80112c4:	bf00      	nop
 80112c6:	46bd      	mov	sp, r7
 80112c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop
 80112d0:	e000e010 	.word	0xe000e010
 80112d4:	e000e018 	.word	0xe000e018
 80112d8:	24000000 	.word	0x24000000
 80112dc:	10624dd3 	.word	0x10624dd3
 80112e0:	e000e014 	.word	0xe000e014

080112e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80112e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80112f4 <vPortEnableVFP+0x10>
 80112e8:	6801      	ldr	r1, [r0, #0]
 80112ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80112ee:	6001      	str	r1, [r0, #0]
 80112f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80112f2:	bf00      	nop
 80112f4:	e000ed88 	.word	0xe000ed88

080112f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80112f8:	b480      	push	{r7}
 80112fa:	b085      	sub	sp, #20
 80112fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80112fe:	f3ef 8305 	mrs	r3, IPSR
 8011302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	2b0f      	cmp	r3, #15
 8011308:	d914      	bls.n	8011334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801130a:	4a17      	ldr	r2, [pc, #92]	; (8011368 <vPortValidateInterruptPriority+0x70>)
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	4413      	add	r3, r2
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011314:	4b15      	ldr	r3, [pc, #84]	; (801136c <vPortValidateInterruptPriority+0x74>)
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	7afa      	ldrb	r2, [r7, #11]
 801131a:	429a      	cmp	r2, r3
 801131c:	d20a      	bcs.n	8011334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801131e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011322:	f383 8811 	msr	BASEPRI, r3
 8011326:	f3bf 8f6f 	isb	sy
 801132a:	f3bf 8f4f 	dsb	sy
 801132e:	607b      	str	r3, [r7, #4]
}
 8011330:	bf00      	nop
 8011332:	e7fe      	b.n	8011332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011334:	4b0e      	ldr	r3, [pc, #56]	; (8011370 <vPortValidateInterruptPriority+0x78>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801133c:	4b0d      	ldr	r3, [pc, #52]	; (8011374 <vPortValidateInterruptPriority+0x7c>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	429a      	cmp	r2, r3
 8011342:	d90a      	bls.n	801135a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011348:	f383 8811 	msr	BASEPRI, r3
 801134c:	f3bf 8f6f 	isb	sy
 8011350:	f3bf 8f4f 	dsb	sy
 8011354:	603b      	str	r3, [r7, #0]
}
 8011356:	bf00      	nop
 8011358:	e7fe      	b.n	8011358 <vPortValidateInterruptPriority+0x60>
	}
 801135a:	bf00      	nop
 801135c:	3714      	adds	r7, #20
 801135e:	46bd      	mov	sp, r7
 8011360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011364:	4770      	bx	lr
 8011366:	bf00      	nop
 8011368:	e000e3f0 	.word	0xe000e3f0
 801136c:	24001494 	.word	0x24001494
 8011370:	e000ed0c 	.word	0xe000ed0c
 8011374:	24001498 	.word	0x24001498

08011378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b08a      	sub	sp, #40	; 0x28
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011380:	2300      	movs	r3, #0
 8011382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011384:	f7fe fd94 	bl	800feb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011388:	4b5b      	ldr	r3, [pc, #364]	; (80114f8 <pvPortMalloc+0x180>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d101      	bne.n	8011394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011390:	f000 f920 	bl	80115d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011394:	4b59      	ldr	r3, [pc, #356]	; (80114fc <pvPortMalloc+0x184>)
 8011396:	681a      	ldr	r2, [r3, #0]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	4013      	ands	r3, r2
 801139c:	2b00      	cmp	r3, #0
 801139e:	f040 8093 	bne.w	80114c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d01d      	beq.n	80113e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80113a8:	2208      	movs	r2, #8
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	4413      	add	r3, r2
 80113ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f003 0307 	and.w	r3, r3, #7
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d014      	beq.n	80113e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f023 0307 	bic.w	r3, r3, #7
 80113c0:	3308      	adds	r3, #8
 80113c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f003 0307 	and.w	r3, r3, #7
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00a      	beq.n	80113e4 <pvPortMalloc+0x6c>
	__asm volatile
 80113ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d2:	f383 8811 	msr	BASEPRI, r3
 80113d6:	f3bf 8f6f 	isb	sy
 80113da:	f3bf 8f4f 	dsb	sy
 80113de:	617b      	str	r3, [r7, #20]
}
 80113e0:	bf00      	nop
 80113e2:	e7fe      	b.n	80113e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d06e      	beq.n	80114c8 <pvPortMalloc+0x150>
 80113ea:	4b45      	ldr	r3, [pc, #276]	; (8011500 <pvPortMalloc+0x188>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d869      	bhi.n	80114c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80113f4:	4b43      	ldr	r3, [pc, #268]	; (8011504 <pvPortMalloc+0x18c>)
 80113f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80113f8:	4b42      	ldr	r3, [pc, #264]	; (8011504 <pvPortMalloc+0x18c>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80113fe:	e004      	b.n	801140a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	687a      	ldr	r2, [r7, #4]
 8011410:	429a      	cmp	r2, r3
 8011412:	d903      	bls.n	801141c <pvPortMalloc+0xa4>
 8011414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d1f1      	bne.n	8011400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801141c:	4b36      	ldr	r3, [pc, #216]	; (80114f8 <pvPortMalloc+0x180>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011422:	429a      	cmp	r2, r3
 8011424:	d050      	beq.n	80114c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011426:	6a3b      	ldr	r3, [r7, #32]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	2208      	movs	r2, #8
 801142c:	4413      	add	r3, r2
 801142e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011432:	681a      	ldr	r2, [r3, #0]
 8011434:	6a3b      	ldr	r3, [r7, #32]
 8011436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801143a:	685a      	ldr	r2, [r3, #4]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	1ad2      	subs	r2, r2, r3
 8011440:	2308      	movs	r3, #8
 8011442:	005b      	lsls	r3, r3, #1
 8011444:	429a      	cmp	r2, r3
 8011446:	d91f      	bls.n	8011488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	4413      	add	r3, r2
 801144e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011450:	69bb      	ldr	r3, [r7, #24]
 8011452:	f003 0307 	and.w	r3, r3, #7
 8011456:	2b00      	cmp	r3, #0
 8011458:	d00a      	beq.n	8011470 <pvPortMalloc+0xf8>
	__asm volatile
 801145a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801145e:	f383 8811 	msr	BASEPRI, r3
 8011462:	f3bf 8f6f 	isb	sy
 8011466:	f3bf 8f4f 	dsb	sy
 801146a:	613b      	str	r3, [r7, #16]
}
 801146c:	bf00      	nop
 801146e:	e7fe      	b.n	801146e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011472:	685a      	ldr	r2, [r3, #4]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	1ad2      	subs	r2, r2, r3
 8011478:	69bb      	ldr	r3, [r7, #24]
 801147a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801147e:	687a      	ldr	r2, [r7, #4]
 8011480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011482:	69b8      	ldr	r0, [r7, #24]
 8011484:	f000 f908 	bl	8011698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011488:	4b1d      	ldr	r3, [pc, #116]	; (8011500 <pvPortMalloc+0x188>)
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	1ad3      	subs	r3, r2, r3
 8011492:	4a1b      	ldr	r2, [pc, #108]	; (8011500 <pvPortMalloc+0x188>)
 8011494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011496:	4b1a      	ldr	r3, [pc, #104]	; (8011500 <pvPortMalloc+0x188>)
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	4b1b      	ldr	r3, [pc, #108]	; (8011508 <pvPortMalloc+0x190>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d203      	bcs.n	80114aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80114a2:	4b17      	ldr	r3, [pc, #92]	; (8011500 <pvPortMalloc+0x188>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	4a18      	ldr	r2, [pc, #96]	; (8011508 <pvPortMalloc+0x190>)
 80114a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80114aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ac:	685a      	ldr	r2, [r3, #4]
 80114ae:	4b13      	ldr	r3, [pc, #76]	; (80114fc <pvPortMalloc+0x184>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	431a      	orrs	r2, r3
 80114b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80114b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ba:	2200      	movs	r2, #0
 80114bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80114be:	4b13      	ldr	r3, [pc, #76]	; (801150c <pvPortMalloc+0x194>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	3301      	adds	r3, #1
 80114c4:	4a11      	ldr	r2, [pc, #68]	; (801150c <pvPortMalloc+0x194>)
 80114c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80114c8:	f7fe fd00 	bl	800fecc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	f003 0307 	and.w	r3, r3, #7
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d00a      	beq.n	80114ec <pvPortMalloc+0x174>
	__asm volatile
 80114d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114da:	f383 8811 	msr	BASEPRI, r3
 80114de:	f3bf 8f6f 	isb	sy
 80114e2:	f3bf 8f4f 	dsb	sy
 80114e6:	60fb      	str	r3, [r7, #12]
}
 80114e8:	bf00      	nop
 80114ea:	e7fe      	b.n	80114ea <pvPortMalloc+0x172>
	return pvReturn;
 80114ec:	69fb      	ldr	r3, [r7, #28]
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3728      	adds	r7, #40	; 0x28
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}
 80114f6:	bf00      	nop
 80114f8:	240050a4 	.word	0x240050a4
 80114fc:	240050b8 	.word	0x240050b8
 8011500:	240050a8 	.word	0x240050a8
 8011504:	2400509c 	.word	0x2400509c
 8011508:	240050ac 	.word	0x240050ac
 801150c:	240050b0 	.word	0x240050b0

08011510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b086      	sub	sp, #24
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d04d      	beq.n	80115be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011522:	2308      	movs	r3, #8
 8011524:	425b      	negs	r3, r3
 8011526:	697a      	ldr	r2, [r7, #20]
 8011528:	4413      	add	r3, r2
 801152a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	685a      	ldr	r2, [r3, #4]
 8011534:	4b24      	ldr	r3, [pc, #144]	; (80115c8 <vPortFree+0xb8>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	4013      	ands	r3, r2
 801153a:	2b00      	cmp	r3, #0
 801153c:	d10a      	bne.n	8011554 <vPortFree+0x44>
	__asm volatile
 801153e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011542:	f383 8811 	msr	BASEPRI, r3
 8011546:	f3bf 8f6f 	isb	sy
 801154a:	f3bf 8f4f 	dsb	sy
 801154e:	60fb      	str	r3, [r7, #12]
}
 8011550:	bf00      	nop
 8011552:	e7fe      	b.n	8011552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d00a      	beq.n	8011572 <vPortFree+0x62>
	__asm volatile
 801155c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011560:	f383 8811 	msr	BASEPRI, r3
 8011564:	f3bf 8f6f 	isb	sy
 8011568:	f3bf 8f4f 	dsb	sy
 801156c:	60bb      	str	r3, [r7, #8]
}
 801156e:	bf00      	nop
 8011570:	e7fe      	b.n	8011570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	685a      	ldr	r2, [r3, #4]
 8011576:	4b14      	ldr	r3, [pc, #80]	; (80115c8 <vPortFree+0xb8>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	4013      	ands	r3, r2
 801157c:	2b00      	cmp	r3, #0
 801157e:	d01e      	beq.n	80115be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d11a      	bne.n	80115be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	685a      	ldr	r2, [r3, #4]
 801158c:	4b0e      	ldr	r3, [pc, #56]	; (80115c8 <vPortFree+0xb8>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	43db      	mvns	r3, r3
 8011592:	401a      	ands	r2, r3
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011598:	f7fe fc8a 	bl	800feb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	685a      	ldr	r2, [r3, #4]
 80115a0:	4b0a      	ldr	r3, [pc, #40]	; (80115cc <vPortFree+0xbc>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4413      	add	r3, r2
 80115a6:	4a09      	ldr	r2, [pc, #36]	; (80115cc <vPortFree+0xbc>)
 80115a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80115aa:	6938      	ldr	r0, [r7, #16]
 80115ac:	f000 f874 	bl	8011698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80115b0:	4b07      	ldr	r3, [pc, #28]	; (80115d0 <vPortFree+0xc0>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	3301      	adds	r3, #1
 80115b6:	4a06      	ldr	r2, [pc, #24]	; (80115d0 <vPortFree+0xc0>)
 80115b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80115ba:	f7fe fc87 	bl	800fecc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80115be:	bf00      	nop
 80115c0:	3718      	adds	r7, #24
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}
 80115c6:	bf00      	nop
 80115c8:	240050b8 	.word	0x240050b8
 80115cc:	240050a8 	.word	0x240050a8
 80115d0:	240050b4 	.word	0x240050b4

080115d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80115da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80115de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80115e0:	4b27      	ldr	r3, [pc, #156]	; (8011680 <prvHeapInit+0xac>)
 80115e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	f003 0307 	and.w	r3, r3, #7
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d00c      	beq.n	8011608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	3307      	adds	r3, #7
 80115f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	f023 0307 	bic.w	r3, r3, #7
 80115fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80115fc:	68ba      	ldr	r2, [r7, #8]
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	1ad3      	subs	r3, r2, r3
 8011602:	4a1f      	ldr	r2, [pc, #124]	; (8011680 <prvHeapInit+0xac>)
 8011604:	4413      	add	r3, r2
 8011606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801160c:	4a1d      	ldr	r2, [pc, #116]	; (8011684 <prvHeapInit+0xb0>)
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011612:	4b1c      	ldr	r3, [pc, #112]	; (8011684 <prvHeapInit+0xb0>)
 8011614:	2200      	movs	r2, #0
 8011616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	68ba      	ldr	r2, [r7, #8]
 801161c:	4413      	add	r3, r2
 801161e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011620:	2208      	movs	r2, #8
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	1a9b      	subs	r3, r3, r2
 8011626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	f023 0307 	bic.w	r3, r3, #7
 801162e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	4a15      	ldr	r2, [pc, #84]	; (8011688 <prvHeapInit+0xb4>)
 8011634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011636:	4b14      	ldr	r3, [pc, #80]	; (8011688 <prvHeapInit+0xb4>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2200      	movs	r2, #0
 801163c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801163e:	4b12      	ldr	r3, [pc, #72]	; (8011688 <prvHeapInit+0xb4>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	2200      	movs	r2, #0
 8011644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	68fa      	ldr	r2, [r7, #12]
 801164e:	1ad2      	subs	r2, r2, r3
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011654:	4b0c      	ldr	r3, [pc, #48]	; (8011688 <prvHeapInit+0xb4>)
 8011656:	681a      	ldr	r2, [r3, #0]
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	4a0a      	ldr	r2, [pc, #40]	; (801168c <prvHeapInit+0xb8>)
 8011662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	685b      	ldr	r3, [r3, #4]
 8011668:	4a09      	ldr	r2, [pc, #36]	; (8011690 <prvHeapInit+0xbc>)
 801166a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801166c:	4b09      	ldr	r3, [pc, #36]	; (8011694 <prvHeapInit+0xc0>)
 801166e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011672:	601a      	str	r2, [r3, #0]
}
 8011674:	bf00      	nop
 8011676:	3714      	adds	r7, #20
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr
 8011680:	2400149c 	.word	0x2400149c
 8011684:	2400509c 	.word	0x2400509c
 8011688:	240050a4 	.word	0x240050a4
 801168c:	240050ac 	.word	0x240050ac
 8011690:	240050a8 	.word	0x240050a8
 8011694:	240050b8 	.word	0x240050b8

08011698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011698:	b480      	push	{r7}
 801169a:	b085      	sub	sp, #20
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80116a0:	4b28      	ldr	r3, [pc, #160]	; (8011744 <prvInsertBlockIntoFreeList+0xac>)
 80116a2:	60fb      	str	r3, [r7, #12]
 80116a4:	e002      	b.n	80116ac <prvInsertBlockIntoFreeList+0x14>
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	60fb      	str	r3, [r7, #12]
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	687a      	ldr	r2, [r7, #4]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d8f7      	bhi.n	80116a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	685b      	ldr	r3, [r3, #4]
 80116be:	68ba      	ldr	r2, [r7, #8]
 80116c0:	4413      	add	r3, r2
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d108      	bne.n	80116da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	685a      	ldr	r2, [r3, #4]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	685b      	ldr	r3, [r3, #4]
 80116d0:	441a      	add	r2, r3
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	68ba      	ldr	r2, [r7, #8]
 80116e4:	441a      	add	r2, r3
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d118      	bne.n	8011720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681a      	ldr	r2, [r3, #0]
 80116f2:	4b15      	ldr	r3, [pc, #84]	; (8011748 <prvInsertBlockIntoFreeList+0xb0>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d00d      	beq.n	8011716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	685a      	ldr	r2, [r3, #4]
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	441a      	add	r2, r3
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	601a      	str	r2, [r3, #0]
 8011714:	e008      	b.n	8011728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011716:	4b0c      	ldr	r3, [pc, #48]	; (8011748 <prvInsertBlockIntoFreeList+0xb0>)
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	601a      	str	r2, [r3, #0]
 801171e:	e003      	b.n	8011728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681a      	ldr	r2, [r3, #0]
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011728:	68fa      	ldr	r2, [r7, #12]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	429a      	cmp	r2, r3
 801172e:	d002      	beq.n	8011736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011736:	bf00      	nop
 8011738:	3714      	adds	r7, #20
 801173a:	46bd      	mov	sp, r7
 801173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011740:	4770      	bx	lr
 8011742:	bf00      	nop
 8011744:	2400509c 	.word	0x2400509c
 8011748:	240050a4 	.word	0x240050a4

0801174c <__libc_init_array>:
 801174c:	b570      	push	{r4, r5, r6, lr}
 801174e:	4d0d      	ldr	r5, [pc, #52]	; (8011784 <__libc_init_array+0x38>)
 8011750:	4c0d      	ldr	r4, [pc, #52]	; (8011788 <__libc_init_array+0x3c>)
 8011752:	1b64      	subs	r4, r4, r5
 8011754:	10a4      	asrs	r4, r4, #2
 8011756:	2600      	movs	r6, #0
 8011758:	42a6      	cmp	r6, r4
 801175a:	d109      	bne.n	8011770 <__libc_init_array+0x24>
 801175c:	4d0b      	ldr	r5, [pc, #44]	; (801178c <__libc_init_array+0x40>)
 801175e:	4c0c      	ldr	r4, [pc, #48]	; (8011790 <__libc_init_array+0x44>)
 8011760:	f000 f82e 	bl	80117c0 <_init>
 8011764:	1b64      	subs	r4, r4, r5
 8011766:	10a4      	asrs	r4, r4, #2
 8011768:	2600      	movs	r6, #0
 801176a:	42a6      	cmp	r6, r4
 801176c:	d105      	bne.n	801177a <__libc_init_array+0x2e>
 801176e:	bd70      	pop	{r4, r5, r6, pc}
 8011770:	f855 3b04 	ldr.w	r3, [r5], #4
 8011774:	4798      	blx	r3
 8011776:	3601      	adds	r6, #1
 8011778:	e7ee      	b.n	8011758 <__libc_init_array+0xc>
 801177a:	f855 3b04 	ldr.w	r3, [r5], #4
 801177e:	4798      	blx	r3
 8011780:	3601      	adds	r6, #1
 8011782:	e7f2      	b.n	801176a <__libc_init_array+0x1e>
 8011784:	08011a28 	.word	0x08011a28
 8011788:	08011a28 	.word	0x08011a28
 801178c:	08011a28 	.word	0x08011a28
 8011790:	08011a2c 	.word	0x08011a2c

08011794 <memcpy>:
 8011794:	440a      	add	r2, r1
 8011796:	4291      	cmp	r1, r2
 8011798:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801179c:	d100      	bne.n	80117a0 <memcpy+0xc>
 801179e:	4770      	bx	lr
 80117a0:	b510      	push	{r4, lr}
 80117a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80117aa:	4291      	cmp	r1, r2
 80117ac:	d1f9      	bne.n	80117a2 <memcpy+0xe>
 80117ae:	bd10      	pop	{r4, pc}

080117b0 <memset>:
 80117b0:	4402      	add	r2, r0
 80117b2:	4603      	mov	r3, r0
 80117b4:	4293      	cmp	r3, r2
 80117b6:	d100      	bne.n	80117ba <memset+0xa>
 80117b8:	4770      	bx	lr
 80117ba:	f803 1b01 	strb.w	r1, [r3], #1
 80117be:	e7f9      	b.n	80117b4 <memset+0x4>

080117c0 <_init>:
 80117c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117c2:	bf00      	nop
 80117c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117c6:	bc08      	pop	{r3}
 80117c8:	469e      	mov	lr, r3
 80117ca:	4770      	bx	lr

080117cc <_fini>:
 80117cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ce:	bf00      	nop
 80117d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117d2:	bc08      	pop	{r3}
 80117d4:	469e      	mov	lr, r3
 80117d6:	4770      	bx	lr
