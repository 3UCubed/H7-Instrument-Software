
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000171a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08017440  08017440  00027440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017874  08017874  00027874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801787c  0801787c  0002787c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017880  08017880  00027880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017884  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005950  24000120  0801798c  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a70  0801798c  00035a70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033ad5  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005705  00000000  00000000  00063c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002778  00000000  00000000  00069310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002560  00000000  00000000  0006ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000323a5  00000000  00000000  000ae0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194c14  00000000  00000000  000e0493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002750a7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0c8  00000000  00000000  002750f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017428 	.word	0x08017428

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08017428 	.word	0x08017428

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c40 	.word	0x24000c40

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fdb8 	bl	801318c <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fdad 	bl	801318c <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fda2 	bl	801318c <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fd97 	bl	801318c <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 fb31 	bl	8016cc8 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c5c 	.word	0x24000c5c
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	080174ac 	.word	0x080174ac

08000688 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fdef 	bl	8010278 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 8443 	bhi.w	8000f2e <HAL_UART_RxCpltCallback+0x8a6>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a8b 	.word	0x08000a8b
 80006b8:	08000b4d 	.word	0x08000b4d
 80006bc:	08000b83 	.word	0x08000b83
 80006c0:	08000bb7 	.word	0x08000bb7
 80006c4:	08000bed 	.word	0x08000bed
 80006c8:	08000c25 	.word	0x08000c25
 80006cc:	08000c5d 	.word	0x08000c5d
 80006d0:	08000c93 	.word	0x08000c93
 80006d4:	08000cc5 	.word	0x08000cc5
 80006d8:	08000cf1 	.word	0x08000cf1
 80006dc:	08000d23 	.word	0x08000d23
 80006e0:	08000d55 	.word	0x08000d55
 80006e4:	08000e61 	.word	0x08000e61
 80006e8:	08000ec3 	.word	0x08000ec3
 80006ec:	08000eeb 	.word	0x08000eeb
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000b31 	.word	0x08000b31
 80006fc:	08000b69 	.word	0x08000b69
 8000700:	08000b9d 	.word	0x08000b9d
 8000704:	08000bd1 	.word	0x08000bd1
 8000708:	08000c09 	.word	0x08000c09
 800070c:	08000c41 	.word	0x08000c41
 8000710:	08000c79 	.word	0x08000c79
 8000714:	08000cad 	.word	0x08000cad
 8000718:	08000cd5 	.word	0x08000cd5
 800071c:	08000d07 	.word	0x08000d07
 8000720:	08000d39 	.word	0x08000d39
 8000724:	08000e25 	.word	0x08000e25
 8000728:	08000e9b 	.word	0x08000e9b
 800072c:	08000f2f 	.word	0x08000f2f
 8000730:	08000f2f 	.word	0x08000f2f
 8000734:	08000f2f 	.word	0x08000f2f
 8000738:	08000f2f 	.word	0x08000f2f
 800073c:	08000f2f 	.word	0x08000f2f
 8000740:	08000f2f 	.word	0x08000f2f
 8000744:	08000f2f 	.word	0x08000f2f
 8000748:	08000f2f 	.word	0x08000f2f
 800074c:	08000f2f 	.word	0x08000f2f
 8000750:	08000f2f 	.word	0x08000f2f
 8000754:	08000f2f 	.word	0x08000f2f
 8000758:	08000f2f 	.word	0x08000f2f
 800075c:	08000f2f 	.word	0x08000f2f
 8000760:	08000f2f 	.word	0x08000f2f
 8000764:	08000f2f 	.word	0x08000f2f
 8000768:	08000f2f 	.word	0x08000f2f
 800076c:	08000f2f 	.word	0x08000f2f
 8000770:	08000f2f 	.word	0x08000f2f
 8000774:	08000f2f 	.word	0x08000f2f
 8000778:	08000f2f 	.word	0x08000f2f
 800077c:	08000f2f 	.word	0x08000f2f
 8000780:	08000f2f 	.word	0x08000f2f
 8000784:	08000f2f 	.word	0x08000f2f
 8000788:	08000f2f 	.word	0x08000f2f
 800078c:	08000f2f 	.word	0x08000f2f
 8000790:	08000f2f 	.word	0x08000f2f
 8000794:	08000f2f 	.word	0x08000f2f
 8000798:	08000f2f 	.word	0x08000f2f
 800079c:	08000f2f 	.word	0x08000f2f
 80007a0:	08000f2f 	.word	0x08000f2f
 80007a4:	08000f2f 	.word	0x08000f2f
 80007a8:	08000f2f 	.word	0x08000f2f
 80007ac:	08000f2f 	.word	0x08000f2f
 80007b0:	08000f2f 	.word	0x08000f2f
 80007b4:	08000f2f 	.word	0x08000f2f
 80007b8:	08000f2f 	.word	0x08000f2f
 80007bc:	08000f2f 	.word	0x08000f2f
 80007c0:	08000f2f 	.word	0x08000f2f
 80007c4:	08000f2f 	.word	0x08000f2f
 80007c8:	08000f2f 	.word	0x08000f2f
 80007cc:	08000f2f 	.word	0x08000f2f
 80007d0:	08000f2f 	.word	0x08000f2f
 80007d4:	08000f2f 	.word	0x08000f2f
 80007d8:	08000f2f 	.word	0x08000f2f
 80007dc:	08000f2f 	.word	0x08000f2f
 80007e0:	08000f2f 	.word	0x08000f2f
 80007e4:	08000f2f 	.word	0x08000f2f
 80007e8:	08000f2f 	.word	0x08000f2f
 80007ec:	08000f2f 	.word	0x08000f2f
 80007f0:	08000f2f 	.word	0x08000f2f
 80007f4:	08000f2f 	.word	0x08000f2f
 80007f8:	08000f2f 	.word	0x08000f2f
 80007fc:	08000f2f 	.word	0x08000f2f
 8000800:	08000f2f 	.word	0x08000f2f
 8000804:	08000f2f 	.word	0x08000f2f
 8000808:	08000f2f 	.word	0x08000f2f
 800080c:	08000f2f 	.word	0x08000f2f
 8000810:	08000f2f 	.word	0x08000f2f
 8000814:	08000f2f 	.word	0x08000f2f
 8000818:	08000f2f 	.word	0x08000f2f
 800081c:	08000f2f 	.word	0x08000f2f
 8000820:	08000f2f 	.word	0x08000f2f
 8000824:	08000f2f 	.word	0x08000f2f
 8000828:	08000f2f 	.word	0x08000f2f
 800082c:	08000f2f 	.word	0x08000f2f
 8000830:	08000f2f 	.word	0x08000f2f
 8000834:	08000f2f 	.word	0x08000f2f
 8000838:	08000f2f 	.word	0x08000f2f
 800083c:	08000f2f 	.word	0x08000f2f
 8000840:	08000f2f 	.word	0x08000f2f
 8000844:	08000f2f 	.word	0x08000f2f
 8000848:	08000f2f 	.word	0x08000f2f
 800084c:	08000f2f 	.word	0x08000f2f
 8000850:	08000f2f 	.word	0x08000f2f
 8000854:	08000f2f 	.word	0x08000f2f
 8000858:	08000f2f 	.word	0x08000f2f
 800085c:	08000f2f 	.word	0x08000f2f
 8000860:	08000f2f 	.word	0x08000f2f
 8000864:	08000f2f 	.word	0x08000f2f
 8000868:	08000f2f 	.word	0x08000f2f
 800086c:	08000f2f 	.word	0x08000f2f
 8000870:	08000f2f 	.word	0x08000f2f
 8000874:	08000f2f 	.word	0x08000f2f
 8000878:	08000f2f 	.word	0x08000f2f
 800087c:	08000f2f 	.word	0x08000f2f
 8000880:	08000f2f 	.word	0x08000f2f
 8000884:	08000f2f 	.word	0x08000f2f
 8000888:	08000f2f 	.word	0x08000f2f
 800088c:	08000f2f 	.word	0x08000f2f
 8000890:	08000f2f 	.word	0x08000f2f
 8000894:	08000f2f 	.word	0x08000f2f
 8000898:	08000f2f 	.word	0x08000f2f
 800089c:	08000f2f 	.word	0x08000f2f
 80008a0:	08000f2f 	.word	0x08000f2f
 80008a4:	08000f2f 	.word	0x08000f2f
 80008a8:	08000f2f 	.word	0x08000f2f
 80008ac:	08000f2f 	.word	0x08000f2f
 80008b0:	08000f2f 	.word	0x08000f2f
 80008b4:	08000f2f 	.word	0x08000f2f
 80008b8:	08000f2f 	.word	0x08000f2f
 80008bc:	08000f2f 	.word	0x08000f2f
 80008c0:	08000f2f 	.word	0x08000f2f
 80008c4:	08000f2f 	.word	0x08000f2f
 80008c8:	08000f2f 	.word	0x08000f2f
 80008cc:	08000f2f 	.word	0x08000f2f
 80008d0:	08000f2f 	.word	0x08000f2f
 80008d4:	08000f2f 	.word	0x08000f2f
 80008d8:	08000f2f 	.word	0x08000f2f
 80008dc:	08000f2f 	.word	0x08000f2f
 80008e0:	08000f2f 	.word	0x08000f2f
 80008e4:	08000f2f 	.word	0x08000f2f
 80008e8:	08000f2f 	.word	0x08000f2f
 80008ec:	08000f2f 	.word	0x08000f2f
 80008f0:	08000f2f 	.word	0x08000f2f
 80008f4:	08000f2f 	.word	0x08000f2f
 80008f8:	08000f2f 	.word	0x08000f2f
 80008fc:	08000f2f 	.word	0x08000f2f
 8000900:	08000f2f 	.word	0x08000f2f
 8000904:	08000f2f 	.word	0x08000f2f
 8000908:	08000f2f 	.word	0x08000f2f
 800090c:	08000f2f 	.word	0x08000f2f
 8000910:	08000f2f 	.word	0x08000f2f
 8000914:	08000f2f 	.word	0x08000f2f
 8000918:	08000f2f 	.word	0x08000f2f
 800091c:	08000f2f 	.word	0x08000f2f
 8000920:	08000f2f 	.word	0x08000f2f
 8000924:	08000f2f 	.word	0x08000f2f
 8000928:	08000f2f 	.word	0x08000f2f
 800092c:	08000f2f 	.word	0x08000f2f
 8000930:	08000f2f 	.word	0x08000f2f
 8000934:	08000f2f 	.word	0x08000f2f
 8000938:	08000f2f 	.word	0x08000f2f
 800093c:	08000f2f 	.word	0x08000f2f
 8000940:	08000f2f 	.word	0x08000f2f
 8000944:	08000f2f 	.word	0x08000f2f
 8000948:	08000f2f 	.word	0x08000f2f
 800094c:	08000f2f 	.word	0x08000f2f
 8000950:	08000f2f 	.word	0x08000f2f
 8000954:	08000f2f 	.word	0x08000f2f
 8000958:	08000f2f 	.word	0x08000f2f
 800095c:	08000f2f 	.word	0x08000f2f
 8000960:	08000f2f 	.word	0x08000f2f
 8000964:	08000f2f 	.word	0x08000f2f
 8000968:	08000f2f 	.word	0x08000f2f
 800096c:	08000f23 	.word	0x08000f23
 8000970:	08000f2f 	.word	0x08000f2f
 8000974:	08000f2f 	.word	0x08000f2f
 8000978:	08000f2f 	.word	0x08000f2f
 800097c:	08000f2f 	.word	0x08000f2f
 8000980:	08000f2f 	.word	0x08000f2f
 8000984:	08000f2f 	.word	0x08000f2f
 8000988:	08000f2f 	.word	0x08000f2f
 800098c:	08000f2f 	.word	0x08000f2f
 8000990:	08000f2f 	.word	0x08000f2f
 8000994:	08000f2f 	.word	0x08000f2f
 8000998:	08000f2f 	.word	0x08000f2f
 800099c:	08000f2f 	.word	0x08000f2f
 80009a0:	08000f2f 	.word	0x08000f2f
 80009a4:	08000f2f 	.word	0x08000f2f
 80009a8:	08000f2f 	.word	0x08000f2f
 80009ac:	08000f29 	.word	0x08000f29
 80009b0:	08000f2f 	.word	0x08000f2f
 80009b4:	08000f2f 	.word	0x08000f2f
 80009b8:	08000f2f 	.word	0x08000f2f
 80009bc:	08000f2f 	.word	0x08000f2f
 80009c0:	08000f2f 	.word	0x08000f2f
 80009c4:	08000f2f 	.word	0x08000f2f
 80009c8:	08000f2f 	.word	0x08000f2f
 80009cc:	08000f2f 	.word	0x08000f2f
 80009d0:	08000f2f 	.word	0x08000f2f
 80009d4:	08000f2f 	.word	0x08000f2f
 80009d8:	08000f2f 	.word	0x08000f2f
 80009dc:	08000f2f 	.word	0x08000f2f
 80009e0:	08000f2f 	.word	0x08000f2f
 80009e4:	08000f2f 	.word	0x08000f2f
 80009e8:	08000f2f 	.word	0x08000f2f
 80009ec:	08000f2f 	.word	0x08000f2f
 80009f0:	08000f11 	.word	0x08000f11
 80009f4:	08000f2f 	.word	0x08000f2f
 80009f8:	08000f2f 	.word	0x08000f2f
 80009fc:	08000f2f 	.word	0x08000f2f
 8000a00:	08000f2f 	.word	0x08000f2f
 8000a04:	08000f2f 	.word	0x08000f2f
 8000a08:	08000f2f 	.word	0x08000f2f
 8000a0c:	08000f2f 	.word	0x08000f2f
 8000a10:	08000f2f 	.word	0x08000f2f
 8000a14:	08000f2f 	.word	0x08000f2f
 8000a18:	08000f2f 	.word	0x08000f2f
 8000a1c:	08000f2f 	.word	0x08000f2f
 8000a20:	08000f2f 	.word	0x08000f2f
 8000a24:	08000f2f 	.word	0x08000f2f
 8000a28:	08000f2f 	.word	0x08000f2f
 8000a2c:	08000f2f 	.word	0x08000f2f
 8000a30:	08000eff 	.word	0x08000eff
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f016 f947 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fb35 	bl	80090b0 <HAL_GPIO_WritePin>
		break;
 8000a46:	e27d      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f016 f93d 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fb2b 	bl	80090b0 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e273      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
 8000a5c:	24000c60 	.word	0x24000c60
 8000a60:	24000638 	.word	0x24000638
 8000a64:	080174c4 	.word	0x080174c4
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	080174cc 	.word	0x080174cc
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48be      	ldr	r0, [pc, #760]	; (8000d6c <HAL_UART_RxCpltCallback+0x6e4>)
 8000a72:	f016 f929 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bbe      	ldr	r3, [pc, #760]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fb17 	bl	80090b0 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a82:	4bbc      	ldr	r3, [pc, #752]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		break;
 8000a88:	e25c      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a8a:	48bb      	ldr	r0, [pc, #748]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a8c:	f016 f91c 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a90:	4bb7      	ldr	r3, [pc, #732]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a92:	2120      	movs	r1, #32
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fb0a 	bl	80090b0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a9c:	4bb4      	ldr	r3, [pc, #720]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fb04 	bl	80090b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa8:	4bb4      	ldr	r3, [pc, #720]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 fafd 	bl	80090b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab6:	4bb1      	ldr	r3, [pc, #708]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 faf6 	bl	80090b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ac4:	4bad      	ldr	r3, [pc, #692]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	2200      	movs	r2, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 faef 	bl	80090b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ad2:	4baa      	ldr	r3, [pc, #680]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 fae9 	bl	80090b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ade:	4ba7      	ldr	r3, [pc, #668]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fae3 	bl	80090b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aea:	4ba4      	ldr	r3, [pc, #656]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fadc 	bl	80090b0 <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000af8:	4b9e      	ldr	r3, [pc, #632]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000afe:	4ba0      	ldr	r3, [pc, #640]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000b04:	4b9f      	ldr	r3, [pc, #636]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000b0a:	4b9f      	ldr	r3, [pc, #636]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b10:	4b9e      	ldr	r3, [pc, #632]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b16:	4b9e      	ldr	r3, [pc, #632]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b1c:	4b9d      	ldr	r3, [pc, #628]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b22:	4b9d      	ldr	r3, [pc, #628]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b28:	4b9c      	ldr	r3, [pc, #624]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

		break;
 8000b2e:	e209      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b30:	489b      	ldr	r0, [pc, #620]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000b32:	f016 f8c9 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b36:	4b91      	ldr	r3, [pc, #580]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 fab6 	bl	80090b0 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b44:	4b8e      	ldr	r3, [pc, #568]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e1fb      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b4c:	4895      	ldr	r0, [pc, #596]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000b4e:	f016 f8bb 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b52:	4b8a      	ldr	r3, [pc, #552]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 faa8 	bl	80090b0 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b60:	4b87      	ldr	r3, [pc, #540]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		break;
 8000b66:	e1ed      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b68:	488f      	ldr	r0, [pc, #572]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000b6a:	f016 f8ad 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b6e:	4b83      	ldr	r3, [pc, #524]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	2201      	movs	r2, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 fa9b 	bl	80090b0 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b7a:	4b82      	ldr	r3, [pc, #520]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		break;
 8000b80:	e1e0      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b82:	488a      	ldr	r0, [pc, #552]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000b84:	f016 f8a0 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b88:	4b7c      	ldr	r3, [pc, #496]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fa8e 	bl	80090b0 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b94:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e1d3      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b9c:	4884      	ldr	r0, [pc, #528]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000b9e:	f016 f893 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba2:	4b76      	ldr	r3, [pc, #472]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fa81 	bl	80090b0 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000bae:	4b76      	ldr	r3, [pc, #472]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		break;
 8000bb4:	e1c6      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bb6:	487f      	ldr	r0, [pc, #508]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000bb8:	f016 f886 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bbc:	4b6f      	ldr	r3, [pc, #444]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fa74 	bl	80090b0 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bc8:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e1b9      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd0:	4879      	ldr	r0, [pc, #484]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000bd2:	f016 f879 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bd6:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 fa66 	bl	80090b0 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000be4:	4b69      	ldr	r3, [pc, #420]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e1ab      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bec:	4873      	ldr	r0, [pc, #460]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000bee:	f016 f86b 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf2:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 fa58 	bl	80090b0 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000c00:	4b62      	ldr	r3, [pc, #392]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e19d      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c08:	486d      	ldr	r0, [pc, #436]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000c0a:	f016 f85d 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0e:	4b5b      	ldr	r3, [pc, #364]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	2201      	movs	r2, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 fa4a 	bl	80090b0 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c1c:	4b5c      	ldr	r3, [pc, #368]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e18f      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c24:	4867      	ldr	r0, [pc, #412]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c26:	f016 f84f 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c2a:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	2200      	movs	r2, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 fa3c 	bl	80090b0 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c38:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e181      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c40:	4861      	ldr	r0, [pc, #388]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000c42:	f016 f841 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c46:	4b4d      	ldr	r3, [pc, #308]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 fa2e 	bl	80090b0 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c54:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e173      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c5c:	485b      	ldr	r0, [pc, #364]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c5e:	f016 f833 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c62:	4b46      	ldr	r3, [pc, #280]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 fa20 	bl	80090b0 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c70:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]

		break;
 8000c76:	e165      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c78:	4855      	ldr	r0, [pc, #340]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c7a:	f016 f825 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c7e:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	2201      	movs	r2, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 fa13 	bl	80090b0 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c8a:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
		break;
 8000c90:	e158      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c92:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c94:	f016 f818 	bl	8016cc8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c98:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f008 fa06 	bl	80090b0 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e14b      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000cac:	484a      	ldr	r0, [pc, #296]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cae:	f016 f80b 	bl	8016cc8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	4a48      	ldr	r2, [pc, #288]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4848      	ldr	r0, [pc, #288]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cbe:	f004 fe5b 	bl	8005978 <HAL_DAC_Start_DMA>
		break;
 8000cc2:	e13f      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cc4:	4847      	ldr	r0, [pc, #284]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cc6:	f015 ffff 	bl	8016cc8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4844      	ldr	r0, [pc, #272]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cce:	f004 ff13 	bl	8005af8 <HAL_DAC_Stop_DMA>
		break;
 8000cd2:	e137      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cd4:	4844      	ldr	r0, [pc, #272]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cd6:	f015 fff7 	bl	8016cc8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cda:	210c      	movs	r1, #12
 8000cdc:	4843      	ldr	r0, [pc, #268]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cde:	f00d fdeb 	bl	800e8b8 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000ce2:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000ce8:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	801a      	strh	r2, [r3, #0]
		break;
 8000cee:	e129      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cf0:	4841      	ldr	r0, [pc, #260]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000cf2:	f015 ffe9 	bl	8016cc8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000cf6:	210c      	movs	r1, #12
 8000cf8:	483c      	ldr	r0, [pc, #240]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cfa:	f00d ff37 	bl	800eb6c <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
		break;
 8000d04:	e11e      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d06:	483d      	ldr	r0, [pc, #244]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d08:	f015 ffde 	bl	8016cc8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	483c      	ldr	r0, [pc, #240]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d10:	f00d fdd2 	bl	800e8b8 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <HAL_UART_RxCpltCallback+0x780>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	801a      	strh	r2, [r3, #0]
		break;
 8000d20:	e110      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d22:	483a      	ldr	r0, [pc, #232]	; (8000e0c <HAL_UART_RxCpltCallback+0x784>)
 8000d24:	f015 ffd0 	bl	8016cc8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4835      	ldr	r0, [pc, #212]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d2c:	f00d ff1e 	bl	800eb6c <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d30:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
		break;
 8000d36:	e105      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d38:	4835      	ldr	r0, [pc, #212]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d3a:	f015 ffc5 	bl	8016cc8 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4834      	ldr	r0, [pc, #208]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d42:	f00d fdb9 	bl	800e8b8 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <HAL_UART_RxCpltCallback+0x794>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	801a      	strh	r2, [r3, #0]
		break;
 8000d52:	e0f7      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000d54:	4832      	ldr	r0, [pc, #200]	; (8000e20 <HAL_UART_RxCpltCallback+0x798>)
 8000d56:	f015 ffb7 	bl	8016cc8 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	482d      	ldr	r0, [pc, #180]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d5e:	f00d ff05 	bl	800eb6c <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
		break;
 8000d68:	e0ec      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
 8000d6a:	bf00      	nop
 8000d6c:	080174d8 	.word	0x080174d8
 8000d70:	58020400 	.word	0x58020400
 8000d74:	24000c1c 	.word	0x24000c1c
 8000d78:	080174e4 	.word	0x080174e4
 8000d7c:	58020800 	.word	0x58020800
 8000d80:	24000c1d 	.word	0x24000c1d
 8000d84:	24000c1e 	.word	0x24000c1e
 8000d88:	24000c1f 	.word	0x24000c1f
 8000d8c:	24000c20 	.word	0x24000c20
 8000d90:	24000c21 	.word	0x24000c21
 8000d94:	24000c22 	.word	0x24000c22
 8000d98:	24000c23 	.word	0x24000c23
 8000d9c:	24000c24 	.word	0x24000c24
 8000da0:	080174f0 	.word	0x080174f0
 8000da4:	080174fc 	.word	0x080174fc
 8000da8:	0801750c 	.word	0x0801750c
 8000dac:	08017518 	.word	0x08017518
 8000db0:	08017524 	.word	0x08017524
 8000db4:	08017530 	.word	0x08017530
 8000db8:	08017540 	.word	0x08017540
 8000dbc:	0801754c 	.word	0x0801754c
 8000dc0:	08017558 	.word	0x08017558
 8000dc4:	08017564 	.word	0x08017564
 8000dc8:	08017570 	.word	0x08017570
 8000dcc:	08017580 	.word	0x08017580
 8000dd0:	08017590 	.word	0x08017590
 8000dd4:	0801759c 	.word	0x0801759c
 8000dd8:	080175ac 	.word	0x080175ac
 8000ddc:	24000010 	.word	0x24000010
 8000de0:	240002f4 	.word	0x240002f4
 8000de4:	080175bc 	.word	0x080175bc
 8000de8:	080175cc 	.word	0x080175cc
 8000dec:	24000554 	.word	0x24000554
 8000df0:	24000c57 	.word	0x24000c57
 8000df4:	24000c52 	.word	0x24000c52
 8000df8:	080175d4 	.word	0x080175d4
 8000dfc:	080175e0 	.word	0x080175e0
 8000e00:	24000508 	.word	0x24000508
 8000e04:	24000c56 	.word	0x24000c56
 8000e08:	24000c50 	.word	0x24000c50
 8000e0c:	080175e8 	.word	0x080175e8
 8000e10:	080175f0 	.word	0x080175f0
 8000e14:	240005a0 	.word	0x240005a0
 8000e18:	24000c58 	.word	0x24000c58
 8000e1c:	24000c54 	.word	0x24000c54
 8000e20:	080175f8 	.word	0x080175f8
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e24:	4849      	ldr	r0, [pc, #292]	; (8000f4c <HAL_UART_RxCpltCallback+0x8c4>)
 8000e26:	f015 ff4f 	bl	8016cc8 <puts>
		if (step < 17) {
 8000e2a:	4b49      	ldr	r3, [pc, #292]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b10      	cmp	r3, #16
 8000e30:	f200 8081 	bhi.w	8000f36 <HAL_UART_RxCpltCallback+0x8ae>
			step += 2;
 8000e34:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e3e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e40:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4841      	ldr	r0, [pc, #260]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e52:	f004 fef4 	bl	8005c3e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e56:	2100      	movs	r1, #0
 8000e58:	483f      	ldr	r0, [pc, #252]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e5a:	f004 fd35 	bl	80058c8 <HAL_DAC_Start>
		}
		break;
 8000e5e:	e06a      	b.n	8000f36 <HAL_UART_RxCpltCallback+0x8ae>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e60:	483e      	ldr	r0, [pc, #248]	; (8000f5c <HAL_UART_RxCpltCallback+0x8d4>)
 8000e62:	f015 ff31 	bl	8016cc8 <puts>
		if (step > 3) {
 8000e66:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d965      	bls.n	8000f3a <HAL_UART_RxCpltCallback+0x8b2>
			step -= 2;
 8000e6e:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	3b02      	subs	r3, #2
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e78:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e7a:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <HAL_UART_RxCpltCallback+0x8c8>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <HAL_UART_RxCpltCallback+0x8cc>)
 8000e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4833      	ldr	r0, [pc, #204]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e8c:	f004 fed7 	bl	8005c3e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e90:	2100      	movs	r1, #0
 8000e92:	4831      	ldr	r0, [pc, #196]	; (8000f58 <HAL_UART_RxCpltCallback+0x8d0>)
 8000e94:	f004 fd18 	bl	80058c8 <HAL_DAC_Start>
		}
		break;
 8000e98:	e04f      	b.n	8000f3a <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000e9a:	4831      	ldr	r0, [pc, #196]	; (8000f60 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e9c:	f015 ff14 	bl	8016cc8 <puts>
		if (cadence <= 50000) {
 8000ea0:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d848      	bhi.n	8000f3e <HAL_UART_RxCpltCallback+0x8b6>
			cadence *= 2;
 8000eac:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4a2c      	ldr	r2, [pc, #176]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000eb4:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000eb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eba:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ec0:	e03d      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x8b6>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ec2:	4829      	ldr	r0, [pc, #164]	; (8000f68 <HAL_UART_RxCpltCallback+0x8e0>)
 8000ec4:	f015 ff00 	bl	8016cc8 <puts>
		if (cadence >= 6250) {
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d936      	bls.n	8000f42 <HAL_UART_RxCpltCallback+0x8ba>
			cadence /= 2;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	085b      	lsrs	r3, r3, #1
 8000eda:	4a22      	ldr	r2, [pc, #136]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000edc:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <HAL_UART_RxCpltCallback+0x8dc>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ee8:	e02b      	b.n	8000f42 <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000eea:	4820      	ldr	r0, [pc, #128]	; (8000f6c <HAL_UART_RxCpltCallback+0x8e4>)
 8000eec:	f015 feec 	bl	8016cc8 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <HAL_UART_RxCpltCallback+0x8e8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2116      	movs	r1, #22
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f012 f948 	bl	801318c <osEventFlagsSet>
		break;
 8000efc:	e022      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000efe:	481d      	ldr	r0, [pc, #116]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000f00:	f015 fee2 	bl	8016cc8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_UART_RxCpltCallback+0x8f0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f013 ff43 	bl	8014d94 <xTaskResumeFromISR>
		break;
 8000f0e:	e019      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f10:	481a      	ldr	r0, [pc, #104]	; (8000f7c <HAL_UART_RxCpltCallback+0x8f4>)
 8000f12:	f015 fed9 	bl	8016cc8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f013 ff3a 	bl	8014d94 <xTaskResumeFromISR>
		break;
 8000f20:	e010      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0xAF: {
		sync();
 8000f22:	f001 f9a9 	bl	8002278 <sync>
		break;
 8000f26:	e00d      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	case 0xBF: {
		enter_flight_mode();
 8000f28:	f001 f8e8 	bl	80020fc <enter_flight_mode>
		break;
 8000f2c:	e00a      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
	}
	default: {
		printf("Unknown Command\n");
 8000f2e:	4815      	ldr	r0, [pc, #84]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000f30:	f015 feca 	bl	8016cc8 <puts>
		break;
 8000f34:	e006      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
		break;
 8000f36:	bf00      	nop
 8000f38:	e004      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
		break;
 8000f3a:	bf00      	nop
 8000f3c:	e002      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
		break;
 8000f3e:	bf00      	nop
 8000f40:	e000      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8bc>
		break;
 8000f42:	bf00      	nop
	}
	}
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	08017600 	.word	0x08017600
 8000f50:	2400000c 	.word	0x2400000c
 8000f54:	24000010 	.word	0x24000010
 8000f58:	240002f4 	.word	0x240002f4
 8000f5c:	08017608 	.word	0x08017608
 8000f60:	08017614 	.word	0x08017614
 8000f64:	24000008 	.word	0x24000008
 8000f68:	08017620 	.word	0x08017620
 8000f6c:	0801762c 	.word	0x0801762c
 8000f70:	24000c5c 	.word	0x24000c5c
 8000f74:	0801763c 	.word	0x0801763c
 8000f78:	24000750 	.word	0x24000750
 8000f7c:	08017648 	.word	0x08017648
 8000f80:	240009b0 	.word	0x240009b0
 8000f84:	08017654 	.word	0x08017654

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f002 ff08 	bl	8003da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f8ac 	bl	80010ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f94:	f000 f92a 	bl	80011ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f000 feee 	bl	8001d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f9c:	f000 feb4 	bl	8001d08 <MX_DMA_Init>
  MX_TIM3_Init();
 8000fa0:	f000 fdac 	bl	8001afc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fa4:	f000 fe48 	bl	8001c38 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fa8:	f000 fb36 	bl	8001618 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fac:	f000 fc2c 	bl	8001808 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000fb0:	f000 fd2e 	bl	8001a10 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fb4:	f000 fc80 	bl	80018b8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000fb8:	f000 fa6a 	bl	8001490 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000fbc:	f000 f946 	bl	800124c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000fc0:	f000 faf8 	bl	80015b4 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000fc4:	f000 fbc8 	bl	8001758 <MX_SPI1_Init>
  MX_RTC_Init();
 8000fc8:	f000 fb68 	bl	800169c <MX_RTC_Init>
  MX_TIM4_Init();
 8000fcc:	f000 fde6 	bl	8001b9c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd0:	f011 ff64 	bl	8012e9c <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	2080      	movs	r0, #128	; 0x80
 8000fda:	f012 f9d4 	bl	8013386 <osMessageQueueNew>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <main+0xf8>)
 8000fe2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000fe4:	4a27      	ldr	r2, [pc, #156]	; (8001084 <main+0xfc>)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4827      	ldr	r0, [pc, #156]	; (8001088 <main+0x100>)
 8000fea:	f011 ffa1 	bl	8012f30 <osThreadNew>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <main+0x104>)
 8000ff2:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ff4:	4a26      	ldr	r2, [pc, #152]	; (8001090 <main+0x108>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4826      	ldr	r0, [pc, #152]	; (8001094 <main+0x10c>)
 8000ffa:	f011 ff99 	bl	8012f30 <osThreadNew>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a25      	ldr	r2, [pc, #148]	; (8001098 <main+0x110>)
 8001002:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8001004:	4a25      	ldr	r2, [pc, #148]	; (800109c <main+0x114>)
 8001006:	2100      	movs	r1, #0
 8001008:	4825      	ldr	r0, [pc, #148]	; (80010a0 <main+0x118>)
 800100a:	f011 ff91 	bl	8012f30 <osThreadNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <main+0x11c>)
 8001012:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8001014:	4a24      	ldr	r2, [pc, #144]	; (80010a8 <main+0x120>)
 8001016:	2100      	movs	r1, #0
 8001018:	4824      	ldr	r0, [pc, #144]	; (80010ac <main+0x124>)
 800101a:	f011 ff89 	bl	8012f30 <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <main+0x128>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8001024:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <main+0x12c>)
 8001026:	2100      	movs	r1, #0
 8001028:	4823      	ldr	r0, [pc, #140]	; (80010b8 <main+0x130>)
 800102a:	f011 ff81 	bl	8012f30 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a22      	ldr	r2, [pc, #136]	; (80010bc <main+0x134>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8001034:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <main+0x138>)
 8001036:	2100      	movs	r1, #0
 8001038:	4822      	ldr	r0, [pc, #136]	; (80010c4 <main+0x13c>)
 800103a:	f011 ff79 	bl	8012f30 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <main+0x140>)
 8001042:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <main+0x144>)
 8001046:	2100      	movs	r1, #0
 8001048:	4821      	ldr	r0, [pc, #132]	; (80010d0 <main+0x148>)
 800104a:	f011 ff71 	bl	8012f30 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <main+0x14c>)
 8001052:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8001054:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <main+0x150>)
 8001056:	2100      	movs	r1, #0
 8001058:	4820      	ldr	r0, [pc, #128]	; (80010dc <main+0x154>)
 800105a:	f011 ff69 	bl	8012f30 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <main+0x158>)
 8001062:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8001064:	2000      	movs	r0, #0
 8001066:	f012 f851 	bl	801310c <osEventFlagsNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <main+0x15c>)
 800106e:	6013      	str	r3, [r2, #0]
	system_setup();
 8001070:	f001 f96a 	bl	8002348 <system_setup>
	printf("Starting kernal...\n");
 8001074:	481c      	ldr	r0, [pc, #112]	; (80010e8 <main+0x160>)
 8001076:	f015 fe27 	bl	8016cc8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800107a:	f011 ff33 	bl	8012ee4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800107e:	e7fe      	b.n	800107e <main+0xf6>
 8001080:	24000c44 	.word	0x24000c44
 8001084:	080176b0 	.word	0x080176b0
 8001088:	08002afd 	.word	0x08002afd
 800108c:	24000744 	.word	0x24000744
 8001090:	080176d4 	.word	0x080176d4
 8001094:	08002b41 	.word	0x08002b41
 8001098:	24000748 	.word	0x24000748
 800109c:	080176f8 	.word	0x080176f8
 80010a0:	08002b85 	.word	0x08002b85
 80010a4:	2400074c 	.word	0x2400074c
 80010a8:	0801771c 	.word	0x0801771c
 80010ac:	08002bc9 	.word	0x08002bc9
 80010b0:	24000750 	.word	0x24000750
 80010b4:	08017740 	.word	0x08017740
 80010b8:	08002c71 	.word	0x08002c71
 80010bc:	240009b0 	.word	0x240009b0
 80010c0:	08017764 	.word	0x08017764
 80010c4:	08002d19 	.word	0x08002d19
 80010c8:	24000c10 	.word	0x24000c10
 80010cc:	08017788 	.word	0x08017788
 80010d0:	08002dd1 	.word	0x08002dd1
 80010d4:	24000c14 	.word	0x24000c14
 80010d8:	080177ac 	.word	0x080177ac
 80010dc:	08002ebd 	.word	0x08002ebd
 80010e0:	24000c18 	.word	0x24000c18
 80010e4:	24000c5c 	.word	0x24000c5c
 80010e8:	08017664 	.word	0x08017664

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b09c      	sub	sp, #112	; 0x70
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	224c      	movs	r2, #76	; 0x4c
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f015 fc8e 	bl	8016a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2220      	movs	r2, #32
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f015 fc88 	bl	8016a1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800110c:	2002      	movs	r0, #2
 800110e:	f008 fe31 	bl	8009d74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <SystemClock_Config+0xf8>)
 8001118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111a:	4a32      	ldr	r2, [pc, #200]	; (80011e4 <SystemClock_Config+0xf8>)
 800111c:	f023 0301 	bic.w	r3, r3, #1
 8001120:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <SystemClock_Config+0xf8>)
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <SystemClock_Config+0xfc>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001134:	4a2c      	ldr	r2, [pc, #176]	; (80011e8 <SystemClock_Config+0xfc>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <SystemClock_Config+0xfc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001148:	bf00      	nop
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <SystemClock_Config+0xfc>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001156:	d1f8      	bne.n	800114a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001158:	2303      	movs	r3, #3
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800115c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001162:	2309      	movs	r3, #9
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001166:	2340      	movs	r3, #64	; 0x40
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	2302      	movs	r3, #2
 8001170:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001172:	2304      	movs	r3, #4
 8001174:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001176:	2320      	movs	r3, #32
 8001178:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800117a:	2304      	movs	r3, #4
 800117c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800117e:	2304      	movs	r3, #4
 8001180:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001186:	2308      	movs	r3, #8
 8001188:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800118a:	2300      	movs	r3, #0
 800118c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4618      	mov	r0, r3
 8001198:	f008 fe26 	bl	8009de8 <HAL_RCC_OscConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011a2:	f001 febb 	bl	8002f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	233f      	movs	r3, #63	; 0x3f
 80011a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2303      	movs	r3, #3
 80011ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2101      	movs	r1, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f009 fa66 	bl	800a69c <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xee>
  {
    Error_Handler();
 80011d6:	f001 fea1 	bl	8002f1c <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3770      	adds	r7, #112	; 0x70
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	58000400 	.word	0x58000400
 80011e8:	58024800 	.word	0x58024800

080011ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0b0      	sub	sp, #192	; 0xc0
 80011f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f2:	463b      	mov	r3, r7
 80011f4:	22c0      	movs	r2, #192	; 0xc0
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f015 fc0f 	bl	8016a1c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800120a:	2304      	movs	r3, #4
 800120c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800120e:	2320      	movs	r3, #32
 8001210:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001212:	2308      	movs	r3, #8
 8001214:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001216:	2304      	movs	r3, #4
 8001218:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4618      	mov	r0, r3
 8001234:	f009 fe00 	bl	800ae38 <HAL_RCCEx_PeriphCLKConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800123e:	f001 fe6d 	bl	8002f1c <Error_Handler>
  }
}
 8001242:	bf00      	nop
 8001244:	37c0      	adds	r7, #192	; 0xc0
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001270:	4b7a      	ldr	r3, [pc, #488]	; (800145c <MX_ADC1_Init+0x210>)
 8001272:	4a7b      	ldr	r2, [pc, #492]	; (8001460 <MX_ADC1_Init+0x214>)
 8001274:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001276:	4b79      	ldr	r3, [pc, #484]	; (800145c <MX_ADC1_Init+0x210>)
 8001278:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800127c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127e:	4b77      	ldr	r3, [pc, #476]	; (800145c <MX_ADC1_Init+0x210>)
 8001280:	2208      	movs	r2, #8
 8001282:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001284:	4b75      	ldr	r3, [pc, #468]	; (800145c <MX_ADC1_Init+0x210>)
 8001286:	2201      	movs	r2, #1
 8001288:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800128a:	4b74      	ldr	r3, [pc, #464]	; (800145c <MX_ADC1_Init+0x210>)
 800128c:	2204      	movs	r2, #4
 800128e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001290:	4b72      	ldr	r3, [pc, #456]	; (800145c <MX_ADC1_Init+0x210>)
 8001292:	2200      	movs	r2, #0
 8001294:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001296:	4b71      	ldr	r3, [pc, #452]	; (800145c <MX_ADC1_Init+0x210>)
 8001298:	2201      	movs	r2, #1
 800129a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 800129c:	4b6f      	ldr	r3, [pc, #444]	; (800145c <MX_ADC1_Init+0x210>)
 800129e:	220b      	movs	r2, #11
 80012a0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a2:	4b6e      	ldr	r3, [pc, #440]	; (800145c <MX_ADC1_Init+0x210>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a8:	4b6c      	ldr	r3, [pc, #432]	; (800145c <MX_ADC1_Init+0x210>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ae:	4b6b      	ldr	r3, [pc, #428]	; (800145c <MX_ADC1_Init+0x210>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012b4:	4b69      	ldr	r3, [pc, #420]	; (800145c <MX_ADC1_Init+0x210>)
 80012b6:	2203      	movs	r2, #3
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012ba:	4b68      	ldr	r3, [pc, #416]	; (800145c <MX_ADC1_Init+0x210>)
 80012bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012c2:	4b66      	ldr	r3, [pc, #408]	; (800145c <MX_ADC1_Init+0x210>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012c8:	4b64      	ldr	r3, [pc, #400]	; (800145c <MX_ADC1_Init+0x210>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d0:	4862      	ldr	r0, [pc, #392]	; (800145c <MX_ADC1_Init+0x210>)
 80012d2:	f002 fff1 	bl	80042b8 <HAL_ADC_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012dc:	f001 fe1e 	bl	8002f1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	485c      	ldr	r0, [pc, #368]	; (800145c <MX_ADC1_Init+0x210>)
 80012ec:	f004 f90c 	bl	8005508 <HAL_ADCEx_MultiModeConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012f6:	f001 fe11 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012fa:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <MX_ADC1_Init+0x218>)
 80012fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012fe:	2306      	movs	r3, #6
 8001300:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001302:	2307      	movs	r3, #7
 8001304:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001306:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800130a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800130c:	2304      	movs	r3, #4
 800130e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	484f      	ldr	r0, [pc, #316]	; (800145c <MX_ADC1_Init+0x210>)
 800131e:	f003 fa4f 	bl	80047c0 <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001328:	f001 fdf8 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800132c:	4b4e      	ldr	r3, [pc, #312]	; (8001468 <MX_ADC1_Init+0x21c>)
 800132e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001330:	230c      	movs	r3, #12
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4848      	ldr	r0, [pc, #288]	; (800145c <MX_ADC1_Init+0x210>)
 800133a:	f003 fa41 	bl	80047c0 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001344:	f001 fdea 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001348:	4b48      	ldr	r3, [pc, #288]	; (800146c <MX_ADC1_Init+0x220>)
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800134c:	2312      	movs	r3, #18
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4841      	ldr	r0, [pc, #260]	; (800145c <MX_ADC1_Init+0x210>)
 8001356:	f003 fa33 	bl	80047c0 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001360:	f001 fddc 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001364:	4b42      	ldr	r3, [pc, #264]	; (8001470 <MX_ADC1_Init+0x224>)
 8001366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001368:	2318      	movs	r3, #24
 800136a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	483a      	ldr	r0, [pc, #232]	; (800145c <MX_ADC1_Init+0x210>)
 8001372:	f003 fa25 	bl	80047c0 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800137c:	f001 fdce 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001380:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <MX_ADC1_Init+0x228>)
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001388:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	4619      	mov	r1, r3
 800138e:	4833      	ldr	r0, [pc, #204]	; (800145c <MX_ADC1_Init+0x210>)
 8001390:	f003 fa16 	bl	80047c0 <HAL_ADC_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800139a:	f001 fdbf 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <MX_ADC1_Init+0x22c>)
 80013a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013a2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	482b      	ldr	r0, [pc, #172]	; (800145c <MX_ADC1_Init+0x210>)
 80013ae:	f003 fa07 	bl	80047c0 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013b8:	f001 fdb0 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013bc:	4b2f      	ldr	r3, [pc, #188]	; (800147c <MX_ADC1_Init+0x230>)
 80013be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013c0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	4619      	mov	r1, r3
 80013ca:	4824      	ldr	r0, [pc, #144]	; (800145c <MX_ADC1_Init+0x210>)
 80013cc:	f003 f9f8 	bl	80047c0 <HAL_ADC_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013d6:	f001 fda1 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_ADC1_Init+0x234>)
 80013dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013de:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	481c      	ldr	r0, [pc, #112]	; (800145c <MX_ADC1_Init+0x210>)
 80013ea:	f003 f9e9 	bl	80047c0 <HAL_ADC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80013f4:	f001 fd92 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_ADC1_Init+0x238>)
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80013fc:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001400:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4815      	ldr	r0, [pc, #84]	; (800145c <MX_ADC1_Init+0x210>)
 8001408:	f003 f9da 	bl	80047c0 <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001412:	f001 fd83 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800141a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	4619      	mov	r1, r3
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <MX_ADC1_Init+0x210>)
 8001426:	f003 f9cb 	bl	80047c0 <HAL_ADC_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001430:	f001 fd74 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_ADC1_Init+0x240>)
 8001436:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001438:	f240 2306 	movw	r3, #518	; 0x206
 800143c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_ADC1_Init+0x210>)
 8001444:	f003 f9bc 	bl	80047c0 <HAL_ADC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800144e:	f001 fd65 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2400013c 	.word	0x2400013c
 8001460:	40022000 	.word	0x40022000
 8001464:	0c900008 	.word	0x0c900008
 8001468:	10c00010 	.word	0x10c00010
 800146c:	14f00020 	.word	0x14f00020
 8001470:	1d500080 	.word	0x1d500080
 8001474:	21800100 	.word	0x21800100
 8001478:	25b00200 	.word	0x25b00200
 800147c:	2a000400 	.word	0x2a000400
 8001480:	2e300800 	.word	0x2e300800
 8001484:	3ac04000 	.word	0x3ac04000
 8001488:	3ef08000 	.word	0x3ef08000
 800148c:	47520000 	.word	0x47520000

08001490 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014a8:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014aa:	4a3e      	ldr	r2, [pc, #248]	; (80015a4 <MX_ADC3_Init+0x114>)
 80014ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014ae:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014b0:	2208      	movs	r2, #8
 80014b2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ba:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014bc:	2204      	movs	r2, #4
 80014be:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <MX_ADC3_Init+0x110>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001500:	4827      	ldr	r0, [pc, #156]	; (80015a0 <MX_ADC3_Init+0x110>)
 8001502:	f002 fed9 	bl	80042b8 <HAL_ADC_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800150c:	f001 fd06 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <MX_ADC3_Init+0x118>)
 8001512:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001514:	2306      	movs	r3, #6
 8001516:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001518:	2307      	movs	r3, #7
 800151a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800151c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001520:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001522:	2304      	movs	r3, #4
 8001524:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4619      	mov	r1, r3
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <MX_ADC3_Init+0x110>)
 8001534:	f003 f944 	bl	80047c0 <HAL_ADC_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800153e:	f001 fced 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_ADC3_Init+0x11c>)
 8001544:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001546:	230c      	movs	r3, #12
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <MX_ADC3_Init+0x110>)
 8001550:	f003 f936 	bl	80047c0 <HAL_ADC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800155a:	f001 fcdf 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800155e:	2301      	movs	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001562:	2312      	movs	r3, #18
 8001564:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <MX_ADC3_Init+0x110>)
 800156c:	f003 f928 	bl	80047c0 <HAL_ADC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001576:	f001 fcd1 	bl	8002f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <MX_ADC3_Init+0x120>)
 800157c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800157e:	2318      	movs	r3, #24
 8001580:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_ADC3_Init+0x110>)
 8001588:	f003 f91a 	bl	80047c0 <HAL_ADC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001592:	f001 fcc3 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	240001a0 	.word	0x240001a0
 80015a4:	58026000 	.word	0x58026000
 80015a8:	cb840000 	.word	0xcb840000
 80015ac:	cfb80000 	.word	0xcfb80000
 80015b0:	04300002 	.word	0x04300002

080015b4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2224      	movs	r2, #36	; 0x24
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f015 fa2b 	bl	8016a1c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_DAC1_Init+0x5c>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <MX_DAC1_Init+0x60>)
 80015ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015cc:	4810      	ldr	r0, [pc, #64]	; (8001610 <MX_DAC1_Init+0x5c>)
 80015ce:	f004 f959 	bl	8005884 <HAL_DAC_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015d8:	f001 fca0 	bl	8002f1c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015e0:	230a      	movs	r3, #10
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015e8:	2301      	movs	r3, #1
 80015ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_DAC1_Init+0x5c>)
 80015f8:	f004 fb74 	bl	8005ce4 <HAL_DAC_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001602:	f001 fc8b 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	240002f4 	.word	0x240002f4
 8001614:	40007400 	.word	0x40007400

08001618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_I2C1_Init+0x78>)
 800161e:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <MX_I2C1_Init+0x7c>)
 8001620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_I2C1_Init+0x78>)
 8001624:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <MX_I2C1_Init+0x80>)
 8001626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_I2C1_Init+0x78>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_I2C1_Init+0x78>)
 8001630:	2201      	movs	r2, #1
 8001632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_I2C1_Init+0x78>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_I2C1_Init+0x78>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_I2C1_Init+0x78>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_I2C1_Init+0x78>)
 8001648:	2200      	movs	r2, #0
 800164a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_I2C1_Init+0x78>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001652:	480f      	ldr	r0, [pc, #60]	; (8001690 <MX_I2C1_Init+0x78>)
 8001654:	f007 fd46 	bl	80090e4 <HAL_I2C_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800165e:	f001 fc5d 	bl	8002f1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001662:	2100      	movs	r1, #0
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <MX_I2C1_Init+0x78>)
 8001666:	f008 fa8d 	bl	8009b84 <HAL_I2CEx_ConfigAnalogFilter>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001670:	f001 fc54 	bl	8002f1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_I2C1_Init+0x78>)
 8001678:	f008 facf 	bl	8009c1a <HAL_I2CEx_ConfigDigitalFilter>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001682:	f001 fc4b 	bl	8002f1c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001686:	2001      	movs	r0, #1
 8001688:	f008 fb14 	bl	8009cb4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	24000380 	.word	0x24000380
 8001694:	40005400 	.word	0x40005400
 8001698:	0020081f 	.word	0x0020081f

0800169c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016b0:	2300      	movs	r3, #0
 80016b2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <MX_RTC_Init+0xb4>)
 80016b6:	4a27      	ldr	r2, [pc, #156]	; (8001754 <MX_RTC_Init+0xb8>)
 80016b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MX_RTC_Init+0xb4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <MX_RTC_Init+0xb4>)
 80016c2:	2263      	movs	r2, #99	; 0x63
 80016c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <MX_RTC_Init+0xb4>)
 80016c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80016cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <MX_RTC_Init+0xb4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_RTC_Init+0xb4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <MX_RTC_Init+0xb4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_RTC_Init+0xb4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016e6:	481a      	ldr	r0, [pc, #104]	; (8001750 <MX_RTC_Init+0xb4>)
 80016e8:	f00c f8a4 	bl	800d834 <HAL_RTC_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80016f2:	f001 fc13 	bl	8002f1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80016fe:	2300      	movs	r3, #0
 8001700:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2201      	movs	r2, #1
 800170e:	4619      	mov	r1, r3
 8001710:	480f      	ldr	r0, [pc, #60]	; (8001750 <MX_RTC_Init+0xb4>)
 8001712:	f00c f911 	bl	800d938 <HAL_RTC_SetTime>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800171c:	f001 fbfe 	bl	8002f1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001720:	2301      	movs	r3, #1
 8001722:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001724:	2301      	movs	r3, #1
 8001726:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001728:	2301      	movs	r3, #1
 800172a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800172c:	2300      	movs	r3, #0
 800172e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001730:	463b      	mov	r3, r7
 8001732:	2201      	movs	r2, #1
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_RTC_Init+0xb4>)
 8001738:	f00c f9f8 	bl	800db2c <HAL_RTC_SetDate>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001742:	f001 fbeb 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	240003d4 	.word	0x240003d4
 8001754:	58004000 	.word	0x58004000

08001758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <MX_SPI1_Init+0xa8>)
 800175e:	4a29      	ldr	r2, [pc, #164]	; (8001804 <MX_SPI1_Init+0xac>)
 8001760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001762:	4b27      	ldr	r3, [pc, #156]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001764:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <MX_SPI1_Init+0xa8>)
 800176c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001770:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001774:	220f      	movs	r2, #15
 8001776:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <MX_SPI1_Init+0xa8>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001786:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800178a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MX_SPI1_Init+0xa8>)
 800178e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_SPI1_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_SPI1_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_SPI1_Init+0xa8>)
 80017ec:	f00c fb44 	bl	800de78 <HAL_SPI_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80017f6:	f001 fb91 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	240003f8 	.word	0x240003f8
 8001804:	40013000 	.word	0x40013000

08001808 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800180e:	4a29      	ldr	r2, [pc, #164]	; (80018b4 <MX_SPI2_Init+0xac>)
 8001810:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001814:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001818:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800181c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001820:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001824:	220f      	movs	r2, #15
 8001826:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001836:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800183a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800183e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001842:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800185e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001862:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001866:	2200      	movs	r2, #0
 8001868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800186c:	2200      	movs	r2, #0
 800186e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001872:	2200      	movs	r2, #0
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001878:	2200      	movs	r2, #0
 800187a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800187e:	2200      	movs	r2, #0
 8001880:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001884:	2200      	movs	r2, #0
 8001886:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800188a:	2200      	movs	r2, #0
 800188c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001890:	2200      	movs	r2, #0
 8001892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_SPI2_Init+0xa8>)
 8001896:	2200      	movs	r2, #0
 8001898:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_SPI2_Init+0xa8>)
 800189c:	f00c faec 	bl	800de78 <HAL_SPI_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018a6:	f001 fb39 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	24000480 	.word	0x24000480
 80018b4:	40003800 	.word	0x40003800

080018b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b09a      	sub	sp, #104	; 0x68
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	615a      	str	r2, [r3, #20]
 80018ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	222c      	movs	r2, #44	; 0x2c
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f015 f892 	bl	8016a1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018f8:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <MX_TIM1_Init+0x150>)
 80018fa:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <MX_TIM1_Init+0x154>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80018fe:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001900:	2231      	movs	r2, #49	; 0x31
 8001902:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b40      	ldr	r3, [pc, #256]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <MX_TIM1_Init+0x150>)
 800190c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001910:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <MX_TIM1_Init+0x150>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001924:	4838      	ldr	r0, [pc, #224]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001926:	f00c fef8 	bl	800e71a <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001930:	f001 faf4 	bl	8002f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800193e:	4619      	mov	r1, r3
 8001940:	4831      	ldr	r0, [pc, #196]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001942:	f00d fc73 	bl	800f22c <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800194c:	f001 fae6 	bl	8002f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001950:	482d      	ldr	r0, [pc, #180]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001952:	f00d f9ef 	bl	800ed34 <HAL_TIM_PWM_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800195c:	f001 fade 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800196c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001970:	4619      	mov	r1, r3
 8001972:	4825      	ldr	r0, [pc, #148]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001974:	f00e f9b0 	bl	800fcd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800197e:	f001 facd 	bl	8002f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001982:	2360      	movs	r3, #96	; 0x60
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800198e:	2300      	movs	r3, #0
 8001990:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a2:	2200      	movs	r2, #0
 80019a4:	4619      	mov	r1, r3
 80019a6:	4818      	ldr	r0, [pc, #96]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019a8:	f00d fb2c 	bl	800f004 <HAL_TIM_PWM_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80019b2:	f001 fab3 	bl	8002f1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019ec:	f00e fa02 	bl	800fdf4 <HAL_TIMEx_ConfigBreakDeadTime>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019f6:	f001 fa91 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019fc:	f001 fe3e 	bl	800367c <HAL_TIM_MspPostInit>

}
 8001a00:	bf00      	nop
 8001a02:	3768      	adds	r7, #104	; 0x68
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	24000508 	.word	0x24000508
 8001a0c:	40010000 	.word	0x40010000

08001a10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08e      	sub	sp, #56	; 0x38
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a4c:	2231      	movs	r2, #49	; 0x31
 8001a4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a58:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a6a:	4823      	ldr	r0, [pc, #140]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a6c:	f00c fe55 	bl	800e71a <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a76:	f001 fa51 	bl	8002f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a84:	4619      	mov	r1, r3
 8001a86:	481c      	ldr	r0, [pc, #112]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a88:	f00d fbd0 	bl	800f22c <HAL_TIM_ConfigClockSource>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a92:	f001 fa43 	bl	8002f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a96:	4818      	ldr	r0, [pc, #96]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001a98:	f00d f94c 	bl	800ed34 <HAL_TIM_PWM_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001aa2:	f001 fa3b 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4810      	ldr	r0, [pc, #64]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001ab6:	f00e f90f 	bl	800fcd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ac0:	f001 fa2c 	bl	8002f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac4:	2360      	movs	r3, #96	; 0x60
 8001ac6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4807      	ldr	r0, [pc, #28]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001adc:	f00d fa92 	bl	800f004 <HAL_TIM_PWM_ConfigChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001ae6:	f001 fa19 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001aea:	4803      	ldr	r0, [pc, #12]	; (8001af8 <MX_TIM2_Init+0xe8>)
 8001aec:	f001 fdc6 	bl	800367c <HAL_TIM_MspPostInit>

}
 8001af0:	bf00      	nop
 8001af2:	3738      	adds	r7, #56	; 0x38
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	24000554 	.word	0x24000554

08001afc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <MX_TIM3_Init+0x9c>)
 8001b1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b22:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b30:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b42:	4814      	ldr	r0, [pc, #80]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b44:	f00c fde9 	bl	800e71a <HAL_TIM_Base_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b4e:	f001 f9e5 	bl	8002f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b60:	f00d fb64 	bl	800f22c <HAL_TIM_ConfigClockSource>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001b6a:	f001 f9d7 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4806      	ldr	r0, [pc, #24]	; (8001b94 <MX_TIM3_Init+0x98>)
 8001b7c:	f00e f8ac 	bl	800fcd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001b86:	f001 f9c9 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	240005a0 	.word	0x240005a0
 8001b98:	40000400 	.word	0x40000400

08001b9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bbc:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <MX_TIM4_Init+0x98>)
 8001bbe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bc2:	2263      	movs	r2, #99	; 0x63
 8001bc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bce:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001bd2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001be0:	4813      	ldr	r0, [pc, #76]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001be2:	f00c fd9a 	bl	800e71a <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bec:	f001 f996 	bl	8002f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001bfe:	f00d fb15 	bl	800f22c <HAL_TIM_ConfigClockSource>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c08:	f001 f988 	bl	8002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_TIM4_Init+0x94>)
 8001c1a:	f00e f85d 	bl	800fcd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c24:	f001 f97a 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	240005ec 	.word	0x240005ec
 8001c34:	40000800 	.word	0x40000800

08001c38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c3e:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <MX_USART1_UART_Init+0xcc>)
 8001c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001c42:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c44:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c5e:	220c      	movs	r2, #12
 8001c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c80:	481f      	ldr	r0, [pc, #124]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c82:	f00e f953 	bl	800ff2c <HAL_UART_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c8c:	f001 f946 	bl	8002f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c90:	2100      	movs	r1, #0
 8001c92:	481b      	ldr	r0, [pc, #108]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001c94:	f010 fff3 	bl	8012c7e <HAL_UARTEx_SetTxFifoThreshold>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c9e:	f001 f93d 	bl	8002f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4816      	ldr	r0, [pc, #88]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001ca6:	f011 f828 	bl	8012cfa <HAL_UARTEx_SetRxFifoThreshold>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cb0:	f001 f934 	bl	8002f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cb4:	4812      	ldr	r0, [pc, #72]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cb6:	f010 ffa9 	bl	8012c0c <HAL_UARTEx_DisableFifoMode>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cc0:	f001 f92c 	bl	8002f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001cc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cca:	f011 f816 	bl	8012cfa <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001cce:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cd0:	f010 ff61 	bl	8012b96 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001cd4:	480a      	ldr	r0, [pc, #40]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cd6:	f010 ff2b 	bl	8012b30 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ce8:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <MX_USART1_UART_Init+0xc8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001cf8:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	24000638 	.word	0x24000638
 8001d04:	40011000 	.word	0x40011000

08001d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MX_DMA_Init+0x6c>)
 8001d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <MX_DMA_Init+0x6c>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_DMA_Init+0x6c>)
 8001d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2105      	movs	r1, #5
 8001d30:	200b      	movs	r0, #11
 8001d32:	f003 fd7f 	bl	8005834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d36:	200b      	movs	r0, #11
 8001d38:	f003 fd96 	bl	8005868 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2105      	movs	r1, #5
 8001d40:	200c      	movs	r0, #12
 8001d42:	f003 fd77 	bl	8005834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d46:	200c      	movs	r0, #12
 8001d48:	f003 fd8e 	bl	8005868 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2105      	movs	r1, #5
 8001d50:	200d      	movs	r0, #13
 8001d52:	f003 fd6f 	bl	8005834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d56:	200d      	movs	r0, #13
 8001d58:	f003 fd86 	bl	8005868 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2105      	movs	r1, #5
 8001d60:	2010      	movs	r0, #16
 8001d62:	f003 fd67 	bl	8005834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d66:	2010      	movs	r0, #16
 8001d68:	f003 fd7e 	bl	8005868 <HAL_NVIC_EnableIRQ>

}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	58024400 	.word	0x58024400

08001d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d94:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dac:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db2:	4a2b      	ldr	r2, [pc, #172]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd0:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dee:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_GPIO_Init+0xe8>)
 8001dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e06:	2200      	movs	r2, #0
 8001e08:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001e0c:	4815      	ldr	r0, [pc, #84]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001e0e:	f007 f94f 	bl	80090b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2164      	movs	r1, #100	; 0x64
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <MX_GPIO_Init+0xf0>)
 8001e18:	f007 f94a 	bl	80090b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e1c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001e20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e26:	2302      	movs	r3, #2
 8001e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <MX_GPIO_Init+0xec>)
 8001e36:	f006 ff73 	bl	8008d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e3a:	2364      	movs	r3, #100	; 0x64
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_GPIO_Init+0xf0>)
 8001e52:	f006 ff65 	bl	8008d20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	58024400 	.word	0x58024400
 8001e64:	58020800 	.word	0x58020800
 8001e68:	58020400 	.word	0x58020400

08001e6c <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001e76:	2300      	movs	r3, #0
 8001e78:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	b299      	uxth	r1, r3
 8001e7e:	f107 0208 	add.w	r2, r7, #8
 8001e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	4817      	ldr	r0, [pc, #92]	; (8001ee8 <poll_i2c_sensor+0x7c>)
 8001e8c:	f007 f9c6 	bl	800921c <HAL_I2C_Master_Transmit>
 8001e90:	4603      	mov	r3, r0
 8001e92:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001e94:	7b7b      	ldrb	r3, [r7, #13]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001e9a:	4814      	ldr	r0, [pc, #80]	; (8001eec <poll_i2c_sensor+0x80>)
 8001e9c:	f014 ff14 	bl	8016cc8 <puts>
 8001ea0:	e01c      	b.n	8001edc <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	b299      	uxth	r1, r3
 8001ea6:	f107 0208 	add.w	r2, r7, #8
 8001eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <poll_i2c_sensor+0x7c>)
 8001eb4:	f007 faca 	bl	800944c <HAL_I2C_Master_Receive>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001ebc:	7b7b      	ldrb	r3, [r7, #13]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001ec2:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <poll_i2c_sensor+0x84>)
 8001ec4:	f014 ff00 	bl	8016cc8 <puts>
 8001ec8:	e008      	b.n	8001edc <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001eca:	7a3b      	ldrb	r3, [r7, #8]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001ed0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ed4:	7a7a      	ldrb	r2, [r7, #9]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	10db      	asrs	r3, r3, #3
 8001eda:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001edc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	24000380 	.word	0x24000380
 8001eec:	08017678 	.word	0x08017678
 8001ef0:	08017688 	.word	0x08017688

08001ef4 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001efc:	f107 010c 	add.w	r1, r7, #12
 8001f00:	2301      	movs	r3, #1
 8001f02:	2201      	movs	r2, #1
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <receive_pmt_spi+0x44>)
 8001f06:	f00c f8db 	bl	800e0c0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f0e:	7b7b      	ldrb	r3, [r7, #13]
 8001f10:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <receive_pmt_spi+0x44>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <receive_pmt_spi+0x44>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f20:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7bba      	ldrb	r2, [r7, #14]
 8001f26:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	701a      	strb	r2, [r3, #0]
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	240003f8 	.word	0x240003f8

08001f3c <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001f44:	f107 010c 	add.w	r1, r7, #12
 8001f48:	2364      	movs	r3, #100	; 0x64
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <receive_erpa_spi+0x44>)
 8001f4e:	f00c f8b7 	bl	800e0c0 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f56:	7b7b      	ldrb	r3, [r7, #13]
 8001f58:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <receive_erpa_spi+0x44>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <receive_erpa_spi+0x44>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f68:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7bba      	ldrb	r2, [r7, #14]
 8001f6e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3301      	adds	r3, #1
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	701a      	strb	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	24000480 	.word	0x24000480

08001f84 <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <receive_erpa_adc+0x30>)
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <receive_erpa_adc+0x30>)
 8001f94:	895b      	ldrh	r3, [r3, #10]
 8001f96:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	89fa      	ldrh	r2, [r7, #14]
 8001f9c:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	89ba      	ldrh	r2, [r7, #12]
 8001fa4:	801a      	strh	r2, [r3, #0]
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	24000ca0 	.word	0x24000ca0

08001fb8 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001fc0:	2390      	movs	r3, #144	; 0x90
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff52 	bl	8001e6c <poll_i2c_sensor>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001fcc:	2394      	movs	r3, #148	; 0x94
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff4c 	bl	8001e6c <poll_i2c_sensor>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001fd8:	2392      	movs	r3, #146	; 0x92
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ff46 	bl	8001e6c <poll_i2c_sensor>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001fe4:	2396      	movs	r3, #150	; 0x96
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff40 	bl	8001e6c <poll_i2c_sensor>
 8001fec:	4603      	mov	r3, r0
 8001fee:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	89fa      	ldrh	r2, [r7, #14]
 8001ff4:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	89ba      	ldrh	r2, [r7, #12]
 8001ffc:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	897a      	ldrh	r2, [r7, #10]
 8002004:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3306      	adds	r3, #6
 800200a:	893a      	ldrh	r2, [r7, #8]
 800200c:	801a      	strh	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <receive_hk_adc1>:
 *
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002020:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <receive_hk_adc1+0x90>)
 8002022:	8a9b      	ldrh	r3, [r3, #20]
 8002024:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <receive_hk_adc1+0x90>)
 8002028:	8a1b      	ldrh	r3, [r3, #16]
 800202a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <receive_hk_adc1+0x90>)
 800202e:	899b      	ldrh	r3, [r3, #12]
 8002030:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <receive_hk_adc1+0x90>)
 8002034:	8a5b      	ldrh	r3, [r3, #18]
 8002036:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <receive_hk_adc1+0x90>)
 800203a:	889b      	ldrh	r3, [r3, #4]
 800203c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <receive_hk_adc1+0x90>)
 8002040:	88db      	ldrh	r3, [r3, #6]
 8002042:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <receive_hk_adc1+0x90>)
 8002046:	89db      	ldrh	r3, [r3, #14]
 8002048:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <receive_hk_adc1+0x90>)
 800204c:	891b      	ldrh	r3, [r3, #8]
 800204e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <receive_hk_adc1+0x90>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8bfa      	ldrh	r2, [r7, #30]
 800205a:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3302      	adds	r3, #2
 8002060:	8bba      	ldrh	r2, [r7, #28]
 8002062:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3304      	adds	r3, #4
 8002068:	8b7a      	ldrh	r2, [r7, #26]
 800206a:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3306      	adds	r3, #6
 8002070:	8b3a      	ldrh	r2, [r7, #24]
 8002072:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3308      	adds	r3, #8
 8002078:	8afa      	ldrh	r2, [r7, #22]
 800207a:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	330a      	adds	r3, #10
 8002080:	8aba      	ldrh	r2, [r7, #20]
 8002082:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	330c      	adds	r3, #12
 8002088:	8a7a      	ldrh	r2, [r7, #18]
 800208a:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	330e      	adds	r3, #14
 8002090:	8a3a      	ldrh	r2, [r7, #16]
 8002092:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3310      	adds	r3, #16
 8002098:	89fa      	ldrh	r2, [r7, #14]
 800209a:	801a      	strh	r2, [r3, #0]
}
 800209c:	bf00      	nop
 800209e:	3724      	adds	r7, #36	; 0x24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	24000ca0 	.word	0x24000ca0

080020ac <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <receive_hk_adc3+0x4c>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <receive_hk_adc3+0x4c>)
 80020bc:	885b      	ldrh	r3, [r3, #2]
 80020be:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <receive_hk_adc3+0x4c>)
 80020c2:	889b      	ldrh	r3, [r3, #4]
 80020c4:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <receive_hk_adc3+0x4c>)
 80020c8:	88db      	ldrh	r3, [r3, #6]
 80020ca:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	89fa      	ldrh	r2, [r7, #14]
 80020d0:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3302      	adds	r3, #2
 80020d6:	89ba      	ldrh	r2, [r7, #12]
 80020d8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3304      	adds	r3, #4
 80020de:	897a      	ldrh	r2, [r7, #10]
 80020e0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3306      	adds	r3, #6
 80020e6:	893a      	ldrh	r2, [r7, #8]
 80020e8:	801a      	strh	r2, [r3, #0]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	24000cc0 	.word	0x24000cc0

080020fc <enter_flight_mode>:

// *********************************************************************************************************** HELPER FUNCTIONS

void enter_flight_mode() {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af02      	add	r7, sp, #8
	vTaskResume(GPIO_on_taskHandle); 											// Auto init
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <enter_flight_mode+0x6c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f012 fde6 	bl	8014cd8 <vTaskResume>
	HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);				// Enable n200v
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <enter_flight_mode+0x70>)
 800210e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002112:	2201      	movs	r2, #1
 8002114:	4618      	mov	r0, r3
 8002116:	f006 ffcb 	bl	80090b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);				// Enable n800v
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <enter_flight_mode+0x74>)
 800211c:	2140      	movs	r1, #64	; 0x40
 800211e:	2201      	movs	r2, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f006 ffc5 	bl	80090b0 <HAL_GPIO_WritePin>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);		// Enable auto sweep (doesn't start until ERPA timer is started)
 8002126:	2300      	movs	r3, #0
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2320      	movs	r3, #32
 800212c:	4a11      	ldr	r2, [pc, #68]	; (8002174 <enter_flight_mode+0x78>)
 800212e:	2100      	movs	r1, #0
 8002130:	4811      	ldr	r0, [pc, #68]	; (8002178 <enter_flight_mode+0x7c>)
 8002132:	f003 fc21 	bl	8005978 <HAL_DAC_Start_DMA>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);									// ERPA packet on
 8002136:	210c      	movs	r1, #12
 8002138:	4810      	ldr	r0, [pc, #64]	; (800217c <enter_flight_mode+0x80>)
 800213a:	f00c fbbd 	bl	800e8b8 <HAL_TIM_OC_Start_IT>
	ERPA_ON = 1;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <enter_flight_mode+0x84>)
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);									// PMT packet on
 8002144:	2100      	movs	r1, #0
 8002146:	480f      	ldr	r0, [pc, #60]	; (8002184 <enter_flight_mode+0x88>)
 8002148:	f00c fbb6 	bl	800e8b8 <HAL_TIM_OC_Start_IT>
	PMT_ON = 1;
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <enter_flight_mode+0x8c>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);									// HK packet on
 8002152:	2100      	movs	r1, #0
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <enter_flight_mode+0x90>)
 8002156:	f00c fbaf 	bl	800e8b8 <HAL_TIM_OC_Start_IT>
	HK_ON = 1;
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <enter_flight_mode+0x94>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	24000750 	.word	0x24000750
 800216c:	58020800 	.word	0x58020800
 8002170:	58020400 	.word	0x58020400
 8002174:	24000010 	.word	0x24000010
 8002178:	240002f4 	.word	0x240002f4
 800217c:	24000554 	.word	0x24000554
 8002180:	24000c57 	.word	0x24000c57
 8002184:	24000508 	.word	0x24000508
 8002188:	24000c56 	.word	0x24000c56
 800218c:	240005a0 	.word	0x240005a0
 8002190:	24000c58 	.word	0x24000c58

08002194 <get_current_step>:


uint8_t get_current_step(){
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <get_current_step+0xc0>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d04a      	beq.n	8002240 <get_current_step+0xac>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b0:	da48      	bge.n	8002244 <get_current_step+0xb0>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d03f      	beq.n	800223c <get_current_step+0xa8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021c2:	4293      	cmp	r3, r2
 80021c4:	dc3e      	bgt.n	8002244 <get_current_step+0xb0>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f640 421f 	movw	r2, #3103	; 0xc1f
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d033      	beq.n	8002238 <get_current_step+0xa4>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80021d6:	da35      	bge.n	8002244 <get_current_step+0xb0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021de:	4293      	cmp	r3, r2
 80021e0:	d028      	beq.n	8002234 <get_current_step+0xa0>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021e8:	4293      	cmp	r3, r2
 80021ea:	dc2b      	bgt.n	8002244 <get_current_step+0xb0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f240 7245 	movw	r2, #1861	; 0x745
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01c      	beq.n	8002230 <get_current_step+0x9c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f240 7245 	movw	r2, #1861	; 0x745
 80021fc:	4293      	cmp	r3, r2
 80021fe:	dc21      	bgt.n	8002244 <get_current_step+0xb0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002206:	4293      	cmp	r3, r2
 8002208:	d010      	beq.n	800222c <get_current_step+0x98>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002210:	4293      	cmp	r3, r2
 8002212:	dc17      	bgt.n	8002244 <get_current_step+0xb0>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d004      	beq.n	8002224 <get_current_step+0x90>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002220:	d002      	beq.n	8002228 <get_current_step+0x94>
 8002222:	e00f      	b.n	8002244 <get_current_step+0xb0>
	case 0:
		return 0;
 8002224:	2300      	movs	r3, #0
 8002226:	e00e      	b.n	8002246 <get_current_step+0xb2>
	case 620:
		return 1;
 8002228:	2301      	movs	r3, #1
 800222a:	e00c      	b.n	8002246 <get_current_step+0xb2>
	case 1241:
		return 2;
 800222c:	2302      	movs	r3, #2
 800222e:	e00a      	b.n	8002246 <get_current_step+0xb2>
	case 1861:
		return 3;
 8002230:	2303      	movs	r3, #3
 8002232:	e008      	b.n	8002246 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002234:	2304      	movs	r3, #4
 8002236:	e006      	b.n	8002246 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002238:	2305      	movs	r3, #5
 800223a:	e004      	b.n	8002246 <get_current_step+0xb2>
	case 3723:
		return 6;
 800223c:	2306      	movs	r3, #6
 800223e:	e002      	b.n	8002246 <get_current_step+0xb2>
	case 4095:
		return 7;
 8002240:	2307      	movs	r3, #7
 8002242:	e000      	b.n	8002246 <get_current_step+0xb2>
	default:
		return -1;
 8002244:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40007400 	.word	0x40007400

08002258 <enter_stop>:

void enter_stop(){
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 800225c:	f000 f830 	bl	80022c0 <send_ACK>

	vTaskSuspendAll();
 8002260:	f012 fe70 	bl	8014f44 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002264:	2101      	movs	r1, #1
 8002266:	2001      	movs	r0, #1
 8002268:	f007 fd48 	bl	8009cfc <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	xTaskResumeAll();
 800226c:	f012 fe78 	bl	8014f60 <xTaskResumeAll>
	SystemClock_Config();
 8002270:	f7fe ff3c 	bl	80010ec <SystemClock_Config>
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <sync>:
	if (status != HAL_OK) {
		Error_Handler();
	}
}

void sync() {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
	// 1. Send acknowledgement (0xFF) (This tells OBC/GUI that we have woken up)
	// 2. Wait to receive RTC generated timestamp from OBC/GUI
	// 3. Calibrate our RTC from received timestamp
	// 4. Send acknowledgement (0xFF) (This tells OBC/GUI that we have calibrated our RTC, and are now in run mode)
	send_ACK();
 800227e:	f000 f81f 	bl	80022c0 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002282:	480d      	ldr	r0, [pc, #52]	; (80022b8 <sync+0x40>)
 8002284:	f00e f8c4 	bl	8010410 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002288:	2364      	movs	r3, #100	; 0x64
 800228a:	2209      	movs	r2, #9
 800228c:	490b      	ldr	r1, [pc, #44]	; (80022bc <sync+0x44>)
 800228e:	480a      	ldr	r0, [pc, #40]	; (80022b8 <sync+0x40>)
 8002290:	f00d ff2a 	bl	80100e8 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <sync+0x44>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2bff      	cmp	r3, #255	; 0xff
 800229e:	d1f3      	bne.n	8002288 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER);
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80022a0:	2201      	movs	r2, #1
 80022a2:	4906      	ldr	r1, [pc, #24]	; (80022bc <sync+0x44>)
 80022a4:	4804      	ldr	r0, [pc, #16]	; (80022b8 <sync+0x40>)
 80022a6:	f00d ffe7 	bl	8010278 <HAL_UART_Receive_IT>

	send_ACK();
 80022aa:	f000 f809 	bl	80022c0 <send_ACK>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	24000638 	.word	0x24000638
 80022bc:	24000c60 	.word	0x24000c60

080022c0 <send_ACK>:


void send_ACK() {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <send_ACK+0x1c>)
 80022c6:	22ff      	movs	r2, #255	; 0xff
 80022c8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80022ca:	2364      	movs	r3, #100	; 0x64
 80022cc:	2201      	movs	r2, #1
 80022ce:	4903      	ldr	r1, [pc, #12]	; (80022dc <send_ACK+0x1c>)
 80022d0:	4803      	ldr	r0, [pc, #12]	; (80022e0 <send_ACK+0x20>)
 80022d2:	f00d fe7b 	bl	800ffcc <HAL_UART_Transmit>
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	24000cc8 	.word	0x24000cc8
 80022e0:	24000638 	.word	0x24000638

080022e4 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_UART_TxCpltCallback+0x1c>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	24000000 	.word	0x24000000

08002304 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	4618      	mov	r0, r3
 8002316:	f014 fb63 	bl	80169e0 <malloc>
 800231a:	4603      	mov	r3, r0
 800231c:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	88fa      	ldrh	r2, [r7, #6]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	4618      	mov	r0, r3
 8002326:	f014 fb6b 	bl	8016a00 <memcpy>
	packet.size = size;
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	82bb      	strh	r3, [r7, #20]
	return packet;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	461a      	mov	r2, r3
 8002332:	f107 0310 	add.w	r3, r7, #16
 8002336:	e893 0003 	ldmia.w	r3, {r0, r1}
 800233a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 800234c:	2100      	movs	r1, #0
 800234e:	481d      	ldr	r0, [pc, #116]	; (80023c4 <system_setup+0x7c>)
 8002350:	f00c fab2 	bl	800e8b8 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 8002354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002358:	f44f 729c 	mov.w	r2, #312	; 0x138
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800235e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002362:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002366:	4818      	ldr	r0, [pc, #96]	; (80023c8 <system_setup+0x80>)
 8002368:	f003 f86a 	bl	8005440 <HAL_ADCEx_Calibration_Start>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002372:	f000 fdd3 	bl	8002f1c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002376:	220b      	movs	r2, #11
 8002378:	4914      	ldr	r1, [pc, #80]	; (80023cc <system_setup+0x84>)
 800237a:	4813      	ldr	r0, [pc, #76]	; (80023c8 <system_setup+0x80>)
 800237c:	f002 f93e 	bl	80045fc <HAL_ADC_Start_DMA>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002386:	f000 fdc9 	bl	8002f1c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800238a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800238e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002392:	480f      	ldr	r0, [pc, #60]	; (80023d0 <system_setup+0x88>)
 8002394:	f003 f854 	bl	8005440 <HAL_ADCEx_Calibration_Start>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800239e:	f000 fdbd 	bl	8002f1c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80023a2:	2204      	movs	r2, #4
 80023a4:	490b      	ldr	r1, [pc, #44]	; (80023d4 <system_setup+0x8c>)
 80023a6:	480a      	ldr	r0, [pc, #40]	; (80023d0 <system_setup+0x88>)
 80023a8:	f002 f928 	bl	80045fc <HAL_ADC_Start_DMA>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80023b2:	f000 fdb3 	bl	8002f1c <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80023b6:	2201      	movs	r2, #1
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <system_setup+0x90>)
 80023ba:	4808      	ldr	r0, [pc, #32]	; (80023dc <system_setup+0x94>)
 80023bc:	f00d ff5c 	bl	8010278 <HAL_UART_Receive_IT>
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	240005ec 	.word	0x240005ec
 80023c8:	2400013c 	.word	0x2400013c
 80023cc:	24000ca0 	.word	0x24000ca0
 80023d0:	240001a0 	.word	0x240001a0
 80023d4:	24000cc0 	.word	0x24000cc0
 80023d8:	24000c60 	.word	0x24000c60
 80023dc:	24000638 	.word	0x24000638

080023e0 <get_uptime>:

void get_uptime(uint8_t *buffer) {
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 80023ec:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <get_uptime+0x88>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <get_uptime+0x8c>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <get_uptime+0x88>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d005      	beq.n	800240e <get_uptime+0x2e>
		// Rollover occurred so read both again.
		// Must read both because we don't know whether the
		// rollover occurred before or after reading SysTick->VAL.
		// No need to check for another rollover because there is
		// no chance of another rollover occurring so quickly.
		ms = uptime_millis;
 8002402:	4b19      	ldr	r3, [pc, #100]	; (8002468 <get_uptime+0x88>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <get_uptime+0x8c>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002414:	fb03 f202 	mul.w	r2, r3, r2
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <get_uptime+0x8c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	3301      	adds	r3, #1
 800241e:	4914      	ldr	r1, [pc, #80]	; (8002470 <get_uptime+0x90>)
 8002420:	fba1 1303 	umull	r1, r3, r1, r3
 8002424:	099b      	lsrs	r3, r3, #6
 8002426:	6939      	ldr	r1, [r7, #16]
 8002428:	fbb1 f3f3 	udiv	r3, r1, r3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	0e1b      	lsrs	r3, r3, #24
 8002434:	b2da      	uxtb	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	0c1a      	lsrs	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3301      	adds	r3, #1
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	0a1a      	lsrs	r2, r3, #8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3302      	adds	r3, #2
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3303      	adds	r3, #3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	24000c40 	.word	0x24000c40
 800246c:	e000e010 	.word	0xe000e010
 8002470:	10624dd3 	.word	0x10624dd3

08002474 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 800247c:	f107 0310 	add.w	r3, r7, #16
 8002480:	2200      	movs	r2, #0
 8002482:	4619      	mov	r1, r3
 8002484:	4821      	ldr	r0, [pc, #132]	; (800250c <getTimestamp+0x98>)
 8002486:	f00b faf5 	bl	800da74 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	2200      	movs	r2, #0
 8002490:	4619      	mov	r1, r3
 8002492:	481e      	ldr	r0, [pc, #120]	; (800250c <getTimestamp+0x98>)
 8002494:	f00b fbd2 	bl	800dc3c <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2264      	movs	r2, #100	; 0x64
 800249c:	fb03 f202 	mul.w	r2, r3, r2
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <getTimestamp+0x9c>)
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3301      	adds	r3, #1
 80024b0:	7b7a      	ldrb	r2, [r7, #13]
 80024b2:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3302      	adds	r3, #2
 80024b8:	7bba      	ldrb	r2, [r7, #14]
 80024ba:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3303      	adds	r3, #3
 80024c0:	7c3a      	ldrb	r2, [r7, #16]
 80024c2:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3304      	adds	r3, #4
 80024c8:	7c7a      	ldrb	r2, [r7, #17]
 80024ca:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3305      	adds	r3, #5
 80024d0:	7cba      	ldrb	r2, [r7, #18]
 80024d2:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	0e1a      	lsrs	r2, r3, #24
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3306      	adds	r3, #6
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	0c1a      	lsrs	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3307      	adds	r3, #7
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	0a1a      	lsrs	r2, r3, #8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3308      	adds	r3, #8
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3309      	adds	r3, #9
 80024fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]
}
 8002502:	bf00      	nop
 8002504:	3728      	adds	r7, #40	; 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	240003d4 	.word	0x240003d4
 8002510:	000f4240 	.word	0x000f4240

08002514 <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800251a:	bf00      	nop
 800251c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002520:	4833      	ldr	r0, [pc, #204]	; (80025f0 <sample_pmt+0xdc>)
 8002522:	f006 fdad 	bl	8009080 <HAL_GPIO_ReadPin>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f7      	bne.n	800251c <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 800252c:	200a      	movs	r0, #10
 800252e:	f014 fa57 	bl	80169e0 <malloc>
 8002532:	4603      	mov	r3, r0
 8002534:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002536:	2002      	movs	r0, #2
 8002538:	f014 fa52 	bl	80169e0 <malloc>
 800253c:	4603      	mov	r3, r0
 800253e:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002540:	2004      	movs	r0, #4
 8002542:	f014 fa4d 	bl	80169e0 <malloc>
 8002546:	4603      	mov	r3, r0
 8002548:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7ff ff48 	bl	80023e0 <get_uptime>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 8002550:	6938      	ldr	r0, [r7, #16]
 8002552:	f7ff fccf 	bl	8001ef4 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	22bb      	movs	r2, #187	; 0xbb
 800255a:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	22bb      	movs	r2, #187	; 0xbb
 8002562:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002564:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <sample_pmt+0xe0>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	b29a      	uxth	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	3302      	adds	r3, #2
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <sample_pmt+0xe0>)
 8002576:	881a      	ldrh	r2, [r3, #0]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3303      	adds	r3, #3
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3304      	adds	r3, #4
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3305      	adds	r3, #5
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	7852      	ldrb	r2, [r2, #1]
 8002592:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3306      	adds	r3, #6
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	7812      	ldrb	r2, [r2, #0]
 800259c:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3307      	adds	r3, #7
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	7852      	ldrb	r2, [r2, #1]
 80025a6:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3308      	adds	r3, #8
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	7892      	ldrb	r2, [r2, #2]
 80025b0:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3309      	adds	r3, #9
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	78d2      	ldrb	r2, [r2, #3]
 80025ba:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	220a      	movs	r2, #10
 80025c0:	6979      	ldr	r1, [r7, #20]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fe9e 	bl	8002304 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <sample_pmt+0xe4>)
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	1d39      	adds	r1, r7, #4
 80025ce:	2300      	movs	r3, #0
 80025d0:	2200      	movs	r2, #0
 80025d2:	f010 ff4b 	bl	801346c <osMessageQueuePut>
	free(buffer);
 80025d6:	6978      	ldr	r0, [r7, #20]
 80025d8:	f014 fa0a 	bl	80169f0 <free>
	free(pmt_spi);
 80025dc:	6938      	ldr	r0, [r7, #16]
 80025de:	f014 fa07 	bl	80169f0 <free>
	free(uptime);
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f014 fa04 	bl	80169f0 <free>
}
 80025e8:	bf00      	nop
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	58020000 	.word	0x58020000
 80025f4:	24000c50 	.word	0x24000c50
 80025f8:	24000c44 	.word	0x24000c44

080025fc <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002602:	bf00      	nop
 8002604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002608:	484d      	ldr	r0, [pc, #308]	; (8002740 <sample_erpa+0x144>)
 800260a:	f006 fd39 	bl	8009080 <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f7      	bne.n	8002604 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002614:	200f      	movs	r0, #15
 8002616:	f014 f9e3 	bl	80169e0 <malloc>
 800261a:	4603      	mov	r3, r0
 800261c:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800261e:	2002      	movs	r0, #2
 8002620:	f014 f9de 	bl	80169e0 <malloc>
 8002624:	4603      	mov	r3, r0
 8002626:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 8002628:	2004      	movs	r0, #4
 800262a:	f014 f9d9 	bl	80169e0 <malloc>
 800262e:	4603      	mov	r3, r0
 8002630:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002632:	2004      	movs	r0, #4
 8002634:	f014 f9d4 	bl	80169e0 <malloc>
 8002638:	4603      	mov	r3, r0
 800263a:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 800263c:	23ff      	movs	r3, #255	; 0xff
 800263e:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8002640:	6938      	ldr	r0, [r7, #16]
 8002642:	f7ff fecd 	bl	80023e0 <get_uptime>
	sweep_step = get_current_step();
 8002646:	f7ff fda5 	bl	8002194 <get_current_step>
 800264a:	4603      	mov	r3, r0
 800264c:	73fb      	strb	r3, [r7, #15]
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 800264e:	69b8      	ldr	r0, [r7, #24]
 8002650:	f7ff fc74 	bl	8001f3c <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002654:	6978      	ldr	r0, [r7, #20]
 8002656:	f7ff fc95 	bl	8001f84 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	22aa      	movs	r2, #170	; 0xaa
 800265e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	3301      	adds	r3, #1
 8002664:	22aa      	movs	r2, #170	; 0xaa
 8002666:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <sample_erpa+0x148>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	b29a      	uxth	r2, r3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3302      	adds	r3, #2
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <sample_erpa+0x148>)
 800267a:	881a      	ldrh	r2, [r3, #0]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	3303      	adds	r3, #3
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
	buffer[4] = sweep_step;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	3304      	adds	r3, #4
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	701a      	strb	r2, [r3, #0]
	buffer[5] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	b29a      	uxth	r2, r3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3305      	adds	r3, #5
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
	buffer[6] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	881a      	ldrh	r2, [r3, #0]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3306      	adds	r3, #6
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3302      	adds	r3, #2
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3307      	adds	r3, #7
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]
	buffer[8] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3302      	adds	r3, #2
 80026be:	881a      	ldrh	r2, [r3, #0]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3308      	adds	r3, #8
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[0];					// ERPA eADC MSB
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3309      	adds	r3, #9
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	7812      	ldrb	r2, [r2, #0]
 80026d0:	701a      	strb	r2, [r3, #0]
	buffer[10] = erpa_spi[1];					// ERPA eADC LSB
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	330a      	adds	r3, #10
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	7852      	ldrb	r2, [r2, #1]
 80026da:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[0];
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	330b      	adds	r3, #11
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	7812      	ldrb	r2, [r2, #0]
 80026e4:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[1];
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	330c      	adds	r3, #12
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	7852      	ldrb	r2, [r2, #1]
 80026ee:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[2];
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	330d      	adds	r3, #13
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	7892      	ldrb	r2, [r2, #2]
 80026f8:	701a      	strb	r2, [r3, #0]
	buffer[14] = uptime[3];
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	330e      	adds	r3, #14
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	78d2      	ldrb	r2, [r2, #3]
 8002702:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	220f      	movs	r2, #15
 8002708:	69f9      	ldr	r1, [r7, #28]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fdfa 	bl	8002304 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <sample_erpa+0x14c>)
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	1d39      	adds	r1, r7, #4
 8002716:	2300      	movs	r3, #0
 8002718:	2200      	movs	r2, #0
 800271a:	f010 fea7 	bl	801346c <osMessageQueuePut>
	free(buffer);
 800271e:	69f8      	ldr	r0, [r7, #28]
 8002720:	f014 f966 	bl	80169f0 <free>
	free(erpa_spi);
 8002724:	69b8      	ldr	r0, [r7, #24]
 8002726:	f014 f963 	bl	80169f0 <free>
	free(erpa_adc);
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f014 f960 	bl	80169f0 <free>
	free(uptime);
 8002730:	6938      	ldr	r0, [r7, #16]
 8002732:	f014 f95d 	bl	80169f0 <free>
}
 8002736:	bf00      	nop
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	58020400 	.word	0x58020400
 8002744:	24000c52 	.word	0x24000c52
 8002748:	24000c44 	.word	0x24000c44

0800274c <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002752:	2030      	movs	r0, #48	; 0x30
 8002754:	f014 f944 	bl	80169e0 <malloc>
 8002758:	4603      	mov	r3, r0
 800275a:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 800275c:	2008      	movs	r0, #8
 800275e:	f014 f93f 	bl	80169e0 <malloc>
 8002762:	4603      	mov	r3, r0
 8002764:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 8002766:	200a      	movs	r0, #10
 8002768:	f014 f93a 	bl	80169e0 <malloc>
 800276c:	4603      	mov	r3, r0
 800276e:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff fe7f 	bl	8002474 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <sample_hk+0x78>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800277e:	db25      	blt.n	80027cc <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 8002780:	6938      	ldr	r0, [r7, #16]
 8002782:	f7ff fc19 	bl	8001fb8 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800278c:	b29a      	uxth	r2, r3
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <sample_hk+0x7c>)
 8002790:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	3302      	adds	r3, #2
 8002796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <sample_hk+0x7c>)
 800279e:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	3304      	adds	r3, #4
 80027a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <sample_hk+0x7c>)
 80027ac:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	3306      	adds	r3, #6
 80027b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <sample_hk+0x7c>)
 80027ba:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 80027bc:	4b01      	ldr	r3, [pc, #4]	; (80027c4 <sample_hk+0x78>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e01f      	b.n	8002804 <sample_hk+0xb8>
 80027c4:	24000004 	.word	0x24000004
 80027c8:	24000ccc 	.word	0x24000ccc
	} else {
		TEMPERATURE_COUNTER++;
 80027cc:	4b9f      	ldr	r3, [pc, #636]	; (8002a4c <sample_hk+0x300>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	4a9e      	ldr	r2, [pc, #632]	; (8002a4c <sample_hk+0x300>)
 80027d4:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 80027d6:	4b9e      	ldr	r3, [pc, #632]	; (8002a50 <sample_hk+0x304>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b21a      	sxth	r2, r3
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80027e0:	4b9b      	ldr	r3, [pc, #620]	; (8002a50 <sample_hk+0x304>)
 80027e2:	885a      	ldrh	r2, [r3, #2]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	3302      	adds	r3, #2
 80027e8:	b212      	sxth	r2, r2
 80027ea:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80027ec:	4b98      	ldr	r3, [pc, #608]	; (8002a50 <sample_hk+0x304>)
 80027ee:	889a      	ldrh	r2, [r3, #4]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	3304      	adds	r3, #4
 80027f4:	b212      	sxth	r2, r2
 80027f6:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 80027f8:	4b95      	ldr	r3, [pc, #596]	; (8002a50 <sample_hk+0x304>)
 80027fa:	88da      	ldrh	r2, [r3, #6]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	3306      	adds	r3, #6
 8002800:	b212      	sxth	r2, r2
 8002802:	801a      	strh	r2, [r3, #0]
	}

#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	22cc      	movs	r2, #204	; 0xcc
 8002808:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	3301      	adds	r3, #1
 800280e:	22cc      	movs	r2, #204	; 0xcc
 8002810:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002812:	4b90      	ldr	r3, [pc, #576]	; (8002a54 <sample_hk+0x308>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	b29a      	uxth	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3302      	adds	r3, #2
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002822:	4b8c      	ldr	r3, [pc, #560]	; (8002a54 <sample_hk+0x308>)
 8002824:	881a      	ldrh	r2, [r3, #0]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3303      	adds	r3, #3
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 800282e:	4b8a      	ldr	r3, [pc, #552]	; (8002a58 <sample_hk+0x30c>)
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	b29a      	uxth	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	3304      	adds	r3, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 800283e:	4b86      	ldr	r3, [pc, #536]	; (8002a58 <sample_hk+0x30c>)
 8002840:	881a      	ldrh	r2, [r3, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3305      	adds	r3, #5
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 800284a:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <sample_hk+0x310>)
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	b29a      	uxth	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3306      	adds	r3, #6
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 800285a:	4b80      	ldr	r3, [pc, #512]	; (8002a5c <sample_hk+0x310>)
 800285c:	881a      	ldrh	r2, [r3, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	3307      	adds	r3, #7
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286c:	121a      	asrs	r2, r3, #8
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3308      	adds	r3, #8
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f9b3 2000 	ldrsh.w	r2, [r3]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3309      	adds	r3, #9
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	3302      	adds	r3, #2
 8002888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288c:	121a      	asrs	r2, r3, #8
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	330a      	adds	r3, #10
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	3302      	adds	r3, #2
 800289a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	330b      	adds	r3, #11
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	3304      	adds	r3, #4
 80028aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ae:	121a      	asrs	r2, r3, #8
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	330c      	adds	r3, #12
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	3304      	adds	r3, #4
 80028bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	330d      	adds	r3, #13
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	3306      	adds	r3, #6
 80028cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d0:	121a      	asrs	r2, r3, #8
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	330e      	adds	r3, #14
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	3306      	adds	r3, #6
 80028de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	330f      	adds	r3, #15
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 80028ea:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <sample_hk+0x314>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3310      	adds	r3, #16
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 80028fa:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <sample_hk+0x314>)
 80028fc:	881a      	ldrh	r2, [r3, #0]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	3311      	adds	r3, #17
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 8002906:	4b57      	ldr	r3, [pc, #348]	; (8002a64 <sample_hk+0x318>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	b29a      	uxth	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3312      	adds	r3, #18
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 8002916:	4b53      	ldr	r3, [pc, #332]	; (8002a64 <sample_hk+0x318>)
 8002918:	881a      	ldrh	r2, [r3, #0]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3313      	adds	r3, #19
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002922:	4b51      	ldr	r3, [pc, #324]	; (8002a68 <sample_hk+0x31c>)
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	b29a      	uxth	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3314      	adds	r3, #20
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002932:	4b4d      	ldr	r3, [pc, #308]	; (8002a68 <sample_hk+0x31c>)
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3315      	adds	r3, #21
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 800293e:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <sample_hk+0x320>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	b29a      	uxth	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3316      	adds	r3, #22
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 800294e:	4b47      	ldr	r3, [pc, #284]	; (8002a6c <sample_hk+0x320>)
 8002950:	881a      	ldrh	r2, [r3, #0]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3317      	adds	r3, #23
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 800295a:	4b45      	ldr	r3, [pc, #276]	; (8002a70 <sample_hk+0x324>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	b29a      	uxth	r2, r3
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3318      	adds	r3, #24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 800296a:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <sample_hk+0x324>)
 800296c:	881a      	ldrh	r2, [r3, #0]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	3319      	adds	r3, #25
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002976:	4b3f      	ldr	r3, [pc, #252]	; (8002a74 <sample_hk+0x328>)
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	b29a      	uxth	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	331a      	adds	r3, #26
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002986:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <sample_hk+0x328>)
 8002988:	881a      	ldrh	r2, [r3, #0]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	331b      	adds	r3, #27
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002992:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <sample_hk+0x32c>)
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	b29a      	uxth	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	331c      	adds	r3, #28
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 80029a2:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <sample_hk+0x32c>)
 80029a4:	881a      	ldrh	r2, [r3, #0]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	331d      	adds	r3, #29
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 80029ae:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <sample_hk+0x330>)
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	331e      	adds	r3, #30
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <sample_hk+0x330>)
 80029c0:	881a      	ldrh	r2, [r3, #0]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	331f      	adds	r3, #31
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <sample_hk+0x334>)
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3320      	adds	r3, #32
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <sample_hk+0x334>)
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	3321      	adds	r3, #33	; 0x21
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 80029e6:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <sample_hk+0x338>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	3322      	adds	r3, #34	; 0x22
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 80029f6:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <sample_hk+0x338>)
 80029f8:	881a      	ldrh	r2, [r3, #0]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	3323      	adds	r3, #35	; 0x23
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002a02:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <sample_hk+0x33c>)
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3324      	adds	r3, #36	; 0x24
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <sample_hk+0x33c>)
 8002a14:	881a      	ldrh	r2, [r3, #0]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	3325      	adds	r3, #37	; 0x25
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3326      	adds	r3, #38	; 0x26
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3327      	adds	r3, #39	; 0x27
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	7852      	ldrb	r2, [r2, #1]
 8002a30:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3328      	adds	r3, #40	; 0x28
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	7892      	ldrb	r2, [r2, #2]
 8002a3a:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3329      	adds	r3, #41	; 0x29
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	78d2      	ldrb	r2, [r2, #3]
 8002a44:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	332a      	adds	r3, #42	; 0x2a
 8002a4a:	e01f      	b.n	8002a8c <sample_hk+0x340>
 8002a4c:	24000004 	.word	0x24000004
 8002a50:	24000ccc 	.word	0x24000ccc
 8002a54:	24000c54 	.word	0x24000c54
 8002a58:	24000c26 	.word	0x24000c26
 8002a5c:	24000c28 	.word	0x24000c28
 8002a60:	24000c2a 	.word	0x24000c2a
 8002a64:	24000c2c 	.word	0x24000c2c
 8002a68:	24000c2e 	.word	0x24000c2e
 8002a6c:	24000c30 	.word	0x24000c30
 8002a70:	24000c32 	.word	0x24000c32
 8002a74:	24000c34 	.word	0x24000c34
 8002a78:	24000c36 	.word	0x24000c36
 8002a7c:	24000c38 	.word	0x24000c38
 8002a80:	24000c3a 	.word	0x24000c3a
 8002a84:	24000c3c 	.word	0x24000c3c
 8002a88:	24000c3e 	.word	0x24000c3e
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	7912      	ldrb	r2, [r2, #4]
 8002a90:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	332b      	adds	r3, #43	; 0x2b
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	7952      	ldrb	r2, [r2, #5]
 8002a9a:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	332c      	adds	r3, #44	; 0x2c
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	7992      	ldrb	r2, [r2, #6]
 8002aa4:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	332d      	adds	r3, #45	; 0x2d
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	79d2      	ldrb	r2, [r2, #7]
 8002aae:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	332e      	adds	r3, #46	; 0x2e
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	7a12      	ldrb	r2, [r2, #8]
 8002ab8:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	332f      	adds	r3, #47	; 0x2f
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	7a52      	ldrb	r2, [r2, #9]
 8002ac2:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	2230      	movs	r2, #48	; 0x30
 8002ac8:	6979      	ldr	r1, [r7, #20]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fc1a 	bl	8002304 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <sample_hk+0x3ac>)
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	1d39      	adds	r1, r7, #4
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f010 fcc7 	bl	801346c <osMessageQueuePut>

	free(buffer);
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f013 ff86 	bl	80169f0 <free>
	free(hk_i2c);
 8002ae4:	6938      	ldr	r0, [r7, #16]
 8002ae6:	f013 ff83 	bl	80169f0 <free>
	free(timestamp);
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f013 ff80 	bl	80169f0 <free>
}
 8002af0:	bf00      	nop
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	24000c44 	.word	0x24000c44

08002afc <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <PMT_init+0x38>)
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2101      	movs	r1, #1
 8002b10:	f010 fbd3 	bl	80132ba <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <PMT_init+0x3c>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <PMT_init+0x30>
			sample_pmt();
 8002b1c:	f7ff fcfa 	bl	8002514 <sample_pmt>
			pmt_seq++;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <PMT_init+0x40>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <PMT_init+0x40>)
 8002b2a:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002b2c:	f010 fa92 	bl	8013054 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002b30:	e7e8      	b.n	8002b04 <PMT_init+0x8>
 8002b32:	bf00      	nop
 8002b34:	24000c5c 	.word	0x24000c5c
 8002b38:	24000c56 	.word	0x24000c56
 8002b3c:	24000c50 	.word	0x24000c50

08002b40 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <ERPA_init+0x38>)
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b50:	2200      	movs	r2, #0
 8002b52:	2102      	movs	r1, #2
 8002b54:	f010 fbb1 	bl	80132ba <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <ERPA_init+0x3c>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <ERPA_init+0x30>
			sample_erpa();
 8002b60:	f7ff fd4c 	bl	80025fc <sample_erpa>
			erpa_seq++;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <ERPA_init+0x40>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <ERPA_init+0x40>)
 8002b6e:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002b70:	f010 fa70 	bl	8013054 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002b74:	e7e8      	b.n	8002b48 <ERPA_init+0x8>
 8002b76:	bf00      	nop
 8002b78:	24000c5c 	.word	0x24000c5c
 8002b7c:	24000c57 	.word	0x24000c57
 8002b80:	24000c52 	.word	0x24000c52

08002b84 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HK_init+0x38>)
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b94:	2200      	movs	r2, #0
 8002b96:	2104      	movs	r1, #4
 8002b98:	f010 fb8f 	bl	80132ba <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HK_init+0x3c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <HK_init+0x30>
			sample_hk();
 8002ba4:	f7ff fdd2 	bl	800274c <sample_hk>
			hk_seq++;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HK_init+0x40>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <HK_init+0x40>)
 8002bb2:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 8002bb4:	f010 fa4e 	bl	8013054 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002bb8:	e7e8      	b.n	8002b8c <HK_init+0x8>
 8002bba:	bf00      	nop
 8002bbc:	24000c5c 	.word	0x24000c5c
 8002bc0:	24000c58 	.word	0x24000c58
 8002bc4:	24000c54 	.word	0x24000c54

08002bc8 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <GPIO_on_init+0x9c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f010 fa5d 	bl	8013094 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002bda:	4b23      	ldr	r3, [pc, #140]	; (8002c68 <GPIO_on_init+0xa0>)
 8002bdc:	2104      	movs	r1, #4
 8002bde:	2201      	movs	r2, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f006 fa65 	bl	80090b0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002be6:	2064      	movs	r0, #100	; 0x64
 8002be8:	f010 fa75 	bl	80130d6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002bec:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <GPIO_on_init+0xa0>)
 8002bee:	2120      	movs	r1, #32
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f006 fa5c 	bl	80090b0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002bf8:	2064      	movs	r0, #100	; 0x64
 8002bfa:	f010 fa6c 	bl	80130d6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <GPIO_on_init+0xa4>)
 8002c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c04:	2201      	movs	r2, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f006 fa52 	bl	80090b0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c0c:	2064      	movs	r0, #100	; 0x64
 8002c0e:	f010 fa62 	bl	80130d6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002c12:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <GPIO_on_init+0xa4>)
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	2201      	movs	r2, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f006 fa49 	bl	80090b0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c1e:	2064      	movs	r0, #100	; 0x64
 8002c20:	f010 fa59 	bl	80130d6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <GPIO_on_init+0xa4>)
 8002c26:	2140      	movs	r1, #64	; 0x40
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f006 fa40 	bl	80090b0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c30:	2064      	movs	r0, #100	; 0x64
 8002c32:	f010 fa50 	bl	80130d6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <GPIO_on_init+0xa4>)
 8002c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f006 fa36 	bl	80090b0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c44:	2064      	movs	r0, #100	; 0x64
 8002c46:	f010 fa46 	bl	80130d6 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <GPIO_on_init+0xa4>)
 8002c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c50:	2201      	movs	r2, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f006 fa2c 	bl	80090b0 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002c58:	4b02      	ldr	r3, [pc, #8]	; (8002c64 <GPIO_on_init+0x9c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f010 fa19 	bl	8013094 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002c62:	e7ba      	b.n	8002bda <GPIO_on_init+0x12>
 8002c64:	24000750 	.word	0x24000750
 8002c68:	58020400 	.word	0x58020400
 8002c6c:	58020800 	.word	0x58020800

08002c70 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <GPIO_off_init+0x9c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f010 fa09 	bl	8013094 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002c82:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <GPIO_off_init+0xa0>)
 8002c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c88:	2200      	movs	r2, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f006 fa10 	bl	80090b0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002c90:	2064      	movs	r0, #100	; 0x64
 8002c92:	f010 fa20 	bl	80130d6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002c96:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <GPIO_off_init+0xa0>)
 8002c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f006 fa06 	bl	80090b0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ca4:	2064      	movs	r0, #100	; 0x64
 8002ca6:	f010 fa16 	bl	80130d6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002caa:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <GPIO_off_init+0xa0>)
 8002cac:	2140      	movs	r1, #64	; 0x40
 8002cae:	2200      	movs	r2, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f006 f9fd 	bl	80090b0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002cb6:	2064      	movs	r0, #100	; 0x64
 8002cb8:	f010 fa0d 	bl	80130d6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <GPIO_off_init+0xa0>)
 8002cbe:	2180      	movs	r1, #128	; 0x80
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f006 f9f4 	bl	80090b0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002cc8:	2064      	movs	r0, #100	; 0x64
 8002cca:	f010 fa04 	bl	80130d6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <GPIO_off_init+0xa0>)
 8002cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f006 f9ea 	bl	80090b0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002cdc:	2064      	movs	r0, #100	; 0x64
 8002cde:	f010 f9fa 	bl	80130d6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <GPIO_off_init+0xa4>)
 8002ce4:	2120      	movs	r1, #32
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f006 f9e1 	bl	80090b0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002cee:	2064      	movs	r0, #100	; 0x64
 8002cf0:	f010 f9f1 	bl	80130d6 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <GPIO_off_init+0xa4>)
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f006 f9d8 	bl	80090b0 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002d00:	4b02      	ldr	r3, [pc, #8]	; (8002d0c <GPIO_off_init+0x9c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f010 f9c5 	bl	8013094 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002d0a:	e7ba      	b.n	8002c82 <GPIO_off_init+0x12>
 8002d0c:	240009b0 	.word	0x240009b0
 8002d10:	58020800 	.word	0x58020800
 8002d14:	58020400 	.word	0x58020400

08002d18 <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <UART_TX_init+0xa4>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d30:	2200      	movs	r2, #0
 8002d32:	4923      	ldr	r1, [pc, #140]	; (8002dc0 <UART_TX_init+0xa8>)
 8002d34:	f010 fbfa 	bl	801352c <osMessageQueueGet>
 8002d38:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d120      	bne.n	8002d82 <UART_TX_init+0x6a>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <UART_TX_init+0xa8>)
 8002d42:	889b      	ldrh	r3, [r3, #4]
 8002d44:	461a      	mov	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d4e:	d218      	bcs.n	8002d82 <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <UART_TX_init+0xac>)
 8002d54:	4413      	add	r3, r2
 8002d56:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <UART_TX_init+0xa8>)
 8002d58:	6811      	ldr	r1, [r2, #0]
 8002d5a:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <UART_TX_init+0xa8>)
 8002d5c:	8892      	ldrh	r2, [r2, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f013 fe4e 	bl	8016a00 <memcpy>
					free(msg.array);
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <UART_TX_init+0xa8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f013 fe41 	bl	80169f0 <free>
					total_size += msg.size;
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <UART_TX_init+0xa8>)
 8002d70:	889b      	ldrh	r3, [r3, #4]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4413      	add	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 8002d80:	d203      	bcs.n	8002d8a <UART_TX_init+0x72>
						break;
					}
				}
			}
		} while (status == osOK);
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0cf      	beq.n	8002d28 <UART_TX_init+0x10>
 8002d88:	e000      	b.n	8002d8c <UART_TX_init+0x74>
						break;
 8002d8a:	bf00      	nop

		if (total_size > 0) {
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d010      	beq.n	8002db4 <UART_TX_init+0x9c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	490a      	ldr	r1, [pc, #40]	; (8002dc4 <UART_TX_init+0xac>)
 8002d9a:	480b      	ldr	r0, [pc, #44]	; (8002dc8 <UART_TX_init+0xb0>)
 8002d9c:	f00d fab8 	bl	8010310 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002da0:	e001      	b.n	8002da6 <UART_TX_init+0x8e>
				osThreadYield();
 8002da2:	f010 f957 	bl	8013054 <osThreadYield>
			while (tx_flag == 0) {
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <UART_TX_init+0xb4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f9      	beq.n	8002da2 <UART_TX_init+0x8a>
			}

			// Reset the flag
			tx_flag = 0;
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <UART_TX_init+0xb4>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002db4:	f010 f94e 	bl	8013054 <osThreadYield>
		total_size = 0;
 8002db8:	e7b4      	b.n	8002d24 <UART_TX_init+0xc>
 8002dba:	bf00      	nop
 8002dbc:	24000c44 	.word	0x24000c44
 8002dc0:	24000c48 	.word	0x24000c48
 8002dc4:	24000cd4 	.word	0x24000cd4
 8002dc8:	24000638 	.word	0x24000638
 8002dcc:	24000000 	.word	0x24000000

08002dd0 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint

	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <Voltage_Monitor_init+0xb4>)
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002de0:	2200      	movs	r2, #0
 8002de2:	2108      	movs	r1, #8
 8002de4:	f010 fa69 	bl	80132ba <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(9 * sizeof(uint16_t));
 8002de8:	2012      	movs	r0, #18
 8002dea:	f013 fdf9 	bl	80169e0 <malloc>
 8002dee:	4603      	mov	r3, r0
 8002df0:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002df2:	2008      	movs	r0, #8
 8002df4:	f013 fdf4 	bl	80169e0 <malloc>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f7ff f90b 	bl	8002018 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002e02:	68b8      	ldr	r0, [r7, #8]
 8002e04:	f7ff f952 	bl	80020ac <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	885a      	ldrh	r2, [r3, #2]
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <Voltage_Monitor_init+0xb8>)
 8002e0e:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	881a      	ldrh	r2, [r3, #0]
 8002e14:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <Voltage_Monitor_init+0xbc>)
 8002e16:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	881a      	ldrh	r2, [r3, #0]
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <Voltage_Monitor_init+0xc0>)
 8002e1e:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	885a      	ldrh	r2, [r3, #2]
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <Voltage_Monitor_init+0xc4>)
 8002e26:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	889a      	ldrh	r2, [r3, #4]
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <Voltage_Monitor_init+0xc8>)
 8002e2e:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	88da      	ldrh	r2, [r3, #6]
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <Voltage_Monitor_init+0xcc>)
 8002e36:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	899a      	ldrh	r2, [r3, #12]
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <Voltage_Monitor_init+0xd0>)
 8002e3e:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	88da      	ldrh	r2, [r3, #6]
 8002e44:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <Voltage_Monitor_init+0xd4>)
 8002e46:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	889a      	ldrh	r2, [r3, #4]
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <Voltage_Monitor_init+0xd8>)
 8002e4e:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	89da      	ldrh	r2, [r3, #14]
 8002e54:	4b15      	ldr	r3, [pc, #84]	; (8002eac <Voltage_Monitor_init+0xdc>)
 8002e56:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8a1a      	ldrh	r2, [r3, #16]
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <Voltage_Monitor_init+0xe0>)
 8002e5e:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	891a      	ldrh	r2, [r3, #8]
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <Voltage_Monitor_init+0xe4>)
 8002e66:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	895a      	ldrh	r2, [r3, #10]
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <Voltage_Monitor_init+0xe8>)
 8002e6e:	801a      	strh	r2, [r3, #0]
//			if (!in_range(_n800v, 3018, 3336)) {
//				error_protocol(RAIL_n800v);
//			}
//		}

		free(hk_adc1);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f013 fdbd 	bl	80169f0 <free>
		free(hk_adc3);
 8002e76:	68b8      	ldr	r0, [r7, #8]
 8002e78:	f013 fdba 	bl	80169f0 <free>

		osThreadYield();
 8002e7c:	f010 f8ea 	bl	8013054 <osThreadYield>
	for (;;) {
 8002e80:	e7aa      	b.n	8002dd8 <Voltage_Monitor_init+0x8>
 8002e82:	bf00      	nop
 8002e84:	24000c5c 	.word	0x24000c5c
 8002e88:	24000c26 	.word	0x24000c26
 8002e8c:	24000c28 	.word	0x24000c28
 8002e90:	24000c2a 	.word	0x24000c2a
 8002e94:	24000c2c 	.word	0x24000c2c
 8002e98:	24000c2e 	.word	0x24000c2e
 8002e9c:	24000c30 	.word	0x24000c30
 8002ea0:	24000c32 	.word	0x24000c32
 8002ea4:	24000c34 	.word	0x24000c34
 8002ea8:	24000c36 	.word	0x24000c36
 8002eac:	24000c38 	.word	0x24000c38
 8002eb0:	24000c3a 	.word	0x24000c3a
 8002eb4:	24000c3c 	.word	0x24000c3c
 8002eb8:	24000c3e 	.word	0x24000c3e

08002ebc <FLAG_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
  /* Infinite loop */
  for(;;)
  {
		int current_flag = osEventFlagsGet(event_flags);
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <FLAG_init+0x38>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f010 f9d5 	bl	8013278 <osEventFlagsGet>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0316 	and.w	r3, r3, #22
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <FLAG_init+0x38>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2116      	movs	r1, #22
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f010 f996 	bl	8013214 <osEventFlagsClear>
			enter_stop();
 8002ee8:	f7ff f9b6 	bl	8002258 <enter_stop>
		}
    osDelay(1);
 8002eec:	2001      	movs	r0, #1
 8002eee:	f010 f8f2 	bl	80130d6 <osDelay>
  {
 8002ef2:	e7e7      	b.n	8002ec4 <FLAG_init+0x8>
 8002ef4:	24000c5c 	.word	0x24000c5c

08002ef8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f0a:	f000 ff85 	bl	8003e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40001000 	.word	0x40001000

08002f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f20:	b672      	cpsid	i
}
 8002f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f24:	e7fe      	b.n	8002f24 <Error_Handler+0x8>
	...

08002f28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_MspInit+0x38>)
 8002f30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_MspInit+0x38>)
 8002f36:	f043 0302 	orr.w	r3, r3, #2
 8002f3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <HAL_MspInit+0x38>)
 8002f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	210f      	movs	r1, #15
 8002f50:	f06f 0001 	mvn.w	r0, #1
 8002f54:	f002 fc6e 	bl	8005834 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	58024400 	.word	0x58024400

08002f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08e      	sub	sp, #56	; 0x38
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a7b      	ldr	r2, [pc, #492]	; (8003170 <HAL_ADC_MspInit+0x20c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	f040 8091 	bne.w	80030aa <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f88:	4b7a      	ldr	r3, [pc, #488]	; (8003174 <HAL_ADC_MspInit+0x210>)
 8002f8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f8e:	4a79      	ldr	r2, [pc, #484]	; (8003174 <HAL_ADC_MspInit+0x210>)
 8002f90:	f043 0320 	orr.w	r3, r3, #32
 8002f94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f98:	4b76      	ldr	r3, [pc, #472]	; (8003174 <HAL_ADC_MspInit+0x210>)
 8002f9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	623b      	str	r3, [r7, #32]
 8002fa4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa6:	4b73      	ldr	r3, [pc, #460]	; (8003174 <HAL_ADC_MspInit+0x210>)
 8002fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fac:	4a71      	ldr	r2, [pc, #452]	; (8003174 <HAL_ADC_MspInit+0x210>)
 8002fae:	f043 0304 	orr.w	r3, r3, #4
 8002fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fb6:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_ADC_MspInit+0x210>)
 8002fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc4:	4b6b      	ldr	r3, [pc, #428]	; (8003174 <HAL_ADC_MspInit+0x210>)
 8002fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fca:	4a6a      	ldr	r2, [pc, #424]	; (8003174 <HAL_ADC_MspInit+0x210>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fd4:	4b67      	ldr	r3, [pc, #412]	; (8003174 <HAL_ADC_MspInit+0x210>)
 8002fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe2:	4b64      	ldr	r3, [pc, #400]	; (8003174 <HAL_ADC_MspInit+0x210>)
 8002fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe8:	4a62      	ldr	r2, [pc, #392]	; (8003174 <HAL_ADC_MspInit+0x210>)
 8002fea:	f043 0302 	orr.w	r3, r3, #2
 8002fee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ff2:	4b60      	ldr	r3, [pc, #384]	; (8003174 <HAL_ADC_MspInit+0x210>)
 8002ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003000:	2333      	movs	r3, #51	; 0x33
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003004:	2303      	movs	r3, #3
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800300c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003010:	4619      	mov	r1, r3
 8003012:	4859      	ldr	r0, [pc, #356]	; (8003178 <HAL_ADC_MspInit+0x214>)
 8003014:	f005 fe84 	bl	8008d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8003018:	23ce      	movs	r3, #206	; 0xce
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800301c:	2303      	movs	r3, #3
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003028:	4619      	mov	r1, r3
 800302a:	4854      	ldr	r0, [pc, #336]	; (800317c <HAL_ADC_MspInit+0x218>)
 800302c:	f005 fe78 	bl	8008d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003030:	2303      	movs	r3, #3
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003034:	2303      	movs	r3, #3
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003040:	4619      	mov	r1, r3
 8003042:	484f      	ldr	r0, [pc, #316]	; (8003180 <HAL_ADC_MspInit+0x21c>)
 8003044:	f005 fe6c 	bl	8008d20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003048:	4b4e      	ldr	r3, [pc, #312]	; (8003184 <HAL_ADC_MspInit+0x220>)
 800304a:	4a4f      	ldr	r2, [pc, #316]	; (8003188 <HAL_ADC_MspInit+0x224>)
 800304c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800304e:	4b4d      	ldr	r3, [pc, #308]	; (8003184 <HAL_ADC_MspInit+0x220>)
 8003050:	2209      	movs	r2, #9
 8003052:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003054:	4b4b      	ldr	r3, [pc, #300]	; (8003184 <HAL_ADC_MspInit+0x220>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800305a:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <HAL_ADC_MspInit+0x220>)
 800305c:	2200      	movs	r2, #0
 800305e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003060:	4b48      	ldr	r3, [pc, #288]	; (8003184 <HAL_ADC_MspInit+0x220>)
 8003062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003066:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003068:	4b46      	ldr	r3, [pc, #280]	; (8003184 <HAL_ADC_MspInit+0x220>)
 800306a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800306e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003070:	4b44      	ldr	r3, [pc, #272]	; (8003184 <HAL_ADC_MspInit+0x220>)
 8003072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003076:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003078:	4b42      	ldr	r3, [pc, #264]	; (8003184 <HAL_ADC_MspInit+0x220>)
 800307a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800307e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003080:	4b40      	ldr	r3, [pc, #256]	; (8003184 <HAL_ADC_MspInit+0x220>)
 8003082:	2200      	movs	r2, #0
 8003084:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003086:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <HAL_ADC_MspInit+0x220>)
 8003088:	2200      	movs	r2, #0
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800308c:	483d      	ldr	r0, [pc, #244]	; (8003184 <HAL_ADC_MspInit+0x220>)
 800308e:	f002 ffff 	bl	8006090 <HAL_DMA_Init>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8003098:	f7ff ff40 	bl	8002f1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a39      	ldr	r2, [pc, #228]	; (8003184 <HAL_ADC_MspInit+0x220>)
 80030a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80030a2:	4a38      	ldr	r2, [pc, #224]	; (8003184 <HAL_ADC_MspInit+0x220>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80030a8:	e05e      	b.n	8003168 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a37      	ldr	r2, [pc, #220]	; (800318c <HAL_ADC_MspInit+0x228>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d159      	bne.n	8003168 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80030b4:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <HAL_ADC_MspInit+0x210>)
 80030b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ba:	4a2e      	ldr	r2, [pc, #184]	; (8003174 <HAL_ADC_MspInit+0x210>)
 80030bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_ADC_MspInit+0x210>)
 80030c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d2:	4b28      	ldr	r3, [pc, #160]	; (8003174 <HAL_ADC_MspInit+0x210>)
 80030d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d8:	4a26      	ldr	r2, [pc, #152]	; (8003174 <HAL_ADC_MspInit+0x210>)
 80030da:	f043 0304 	orr.w	r3, r3, #4
 80030de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030e2:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_ADC_MspInit+0x210>)
 80030e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80030f0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80030f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80030f8:	f000 feba 	bl	8003e70 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80030fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003100:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003104:	f000 feb4 	bl	8003e70 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8003108:	4b21      	ldr	r3, [pc, #132]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 800310a:	4a22      	ldr	r2, [pc, #136]	; (8003194 <HAL_ADC_MspInit+0x230>)
 800310c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 8003110:	2273      	movs	r2, #115	; 0x73
 8003112:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003114:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 800311c:	2200      	movs	r2, #0
 800311e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 8003122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003126:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 800312a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800312e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 8003132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003136:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003138:	4b15      	ldr	r3, [pc, #84]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 800313a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800313e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 8003142:	2200      	movs	r2, #0
 8003144:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 8003148:	2200      	movs	r2, #0
 800314a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800314c:	4810      	ldr	r0, [pc, #64]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 800314e:	f002 ff9f 	bl	8006090 <HAL_DMA_Init>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003158:	f7ff fee0 	bl	8002f1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0c      	ldr	r2, [pc, #48]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 8003160:	64da      	str	r2, [r3, #76]	; 0x4c
 8003162:	4a0b      	ldr	r2, [pc, #44]	; (8003190 <HAL_ADC_MspInit+0x22c>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003168:	bf00      	nop
 800316a:	3738      	adds	r7, #56	; 0x38
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40022000 	.word	0x40022000
 8003174:	58024400 	.word	0x58024400
 8003178:	58020800 	.word	0x58020800
 800317c:	58020000 	.word	0x58020000
 8003180:	58020400 	.word	0x58020400
 8003184:	24000204 	.word	0x24000204
 8003188:	40020010 	.word	0x40020010
 800318c:	58026000 	.word	0x58026000
 8003190:	2400027c 	.word	0x2400027c
 8003194:	40020028 	.word	0x40020028

08003198 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	; 0x28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a34      	ldr	r2, [pc, #208]	; (8003288 <HAL_DAC_MspInit+0xf0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d161      	bne.n	800327e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80031ba:	4b34      	ldr	r3, [pc, #208]	; (800328c <HAL_DAC_MspInit+0xf4>)
 80031bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031c0:	4a32      	ldr	r2, [pc, #200]	; (800328c <HAL_DAC_MspInit+0xf4>)
 80031c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031ca:	4b30      	ldr	r3, [pc, #192]	; (800328c <HAL_DAC_MspInit+0xf4>)
 80031cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_DAC_MspInit+0xf4>)
 80031da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031de:	4a2b      	ldr	r2, [pc, #172]	; (800328c <HAL_DAC_MspInit+0xf4>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_DAC_MspInit+0xf4>)
 80031ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031f6:	2310      	movs	r3, #16
 80031f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031fa:	2303      	movs	r3, #3
 80031fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	4619      	mov	r1, r3
 8003208:	4821      	ldr	r0, [pc, #132]	; (8003290 <HAL_DAC_MspInit+0xf8>)
 800320a:	f005 fd89 	bl	8008d20 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800320e:	4b21      	ldr	r3, [pc, #132]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 8003210:	4a21      	ldr	r2, [pc, #132]	; (8003298 <HAL_DAC_MspInit+0x100>)
 8003212:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003214:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 8003216:	2243      	movs	r2, #67	; 0x43
 8003218:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800321a:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 800321c:	2240      	movs	r2, #64	; 0x40
 800321e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003220:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 8003222:	2200      	movs	r2, #0
 8003224:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003226:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 8003228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800322c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800322e:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 8003230:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003234:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 8003238:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800323c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800323e:	4b15      	ldr	r3, [pc, #84]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 8003240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003244:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 8003248:	2200      	movs	r2, #0
 800324a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 800324e:	2200      	movs	r2, #0
 8003250:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003252:	4810      	ldr	r0, [pc, #64]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 8003254:	f002 ff1c 	bl	8006090 <HAL_DMA_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800325e:	f7ff fe5d 	bl	8002f1c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_DAC_MspInit+0xfc>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2105      	movs	r1, #5
 8003272:	2036      	movs	r0, #54	; 0x36
 8003274:	f002 fade 	bl	8005834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003278:	2036      	movs	r0, #54	; 0x36
 800327a:	f002 faf5 	bl	8005868 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800327e:	bf00      	nop
 8003280:	3728      	adds	r7, #40	; 0x28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40007400 	.word	0x40007400
 800328c:	58024400 	.word	0x58024400
 8003290:	58020000 	.word	0x58020000
 8003294:	24000308 	.word	0x24000308
 8003298:	40020088 	.word	0x40020088

0800329c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b0ba      	sub	sp, #232	; 0xe8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032b4:	f107 0310 	add.w	r3, r7, #16
 80032b8:	22c0      	movs	r2, #192	; 0xc0
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f013 fbad 	bl	8016a1c <memset>
  if(hi2c->Instance==I2C1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a27      	ldr	r2, [pc, #156]	; (8003364 <HAL_I2C_MspInit+0xc8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d146      	bne.n	800335a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032cc:	f04f 0208 	mov.w	r2, #8
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	4618      	mov	r0, r3
 80032e4:	f007 fda8 	bl	800ae38 <HAL_RCCEx_PeriphCLKConfig>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80032ee:	f7ff fe15 	bl	8002f1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_I2C_MspInit+0xcc>)
 80032f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f8:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <HAL_I2C_MspInit+0xcc>)
 80032fa:	f043 0302 	orr.w	r3, r3, #2
 80032fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_I2C_MspInit+0xcc>)
 8003304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003310:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003314:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003318:	2312      	movs	r3, #18
 800331a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800332a:	2304      	movs	r3, #4
 800332c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003330:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003334:	4619      	mov	r1, r3
 8003336:	480d      	ldr	r0, [pc, #52]	; (800336c <HAL_I2C_MspInit+0xd0>)
 8003338:	f005 fcf2 	bl	8008d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <HAL_I2C_MspInit+0xcc>)
 800333e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_I2C_MspInit+0xcc>)
 8003344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003348:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_I2C_MspInit+0xcc>)
 800334e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800335a:	bf00      	nop
 800335c:	37e8      	adds	r7, #232	; 0xe8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40005400 	.word	0x40005400
 8003368:	58024400 	.word	0x58024400
 800336c:	58020400 	.word	0x58020400

08003370 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b0b2      	sub	sp, #200	; 0xc8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003378:	f107 0308 	add.w	r3, r7, #8
 800337c:	22c0      	movs	r2, #192	; 0xc0
 800337e:	2100      	movs	r1, #0
 8003380:	4618      	mov	r0, r3
 8003382:	f013 fb4b 	bl	8016a1c <memset>
  if(hrtc->Instance==RTC)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a10      	ldr	r2, [pc, #64]	; (80033cc <HAL_RTC_MspInit+0x5c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d118      	bne.n	80033c2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003390:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <HAL_RTC_MspInit+0x60>)
 800339e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033a2:	f107 0308 	add.w	r3, r7, #8
 80033a6:	4618      	mov	r0, r3
 80033a8:	f007 fd46 	bl	800ae38 <HAL_RCCEx_PeriphCLKConfig>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80033b2:	f7ff fdb3 	bl	8002f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <HAL_RTC_MspInit+0x64>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a06      	ldr	r2, [pc, #24]	; (80033d4 <HAL_RTC_MspInit+0x64>)
 80033bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033c2:	bf00      	nop
 80033c4:	37c8      	adds	r7, #200	; 0xc8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	58004000 	.word	0x58004000
 80033d0:	00019300 	.word	0x00019300
 80033d4:	58024400 	.word	0x58024400

080033d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b0bc      	sub	sp, #240	; 0xf0
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033f0:	f107 0318 	add.w	r3, r7, #24
 80033f4:	22c0      	movs	r2, #192	; 0xc0
 80033f6:	2100      	movs	r1, #0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f013 fb0f 	bl	8016a1c <memset>
  if(hspi->Instance==SPI1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a4c      	ldr	r2, [pc, #304]	; (8003534 <HAL_SPI_MspInit+0x15c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d145      	bne.n	8003494 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003408:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003414:	2300      	movs	r3, #0
 8003416:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003418:	f107 0318 	add.w	r3, r7, #24
 800341c:	4618      	mov	r0, r3
 800341e:	f007 fd0b 	bl	800ae38 <HAL_RCCEx_PeriphCLKConfig>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003428:	f7ff fd78 	bl	8002f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800342c:	4b42      	ldr	r3, [pc, #264]	; (8003538 <HAL_SPI_MspInit+0x160>)
 800342e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003432:	4a41      	ldr	r2, [pc, #260]	; (8003538 <HAL_SPI_MspInit+0x160>)
 8003434:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003438:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800343c:	4b3e      	ldr	r3, [pc, #248]	; (8003538 <HAL_SPI_MspInit+0x160>)
 800343e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800344a:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <HAL_SPI_MspInit+0x160>)
 800344c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003450:	4a39      	ldr	r2, [pc, #228]	; (8003538 <HAL_SPI_MspInit+0x160>)
 8003452:	f043 0302 	orr.w	r3, r3, #2
 8003456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800345a:	4b37      	ldr	r3, [pc, #220]	; (8003538 <HAL_SPI_MspInit+0x160>)
 800345c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003468:	2318      	movs	r3, #24
 800346a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003480:	2305      	movs	r3, #5
 8003482:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003486:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800348a:	4619      	mov	r1, r3
 800348c:	482b      	ldr	r0, [pc, #172]	; (800353c <HAL_SPI_MspInit+0x164>)
 800348e:	f005 fc47 	bl	8008d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003492:	e04a      	b.n	800352a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a29      	ldr	r2, [pc, #164]	; (8003540 <HAL_SPI_MspInit+0x168>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d145      	bne.n	800352a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800349e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034ae:	f107 0318 	add.w	r3, r7, #24
 80034b2:	4618      	mov	r0, r3
 80034b4:	f007 fcc0 	bl	800ae38 <HAL_RCCEx_PeriphCLKConfig>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80034be:	f7ff fd2d 	bl	8002f1c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034c2:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HAL_SPI_MspInit+0x160>)
 80034c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034c8:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <HAL_SPI_MspInit+0x160>)
 80034ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_SPI_MspInit+0x160>)
 80034d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e0:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_SPI_MspInit+0x160>)
 80034e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e6:	4a14      	ldr	r2, [pc, #80]	; (8003538 <HAL_SPI_MspInit+0x160>)
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_SPI_MspInit+0x160>)
 80034f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80034fe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	2302      	movs	r3, #2
 8003508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003512:	2300      	movs	r3, #0
 8003514:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003518:	2305      	movs	r3, #5
 800351a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003522:	4619      	mov	r1, r3
 8003524:	4805      	ldr	r0, [pc, #20]	; (800353c <HAL_SPI_MspInit+0x164>)
 8003526:	f005 fbfb 	bl	8008d20 <HAL_GPIO_Init>
}
 800352a:	bf00      	nop
 800352c:	37f0      	adds	r7, #240	; 0xf0
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40013000 	.word	0x40013000
 8003538:	58024400 	.word	0x58024400
 800353c:	58020400 	.word	0x58020400
 8003540:	40003800 	.word	0x40003800

08003544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a46      	ldr	r2, [pc, #280]	; (800366c <HAL_TIM_Base_MspInit+0x128>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d12f      	bne.n	80035b6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003556:	4b46      	ldr	r3, [pc, #280]	; (8003670 <HAL_TIM_Base_MspInit+0x12c>)
 8003558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800355c:	4a44      	ldr	r2, [pc, #272]	; (8003670 <HAL_TIM_Base_MspInit+0x12c>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003566:	4b42      	ldr	r3, [pc, #264]	; (8003670 <HAL_TIM_Base_MspInit+0x12c>)
 8003568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003574:	2200      	movs	r2, #0
 8003576:	2105      	movs	r1, #5
 8003578:	2018      	movs	r0, #24
 800357a:	f002 f95b 	bl	8005834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800357e:	2018      	movs	r0, #24
 8003580:	f002 f972 	bl	8005868 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2105      	movs	r1, #5
 8003588:	2019      	movs	r0, #25
 800358a:	f002 f953 	bl	8005834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800358e:	2019      	movs	r0, #25
 8003590:	f002 f96a 	bl	8005868 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003594:	2200      	movs	r2, #0
 8003596:	2105      	movs	r1, #5
 8003598:	201a      	movs	r0, #26
 800359a:	f002 f94b 	bl	8005834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800359e:	201a      	movs	r0, #26
 80035a0:	f002 f962 	bl	8005868 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80035a4:	2200      	movs	r2, #0
 80035a6:	2105      	movs	r1, #5
 80035a8:	201b      	movs	r0, #27
 80035aa:	f002 f943 	bl	8005834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80035ae:	201b      	movs	r0, #27
 80035b0:	f002 f95a 	bl	8005868 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035b4:	e055      	b.n	8003662 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035be:	d117      	bne.n	80035f0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035c0:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <HAL_TIM_Base_MspInit+0x12c>)
 80035c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035c6:	4a2a      	ldr	r2, [pc, #168]	; (8003670 <HAL_TIM_Base_MspInit+0x12c>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035d0:	4b27      	ldr	r3, [pc, #156]	; (8003670 <HAL_TIM_Base_MspInit+0x12c>)
 80035d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2105      	movs	r1, #5
 80035e2:	201c      	movs	r0, #28
 80035e4:	f002 f926 	bl	8005834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035e8:	201c      	movs	r0, #28
 80035ea:	f002 f93d 	bl	8005868 <HAL_NVIC_EnableIRQ>
}
 80035ee:	e038      	b.n	8003662 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1f      	ldr	r2, [pc, #124]	; (8003674 <HAL_TIM_Base_MspInit+0x130>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d117      	bne.n	800362a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_TIM_Base_MspInit+0x12c>)
 80035fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003600:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <HAL_TIM_Base_MspInit+0x12c>)
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800360a:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_TIM_Base_MspInit+0x12c>)
 800360c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003618:	2200      	movs	r2, #0
 800361a:	2105      	movs	r1, #5
 800361c:	201d      	movs	r0, #29
 800361e:	f002 f909 	bl	8005834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003622:	201d      	movs	r0, #29
 8003624:	f002 f920 	bl	8005868 <HAL_NVIC_EnableIRQ>
}
 8003628:	e01b      	b.n	8003662 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a12      	ldr	r2, [pc, #72]	; (8003678 <HAL_TIM_Base_MspInit+0x134>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d116      	bne.n	8003662 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <HAL_TIM_Base_MspInit+0x12c>)
 8003636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800363a:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <HAL_TIM_Base_MspInit+0x12c>)
 800363c:	f043 0304 	orr.w	r3, r3, #4
 8003640:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_TIM_Base_MspInit+0x12c>)
 8003646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003652:	2200      	movs	r2, #0
 8003654:	2105      	movs	r1, #5
 8003656:	201e      	movs	r0, #30
 8003658:	f002 f8ec 	bl	8005834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800365c:	201e      	movs	r0, #30
 800365e:	f002 f903 	bl	8005868 <HAL_NVIC_EnableIRQ>
}
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40010000 	.word	0x40010000
 8003670:	58024400 	.word	0x58024400
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800

0800367c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003684:	f107 0314 	add.w	r3, r7, #20
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a26      	ldr	r2, [pc, #152]	; (8003734 <HAL_TIM_MspPostInit+0xb8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d120      	bne.n	80036e0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <HAL_TIM_MspPostInit+0xbc>)
 80036a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a4:	4a24      	ldr	r2, [pc, #144]	; (8003738 <HAL_TIM_MspPostInit+0xbc>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <HAL_TIM_MspPostInit+0xbc>)
 80036b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	4619      	mov	r1, r3
 80036d8:	4818      	ldr	r0, [pc, #96]	; (800373c <HAL_TIM_MspPostInit+0xc0>)
 80036da:	f005 fb21 	bl	8008d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036de:	e024      	b.n	800372a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e8:	d11f      	bne.n	800372a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ea:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_TIM_MspPostInit+0xbc>)
 80036ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f0:	4a11      	ldr	r2, [pc, #68]	; (8003738 <HAL_TIM_MspPostInit+0xbc>)
 80036f2:	f043 0302 	orr.w	r3, r3, #2
 80036f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036fa:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <HAL_TIM_MspPostInit+0xbc>)
 80036fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800370c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	2302      	movs	r3, #2
 8003710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	2300      	movs	r3, #0
 8003718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800371a:	2301      	movs	r3, #1
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	4619      	mov	r1, r3
 8003724:	4806      	ldr	r0, [pc, #24]	; (8003740 <HAL_TIM_MspPostInit+0xc4>)
 8003726:	f005 fafb 	bl	8008d20 <HAL_GPIO_Init>
}
 800372a:	bf00      	nop
 800372c:	3728      	adds	r7, #40	; 0x28
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40010000 	.word	0x40010000
 8003738:	58024400 	.word	0x58024400
 800373c:	58020000 	.word	0x58020000
 8003740:	58020400 	.word	0x58020400

08003744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b0ba      	sub	sp, #232	; 0xe8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800375c:	f107 0310 	add.w	r3, r7, #16
 8003760:	22c0      	movs	r2, #192	; 0xc0
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f013 f959 	bl	8016a1c <memset>
  if(huart->Instance==USART1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a41      	ldr	r2, [pc, #260]	; (8003874 <HAL_UART_MspInit+0x130>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d17b      	bne.n	800386c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003774:	f04f 0201 	mov.w	r2, #1
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003780:	2318      	movs	r3, #24
 8003782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003786:	f107 0310 	add.w	r3, r7, #16
 800378a:	4618      	mov	r0, r3
 800378c:	f007 fb54 	bl	800ae38 <HAL_RCCEx_PeriphCLKConfig>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003796:	f7ff fbc1 	bl	8002f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800379a:	4b37      	ldr	r3, [pc, #220]	; (8003878 <HAL_UART_MspInit+0x134>)
 800379c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037a0:	4a35      	ldr	r2, [pc, #212]	; (8003878 <HAL_UART_MspInit+0x134>)
 80037a2:	f043 0310 	orr.w	r3, r3, #16
 80037a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037aa:	4b33      	ldr	r3, [pc, #204]	; (8003878 <HAL_UART_MspInit+0x134>)
 80037ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b8:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <HAL_UART_MspInit+0x134>)
 80037ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037be:	4a2e      	ldr	r2, [pc, #184]	; (8003878 <HAL_UART_MspInit+0x134>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037c8:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_UART_MspInit+0x134>)
 80037ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037f0:	2307      	movs	r3, #7
 80037f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037fa:	4619      	mov	r1, r3
 80037fc:	481f      	ldr	r0, [pc, #124]	; (800387c <HAL_UART_MspInit+0x138>)
 80037fe:	f005 fa8f 	bl	8008d20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003802:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <HAL_UART_MspInit+0x13c>)
 8003804:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <HAL_UART_MspInit+0x140>)
 8003806:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_UART_MspInit+0x13c>)
 800380a:	222a      	movs	r2, #42	; 0x2a
 800380c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800380e:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <HAL_UART_MspInit+0x13c>)
 8003810:	2240      	movs	r2, #64	; 0x40
 8003812:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003814:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <HAL_UART_MspInit+0x13c>)
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800381a:	4b19      	ldr	r3, [pc, #100]	; (8003880 <HAL_UART_MspInit+0x13c>)
 800381c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003820:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003822:	4b17      	ldr	r3, [pc, #92]	; (8003880 <HAL_UART_MspInit+0x13c>)
 8003824:	2200      	movs	r2, #0
 8003826:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003828:	4b15      	ldr	r3, [pc, #84]	; (8003880 <HAL_UART_MspInit+0x13c>)
 800382a:	2200      	movs	r2, #0
 800382c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800382e:	4b14      	ldr	r3, [pc, #80]	; (8003880 <HAL_UART_MspInit+0x13c>)
 8003830:	2200      	movs	r2, #0
 8003832:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003834:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_UART_MspInit+0x13c>)
 8003836:	2200      	movs	r2, #0
 8003838:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800383a:	4b11      	ldr	r3, [pc, #68]	; (8003880 <HAL_UART_MspInit+0x13c>)
 800383c:	2200      	movs	r2, #0
 800383e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003840:	480f      	ldr	r0, [pc, #60]	; (8003880 <HAL_UART_MspInit+0x13c>)
 8003842:	f002 fc25 	bl	8006090 <HAL_DMA_Init>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800384c:	f7ff fb66 	bl	8002f1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <HAL_UART_MspInit+0x13c>)
 8003854:	67da      	str	r2, [r3, #124]	; 0x7c
 8003856:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <HAL_UART_MspInit+0x13c>)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800385c:	2200      	movs	r2, #0
 800385e:	2105      	movs	r1, #5
 8003860:	2025      	movs	r0, #37	; 0x25
 8003862:	f001 ffe7 	bl	8005834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003866:	2025      	movs	r0, #37	; 0x25
 8003868:	f001 fffe 	bl	8005868 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800386c:	bf00      	nop
 800386e:	37e8      	adds	r7, #232	; 0xe8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40011000 	.word	0x40011000
 8003878:	58024400 	.word	0x58024400
 800387c:	58020000 	.word	0x58020000
 8003880:	240006cc 	.word	0x240006cc
 8003884:	40020040 	.word	0x40020040

08003888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b090      	sub	sp, #64	; 0x40
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b0f      	cmp	r3, #15
 8003894:	d827      	bhi.n	80038e6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003896:	2200      	movs	r2, #0
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	2036      	movs	r0, #54	; 0x36
 800389c:	f001 ffca 	bl	8005834 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038a0:	2036      	movs	r0, #54	; 0x36
 80038a2:	f001 ffe1 	bl	8005868 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80038a6:	4a29      	ldr	r2, [pc, #164]	; (800394c <HAL_InitTick+0xc4>)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038ac:	4b28      	ldr	r3, [pc, #160]	; (8003950 <HAL_InitTick+0xc8>)
 80038ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038b2:	4a27      	ldr	r2, [pc, #156]	; (8003950 <HAL_InitTick+0xc8>)
 80038b4:	f043 0310 	orr.w	r3, r3, #16
 80038b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038bc:	4b24      	ldr	r3, [pc, #144]	; (8003950 <HAL_InitTick+0xc8>)
 80038be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038ca:	f107 0210 	add.w	r2, r7, #16
 80038ce:	f107 0314 	add.w	r3, r7, #20
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f007 fa6d 	bl	800adb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <HAL_InitTick+0x6a>
 80038e4:	e001      	b.n	80038ea <HAL_InitTick+0x62>
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e02b      	b.n	8003942 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038ea:	f007 fa37 	bl	800ad5c <HAL_RCC_GetPCLK1Freq>
 80038ee:	63f8      	str	r0, [r7, #60]	; 0x3c
 80038f0:	e004      	b.n	80038fc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80038f2:	f007 fa33 	bl	800ad5c <HAL_RCC_GetPCLK1Freq>
 80038f6:	4603      	mov	r3, r0
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fe:	4a15      	ldr	r2, [pc, #84]	; (8003954 <HAL_InitTick+0xcc>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	0c9b      	lsrs	r3, r3, #18
 8003906:	3b01      	subs	r3, #1
 8003908:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800390a:	4b13      	ldr	r3, [pc, #76]	; (8003958 <HAL_InitTick+0xd0>)
 800390c:	4a13      	ldr	r2, [pc, #76]	; (800395c <HAL_InitTick+0xd4>)
 800390e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <HAL_InitTick+0xd0>)
 8003912:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003916:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003918:	4a0f      	ldr	r2, [pc, #60]	; (8003958 <HAL_InitTick+0xd0>)
 800391a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800391e:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <HAL_InitTick+0xd0>)
 8003920:	2200      	movs	r2, #0
 8003922:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <HAL_InitTick+0xd0>)
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800392a:	480b      	ldr	r0, [pc, #44]	; (8003958 <HAL_InitTick+0xd0>)
 800392c:	f00a fef5 	bl	800e71a <HAL_TIM_Base_Init>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d104      	bne.n	8003940 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003936:	4808      	ldr	r0, [pc, #32]	; (8003958 <HAL_InitTick+0xd0>)
 8003938:	f00a ff46 	bl	800e7c8 <HAL_TIM_Base_Start_IT>
 800393c:	4603      	mov	r3, r0
 800393e:	e000      	b.n	8003942 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
}
 8003942:	4618      	mov	r0, r3
 8003944:	3740      	adds	r7, #64	; 0x40
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	24000098 	.word	0x24000098
 8003950:	58024400 	.word	0x58024400
 8003954:	431bde83 	.word	0x431bde83
 8003958:	240010bc 	.word	0x240010bc
 800395c:	40001000 	.word	0x40001000

08003960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003964:	e7fe      	b.n	8003964 <NMI_Handler+0x4>

08003966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003966:	b480      	push	{r7}
 8003968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800396a:	e7fe      	b.n	800396a <HardFault_Handler+0x4>

0800396c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003970:	e7fe      	b.n	8003970 <MemManage_Handler+0x4>

08003972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003976:	e7fe      	b.n	8003976 <BusFault_Handler+0x4>

08003978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800397c:	e7fe      	b.n	800397c <UsageFault_Handler+0x4>

0800397e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003982:	bf00      	nop
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003990:	4802      	ldr	r0, [pc, #8]	; (800399c <DMA1_Stream0_IRQHandler+0x10>)
 8003992:	f003 fea7 	bl	80076e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	24000204 	.word	0x24000204

080039a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80039a4:	4802      	ldr	r0, [pc, #8]	; (80039b0 <DMA1_Stream1_IRQHandler+0x10>)
 80039a6:	f003 fe9d 	bl	80076e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	2400027c 	.word	0x2400027c

080039b4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <DMA1_Stream2_IRQHandler+0x10>)
 80039ba:	f003 fe93 	bl	80076e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	240006cc 	.word	0x240006cc

080039c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <DMA1_Stream5_IRQHandler+0x10>)
 80039ce:	f003 fe89 	bl	80076e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	24000308 	.word	0x24000308

080039dc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <TIM1_BRK_IRQHandler+0x10>)
 80039e2:	f00b fa08 	bl	800edf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	24000508 	.word	0x24000508

080039f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <TIM1_UP_IRQHandler+0x10>)
 80039f6:	f00b f9fe 	bl	800edf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	24000508 	.word	0x24000508

08003a04 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003a0a:	f00b f9f4 	bl	800edf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	24000508 	.word	0x24000508

08003a18 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <TIM1_CC_IRQHandler+0x10>)
 8003a1e:	f00b f9ea 	bl	800edf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	24000508 	.word	0x24000508

08003a2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a30:	4802      	ldr	r0, [pc, #8]	; (8003a3c <TIM2_IRQHandler+0x10>)
 8003a32:	f00b f9e0 	bl	800edf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	24000554 	.word	0x24000554

08003a40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a44:	4802      	ldr	r0, [pc, #8]	; (8003a50 <TIM3_IRQHandler+0x10>)
 8003a46:	f00b f9d6 	bl	800edf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	240005a0 	.word	0x240005a0

08003a54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <TIM4_IRQHandler+0x10>)
 8003a5a:	f00b f9cc 	bl	800edf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	240005ec 	.word	0x240005ec

08003a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <USART1_IRQHandler+0x10>)
 8003a6e:	f00c fd85 	bl	801057c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	24000638 	.word	0x24000638

08003a7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <TIM6_DAC_IRQHandler+0x20>)
 8003a82:	791b      	ldrb	r3, [r3, #4]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003a8a:	4804      	ldr	r0, [pc, #16]	; (8003a9c <TIM6_DAC_IRQHandler+0x20>)
 8003a8c:	f002 f881 	bl	8005b92 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003a90:	4803      	ldr	r0, [pc, #12]	; (8003aa0 <TIM6_DAC_IRQHandler+0x24>)
 8003a92:	f00b f9b0 	bl	800edf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	240002f4 	.word	0x240002f4
 8003aa0:	240010bc 	.word	0x240010bc

08003aa4 <ITM_SendChar>:
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <ITM_SendChar+0x48>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a0e      	ldr	r2, [pc, #56]	; (8003aec <ITM_SendChar+0x48>)
 8003ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <ITM_SendChar+0x4c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a0c      	ldr	r2, [pc, #48]	; (8003af0 <ITM_SendChar+0x4c>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	bf00      	nop
 8003ac8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f8      	beq.n	8003ac8 <ITM_SendChar+0x24>
 8003ad6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	e000edfc 	.word	0xe000edfc
 8003af0:	e0000e00 	.word	0xe0000e00

08003af4 <_read>:
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	e00a      	b.n	8003b1c <_read+0x28>
 8003b06:	f3af 8000 	nop.w
 8003b0a:	4601      	mov	r1, r0
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	60ba      	str	r2, [r7, #8]
 8003b12:	b2ca      	uxtb	r2, r1
 8003b14:	701a      	strb	r2, [r3, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	dbf0      	blt.n	8003b06 <_read+0x12>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <_write>:
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	e009      	b.n	8003b54 <_write+0x26>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	60ba      	str	r2, [r7, #8]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff ffab 	bl	8003aa4 <ITM_SendChar>
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	3301      	adds	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	dbf1      	blt.n	8003b40 <_write+0x12>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <_close>:
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <_fstat>:
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	2300      	movs	r3, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <_isatty>:
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <_lseek>:
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <_sbrk>:
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <_sbrk+0x5c>)
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <_sbrk+0x60>)
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <_sbrk+0x64>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d102      	bne.n	8003bf2 <_sbrk+0x22>
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <_sbrk+0x64>)
 8003bee:	4a12      	ldr	r2, [pc, #72]	; (8003c38 <_sbrk+0x68>)
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <_sbrk+0x64>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d207      	bcs.n	8003c10 <_sbrk+0x40>
 8003c00:	f012 fec4 	bl	801698c <__errno>
 8003c04:	4603      	mov	r3, r0
 8003c06:	220c      	movs	r2, #12
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c0e:	e009      	b.n	8003c24 <_sbrk+0x54>
 8003c10:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <_sbrk+0x64>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <_sbrk+0x64>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <_sbrk+0x64>)
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	24080000 	.word	0x24080000
 8003c30:	00000400 	.word	0x00000400
 8003c34:	24001108 	.word	0x24001108
 8003c38:	24005a70 	.word	0x24005a70

08003c3c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003c40:	4b37      	ldr	r3, [pc, #220]	; (8003d20 <SystemInit+0xe4>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c46:	4a36      	ldr	r2, [pc, #216]	; (8003d20 <SystemInit+0xe4>)
 8003c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003c50:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <SystemInit+0xe8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	2b06      	cmp	r3, #6
 8003c5a:	d807      	bhi.n	8003c6c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003c5c:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <SystemInit+0xe8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f023 030f 	bic.w	r3, r3, #15
 8003c64:	4a2f      	ldr	r2, [pc, #188]	; (8003d24 <SystemInit+0xe8>)
 8003c66:	f043 0307 	orr.w	r3, r3, #7
 8003c6a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003c6c:	4b2e      	ldr	r3, [pc, #184]	; (8003d28 <SystemInit+0xec>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2d      	ldr	r2, [pc, #180]	; (8003d28 <SystemInit+0xec>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003c78:	4b2b      	ldr	r3, [pc, #172]	; (8003d28 <SystemInit+0xec>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003c7e:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <SystemInit+0xec>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4929      	ldr	r1, [pc, #164]	; (8003d28 <SystemInit+0xec>)
 8003c84:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <SystemInit+0xf0>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003c8a:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <SystemInit+0xe8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003c96:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <SystemInit+0xe8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 030f 	bic.w	r3, r3, #15
 8003c9e:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <SystemInit+0xe8>)
 8003ca0:	f043 0307 	orr.w	r3, r3, #7
 8003ca4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <SystemInit+0xec>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003cac:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <SystemInit+0xec>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <SystemInit+0xec>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <SystemInit+0xec>)
 8003cba:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <SystemInit+0xf4>)
 8003cbc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003cbe:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <SystemInit+0xec>)
 8003cc0:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <SystemInit+0xf8>)
 8003cc2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003cc4:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <SystemInit+0xec>)
 8003cc6:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <SystemInit+0xfc>)
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003cca:	4b17      	ldr	r3, [pc, #92]	; (8003d28 <SystemInit+0xec>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003cd0:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <SystemInit+0xec>)
 8003cd2:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <SystemInit+0xfc>)
 8003cd4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003cd6:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <SystemInit+0xec>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003cdc:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <SystemInit+0xec>)
 8003cde:	4a16      	ldr	r2, [pc, #88]	; (8003d38 <SystemInit+0xfc>)
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003ce2:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <SystemInit+0xec>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <SystemInit+0xec>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <SystemInit+0xec>)
 8003cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <SystemInit+0xec>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <SystemInit+0x100>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <SystemInit+0x104>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d06:	d202      	bcs.n	8003d0e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <SystemInit+0x108>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <SystemInit+0x10c>)
 8003d10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000ed00 	.word	0xe000ed00
 8003d24:	52002000 	.word	0x52002000
 8003d28:	58024400 	.word	0x58024400
 8003d2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d30:	02020200 	.word	0x02020200
 8003d34:	01ff0000 	.word	0x01ff0000
 8003d38:	01010280 	.word	0x01010280
 8003d3c:	5c001000 	.word	0x5c001000
 8003d40:	ffff0000 	.word	0xffff0000
 8003d44:	51008108 	.word	0x51008108
 8003d48:	52004000 	.word	0x52004000

08003d4c <Reset_Handler>:
 8003d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d84 <LoopFillZerobss+0xe>
 8003d50:	f7ff ff74 	bl	8003c3c <SystemInit>
 8003d54:	480c      	ldr	r0, [pc, #48]	; (8003d88 <LoopFillZerobss+0x12>)
 8003d56:	490d      	ldr	r1, [pc, #52]	; (8003d8c <LoopFillZerobss+0x16>)
 8003d58:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <LoopFillZerobss+0x1a>)
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e002      	b.n	8003d64 <LoopCopyDataInit>

08003d5e <CopyDataInit>:
 8003d5e:	58d4      	ldr	r4, [r2, r3]
 8003d60:	50c4      	str	r4, [r0, r3]
 8003d62:	3304      	adds	r3, #4

08003d64 <LoopCopyDataInit>:
 8003d64:	18c4      	adds	r4, r0, r3
 8003d66:	428c      	cmp	r4, r1
 8003d68:	d3f9      	bcc.n	8003d5e <CopyDataInit>
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <LoopFillZerobss+0x1e>)
 8003d6c:	4c0a      	ldr	r4, [pc, #40]	; (8003d98 <LoopFillZerobss+0x22>)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e001      	b.n	8003d76 <LoopFillZerobss>

08003d72 <FillZerobss>:
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	3204      	adds	r2, #4

08003d76 <LoopFillZerobss>:
 8003d76:	42a2      	cmp	r2, r4
 8003d78:	d3fb      	bcc.n	8003d72 <FillZerobss>
 8003d7a:	f012 fe0d 	bl	8016998 <__libc_init_array>
 8003d7e:	f7fd f903 	bl	8000f88 <main>
 8003d82:	4770      	bx	lr
 8003d84:	24080000 	.word	0x24080000
 8003d88:	24000000 	.word	0x24000000
 8003d8c:	24000108 	.word	0x24000108
 8003d90:	08017884 	.word	0x08017884
 8003d94:	24000120 	.word	0x24000120
 8003d98:	24005a70 	.word	0x24005a70

08003d9c <ADC3_IRQHandler>:
 8003d9c:	e7fe      	b.n	8003d9c <ADC3_IRQHandler>
	...

08003da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003da6:	2003      	movs	r0, #3
 8003da8:	f001 fd39 	bl	800581e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dac:	f006 fe2c 	bl	800aa08 <HAL_RCC_GetSysClockFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <HAL_Init+0x68>)
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	4913      	ldr	r1, [pc, #76]	; (8003e0c <HAL_Init+0x6c>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dca:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <HAL_Init+0x68>)
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	; (8003e0c <HAL_Init+0x6c>)
 8003dd4:	5cd3      	ldrb	r3, [r2, r3]
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8003de0:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <HAL_Init+0x70>)
 8003de2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003de4:	4a0b      	ldr	r2, [pc, #44]	; (8003e14 <HAL_Init+0x74>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dea:	2005      	movs	r0, #5
 8003dec:	f7ff fd4c 	bl	8003888 <HAL_InitTick>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e002      	b.n	8003e00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003dfa:	f7ff f895 	bl	8002f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	58024400 	.word	0x58024400
 8003e0c:	080177d0 	.word	0x080177d0
 8003e10:	24000094 	.word	0x24000094
 8003e14:	24000090 	.word	0x24000090

08003e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_IncTick+0x20>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_IncTick+0x24>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4413      	add	r3, r2
 8003e28:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <HAL_IncTick+0x24>)
 8003e2a:	6013      	str	r3, [r2, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	2400009c 	.word	0x2400009c
 8003e3c:	2400110c 	.word	0x2400110c

08003e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return uwTick;
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_GetTick+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	2400110c 	.word	0x2400110c

08003e58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <HAL_GetREVID+0x14>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0c1b      	lsrs	r3, r3, #16
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	5c001000 	.word	0x5c001000

08003e70 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003e7a:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	4904      	ldr	r1, [pc, #16]	; (8003e98 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	58000400 	.word	0x58000400

08003e9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	609a      	str	r2, [r3, #8]
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	609a      	str	r2, [r3, #8]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3360      	adds	r3, #96	; 0x60
 8003f16:	461a      	mov	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	431a      	orrs	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	611a      	str	r2, [r3, #16]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b087      	sub	sp, #28
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3360      	adds	r3, #96	; 0x60
 8003f86:	461a      	mov	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	601a      	str	r2, [r3, #0]
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b087      	sub	sp, #28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3330      	adds	r3, #48	; 0x30
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	4413      	add	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	211f      	movs	r1, #31
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	401a      	ands	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	0e9b      	lsrs	r3, r3, #26
 800400a:	f003 011f 	and.w	r1, r3, #31
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	431a      	orrs	r2, r3
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f023 0203 	bic.w	r2, r3, #3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3314      	adds	r3, #20
 8004060:	461a      	mov	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	0e5b      	lsrs	r3, r3, #25
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	4413      	add	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	0d1b      	lsrs	r3, r3, #20
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2107      	movs	r1, #7
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	401a      	ands	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	0d1b      	lsrs	r3, r3, #20
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	fa01 f303 	lsl.w	r3, r1, r3
 8004094:	431a      	orrs	r2, r3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c0:	43db      	mvns	r3, r3
 80040c2:	401a      	ands	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f003 0318 	and.w	r3, r3, #24
 80040ca:	4908      	ldr	r1, [pc, #32]	; (80040ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80040cc:	40d9      	lsrs	r1, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	400b      	ands	r3, r1
 80040d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d6:	431a      	orrs	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	000fffff 	.word	0x000fffff

080040f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 031f 	and.w	r3, r3, #31
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <LL_ADC_DisableDeepPowerDown+0x20>)
 800411a:	4013      	ands	r3, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6093      	str	r3, [r2, #8]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	5fffffc0 	.word	0x5fffffc0

08004130 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004144:	d101      	bne.n	800414a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <LL_ADC_EnableInternalRegulator+0x24>)
 8004166:	4013      	ands	r3, r2
 8004168:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	6fffffc0 	.word	0x6fffffc0

08004180 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004194:	d101      	bne.n	800419a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <LL_ADC_Enable+0x24>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	f043 0201 	orr.w	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	7fffffc0 	.word	0x7fffffc0

080041d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <LL_ADC_Disable+0x24>)
 80041de:	4013      	ands	r3, r2
 80041e0:	f043 0202 	orr.w	r2, r3, #2
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	7fffffc0 	.word	0x7fffffc0

080041f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <LL_ADC_IsEnabled+0x18>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <LL_ADC_IsEnabled+0x1a>
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b02      	cmp	r3, #2
 8004230:	d101      	bne.n	8004236 <LL_ADC_IsDisableOngoing+0x18>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <LL_ADC_IsDisableOngoing+0x1a>
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <LL_ADC_REG_StartConversion+0x24>)
 8004252:	4013      	ands	r3, r2
 8004254:	f043 0204 	orr.w	r2, r3, #4
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	7fffffc0 	.word	0x7fffffc0

0800426c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b04      	cmp	r3, #4
 800427e:	d101      	bne.n	8004284 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d101      	bne.n	80042aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042b8:	b590      	push	{r4, r7, lr}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e18f      	b.n	80045f2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7fe fe3f 	bl	8002f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff19 	bl	8004130 <LL_ADC_IsDeepPowerDownEnabled>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d004      	beq.n	800430e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff feff 	bl	800410c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff ff34 	bl	8004180 <LL_ADC_IsInternalRegulatorEnabled>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d114      	bne.n	8004348 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ff18 	bl	8004158 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004328:	4b87      	ldr	r3, [pc, #540]	; (8004548 <HAL_ADC_Init+0x290>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	099b      	lsrs	r3, r3, #6
 800432e:	4a87      	ldr	r2, [pc, #540]	; (800454c <HAL_ADC_Init+0x294>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	3301      	adds	r3, #1
 8004338:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800433a:	e002      	b.n	8004342 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	3b01      	subs	r3, #1
 8004340:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1f9      	bne.n	800433c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ff17 	bl	8004180 <LL_ADC_IsInternalRegulatorEnabled>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10d      	bne.n	8004374 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	f043 0210 	orr.w	r2, r3, #16
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	f043 0201 	orr.w	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff ff77 	bl	800426c <LL_ADC_REG_IsConversionOngoing>
 800437e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	f040 8129 	bne.w	80045e0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f040 8125 	bne.w	80045e0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800439e:	f043 0202 	orr.w	r2, r3, #2
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff ff24 	bl	80041f8 <LL_ADC_IsEnabled>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d136      	bne.n	8004424 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a65      	ldr	r2, [pc, #404]	; (8004550 <HAL_ADC_Init+0x298>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_ADC_Init+0x112>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a63      	ldr	r2, [pc, #396]	; (8004554 <HAL_ADC_Init+0x29c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10e      	bne.n	80043e8 <HAL_ADC_Init+0x130>
 80043ca:	4861      	ldr	r0, [pc, #388]	; (8004550 <HAL_ADC_Init+0x298>)
 80043cc:	f7ff ff14 	bl	80041f8 <LL_ADC_IsEnabled>
 80043d0:	4604      	mov	r4, r0
 80043d2:	4860      	ldr	r0, [pc, #384]	; (8004554 <HAL_ADC_Init+0x29c>)
 80043d4:	f7ff ff10 	bl	80041f8 <LL_ADC_IsEnabled>
 80043d8:	4603      	mov	r3, r0
 80043da:	4323      	orrs	r3, r4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	e008      	b.n	80043fa <HAL_ADC_Init+0x142>
 80043e8:	485b      	ldr	r0, [pc, #364]	; (8004558 <HAL_ADC_Init+0x2a0>)
 80043ea:	f7ff ff05 	bl	80041f8 <LL_ADC_IsEnabled>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d012      	beq.n	8004424 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a53      	ldr	r2, [pc, #332]	; (8004550 <HAL_ADC_Init+0x298>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_ADC_Init+0x15a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a51      	ldr	r2, [pc, #324]	; (8004554 <HAL_ADC_Init+0x29c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d101      	bne.n	8004416 <HAL_ADC_Init+0x15e>
 8004412:	4a52      	ldr	r2, [pc, #328]	; (800455c <HAL_ADC_Init+0x2a4>)
 8004414:	e000      	b.n	8004418 <HAL_ADC_Init+0x160>
 8004416:	4a52      	ldr	r2, [pc, #328]	; (8004560 <HAL_ADC_Init+0x2a8>)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f7ff fd3c 	bl	8003e9c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004424:	f7ff fd18 	bl	8003e58 <HAL_GetREVID>
 8004428:	4603      	mov	r3, r0
 800442a:	f241 0203 	movw	r2, #4099	; 0x1003
 800442e:	4293      	cmp	r3, r2
 8004430:	d914      	bls.n	800445c <HAL_ADC_Init+0x1a4>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b10      	cmp	r3, #16
 8004438:	d110      	bne.n	800445c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	7d5b      	ldrb	r3, [r3, #21]
 800443e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004444:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800444a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	7f1b      	ldrb	r3, [r3, #28]
 8004450:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004452:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004454:	f043 030c 	orr.w	r3, r3, #12
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e00d      	b.n	8004478 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7d5b      	ldrb	r3, [r3, #21]
 8004460:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004466:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800446c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7f1b      	ldrb	r3, [r3, #28]
 8004472:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	7f1b      	ldrb	r3, [r3, #28]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d106      	bne.n	800448e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	3b01      	subs	r3, #1
 8004486:	045b      	lsls	r3, r3, #17
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d009      	beq.n	80044aa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	4b2c      	ldr	r3, [pc, #176]	; (8004564 <HAL_ADC_Init+0x2ac>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	69b9      	ldr	r1, [r7, #24]
 80044ba:	430b      	orrs	r3, r1
 80044bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fed2 	bl	800426c <LL_ADC_REG_IsConversionOngoing>
 80044c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fedf 	bl	8004292 <LL_ADC_INJ_IsConversionOngoing>
 80044d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d15f      	bne.n	800459c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d15c      	bne.n	800459c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	7d1b      	ldrb	r3, [r3, #20]
 80044e6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <HAL_ADC_Init+0x2b0>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	69b9      	ldr	r1, [r7, #24]
 8004500:	430b      	orrs	r3, r1
 8004502:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800450a:	2b01      	cmp	r3, #1
 800450c:	d130      	bne.n	8004570 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <HAL_ADC_Init+0x2b4>)
 800451c:	4013      	ands	r3, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004522:	3a01      	subs	r2, #1
 8004524:	0411      	lsls	r1, r2, #16
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800452a:	4311      	orrs	r1, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004530:	4311      	orrs	r1, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004536:	430a      	orrs	r2, r1
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	611a      	str	r2, [r3, #16]
 8004544:	e01c      	b.n	8004580 <HAL_ADC_Init+0x2c8>
 8004546:	bf00      	nop
 8004548:	24000090 	.word	0x24000090
 800454c:	053e2d63 	.word	0x053e2d63
 8004550:	40022000 	.word	0x40022000
 8004554:	40022100 	.word	0x40022100
 8004558:	58026000 	.word	0x58026000
 800455c:	40022300 	.word	0x40022300
 8004560:	58026300 	.word	0x58026300
 8004564:	fff0c003 	.word	0xfff0c003
 8004568:	ffffbffc 	.word	0xffffbffc
 800456c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fdec 	bl	8005174 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d10c      	bne.n	80045be <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	f023 010f 	bic.w	r1, r3, #15
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	1e5a      	subs	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
 80045bc:	e007      	b.n	80045ce <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 020f 	bic.w	r2, r2, #15
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	f023 0303 	bic.w	r3, r3, #3
 80045d6:	f043 0201 	orr.w	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
 80045de:	e007      	b.n	80045f0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e4:	f043 0210 	orr.w	r2, r3, #16
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80045f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3724      	adds	r7, #36	; 0x24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd90      	pop	{r4, r7, pc}
 80045fa:	bf00      	nop

080045fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a55      	ldr	r2, [pc, #340]	; (8004764 <HAL_ADC_Start_DMA+0x168>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_ADC_Start_DMA+0x20>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a54      	ldr	r2, [pc, #336]	; (8004768 <HAL_ADC_Start_DMA+0x16c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_ADC_Start_DMA+0x24>
 800461c:	4b53      	ldr	r3, [pc, #332]	; (800476c <HAL_ADC_Start_DMA+0x170>)
 800461e:	e000      	b.n	8004622 <HAL_ADC_Start_DMA+0x26>
 8004620:	4b53      	ldr	r3, [pc, #332]	; (8004770 <HAL_ADC_Start_DMA+0x174>)
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fd64 	bl	80040f0 <LL_ADC_GetMultimode>
 8004628:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fe1c 	bl	800426c <LL_ADC_REG_IsConversionOngoing>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	f040 808c 	bne.w	8004754 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_ADC_Start_DMA+0x4e>
 8004646:	2302      	movs	r3, #2
 8004648:	e087      	b.n	800475a <HAL_ADC_Start_DMA+0x15e>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b05      	cmp	r3, #5
 800465c:	d002      	beq.n	8004664 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b09      	cmp	r3, #9
 8004662:	d170      	bne.n	8004746 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fc07 	bl	8004e78 <ADC_Enable>
 800466a:	4603      	mov	r3, r0
 800466c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800466e:	7dfb      	ldrb	r3, [r7, #23]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d163      	bne.n	800473c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004678:	4b3e      	ldr	r3, [pc, #248]	; (8004774 <HAL_ADC_Start_DMA+0x178>)
 800467a:	4013      	ands	r3, r2
 800467c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a37      	ldr	r2, [pc, #220]	; (8004768 <HAL_ADC_Start_DMA+0x16c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d002      	beq.n	8004694 <HAL_ADC_Start_DMA+0x98>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	e000      	b.n	8004696 <HAL_ADC_Start_DMA+0x9a>
 8004694:	4b33      	ldr	r3, [pc, #204]	; (8004764 <HAL_ADC_Start_DMA+0x168>)
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	4293      	cmp	r3, r2
 800469c:	d002      	beq.n	80046a4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d006      	beq.n	80046ca <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	f023 0206 	bic.w	r2, r3, #6
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	659a      	str	r2, [r3, #88]	; 0x58
 80046c8:	e002      	b.n	80046d0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d4:	4a28      	ldr	r2, [pc, #160]	; (8004778 <HAL_ADC_Start_DMA+0x17c>)
 80046d6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046dc:	4a27      	ldr	r2, [pc, #156]	; (800477c <HAL_ADC_Start_DMA+0x180>)
 80046de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e4:	4a26      	ldr	r2, [pc, #152]	; (8004780 <HAL_ADC_Start_DMA+0x184>)
 80046e6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	221c      	movs	r2, #28
 80046ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0210 	orr.w	r2, r2, #16
 8004706:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f7ff fc89 	bl	800402a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3340      	adds	r3, #64	; 0x40
 8004722:	4619      	mov	r1, r3
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f002 f80e 	bl	8006748 <HAL_DMA_Start_IT>
 800472c:	4603      	mov	r3, r0
 800472e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fd85 	bl	8004244 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800473a:	e00d      	b.n	8004758 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004744:	e008      	b.n	8004758 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004752:	e001      	b.n	8004758 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004754:	2302      	movs	r3, #2
 8004756:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004758:	7dfb      	ldrb	r3, [r7, #23]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40022000 	.word	0x40022000
 8004768:	40022100 	.word	0x40022100
 800476c:	40022300 	.word	0x40022300
 8004770:	58026300 	.word	0x58026300
 8004774:	fffff0fe 	.word	0xfffff0fe
 8004778:	0800504b 	.word	0x0800504b
 800477c:	08005123 	.word	0x08005123
 8004780:	0800513f 	.word	0x0800513f

08004784 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b0a1      	sub	sp, #132	; 0x84
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4a65      	ldr	r2, [pc, #404]	; (8004970 <HAL_ADC_ConfigChannel+0x1b0>)
 80047da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x2a>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e32e      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x688>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fd38 	bl	800426c <LL_ADC_REG_IsConversionOngoing>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f040 8313 	bne.w	8004e2a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	db2c      	blt.n	8004866 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004814:	2b00      	cmp	r3, #0
 8004816:	d108      	bne.n	800482a <HAL_ADC_ConfigChannel+0x6a>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	0e9b      	lsrs	r3, r3, #26
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2201      	movs	r2, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	e016      	b.n	8004858 <HAL_ADC_ConfigChannel+0x98>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004832:	fa93 f3a3 	rbit	r3, r3
 8004836:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800483a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800483c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004842:	2320      	movs	r3, #32
 8004844:	e003      	b.n	800484e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004848:	fab3 f383 	clz	r3, r3
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	2201      	movs	r2, #1
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	69d1      	ldr	r1, [r2, #28]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	430b      	orrs	r3, r1
 8004864:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6859      	ldr	r1, [r3, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	f7ff fbad 	bl	8003fd2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fcf5 	bl	800426c <LL_ADC_REG_IsConversionOngoing>
 8004882:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fd02 	bl	8004292 <LL_ADC_INJ_IsConversionOngoing>
 800488e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 80b8 	bne.w	8004a08 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 80b4 	bne.w	8004a08 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	461a      	mov	r2, r3
 80048ae:	f7ff fbcf 	bl	8004050 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048b2:	4b30      	ldr	r3, [pc, #192]	; (8004974 <HAL_ADC_ConfigChannel+0x1b4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80048ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048be:	d10b      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x118>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	695a      	ldr	r2, [r3, #20]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	089b      	lsrs	r3, r3, #2
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	e01d      	b.n	8004914 <HAL_ADC_ConfigChannel+0x154>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10b      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x13e>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695a      	ldr	r2, [r3, #20]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	089b      	lsrs	r3, r3, #2
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	e00a      	b.n	8004914 <HAL_ADC_ConfigChannel+0x154>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	089b      	lsrs	r3, r3, #2
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b04      	cmp	r3, #4
 800491c:	d02c      	beq.n	8004978 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6919      	ldr	r1, [r3, #16]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800492c:	f7ff faea 	bl	8003f04 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	6919      	ldr	r1, [r3, #16]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	7e5b      	ldrb	r3, [r3, #25]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d102      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x186>
 8004940:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004944:	e000      	b.n	8004948 <HAL_ADC_ConfigChannel+0x188>
 8004946:	2300      	movs	r3, #0
 8004948:	461a      	mov	r2, r3
 800494a:	f7ff fb14 	bl	8003f76 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6919      	ldr	r1, [r3, #16]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	7e1b      	ldrb	r3, [r3, #24]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d102      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x1a4>
 800495e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004962:	e000      	b.n	8004966 <HAL_ADC_ConfigChannel+0x1a6>
 8004964:	2300      	movs	r3, #0
 8004966:	461a      	mov	r2, r3
 8004968:	f7ff faec 	bl	8003f44 <LL_ADC_SetDataRightShift>
 800496c:	e04c      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x248>
 800496e:	bf00      	nop
 8004970:	47ff0000 	.word	0x47ff0000
 8004974:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	069b      	lsls	r3, r3, #26
 8004988:	429a      	cmp	r2, r3
 800498a:	d107      	bne.n	800499c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800499a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	069b      	lsls	r3, r3, #26
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d107      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049be:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	069b      	lsls	r3, r3, #26
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d107      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049e2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	069b      	lsls	r3, r3, #26
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d107      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a06:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fbf3 	bl	80041f8 <LL_ADC_IsEnabled>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f040 8211 	bne.w	8004e3c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6819      	ldr	r1, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	461a      	mov	r2, r3
 8004a28:	f7ff fb3e 	bl	80040a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4aa1      	ldr	r2, [pc, #644]	; (8004cb8 <HAL_ADC_ConfigChannel+0x4f8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	f040 812e 	bne.w	8004c94 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10b      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x2a0>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	0e9b      	lsrs	r3, r3, #26
 8004a4e:	3301      	adds	r3, #1
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	bf94      	ite	ls
 8004a58:	2301      	movls	r3, #1
 8004a5a:	2300      	movhi	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e019      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x2d4>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004a78:	2320      	movs	r3, #32
 8004a7a:	e003      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7e:	fab3 f383 	clz	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	3301      	adds	r3, #1
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	2b09      	cmp	r3, #9
 8004a8c:	bf94      	ite	ls
 8004a8e:	2301      	movls	r3, #1
 8004a90:	2300      	movhi	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d079      	beq.n	8004b8c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d107      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x2f4>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	0e9b      	lsrs	r3, r3, #26
 8004aaa:	3301      	adds	r3, #1
 8004aac:	069b      	lsls	r3, r3, #26
 8004aae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ab2:	e015      	b.n	8004ae0 <HAL_ADC_ConfigChannel+0x320>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004abc:	fa93 f3a3 	rbit	r3, r3
 8004ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004acc:	2320      	movs	r3, #32
 8004ace:	e003      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad2:	fab3 f383 	clz	r3, r3
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	3301      	adds	r3, #1
 8004ada:	069b      	lsls	r3, r3, #26
 8004adc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x340>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	0e9b      	lsrs	r3, r3, #26
 8004af2:	3301      	adds	r3, #1
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	2101      	movs	r1, #1
 8004afa:	fa01 f303 	lsl.w	r3, r1, r3
 8004afe:	e017      	b.n	8004b30 <HAL_ADC_ConfigChannel+0x370>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b08:	fa93 f3a3 	rbit	r3, r3
 8004b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b10:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004b18:	2320      	movs	r3, #32
 8004b1a:	e003      	b.n	8004b24 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1e:	fab3 f383 	clz	r3, r3
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	3301      	adds	r3, #1
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b30:	ea42 0103 	orr.w	r1, r2, r3
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <HAL_ADC_ConfigChannel+0x396>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	0e9b      	lsrs	r3, r3, #26
 8004b46:	3301      	adds	r3, #1
 8004b48:	f003 021f 	and.w	r2, r3, #31
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	4413      	add	r3, r2
 8004b52:	051b      	lsls	r3, r3, #20
 8004b54:	e018      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x3c8>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004b6e:	2320      	movs	r3, #32
 8004b70:	e003      	b.n	8004b7a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	fab3 f383 	clz	r3, r3
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	f003 021f 	and.w	r2, r3, #31
 8004b80:	4613      	mov	r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	4413      	add	r3, r2
 8004b86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	e07e      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d107      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x3e8>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	0e9b      	lsrs	r3, r3, #26
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	069b      	lsls	r3, r3, #26
 8004ba2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ba6:	e015      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x414>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	fa93 f3a3 	rbit	r3, r3
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004bc0:	2320      	movs	r3, #32
 8004bc2:	e003      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc6:	fab3 f383 	clz	r3, r3
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	3301      	adds	r3, #1
 8004bce:	069b      	lsls	r3, r3, #26
 8004bd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d109      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x434>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	0e9b      	lsrs	r3, r3, #26
 8004be6:	3301      	adds	r3, #1
 8004be8:	f003 031f 	and.w	r3, r3, #31
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf2:	e017      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x464>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	fa93 f3a3 	rbit	r3, r3
 8004c00:	61bb      	str	r3, [r7, #24]
  return result;
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	e003      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	fab3 f383 	clz	r3, r3
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	3301      	adds	r3, #1
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2101      	movs	r1, #1
 8004c20:	fa01 f303 	lsl.w	r3, r1, r3
 8004c24:	ea42 0103 	orr.w	r1, r2, r3
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10d      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x490>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	0e9b      	lsrs	r3, r3, #26
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	f003 021f 	and.w	r2, r3, #31
 8004c40:	4613      	mov	r3, r2
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4413      	add	r3, r2
 8004c46:	3b1e      	subs	r3, #30
 8004c48:	051b      	lsls	r3, r3, #20
 8004c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	e01b      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x4c8>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	fa93 f3a3 	rbit	r3, r3
 8004c5c:	60fb      	str	r3, [r7, #12]
  return result;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004c68:	2320      	movs	r3, #32
 8004c6a:	e003      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	fab3 f383 	clz	r3, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	3301      	adds	r3, #1
 8004c76:	f003 021f 	and.w	r2, r3, #31
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	4413      	add	r3, r2
 8004c80:	3b1e      	subs	r3, #30
 8004c82:	051b      	lsls	r3, r3, #20
 8004c84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	6892      	ldr	r2, [r2, #8]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f7ff f9de 	bl	8004050 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f280 80cf 	bge.w	8004e3c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a06      	ldr	r2, [pc, #24]	; (8004cbc <HAL_ADC_ConfigChannel+0x4fc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_ADC_ConfigChannel+0x4f2>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <HAL_ADC_ConfigChannel+0x500>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d10a      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x508>
 8004cb2:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <HAL_ADC_ConfigChannel+0x504>)
 8004cb4:	e009      	b.n	8004cca <HAL_ADC_ConfigChannel+0x50a>
 8004cb6:	bf00      	nop
 8004cb8:	47ff0000 	.word	0x47ff0000
 8004cbc:	40022000 	.word	0x40022000
 8004cc0:	40022100 	.word	0x40022100
 8004cc4:	40022300 	.word	0x40022300
 8004cc8:	4b61      	ldr	r3, [pc, #388]	; (8004e50 <HAL_ADC_ConfigChannel+0x690>)
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff f90c 	bl	8003ee8 <LL_ADC_GetCommonPathInternalCh>
 8004cd0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a5f      	ldr	r2, [pc, #380]	; (8004e54 <HAL_ADC_ConfigChannel+0x694>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d004      	beq.n	8004ce6 <HAL_ADC_ConfigChannel+0x526>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a5d      	ldr	r2, [pc, #372]	; (8004e58 <HAL_ADC_ConfigChannel+0x698>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10e      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x544>
 8004ce6:	485b      	ldr	r0, [pc, #364]	; (8004e54 <HAL_ADC_ConfigChannel+0x694>)
 8004ce8:	f7ff fa86 	bl	80041f8 <LL_ADC_IsEnabled>
 8004cec:	4604      	mov	r4, r0
 8004cee:	485a      	ldr	r0, [pc, #360]	; (8004e58 <HAL_ADC_ConfigChannel+0x698>)
 8004cf0:	f7ff fa82 	bl	80041f8 <LL_ADC_IsEnabled>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	4323      	orrs	r3, r4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf0c      	ite	eq
 8004cfc:	2301      	moveq	r3, #1
 8004cfe:	2300      	movne	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	e008      	b.n	8004d16 <HAL_ADC_ConfigChannel+0x556>
 8004d04:	4855      	ldr	r0, [pc, #340]	; (8004e5c <HAL_ADC_ConfigChannel+0x69c>)
 8004d06:	f7ff fa77 	bl	80041f8 <LL_ADC_IsEnabled>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d07d      	beq.n	8004e16 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a50      	ldr	r2, [pc, #320]	; (8004e60 <HAL_ADC_ConfigChannel+0x6a0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d130      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x5c6>
 8004d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d12b      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a4a      	ldr	r2, [pc, #296]	; (8004e5c <HAL_ADC_ConfigChannel+0x69c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	f040 8081 	bne.w	8004e3c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a45      	ldr	r2, [pc, #276]	; (8004e54 <HAL_ADC_ConfigChannel+0x694>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d004      	beq.n	8004d4e <HAL_ADC_ConfigChannel+0x58e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a43      	ldr	r2, [pc, #268]	; (8004e58 <HAL_ADC_ConfigChannel+0x698>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d101      	bne.n	8004d52 <HAL_ADC_ConfigChannel+0x592>
 8004d4e:	4a45      	ldr	r2, [pc, #276]	; (8004e64 <HAL_ADC_ConfigChannel+0x6a4>)
 8004d50:	e000      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x594>
 8004d52:	4a3f      	ldr	r2, [pc, #252]	; (8004e50 <HAL_ADC_ConfigChannel+0x690>)
 8004d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f7ff f8b0 	bl	8003ec2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d62:	4b41      	ldr	r3, [pc, #260]	; (8004e68 <HAL_ADC_ConfigChannel+0x6a8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	4a40      	ldr	r2, [pc, #256]	; (8004e6c <HAL_ADC_ConfigChannel+0x6ac>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	099b      	lsrs	r3, r3, #6
 8004d70:	3301      	adds	r3, #1
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d76:	e002      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f9      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d84:	e05a      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a39      	ldr	r2, [pc, #228]	; (8004e70 <HAL_ADC_ConfigChannel+0x6b0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d11e      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x60e>
 8004d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d119      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2f      	ldr	r2, [pc, #188]	; (8004e5c <HAL_ADC_ConfigChannel+0x69c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d14b      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2a      	ldr	r2, [pc, #168]	; (8004e54 <HAL_ADC_ConfigChannel+0x694>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d004      	beq.n	8004db8 <HAL_ADC_ConfigChannel+0x5f8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a29      	ldr	r2, [pc, #164]	; (8004e58 <HAL_ADC_ConfigChannel+0x698>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x5fc>
 8004db8:	4a2a      	ldr	r2, [pc, #168]	; (8004e64 <HAL_ADC_ConfigChannel+0x6a4>)
 8004dba:	e000      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x5fe>
 8004dbc:	4a24      	ldr	r2, [pc, #144]	; (8004e50 <HAL_ADC_ConfigChannel+0x690>)
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f7ff f87b 	bl	8003ec2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dcc:	e036      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a28      	ldr	r2, [pc, #160]	; (8004e74 <HAL_ADC_ConfigChannel+0x6b4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d131      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x67c>
 8004dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d12c      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1d      	ldr	r2, [pc, #116]	; (8004e5c <HAL_ADC_ConfigChannel+0x69c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d127      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_ADC_ConfigChannel+0x694>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <HAL_ADC_ConfigChannel+0x640>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a17      	ldr	r2, [pc, #92]	; (8004e58 <HAL_ADC_ConfigChannel+0x698>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d101      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x644>
 8004e00:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <HAL_ADC_ConfigChannel+0x6a4>)
 8004e02:	e000      	b.n	8004e06 <HAL_ADC_ConfigChannel+0x646>
 8004e04:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <HAL_ADC_ConfigChannel+0x690>)
 8004e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f7ff f857 	bl	8003ec2 <LL_ADC_SetCommonPathInternalCh>
 8004e14:	e012      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	f043 0220 	orr.w	r2, r3, #32
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004e28:	e008      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	f043 0220 	orr.w	r2, r3, #32
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3784      	adds	r7, #132	; 0x84
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd90      	pop	{r4, r7, pc}
 8004e50:	58026300 	.word	0x58026300
 8004e54:	40022000 	.word	0x40022000
 8004e58:	40022100 	.word	0x40022100
 8004e5c:	58026000 	.word	0x58026000
 8004e60:	cb840000 	.word	0xcb840000
 8004e64:	40022300 	.word	0x40022300
 8004e68:	24000090 	.word	0x24000090
 8004e6c:	053e2d63 	.word	0x053e2d63
 8004e70:	c7520000 	.word	0xc7520000
 8004e74:	cfb80000 	.word	0xcfb80000

08004e78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff f9b7 	bl	80041f8 <LL_ADC_IsEnabled>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d16e      	bne.n	8004f6e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	4b38      	ldr	r3, [pc, #224]	; (8004f78 <ADC_Enable+0x100>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	f043 0210 	orr.w	r2, r3, #16
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eae:	f043 0201 	orr.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e05a      	b.n	8004f70 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff f972 	bl	80041a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ec4:	f7fe ffbc 	bl	8003e40 <HAL_GetTick>
 8004ec8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2b      	ldr	r2, [pc, #172]	; (8004f7c <ADC_Enable+0x104>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <ADC_Enable+0x66>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a29      	ldr	r2, [pc, #164]	; (8004f80 <ADC_Enable+0x108>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <ADC_Enable+0x6a>
 8004ede:	4b29      	ldr	r3, [pc, #164]	; (8004f84 <ADC_Enable+0x10c>)
 8004ee0:	e000      	b.n	8004ee4 <ADC_Enable+0x6c>
 8004ee2:	4b29      	ldr	r3, [pc, #164]	; (8004f88 <ADC_Enable+0x110>)
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff f903 	bl	80040f0 <LL_ADC_GetMultimode>
 8004eea:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a23      	ldr	r2, [pc, #140]	; (8004f80 <ADC_Enable+0x108>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d002      	beq.n	8004efc <ADC_Enable+0x84>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	e000      	b.n	8004efe <ADC_Enable+0x86>
 8004efc:	4b1f      	ldr	r3, [pc, #124]	; (8004f7c <ADC_Enable+0x104>)
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d02c      	beq.n	8004f60 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d130      	bne.n	8004f6e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f0c:	e028      	b.n	8004f60 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff f970 	bl	80041f8 <LL_ADC_IsEnabled>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d104      	bne.n	8004f28 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff f940 	bl	80041a8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f28:	f7fe ff8a 	bl	8003e40 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d914      	bls.n	8004f60 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d00d      	beq.n	8004f60 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f48:	f043 0210 	orr.w	r2, r3, #16
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f54:	f043 0201 	orr.w	r2, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e007      	b.n	8004f70 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d1cf      	bne.n	8004f0e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	8000003f 	.word	0x8000003f
 8004f7c:	40022000 	.word	0x40022000
 8004f80:	40022100 	.word	0x40022100
 8004f84:	40022300 	.word	0x40022300
 8004f88:	58026300 	.word	0x58026300

08004f8c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff f940 	bl	800421e <LL_ADC_IsDisableOngoing>
 8004f9e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff f927 	bl	80041f8 <LL_ADC_IsEnabled>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d047      	beq.n	8005040 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d144      	bne.n	8005040 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 030d 	and.w	r3, r3, #13
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d10c      	bne.n	8004fde <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff f901 	bl	80041d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fd6:	f7fe ff33 	bl	8003e40 <HAL_GetTick>
 8004fda:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fdc:	e029      	b.n	8005032 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	f043 0210 	orr.w	r2, r3, #16
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fee:	f043 0201 	orr.w	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e023      	b.n	8005042 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ffa:	f7fe ff21 	bl	8003e40 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d914      	bls.n	8005032 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00d      	beq.n	8005032 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f043 0210 	orr.w	r2, r3, #16
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005026:	f043 0201 	orr.w	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e007      	b.n	8005042 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1dc      	bne.n	8004ffa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005060:	2b00      	cmp	r3, #0
 8005062:	d14b      	bne.n	80050fc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005068:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d021      	beq.n	80050c2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fe ff92 	bl	8003fac <LL_ADC_REG_IsTriggerSourceSWStart>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d032      	beq.n	80050f4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d12b      	bne.n	80050f4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d11f      	bne.n	80050f4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b8:	f043 0201 	orr.w	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
 80050c0:	e018      	b.n	80050f4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d111      	bne.n	80050f4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ec:	f043 0201 	orr.w	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff fb45 	bl	8004784 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050fa:	e00e      	b.n	800511a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff fb4f 	bl	80047ac <HAL_ADC_ErrorCallback>
}
 800510e:	e004      	b.n	800511a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	4798      	blx	r3
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff fb31 	bl	8004798 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005150:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515c:	f043 0204 	orr.w	r2, r3, #4
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7ff fb21 	bl	80047ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a7a      	ldr	r2, [pc, #488]	; (800536c <ADC_ConfigureBoostMode+0x1f8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d004      	beq.n	8005190 <ADC_ConfigureBoostMode+0x1c>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a79      	ldr	r2, [pc, #484]	; (8005370 <ADC_ConfigureBoostMode+0x1fc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d109      	bne.n	80051a4 <ADC_ConfigureBoostMode+0x30>
 8005190:	4b78      	ldr	r3, [pc, #480]	; (8005374 <ADC_ConfigureBoostMode+0x200>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf14      	ite	ne
 800519c:	2301      	movne	r3, #1
 800519e:	2300      	moveq	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e008      	b.n	80051b6 <ADC_ConfigureBoostMode+0x42>
 80051a4:	4b74      	ldr	r3, [pc, #464]	; (8005378 <ADC_ConfigureBoostMode+0x204>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01c      	beq.n	80051f4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80051ba:	f005 fd9f 	bl	800acfc <HAL_RCC_GetHCLKFreq>
 80051be:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051c8:	d010      	beq.n	80051ec <ADC_ConfigureBoostMode+0x78>
 80051ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051ce:	d873      	bhi.n	80052b8 <ADC_ConfigureBoostMode+0x144>
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d002      	beq.n	80051dc <ADC_ConfigureBoostMode+0x68>
 80051d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051da:	d16d      	bne.n	80052b8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	60fb      	str	r3, [r7, #12]
        break;
 80051ea:	e068      	b.n	80052be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	089b      	lsrs	r3, r3, #2
 80051f0:	60fb      	str	r3, [r7, #12]
        break;
 80051f2:	e064      	b.n	80052be <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80051f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80051f8:	f04f 0100 	mov.w	r1, #0
 80051fc:	f007 f826 	bl	800c24c <HAL_RCCEx_GetPeriphCLKFreq>
 8005200:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800520a:	d051      	beq.n	80052b0 <ADC_ConfigureBoostMode+0x13c>
 800520c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005210:	d854      	bhi.n	80052bc <ADC_ConfigureBoostMode+0x148>
 8005212:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005216:	d047      	beq.n	80052a8 <ADC_ConfigureBoostMode+0x134>
 8005218:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800521c:	d84e      	bhi.n	80052bc <ADC_ConfigureBoostMode+0x148>
 800521e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005222:	d03d      	beq.n	80052a0 <ADC_ConfigureBoostMode+0x12c>
 8005224:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005228:	d848      	bhi.n	80052bc <ADC_ConfigureBoostMode+0x148>
 800522a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522e:	d033      	beq.n	8005298 <ADC_ConfigureBoostMode+0x124>
 8005230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005234:	d842      	bhi.n	80052bc <ADC_ConfigureBoostMode+0x148>
 8005236:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800523a:	d029      	beq.n	8005290 <ADC_ConfigureBoostMode+0x11c>
 800523c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005240:	d83c      	bhi.n	80052bc <ADC_ConfigureBoostMode+0x148>
 8005242:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005246:	d01a      	beq.n	800527e <ADC_ConfigureBoostMode+0x10a>
 8005248:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800524c:	d836      	bhi.n	80052bc <ADC_ConfigureBoostMode+0x148>
 800524e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005252:	d014      	beq.n	800527e <ADC_ConfigureBoostMode+0x10a>
 8005254:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005258:	d830      	bhi.n	80052bc <ADC_ConfigureBoostMode+0x148>
 800525a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800525e:	d00e      	beq.n	800527e <ADC_ConfigureBoostMode+0x10a>
 8005260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005264:	d82a      	bhi.n	80052bc <ADC_ConfigureBoostMode+0x148>
 8005266:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800526a:	d008      	beq.n	800527e <ADC_ConfigureBoostMode+0x10a>
 800526c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005270:	d824      	bhi.n	80052bc <ADC_ConfigureBoostMode+0x148>
 8005272:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005276:	d002      	beq.n	800527e <ADC_ConfigureBoostMode+0x10a>
 8005278:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800527c:	d11e      	bne.n	80052bc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	0c9b      	lsrs	r3, r3, #18
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	60fb      	str	r3, [r7, #12]
        break;
 800528e:	e016      	b.n	80052be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	091b      	lsrs	r3, r3, #4
 8005294:	60fb      	str	r3, [r7, #12]
        break;
 8005296:	e012      	b.n	80052be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	60fb      	str	r3, [r7, #12]
        break;
 800529e:	e00e      	b.n	80052be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	099b      	lsrs	r3, r3, #6
 80052a4:	60fb      	str	r3, [r7, #12]
        break;
 80052a6:	e00a      	b.n	80052be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	09db      	lsrs	r3, r3, #7
 80052ac:	60fb      	str	r3, [r7, #12]
        break;
 80052ae:	e006      	b.n	80052be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	60fb      	str	r3, [r7, #12]
        break;
 80052b6:	e002      	b.n	80052be <ADC_ConfigureBoostMode+0x14a>
        break;
 80052b8:	bf00      	nop
 80052ba:	e000      	b.n	80052be <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80052bc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80052be:	f7fe fdcb 	bl	8003e58 <HAL_GetREVID>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d815      	bhi.n	80052f8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4a2b      	ldr	r2, [pc, #172]	; (800537c <ADC_ConfigureBoostMode+0x208>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d908      	bls.n	80052e6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80052e4:	e03e      	b.n	8005364 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052f4:	609a      	str	r2, [r3, #8]
}
 80052f6:	e035      	b.n	8005364 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	085b      	lsrs	r3, r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <ADC_ConfigureBoostMode+0x20c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d808      	bhi.n	8005318 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005314:	609a      	str	r2, [r3, #8]
}
 8005316:	e025      	b.n	8005364 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4a1a      	ldr	r2, [pc, #104]	; (8005384 <ADC_ConfigureBoostMode+0x210>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d80a      	bhi.n	8005336 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005332:	609a      	str	r2, [r3, #8]
}
 8005334:	e016      	b.n	8005364 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4a13      	ldr	r2, [pc, #76]	; (8005388 <ADC_ConfigureBoostMode+0x214>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d80a      	bhi.n	8005354 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005350:	609a      	str	r2, [r3, #8]
}
 8005352:	e007      	b.n	8005364 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40022000 	.word	0x40022000
 8005370:	40022100 	.word	0x40022100
 8005374:	40022300 	.word	0x40022300
 8005378:	58026300 	.word	0x58026300
 800537c:	01312d00 	.word	0x01312d00
 8005380:	005f5e10 	.word	0x005f5e10
 8005384:	00bebc20 	.word	0x00bebc20
 8005388:	017d7840 	.word	0x017d7840

0800538c <LL_ADC_IsEnabled>:
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <LL_ADC_IsEnabled+0x18>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <LL_ADC_IsEnabled+0x1a>
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <LL_ADC_StartCalibration>:
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	4b09      	ldr	r3, [pc, #36]	; (80053ec <LL_ADC_StartCalibration+0x38>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80053d4:	430a      	orrs	r2, r1
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	3ffeffc0 	.word	0x3ffeffc0

080053f0 <LL_ADC_IsCalibrationOnGoing>:
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005404:	d101      	bne.n	800540a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <LL_ADC_REG_IsConversionOngoing>:
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b04      	cmp	r3, #4
 800542a:	d101      	bne.n	8005430 <LL_ADC_REG_IsConversionOngoing+0x18>
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
	...

08005440 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_ADCEx_Calibration_Start+0x1e>
 800545a:	2302      	movs	r3, #2
 800545c:	e04c      	b.n	80054f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f7ff fd90 	bl	8004f8c <ADC_Disable>
 800546c:	4603      	mov	r3, r0
 800546e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d135      	bne.n	80054e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800547a:	4b21      	ldr	r3, [pc, #132]	; (8005500 <HAL_ADCEx_Calibration_Start+0xc0>)
 800547c:	4013      	ands	r3, r2
 800547e:	f043 0202 	orr.w	r2, r3, #2
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ff90 	bl	80053b4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005494:	e014      	b.n	80054c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3301      	adds	r3, #1
 800549a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	4a19      	ldr	r2, [pc, #100]	; (8005504 <HAL_ADCEx_Calibration_Start+0xc4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d30d      	bcc.n	80054c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a8:	f023 0312 	bic.w	r3, r3, #18
 80054ac:	f043 0210 	orr.w	r2, r3, #16
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e01b      	b.n	80054f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff ff93 	bl	80053f0 <LL_ADC_IsCalibrationOnGoing>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e2      	bne.n	8005496 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d4:	f023 0303 	bic.w	r3, r3, #3
 80054d8:	f043 0201 	orr.w	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	655a      	str	r2, [r3, #84]	; 0x54
 80054e0:	e005      	b.n	80054ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	f043 0210 	orr.w	r2, r3, #16
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	ffffeefd 	.word	0xffffeefd
 8005504:	25c3f800 	.word	0x25c3f800

08005508 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b09f      	sub	sp, #124	; 0x7c
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800551e:	2b01      	cmp	r3, #1
 8005520:	d101      	bne.n	8005526 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005522:	2302      	movs	r3, #2
 8005524:	e0be      	b.n	80056a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800552e:	2300      	movs	r3, #0
 8005530:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005532:	2300      	movs	r3, #0
 8005534:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a5c      	ldr	r2, [pc, #368]	; (80056ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d102      	bne.n	8005546 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005540:	4b5b      	ldr	r3, [pc, #364]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	e001      	b.n	800554a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10b      	bne.n	8005568 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005554:	f043 0220 	orr.w	r2, r3, #32
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e09d      	b.n	80056a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff ff54 	bl	8005418 <LL_ADC_REG_IsConversionOngoing>
 8005570:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff ff4e 	bl	8005418 <LL_ADC_REG_IsConversionOngoing>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d17f      	bne.n	8005682 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005584:	2b00      	cmp	r3, #0
 8005586:	d17c      	bne.n	8005682 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a47      	ldr	r2, [pc, #284]	; (80056ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a46      	ldr	r2, [pc, #280]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d101      	bne.n	80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800559c:	4b45      	ldr	r3, [pc, #276]	; (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800559e:	e000      	b.n	80055a2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80055a0:	4b45      	ldr	r3, [pc, #276]	; (80056b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80055a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d039      	beq.n	8005620 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80055ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055bc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a3a      	ldr	r2, [pc, #232]	; (80056ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a38      	ldr	r2, [pc, #224]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10e      	bne.n	80055f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80055d2:	4836      	ldr	r0, [pc, #216]	; (80056ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055d4:	f7ff feda 	bl	800538c <LL_ADC_IsEnabled>
 80055d8:	4604      	mov	r4, r0
 80055da:	4835      	ldr	r0, [pc, #212]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055dc:	f7ff fed6 	bl	800538c <LL_ADC_IsEnabled>
 80055e0:	4603      	mov	r3, r0
 80055e2:	4323      	orrs	r3, r4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bf0c      	ite	eq
 80055e8:	2301      	moveq	r3, #1
 80055ea:	2300      	movne	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e008      	b.n	8005602 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80055f0:	4832      	ldr	r0, [pc, #200]	; (80056bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80055f2:	f7ff fecb 	bl	800538c <LL_ADC_IsEnabled>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf0c      	ite	eq
 80055fc:	2301      	moveq	r3, #1
 80055fe:	2300      	movne	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d047      	beq.n	8005696 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	4b2d      	ldr	r3, [pc, #180]	; (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800560c:	4013      	ands	r3, r2
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	6811      	ldr	r1, [r2, #0]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	6892      	ldr	r2, [r2, #8]
 8005616:	430a      	orrs	r2, r1
 8005618:	431a      	orrs	r2, r3
 800561a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800561e:	e03a      	b.n	8005696 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1e      	ldr	r2, [pc, #120]	; (80056ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1d      	ldr	r2, [pc, #116]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d10e      	bne.n	800565e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005640:	481a      	ldr	r0, [pc, #104]	; (80056ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005642:	f7ff fea3 	bl	800538c <LL_ADC_IsEnabled>
 8005646:	4604      	mov	r4, r0
 8005648:	4819      	ldr	r0, [pc, #100]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800564a:	f7ff fe9f 	bl	800538c <LL_ADC_IsEnabled>
 800564e:	4603      	mov	r3, r0
 8005650:	4323      	orrs	r3, r4
 8005652:	2b00      	cmp	r3, #0
 8005654:	bf0c      	ite	eq
 8005656:	2301      	moveq	r3, #1
 8005658:	2300      	movne	r3, #0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	e008      	b.n	8005670 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800565e:	4817      	ldr	r0, [pc, #92]	; (80056bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005660:	f7ff fe94 	bl	800538c <LL_ADC_IsEnabled>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	bf0c      	ite	eq
 800566a:	2301      	moveq	r3, #1
 800566c:	2300      	movne	r3, #0
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d010      	beq.n	8005696 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800567a:	4013      	ands	r3, r2
 800567c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800567e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005680:	e009      	b.n	8005696 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005694:	e000      	b.n	8005698 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005696:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80056a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	377c      	adds	r7, #124	; 0x7c
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd90      	pop	{r4, r7, pc}
 80056ac:	40022000 	.word	0x40022000
 80056b0:	40022100 	.word	0x40022100
 80056b4:	40022300 	.word	0x40022300
 80056b8:	58026300 	.word	0x58026300
 80056bc:	58026000 	.word	0x58026000
 80056c0:	fffff0e0 	.word	0xfffff0e0

080056c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <__NVIC_SetPriorityGrouping+0x40>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056e0:	4013      	ands	r3, r2
 80056e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056ec:	4b06      	ldr	r3, [pc, #24]	; (8005708 <__NVIC_SetPriorityGrouping+0x44>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056f2:	4a04      	ldr	r2, [pc, #16]	; (8005704 <__NVIC_SetPriorityGrouping+0x40>)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	60d3      	str	r3, [r2, #12]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000ed00 	.word	0xe000ed00
 8005708:	05fa0000 	.word	0x05fa0000

0800570c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <__NVIC_GetPriorityGrouping+0x18>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	0a1b      	lsrs	r3, r3, #8
 8005716:	f003 0307 	and.w	r3, r3, #7
}
 800571a:	4618      	mov	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	e000ed00 	.word	0xe000ed00

08005728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005736:	2b00      	cmp	r3, #0
 8005738:	db0b      	blt.n	8005752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	f003 021f 	and.w	r2, r3, #31
 8005740:	4907      	ldr	r1, [pc, #28]	; (8005760 <__NVIC_EnableIRQ+0x38>)
 8005742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	2001      	movs	r0, #1
 800574a:	fa00 f202 	lsl.w	r2, r0, r2
 800574e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	e000e100 	.word	0xe000e100

08005764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	6039      	str	r1, [r7, #0]
 800576e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005774:	2b00      	cmp	r3, #0
 8005776:	db0a      	blt.n	800578e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	b2da      	uxtb	r2, r3
 800577c:	490c      	ldr	r1, [pc, #48]	; (80057b0 <__NVIC_SetPriority+0x4c>)
 800577e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005782:	0112      	lsls	r2, r2, #4
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	440b      	add	r3, r1
 8005788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800578c:	e00a      	b.n	80057a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	4908      	ldr	r1, [pc, #32]	; (80057b4 <__NVIC_SetPriority+0x50>)
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	3b04      	subs	r3, #4
 800579c:	0112      	lsls	r2, r2, #4
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	440b      	add	r3, r1
 80057a2:	761a      	strb	r2, [r3, #24]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	e000e100 	.word	0xe000e100
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b089      	sub	sp, #36	; 0x24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f1c3 0307 	rsb	r3, r3, #7
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	bf28      	it	cs
 80057d6:	2304      	movcs	r3, #4
 80057d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	3304      	adds	r3, #4
 80057de:	2b06      	cmp	r3, #6
 80057e0:	d902      	bls.n	80057e8 <NVIC_EncodePriority+0x30>
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3b03      	subs	r3, #3
 80057e6:	e000      	b.n	80057ea <NVIC_EncodePriority+0x32>
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43da      	mvns	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	401a      	ands	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	43d9      	mvns	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005810:	4313      	orrs	r3, r2
         );
}
 8005812:	4618      	mov	r0, r3
 8005814:	3724      	adds	r7, #36	; 0x24
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff ff4c 	bl	80056c4 <__NVIC_SetPriorityGrouping>
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005842:	f7ff ff63 	bl	800570c <__NVIC_GetPriorityGrouping>
 8005846:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	6978      	ldr	r0, [r7, #20]
 800584e:	f7ff ffb3 	bl	80057b8 <NVIC_EncodePriority>
 8005852:	4602      	mov	r2, r0
 8005854:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005858:	4611      	mov	r1, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff ff82 	bl	8005764 <__NVIC_SetPriority>
}
 8005860:	bf00      	nop
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff ff56 	bl	8005728 <__NVIC_EnableIRQ>
}
 800587c:	bf00      	nop
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e014      	b.n	80058c0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	791b      	ldrb	r3, [r3, #4]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d105      	bne.n	80058ac <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fd fc76 	bl	8003198 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e046      	b.n	800596a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	795b      	ldrb	r3, [r3, #5]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_DAC_Start+0x20>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e040      	b.n	800596a <HAL_DAC_Start+0xa2>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6819      	ldr	r1, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2201      	movs	r2, #1
 8005902:	409a      	lsls	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10f      	bne.n	8005932 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800591c:	2b02      	cmp	r3, #2
 800591e:	d11d      	bne.n	800595c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	605a      	str	r2, [r3, #4]
 8005930:	e014      	b.n	800595c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	f003 0310 	and.w	r3, r3, #16
 8005942:	2102      	movs	r1, #2
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	429a      	cmp	r2, r3
 800594a:	d107      	bne.n	800595c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0202 	orr.w	r2, r2, #2
 800595a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0a2      	b.n	8005ad6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	795b      	ldrb	r3, [r3, #5]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_DAC_Start_DMA+0x24>
 8005998:	2302      	movs	r3, #2
 800599a:	e09c      	b.n	8005ad6 <HAL_DAC_Start_DMA+0x15e>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2201      	movs	r2, #1
 80059a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2202      	movs	r2, #2
 80059a6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d129      	bne.n	8005a02 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	4a4b      	ldr	r2, [pc, #300]	; (8005ae0 <HAL_DAC_Start_DMA+0x168>)
 80059b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	4a4a      	ldr	r2, [pc, #296]	; (8005ae4 <HAL_DAC_Start_DMA+0x16c>)
 80059bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	4a49      	ldr	r2, [pc, #292]	; (8005ae8 <HAL_DAC_Start_DMA+0x170>)
 80059c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059d4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_DAC_Start_DMA+0x6c>
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d005      	beq.n	80059ee <HAL_DAC_Start_DMA+0x76>
 80059e2:	e009      	b.n	80059f8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3308      	adds	r3, #8
 80059ea:	613b      	str	r3, [r7, #16]
        break;
 80059ec:	e033      	b.n	8005a56 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	330c      	adds	r3, #12
 80059f4:	613b      	str	r3, [r7, #16]
        break;
 80059f6:	e02e      	b.n	8005a56 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3310      	adds	r3, #16
 80059fe:	613b      	str	r3, [r7, #16]
        break;
 8005a00:	e029      	b.n	8005a56 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	4a39      	ldr	r2, [pc, #228]	; (8005aec <HAL_DAC_Start_DMA+0x174>)
 8005a08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	4a38      	ldr	r2, [pc, #224]	; (8005af0 <HAL_DAC_Start_DMA+0x178>)
 8005a10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	4a37      	ldr	r2, [pc, #220]	; (8005af4 <HAL_DAC_Start_DMA+0x17c>)
 8005a18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a28:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <HAL_DAC_Start_DMA+0xc0>
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d005      	beq.n	8005a42 <HAL_DAC_Start_DMA+0xca>
 8005a36:	e009      	b.n	8005a4c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3314      	adds	r3, #20
 8005a3e:	613b      	str	r3, [r7, #16]
        break;
 8005a40:	e009      	b.n	8005a56 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3318      	adds	r3, #24
 8005a48:	613b      	str	r3, [r7, #16]
        break;
 8005a4a:	e004      	b.n	8005a56 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	331c      	adds	r3, #28
 8005a52:	613b      	str	r3, [r7, #16]
        break;
 8005a54:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d111      	bne.n	8005a80 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6898      	ldr	r0, [r3, #8]
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	f000 fe67 	bl	8006748 <HAL_DMA_Start_IT>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]
 8005a7e:	e010      	b.n	8005aa2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005a8e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68d8      	ldr	r0, [r3, #12]
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	f000 fe55 	bl	8006748 <HAL_DMA_Start_IT>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10c      	bne.n	8005ac8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6819      	ldr	r1, [r3, #0]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 0310 	and.w	r3, r3, #16
 8005aba:	2201      	movs	r2, #1
 8005abc:	409a      	lsls	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e005      	b.n	8005ad4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f043 0204 	orr.w	r2, r3, #4
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	08005f69 	.word	0x08005f69
 8005ae4:	08005f8b 	.word	0x08005f8b
 8005ae8:	08005fa7 	.word	0x08005fa7
 8005aec:	08006025 	.word	0x08006025
 8005af0:	08006047 	.word	0x08006047
 8005af4:	08006063 	.word	0x08006063

08005af8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e03e      	b.n	8005b8a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	43da      	mvns	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	400a      	ands	r2, r1
 8005b28:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6819      	ldr	r1, [r3, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2201      	movs	r2, #1
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43da      	mvns	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	400a      	ands	r2, r1
 8005b44:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10d      	bne.n	8005b68 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 f863 	bl	8006c1c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e00c      	b.n	8005b82 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 f855 	bl	8006c1c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005b80:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01d      	beq.n	8005bf0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d018      	beq.n	8005bf0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f043 0201 	orr.w	r2, r3, #1
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005be8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f86f 	bl	8005cce <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01d      	beq.n	8005c36 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d018      	beq.n	8005c36 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2204      	movs	r2, #4
 8005c08:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f043 0202 	orr.w	r2, r3, #2
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005c1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005c2e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f9ed 	bl	8006010 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b087      	sub	sp, #28
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e015      	b.n	8005c86 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d105      	bne.n	8005c72 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e004      	b.n	8005c7c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4413      	add	r3, r2
 8005c78:	3314      	adds	r3, #20
 8005c7a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
	...

08005ce4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08a      	sub	sp, #40	; 0x28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <HAL_DAC_ConfigChannel+0x1e>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e12a      	b.n	8005f5c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	795b      	ldrb	r3, [r3, #5]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <HAL_DAC_ConfigChannel+0x2e>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e124      	b.n	8005f5c <HAL_DAC_ConfigChannel+0x278>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d17a      	bne.n	8005e1c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005d26:	f7fe f88b 	bl	8003e40 <HAL_GetTick>
 8005d2a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d13d      	bne.n	8005dae <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d32:	e018      	b.n	8005d66 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005d34:	f7fe f884 	bl	8003e40 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d911      	bls.n	8005d66 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d48:	4b86      	ldr	r3, [pc, #536]	; (8005f64 <HAL_DAC_ConfigChannel+0x280>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f043 0208 	orr.w	r2, r3, #8
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2203      	movs	r2, #3
 8005d60:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e0fa      	b.n	8005f5c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d6c:	4b7d      	ldr	r3, [pc, #500]	; (8005f64 <HAL_DAC_ConfigChannel+0x280>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1df      	bne.n	8005d34 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	6992      	ldr	r2, [r2, #24]
 8005d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8005d7e:	e020      	b.n	8005dc2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005d80:	f7fe f85e 	bl	8003e40 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d90f      	bls.n	8005dae <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	da0a      	bge.n	8005dae <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f043 0208 	orr.w	r2, r3, #8
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2203      	movs	r2, #3
 8005da8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e0d6      	b.n	8005f5c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	dbe3      	blt.n	8005d80 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	6992      	ldr	r2, [r2, #24]
 8005dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd6:	43db      	mvns	r3, r3
 8005dd8:	ea02 0103 	and.w	r1, r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	409a      	lsls	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	21ff      	movs	r1, #255	; 0xff
 8005dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005e02:	43db      	mvns	r3, r3
 8005e04:	ea02 0103 	and.w	r1, r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	409a      	lsls	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d11d      	bne.n	8005e60 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f003 0310 	and.w	r3, r3, #16
 8005e32:	221f      	movs	r2, #31
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e66:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	2207      	movs	r2, #7
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	43db      	mvns	r3, r3
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d102      	bne.n	8005e8a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
 8005e88:	e00f      	b.n	8005eaa <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d102      	bne.n	8005e98 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005e92:	2301      	movs	r3, #1
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
 8005e96:	e008      	b.n	8005eaa <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d102      	bne.n	8005ea6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea4:	e001      	b.n	8005eaa <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6819      	ldr	r1, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	43da      	mvns	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	400a      	ands	r2, r1
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6819      	ldr	r1, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	22c0      	movs	r2, #192	; 0xc0
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	43da      	mvns	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	400a      	ands	r2, r1
 8005f4a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005f58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3728      	adds	r7, #40	; 0x28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20008000 	.word	0x20008000

08005f68 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff fe8b 	bl	8005c92 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	711a      	strb	r2, [r3, #4]
}
 8005f82:	bf00      	nop
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f7ff fe84 	bl	8005ca6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f043 0204 	orr.w	r2, r3, #4
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7ff fe7a 	bl	8005cba <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	711a      	strb	r2, [r3, #4]
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff ffce 	bl	8005fd4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2201      	movs	r2, #1
 800603c:	711a      	strb	r2, [r3, #4]
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f7ff ffc7 	bl	8005fe8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f043 0204 	orr.w	r2, r3, #4
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f7ff ffbd 	bl	8005ffc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	711a      	strb	r2, [r3, #4]
}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006098:	f7fd fed2 	bl	8003e40 <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e316      	b.n	80066d6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a66      	ldr	r2, [pc, #408]	; (8006248 <HAL_DMA_Init+0x1b8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d04a      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a65      	ldr	r2, [pc, #404]	; (800624c <HAL_DMA_Init+0x1bc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d045      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a63      	ldr	r2, [pc, #396]	; (8006250 <HAL_DMA_Init+0x1c0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d040      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a62      	ldr	r2, [pc, #392]	; (8006254 <HAL_DMA_Init+0x1c4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d03b      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a60      	ldr	r2, [pc, #384]	; (8006258 <HAL_DMA_Init+0x1c8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d036      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a5f      	ldr	r2, [pc, #380]	; (800625c <HAL_DMA_Init+0x1cc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d031      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a5d      	ldr	r2, [pc, #372]	; (8006260 <HAL_DMA_Init+0x1d0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d02c      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a5c      	ldr	r2, [pc, #368]	; (8006264 <HAL_DMA_Init+0x1d4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d027      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a5a      	ldr	r2, [pc, #360]	; (8006268 <HAL_DMA_Init+0x1d8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d022      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a59      	ldr	r2, [pc, #356]	; (800626c <HAL_DMA_Init+0x1dc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d01d      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a57      	ldr	r2, [pc, #348]	; (8006270 <HAL_DMA_Init+0x1e0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a56      	ldr	r2, [pc, #344]	; (8006274 <HAL_DMA_Init+0x1e4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a54      	ldr	r2, [pc, #336]	; (8006278 <HAL_DMA_Init+0x1e8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a53      	ldr	r2, [pc, #332]	; (800627c <HAL_DMA_Init+0x1ec>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a51      	ldr	r2, [pc, #324]	; (8006280 <HAL_DMA_Init+0x1f0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_DMA_Init+0xb8>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a50      	ldr	r2, [pc, #320]	; (8006284 <HAL_DMA_Init+0x1f4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d101      	bne.n	800614c <HAL_DMA_Init+0xbc>
 8006148:	2301      	movs	r3, #1
 800614a:	e000      	b.n	800614e <HAL_DMA_Init+0xbe>
 800614c:	2300      	movs	r3, #0
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 813b 	beq.w	80063ca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a37      	ldr	r2, [pc, #220]	; (8006248 <HAL_DMA_Init+0x1b8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d04a      	beq.n	8006204 <HAL_DMA_Init+0x174>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a36      	ldr	r2, [pc, #216]	; (800624c <HAL_DMA_Init+0x1bc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d045      	beq.n	8006204 <HAL_DMA_Init+0x174>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a34      	ldr	r2, [pc, #208]	; (8006250 <HAL_DMA_Init+0x1c0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d040      	beq.n	8006204 <HAL_DMA_Init+0x174>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a33      	ldr	r2, [pc, #204]	; (8006254 <HAL_DMA_Init+0x1c4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d03b      	beq.n	8006204 <HAL_DMA_Init+0x174>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a31      	ldr	r2, [pc, #196]	; (8006258 <HAL_DMA_Init+0x1c8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d036      	beq.n	8006204 <HAL_DMA_Init+0x174>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a30      	ldr	r2, [pc, #192]	; (800625c <HAL_DMA_Init+0x1cc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d031      	beq.n	8006204 <HAL_DMA_Init+0x174>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a2e      	ldr	r2, [pc, #184]	; (8006260 <HAL_DMA_Init+0x1d0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d02c      	beq.n	8006204 <HAL_DMA_Init+0x174>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a2d      	ldr	r2, [pc, #180]	; (8006264 <HAL_DMA_Init+0x1d4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d027      	beq.n	8006204 <HAL_DMA_Init+0x174>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2b      	ldr	r2, [pc, #172]	; (8006268 <HAL_DMA_Init+0x1d8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d022      	beq.n	8006204 <HAL_DMA_Init+0x174>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a2a      	ldr	r2, [pc, #168]	; (800626c <HAL_DMA_Init+0x1dc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d01d      	beq.n	8006204 <HAL_DMA_Init+0x174>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a28      	ldr	r2, [pc, #160]	; (8006270 <HAL_DMA_Init+0x1e0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d018      	beq.n	8006204 <HAL_DMA_Init+0x174>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a27      	ldr	r2, [pc, #156]	; (8006274 <HAL_DMA_Init+0x1e4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d013      	beq.n	8006204 <HAL_DMA_Init+0x174>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a25      	ldr	r2, [pc, #148]	; (8006278 <HAL_DMA_Init+0x1e8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00e      	beq.n	8006204 <HAL_DMA_Init+0x174>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a24      	ldr	r2, [pc, #144]	; (800627c <HAL_DMA_Init+0x1ec>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d009      	beq.n	8006204 <HAL_DMA_Init+0x174>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a22      	ldr	r2, [pc, #136]	; (8006280 <HAL_DMA_Init+0x1f0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <HAL_DMA_Init+0x174>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a21      	ldr	r2, [pc, #132]	; (8006284 <HAL_DMA_Init+0x1f4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d108      	bne.n	8006216 <HAL_DMA_Init+0x186>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0201 	bic.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	e007      	b.n	8006226 <HAL_DMA_Init+0x196>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0201 	bic.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006226:	e02f      	b.n	8006288 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006228:	f7fd fe0a 	bl	8003e40 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b05      	cmp	r3, #5
 8006234:	d928      	bls.n	8006288 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2203      	movs	r2, #3
 8006240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e246      	b.n	80066d6 <HAL_DMA_Init+0x646>
 8006248:	40020010 	.word	0x40020010
 800624c:	40020028 	.word	0x40020028
 8006250:	40020040 	.word	0x40020040
 8006254:	40020058 	.word	0x40020058
 8006258:	40020070 	.word	0x40020070
 800625c:	40020088 	.word	0x40020088
 8006260:	400200a0 	.word	0x400200a0
 8006264:	400200b8 	.word	0x400200b8
 8006268:	40020410 	.word	0x40020410
 800626c:	40020428 	.word	0x40020428
 8006270:	40020440 	.word	0x40020440
 8006274:	40020458 	.word	0x40020458
 8006278:	40020470 	.word	0x40020470
 800627c:	40020488 	.word	0x40020488
 8006280:	400204a0 	.word	0x400204a0
 8006284:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1c8      	bne.n	8006228 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4b83      	ldr	r3, [pc, #524]	; (80064b0 <HAL_DMA_Init+0x420>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80062ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d107      	bne.n	80062ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e4:	4313      	orrs	r3, r2
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80062ec:	4b71      	ldr	r3, [pc, #452]	; (80064b4 <HAL_DMA_Init+0x424>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	4b71      	ldr	r3, [pc, #452]	; (80064b8 <HAL_DMA_Init+0x428>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f8:	d328      	bcc.n	800634c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b28      	cmp	r3, #40	; 0x28
 8006300:	d903      	bls.n	800630a <HAL_DMA_Init+0x27a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b2e      	cmp	r3, #46	; 0x2e
 8006308:	d917      	bls.n	800633a <HAL_DMA_Init+0x2aa>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b3e      	cmp	r3, #62	; 0x3e
 8006310:	d903      	bls.n	800631a <HAL_DMA_Init+0x28a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b42      	cmp	r3, #66	; 0x42
 8006318:	d90f      	bls.n	800633a <HAL_DMA_Init+0x2aa>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b46      	cmp	r3, #70	; 0x46
 8006320:	d903      	bls.n	800632a <HAL_DMA_Init+0x29a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b48      	cmp	r3, #72	; 0x48
 8006328:	d907      	bls.n	800633a <HAL_DMA_Init+0x2aa>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b4e      	cmp	r3, #78	; 0x4e
 8006330:	d905      	bls.n	800633e <HAL_DMA_Init+0x2ae>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b52      	cmp	r3, #82	; 0x52
 8006338:	d801      	bhi.n	800633e <HAL_DMA_Init+0x2ae>
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <HAL_DMA_Init+0x2b0>
 800633e:	2300      	movs	r3, #0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800634a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f023 0307 	bic.w	r3, r3, #7
 8006362:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2b04      	cmp	r3, #4
 8006374:	d117      	bne.n	80063a6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00e      	beq.n	80063a6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f002 fb3f 	bl	8008a0c <DMA_CheckFifoParam>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2240      	movs	r2, #64	; 0x40
 8006398:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e197      	b.n	80066d6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f002 fa7a 	bl	80088a8 <DMA_CalcBaseAndBitshift>
 80063b4:	4603      	mov	r3, r0
 80063b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	223f      	movs	r2, #63	; 0x3f
 80063c2:	409a      	lsls	r2, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	609a      	str	r2, [r3, #8]
 80063c8:	e0cd      	b.n	8006566 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a3b      	ldr	r2, [pc, #236]	; (80064bc <HAL_DMA_Init+0x42c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d022      	beq.n	800641a <HAL_DMA_Init+0x38a>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a39      	ldr	r2, [pc, #228]	; (80064c0 <HAL_DMA_Init+0x430>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d01d      	beq.n	800641a <HAL_DMA_Init+0x38a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a38      	ldr	r2, [pc, #224]	; (80064c4 <HAL_DMA_Init+0x434>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d018      	beq.n	800641a <HAL_DMA_Init+0x38a>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a36      	ldr	r2, [pc, #216]	; (80064c8 <HAL_DMA_Init+0x438>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d013      	beq.n	800641a <HAL_DMA_Init+0x38a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a35      	ldr	r2, [pc, #212]	; (80064cc <HAL_DMA_Init+0x43c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00e      	beq.n	800641a <HAL_DMA_Init+0x38a>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a33      	ldr	r2, [pc, #204]	; (80064d0 <HAL_DMA_Init+0x440>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d009      	beq.n	800641a <HAL_DMA_Init+0x38a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a32      	ldr	r2, [pc, #200]	; (80064d4 <HAL_DMA_Init+0x444>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d004      	beq.n	800641a <HAL_DMA_Init+0x38a>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a30      	ldr	r2, [pc, #192]	; (80064d8 <HAL_DMA_Init+0x448>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d101      	bne.n	800641e <HAL_DMA_Init+0x38e>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <HAL_DMA_Init+0x390>
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8097 	beq.w	8006554 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a24      	ldr	r2, [pc, #144]	; (80064bc <HAL_DMA_Init+0x42c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d021      	beq.n	8006474 <HAL_DMA_Init+0x3e4>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a22      	ldr	r2, [pc, #136]	; (80064c0 <HAL_DMA_Init+0x430>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d01c      	beq.n	8006474 <HAL_DMA_Init+0x3e4>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a21      	ldr	r2, [pc, #132]	; (80064c4 <HAL_DMA_Init+0x434>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d017      	beq.n	8006474 <HAL_DMA_Init+0x3e4>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1f      	ldr	r2, [pc, #124]	; (80064c8 <HAL_DMA_Init+0x438>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d012      	beq.n	8006474 <HAL_DMA_Init+0x3e4>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1e      	ldr	r2, [pc, #120]	; (80064cc <HAL_DMA_Init+0x43c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00d      	beq.n	8006474 <HAL_DMA_Init+0x3e4>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a1c      	ldr	r2, [pc, #112]	; (80064d0 <HAL_DMA_Init+0x440>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d008      	beq.n	8006474 <HAL_DMA_Init+0x3e4>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1b      	ldr	r2, [pc, #108]	; (80064d4 <HAL_DMA_Init+0x444>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <HAL_DMA_Init+0x3e4>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a19      	ldr	r2, [pc, #100]	; (80064d8 <HAL_DMA_Init+0x448>)
 8006472:	4293      	cmp	r3, r2
 8006474:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2202      	movs	r2, #2
 800647a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4b12      	ldr	r3, [pc, #72]	; (80064dc <HAL_DMA_Init+0x44c>)
 8006492:	4013      	ands	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	2b40      	cmp	r3, #64	; 0x40
 800649c:	d020      	beq.n	80064e0 <HAL_DMA_Init+0x450>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b80      	cmp	r3, #128	; 0x80
 80064a4:	d102      	bne.n	80064ac <HAL_DMA_Init+0x41c>
 80064a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064aa:	e01a      	b.n	80064e2 <HAL_DMA_Init+0x452>
 80064ac:	2300      	movs	r3, #0
 80064ae:	e018      	b.n	80064e2 <HAL_DMA_Init+0x452>
 80064b0:	fe10803f 	.word	0xfe10803f
 80064b4:	5c001000 	.word	0x5c001000
 80064b8:	ffff0000 	.word	0xffff0000
 80064bc:	58025408 	.word	0x58025408
 80064c0:	5802541c 	.word	0x5802541c
 80064c4:	58025430 	.word	0x58025430
 80064c8:	58025444 	.word	0x58025444
 80064cc:	58025458 	.word	0x58025458
 80064d0:	5802546c 	.word	0x5802546c
 80064d4:	58025480 	.word	0x58025480
 80064d8:	58025494 	.word	0x58025494
 80064dc:	fffe000f 	.word	0xfffe000f
 80064e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	68d2      	ldr	r2, [r2, #12]
 80064e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006500:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006508:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006510:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	4b6e      	ldr	r3, [pc, #440]	; (80066e0 <HAL_DMA_Init+0x650>)
 8006528:	4413      	add	r3, r2
 800652a:	4a6e      	ldr	r2, [pc, #440]	; (80066e4 <HAL_DMA_Init+0x654>)
 800652c:	fba2 2303 	umull	r2, r3, r2, r3
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	009a      	lsls	r2, r3, #2
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f002 f9b5 	bl	80088a8 <DMA_CalcBaseAndBitshift>
 800653e:	4603      	mov	r3, r0
 8006540:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	2201      	movs	r2, #1
 800654c:	409a      	lsls	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	605a      	str	r2, [r3, #4]
 8006552:	e008      	b.n	8006566 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2240      	movs	r2, #64	; 0x40
 8006558:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2203      	movs	r2, #3
 800655e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e0b7      	b.n	80066d6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a5f      	ldr	r2, [pc, #380]	; (80066e8 <HAL_DMA_Init+0x658>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d072      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a5d      	ldr	r2, [pc, #372]	; (80066ec <HAL_DMA_Init+0x65c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d06d      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a5c      	ldr	r2, [pc, #368]	; (80066f0 <HAL_DMA_Init+0x660>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d068      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a5a      	ldr	r2, [pc, #360]	; (80066f4 <HAL_DMA_Init+0x664>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d063      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a59      	ldr	r2, [pc, #356]	; (80066f8 <HAL_DMA_Init+0x668>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d05e      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a57      	ldr	r2, [pc, #348]	; (80066fc <HAL_DMA_Init+0x66c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d059      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a56      	ldr	r2, [pc, #344]	; (8006700 <HAL_DMA_Init+0x670>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d054      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a54      	ldr	r2, [pc, #336]	; (8006704 <HAL_DMA_Init+0x674>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d04f      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a53      	ldr	r2, [pc, #332]	; (8006708 <HAL_DMA_Init+0x678>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d04a      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a51      	ldr	r2, [pc, #324]	; (800670c <HAL_DMA_Init+0x67c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d045      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a50      	ldr	r2, [pc, #320]	; (8006710 <HAL_DMA_Init+0x680>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d040      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a4e      	ldr	r2, [pc, #312]	; (8006714 <HAL_DMA_Init+0x684>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d03b      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a4d      	ldr	r2, [pc, #308]	; (8006718 <HAL_DMA_Init+0x688>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d036      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a4b      	ldr	r2, [pc, #300]	; (800671c <HAL_DMA_Init+0x68c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d031      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a4a      	ldr	r2, [pc, #296]	; (8006720 <HAL_DMA_Init+0x690>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d02c      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a48      	ldr	r2, [pc, #288]	; (8006724 <HAL_DMA_Init+0x694>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d027      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a47      	ldr	r2, [pc, #284]	; (8006728 <HAL_DMA_Init+0x698>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d022      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a45      	ldr	r2, [pc, #276]	; (800672c <HAL_DMA_Init+0x69c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d01d      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a44      	ldr	r2, [pc, #272]	; (8006730 <HAL_DMA_Init+0x6a0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d018      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a42      	ldr	r2, [pc, #264]	; (8006734 <HAL_DMA_Init+0x6a4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d013      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a41      	ldr	r2, [pc, #260]	; (8006738 <HAL_DMA_Init+0x6a8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00e      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a3f      	ldr	r2, [pc, #252]	; (800673c <HAL_DMA_Init+0x6ac>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d009      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a3e      	ldr	r2, [pc, #248]	; (8006740 <HAL_DMA_Init+0x6b0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d004      	beq.n	8006656 <HAL_DMA_Init+0x5c6>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a3c      	ldr	r2, [pc, #240]	; (8006744 <HAL_DMA_Init+0x6b4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d101      	bne.n	800665a <HAL_DMA_Init+0x5ca>
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <HAL_DMA_Init+0x5cc>
 800665a:	2300      	movs	r3, #0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d032      	beq.n	80066c6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f002 fa4f 	bl	8008b04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2b80      	cmp	r3, #128	; 0x80
 800666c:	d102      	bne.n	8006674 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006688:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d010      	beq.n	80066b4 <HAL_DMA_Init+0x624>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b08      	cmp	r3, #8
 8006698:	d80c      	bhi.n	80066b4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f002 facc 	bl	8008c38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066b0:	605a      	str	r2, [r3, #4]
 80066b2:	e008      	b.n	80066c6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	a7fdabf8 	.word	0xa7fdabf8
 80066e4:	cccccccd 	.word	0xcccccccd
 80066e8:	40020010 	.word	0x40020010
 80066ec:	40020028 	.word	0x40020028
 80066f0:	40020040 	.word	0x40020040
 80066f4:	40020058 	.word	0x40020058
 80066f8:	40020070 	.word	0x40020070
 80066fc:	40020088 	.word	0x40020088
 8006700:	400200a0 	.word	0x400200a0
 8006704:	400200b8 	.word	0x400200b8
 8006708:	40020410 	.word	0x40020410
 800670c:	40020428 	.word	0x40020428
 8006710:	40020440 	.word	0x40020440
 8006714:	40020458 	.word	0x40020458
 8006718:	40020470 	.word	0x40020470
 800671c:	40020488 	.word	0x40020488
 8006720:	400204a0 	.word	0x400204a0
 8006724:	400204b8 	.word	0x400204b8
 8006728:	58025408 	.word	0x58025408
 800672c:	5802541c 	.word	0x5802541c
 8006730:	58025430 	.word	0x58025430
 8006734:	58025444 	.word	0x58025444
 8006738:	58025458 	.word	0x58025458
 800673c:	5802546c 	.word	0x5802546c
 8006740:	58025480 	.word	0x58025480
 8006744:	58025494 	.word	0x58025494

08006748 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e226      	b.n	8006bb2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_DMA_Start_IT+0x2a>
 800676e:	2302      	movs	r3, #2
 8006770:	e21f      	b.n	8006bb2 <HAL_DMA_Start_IT+0x46a>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b01      	cmp	r3, #1
 8006784:	f040 820a 	bne.w	8006b9c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a68      	ldr	r2, [pc, #416]	; (800693c <HAL_DMA_Start_IT+0x1f4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d04a      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a66      	ldr	r2, [pc, #408]	; (8006940 <HAL_DMA_Start_IT+0x1f8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d045      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a65      	ldr	r2, [pc, #404]	; (8006944 <HAL_DMA_Start_IT+0x1fc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d040      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a63      	ldr	r2, [pc, #396]	; (8006948 <HAL_DMA_Start_IT+0x200>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d03b      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a62      	ldr	r2, [pc, #392]	; (800694c <HAL_DMA_Start_IT+0x204>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d036      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a60      	ldr	r2, [pc, #384]	; (8006950 <HAL_DMA_Start_IT+0x208>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d031      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a5f      	ldr	r2, [pc, #380]	; (8006954 <HAL_DMA_Start_IT+0x20c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d02c      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a5d      	ldr	r2, [pc, #372]	; (8006958 <HAL_DMA_Start_IT+0x210>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d027      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a5c      	ldr	r2, [pc, #368]	; (800695c <HAL_DMA_Start_IT+0x214>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d022      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a5a      	ldr	r2, [pc, #360]	; (8006960 <HAL_DMA_Start_IT+0x218>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d01d      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a59      	ldr	r2, [pc, #356]	; (8006964 <HAL_DMA_Start_IT+0x21c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d018      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a57      	ldr	r2, [pc, #348]	; (8006968 <HAL_DMA_Start_IT+0x220>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d013      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a56      	ldr	r2, [pc, #344]	; (800696c <HAL_DMA_Start_IT+0x224>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00e      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a54      	ldr	r2, [pc, #336]	; (8006970 <HAL_DMA_Start_IT+0x228>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d009      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a53      	ldr	r2, [pc, #332]	; (8006974 <HAL_DMA_Start_IT+0x22c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d004      	beq.n	8006836 <HAL_DMA_Start_IT+0xee>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a51      	ldr	r2, [pc, #324]	; (8006978 <HAL_DMA_Start_IT+0x230>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d108      	bne.n	8006848 <HAL_DMA_Start_IT+0x100>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0201 	bic.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	e007      	b.n	8006858 <HAL_DMA_Start_IT+0x110>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0201 	bic.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	68b9      	ldr	r1, [r7, #8]
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f001 fe76 	bl	8008550 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a34      	ldr	r2, [pc, #208]	; (800693c <HAL_DMA_Start_IT+0x1f4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d04a      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a33      	ldr	r2, [pc, #204]	; (8006940 <HAL_DMA_Start_IT+0x1f8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d045      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a31      	ldr	r2, [pc, #196]	; (8006944 <HAL_DMA_Start_IT+0x1fc>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d040      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a30      	ldr	r2, [pc, #192]	; (8006948 <HAL_DMA_Start_IT+0x200>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d03b      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a2e      	ldr	r2, [pc, #184]	; (800694c <HAL_DMA_Start_IT+0x204>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d036      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a2d      	ldr	r2, [pc, #180]	; (8006950 <HAL_DMA_Start_IT+0x208>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d031      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a2b      	ldr	r2, [pc, #172]	; (8006954 <HAL_DMA_Start_IT+0x20c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d02c      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a2a      	ldr	r2, [pc, #168]	; (8006958 <HAL_DMA_Start_IT+0x210>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d027      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a28      	ldr	r2, [pc, #160]	; (800695c <HAL_DMA_Start_IT+0x214>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d022      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a27      	ldr	r2, [pc, #156]	; (8006960 <HAL_DMA_Start_IT+0x218>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d01d      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a25      	ldr	r2, [pc, #148]	; (8006964 <HAL_DMA_Start_IT+0x21c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d018      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a24      	ldr	r2, [pc, #144]	; (8006968 <HAL_DMA_Start_IT+0x220>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d013      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a22      	ldr	r2, [pc, #136]	; (800696c <HAL_DMA_Start_IT+0x224>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a21      	ldr	r2, [pc, #132]	; (8006970 <HAL_DMA_Start_IT+0x228>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1f      	ldr	r2, [pc, #124]	; (8006974 <HAL_DMA_Start_IT+0x22c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_DMA_Start_IT+0x1bc>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1e      	ldr	r2, [pc, #120]	; (8006978 <HAL_DMA_Start_IT+0x230>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d101      	bne.n	8006908 <HAL_DMA_Start_IT+0x1c0>
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <HAL_DMA_Start_IT+0x1c2>
 8006908:	2300      	movs	r3, #0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d036      	beq.n	800697c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f023 021e 	bic.w	r2, r3, #30
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0216 	orr.w	r2, r2, #22
 8006920:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d03e      	beq.n	80069a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0208 	orr.w	r2, r2, #8
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	e035      	b.n	80069a8 <HAL_DMA_Start_IT+0x260>
 800693c:	40020010 	.word	0x40020010
 8006940:	40020028 	.word	0x40020028
 8006944:	40020040 	.word	0x40020040
 8006948:	40020058 	.word	0x40020058
 800694c:	40020070 	.word	0x40020070
 8006950:	40020088 	.word	0x40020088
 8006954:	400200a0 	.word	0x400200a0
 8006958:	400200b8 	.word	0x400200b8
 800695c:	40020410 	.word	0x40020410
 8006960:	40020428 	.word	0x40020428
 8006964:	40020440 	.word	0x40020440
 8006968:	40020458 	.word	0x40020458
 800696c:	40020470 	.word	0x40020470
 8006970:	40020488 	.word	0x40020488
 8006974:	400204a0 	.word	0x400204a0
 8006978:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f023 020e 	bic.w	r2, r3, #14
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 020a 	orr.w	r2, r2, #10
 800698e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0204 	orr.w	r2, r2, #4
 80069a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a83      	ldr	r2, [pc, #524]	; (8006bbc <HAL_DMA_Start_IT+0x474>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d072      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a82      	ldr	r2, [pc, #520]	; (8006bc0 <HAL_DMA_Start_IT+0x478>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d06d      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a80      	ldr	r2, [pc, #512]	; (8006bc4 <HAL_DMA_Start_IT+0x47c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d068      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a7f      	ldr	r2, [pc, #508]	; (8006bc8 <HAL_DMA_Start_IT+0x480>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d063      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a7d      	ldr	r2, [pc, #500]	; (8006bcc <HAL_DMA_Start_IT+0x484>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d05e      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a7c      	ldr	r2, [pc, #496]	; (8006bd0 <HAL_DMA_Start_IT+0x488>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d059      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a7a      	ldr	r2, [pc, #488]	; (8006bd4 <HAL_DMA_Start_IT+0x48c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d054      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a79      	ldr	r2, [pc, #484]	; (8006bd8 <HAL_DMA_Start_IT+0x490>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d04f      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a77      	ldr	r2, [pc, #476]	; (8006bdc <HAL_DMA_Start_IT+0x494>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d04a      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a76      	ldr	r2, [pc, #472]	; (8006be0 <HAL_DMA_Start_IT+0x498>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d045      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a74      	ldr	r2, [pc, #464]	; (8006be4 <HAL_DMA_Start_IT+0x49c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d040      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a73      	ldr	r2, [pc, #460]	; (8006be8 <HAL_DMA_Start_IT+0x4a0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d03b      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a71      	ldr	r2, [pc, #452]	; (8006bec <HAL_DMA_Start_IT+0x4a4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d036      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a70      	ldr	r2, [pc, #448]	; (8006bf0 <HAL_DMA_Start_IT+0x4a8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d031      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a6e      	ldr	r2, [pc, #440]	; (8006bf4 <HAL_DMA_Start_IT+0x4ac>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d02c      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a6d      	ldr	r2, [pc, #436]	; (8006bf8 <HAL_DMA_Start_IT+0x4b0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d027      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a6b      	ldr	r2, [pc, #428]	; (8006bfc <HAL_DMA_Start_IT+0x4b4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d022      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a6a      	ldr	r2, [pc, #424]	; (8006c00 <HAL_DMA_Start_IT+0x4b8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d01d      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a68      	ldr	r2, [pc, #416]	; (8006c04 <HAL_DMA_Start_IT+0x4bc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d018      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a67      	ldr	r2, [pc, #412]	; (8006c08 <HAL_DMA_Start_IT+0x4c0>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d013      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a65      	ldr	r2, [pc, #404]	; (8006c0c <HAL_DMA_Start_IT+0x4c4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d00e      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a64      	ldr	r2, [pc, #400]	; (8006c10 <HAL_DMA_Start_IT+0x4c8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d009      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a62      	ldr	r2, [pc, #392]	; (8006c14 <HAL_DMA_Start_IT+0x4cc>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d004      	beq.n	8006a98 <HAL_DMA_Start_IT+0x350>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a61      	ldr	r2, [pc, #388]	; (8006c18 <HAL_DMA_Start_IT+0x4d0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d101      	bne.n	8006a9c <HAL_DMA_Start_IT+0x354>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <HAL_DMA_Start_IT+0x356>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01a      	beq.n	8006ad8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d007      	beq.n	8006ac0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006abe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d007      	beq.n	8006ad8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ad6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a37      	ldr	r2, [pc, #220]	; (8006bbc <HAL_DMA_Start_IT+0x474>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d04a      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a36      	ldr	r2, [pc, #216]	; (8006bc0 <HAL_DMA_Start_IT+0x478>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d045      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a34      	ldr	r2, [pc, #208]	; (8006bc4 <HAL_DMA_Start_IT+0x47c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d040      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a33      	ldr	r2, [pc, #204]	; (8006bc8 <HAL_DMA_Start_IT+0x480>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d03b      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a31      	ldr	r2, [pc, #196]	; (8006bcc <HAL_DMA_Start_IT+0x484>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d036      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a30      	ldr	r2, [pc, #192]	; (8006bd0 <HAL_DMA_Start_IT+0x488>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d031      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a2e      	ldr	r2, [pc, #184]	; (8006bd4 <HAL_DMA_Start_IT+0x48c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d02c      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2d      	ldr	r2, [pc, #180]	; (8006bd8 <HAL_DMA_Start_IT+0x490>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d027      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a2b      	ldr	r2, [pc, #172]	; (8006bdc <HAL_DMA_Start_IT+0x494>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d022      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2a      	ldr	r2, [pc, #168]	; (8006be0 <HAL_DMA_Start_IT+0x498>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d01d      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a28      	ldr	r2, [pc, #160]	; (8006be4 <HAL_DMA_Start_IT+0x49c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d018      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a27      	ldr	r2, [pc, #156]	; (8006be8 <HAL_DMA_Start_IT+0x4a0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d013      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a25      	ldr	r2, [pc, #148]	; (8006bec <HAL_DMA_Start_IT+0x4a4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00e      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a24      	ldr	r2, [pc, #144]	; (8006bf0 <HAL_DMA_Start_IT+0x4a8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d009      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <HAL_DMA_Start_IT+0x4ac>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <HAL_DMA_Start_IT+0x430>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a21      	ldr	r2, [pc, #132]	; (8006bf8 <HAL_DMA_Start_IT+0x4b0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d108      	bne.n	8006b8a <HAL_DMA_Start_IT+0x442>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e012      	b.n	8006bb0 <HAL_DMA_Start_IT+0x468>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0201 	orr.w	r2, r2, #1
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e009      	b.n	8006bb0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	40020010 	.word	0x40020010
 8006bc0:	40020028 	.word	0x40020028
 8006bc4:	40020040 	.word	0x40020040
 8006bc8:	40020058 	.word	0x40020058
 8006bcc:	40020070 	.word	0x40020070
 8006bd0:	40020088 	.word	0x40020088
 8006bd4:	400200a0 	.word	0x400200a0
 8006bd8:	400200b8 	.word	0x400200b8
 8006bdc:	40020410 	.word	0x40020410
 8006be0:	40020428 	.word	0x40020428
 8006be4:	40020440 	.word	0x40020440
 8006be8:	40020458 	.word	0x40020458
 8006bec:	40020470 	.word	0x40020470
 8006bf0:	40020488 	.word	0x40020488
 8006bf4:	400204a0 	.word	0x400204a0
 8006bf8:	400204b8 	.word	0x400204b8
 8006bfc:	58025408 	.word	0x58025408
 8006c00:	5802541c 	.word	0x5802541c
 8006c04:	58025430 	.word	0x58025430
 8006c08:	58025444 	.word	0x58025444
 8006c0c:	58025458 	.word	0x58025458
 8006c10:	5802546c 	.word	0x5802546c
 8006c14:	58025480 	.word	0x58025480
 8006c18:	58025494 	.word	0x58025494

08006c1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006c24:	f7fd f90c 	bl	8003e40 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e2dc      	b.n	80071ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d008      	beq.n	8006c52 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2280      	movs	r2, #128	; 0x80
 8006c44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e2cd      	b.n	80071ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a76      	ldr	r2, [pc, #472]	; (8006e30 <HAL_DMA_Abort+0x214>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d04a      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a74      	ldr	r2, [pc, #464]	; (8006e34 <HAL_DMA_Abort+0x218>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d045      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a73      	ldr	r2, [pc, #460]	; (8006e38 <HAL_DMA_Abort+0x21c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d040      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a71      	ldr	r2, [pc, #452]	; (8006e3c <HAL_DMA_Abort+0x220>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d03b      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a70      	ldr	r2, [pc, #448]	; (8006e40 <HAL_DMA_Abort+0x224>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d036      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a6e      	ldr	r2, [pc, #440]	; (8006e44 <HAL_DMA_Abort+0x228>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d031      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a6d      	ldr	r2, [pc, #436]	; (8006e48 <HAL_DMA_Abort+0x22c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d02c      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a6b      	ldr	r2, [pc, #428]	; (8006e4c <HAL_DMA_Abort+0x230>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d027      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a6a      	ldr	r2, [pc, #424]	; (8006e50 <HAL_DMA_Abort+0x234>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d022      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a68      	ldr	r2, [pc, #416]	; (8006e54 <HAL_DMA_Abort+0x238>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d01d      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a67      	ldr	r2, [pc, #412]	; (8006e58 <HAL_DMA_Abort+0x23c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d018      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a65      	ldr	r2, [pc, #404]	; (8006e5c <HAL_DMA_Abort+0x240>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d013      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a64      	ldr	r2, [pc, #400]	; (8006e60 <HAL_DMA_Abort+0x244>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00e      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a62      	ldr	r2, [pc, #392]	; (8006e64 <HAL_DMA_Abort+0x248>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d009      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a61      	ldr	r2, [pc, #388]	; (8006e68 <HAL_DMA_Abort+0x24c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d004      	beq.n	8006cf2 <HAL_DMA_Abort+0xd6>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a5f      	ldr	r2, [pc, #380]	; (8006e6c <HAL_DMA_Abort+0x250>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d101      	bne.n	8006cf6 <HAL_DMA_Abort+0xda>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e000      	b.n	8006cf8 <HAL_DMA_Abort+0xdc>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d013      	beq.n	8006d24 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 021e 	bic.w	r2, r2, #30
 8006d0a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695a      	ldr	r2, [r3, #20]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d1a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	e00a      	b.n	8006d3a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 020e 	bic.w	r2, r2, #14
 8006d32:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a3c      	ldr	r2, [pc, #240]	; (8006e30 <HAL_DMA_Abort+0x214>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d072      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a3a      	ldr	r2, [pc, #232]	; (8006e34 <HAL_DMA_Abort+0x218>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d06d      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a39      	ldr	r2, [pc, #228]	; (8006e38 <HAL_DMA_Abort+0x21c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d068      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a37      	ldr	r2, [pc, #220]	; (8006e3c <HAL_DMA_Abort+0x220>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d063      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a36      	ldr	r2, [pc, #216]	; (8006e40 <HAL_DMA_Abort+0x224>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d05e      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a34      	ldr	r2, [pc, #208]	; (8006e44 <HAL_DMA_Abort+0x228>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d059      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a33      	ldr	r2, [pc, #204]	; (8006e48 <HAL_DMA_Abort+0x22c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d054      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a31      	ldr	r2, [pc, #196]	; (8006e4c <HAL_DMA_Abort+0x230>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d04f      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a30      	ldr	r2, [pc, #192]	; (8006e50 <HAL_DMA_Abort+0x234>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d04a      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a2e      	ldr	r2, [pc, #184]	; (8006e54 <HAL_DMA_Abort+0x238>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d045      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a2d      	ldr	r2, [pc, #180]	; (8006e58 <HAL_DMA_Abort+0x23c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d040      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a2b      	ldr	r2, [pc, #172]	; (8006e5c <HAL_DMA_Abort+0x240>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d03b      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <HAL_DMA_Abort+0x244>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d036      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a28      	ldr	r2, [pc, #160]	; (8006e64 <HAL_DMA_Abort+0x248>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d031      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a27      	ldr	r2, [pc, #156]	; (8006e68 <HAL_DMA_Abort+0x24c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d02c      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a25      	ldr	r2, [pc, #148]	; (8006e6c <HAL_DMA_Abort+0x250>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d027      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a24      	ldr	r2, [pc, #144]	; (8006e70 <HAL_DMA_Abort+0x254>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d022      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a22      	ldr	r2, [pc, #136]	; (8006e74 <HAL_DMA_Abort+0x258>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01d      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a21      	ldr	r2, [pc, #132]	; (8006e78 <HAL_DMA_Abort+0x25c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1f      	ldr	r2, [pc, #124]	; (8006e7c <HAL_DMA_Abort+0x260>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1e      	ldr	r2, [pc, #120]	; (8006e80 <HAL_DMA_Abort+0x264>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a1c      	ldr	r2, [pc, #112]	; (8006e84 <HAL_DMA_Abort+0x268>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a1b      	ldr	r2, [pc, #108]	; (8006e88 <HAL_DMA_Abort+0x26c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_DMA_Abort+0x20e>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a19      	ldr	r2, [pc, #100]	; (8006e8c <HAL_DMA_Abort+0x270>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d132      	bne.n	8006e90 <HAL_DMA_Abort+0x274>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e031      	b.n	8006e92 <HAL_DMA_Abort+0x276>
 8006e2e:	bf00      	nop
 8006e30:	40020010 	.word	0x40020010
 8006e34:	40020028 	.word	0x40020028
 8006e38:	40020040 	.word	0x40020040
 8006e3c:	40020058 	.word	0x40020058
 8006e40:	40020070 	.word	0x40020070
 8006e44:	40020088 	.word	0x40020088
 8006e48:	400200a0 	.word	0x400200a0
 8006e4c:	400200b8 	.word	0x400200b8
 8006e50:	40020410 	.word	0x40020410
 8006e54:	40020428 	.word	0x40020428
 8006e58:	40020440 	.word	0x40020440
 8006e5c:	40020458 	.word	0x40020458
 8006e60:	40020470 	.word	0x40020470
 8006e64:	40020488 	.word	0x40020488
 8006e68:	400204a0 	.word	0x400204a0
 8006e6c:	400204b8 	.word	0x400204b8
 8006e70:	58025408 	.word	0x58025408
 8006e74:	5802541c 	.word	0x5802541c
 8006e78:	58025430 	.word	0x58025430
 8006e7c:	58025444 	.word	0x58025444
 8006e80:	58025458 	.word	0x58025458
 8006e84:	5802546c 	.word	0x5802546c
 8006e88:	58025480 	.word	0x58025480
 8006e8c:	58025494 	.word	0x58025494
 8006e90:	2300      	movs	r3, #0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a6d      	ldr	r2, [pc, #436]	; (8007060 <HAL_DMA_Abort+0x444>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d04a      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a6b      	ldr	r2, [pc, #428]	; (8007064 <HAL_DMA_Abort+0x448>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d045      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a6a      	ldr	r2, [pc, #424]	; (8007068 <HAL_DMA_Abort+0x44c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d040      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a68      	ldr	r2, [pc, #416]	; (800706c <HAL_DMA_Abort+0x450>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d03b      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a67      	ldr	r2, [pc, #412]	; (8007070 <HAL_DMA_Abort+0x454>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d036      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a65      	ldr	r2, [pc, #404]	; (8007074 <HAL_DMA_Abort+0x458>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d031      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a64      	ldr	r2, [pc, #400]	; (8007078 <HAL_DMA_Abort+0x45c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d02c      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a62      	ldr	r2, [pc, #392]	; (800707c <HAL_DMA_Abort+0x460>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d027      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a61      	ldr	r2, [pc, #388]	; (8007080 <HAL_DMA_Abort+0x464>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d022      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a5f      	ldr	r2, [pc, #380]	; (8007084 <HAL_DMA_Abort+0x468>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d01d      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a5e      	ldr	r2, [pc, #376]	; (8007088 <HAL_DMA_Abort+0x46c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d018      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a5c      	ldr	r2, [pc, #368]	; (800708c <HAL_DMA_Abort+0x470>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d013      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a5b      	ldr	r2, [pc, #364]	; (8007090 <HAL_DMA_Abort+0x474>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00e      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a59      	ldr	r2, [pc, #356]	; (8007094 <HAL_DMA_Abort+0x478>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d009      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a58      	ldr	r2, [pc, #352]	; (8007098 <HAL_DMA_Abort+0x47c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d004      	beq.n	8006f46 <HAL_DMA_Abort+0x32a>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a56      	ldr	r2, [pc, #344]	; (800709c <HAL_DMA_Abort+0x480>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d108      	bne.n	8006f58 <HAL_DMA_Abort+0x33c>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0201 	bic.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	e007      	b.n	8006f68 <HAL_DMA_Abort+0x34c>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0201 	bic.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f68:	e013      	b.n	8006f92 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f6a:	f7fc ff69 	bl	8003e40 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b05      	cmp	r3, #5
 8006f76:	d90c      	bls.n	8006f92 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2203      	movs	r2, #3
 8006f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e12d      	b.n	80071ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e5      	bne.n	8006f6a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2f      	ldr	r2, [pc, #188]	; (8007060 <HAL_DMA_Abort+0x444>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d04a      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a2d      	ldr	r2, [pc, #180]	; (8007064 <HAL_DMA_Abort+0x448>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d045      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a2c      	ldr	r2, [pc, #176]	; (8007068 <HAL_DMA_Abort+0x44c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d040      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a2a      	ldr	r2, [pc, #168]	; (800706c <HAL_DMA_Abort+0x450>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d03b      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a29      	ldr	r2, [pc, #164]	; (8007070 <HAL_DMA_Abort+0x454>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d036      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a27      	ldr	r2, [pc, #156]	; (8007074 <HAL_DMA_Abort+0x458>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d031      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a26      	ldr	r2, [pc, #152]	; (8007078 <HAL_DMA_Abort+0x45c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d02c      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a24      	ldr	r2, [pc, #144]	; (800707c <HAL_DMA_Abort+0x460>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d027      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a23      	ldr	r2, [pc, #140]	; (8007080 <HAL_DMA_Abort+0x464>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d022      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a21      	ldr	r2, [pc, #132]	; (8007084 <HAL_DMA_Abort+0x468>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01d      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a20      	ldr	r2, [pc, #128]	; (8007088 <HAL_DMA_Abort+0x46c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <HAL_DMA_Abort+0x422>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1e      	ldr	r2, [pc, #120]	; (800708c <HAL_DMA_Abort+0x470>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1d      	ldr	r2, [pc, #116]	; (8007090 <HAL_DMA_Abort+0x474>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1b      	ldr	r2, [pc, #108]	; (8007094 <HAL_DMA_Abort+0x478>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_DMA_Abort+0x422>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1a      	ldr	r2, [pc, #104]	; (8007098 <HAL_DMA_Abort+0x47c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_DMA_Abort+0x422>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a18      	ldr	r2, [pc, #96]	; (800709c <HAL_DMA_Abort+0x480>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d101      	bne.n	8007042 <HAL_DMA_Abort+0x426>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <HAL_DMA_Abort+0x428>
 8007042:	2300      	movs	r3, #0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d02b      	beq.n	80070a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007052:	f003 031f 	and.w	r3, r3, #31
 8007056:	223f      	movs	r2, #63	; 0x3f
 8007058:	409a      	lsls	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	609a      	str	r2, [r3, #8]
 800705e:	e02a      	b.n	80070b6 <HAL_DMA_Abort+0x49a>
 8007060:	40020010 	.word	0x40020010
 8007064:	40020028 	.word	0x40020028
 8007068:	40020040 	.word	0x40020040
 800706c:	40020058 	.word	0x40020058
 8007070:	40020070 	.word	0x40020070
 8007074:	40020088 	.word	0x40020088
 8007078:	400200a0 	.word	0x400200a0
 800707c:	400200b8 	.word	0x400200b8
 8007080:	40020410 	.word	0x40020410
 8007084:	40020428 	.word	0x40020428
 8007088:	40020440 	.word	0x40020440
 800708c:	40020458 	.word	0x40020458
 8007090:	40020470 	.word	0x40020470
 8007094:	40020488 	.word	0x40020488
 8007098:	400204a0 	.word	0x400204a0
 800709c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	2201      	movs	r2, #1
 80070b0:	409a      	lsls	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a4f      	ldr	r2, [pc, #316]	; (80071f8 <HAL_DMA_Abort+0x5dc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d072      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a4d      	ldr	r2, [pc, #308]	; (80071fc <HAL_DMA_Abort+0x5e0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d06d      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a4c      	ldr	r2, [pc, #304]	; (8007200 <HAL_DMA_Abort+0x5e4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d068      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a4a      	ldr	r2, [pc, #296]	; (8007204 <HAL_DMA_Abort+0x5e8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d063      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a49      	ldr	r2, [pc, #292]	; (8007208 <HAL_DMA_Abort+0x5ec>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d05e      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a47      	ldr	r2, [pc, #284]	; (800720c <HAL_DMA_Abort+0x5f0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d059      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a46      	ldr	r2, [pc, #280]	; (8007210 <HAL_DMA_Abort+0x5f4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d054      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a44      	ldr	r2, [pc, #272]	; (8007214 <HAL_DMA_Abort+0x5f8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d04f      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a43      	ldr	r2, [pc, #268]	; (8007218 <HAL_DMA_Abort+0x5fc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d04a      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a41      	ldr	r2, [pc, #260]	; (800721c <HAL_DMA_Abort+0x600>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d045      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a40      	ldr	r2, [pc, #256]	; (8007220 <HAL_DMA_Abort+0x604>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d040      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a3e      	ldr	r2, [pc, #248]	; (8007224 <HAL_DMA_Abort+0x608>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d03b      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a3d      	ldr	r2, [pc, #244]	; (8007228 <HAL_DMA_Abort+0x60c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d036      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a3b      	ldr	r2, [pc, #236]	; (800722c <HAL_DMA_Abort+0x610>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d031      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a3a      	ldr	r2, [pc, #232]	; (8007230 <HAL_DMA_Abort+0x614>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d02c      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a38      	ldr	r2, [pc, #224]	; (8007234 <HAL_DMA_Abort+0x618>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d027      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a37      	ldr	r2, [pc, #220]	; (8007238 <HAL_DMA_Abort+0x61c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d022      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a35      	ldr	r2, [pc, #212]	; (800723c <HAL_DMA_Abort+0x620>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d01d      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a34      	ldr	r2, [pc, #208]	; (8007240 <HAL_DMA_Abort+0x624>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d018      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a32      	ldr	r2, [pc, #200]	; (8007244 <HAL_DMA_Abort+0x628>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d013      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a31      	ldr	r2, [pc, #196]	; (8007248 <HAL_DMA_Abort+0x62c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00e      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a2f      	ldr	r2, [pc, #188]	; (800724c <HAL_DMA_Abort+0x630>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d009      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a2e      	ldr	r2, [pc, #184]	; (8007250 <HAL_DMA_Abort+0x634>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d004      	beq.n	80071a6 <HAL_DMA_Abort+0x58a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a2c      	ldr	r2, [pc, #176]	; (8007254 <HAL_DMA_Abort+0x638>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d101      	bne.n	80071aa <HAL_DMA_Abort+0x58e>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <HAL_DMA_Abort+0x590>
 80071aa:	2300      	movs	r3, #0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d015      	beq.n	80071dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80071b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00c      	beq.n	80071dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	40020010 	.word	0x40020010
 80071fc:	40020028 	.word	0x40020028
 8007200:	40020040 	.word	0x40020040
 8007204:	40020058 	.word	0x40020058
 8007208:	40020070 	.word	0x40020070
 800720c:	40020088 	.word	0x40020088
 8007210:	400200a0 	.word	0x400200a0
 8007214:	400200b8 	.word	0x400200b8
 8007218:	40020410 	.word	0x40020410
 800721c:	40020428 	.word	0x40020428
 8007220:	40020440 	.word	0x40020440
 8007224:	40020458 	.word	0x40020458
 8007228:	40020470 	.word	0x40020470
 800722c:	40020488 	.word	0x40020488
 8007230:	400204a0 	.word	0x400204a0
 8007234:	400204b8 	.word	0x400204b8
 8007238:	58025408 	.word	0x58025408
 800723c:	5802541c 	.word	0x5802541c
 8007240:	58025430 	.word	0x58025430
 8007244:	58025444 	.word	0x58025444
 8007248:	58025458 	.word	0x58025458
 800724c:	5802546c 	.word	0x5802546c
 8007250:	58025480 	.word	0x58025480
 8007254:	58025494 	.word	0x58025494

08007258 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e237      	b.n	80076da <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d004      	beq.n	8007280 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2280      	movs	r2, #128	; 0x80
 800727a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e22c      	b.n	80076da <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a5c      	ldr	r2, [pc, #368]	; (80073f8 <HAL_DMA_Abort_IT+0x1a0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d04a      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a5b      	ldr	r2, [pc, #364]	; (80073fc <HAL_DMA_Abort_IT+0x1a4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d045      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a59      	ldr	r2, [pc, #356]	; (8007400 <HAL_DMA_Abort_IT+0x1a8>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d040      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a58      	ldr	r2, [pc, #352]	; (8007404 <HAL_DMA_Abort_IT+0x1ac>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d03b      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a56      	ldr	r2, [pc, #344]	; (8007408 <HAL_DMA_Abort_IT+0x1b0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d036      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a55      	ldr	r2, [pc, #340]	; (800740c <HAL_DMA_Abort_IT+0x1b4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d031      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a53      	ldr	r2, [pc, #332]	; (8007410 <HAL_DMA_Abort_IT+0x1b8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d02c      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a52      	ldr	r2, [pc, #328]	; (8007414 <HAL_DMA_Abort_IT+0x1bc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d027      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a50      	ldr	r2, [pc, #320]	; (8007418 <HAL_DMA_Abort_IT+0x1c0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d022      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a4f      	ldr	r2, [pc, #316]	; (800741c <HAL_DMA_Abort_IT+0x1c4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d01d      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a4d      	ldr	r2, [pc, #308]	; (8007420 <HAL_DMA_Abort_IT+0x1c8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d018      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a4c      	ldr	r2, [pc, #304]	; (8007424 <HAL_DMA_Abort_IT+0x1cc>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d013      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a4a      	ldr	r2, [pc, #296]	; (8007428 <HAL_DMA_Abort_IT+0x1d0>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d00e      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a49      	ldr	r2, [pc, #292]	; (800742c <HAL_DMA_Abort_IT+0x1d4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d009      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a47      	ldr	r2, [pc, #284]	; (8007430 <HAL_DMA_Abort_IT+0x1d8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d004      	beq.n	8007320 <HAL_DMA_Abort_IT+0xc8>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a46      	ldr	r2, [pc, #280]	; (8007434 <HAL_DMA_Abort_IT+0x1dc>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d101      	bne.n	8007324 <HAL_DMA_Abort_IT+0xcc>
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <HAL_DMA_Abort_IT+0xce>
 8007324:	2300      	movs	r3, #0
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8086 	beq.w	8007438 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2204      	movs	r2, #4
 8007330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a2f      	ldr	r2, [pc, #188]	; (80073f8 <HAL_DMA_Abort_IT+0x1a0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d04a      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a2e      	ldr	r2, [pc, #184]	; (80073fc <HAL_DMA_Abort_IT+0x1a4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d045      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a2c      	ldr	r2, [pc, #176]	; (8007400 <HAL_DMA_Abort_IT+0x1a8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d040      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a2b      	ldr	r2, [pc, #172]	; (8007404 <HAL_DMA_Abort_IT+0x1ac>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d03b      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a29      	ldr	r2, [pc, #164]	; (8007408 <HAL_DMA_Abort_IT+0x1b0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d036      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a28      	ldr	r2, [pc, #160]	; (800740c <HAL_DMA_Abort_IT+0x1b4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d031      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a26      	ldr	r2, [pc, #152]	; (8007410 <HAL_DMA_Abort_IT+0x1b8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d02c      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a25      	ldr	r2, [pc, #148]	; (8007414 <HAL_DMA_Abort_IT+0x1bc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d027      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a23      	ldr	r2, [pc, #140]	; (8007418 <HAL_DMA_Abort_IT+0x1c0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d022      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a22      	ldr	r2, [pc, #136]	; (800741c <HAL_DMA_Abort_IT+0x1c4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d01d      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a20      	ldr	r2, [pc, #128]	; (8007420 <HAL_DMA_Abort_IT+0x1c8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d018      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1f      	ldr	r2, [pc, #124]	; (8007424 <HAL_DMA_Abort_IT+0x1cc>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d013      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <HAL_DMA_Abort_IT+0x1d0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00e      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a1c      	ldr	r2, [pc, #112]	; (800742c <HAL_DMA_Abort_IT+0x1d4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d009      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a1a      	ldr	r2, [pc, #104]	; (8007430 <HAL_DMA_Abort_IT+0x1d8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d004      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x17c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a19      	ldr	r2, [pc, #100]	; (8007434 <HAL_DMA_Abort_IT+0x1dc>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d108      	bne.n	80073e6 <HAL_DMA_Abort_IT+0x18e>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0201 	bic.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	e178      	b.n	80076d8 <HAL_DMA_Abort_IT+0x480>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0201 	bic.w	r2, r2, #1
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	e16f      	b.n	80076d8 <HAL_DMA_Abort_IT+0x480>
 80073f8:	40020010 	.word	0x40020010
 80073fc:	40020028 	.word	0x40020028
 8007400:	40020040 	.word	0x40020040
 8007404:	40020058 	.word	0x40020058
 8007408:	40020070 	.word	0x40020070
 800740c:	40020088 	.word	0x40020088
 8007410:	400200a0 	.word	0x400200a0
 8007414:	400200b8 	.word	0x400200b8
 8007418:	40020410 	.word	0x40020410
 800741c:	40020428 	.word	0x40020428
 8007420:	40020440 	.word	0x40020440
 8007424:	40020458 	.word	0x40020458
 8007428:	40020470 	.word	0x40020470
 800742c:	40020488 	.word	0x40020488
 8007430:	400204a0 	.word	0x400204a0
 8007434:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 020e 	bic.w	r2, r2, #14
 8007446:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a6c      	ldr	r2, [pc, #432]	; (8007600 <HAL_DMA_Abort_IT+0x3a8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d04a      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a6b      	ldr	r2, [pc, #428]	; (8007604 <HAL_DMA_Abort_IT+0x3ac>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d045      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a69      	ldr	r2, [pc, #420]	; (8007608 <HAL_DMA_Abort_IT+0x3b0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d040      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a68      	ldr	r2, [pc, #416]	; (800760c <HAL_DMA_Abort_IT+0x3b4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d03b      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a66      	ldr	r2, [pc, #408]	; (8007610 <HAL_DMA_Abort_IT+0x3b8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d036      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a65      	ldr	r2, [pc, #404]	; (8007614 <HAL_DMA_Abort_IT+0x3bc>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d031      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a63      	ldr	r2, [pc, #396]	; (8007618 <HAL_DMA_Abort_IT+0x3c0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d02c      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a62      	ldr	r2, [pc, #392]	; (800761c <HAL_DMA_Abort_IT+0x3c4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d027      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a60      	ldr	r2, [pc, #384]	; (8007620 <HAL_DMA_Abort_IT+0x3c8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d022      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a5f      	ldr	r2, [pc, #380]	; (8007624 <HAL_DMA_Abort_IT+0x3cc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d01d      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a5d      	ldr	r2, [pc, #372]	; (8007628 <HAL_DMA_Abort_IT+0x3d0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d018      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a5c      	ldr	r2, [pc, #368]	; (800762c <HAL_DMA_Abort_IT+0x3d4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a5a      	ldr	r2, [pc, #360]	; (8007630 <HAL_DMA_Abort_IT+0x3d8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00e      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a59      	ldr	r2, [pc, #356]	; (8007634 <HAL_DMA_Abort_IT+0x3dc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d009      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a57      	ldr	r2, [pc, #348]	; (8007638 <HAL_DMA_Abort_IT+0x3e0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_DMA_Abort_IT+0x290>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a56      	ldr	r2, [pc, #344]	; (800763c <HAL_DMA_Abort_IT+0x3e4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d108      	bne.n	80074fa <HAL_DMA_Abort_IT+0x2a2>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	e007      	b.n	800750a <HAL_DMA_Abort_IT+0x2b2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0201 	bic.w	r2, r2, #1
 8007508:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a3c      	ldr	r2, [pc, #240]	; (8007600 <HAL_DMA_Abort_IT+0x3a8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d072      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a3a      	ldr	r2, [pc, #232]	; (8007604 <HAL_DMA_Abort_IT+0x3ac>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d06d      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a39      	ldr	r2, [pc, #228]	; (8007608 <HAL_DMA_Abort_IT+0x3b0>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d068      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a37      	ldr	r2, [pc, #220]	; (800760c <HAL_DMA_Abort_IT+0x3b4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d063      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a36      	ldr	r2, [pc, #216]	; (8007610 <HAL_DMA_Abort_IT+0x3b8>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d05e      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a34      	ldr	r2, [pc, #208]	; (8007614 <HAL_DMA_Abort_IT+0x3bc>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d059      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a33      	ldr	r2, [pc, #204]	; (8007618 <HAL_DMA_Abort_IT+0x3c0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d054      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a31      	ldr	r2, [pc, #196]	; (800761c <HAL_DMA_Abort_IT+0x3c4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d04f      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a30      	ldr	r2, [pc, #192]	; (8007620 <HAL_DMA_Abort_IT+0x3c8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d04a      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a2e      	ldr	r2, [pc, #184]	; (8007624 <HAL_DMA_Abort_IT+0x3cc>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d045      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a2d      	ldr	r2, [pc, #180]	; (8007628 <HAL_DMA_Abort_IT+0x3d0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d040      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a2b      	ldr	r2, [pc, #172]	; (800762c <HAL_DMA_Abort_IT+0x3d4>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d03b      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a2a      	ldr	r2, [pc, #168]	; (8007630 <HAL_DMA_Abort_IT+0x3d8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d036      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a28      	ldr	r2, [pc, #160]	; (8007634 <HAL_DMA_Abort_IT+0x3dc>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d031      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a27      	ldr	r2, [pc, #156]	; (8007638 <HAL_DMA_Abort_IT+0x3e0>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d02c      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a25      	ldr	r2, [pc, #148]	; (800763c <HAL_DMA_Abort_IT+0x3e4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d027      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a24      	ldr	r2, [pc, #144]	; (8007640 <HAL_DMA_Abort_IT+0x3e8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d022      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a22      	ldr	r2, [pc, #136]	; (8007644 <HAL_DMA_Abort_IT+0x3ec>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01d      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a21      	ldr	r2, [pc, #132]	; (8007648 <HAL_DMA_Abort_IT+0x3f0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d018      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a1f      	ldr	r2, [pc, #124]	; (800764c <HAL_DMA_Abort_IT+0x3f4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d013      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a1e      	ldr	r2, [pc, #120]	; (8007650 <HAL_DMA_Abort_IT+0x3f8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00e      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a1c      	ldr	r2, [pc, #112]	; (8007654 <HAL_DMA_Abort_IT+0x3fc>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d009      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a1b      	ldr	r2, [pc, #108]	; (8007658 <HAL_DMA_Abort_IT+0x400>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d004      	beq.n	80075fa <HAL_DMA_Abort_IT+0x3a2>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a19      	ldr	r2, [pc, #100]	; (800765c <HAL_DMA_Abort_IT+0x404>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d132      	bne.n	8007660 <HAL_DMA_Abort_IT+0x408>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e031      	b.n	8007662 <HAL_DMA_Abort_IT+0x40a>
 80075fe:	bf00      	nop
 8007600:	40020010 	.word	0x40020010
 8007604:	40020028 	.word	0x40020028
 8007608:	40020040 	.word	0x40020040
 800760c:	40020058 	.word	0x40020058
 8007610:	40020070 	.word	0x40020070
 8007614:	40020088 	.word	0x40020088
 8007618:	400200a0 	.word	0x400200a0
 800761c:	400200b8 	.word	0x400200b8
 8007620:	40020410 	.word	0x40020410
 8007624:	40020428 	.word	0x40020428
 8007628:	40020440 	.word	0x40020440
 800762c:	40020458 	.word	0x40020458
 8007630:	40020470 	.word	0x40020470
 8007634:	40020488 	.word	0x40020488
 8007638:	400204a0 	.word	0x400204a0
 800763c:	400204b8 	.word	0x400204b8
 8007640:	58025408 	.word	0x58025408
 8007644:	5802541c 	.word	0x5802541c
 8007648:	58025430 	.word	0x58025430
 800764c:	58025444 	.word	0x58025444
 8007650:	58025458 	.word	0x58025458
 8007654:	5802546c 	.word	0x5802546c
 8007658:	58025480 	.word	0x58025480
 800765c:	58025494 	.word	0x58025494
 8007660:	2300      	movs	r3, #0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d028      	beq.n	80076b8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007674:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007680:	f003 031f 	and.w	r3, r3, #31
 8007684:	2201      	movs	r2, #1
 8007686:	409a      	lsls	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007694:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00c      	beq.n	80076b8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80076b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop

080076e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80076f0:	4b67      	ldr	r3, [pc, #412]	; (8007890 <HAL_DMA_IRQHandler+0x1ac>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a67      	ldr	r2, [pc, #412]	; (8007894 <HAL_DMA_IRQHandler+0x1b0>)
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	0a9b      	lsrs	r3, r3, #10
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007702:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007708:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a5f      	ldr	r2, [pc, #380]	; (8007898 <HAL_DMA_IRQHandler+0x1b4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d04a      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a5d      	ldr	r2, [pc, #372]	; (800789c <HAL_DMA_IRQHandler+0x1b8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d045      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a5c      	ldr	r2, [pc, #368]	; (80078a0 <HAL_DMA_IRQHandler+0x1bc>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d040      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a5a      	ldr	r2, [pc, #360]	; (80078a4 <HAL_DMA_IRQHandler+0x1c0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d03b      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a59      	ldr	r2, [pc, #356]	; (80078a8 <HAL_DMA_IRQHandler+0x1c4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d036      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a57      	ldr	r2, [pc, #348]	; (80078ac <HAL_DMA_IRQHandler+0x1c8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d031      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a56      	ldr	r2, [pc, #344]	; (80078b0 <HAL_DMA_IRQHandler+0x1cc>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d02c      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a54      	ldr	r2, [pc, #336]	; (80078b4 <HAL_DMA_IRQHandler+0x1d0>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d027      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a53      	ldr	r2, [pc, #332]	; (80078b8 <HAL_DMA_IRQHandler+0x1d4>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d022      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a51      	ldr	r2, [pc, #324]	; (80078bc <HAL_DMA_IRQHandler+0x1d8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d01d      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a50      	ldr	r2, [pc, #320]	; (80078c0 <HAL_DMA_IRQHandler+0x1dc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d018      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a4e      	ldr	r2, [pc, #312]	; (80078c4 <HAL_DMA_IRQHandler+0x1e0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d013      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a4d      	ldr	r2, [pc, #308]	; (80078c8 <HAL_DMA_IRQHandler+0x1e4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00e      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a4b      	ldr	r2, [pc, #300]	; (80078cc <HAL_DMA_IRQHandler+0x1e8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d009      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a4a      	ldr	r2, [pc, #296]	; (80078d0 <HAL_DMA_IRQHandler+0x1ec>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d004      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xd2>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a48      	ldr	r2, [pc, #288]	; (80078d4 <HAL_DMA_IRQHandler+0x1f0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d101      	bne.n	80077ba <HAL_DMA_IRQHandler+0xd6>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e000      	b.n	80077bc <HAL_DMA_IRQHandler+0xd8>
 80077ba:	2300      	movs	r3, #0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 842b 	beq.w	8008018 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c6:	f003 031f 	and.w	r3, r3, #31
 80077ca:	2208      	movs	r2, #8
 80077cc:	409a      	lsls	r2, r3
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	4013      	ands	r3, r2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 80a2 	beq.w	800791c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a2e      	ldr	r2, [pc, #184]	; (8007898 <HAL_DMA_IRQHandler+0x1b4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d04a      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a2d      	ldr	r2, [pc, #180]	; (800789c <HAL_DMA_IRQHandler+0x1b8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d045      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a2b      	ldr	r2, [pc, #172]	; (80078a0 <HAL_DMA_IRQHandler+0x1bc>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d040      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2a      	ldr	r2, [pc, #168]	; (80078a4 <HAL_DMA_IRQHandler+0x1c0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d03b      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a28      	ldr	r2, [pc, #160]	; (80078a8 <HAL_DMA_IRQHandler+0x1c4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d036      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a27      	ldr	r2, [pc, #156]	; (80078ac <HAL_DMA_IRQHandler+0x1c8>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d031      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a25      	ldr	r2, [pc, #148]	; (80078b0 <HAL_DMA_IRQHandler+0x1cc>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d02c      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a24      	ldr	r2, [pc, #144]	; (80078b4 <HAL_DMA_IRQHandler+0x1d0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d027      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a22      	ldr	r2, [pc, #136]	; (80078b8 <HAL_DMA_IRQHandler+0x1d4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d022      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a21      	ldr	r2, [pc, #132]	; (80078bc <HAL_DMA_IRQHandler+0x1d8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d01d      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a1f      	ldr	r2, [pc, #124]	; (80078c0 <HAL_DMA_IRQHandler+0x1dc>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d018      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a1e      	ldr	r2, [pc, #120]	; (80078c4 <HAL_DMA_IRQHandler+0x1e0>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d013      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1c      	ldr	r2, [pc, #112]	; (80078c8 <HAL_DMA_IRQHandler+0x1e4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00e      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1b      	ldr	r2, [pc, #108]	; (80078cc <HAL_DMA_IRQHandler+0x1e8>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d009      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <HAL_DMA_IRQHandler+0x1ec>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d004      	beq.n	8007878 <HAL_DMA_IRQHandler+0x194>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a18      	ldr	r2, [pc, #96]	; (80078d4 <HAL_DMA_IRQHandler+0x1f0>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d12f      	bne.n	80078d8 <HAL_DMA_IRQHandler+0x1f4>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0304 	and.w	r3, r3, #4
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf14      	ite	ne
 8007886:	2301      	movne	r3, #1
 8007888:	2300      	moveq	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	e02e      	b.n	80078ec <HAL_DMA_IRQHandler+0x208>
 800788e:	bf00      	nop
 8007890:	24000090 	.word	0x24000090
 8007894:	1b4e81b5 	.word	0x1b4e81b5
 8007898:	40020010 	.word	0x40020010
 800789c:	40020028 	.word	0x40020028
 80078a0:	40020040 	.word	0x40020040
 80078a4:	40020058 	.word	0x40020058
 80078a8:	40020070 	.word	0x40020070
 80078ac:	40020088 	.word	0x40020088
 80078b0:	400200a0 	.word	0x400200a0
 80078b4:	400200b8 	.word	0x400200b8
 80078b8:	40020410 	.word	0x40020410
 80078bc:	40020428 	.word	0x40020428
 80078c0:	40020440 	.word	0x40020440
 80078c4:	40020458 	.word	0x40020458
 80078c8:	40020470 	.word	0x40020470
 80078cc:	40020488 	.word	0x40020488
 80078d0:	400204a0 	.word	0x400204a0
 80078d4:	400204b8 	.word	0x400204b8
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	bf14      	ite	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	2300      	moveq	r3, #0
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d015      	beq.n	800791c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 0204 	bic.w	r2, r2, #4
 80078fe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	2208      	movs	r2, #8
 800790a:	409a      	lsls	r2, r3
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007914:	f043 0201 	orr.w	r2, r3, #1
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	fa22 f303 	lsr.w	r3, r2, r3
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d06e      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a69      	ldr	r2, [pc, #420]	; (8007adc <HAL_DMA_IRQHandler+0x3f8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d04a      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a67      	ldr	r2, [pc, #412]	; (8007ae0 <HAL_DMA_IRQHandler+0x3fc>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d045      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a66      	ldr	r2, [pc, #408]	; (8007ae4 <HAL_DMA_IRQHandler+0x400>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d040      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a64      	ldr	r2, [pc, #400]	; (8007ae8 <HAL_DMA_IRQHandler+0x404>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d03b      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a63      	ldr	r2, [pc, #396]	; (8007aec <HAL_DMA_IRQHandler+0x408>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d036      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a61      	ldr	r2, [pc, #388]	; (8007af0 <HAL_DMA_IRQHandler+0x40c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d031      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a60      	ldr	r2, [pc, #384]	; (8007af4 <HAL_DMA_IRQHandler+0x410>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d02c      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a5e      	ldr	r2, [pc, #376]	; (8007af8 <HAL_DMA_IRQHandler+0x414>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d027      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a5d      	ldr	r2, [pc, #372]	; (8007afc <HAL_DMA_IRQHandler+0x418>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d022      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a5b      	ldr	r2, [pc, #364]	; (8007b00 <HAL_DMA_IRQHandler+0x41c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d01d      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a5a      	ldr	r2, [pc, #360]	; (8007b04 <HAL_DMA_IRQHandler+0x420>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d018      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a58      	ldr	r2, [pc, #352]	; (8007b08 <HAL_DMA_IRQHandler+0x424>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d013      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a57      	ldr	r2, [pc, #348]	; (8007b0c <HAL_DMA_IRQHandler+0x428>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00e      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a55      	ldr	r2, [pc, #340]	; (8007b10 <HAL_DMA_IRQHandler+0x42c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d009      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a54      	ldr	r2, [pc, #336]	; (8007b14 <HAL_DMA_IRQHandler+0x430>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d004      	beq.n	80079d2 <HAL_DMA_IRQHandler+0x2ee>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a52      	ldr	r2, [pc, #328]	; (8007b18 <HAL_DMA_IRQHandler+0x434>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d10a      	bne.n	80079e8 <HAL_DMA_IRQHandler+0x304>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bf14      	ite	ne
 80079e0:	2301      	movne	r3, #1
 80079e2:	2300      	moveq	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	e003      	b.n	80079f0 <HAL_DMA_IRQHandler+0x30c>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2300      	movs	r3, #0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00d      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f8:	f003 031f 	and.w	r3, r3, #31
 80079fc:	2201      	movs	r2, #1
 80079fe:	409a      	lsls	r2, r3
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a08:	f043 0202 	orr.w	r2, r3, #2
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	2204      	movs	r2, #4
 8007a1a:	409a      	lsls	r2, r3
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 808f 	beq.w	8007b44 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a2c      	ldr	r2, [pc, #176]	; (8007adc <HAL_DMA_IRQHandler+0x3f8>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d04a      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a2a      	ldr	r2, [pc, #168]	; (8007ae0 <HAL_DMA_IRQHandler+0x3fc>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d045      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a29      	ldr	r2, [pc, #164]	; (8007ae4 <HAL_DMA_IRQHandler+0x400>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d040      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a27      	ldr	r2, [pc, #156]	; (8007ae8 <HAL_DMA_IRQHandler+0x404>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d03b      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a26      	ldr	r2, [pc, #152]	; (8007aec <HAL_DMA_IRQHandler+0x408>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d036      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a24      	ldr	r2, [pc, #144]	; (8007af0 <HAL_DMA_IRQHandler+0x40c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d031      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a23      	ldr	r2, [pc, #140]	; (8007af4 <HAL_DMA_IRQHandler+0x410>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d02c      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a21      	ldr	r2, [pc, #132]	; (8007af8 <HAL_DMA_IRQHandler+0x414>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d027      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a20      	ldr	r2, [pc, #128]	; (8007afc <HAL_DMA_IRQHandler+0x418>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d022      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a1e      	ldr	r2, [pc, #120]	; (8007b00 <HAL_DMA_IRQHandler+0x41c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01d      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a1d      	ldr	r2, [pc, #116]	; (8007b04 <HAL_DMA_IRQHandler+0x420>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d018      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a1b      	ldr	r2, [pc, #108]	; (8007b08 <HAL_DMA_IRQHandler+0x424>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d013      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a1a      	ldr	r2, [pc, #104]	; (8007b0c <HAL_DMA_IRQHandler+0x428>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00e      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a18      	ldr	r2, [pc, #96]	; (8007b10 <HAL_DMA_IRQHandler+0x42c>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d009      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a17      	ldr	r2, [pc, #92]	; (8007b14 <HAL_DMA_IRQHandler+0x430>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d004      	beq.n	8007ac6 <HAL_DMA_IRQHandler+0x3e2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <HAL_DMA_IRQHandler+0x434>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d12a      	bne.n	8007b1c <HAL_DMA_IRQHandler+0x438>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	bf14      	ite	ne
 8007ad4:	2301      	movne	r3, #1
 8007ad6:	2300      	moveq	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	e023      	b.n	8007b24 <HAL_DMA_IRQHandler+0x440>
 8007adc:	40020010 	.word	0x40020010
 8007ae0:	40020028 	.word	0x40020028
 8007ae4:	40020040 	.word	0x40020040
 8007ae8:	40020058 	.word	0x40020058
 8007aec:	40020070 	.word	0x40020070
 8007af0:	40020088 	.word	0x40020088
 8007af4:	400200a0 	.word	0x400200a0
 8007af8:	400200b8 	.word	0x400200b8
 8007afc:	40020410 	.word	0x40020410
 8007b00:	40020428 	.word	0x40020428
 8007b04:	40020440 	.word	0x40020440
 8007b08:	40020458 	.word	0x40020458
 8007b0c:	40020470 	.word	0x40020470
 8007b10:	40020488 	.word	0x40020488
 8007b14:	400204a0 	.word	0x400204a0
 8007b18:	400204b8 	.word	0x400204b8
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2300      	movs	r3, #0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00d      	beq.n	8007b44 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b2c:	f003 031f 	and.w	r3, r3, #31
 8007b30:	2204      	movs	r2, #4
 8007b32:	409a      	lsls	r2, r3
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3c:	f043 0204 	orr.w	r2, r3, #4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b48:	f003 031f 	and.w	r3, r3, #31
 8007b4c:	2210      	movs	r2, #16
 8007b4e:	409a      	lsls	r2, r3
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	4013      	ands	r3, r2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 80a6 	beq.w	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a85      	ldr	r2, [pc, #532]	; (8007d74 <HAL_DMA_IRQHandler+0x690>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d04a      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a83      	ldr	r2, [pc, #524]	; (8007d78 <HAL_DMA_IRQHandler+0x694>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d045      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a82      	ldr	r2, [pc, #520]	; (8007d7c <HAL_DMA_IRQHandler+0x698>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d040      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a80      	ldr	r2, [pc, #512]	; (8007d80 <HAL_DMA_IRQHandler+0x69c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d03b      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a7f      	ldr	r2, [pc, #508]	; (8007d84 <HAL_DMA_IRQHandler+0x6a0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d036      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a7d      	ldr	r2, [pc, #500]	; (8007d88 <HAL_DMA_IRQHandler+0x6a4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d031      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a7c      	ldr	r2, [pc, #496]	; (8007d8c <HAL_DMA_IRQHandler+0x6a8>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d02c      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a7a      	ldr	r2, [pc, #488]	; (8007d90 <HAL_DMA_IRQHandler+0x6ac>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d027      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a79      	ldr	r2, [pc, #484]	; (8007d94 <HAL_DMA_IRQHandler+0x6b0>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d022      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a77      	ldr	r2, [pc, #476]	; (8007d98 <HAL_DMA_IRQHandler+0x6b4>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d01d      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a76      	ldr	r2, [pc, #472]	; (8007d9c <HAL_DMA_IRQHandler+0x6b8>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d018      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a74      	ldr	r2, [pc, #464]	; (8007da0 <HAL_DMA_IRQHandler+0x6bc>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d013      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a73      	ldr	r2, [pc, #460]	; (8007da4 <HAL_DMA_IRQHandler+0x6c0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00e      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a71      	ldr	r2, [pc, #452]	; (8007da8 <HAL_DMA_IRQHandler+0x6c4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d009      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a70      	ldr	r2, [pc, #448]	; (8007dac <HAL_DMA_IRQHandler+0x6c8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d004      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x516>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a6e      	ldr	r2, [pc, #440]	; (8007db0 <HAL_DMA_IRQHandler+0x6cc>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d10a      	bne.n	8007c10 <HAL_DMA_IRQHandler+0x52c>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	bf14      	ite	ne
 8007c08:	2301      	movne	r3, #1
 8007c0a:	2300      	moveq	r3, #0
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	e009      	b.n	8007c24 <HAL_DMA_IRQHandler+0x540>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	bf14      	ite	ne
 8007c1e:	2301      	movne	r3, #1
 8007c20:	2300      	moveq	r3, #0
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d03e      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2c:	f003 031f 	and.w	r3, r3, #31
 8007c30:	2210      	movs	r2, #16
 8007c32:	409a      	lsls	r2, r3
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d018      	beq.n	8007c78 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d108      	bne.n	8007c66 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d024      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	4798      	blx	r3
 8007c64:	e01f      	b.n	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d01b      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
 8007c76:	e016      	b.n	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d107      	bne.n	8007c96 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0208 	bic.w	r2, r2, #8
 8007c94:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	2220      	movs	r2, #32
 8007cb0:	409a      	lsls	r2, r3
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 8110 	beq.w	8007edc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a2c      	ldr	r2, [pc, #176]	; (8007d74 <HAL_DMA_IRQHandler+0x690>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d04a      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a2b      	ldr	r2, [pc, #172]	; (8007d78 <HAL_DMA_IRQHandler+0x694>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d045      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a29      	ldr	r2, [pc, #164]	; (8007d7c <HAL_DMA_IRQHandler+0x698>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d040      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a28      	ldr	r2, [pc, #160]	; (8007d80 <HAL_DMA_IRQHandler+0x69c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d03b      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a26      	ldr	r2, [pc, #152]	; (8007d84 <HAL_DMA_IRQHandler+0x6a0>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d036      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a25      	ldr	r2, [pc, #148]	; (8007d88 <HAL_DMA_IRQHandler+0x6a4>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d031      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a23      	ldr	r2, [pc, #140]	; (8007d8c <HAL_DMA_IRQHandler+0x6a8>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d02c      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a22      	ldr	r2, [pc, #136]	; (8007d90 <HAL_DMA_IRQHandler+0x6ac>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d027      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a20      	ldr	r2, [pc, #128]	; (8007d94 <HAL_DMA_IRQHandler+0x6b0>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d022      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a1f      	ldr	r2, [pc, #124]	; (8007d98 <HAL_DMA_IRQHandler+0x6b4>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d01d      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a1d      	ldr	r2, [pc, #116]	; (8007d9c <HAL_DMA_IRQHandler+0x6b8>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d018      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a1c      	ldr	r2, [pc, #112]	; (8007da0 <HAL_DMA_IRQHandler+0x6bc>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d013      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a1a      	ldr	r2, [pc, #104]	; (8007da4 <HAL_DMA_IRQHandler+0x6c0>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00e      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a19      	ldr	r2, [pc, #100]	; (8007da8 <HAL_DMA_IRQHandler+0x6c4>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d009      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a17      	ldr	r2, [pc, #92]	; (8007dac <HAL_DMA_IRQHandler+0x6c8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d004      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x678>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a16      	ldr	r2, [pc, #88]	; (8007db0 <HAL_DMA_IRQHandler+0x6cc>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d12b      	bne.n	8007db4 <HAL_DMA_IRQHandler+0x6d0>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0310 	and.w	r3, r3, #16
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bf14      	ite	ne
 8007d6a:	2301      	movne	r3, #1
 8007d6c:	2300      	moveq	r3, #0
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	e02a      	b.n	8007dc8 <HAL_DMA_IRQHandler+0x6e4>
 8007d72:	bf00      	nop
 8007d74:	40020010 	.word	0x40020010
 8007d78:	40020028 	.word	0x40020028
 8007d7c:	40020040 	.word	0x40020040
 8007d80:	40020058 	.word	0x40020058
 8007d84:	40020070 	.word	0x40020070
 8007d88:	40020088 	.word	0x40020088
 8007d8c:	400200a0 	.word	0x400200a0
 8007d90:	400200b8 	.word	0x400200b8
 8007d94:	40020410 	.word	0x40020410
 8007d98:	40020428 	.word	0x40020428
 8007d9c:	40020440 	.word	0x40020440
 8007da0:	40020458 	.word	0x40020458
 8007da4:	40020470 	.word	0x40020470
 8007da8:	40020488 	.word	0x40020488
 8007dac:	400204a0 	.word	0x400204a0
 8007db0:	400204b8 	.word	0x400204b8
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	bf14      	ite	ne
 8007dc2:	2301      	movne	r3, #1
 8007dc4:	2300      	moveq	r3, #0
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 8087 	beq.w	8007edc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	409a      	lsls	r2, r3
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d139      	bne.n	8007e5e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0216 	bic.w	r2, r2, #22
 8007df8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	695a      	ldr	r2, [r3, #20]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e08:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <HAL_DMA_IRQHandler+0x736>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d007      	beq.n	8007e2a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0208 	bic.w	r2, r2, #8
 8007e28:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2e:	f003 031f 	and.w	r3, r3, #31
 8007e32:	223f      	movs	r2, #63	; 0x3f
 8007e34:	409a      	lsls	r2, r3
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 834a 	beq.w	80084e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	4798      	blx	r3
          }
          return;
 8007e5c:	e344      	b.n	80084e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d018      	beq.n	8007e9e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d108      	bne.n	8007e8c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d02c      	beq.n	8007edc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	4798      	blx	r3
 8007e8a:	e027      	b.n	8007edc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d023      	beq.n	8007edc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	4798      	blx	r3
 8007e9c:	e01e      	b.n	8007edc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10f      	bne.n	8007ecc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0210 	bic.w	r2, r2, #16
 8007eba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 8306 	beq.w	80084f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 8088 	beq.w	8008004 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2204      	movs	r2, #4
 8007ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a7a      	ldr	r2, [pc, #488]	; (80080ec <HAL_DMA_IRQHandler+0xa08>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d04a      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a79      	ldr	r2, [pc, #484]	; (80080f0 <HAL_DMA_IRQHandler+0xa0c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d045      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a77      	ldr	r2, [pc, #476]	; (80080f4 <HAL_DMA_IRQHandler+0xa10>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d040      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a76      	ldr	r2, [pc, #472]	; (80080f8 <HAL_DMA_IRQHandler+0xa14>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d03b      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a74      	ldr	r2, [pc, #464]	; (80080fc <HAL_DMA_IRQHandler+0xa18>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d036      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a73      	ldr	r2, [pc, #460]	; (8008100 <HAL_DMA_IRQHandler+0xa1c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d031      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a71      	ldr	r2, [pc, #452]	; (8008104 <HAL_DMA_IRQHandler+0xa20>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d02c      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a70      	ldr	r2, [pc, #448]	; (8008108 <HAL_DMA_IRQHandler+0xa24>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d027      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a6e      	ldr	r2, [pc, #440]	; (800810c <HAL_DMA_IRQHandler+0xa28>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d022      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a6d      	ldr	r2, [pc, #436]	; (8008110 <HAL_DMA_IRQHandler+0xa2c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d01d      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a6b      	ldr	r2, [pc, #428]	; (8008114 <HAL_DMA_IRQHandler+0xa30>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d018      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a6a      	ldr	r2, [pc, #424]	; (8008118 <HAL_DMA_IRQHandler+0xa34>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d013      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a68      	ldr	r2, [pc, #416]	; (800811c <HAL_DMA_IRQHandler+0xa38>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d00e      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a67      	ldr	r2, [pc, #412]	; (8008120 <HAL_DMA_IRQHandler+0xa3c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d009      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a65      	ldr	r2, [pc, #404]	; (8008124 <HAL_DMA_IRQHandler+0xa40>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d004      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x8b8>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a64      	ldr	r2, [pc, #400]	; (8008128 <HAL_DMA_IRQHandler+0xa44>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d108      	bne.n	8007fae <HAL_DMA_IRQHandler+0x8ca>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0201 	bic.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	e007      	b.n	8007fbe <HAL_DMA_IRQHandler+0x8da>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0201 	bic.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d307      	bcc.n	8007fda <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1f2      	bne.n	8007fbe <HAL_DMA_IRQHandler+0x8da>
 8007fd8:	e000      	b.n	8007fdc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007fda:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d004      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2203      	movs	r2, #3
 8007fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007ff2:	e003      	b.n	8007ffc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 8272 	beq.w	80084f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3
 8008016:	e26c      	b.n	80084f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a43      	ldr	r2, [pc, #268]	; (800812c <HAL_DMA_IRQHandler+0xa48>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d022      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a42      	ldr	r2, [pc, #264]	; (8008130 <HAL_DMA_IRQHandler+0xa4c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d01d      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a40      	ldr	r2, [pc, #256]	; (8008134 <HAL_DMA_IRQHandler+0xa50>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d018      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a3f      	ldr	r2, [pc, #252]	; (8008138 <HAL_DMA_IRQHandler+0xa54>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d013      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a3d      	ldr	r2, [pc, #244]	; (800813c <HAL_DMA_IRQHandler+0xa58>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00e      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a3c      	ldr	r2, [pc, #240]	; (8008140 <HAL_DMA_IRQHandler+0xa5c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d009      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a3a      	ldr	r2, [pc, #232]	; (8008144 <HAL_DMA_IRQHandler+0xa60>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d004      	beq.n	8008068 <HAL_DMA_IRQHandler+0x984>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a39      	ldr	r2, [pc, #228]	; (8008148 <HAL_DMA_IRQHandler+0xa64>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d101      	bne.n	800806c <HAL_DMA_IRQHandler+0x988>
 8008068:	2301      	movs	r3, #1
 800806a:	e000      	b.n	800806e <HAL_DMA_IRQHandler+0x98a>
 800806c:	2300      	movs	r3, #0
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 823f 	beq.w	80084f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008080:	f003 031f 	and.w	r3, r3, #31
 8008084:	2204      	movs	r2, #4
 8008086:	409a      	lsls	r2, r3
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	4013      	ands	r3, r2
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 80cd 	beq.w	800822c <HAL_DMA_IRQHandler+0xb48>
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80c7 	beq.w	800822c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a2:	f003 031f 	and.w	r3, r3, #31
 80080a6:	2204      	movs	r2, #4
 80080a8:	409a      	lsls	r2, r3
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d049      	beq.n	800814c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 8210 	beq.w	80084ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080d4:	e20a      	b.n	80084ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 8206 	beq.w	80084ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080e8:	e200      	b.n	80084ec <HAL_DMA_IRQHandler+0xe08>
 80080ea:	bf00      	nop
 80080ec:	40020010 	.word	0x40020010
 80080f0:	40020028 	.word	0x40020028
 80080f4:	40020040 	.word	0x40020040
 80080f8:	40020058 	.word	0x40020058
 80080fc:	40020070 	.word	0x40020070
 8008100:	40020088 	.word	0x40020088
 8008104:	400200a0 	.word	0x400200a0
 8008108:	400200b8 	.word	0x400200b8
 800810c:	40020410 	.word	0x40020410
 8008110:	40020428 	.word	0x40020428
 8008114:	40020440 	.word	0x40020440
 8008118:	40020458 	.word	0x40020458
 800811c:	40020470 	.word	0x40020470
 8008120:	40020488 	.word	0x40020488
 8008124:	400204a0 	.word	0x400204a0
 8008128:	400204b8 	.word	0x400204b8
 800812c:	58025408 	.word	0x58025408
 8008130:	5802541c 	.word	0x5802541c
 8008134:	58025430 	.word	0x58025430
 8008138:	58025444 	.word	0x58025444
 800813c:	58025458 	.word	0x58025458
 8008140:	5802546c 	.word	0x5802546c
 8008144:	58025480 	.word	0x58025480
 8008148:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d160      	bne.n	8008218 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a7f      	ldr	r2, [pc, #508]	; (8008358 <HAL_DMA_IRQHandler+0xc74>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d04a      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a7d      	ldr	r2, [pc, #500]	; (800835c <HAL_DMA_IRQHandler+0xc78>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d045      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a7c      	ldr	r2, [pc, #496]	; (8008360 <HAL_DMA_IRQHandler+0xc7c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d040      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a7a      	ldr	r2, [pc, #488]	; (8008364 <HAL_DMA_IRQHandler+0xc80>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d03b      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a79      	ldr	r2, [pc, #484]	; (8008368 <HAL_DMA_IRQHandler+0xc84>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d036      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a77      	ldr	r2, [pc, #476]	; (800836c <HAL_DMA_IRQHandler+0xc88>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d031      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a76      	ldr	r2, [pc, #472]	; (8008370 <HAL_DMA_IRQHandler+0xc8c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d02c      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a74      	ldr	r2, [pc, #464]	; (8008374 <HAL_DMA_IRQHandler+0xc90>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d027      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a73      	ldr	r2, [pc, #460]	; (8008378 <HAL_DMA_IRQHandler+0xc94>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d022      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a71      	ldr	r2, [pc, #452]	; (800837c <HAL_DMA_IRQHandler+0xc98>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d01d      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a70      	ldr	r2, [pc, #448]	; (8008380 <HAL_DMA_IRQHandler+0xc9c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d018      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a6e      	ldr	r2, [pc, #440]	; (8008384 <HAL_DMA_IRQHandler+0xca0>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d013      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a6d      	ldr	r2, [pc, #436]	; (8008388 <HAL_DMA_IRQHandler+0xca4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00e      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a6b      	ldr	r2, [pc, #428]	; (800838c <HAL_DMA_IRQHandler+0xca8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d009      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a6a      	ldr	r2, [pc, #424]	; (8008390 <HAL_DMA_IRQHandler+0xcac>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d004      	beq.n	80081f6 <HAL_DMA_IRQHandler+0xb12>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a68      	ldr	r2, [pc, #416]	; (8008394 <HAL_DMA_IRQHandler+0xcb0>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d108      	bne.n	8008208 <HAL_DMA_IRQHandler+0xb24>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0208 	bic.w	r2, r2, #8
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	e007      	b.n	8008218 <HAL_DMA_IRQHandler+0xb34>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0204 	bic.w	r2, r2, #4
 8008216:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8165 	beq.w	80084ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800822a:	e15f      	b.n	80084ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008230:	f003 031f 	and.w	r3, r3, #31
 8008234:	2202      	movs	r2, #2
 8008236:	409a      	lsls	r2, r3
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80c5 	beq.w	80083cc <HAL_DMA_IRQHandler+0xce8>
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 80bf 	beq.w	80083cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008252:	f003 031f 	and.w	r3, r3, #31
 8008256:	2202      	movs	r2, #2
 8008258:	409a      	lsls	r2, r3
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d018      	beq.n	800829a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d109      	bne.n	8008286 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 813a 	beq.w	80084f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008284:	e134      	b.n	80084f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 8130 	beq.w	80084f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008298:	e12a      	b.n	80084f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f040 8089 	bne.w	80083b8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a2b      	ldr	r2, [pc, #172]	; (8008358 <HAL_DMA_IRQHandler+0xc74>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d04a      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a29      	ldr	r2, [pc, #164]	; (800835c <HAL_DMA_IRQHandler+0xc78>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d045      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a28      	ldr	r2, [pc, #160]	; (8008360 <HAL_DMA_IRQHandler+0xc7c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d040      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a26      	ldr	r2, [pc, #152]	; (8008364 <HAL_DMA_IRQHandler+0xc80>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d03b      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a25      	ldr	r2, [pc, #148]	; (8008368 <HAL_DMA_IRQHandler+0xc84>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d036      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a23      	ldr	r2, [pc, #140]	; (800836c <HAL_DMA_IRQHandler+0xc88>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d031      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a22      	ldr	r2, [pc, #136]	; (8008370 <HAL_DMA_IRQHandler+0xc8c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d02c      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a20      	ldr	r2, [pc, #128]	; (8008374 <HAL_DMA_IRQHandler+0xc90>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d027      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a1f      	ldr	r2, [pc, #124]	; (8008378 <HAL_DMA_IRQHandler+0xc94>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d022      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a1d      	ldr	r2, [pc, #116]	; (800837c <HAL_DMA_IRQHandler+0xc98>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d01d      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a1c      	ldr	r2, [pc, #112]	; (8008380 <HAL_DMA_IRQHandler+0xc9c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d018      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a1a      	ldr	r2, [pc, #104]	; (8008384 <HAL_DMA_IRQHandler+0xca0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d013      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a19      	ldr	r2, [pc, #100]	; (8008388 <HAL_DMA_IRQHandler+0xca4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00e      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a17      	ldr	r2, [pc, #92]	; (800838c <HAL_DMA_IRQHandler+0xca8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d009      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a16      	ldr	r2, [pc, #88]	; (8008390 <HAL_DMA_IRQHandler+0xcac>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d004      	beq.n	8008346 <HAL_DMA_IRQHandler+0xc62>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a14      	ldr	r2, [pc, #80]	; (8008394 <HAL_DMA_IRQHandler+0xcb0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d128      	bne.n	8008398 <HAL_DMA_IRQHandler+0xcb4>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 0214 	bic.w	r2, r2, #20
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	e027      	b.n	80083a8 <HAL_DMA_IRQHandler+0xcc4>
 8008358:	40020010 	.word	0x40020010
 800835c:	40020028 	.word	0x40020028
 8008360:	40020040 	.word	0x40020040
 8008364:	40020058 	.word	0x40020058
 8008368:	40020070 	.word	0x40020070
 800836c:	40020088 	.word	0x40020088
 8008370:	400200a0 	.word	0x400200a0
 8008374:	400200b8 	.word	0x400200b8
 8008378:	40020410 	.word	0x40020410
 800837c:	40020428 	.word	0x40020428
 8008380:	40020440 	.word	0x40020440
 8008384:	40020458 	.word	0x40020458
 8008388:	40020470 	.word	0x40020470
 800838c:	40020488 	.word	0x40020488
 8008390:	400204a0 	.word	0x400204a0
 8008394:	400204b8 	.word	0x400204b8
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 020a 	bic.w	r2, r2, #10
 80083a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 8097 	beq.w	80084f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083ca:	e091      	b.n	80084f0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d0:	f003 031f 	and.w	r3, r3, #31
 80083d4:	2208      	movs	r2, #8
 80083d6:	409a      	lsls	r2, r3
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	4013      	ands	r3, r2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 8088 	beq.w	80084f2 <HAL_DMA_IRQHandler+0xe0e>
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 8082 	beq.w	80084f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a41      	ldr	r2, [pc, #260]	; (80084f8 <HAL_DMA_IRQHandler+0xe14>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d04a      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a3f      	ldr	r2, [pc, #252]	; (80084fc <HAL_DMA_IRQHandler+0xe18>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d045      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a3e      	ldr	r2, [pc, #248]	; (8008500 <HAL_DMA_IRQHandler+0xe1c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d040      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a3c      	ldr	r2, [pc, #240]	; (8008504 <HAL_DMA_IRQHandler+0xe20>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d03b      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a3b      	ldr	r2, [pc, #236]	; (8008508 <HAL_DMA_IRQHandler+0xe24>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d036      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a39      	ldr	r2, [pc, #228]	; (800850c <HAL_DMA_IRQHandler+0xe28>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d031      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a38      	ldr	r2, [pc, #224]	; (8008510 <HAL_DMA_IRQHandler+0xe2c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d02c      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a36      	ldr	r2, [pc, #216]	; (8008514 <HAL_DMA_IRQHandler+0xe30>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d027      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a35      	ldr	r2, [pc, #212]	; (8008518 <HAL_DMA_IRQHandler+0xe34>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d022      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a33      	ldr	r2, [pc, #204]	; (800851c <HAL_DMA_IRQHandler+0xe38>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d01d      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a32      	ldr	r2, [pc, #200]	; (8008520 <HAL_DMA_IRQHandler+0xe3c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d018      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a30      	ldr	r2, [pc, #192]	; (8008524 <HAL_DMA_IRQHandler+0xe40>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d013      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a2f      	ldr	r2, [pc, #188]	; (8008528 <HAL_DMA_IRQHandler+0xe44>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00e      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a2d      	ldr	r2, [pc, #180]	; (800852c <HAL_DMA_IRQHandler+0xe48>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d009      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a2c      	ldr	r2, [pc, #176]	; (8008530 <HAL_DMA_IRQHandler+0xe4c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d004      	beq.n	800848e <HAL_DMA_IRQHandler+0xdaa>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a2a      	ldr	r2, [pc, #168]	; (8008534 <HAL_DMA_IRQHandler+0xe50>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d108      	bne.n	80084a0 <HAL_DMA_IRQHandler+0xdbc>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 021c 	bic.w	r2, r2, #28
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	e007      	b.n	80084b0 <HAL_DMA_IRQHandler+0xdcc>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 020e 	bic.w	r2, r2, #14
 80084ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b4:	f003 031f 	and.w	r3, r3, #31
 80084b8:	2201      	movs	r2, #1
 80084ba:	409a      	lsls	r2, r3
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d009      	beq.n	80084f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	4798      	blx	r3
 80084e6:	e004      	b.n	80084f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80084e8:	bf00      	nop
 80084ea:	e002      	b.n	80084f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084ec:	bf00      	nop
 80084ee:	e000      	b.n	80084f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80084f2:	3728      	adds	r7, #40	; 0x28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	40020010 	.word	0x40020010
 80084fc:	40020028 	.word	0x40020028
 8008500:	40020040 	.word	0x40020040
 8008504:	40020058 	.word	0x40020058
 8008508:	40020070 	.word	0x40020070
 800850c:	40020088 	.word	0x40020088
 8008510:	400200a0 	.word	0x400200a0
 8008514:	400200b8 	.word	0x400200b8
 8008518:	40020410 	.word	0x40020410
 800851c:	40020428 	.word	0x40020428
 8008520:	40020440 	.word	0x40020440
 8008524:	40020458 	.word	0x40020458
 8008528:	40020470 	.word	0x40020470
 800852c:	40020488 	.word	0x40020488
 8008530:	400204a0 	.word	0x400204a0
 8008534:	400204b8 	.word	0x400204b8

08008538 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008544:	4618      	mov	r0, r3
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008562:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008568:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a7f      	ldr	r2, [pc, #508]	; (800876c <DMA_SetConfig+0x21c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d072      	beq.n	800865a <DMA_SetConfig+0x10a>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a7d      	ldr	r2, [pc, #500]	; (8008770 <DMA_SetConfig+0x220>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d06d      	beq.n	800865a <DMA_SetConfig+0x10a>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a7c      	ldr	r2, [pc, #496]	; (8008774 <DMA_SetConfig+0x224>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d068      	beq.n	800865a <DMA_SetConfig+0x10a>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a7a      	ldr	r2, [pc, #488]	; (8008778 <DMA_SetConfig+0x228>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d063      	beq.n	800865a <DMA_SetConfig+0x10a>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a79      	ldr	r2, [pc, #484]	; (800877c <DMA_SetConfig+0x22c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d05e      	beq.n	800865a <DMA_SetConfig+0x10a>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a77      	ldr	r2, [pc, #476]	; (8008780 <DMA_SetConfig+0x230>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d059      	beq.n	800865a <DMA_SetConfig+0x10a>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a76      	ldr	r2, [pc, #472]	; (8008784 <DMA_SetConfig+0x234>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d054      	beq.n	800865a <DMA_SetConfig+0x10a>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a74      	ldr	r2, [pc, #464]	; (8008788 <DMA_SetConfig+0x238>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d04f      	beq.n	800865a <DMA_SetConfig+0x10a>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a73      	ldr	r2, [pc, #460]	; (800878c <DMA_SetConfig+0x23c>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d04a      	beq.n	800865a <DMA_SetConfig+0x10a>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a71      	ldr	r2, [pc, #452]	; (8008790 <DMA_SetConfig+0x240>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d045      	beq.n	800865a <DMA_SetConfig+0x10a>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a70      	ldr	r2, [pc, #448]	; (8008794 <DMA_SetConfig+0x244>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d040      	beq.n	800865a <DMA_SetConfig+0x10a>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a6e      	ldr	r2, [pc, #440]	; (8008798 <DMA_SetConfig+0x248>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d03b      	beq.n	800865a <DMA_SetConfig+0x10a>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a6d      	ldr	r2, [pc, #436]	; (800879c <DMA_SetConfig+0x24c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d036      	beq.n	800865a <DMA_SetConfig+0x10a>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a6b      	ldr	r2, [pc, #428]	; (80087a0 <DMA_SetConfig+0x250>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d031      	beq.n	800865a <DMA_SetConfig+0x10a>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a6a      	ldr	r2, [pc, #424]	; (80087a4 <DMA_SetConfig+0x254>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d02c      	beq.n	800865a <DMA_SetConfig+0x10a>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a68      	ldr	r2, [pc, #416]	; (80087a8 <DMA_SetConfig+0x258>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d027      	beq.n	800865a <DMA_SetConfig+0x10a>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a67      	ldr	r2, [pc, #412]	; (80087ac <DMA_SetConfig+0x25c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d022      	beq.n	800865a <DMA_SetConfig+0x10a>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a65      	ldr	r2, [pc, #404]	; (80087b0 <DMA_SetConfig+0x260>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d01d      	beq.n	800865a <DMA_SetConfig+0x10a>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a64      	ldr	r2, [pc, #400]	; (80087b4 <DMA_SetConfig+0x264>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d018      	beq.n	800865a <DMA_SetConfig+0x10a>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a62      	ldr	r2, [pc, #392]	; (80087b8 <DMA_SetConfig+0x268>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d013      	beq.n	800865a <DMA_SetConfig+0x10a>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a61      	ldr	r2, [pc, #388]	; (80087bc <DMA_SetConfig+0x26c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d00e      	beq.n	800865a <DMA_SetConfig+0x10a>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a5f      	ldr	r2, [pc, #380]	; (80087c0 <DMA_SetConfig+0x270>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d009      	beq.n	800865a <DMA_SetConfig+0x10a>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a5e      	ldr	r2, [pc, #376]	; (80087c4 <DMA_SetConfig+0x274>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d004      	beq.n	800865a <DMA_SetConfig+0x10a>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a5c      	ldr	r2, [pc, #368]	; (80087c8 <DMA_SetConfig+0x278>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d101      	bne.n	800865e <DMA_SetConfig+0x10e>
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <DMA_SetConfig+0x110>
 800865e:	2300      	movs	r3, #0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00d      	beq.n	8008680 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800866c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008672:	2b00      	cmp	r3, #0
 8008674:	d004      	beq.n	8008680 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800867e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a39      	ldr	r2, [pc, #228]	; (800876c <DMA_SetConfig+0x21c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d04a      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a38      	ldr	r2, [pc, #224]	; (8008770 <DMA_SetConfig+0x220>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d045      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a36      	ldr	r2, [pc, #216]	; (8008774 <DMA_SetConfig+0x224>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d040      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a35      	ldr	r2, [pc, #212]	; (8008778 <DMA_SetConfig+0x228>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d03b      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a33      	ldr	r2, [pc, #204]	; (800877c <DMA_SetConfig+0x22c>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d036      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a32      	ldr	r2, [pc, #200]	; (8008780 <DMA_SetConfig+0x230>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d031      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a30      	ldr	r2, [pc, #192]	; (8008784 <DMA_SetConfig+0x234>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d02c      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a2f      	ldr	r2, [pc, #188]	; (8008788 <DMA_SetConfig+0x238>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d027      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a2d      	ldr	r2, [pc, #180]	; (800878c <DMA_SetConfig+0x23c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d022      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a2c      	ldr	r2, [pc, #176]	; (8008790 <DMA_SetConfig+0x240>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d01d      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a2a      	ldr	r2, [pc, #168]	; (8008794 <DMA_SetConfig+0x244>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d018      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a29      	ldr	r2, [pc, #164]	; (8008798 <DMA_SetConfig+0x248>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d013      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a27      	ldr	r2, [pc, #156]	; (800879c <DMA_SetConfig+0x24c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00e      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a26      	ldr	r2, [pc, #152]	; (80087a0 <DMA_SetConfig+0x250>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d009      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a24      	ldr	r2, [pc, #144]	; (80087a4 <DMA_SetConfig+0x254>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d004      	beq.n	8008720 <DMA_SetConfig+0x1d0>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a23      	ldr	r2, [pc, #140]	; (80087a8 <DMA_SetConfig+0x258>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d101      	bne.n	8008724 <DMA_SetConfig+0x1d4>
 8008720:	2301      	movs	r3, #1
 8008722:	e000      	b.n	8008726 <DMA_SetConfig+0x1d6>
 8008724:	2300      	movs	r3, #0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d059      	beq.n	80087de <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800872e:	f003 031f 	and.w	r3, r3, #31
 8008732:	223f      	movs	r2, #63	; 0x3f
 8008734:	409a      	lsls	r2, r3
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008748:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	2b40      	cmp	r3, #64	; 0x40
 8008758:	d138      	bne.n	80087cc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800876a:	e086      	b.n	800887a <DMA_SetConfig+0x32a>
 800876c:	40020010 	.word	0x40020010
 8008770:	40020028 	.word	0x40020028
 8008774:	40020040 	.word	0x40020040
 8008778:	40020058 	.word	0x40020058
 800877c:	40020070 	.word	0x40020070
 8008780:	40020088 	.word	0x40020088
 8008784:	400200a0 	.word	0x400200a0
 8008788:	400200b8 	.word	0x400200b8
 800878c:	40020410 	.word	0x40020410
 8008790:	40020428 	.word	0x40020428
 8008794:	40020440 	.word	0x40020440
 8008798:	40020458 	.word	0x40020458
 800879c:	40020470 	.word	0x40020470
 80087a0:	40020488 	.word	0x40020488
 80087a4:	400204a0 	.word	0x400204a0
 80087a8:	400204b8 	.word	0x400204b8
 80087ac:	58025408 	.word	0x58025408
 80087b0:	5802541c 	.word	0x5802541c
 80087b4:	58025430 	.word	0x58025430
 80087b8:	58025444 	.word	0x58025444
 80087bc:	58025458 	.word	0x58025458
 80087c0:	5802546c 	.word	0x5802546c
 80087c4:	58025480 	.word	0x58025480
 80087c8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	60da      	str	r2, [r3, #12]
}
 80087dc:	e04d      	b.n	800887a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a29      	ldr	r2, [pc, #164]	; (8008888 <DMA_SetConfig+0x338>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d022      	beq.n	800882e <DMA_SetConfig+0x2de>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a27      	ldr	r2, [pc, #156]	; (800888c <DMA_SetConfig+0x33c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d01d      	beq.n	800882e <DMA_SetConfig+0x2de>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a26      	ldr	r2, [pc, #152]	; (8008890 <DMA_SetConfig+0x340>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d018      	beq.n	800882e <DMA_SetConfig+0x2de>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a24      	ldr	r2, [pc, #144]	; (8008894 <DMA_SetConfig+0x344>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d013      	beq.n	800882e <DMA_SetConfig+0x2de>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a23      	ldr	r2, [pc, #140]	; (8008898 <DMA_SetConfig+0x348>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d00e      	beq.n	800882e <DMA_SetConfig+0x2de>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a21      	ldr	r2, [pc, #132]	; (800889c <DMA_SetConfig+0x34c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d009      	beq.n	800882e <DMA_SetConfig+0x2de>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a20      	ldr	r2, [pc, #128]	; (80088a0 <DMA_SetConfig+0x350>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d004      	beq.n	800882e <DMA_SetConfig+0x2de>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a1e      	ldr	r2, [pc, #120]	; (80088a4 <DMA_SetConfig+0x354>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d101      	bne.n	8008832 <DMA_SetConfig+0x2e2>
 800882e:	2301      	movs	r3, #1
 8008830:	e000      	b.n	8008834 <DMA_SetConfig+0x2e4>
 8008832:	2300      	movs	r3, #0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d020      	beq.n	800887a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883c:	f003 031f 	and.w	r3, r3, #31
 8008840:	2201      	movs	r2, #1
 8008842:	409a      	lsls	r2, r3
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	2b40      	cmp	r3, #64	; 0x40
 8008856:	d108      	bne.n	800886a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	60da      	str	r2, [r3, #12]
}
 8008868:	e007      	b.n	800887a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	60da      	str	r2, [r3, #12]
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	58025408 	.word	0x58025408
 800888c:	5802541c 	.word	0x5802541c
 8008890:	58025430 	.word	0x58025430
 8008894:	58025444 	.word	0x58025444
 8008898:	58025458 	.word	0x58025458
 800889c:	5802546c 	.word	0x5802546c
 80088a0:	58025480 	.word	0x58025480
 80088a4:	58025494 	.word	0x58025494

080088a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a42      	ldr	r2, [pc, #264]	; (80089c0 <DMA_CalcBaseAndBitshift+0x118>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d04a      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a41      	ldr	r2, [pc, #260]	; (80089c4 <DMA_CalcBaseAndBitshift+0x11c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d045      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a3f      	ldr	r2, [pc, #252]	; (80089c8 <DMA_CalcBaseAndBitshift+0x120>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d040      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a3e      	ldr	r2, [pc, #248]	; (80089cc <DMA_CalcBaseAndBitshift+0x124>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d03b      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a3c      	ldr	r2, [pc, #240]	; (80089d0 <DMA_CalcBaseAndBitshift+0x128>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d036      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a3b      	ldr	r2, [pc, #236]	; (80089d4 <DMA_CalcBaseAndBitshift+0x12c>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d031      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a39      	ldr	r2, [pc, #228]	; (80089d8 <DMA_CalcBaseAndBitshift+0x130>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d02c      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a38      	ldr	r2, [pc, #224]	; (80089dc <DMA_CalcBaseAndBitshift+0x134>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d027      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a36      	ldr	r2, [pc, #216]	; (80089e0 <DMA_CalcBaseAndBitshift+0x138>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d022      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a35      	ldr	r2, [pc, #212]	; (80089e4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d01d      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a33      	ldr	r2, [pc, #204]	; (80089e8 <DMA_CalcBaseAndBitshift+0x140>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d018      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a32      	ldr	r2, [pc, #200]	; (80089ec <DMA_CalcBaseAndBitshift+0x144>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d013      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a30      	ldr	r2, [pc, #192]	; (80089f0 <DMA_CalcBaseAndBitshift+0x148>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d00e      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a2f      	ldr	r2, [pc, #188]	; (80089f4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d009      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a2d      	ldr	r2, [pc, #180]	; (80089f8 <DMA_CalcBaseAndBitshift+0x150>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d004      	beq.n	8008950 <DMA_CalcBaseAndBitshift+0xa8>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a2c      	ldr	r2, [pc, #176]	; (80089fc <DMA_CalcBaseAndBitshift+0x154>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d101      	bne.n	8008954 <DMA_CalcBaseAndBitshift+0xac>
 8008950:	2301      	movs	r3, #1
 8008952:	e000      	b.n	8008956 <DMA_CalcBaseAndBitshift+0xae>
 8008954:	2300      	movs	r3, #0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d024      	beq.n	80089a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	b2db      	uxtb	r3, r3
 8008960:	3b10      	subs	r3, #16
 8008962:	4a27      	ldr	r2, [pc, #156]	; (8008a00 <DMA_CalcBaseAndBitshift+0x158>)
 8008964:	fba2 2303 	umull	r2, r3, r2, r3
 8008968:	091b      	lsrs	r3, r3, #4
 800896a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f003 0307 	and.w	r3, r3, #7
 8008972:	4a24      	ldr	r2, [pc, #144]	; (8008a04 <DMA_CalcBaseAndBitshift+0x15c>)
 8008974:	5cd3      	ldrb	r3, [r2, r3]
 8008976:	461a      	mov	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b03      	cmp	r3, #3
 8008980:	d908      	bls.n	8008994 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	4b1f      	ldr	r3, [pc, #124]	; (8008a08 <DMA_CalcBaseAndBitshift+0x160>)
 800898a:	4013      	ands	r3, r2
 800898c:	1d1a      	adds	r2, r3, #4
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	659a      	str	r2, [r3, #88]	; 0x58
 8008992:	e00d      	b.n	80089b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	4b1b      	ldr	r3, [pc, #108]	; (8008a08 <DMA_CalcBaseAndBitshift+0x160>)
 800899c:	4013      	ands	r3, r2
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	6593      	str	r3, [r2, #88]	; 0x58
 80089a2:	e005      	b.n	80089b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	40020010 	.word	0x40020010
 80089c4:	40020028 	.word	0x40020028
 80089c8:	40020040 	.word	0x40020040
 80089cc:	40020058 	.word	0x40020058
 80089d0:	40020070 	.word	0x40020070
 80089d4:	40020088 	.word	0x40020088
 80089d8:	400200a0 	.word	0x400200a0
 80089dc:	400200b8 	.word	0x400200b8
 80089e0:	40020410 	.word	0x40020410
 80089e4:	40020428 	.word	0x40020428
 80089e8:	40020440 	.word	0x40020440
 80089ec:	40020458 	.word	0x40020458
 80089f0:	40020470 	.word	0x40020470
 80089f4:	40020488 	.word	0x40020488
 80089f8:	400204a0 	.word	0x400204a0
 80089fc:	400204b8 	.word	0x400204b8
 8008a00:	aaaaaaab 	.word	0xaaaaaaab
 8008a04:	080177e0 	.word	0x080177e0
 8008a08:	fffffc00 	.word	0xfffffc00

08008a0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d120      	bne.n	8008a62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	d858      	bhi.n	8008ada <DMA_CheckFifoParam+0xce>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <DMA_CheckFifoParam+0x24>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a41 	.word	0x08008a41
 8008a34:	08008a53 	.word	0x08008a53
 8008a38:	08008a41 	.word	0x08008a41
 8008a3c:	08008adb 	.word	0x08008adb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d048      	beq.n	8008ade <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a50:	e045      	b.n	8008ade <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a5a:	d142      	bne.n	8008ae2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a60:	e03f      	b.n	8008ae2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a6a:	d123      	bne.n	8008ab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d838      	bhi.n	8008ae6 <DMA_CheckFifoParam+0xda>
 8008a74:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <DMA_CheckFifoParam+0x70>)
 8008a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008a8d 	.word	0x08008a8d
 8008a80:	08008a93 	.word	0x08008a93
 8008a84:	08008a8d 	.word	0x08008a8d
 8008a88:	08008aa5 	.word	0x08008aa5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	73fb      	strb	r3, [r7, #15]
        break;
 8008a90:	e030      	b.n	8008af4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d025      	beq.n	8008aea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008aa2:	e022      	b.n	8008aea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008aac:	d11f      	bne.n	8008aee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ab2:	e01c      	b.n	8008aee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d902      	bls.n	8008ac2 <DMA_CheckFifoParam+0xb6>
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d003      	beq.n	8008ac8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008ac0:	e018      	b.n	8008af4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	73fb      	strb	r3, [r7, #15]
        break;
 8008ac6:	e015      	b.n	8008af4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00e      	beq.n	8008af2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad8:	e00b      	b.n	8008af2 <DMA_CheckFifoParam+0xe6>
        break;
 8008ada:	bf00      	nop
 8008adc:	e00a      	b.n	8008af4 <DMA_CheckFifoParam+0xe8>
        break;
 8008ade:	bf00      	nop
 8008ae0:	e008      	b.n	8008af4 <DMA_CheckFifoParam+0xe8>
        break;
 8008ae2:	bf00      	nop
 8008ae4:	e006      	b.n	8008af4 <DMA_CheckFifoParam+0xe8>
        break;
 8008ae6:	bf00      	nop
 8008ae8:	e004      	b.n	8008af4 <DMA_CheckFifoParam+0xe8>
        break;
 8008aea:	bf00      	nop
 8008aec:	e002      	b.n	8008af4 <DMA_CheckFifoParam+0xe8>
        break;
 8008aee:	bf00      	nop
 8008af0:	e000      	b.n	8008af4 <DMA_CheckFifoParam+0xe8>
    break;
 8008af2:	bf00      	nop
    }
  }

  return status;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop

08008b04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a38      	ldr	r2, [pc, #224]	; (8008bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d022      	beq.n	8008b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a36      	ldr	r2, [pc, #216]	; (8008bfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d01d      	beq.n	8008b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a35      	ldr	r2, [pc, #212]	; (8008c00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d018      	beq.n	8008b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a33      	ldr	r2, [pc, #204]	; (8008c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d013      	beq.n	8008b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a32      	ldr	r2, [pc, #200]	; (8008c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00e      	beq.n	8008b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a30      	ldr	r2, [pc, #192]	; (8008c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d009      	beq.n	8008b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a2f      	ldr	r2, [pc, #188]	; (8008c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d004      	beq.n	8008b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a2d      	ldr	r2, [pc, #180]	; (8008c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d101      	bne.n	8008b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e000      	b.n	8008b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008b66:	2300      	movs	r3, #0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d01a      	beq.n	8008ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	3b08      	subs	r3, #8
 8008b74:	4a28      	ldr	r2, [pc, #160]	; (8008c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008b76:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7a:	091b      	lsrs	r3, r3, #4
 8008b7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	4b26      	ldr	r3, [pc, #152]	; (8008c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	461a      	mov	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a24      	ldr	r2, [pc, #144]	; (8008c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008b90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f003 031f 	and.w	r3, r3, #31
 8008b98:	2201      	movs	r2, #1
 8008b9a:	409a      	lsls	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008ba0:	e024      	b.n	8008bec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	3b10      	subs	r3, #16
 8008baa:	4a1e      	ldr	r2, [pc, #120]	; (8008c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008bac:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb0:	091b      	lsrs	r3, r3, #4
 8008bb2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	4a1c      	ldr	r2, [pc, #112]	; (8008c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d806      	bhi.n	8008bca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	4a1b      	ldr	r2, [pc, #108]	; (8008c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d902      	bls.n	8008bca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4b18      	ldr	r3, [pc, #96]	; (8008c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a16      	ldr	r2, [pc, #88]	; (8008c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008bdc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f003 031f 	and.w	r3, r3, #31
 8008be4:	2201      	movs	r2, #1
 8008be6:	409a      	lsls	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008bec:	bf00      	nop
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	58025408 	.word	0x58025408
 8008bfc:	5802541c 	.word	0x5802541c
 8008c00:	58025430 	.word	0x58025430
 8008c04:	58025444 	.word	0x58025444
 8008c08:	58025458 	.word	0x58025458
 8008c0c:	5802546c 	.word	0x5802546c
 8008c10:	58025480 	.word	0x58025480
 8008c14:	58025494 	.word	0x58025494
 8008c18:	cccccccd 	.word	0xcccccccd
 8008c1c:	16009600 	.word	0x16009600
 8008c20:	58025880 	.word	0x58025880
 8008c24:	aaaaaaab 	.word	0xaaaaaaab
 8008c28:	400204b8 	.word	0x400204b8
 8008c2c:	4002040f 	.word	0x4002040f
 8008c30:	10008200 	.word	0x10008200
 8008c34:	40020880 	.word	0x40020880

08008c38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d04a      	beq.n	8008ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d847      	bhi.n	8008ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a25      	ldr	r2, [pc, #148]	; (8008cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d022      	beq.n	8008ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a24      	ldr	r2, [pc, #144]	; (8008cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d01d      	beq.n	8008ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a22      	ldr	r2, [pc, #136]	; (8008cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d018      	beq.n	8008ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a21      	ldr	r2, [pc, #132]	; (8008cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d013      	beq.n	8008ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a1f      	ldr	r2, [pc, #124]	; (8008d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00e      	beq.n	8008ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a1e      	ldr	r2, [pc, #120]	; (8008d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d009      	beq.n	8008ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a1c      	ldr	r2, [pc, #112]	; (8008d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d004      	beq.n	8008ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a1b      	ldr	r2, [pc, #108]	; (8008d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d101      	bne.n	8008ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e000      	b.n	8008caa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	4b17      	ldr	r3, [pc, #92]	; (8008d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a15      	ldr	r2, [pc, #84]	; (8008d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008cc0:	671a      	str	r2, [r3, #112]	; 0x70
 8008cc2:	e009      	b.n	8008cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	461a      	mov	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a11      	ldr	r2, [pc, #68]	; (8008d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008cd6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	2201      	movs	r2, #1
 8008cde:	409a      	lsls	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008ce4:	bf00      	nop
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	58025408 	.word	0x58025408
 8008cf4:	5802541c 	.word	0x5802541c
 8008cf8:	58025430 	.word	0x58025430
 8008cfc:	58025444 	.word	0x58025444
 8008d00:	58025458 	.word	0x58025458
 8008d04:	5802546c 	.word	0x5802546c
 8008d08:	58025480 	.word	0x58025480
 8008d0c:	58025494 	.word	0x58025494
 8008d10:	1600963f 	.word	0x1600963f
 8008d14:	58025940 	.word	0x58025940
 8008d18:	1000823f 	.word	0x1000823f
 8008d1c:	40020940 	.word	0x40020940

08008d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b089      	sub	sp, #36	; 0x24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008d2e:	4b89      	ldr	r3, [pc, #548]	; (8008f54 <HAL_GPIO_Init+0x234>)
 8008d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d32:	e194      	b.n	800905e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	2101      	movs	r1, #1
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d40:	4013      	ands	r3, r2
 8008d42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 8186 	beq.w	8009058 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f003 0303 	and.w	r3, r3, #3
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d005      	beq.n	8008d64 <HAL_GPIO_Init+0x44>
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d130      	bne.n	8008dc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	2203      	movs	r2, #3
 8008d70:	fa02 f303 	lsl.w	r3, r2, r3
 8008d74:	43db      	mvns	r3, r3
 8008d76:	69ba      	ldr	r2, [r7, #24]
 8008d78:	4013      	ands	r3, r2
 8008d7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	fa02 f303 	lsl.w	r3, r2, r3
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008da2:	43db      	mvns	r3, r3
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	4013      	ands	r3, r2
 8008da8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	091b      	lsrs	r3, r3, #4
 8008db0:	f003 0201 	and.w	r2, r3, #1
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f003 0303 	and.w	r3, r3, #3
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d017      	beq.n	8008e02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	005b      	lsls	r3, r3, #1
 8008ddc:	2203      	movs	r2, #3
 8008dde:	fa02 f303 	lsl.w	r3, r2, r3
 8008de2:	43db      	mvns	r3, r3
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	4013      	ands	r3, r2
 8008de8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	689a      	ldr	r2, [r3, #8]
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	005b      	lsls	r3, r3, #1
 8008df2:	fa02 f303 	lsl.w	r3, r2, r3
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	69ba      	ldr	r2, [r7, #24]
 8008e00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f003 0303 	and.w	r3, r3, #3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d123      	bne.n	8008e56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	08da      	lsrs	r2, r3, #3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	3208      	adds	r2, #8
 8008e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	f003 0307 	and.w	r3, r3, #7
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	220f      	movs	r2, #15
 8008e26:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2a:	43db      	mvns	r3, r3
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	691a      	ldr	r2, [r3, #16]
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f003 0307 	and.w	r3, r3, #7
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	08da      	lsrs	r2, r3, #3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3208      	adds	r2, #8
 8008e50:	69b9      	ldr	r1, [r7, #24]
 8008e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	2203      	movs	r2, #3
 8008e62:	fa02 f303 	lsl.w	r3, r2, r3
 8008e66:	43db      	mvns	r3, r3
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f003 0203 	and.w	r2, r3, #3
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 80e0 	beq.w	8009058 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e98:	4b2f      	ldr	r3, [pc, #188]	; (8008f58 <HAL_GPIO_Init+0x238>)
 8008e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e9e:	4a2e      	ldr	r2, [pc, #184]	; (8008f58 <HAL_GPIO_Init+0x238>)
 8008ea0:	f043 0302 	orr.w	r3, r3, #2
 8008ea4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008ea8:	4b2b      	ldr	r3, [pc, #172]	; (8008f58 <HAL_GPIO_Init+0x238>)
 8008eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008eb6:	4a29      	ldr	r2, [pc, #164]	; (8008f5c <HAL_GPIO_Init+0x23c>)
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	089b      	lsrs	r3, r3, #2
 8008ebc:	3302      	adds	r3, #2
 8008ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	220f      	movs	r2, #15
 8008ece:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed2:	43db      	mvns	r3, r3
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a20      	ldr	r2, [pc, #128]	; (8008f60 <HAL_GPIO_Init+0x240>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d052      	beq.n	8008f88 <HAL_GPIO_Init+0x268>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a1f      	ldr	r2, [pc, #124]	; (8008f64 <HAL_GPIO_Init+0x244>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d031      	beq.n	8008f4e <HAL_GPIO_Init+0x22e>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a1e      	ldr	r2, [pc, #120]	; (8008f68 <HAL_GPIO_Init+0x248>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d02b      	beq.n	8008f4a <HAL_GPIO_Init+0x22a>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a1d      	ldr	r2, [pc, #116]	; (8008f6c <HAL_GPIO_Init+0x24c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d025      	beq.n	8008f46 <HAL_GPIO_Init+0x226>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a1c      	ldr	r2, [pc, #112]	; (8008f70 <HAL_GPIO_Init+0x250>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d01f      	beq.n	8008f42 <HAL_GPIO_Init+0x222>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a1b      	ldr	r2, [pc, #108]	; (8008f74 <HAL_GPIO_Init+0x254>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d019      	beq.n	8008f3e <HAL_GPIO_Init+0x21e>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a1a      	ldr	r2, [pc, #104]	; (8008f78 <HAL_GPIO_Init+0x258>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d013      	beq.n	8008f3a <HAL_GPIO_Init+0x21a>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a19      	ldr	r2, [pc, #100]	; (8008f7c <HAL_GPIO_Init+0x25c>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d00d      	beq.n	8008f36 <HAL_GPIO_Init+0x216>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a18      	ldr	r2, [pc, #96]	; (8008f80 <HAL_GPIO_Init+0x260>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d007      	beq.n	8008f32 <HAL_GPIO_Init+0x212>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a17      	ldr	r2, [pc, #92]	; (8008f84 <HAL_GPIO_Init+0x264>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d101      	bne.n	8008f2e <HAL_GPIO_Init+0x20e>
 8008f2a:	2309      	movs	r3, #9
 8008f2c:	e02d      	b.n	8008f8a <HAL_GPIO_Init+0x26a>
 8008f2e:	230a      	movs	r3, #10
 8008f30:	e02b      	b.n	8008f8a <HAL_GPIO_Init+0x26a>
 8008f32:	2308      	movs	r3, #8
 8008f34:	e029      	b.n	8008f8a <HAL_GPIO_Init+0x26a>
 8008f36:	2307      	movs	r3, #7
 8008f38:	e027      	b.n	8008f8a <HAL_GPIO_Init+0x26a>
 8008f3a:	2306      	movs	r3, #6
 8008f3c:	e025      	b.n	8008f8a <HAL_GPIO_Init+0x26a>
 8008f3e:	2305      	movs	r3, #5
 8008f40:	e023      	b.n	8008f8a <HAL_GPIO_Init+0x26a>
 8008f42:	2304      	movs	r3, #4
 8008f44:	e021      	b.n	8008f8a <HAL_GPIO_Init+0x26a>
 8008f46:	2303      	movs	r3, #3
 8008f48:	e01f      	b.n	8008f8a <HAL_GPIO_Init+0x26a>
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	e01d      	b.n	8008f8a <HAL_GPIO_Init+0x26a>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e01b      	b.n	8008f8a <HAL_GPIO_Init+0x26a>
 8008f52:	bf00      	nop
 8008f54:	58000080 	.word	0x58000080
 8008f58:	58024400 	.word	0x58024400
 8008f5c:	58000400 	.word	0x58000400
 8008f60:	58020000 	.word	0x58020000
 8008f64:	58020400 	.word	0x58020400
 8008f68:	58020800 	.word	0x58020800
 8008f6c:	58020c00 	.word	0x58020c00
 8008f70:	58021000 	.word	0x58021000
 8008f74:	58021400 	.word	0x58021400
 8008f78:	58021800 	.word	0x58021800
 8008f7c:	58021c00 	.word	0x58021c00
 8008f80:	58022000 	.word	0x58022000
 8008f84:	58022400 	.word	0x58022400
 8008f88:	2300      	movs	r3, #0
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	f002 0203 	and.w	r2, r2, #3
 8008f90:	0092      	lsls	r2, r2, #2
 8008f92:	4093      	lsls	r3, r2
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f9a:	4938      	ldr	r1, [pc, #224]	; (800907c <HAL_GPIO_Init+0x35c>)
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	089b      	lsrs	r3, r3, #2
 8008fa0:	3302      	adds	r3, #2
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	43db      	mvns	r3, r3
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	43db      	mvns	r3, r3
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d003      	beq.n	8008ffc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	43db      	mvns	r3, r3
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	4013      	ands	r3, r2
 8009012:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	4313      	orrs	r3, r2
 8009026:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	43db      	mvns	r3, r3
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	4013      	ands	r3, r2
 800903c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d003      	beq.n	8009052 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	4313      	orrs	r3, r2
 8009050:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	3301      	adds	r3, #1
 800905c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	fa22 f303 	lsr.w	r3, r2, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	f47f ae63 	bne.w	8008d34 <HAL_GPIO_Init+0x14>
  }
}
 800906e:	bf00      	nop
 8009070:	bf00      	nop
 8009072:	3724      	adds	r7, #36	; 0x24
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	58000400 	.word	0x58000400

08009080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	691a      	ldr	r2, [r3, #16]
 8009090:	887b      	ldrh	r3, [r7, #2]
 8009092:	4013      	ands	r3, r2
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009098:	2301      	movs	r3, #1
 800909a:	73fb      	strb	r3, [r7, #15]
 800909c:	e001      	b.n	80090a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800909e:	2300      	movs	r3, #0
 80090a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	807b      	strh	r3, [r7, #2]
 80090bc:	4613      	mov	r3, r2
 80090be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090c0:	787b      	ldrb	r3, [r7, #1]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d003      	beq.n	80090ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80090c6:	887a      	ldrh	r2, [r7, #2]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80090cc:	e003      	b.n	80090d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80090ce:	887b      	ldrh	r3, [r7, #2]
 80090d0:	041a      	lsls	r2, r3, #16
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	619a      	str	r2, [r3, #24]
}
 80090d6:	bf00      	nop
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
	...

080090e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e08b      	b.n	800920e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d106      	bne.n	8009110 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fa f8c6 	bl	800329c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2224      	movs	r2, #36	; 0x24
 8009114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0201 	bic.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009134:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009144:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d107      	bne.n	800915e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689a      	ldr	r2, [r3, #8]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800915a:	609a      	str	r2, [r3, #8]
 800915c:	e006      	b.n	800916c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800916a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	2b02      	cmp	r3, #2
 8009172:	d108      	bne.n	8009186 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009182:	605a      	str	r2, [r3, #4]
 8009184:	e007      	b.n	8009196 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009194:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6859      	ldr	r1, [r3, #4]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	4b1d      	ldr	r3, [pc, #116]	; (8009218 <HAL_I2C_Init+0x134>)
 80091a2:	430b      	orrs	r3, r1
 80091a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691a      	ldr	r2, [r3, #16]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	69d9      	ldr	r1, [r3, #28]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a1a      	ldr	r2, [r3, #32]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f042 0201 	orr.w	r2, r2, #1
 80091ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	02008000 	.word	0x02008000

0800921c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af02      	add	r7, sp, #8
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	607a      	str	r2, [r7, #4]
 8009226:	461a      	mov	r2, r3
 8009228:	460b      	mov	r3, r1
 800922a:	817b      	strh	r3, [r7, #10]
 800922c:	4613      	mov	r3, r2
 800922e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b20      	cmp	r3, #32
 800923a:	f040 80fd 	bne.w	8009438 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009244:	2b01      	cmp	r3, #1
 8009246:	d101      	bne.n	800924c <HAL_I2C_Master_Transmit+0x30>
 8009248:	2302      	movs	r3, #2
 800924a:	e0f6      	b.n	800943a <HAL_I2C_Master_Transmit+0x21e>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009254:	f7fa fdf4 	bl	8003e40 <HAL_GetTick>
 8009258:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	2319      	movs	r3, #25
 8009260:	2201      	movs	r2, #1
 8009262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 fa0a 	bl	8009680 <I2C_WaitOnFlagUntilTimeout>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e0e1      	b.n	800943a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2221      	movs	r2, #33	; 0x21
 800927a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2210      	movs	r2, #16
 8009282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	893a      	ldrh	r2, [r7, #8]
 8009296:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	2bff      	cmp	r3, #255	; 0xff
 80092a6:	d906      	bls.n	80092b6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	22ff      	movs	r2, #255	; 0xff
 80092ac:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80092ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092b2:	617b      	str	r3, [r7, #20]
 80092b4:	e007      	b.n	80092c6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80092c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092c4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d024      	beq.n	8009318 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	781a      	ldrb	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	3b01      	subs	r3, #1
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f6:	3b01      	subs	r3, #1
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009302:	b2db      	uxtb	r3, r3
 8009304:	3301      	adds	r3, #1
 8009306:	b2da      	uxtb	r2, r3
 8009308:	8979      	ldrh	r1, [r7, #10]
 800930a:	4b4e      	ldr	r3, [pc, #312]	; (8009444 <HAL_I2C_Master_Transmit+0x228>)
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f000 fc05 	bl	8009b20 <I2C_TransferConfig>
 8009316:	e066      	b.n	80093e6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800931c:	b2da      	uxtb	r2, r3
 800931e:	8979      	ldrh	r1, [r7, #10]
 8009320:	4b48      	ldr	r3, [pc, #288]	; (8009444 <HAL_I2C_Master_Transmit+0x228>)
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 fbfa 	bl	8009b20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800932c:	e05b      	b.n	80093e6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	6a39      	ldr	r1, [r7, #32]
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 f9fd 	bl	8009732 <I2C_WaitOnTXISFlagUntilTimeout>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e07b      	b.n	800943a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009346:	781a      	ldrb	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800935c:	b29b      	uxth	r3, r3
 800935e:	3b01      	subs	r3, #1
 8009360:	b29a      	uxth	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800936a:	3b01      	subs	r3, #1
 800936c:	b29a      	uxth	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009376:	b29b      	uxth	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d034      	beq.n	80093e6 <HAL_I2C_Master_Transmit+0x1ca>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009380:	2b00      	cmp	r3, #0
 8009382:	d130      	bne.n	80093e6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	2200      	movs	r2, #0
 800938c:	2180      	movs	r1, #128	; 0x80
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 f976 	bl	8009680 <I2C_WaitOnFlagUntilTimeout>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e04d      	b.n	800943a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	2bff      	cmp	r3, #255	; 0xff
 80093a6:	d90e      	bls.n	80093c6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	22ff      	movs	r2, #255	; 0xff
 80093ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	8979      	ldrh	r1, [r7, #10]
 80093b6:	2300      	movs	r3, #0
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 fbae 	bl	8009b20 <I2C_TransferConfig>
 80093c4:	e00f      	b.n	80093e6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	8979      	ldrh	r1, [r7, #10]
 80093d8:	2300      	movs	r3, #0
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 fb9d 	bl	8009b20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d19e      	bne.n	800932e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	6a39      	ldr	r1, [r7, #32]
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f9e3 	bl	80097c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e01a      	b.n	800943a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2220      	movs	r2, #32
 800940a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6859      	ldr	r1, [r3, #4]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	4b0c      	ldr	r3, [pc, #48]	; (8009448 <HAL_I2C_Master_Transmit+0x22c>)
 8009418:	400b      	ands	r3, r1
 800941a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2220      	movs	r2, #32
 8009420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	e000      	b.n	800943a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009438:	2302      	movs	r3, #2
  }
}
 800943a:	4618      	mov	r0, r3
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	80002000 	.word	0x80002000
 8009448:	fe00e800 	.word	0xfe00e800

0800944c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b088      	sub	sp, #32
 8009450:	af02      	add	r7, sp, #8
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	607a      	str	r2, [r7, #4]
 8009456:	461a      	mov	r2, r3
 8009458:	460b      	mov	r3, r1
 800945a:	817b      	strh	r3, [r7, #10]
 800945c:	4613      	mov	r3, r2
 800945e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b20      	cmp	r3, #32
 800946a:	f040 80db 	bne.w	8009624 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009474:	2b01      	cmp	r3, #1
 8009476:	d101      	bne.n	800947c <HAL_I2C_Master_Receive+0x30>
 8009478:	2302      	movs	r3, #2
 800947a:	e0d4      	b.n	8009626 <HAL_I2C_Master_Receive+0x1da>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009484:	f7fa fcdc 	bl	8003e40 <HAL_GetTick>
 8009488:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	2319      	movs	r3, #25
 8009490:	2201      	movs	r2, #1
 8009492:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f000 f8f2 	bl	8009680 <I2C_WaitOnFlagUntilTimeout>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e0bf      	b.n	8009626 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2222      	movs	r2, #34	; 0x22
 80094aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2210      	movs	r2, #16
 80094b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	893a      	ldrh	r2, [r7, #8]
 80094c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	2bff      	cmp	r3, #255	; 0xff
 80094d6:	d90e      	bls.n	80094f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	22ff      	movs	r2, #255	; 0xff
 80094dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	8979      	ldrh	r1, [r7, #10]
 80094e6:	4b52      	ldr	r3, [pc, #328]	; (8009630 <HAL_I2C_Master_Receive+0x1e4>)
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 fb16 	bl	8009b20 <I2C_TransferConfig>
 80094f4:	e06d      	b.n	80095d2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009504:	b2da      	uxtb	r2, r3
 8009506:	8979      	ldrh	r1, [r7, #10]
 8009508:	4b49      	ldr	r3, [pc, #292]	; (8009630 <HAL_I2C_Master_Receive+0x1e4>)
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 fb05 	bl	8009b20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009516:	e05c      	b.n	80095d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	6a39      	ldr	r1, [r7, #32]
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 f993 	bl	8009848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e07c      	b.n	8009626 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	b2d2      	uxtb	r2, r2
 8009538:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009548:	3b01      	subs	r3, #1
 800954a:	b29a      	uxth	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009554:	b29b      	uxth	r3, r3
 8009556:	3b01      	subs	r3, #1
 8009558:	b29a      	uxth	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009562:	b29b      	uxth	r3, r3
 8009564:	2b00      	cmp	r3, #0
 8009566:	d034      	beq.n	80095d2 <HAL_I2C_Master_Receive+0x186>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800956c:	2b00      	cmp	r3, #0
 800956e:	d130      	bne.n	80095d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	2200      	movs	r2, #0
 8009578:	2180      	movs	r1, #128	; 0x80
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 f880 	bl	8009680 <I2C_WaitOnFlagUntilTimeout>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e04d      	b.n	8009626 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800958e:	b29b      	uxth	r3, r3
 8009590:	2bff      	cmp	r3, #255	; 0xff
 8009592:	d90e      	bls.n	80095b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	22ff      	movs	r2, #255	; 0xff
 8009598:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	8979      	ldrh	r1, [r7, #10]
 80095a2:	2300      	movs	r3, #0
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 fab8 	bl	8009b20 <I2C_TransferConfig>
 80095b0:	e00f      	b.n	80095d2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	8979      	ldrh	r1, [r7, #10]
 80095c4:	2300      	movs	r3, #0
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 faa7 	bl	8009b20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d19d      	bne.n	8009518 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	6a39      	ldr	r1, [r7, #32]
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 f8ed 	bl	80097c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e01a      	b.n	8009626 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2220      	movs	r2, #32
 80095f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6859      	ldr	r1, [r3, #4]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	4b0c      	ldr	r3, [pc, #48]	; (8009634 <HAL_I2C_Master_Receive+0x1e8>)
 8009604:	400b      	ands	r3, r1
 8009606:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2220      	movs	r2, #32
 800960c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	e000      	b.n	8009626 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009624:	2302      	movs	r3, #2
  }
}
 8009626:	4618      	mov	r0, r3
 8009628:	3718      	adds	r7, #24
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	80002400 	.word	0x80002400
 8009634:	fe00e800 	.word	0xfe00e800

08009638 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	f003 0302 	and.w	r3, r3, #2
 800964a:	2b02      	cmp	r3, #2
 800964c:	d103      	bne.n	8009656 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2200      	movs	r2, #0
 8009654:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b01      	cmp	r3, #1
 8009662:	d007      	beq.n	8009674 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	699a      	ldr	r2, [r3, #24]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0201 	orr.w	r2, r2, #1
 8009672:	619a      	str	r2, [r3, #24]
  }
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	603b      	str	r3, [r7, #0]
 800968c:	4613      	mov	r3, r2
 800968e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009690:	e03b      	b.n	800970a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009692:	69ba      	ldr	r2, [r7, #24]
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 f962 	bl	8009960 <I2C_IsErrorOccurred>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e041      	b.n	800972a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096ac:	d02d      	beq.n	800970a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ae:	f7fa fbc7 	bl	8003e40 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d302      	bcc.n	80096c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d122      	bne.n	800970a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	699a      	ldr	r2, [r3, #24]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	4013      	ands	r3, r2
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	bf0c      	ite	eq
 80096d4:	2301      	moveq	r3, #1
 80096d6:	2300      	movne	r3, #0
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	461a      	mov	r2, r3
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d113      	bne.n	800970a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e6:	f043 0220 	orr.w	r2, r3, #32
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2220      	movs	r2, #32
 80096f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e00f      	b.n	800972a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	699a      	ldr	r2, [r3, #24]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4013      	ands	r3, r2
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	429a      	cmp	r2, r3
 8009718:	bf0c      	ite	eq
 800971a:	2301      	moveq	r3, #1
 800971c:	2300      	movne	r3, #0
 800971e:	b2db      	uxtb	r3, r3
 8009720:	461a      	mov	r2, r3
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	429a      	cmp	r2, r3
 8009726:	d0b4      	beq.n	8009692 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800973e:	e033      	b.n	80097a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	68b9      	ldr	r1, [r7, #8]
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 f90b 	bl	8009960 <I2C_IsErrorOccurred>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e031      	b.n	80097b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800975a:	d025      	beq.n	80097a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800975c:	f7fa fb70 	bl	8003e40 <HAL_GetTick>
 8009760:	4602      	mov	r2, r0
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	429a      	cmp	r2, r3
 800976a:	d302      	bcc.n	8009772 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d11a      	bne.n	80097a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	f003 0302 	and.w	r3, r3, #2
 800977c:	2b02      	cmp	r3, #2
 800977e:	d013      	beq.n	80097a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009784:	f043 0220 	orr.w	r2, r3, #32
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2220      	movs	r2, #32
 8009790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e007      	b.n	80097b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	f003 0302 	and.w	r3, r3, #2
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d1c4      	bne.n	8009740 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097cc:	e02f      	b.n	800982e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	68b9      	ldr	r1, [r7, #8]
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 f8c4 	bl	8009960 <I2C_IsErrorOccurred>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e02d      	b.n	800983e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097e2:	f7fa fb2d 	bl	8003e40 <HAL_GetTick>
 80097e6:	4602      	mov	r2, r0
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d302      	bcc.n	80097f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d11a      	bne.n	800982e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	f003 0320 	and.w	r3, r3, #32
 8009802:	2b20      	cmp	r3, #32
 8009804:	d013      	beq.n	800982e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800980a:	f043 0220 	orr.w	r2, r3, #32
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2220      	movs	r2, #32
 8009816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e007      	b.n	800983e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	f003 0320 	and.w	r3, r3, #32
 8009838:	2b20      	cmp	r3, #32
 800983a:	d1c8      	bne.n	80097ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009858:	e071      	b.n	800993e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	68b9      	ldr	r1, [r7, #8]
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 f87e 	bl	8009960 <I2C_IsErrorOccurred>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	f003 0320 	and.w	r3, r3, #32
 8009878:	2b20      	cmp	r3, #32
 800987a:	d13b      	bne.n	80098f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800987c:	7dfb      	ldrb	r3, [r7, #23]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d138      	bne.n	80098f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	f003 0304 	and.w	r3, r3, #4
 800988c:	2b04      	cmp	r3, #4
 800988e:	d105      	bne.n	800989c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	f003 0310 	and.w	r3, r3, #16
 80098a6:	2b10      	cmp	r3, #16
 80098a8:	d121      	bne.n	80098ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2210      	movs	r2, #16
 80098b0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2204      	movs	r2, #4
 80098b6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2220      	movs	r2, #32
 80098be:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6859      	ldr	r1, [r3, #4]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	4b24      	ldr	r3, [pc, #144]	; (800995c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80098cc:	400b      	ands	r3, r1
 80098ce:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	75fb      	strb	r3, [r7, #23]
 80098ec:	e002      	b.n	80098f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80098f4:	f7fa faa4 	bl	8003e40 <HAL_GetTick>
 80098f8:	4602      	mov	r2, r0
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	429a      	cmp	r2, r3
 8009902:	d302      	bcc.n	800990a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d119      	bne.n	800993e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800990a:	7dfb      	ldrb	r3, [r7, #23]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d116      	bne.n	800993e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	f003 0304 	and.w	r3, r3, #4
 800991a:	2b04      	cmp	r3, #4
 800991c:	d00f      	beq.n	800993e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009922:	f043 0220 	orr.w	r2, r3, #32
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2220      	movs	r2, #32
 800992e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b04      	cmp	r3, #4
 800994a:	d002      	beq.n	8009952 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800994c:	7dfb      	ldrb	r3, [r7, #23]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d083      	beq.n	800985a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009952:	7dfb      	ldrb	r3, [r7, #23]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	fe00e800 	.word	0xfe00e800

08009960 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08a      	sub	sp, #40	; 0x28
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	f003 0310 	and.w	r3, r3, #16
 8009988:	2b00      	cmp	r3, #0
 800998a:	d068      	beq.n	8009a5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2210      	movs	r2, #16
 8009992:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009994:	e049      	b.n	8009a2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800999c:	d045      	beq.n	8009a2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800999e:	f7fa fa4f 	bl	8003e40 <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d302      	bcc.n	80099b4 <I2C_IsErrorOccurred+0x54>
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d13a      	bne.n	8009a2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099d6:	d121      	bne.n	8009a1c <I2C_IsErrorOccurred+0xbc>
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099de:	d01d      	beq.n	8009a1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80099e0:	7cfb      	ldrb	r3, [r7, #19]
 80099e2:	2b20      	cmp	r3, #32
 80099e4:	d01a      	beq.n	8009a1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80099f6:	f7fa fa23 	bl	8003e40 <HAL_GetTick>
 80099fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099fc:	e00e      	b.n	8009a1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80099fe:	f7fa fa1f 	bl	8003e40 <HAL_GetTick>
 8009a02:	4602      	mov	r2, r0
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	2b19      	cmp	r3, #25
 8009a0a:	d907      	bls.n	8009a1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	f043 0320 	orr.w	r3, r3, #32
 8009a12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009a1a:	e006      	b.n	8009a2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	f003 0320 	and.w	r3, r3, #32
 8009a26:	2b20      	cmp	r3, #32
 8009a28:	d1e9      	bne.n	80099fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	f003 0320 	and.w	r3, r3, #32
 8009a34:	2b20      	cmp	r3, #32
 8009a36:	d003      	beq.n	8009a40 <I2C_IsErrorOccurred+0xe0>
 8009a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d0aa      	beq.n	8009996 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d103      	bne.n	8009a50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2220      	movs	r2, #32
 8009a4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	f043 0304 	orr.w	r3, r3, #4
 8009a56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00b      	beq.n	8009a88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	f043 0301 	orr.w	r3, r3, #1
 8009a76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00b      	beq.n	8009aaa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	f043 0308 	orr.w	r3, r3, #8
 8009a98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009aa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00b      	beq.n	8009acc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	f043 0302 	orr.w	r3, r3, #2
 8009aba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ac4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01c      	beq.n	8009b0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f7ff fdaf 	bl	8009638 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6859      	ldr	r1, [r3, #4]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	4b0d      	ldr	r3, [pc, #52]	; (8009b1c <I2C_IsErrorOccurred+0x1bc>)
 8009ae6:	400b      	ands	r3, r1
 8009ae8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	431a      	orrs	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2220      	movs	r2, #32
 8009afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3728      	adds	r7, #40	; 0x28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	fe00e800 	.word	0xfe00e800

08009b20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b087      	sub	sp, #28
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	607b      	str	r3, [r7, #4]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	817b      	strh	r3, [r7, #10]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b32:	897b      	ldrh	r3, [r7, #10]
 8009b34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b38:	7a7b      	ldrb	r3, [r7, #9]
 8009b3a:	041b      	lsls	r3, r3, #16
 8009b3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	0d5b      	lsrs	r3, r3, #21
 8009b5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009b5e:	4b08      	ldr	r3, [pc, #32]	; (8009b80 <I2C_TransferConfig+0x60>)
 8009b60:	430b      	orrs	r3, r1
 8009b62:	43db      	mvns	r3, r3
 8009b64:	ea02 0103 	and.w	r1, r2, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009b72:	bf00      	nop
 8009b74:	371c      	adds	r7, #28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	03ff63ff 	.word	0x03ff63ff

08009b84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b20      	cmp	r3, #32
 8009b98:	d138      	bne.n	8009c0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d101      	bne.n	8009ba8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	e032      	b.n	8009c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2224      	movs	r2, #36	; 0x24
 8009bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f022 0201 	bic.w	r2, r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009bd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6819      	ldr	r1, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f042 0201 	orr.w	r2, r2, #1
 8009bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e000      	b.n	8009c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c0c:	2302      	movs	r3, #2
  }
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b085      	sub	sp, #20
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d139      	bne.n	8009ca4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e033      	b.n	8009ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2224      	movs	r2, #36	; 0x24
 8009c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0201 	bic.w	r2, r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009c6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	021b      	lsls	r3, r3, #8
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f042 0201 	orr.w	r2, r2, #1
 8009c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2220      	movs	r2, #32
 8009c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e000      	b.n	8009ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009ca4:	2302      	movs	r3, #2
  }
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
	...

08009cb4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cbc:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009cc2:	4a0c      	ldr	r2, [pc, #48]	; (8009cf4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009cc4:	f043 0302 	orr.w	r3, r3, #2
 8009cc8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009ccc:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	60fb      	str	r3, [r7, #12]
 8009cd8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009cda:	4b07      	ldr	r3, [pc, #28]	; (8009cf8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009cdc:	685a      	ldr	r2, [r3, #4]
 8009cde:	4906      	ldr	r1, [pc, #24]	; (8009cf8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	604b      	str	r3, [r1, #4]
}
 8009ce6:	bf00      	nop
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	58024400 	.word	0x58024400
 8009cf8:	58000400 	.word	0x58000400

08009cfc <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	460b      	mov	r3, r1
 8009d06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009d08:	4b18      	ldr	r3, [pc, #96]	; (8009d6c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f023 0201 	bic.w	r2, r3, #1
 8009d10:	4916      	ldr	r1, [pc, #88]	; (8009d6c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009d18:	4b14      	ldr	r3, [pc, #80]	; (8009d6c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	4a13      	ldr	r2, [pc, #76]	; (8009d6c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d1e:	f023 0305 	bic.w	r3, r3, #5
 8009d22:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009d24:	4b11      	ldr	r3, [pc, #68]	; (8009d6c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	4a10      	ldr	r2, [pc, #64]	; (8009d6c <HAL_PWR_EnterSTOPMode+0x70>)
 8009d2a:	f023 0302 	bic.w	r3, r3, #2
 8009d2e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009d30:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	4a0e      	ldr	r2, [pc, #56]	; (8009d70 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d36:	f043 0304 	orr.w	r3, r3, #4
 8009d3a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009d3c:	f3bf 8f4f 	dsb	sy
}
 8009d40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009d42:	f3bf 8f6f 	isb	sy
}
 8009d46:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009d48:	78fb      	ldrb	r3, [r7, #3]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d101      	bne.n	8009d52 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009d4e:	bf30      	wfi
 8009d50:	e000      	b.n	8009d54 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009d52:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009d54:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	4a05      	ldr	r2, [pc, #20]	; (8009d70 <HAL_PWR_EnterSTOPMode+0x74>)
 8009d5a:	f023 0304 	bic.w	r3, r3, #4
 8009d5e:	6113      	str	r3, [r2, #16]
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr
 8009d6c:	58024800 	.word	0x58024800
 8009d70:	e000ed00 	.word	0xe000ed00

08009d74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009d7c:	4b19      	ldr	r3, [pc, #100]	; (8009de4 <HAL_PWREx_ConfigSupply+0x70>)
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	f003 0304 	and.w	r3, r3, #4
 8009d84:	2b04      	cmp	r3, #4
 8009d86:	d00a      	beq.n	8009d9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009d88:	4b16      	ldr	r3, [pc, #88]	; (8009de4 <HAL_PWREx_ConfigSupply+0x70>)
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	f003 0307 	and.w	r3, r3, #7
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d001      	beq.n	8009d9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e01f      	b.n	8009dda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	e01d      	b.n	8009dda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009d9e:	4b11      	ldr	r3, [pc, #68]	; (8009de4 <HAL_PWREx_ConfigSupply+0x70>)
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f023 0207 	bic.w	r2, r3, #7
 8009da6:	490f      	ldr	r1, [pc, #60]	; (8009de4 <HAL_PWREx_ConfigSupply+0x70>)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009dae:	f7fa f847 	bl	8003e40 <HAL_GetTick>
 8009db2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009db4:	e009      	b.n	8009dca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009db6:	f7fa f843 	bl	8003e40 <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dc4:	d901      	bls.n	8009dca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e007      	b.n	8009dda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009dca:	4b06      	ldr	r3, [pc, #24]	; (8009de4 <HAL_PWREx_ConfigSupply+0x70>)
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dd6:	d1ee      	bne.n	8009db6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	58024800 	.word	0x58024800

08009de8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08c      	sub	sp, #48	; 0x30
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d102      	bne.n	8009dfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	f000 bc48 	b.w	800a68c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 8088 	beq.w	8009f1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e0a:	4b99      	ldr	r3, [pc, #612]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e14:	4b96      	ldr	r3, [pc, #600]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e18:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	2b10      	cmp	r3, #16
 8009e1e:	d007      	beq.n	8009e30 <HAL_RCC_OscConfig+0x48>
 8009e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e22:	2b18      	cmp	r3, #24
 8009e24:	d111      	bne.n	8009e4a <HAL_RCC_OscConfig+0x62>
 8009e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e28:	f003 0303 	and.w	r3, r3, #3
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d10c      	bne.n	8009e4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e30:	4b8f      	ldr	r3, [pc, #572]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d06d      	beq.n	8009f18 <HAL_RCC_OscConfig+0x130>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d169      	bne.n	8009f18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	f000 bc21 	b.w	800a68c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e52:	d106      	bne.n	8009e62 <HAL_RCC_OscConfig+0x7a>
 8009e54:	4b86      	ldr	r3, [pc, #536]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a85      	ldr	r2, [pc, #532]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	e02e      	b.n	8009ec0 <HAL_RCC_OscConfig+0xd8>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10c      	bne.n	8009e84 <HAL_RCC_OscConfig+0x9c>
 8009e6a:	4b81      	ldr	r3, [pc, #516]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a80      	ldr	r2, [pc, #512]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	4b7e      	ldr	r3, [pc, #504]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a7d      	ldr	r2, [pc, #500]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e80:	6013      	str	r3, [r2, #0]
 8009e82:	e01d      	b.n	8009ec0 <HAL_RCC_OscConfig+0xd8>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e8c:	d10c      	bne.n	8009ea8 <HAL_RCC_OscConfig+0xc0>
 8009e8e:	4b78      	ldr	r3, [pc, #480]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a77      	ldr	r2, [pc, #476]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	4b75      	ldr	r3, [pc, #468]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a74      	ldr	r2, [pc, #464]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	e00b      	b.n	8009ec0 <HAL_RCC_OscConfig+0xd8>
 8009ea8:	4b71      	ldr	r3, [pc, #452]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a70      	ldr	r2, [pc, #448]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eb2:	6013      	str	r3, [r2, #0]
 8009eb4:	4b6e      	ldr	r3, [pc, #440]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a6d      	ldr	r2, [pc, #436]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d013      	beq.n	8009ef0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec8:	f7f9 ffba 	bl	8003e40 <HAL_GetTick>
 8009ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ece:	e008      	b.n	8009ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ed0:	f7f9 ffb6 	bl	8003e40 <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	2b64      	cmp	r3, #100	; 0x64
 8009edc:	d901      	bls.n	8009ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e3d4      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ee2:	4b63      	ldr	r3, [pc, #396]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0f0      	beq.n	8009ed0 <HAL_RCC_OscConfig+0xe8>
 8009eee:	e014      	b.n	8009f1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ef0:	f7f9 ffa6 	bl	8003e40 <HAL_GetTick>
 8009ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ef6:	e008      	b.n	8009f0a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ef8:	f7f9 ffa2 	bl	8003e40 <HAL_GetTick>
 8009efc:	4602      	mov	r2, r0
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	2b64      	cmp	r3, #100	; 0x64
 8009f04:	d901      	bls.n	8009f0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e3c0      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009f0a:	4b59      	ldr	r3, [pc, #356]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1f0      	bne.n	8009ef8 <HAL_RCC_OscConfig+0x110>
 8009f16:	e000      	b.n	8009f1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 0302 	and.w	r3, r3, #2
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f000 80ca 	beq.w	800a0bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f28:	4b51      	ldr	r3, [pc, #324]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f32:	4b4f      	ldr	r3, [pc, #316]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f36:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d007      	beq.n	8009f4e <HAL_RCC_OscConfig+0x166>
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	2b18      	cmp	r3, #24
 8009f42:	d156      	bne.n	8009ff2 <HAL_RCC_OscConfig+0x20a>
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	f003 0303 	and.w	r3, r3, #3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d151      	bne.n	8009ff2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f4e:	4b48      	ldr	r3, [pc, #288]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0304 	and.w	r3, r3, #4
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d005      	beq.n	8009f66 <HAL_RCC_OscConfig+0x17e>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e392      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f66:	4b42      	ldr	r3, [pc, #264]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f023 0219 	bic.w	r2, r3, #25
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	493f      	ldr	r1, [pc, #252]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009f74:	4313      	orrs	r3, r2
 8009f76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f78:	f7f9 ff62 	bl	8003e40 <HAL_GetTick>
 8009f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f7e:	e008      	b.n	8009f92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f80:	f7f9 ff5e 	bl	8003e40 <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d901      	bls.n	8009f92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e37c      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f92:	4b37      	ldr	r3, [pc, #220]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 0304 	and.w	r3, r3, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0f0      	beq.n	8009f80 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f9e:	f7f9 ff5b 	bl	8003e58 <HAL_GetREVID>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	f241 0203 	movw	r2, #4099	; 0x1003
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d817      	bhi.n	8009fdc <HAL_RCC_OscConfig+0x1f4>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	2b40      	cmp	r3, #64	; 0x40
 8009fb2:	d108      	bne.n	8009fc6 <HAL_RCC_OscConfig+0x1de>
 8009fb4:	4b2e      	ldr	r3, [pc, #184]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009fbc:	4a2c      	ldr	r2, [pc, #176]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fc2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fc4:	e07a      	b.n	800a0bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fc6:	4b2a      	ldr	r3, [pc, #168]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	031b      	lsls	r3, r3, #12
 8009fd4:	4926      	ldr	r1, [pc, #152]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fda:	e06f      	b.n	800a0bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fdc:	4b24      	ldr	r3, [pc, #144]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	061b      	lsls	r3, r3, #24
 8009fea:	4921      	ldr	r1, [pc, #132]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ff0:	e064      	b.n	800a0bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d047      	beq.n	800a08a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ffa:	4b1d      	ldr	r3, [pc, #116]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f023 0219 	bic.w	r2, r3, #25
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	491a      	ldr	r1, [pc, #104]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 800a008:	4313      	orrs	r3, r2
 800a00a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a00c:	f7f9 ff18 	bl	8003e40 <HAL_GetTick>
 800a010:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a012:	e008      	b.n	800a026 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a014:	f7f9 ff14 	bl	8003e40 <HAL_GetTick>
 800a018:	4602      	mov	r2, r0
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d901      	bls.n	800a026 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e332      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a026:	4b12      	ldr	r3, [pc, #72]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 0304 	and.w	r3, r3, #4
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0f0      	beq.n	800a014 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a032:	f7f9 ff11 	bl	8003e58 <HAL_GetREVID>
 800a036:	4603      	mov	r3, r0
 800a038:	f241 0203 	movw	r2, #4099	; 0x1003
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d819      	bhi.n	800a074 <HAL_RCC_OscConfig+0x28c>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	2b40      	cmp	r3, #64	; 0x40
 800a046:	d108      	bne.n	800a05a <HAL_RCC_OscConfig+0x272>
 800a048:	4b09      	ldr	r3, [pc, #36]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a050:	4a07      	ldr	r2, [pc, #28]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 800a052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a056:	6053      	str	r3, [r2, #4]
 800a058:	e030      	b.n	800a0bc <HAL_RCC_OscConfig+0x2d4>
 800a05a:	4b05      	ldr	r3, [pc, #20]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	031b      	lsls	r3, r3, #12
 800a068:	4901      	ldr	r1, [pc, #4]	; (800a070 <HAL_RCC_OscConfig+0x288>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	604b      	str	r3, [r1, #4]
 800a06e:	e025      	b.n	800a0bc <HAL_RCC_OscConfig+0x2d4>
 800a070:	58024400 	.word	0x58024400
 800a074:	4b9a      	ldr	r3, [pc, #616]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	061b      	lsls	r3, r3, #24
 800a082:	4997      	ldr	r1, [pc, #604]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a084:	4313      	orrs	r3, r2
 800a086:	604b      	str	r3, [r1, #4]
 800a088:	e018      	b.n	800a0bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a08a:	4b95      	ldr	r3, [pc, #596]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a94      	ldr	r2, [pc, #592]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a090:	f023 0301 	bic.w	r3, r3, #1
 800a094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a096:	f7f9 fed3 	bl	8003e40 <HAL_GetTick>
 800a09a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a09c:	e008      	b.n	800a0b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a09e:	f7f9 fecf 	bl	8003e40 <HAL_GetTick>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d901      	bls.n	800a0b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e2ed      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0b0:	4b8b      	ldr	r3, [pc, #556]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0304 	and.w	r3, r3, #4
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1f0      	bne.n	800a09e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0310 	and.w	r3, r3, #16
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f000 80a9 	beq.w	800a21c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0ca:	4b85      	ldr	r3, [pc, #532]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0d4:	4b82      	ldr	r3, [pc, #520]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	2b08      	cmp	r3, #8
 800a0de:	d007      	beq.n	800a0f0 <HAL_RCC_OscConfig+0x308>
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	2b18      	cmp	r3, #24
 800a0e4:	d13a      	bne.n	800a15c <HAL_RCC_OscConfig+0x374>
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f003 0303 	and.w	r3, r3, #3
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d135      	bne.n	800a15c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a0f0:	4b7b      	ldr	r3, [pc, #492]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d005      	beq.n	800a108 <HAL_RCC_OscConfig+0x320>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	69db      	ldr	r3, [r3, #28]
 800a100:	2b80      	cmp	r3, #128	; 0x80
 800a102:	d001      	beq.n	800a108 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e2c1      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a108:	f7f9 fea6 	bl	8003e58 <HAL_GetREVID>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f241 0203 	movw	r2, #4099	; 0x1003
 800a112:	4293      	cmp	r3, r2
 800a114:	d817      	bhi.n	800a146 <HAL_RCC_OscConfig+0x35e>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	2b20      	cmp	r3, #32
 800a11c:	d108      	bne.n	800a130 <HAL_RCC_OscConfig+0x348>
 800a11e:	4b70      	ldr	r3, [pc, #448]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a126:	4a6e      	ldr	r2, [pc, #440]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a12c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a12e:	e075      	b.n	800a21c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a130:	4b6b      	ldr	r3, [pc, #428]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a1b      	ldr	r3, [r3, #32]
 800a13c:	069b      	lsls	r3, r3, #26
 800a13e:	4968      	ldr	r1, [pc, #416]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a140:	4313      	orrs	r3, r2
 800a142:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a144:	e06a      	b.n	800a21c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a146:	4b66      	ldr	r3, [pc, #408]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	061b      	lsls	r3, r3, #24
 800a154:	4962      	ldr	r1, [pc, #392]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a156:	4313      	orrs	r3, r2
 800a158:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a15a:	e05f      	b.n	800a21c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	69db      	ldr	r3, [r3, #28]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d042      	beq.n	800a1ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a164:	4b5e      	ldr	r3, [pc, #376]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a5d      	ldr	r2, [pc, #372]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a16a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a16e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a170:	f7f9 fe66 	bl	8003e40 <HAL_GetTick>
 800a174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a176:	e008      	b.n	800a18a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a178:	f7f9 fe62 	bl	8003e40 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b02      	cmp	r3, #2
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e280      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a18a:	4b55      	ldr	r3, [pc, #340]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0f0      	beq.n	800a178 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a196:	f7f9 fe5f 	bl	8003e58 <HAL_GetREVID>
 800a19a:	4603      	mov	r3, r0
 800a19c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d817      	bhi.n	800a1d4 <HAL_RCC_OscConfig+0x3ec>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	2b20      	cmp	r3, #32
 800a1aa:	d108      	bne.n	800a1be <HAL_RCC_OscConfig+0x3d6>
 800a1ac:	4b4c      	ldr	r3, [pc, #304]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a1b4:	4a4a      	ldr	r2, [pc, #296]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a1b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1ba:	6053      	str	r3, [r2, #4]
 800a1bc:	e02e      	b.n	800a21c <HAL_RCC_OscConfig+0x434>
 800a1be:	4b48      	ldr	r3, [pc, #288]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	069b      	lsls	r3, r3, #26
 800a1cc:	4944      	ldr	r1, [pc, #272]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	604b      	str	r3, [r1, #4]
 800a1d2:	e023      	b.n	800a21c <HAL_RCC_OscConfig+0x434>
 800a1d4:	4b42      	ldr	r3, [pc, #264]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a1b      	ldr	r3, [r3, #32]
 800a1e0:	061b      	lsls	r3, r3, #24
 800a1e2:	493f      	ldr	r1, [pc, #252]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	60cb      	str	r3, [r1, #12]
 800a1e8:	e018      	b.n	800a21c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a1ea:	4b3d      	ldr	r3, [pc, #244]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a3c      	ldr	r2, [pc, #240]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a1f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f6:	f7f9 fe23 	bl	8003e40 <HAL_GetTick>
 800a1fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1fc:	e008      	b.n	800a210 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a1fe:	f7f9 fe1f 	bl	8003e40 <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d901      	bls.n	800a210 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e23d      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a210:	4b33      	ldr	r3, [pc, #204]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1f0      	bne.n	800a1fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0308 	and.w	r3, r3, #8
 800a224:	2b00      	cmp	r3, #0
 800a226:	d036      	beq.n	800a296 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d019      	beq.n	800a264 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a230:	4b2b      	ldr	r3, [pc, #172]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a234:	4a2a      	ldr	r2, [pc, #168]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a236:	f043 0301 	orr.w	r3, r3, #1
 800a23a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a23c:	f7f9 fe00 	bl	8003e40 <HAL_GetTick>
 800a240:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a242:	e008      	b.n	800a256 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a244:	f7f9 fdfc 	bl	8003e40 <HAL_GetTick>
 800a248:	4602      	mov	r2, r0
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d901      	bls.n	800a256 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e21a      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a256:	4b22      	ldr	r3, [pc, #136]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d0f0      	beq.n	800a244 <HAL_RCC_OscConfig+0x45c>
 800a262:	e018      	b.n	800a296 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a264:	4b1e      	ldr	r3, [pc, #120]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a268:	4a1d      	ldr	r2, [pc, #116]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a26a:	f023 0301 	bic.w	r3, r3, #1
 800a26e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a270:	f7f9 fde6 	bl	8003e40 <HAL_GetTick>
 800a274:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a276:	e008      	b.n	800a28a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a278:	f7f9 fde2 	bl	8003e40 <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	2b02      	cmp	r3, #2
 800a284:	d901      	bls.n	800a28a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e200      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a28a:	4b15      	ldr	r3, [pc, #84]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a28c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1f0      	bne.n	800a278 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0320 	and.w	r3, r3, #32
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d039      	beq.n	800a316 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d01c      	beq.n	800a2e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a2aa:	4b0d      	ldr	r3, [pc, #52]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a0c      	ldr	r2, [pc, #48]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a2b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a2b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2b6:	f7f9 fdc3 	bl	8003e40 <HAL_GetTick>
 800a2ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2bc:	e008      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2be:	f7f9 fdbf 	bl	8003e40 <HAL_GetTick>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d901      	bls.n	800a2d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	e1dd      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2d0:	4b03      	ldr	r3, [pc, #12]	; (800a2e0 <HAL_RCC_OscConfig+0x4f8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d0f0      	beq.n	800a2be <HAL_RCC_OscConfig+0x4d6>
 800a2dc:	e01b      	b.n	800a316 <HAL_RCC_OscConfig+0x52e>
 800a2de:	bf00      	nop
 800a2e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2e4:	4b9b      	ldr	r3, [pc, #620]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a9a      	ldr	r2, [pc, #616]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a2ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2f0:	f7f9 fda6 	bl	8003e40 <HAL_GetTick>
 800a2f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2f6:	e008      	b.n	800a30a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2f8:	f7f9 fda2 	bl	8003e40 <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	2b02      	cmp	r3, #2
 800a304:	d901      	bls.n	800a30a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e1c0      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a30a:	4b92      	ldr	r3, [pc, #584]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1f0      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0304 	and.w	r3, r3, #4
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 8081 	beq.w	800a426 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a324:	4b8c      	ldr	r3, [pc, #560]	; (800a558 <HAL_RCC_OscConfig+0x770>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a8b      	ldr	r2, [pc, #556]	; (800a558 <HAL_RCC_OscConfig+0x770>)
 800a32a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a32e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a330:	f7f9 fd86 	bl	8003e40 <HAL_GetTick>
 800a334:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a336:	e008      	b.n	800a34a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a338:	f7f9 fd82 	bl	8003e40 <HAL_GetTick>
 800a33c:	4602      	mov	r2, r0
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	2b64      	cmp	r3, #100	; 0x64
 800a344:	d901      	bls.n	800a34a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a346:	2303      	movs	r3, #3
 800a348:	e1a0      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a34a:	4b83      	ldr	r3, [pc, #524]	; (800a558 <HAL_RCC_OscConfig+0x770>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0f0      	beq.n	800a338 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d106      	bne.n	800a36c <HAL_RCC_OscConfig+0x584>
 800a35e:	4b7d      	ldr	r3, [pc, #500]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a362:	4a7c      	ldr	r2, [pc, #496]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a364:	f043 0301 	orr.w	r3, r3, #1
 800a368:	6713      	str	r3, [r2, #112]	; 0x70
 800a36a:	e02d      	b.n	800a3c8 <HAL_RCC_OscConfig+0x5e0>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10c      	bne.n	800a38e <HAL_RCC_OscConfig+0x5a6>
 800a374:	4b77      	ldr	r3, [pc, #476]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a378:	4a76      	ldr	r2, [pc, #472]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a37a:	f023 0301 	bic.w	r3, r3, #1
 800a37e:	6713      	str	r3, [r2, #112]	; 0x70
 800a380:	4b74      	ldr	r3, [pc, #464]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a384:	4a73      	ldr	r2, [pc, #460]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a386:	f023 0304 	bic.w	r3, r3, #4
 800a38a:	6713      	str	r3, [r2, #112]	; 0x70
 800a38c:	e01c      	b.n	800a3c8 <HAL_RCC_OscConfig+0x5e0>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	2b05      	cmp	r3, #5
 800a394:	d10c      	bne.n	800a3b0 <HAL_RCC_OscConfig+0x5c8>
 800a396:	4b6f      	ldr	r3, [pc, #444]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a39a:	4a6e      	ldr	r2, [pc, #440]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a39c:	f043 0304 	orr.w	r3, r3, #4
 800a3a0:	6713      	str	r3, [r2, #112]	; 0x70
 800a3a2:	4b6c      	ldr	r3, [pc, #432]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a3a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a6:	4a6b      	ldr	r2, [pc, #428]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a3a8:	f043 0301 	orr.w	r3, r3, #1
 800a3ac:	6713      	str	r3, [r2, #112]	; 0x70
 800a3ae:	e00b      	b.n	800a3c8 <HAL_RCC_OscConfig+0x5e0>
 800a3b0:	4b68      	ldr	r3, [pc, #416]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b4:	4a67      	ldr	r2, [pc, #412]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a3b6:	f023 0301 	bic.w	r3, r3, #1
 800a3ba:	6713      	str	r3, [r2, #112]	; 0x70
 800a3bc:	4b65      	ldr	r3, [pc, #404]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a3be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c0:	4a64      	ldr	r2, [pc, #400]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a3c2:	f023 0304 	bic.w	r3, r3, #4
 800a3c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d015      	beq.n	800a3fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3d0:	f7f9 fd36 	bl	8003e40 <HAL_GetTick>
 800a3d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3d6:	e00a      	b.n	800a3ee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3d8:	f7f9 fd32 	bl	8003e40 <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d901      	bls.n	800a3ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e14e      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3ee:	4b59      	ldr	r3, [pc, #356]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0ee      	beq.n	800a3d8 <HAL_RCC_OscConfig+0x5f0>
 800a3fa:	e014      	b.n	800a426 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3fc:	f7f9 fd20 	bl	8003e40 <HAL_GetTick>
 800a400:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a402:	e00a      	b.n	800a41a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a404:	f7f9 fd1c 	bl	8003e40 <HAL_GetTick>
 800a408:	4602      	mov	r2, r0
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a412:	4293      	cmp	r3, r2
 800a414:	d901      	bls.n	800a41a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e138      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a41a:	4b4e      	ldr	r3, [pc, #312]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a41e:	f003 0302 	and.w	r3, r3, #2
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1ee      	bne.n	800a404 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 812d 	beq.w	800a68a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a430:	4b48      	ldr	r3, [pc, #288]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a438:	2b18      	cmp	r3, #24
 800a43a:	f000 80bd 	beq.w	800a5b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a442:	2b02      	cmp	r3, #2
 800a444:	f040 809e 	bne.w	800a584 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a448:	4b42      	ldr	r3, [pc, #264]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a41      	ldr	r2, [pc, #260]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a44e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a454:	f7f9 fcf4 	bl	8003e40 <HAL_GetTick>
 800a458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a45a:	e008      	b.n	800a46e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a45c:	f7f9 fcf0 	bl	8003e40 <HAL_GetTick>
 800a460:	4602      	mov	r2, r0
 800a462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	2b02      	cmp	r3, #2
 800a468:	d901      	bls.n	800a46e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a46a:	2303      	movs	r3, #3
 800a46c:	e10e      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a46e:	4b39      	ldr	r3, [pc, #228]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1f0      	bne.n	800a45c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a47a:	4b36      	ldr	r3, [pc, #216]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a47c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a47e:	4b37      	ldr	r3, [pc, #220]	; (800a55c <HAL_RCC_OscConfig+0x774>)
 800a480:	4013      	ands	r3, r2
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a48a:	0112      	lsls	r2, r2, #4
 800a48c:	430a      	orrs	r2, r1
 800a48e:	4931      	ldr	r1, [pc, #196]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a490:	4313      	orrs	r3, r2
 800a492:	628b      	str	r3, [r1, #40]	; 0x28
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a498:	3b01      	subs	r3, #1
 800a49a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	025b      	lsls	r3, r3, #9
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	041b      	lsls	r3, r3, #16
 800a4b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	061b      	lsls	r3, r3, #24
 800a4c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4c4:	4923      	ldr	r1, [pc, #140]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a4ca:	4b22      	ldr	r3, [pc, #136]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ce:	4a21      	ldr	r2, [pc, #132]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a4d0:	f023 0301 	bic.w	r3, r3, #1
 800a4d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4d6:	4b1f      	ldr	r3, [pc, #124]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a4d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4da:	4b21      	ldr	r3, [pc, #132]	; (800a560 <HAL_RCC_OscConfig+0x778>)
 800a4dc:	4013      	ands	r3, r2
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a4e2:	00d2      	lsls	r2, r2, #3
 800a4e4:	491b      	ldr	r1, [pc, #108]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a4ea:	4b1a      	ldr	r3, [pc, #104]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ee:	f023 020c 	bic.w	r2, r3, #12
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f6:	4917      	ldr	r1, [pc, #92]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a4fc:	4b15      	ldr	r3, [pc, #84]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	f023 0202 	bic.w	r2, r3, #2
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a508:	4912      	ldr	r1, [pc, #72]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a50a:	4313      	orrs	r3, r2
 800a50c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a50e:	4b11      	ldr	r3, [pc, #68]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a512:	4a10      	ldr	r2, [pc, #64]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a518:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a51a:	4b0e      	ldr	r3, [pc, #56]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	4a0d      	ldr	r2, [pc, #52]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a524:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a526:	4b0b      	ldr	r3, [pc, #44]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52a:	4a0a      	ldr	r2, [pc, #40]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a52c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a530:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a532:	4b08      	ldr	r3, [pc, #32]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a536:	4a07      	ldr	r2, [pc, #28]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a538:	f043 0301 	orr.w	r3, r3, #1
 800a53c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a53e:	4b05      	ldr	r3, [pc, #20]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a04      	ldr	r2, [pc, #16]	; (800a554 <HAL_RCC_OscConfig+0x76c>)
 800a544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a54a:	f7f9 fc79 	bl	8003e40 <HAL_GetTick>
 800a54e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a550:	e011      	b.n	800a576 <HAL_RCC_OscConfig+0x78e>
 800a552:	bf00      	nop
 800a554:	58024400 	.word	0x58024400
 800a558:	58024800 	.word	0x58024800
 800a55c:	fffffc0c 	.word	0xfffffc0c
 800a560:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a564:	f7f9 fc6c 	bl	8003e40 <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d901      	bls.n	800a576 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e08a      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a576:	4b47      	ldr	r3, [pc, #284]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0f0      	beq.n	800a564 <HAL_RCC_OscConfig+0x77c>
 800a582:	e082      	b.n	800a68a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a584:	4b43      	ldr	r3, [pc, #268]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a42      	ldr	r2, [pc, #264]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a58a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a58e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a590:	f7f9 fc56 	bl	8003e40 <HAL_GetTick>
 800a594:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a596:	e008      	b.n	800a5aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a598:	f7f9 fc52 	bl	8003e40 <HAL_GetTick>
 800a59c:	4602      	mov	r2, r0
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d901      	bls.n	800a5aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	e070      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5aa:	4b3a      	ldr	r3, [pc, #232]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1f0      	bne.n	800a598 <HAL_RCC_OscConfig+0x7b0>
 800a5b6:	e068      	b.n	800a68a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a5b8:	4b36      	ldr	r3, [pc, #216]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a5be:	4b35      	ldr	r3, [pc, #212]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d031      	beq.n	800a630 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	f003 0203 	and.w	r2, r3, #3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d12a      	bne.n	800a630 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	091b      	lsrs	r3, r3, #4
 800a5de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d122      	bne.n	800a630 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d11a      	bne.n	800a630 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	0a5b      	lsrs	r3, r3, #9
 800a5fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a606:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a608:	429a      	cmp	r2, r3
 800a60a:	d111      	bne.n	800a630 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	0c1b      	lsrs	r3, r3, #16
 800a610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a618:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d108      	bne.n	800a630 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	0e1b      	lsrs	r3, r3, #24
 800a622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d001      	beq.n	800a634 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e02b      	b.n	800a68c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a634:	4b17      	ldr	r3, [pc, #92]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a638:	08db      	lsrs	r3, r3, #3
 800a63a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a63e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a644:	693a      	ldr	r2, [r7, #16]
 800a646:	429a      	cmp	r2, r3
 800a648:	d01f      	beq.n	800a68a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a64a:	4b12      	ldr	r3, [pc, #72]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64e:	4a11      	ldr	r2, [pc, #68]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a650:	f023 0301 	bic.w	r3, r3, #1
 800a654:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a656:	f7f9 fbf3 	bl	8003e40 <HAL_GetTick>
 800a65a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a65c:	bf00      	nop
 800a65e:	f7f9 fbef 	bl	8003e40 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	4293      	cmp	r3, r2
 800a668:	d0f9      	beq.n	800a65e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a66a:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a66c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a66e:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <HAL_RCC_OscConfig+0x8b0>)
 800a670:	4013      	ands	r3, r2
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a676:	00d2      	lsls	r2, r2, #3
 800a678:	4906      	ldr	r1, [pc, #24]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a67a:	4313      	orrs	r3, r2
 800a67c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a682:	4a04      	ldr	r2, [pc, #16]	; (800a694 <HAL_RCC_OscConfig+0x8ac>)
 800a684:	f043 0301 	orr.w	r3, r3, #1
 800a688:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3730      	adds	r7, #48	; 0x30
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	58024400 	.word	0x58024400
 800a698:	ffff0007 	.word	0xffff0007

0800a69c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d101      	bne.n	800a6b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e19c      	b.n	800a9ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a6b0:	4b8a      	ldr	r3, [pc, #552]	; (800a8dc <HAL_RCC_ClockConfig+0x240>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 030f 	and.w	r3, r3, #15
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d910      	bls.n	800a6e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6be:	4b87      	ldr	r3, [pc, #540]	; (800a8dc <HAL_RCC_ClockConfig+0x240>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f023 020f 	bic.w	r2, r3, #15
 800a6c6:	4985      	ldr	r1, [pc, #532]	; (800a8dc <HAL_RCC_ClockConfig+0x240>)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6ce:	4b83      	ldr	r3, [pc, #524]	; (800a8dc <HAL_RCC_ClockConfig+0x240>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 030f 	and.w	r3, r3, #15
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d001      	beq.n	800a6e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e184      	b.n	800a9ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 0304 	and.w	r3, r3, #4
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d010      	beq.n	800a70e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	691a      	ldr	r2, [r3, #16]
 800a6f0:	4b7b      	ldr	r3, [pc, #492]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d908      	bls.n	800a70e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a6fc:	4b78      	ldr	r3, [pc, #480]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	4975      	ldr	r1, [pc, #468]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a70a:	4313      	orrs	r3, r2
 800a70c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0308 	and.w	r3, r3, #8
 800a716:	2b00      	cmp	r3, #0
 800a718:	d010      	beq.n	800a73c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	695a      	ldr	r2, [r3, #20]
 800a71e:	4b70      	ldr	r3, [pc, #448]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a726:	429a      	cmp	r2, r3
 800a728:	d908      	bls.n	800a73c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a72a:	4b6d      	ldr	r3, [pc, #436]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a72c:	69db      	ldr	r3, [r3, #28]
 800a72e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	496a      	ldr	r1, [pc, #424]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a738:	4313      	orrs	r3, r2
 800a73a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 0310 	and.w	r3, r3, #16
 800a744:	2b00      	cmp	r3, #0
 800a746:	d010      	beq.n	800a76a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	699a      	ldr	r2, [r3, #24]
 800a74c:	4b64      	ldr	r3, [pc, #400]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a74e:	69db      	ldr	r3, [r3, #28]
 800a750:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a754:	429a      	cmp	r2, r3
 800a756:	d908      	bls.n	800a76a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a758:	4b61      	ldr	r3, [pc, #388]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a75a:	69db      	ldr	r3, [r3, #28]
 800a75c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	495e      	ldr	r1, [pc, #376]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a766:	4313      	orrs	r3, r2
 800a768:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0320 	and.w	r3, r3, #32
 800a772:	2b00      	cmp	r3, #0
 800a774:	d010      	beq.n	800a798 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	69da      	ldr	r2, [r3, #28]
 800a77a:	4b59      	ldr	r3, [pc, #356]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a77c:	6a1b      	ldr	r3, [r3, #32]
 800a77e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a782:	429a      	cmp	r2, r3
 800a784:	d908      	bls.n	800a798 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a786:	4b56      	ldr	r3, [pc, #344]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a788:	6a1b      	ldr	r3, [r3, #32]
 800a78a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	4953      	ldr	r1, [pc, #332]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a794:	4313      	orrs	r3, r2
 800a796:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 0302 	and.w	r3, r3, #2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d010      	beq.n	800a7c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68da      	ldr	r2, [r3, #12]
 800a7a8:	4b4d      	ldr	r3, [pc, #308]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	f003 030f 	and.w	r3, r3, #15
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d908      	bls.n	800a7c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7b4:	4b4a      	ldr	r3, [pc, #296]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	f023 020f 	bic.w	r2, r3, #15
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	4947      	ldr	r1, [pc, #284]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d055      	beq.n	800a87e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a7d2:	4b43      	ldr	r3, [pc, #268]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	4940      	ldr	r1, [pc, #256]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d107      	bne.n	800a7fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7ec:	4b3c      	ldr	r3, [pc, #240]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d121      	bne.n	800a83c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e0f6      	b.n	800a9ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	2b03      	cmp	r3, #3
 800a802:	d107      	bne.n	800a814 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a804:	4b36      	ldr	r3, [pc, #216]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d115      	bne.n	800a83c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e0ea      	b.n	800a9ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d107      	bne.n	800a82c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a81c:	4b30      	ldr	r3, [pc, #192]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a824:	2b00      	cmp	r3, #0
 800a826:	d109      	bne.n	800a83c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e0de      	b.n	800a9ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a82c:	4b2c      	ldr	r3, [pc, #176]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 0304 	and.w	r3, r3, #4
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e0d6      	b.n	800a9ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a83c:	4b28      	ldr	r3, [pc, #160]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	f023 0207 	bic.w	r2, r3, #7
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	4925      	ldr	r1, [pc, #148]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a84e:	f7f9 faf7 	bl	8003e40 <HAL_GetTick>
 800a852:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a854:	e00a      	b.n	800a86c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a856:	f7f9 faf3 	bl	8003e40 <HAL_GetTick>
 800a85a:	4602      	mov	r2, r0
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	f241 3288 	movw	r2, #5000	; 0x1388
 800a864:	4293      	cmp	r3, r2
 800a866:	d901      	bls.n	800a86c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a868:	2303      	movs	r3, #3
 800a86a:	e0be      	b.n	800a9ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a86c:	4b1c      	ldr	r3, [pc, #112]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d1eb      	bne.n	800a856 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0302 	and.w	r3, r3, #2
 800a886:	2b00      	cmp	r3, #0
 800a888:	d010      	beq.n	800a8ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	68da      	ldr	r2, [r3, #12]
 800a88e:	4b14      	ldr	r3, [pc, #80]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	f003 030f 	and.w	r3, r3, #15
 800a896:	429a      	cmp	r2, r3
 800a898:	d208      	bcs.n	800a8ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a89a:	4b11      	ldr	r3, [pc, #68]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	f023 020f 	bic.w	r2, r3, #15
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	490e      	ldr	r1, [pc, #56]	; (800a8e0 <HAL_RCC_ClockConfig+0x244>)
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a8ac:	4b0b      	ldr	r3, [pc, #44]	; (800a8dc <HAL_RCC_ClockConfig+0x240>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 030f 	and.w	r3, r3, #15
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d214      	bcs.n	800a8e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8ba:	4b08      	ldr	r3, [pc, #32]	; (800a8dc <HAL_RCC_ClockConfig+0x240>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f023 020f 	bic.w	r2, r3, #15
 800a8c2:	4906      	ldr	r1, [pc, #24]	; (800a8dc <HAL_RCC_ClockConfig+0x240>)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8ca:	4b04      	ldr	r3, [pc, #16]	; (800a8dc <HAL_RCC_ClockConfig+0x240>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 030f 	and.w	r3, r3, #15
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d005      	beq.n	800a8e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e086      	b.n	800a9ea <HAL_RCC_ClockConfig+0x34e>
 800a8dc:	52002000 	.word	0x52002000
 800a8e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0304 	and.w	r3, r3, #4
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d010      	beq.n	800a912 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	691a      	ldr	r2, [r3, #16]
 800a8f4:	4b3f      	ldr	r3, [pc, #252]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d208      	bcs.n	800a912 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a900:	4b3c      	ldr	r3, [pc, #240]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	4939      	ldr	r1, [pc, #228]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a90e:	4313      	orrs	r3, r2
 800a910:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 0308 	and.w	r3, r3, #8
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d010      	beq.n	800a940 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	695a      	ldr	r2, [r3, #20]
 800a922:	4b34      	ldr	r3, [pc, #208]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d208      	bcs.n	800a940 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a92e:	4b31      	ldr	r3, [pc, #196]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	695b      	ldr	r3, [r3, #20]
 800a93a:	492e      	ldr	r1, [pc, #184]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a93c:	4313      	orrs	r3, r2
 800a93e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 0310 	and.w	r3, r3, #16
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d010      	beq.n	800a96e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	699a      	ldr	r2, [r3, #24]
 800a950:	4b28      	ldr	r3, [pc, #160]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a952:	69db      	ldr	r3, [r3, #28]
 800a954:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a958:	429a      	cmp	r2, r3
 800a95a:	d208      	bcs.n	800a96e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a95c:	4b25      	ldr	r3, [pc, #148]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a95e:	69db      	ldr	r3, [r3, #28]
 800a960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	4922      	ldr	r1, [pc, #136]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a96a:	4313      	orrs	r3, r2
 800a96c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f003 0320 	and.w	r3, r3, #32
 800a976:	2b00      	cmp	r3, #0
 800a978:	d010      	beq.n	800a99c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	69da      	ldr	r2, [r3, #28]
 800a97e:	4b1d      	ldr	r3, [pc, #116]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a986:	429a      	cmp	r2, r3
 800a988:	d208      	bcs.n	800a99c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a98a:	4b1a      	ldr	r3, [pc, #104]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	4917      	ldr	r1, [pc, #92]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a998:	4313      	orrs	r3, r2
 800a99a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a99c:	f000 f834 	bl	800aa08 <HAL_RCC_GetSysClockFreq>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	4b14      	ldr	r3, [pc, #80]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	0a1b      	lsrs	r3, r3, #8
 800a9a8:	f003 030f 	and.w	r3, r3, #15
 800a9ac:	4912      	ldr	r1, [pc, #72]	; (800a9f8 <HAL_RCC_ClockConfig+0x35c>)
 800a9ae:	5ccb      	ldrb	r3, [r1, r3]
 800a9b0:	f003 031f 	and.w	r3, r3, #31
 800a9b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a9ba:	4b0e      	ldr	r3, [pc, #56]	; (800a9f4 <HAL_RCC_ClockConfig+0x358>)
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	f003 030f 	and.w	r3, r3, #15
 800a9c2:	4a0d      	ldr	r2, [pc, #52]	; (800a9f8 <HAL_RCC_ClockConfig+0x35c>)
 800a9c4:	5cd3      	ldrb	r3, [r2, r3]
 800a9c6:	f003 031f 	and.w	r3, r3, #31
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d0:	4a0a      	ldr	r2, [pc, #40]	; (800a9fc <HAL_RCC_ClockConfig+0x360>)
 800a9d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9d4:	4a0a      	ldr	r2, [pc, #40]	; (800aa00 <HAL_RCC_ClockConfig+0x364>)
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a9da:	4b0a      	ldr	r3, [pc, #40]	; (800aa04 <HAL_RCC_ClockConfig+0x368>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7f8 ff52 	bl	8003888 <HAL_InitTick>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3718      	adds	r7, #24
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	58024400 	.word	0x58024400
 800a9f8:	080177d0 	.word	0x080177d0
 800a9fc:	24000094 	.word	0x24000094
 800aa00:	24000090 	.word	0x24000090
 800aa04:	24000098 	.word	0x24000098

0800aa08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b089      	sub	sp, #36	; 0x24
 800aa0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa0e:	4bb3      	ldr	r3, [pc, #716]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa16:	2b18      	cmp	r3, #24
 800aa18:	f200 8155 	bhi.w	800acc6 <HAL_RCC_GetSysClockFreq+0x2be>
 800aa1c:	a201      	add	r2, pc, #4	; (adr r2, 800aa24 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aa1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa22:	bf00      	nop
 800aa24:	0800aa89 	.word	0x0800aa89
 800aa28:	0800acc7 	.word	0x0800acc7
 800aa2c:	0800acc7 	.word	0x0800acc7
 800aa30:	0800acc7 	.word	0x0800acc7
 800aa34:	0800acc7 	.word	0x0800acc7
 800aa38:	0800acc7 	.word	0x0800acc7
 800aa3c:	0800acc7 	.word	0x0800acc7
 800aa40:	0800acc7 	.word	0x0800acc7
 800aa44:	0800aaaf 	.word	0x0800aaaf
 800aa48:	0800acc7 	.word	0x0800acc7
 800aa4c:	0800acc7 	.word	0x0800acc7
 800aa50:	0800acc7 	.word	0x0800acc7
 800aa54:	0800acc7 	.word	0x0800acc7
 800aa58:	0800acc7 	.word	0x0800acc7
 800aa5c:	0800acc7 	.word	0x0800acc7
 800aa60:	0800acc7 	.word	0x0800acc7
 800aa64:	0800aab5 	.word	0x0800aab5
 800aa68:	0800acc7 	.word	0x0800acc7
 800aa6c:	0800acc7 	.word	0x0800acc7
 800aa70:	0800acc7 	.word	0x0800acc7
 800aa74:	0800acc7 	.word	0x0800acc7
 800aa78:	0800acc7 	.word	0x0800acc7
 800aa7c:	0800acc7 	.word	0x0800acc7
 800aa80:	0800acc7 	.word	0x0800acc7
 800aa84:	0800aabb 	.word	0x0800aabb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa88:	4b94      	ldr	r3, [pc, #592]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 0320 	and.w	r3, r3, #32
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d009      	beq.n	800aaa8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa94:	4b91      	ldr	r3, [pc, #580]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	08db      	lsrs	r3, r3, #3
 800aa9a:	f003 0303 	and.w	r3, r3, #3
 800aa9e:	4a90      	ldr	r2, [pc, #576]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aaa0:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800aaa6:	e111      	b.n	800accc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aaa8:	4b8d      	ldr	r3, [pc, #564]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aaaa:	61bb      	str	r3, [r7, #24]
      break;
 800aaac:	e10e      	b.n	800accc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aaae:	4b8d      	ldr	r3, [pc, #564]	; (800ace4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aab0:	61bb      	str	r3, [r7, #24]
      break;
 800aab2:	e10b      	b.n	800accc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aab4:	4b8c      	ldr	r3, [pc, #560]	; (800ace8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aab6:	61bb      	str	r3, [r7, #24]
      break;
 800aab8:	e108      	b.n	800accc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aaba:	4b88      	ldr	r3, [pc, #544]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aabe:	f003 0303 	and.w	r3, r3, #3
 800aac2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aac4:	4b85      	ldr	r3, [pc, #532]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac8:	091b      	lsrs	r3, r3, #4
 800aaca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aace:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aad0:	4b82      	ldr	r3, [pc, #520]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad4:	f003 0301 	and.w	r3, r3, #1
 800aad8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aada:	4b80      	ldr	r3, [pc, #512]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aade:	08db      	lsrs	r3, r3, #3
 800aae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	fb02 f303 	mul.w	r3, r2, r3
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f000 80e1 	beq.w	800acc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	f000 8083 	beq.w	800ac0c <HAL_RCC_GetSysClockFreq+0x204>
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	f200 80a1 	bhi.w	800ac50 <HAL_RCC_GetSysClockFreq+0x248>
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d003      	beq.n	800ab1c <HAL_RCC_GetSysClockFreq+0x114>
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d056      	beq.n	800abc8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ab1a:	e099      	b.n	800ac50 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab1c:	4b6f      	ldr	r3, [pc, #444]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0320 	and.w	r3, r3, #32
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d02d      	beq.n	800ab84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab28:	4b6c      	ldr	r3, [pc, #432]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	08db      	lsrs	r3, r3, #3
 800ab2e:	f003 0303 	and.w	r3, r3, #3
 800ab32:	4a6b      	ldr	r2, [pc, #428]	; (800ace0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab34:	fa22 f303 	lsr.w	r3, r2, r3
 800ab38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	ee07 3a90 	vmov	s15, r3
 800ab40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	ee07 3a90 	vmov	s15, r3
 800ab4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab52:	4b62      	ldr	r3, [pc, #392]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab62:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab66:	eddf 5a61 	vldr	s11, [pc, #388]	; 800acec <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ab82:	e087      	b.n	800ac94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab8e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800acf0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ab92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab96:	4b51      	ldr	r3, [pc, #324]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab9e:	ee07 3a90 	vmov	s15, r3
 800aba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba6:	ed97 6a02 	vldr	s12, [r7, #8]
 800abaa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800acec <HAL_RCC_GetSysClockFreq+0x2e4>
 800abae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abc6:	e065      	b.n	800ac94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800acf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800abd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abda:	4b40      	ldr	r3, [pc, #256]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abea:	ed97 6a02 	vldr	s12, [r7, #8]
 800abee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800acec <HAL_RCC_GetSysClockFreq+0x2e4>
 800abf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac0a:	e043      	b.n	800ac94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac16:	eddf 6a38 	vldr	s13, [pc, #224]	; 800acf8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ac1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac1e:	4b2f      	ldr	r3, [pc, #188]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac26:	ee07 3a90 	vmov	s15, r3
 800ac2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac2e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac32:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800acec <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac4e:	e021      	b.n	800ac94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800acf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac62:	4b1e      	ldr	r3, [pc, #120]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6a:	ee07 3a90 	vmov	s15, r3
 800ac6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac72:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac76:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800acec <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ac94:	4b11      	ldr	r3, [pc, #68]	; (800acdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac98:	0a5b      	lsrs	r3, r3, #9
 800ac9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac9e:	3301      	adds	r3, #1
 800aca0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	ee07 3a90 	vmov	s15, r3
 800aca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acac:	edd7 6a07 	vldr	s13, [r7, #28]
 800acb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acb8:	ee17 3a90 	vmov	r3, s15
 800acbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800acbe:	e005      	b.n	800accc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800acc0:	2300      	movs	r3, #0
 800acc2:	61bb      	str	r3, [r7, #24]
      break;
 800acc4:	e002      	b.n	800accc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800acc6:	4b07      	ldr	r3, [pc, #28]	; (800ace4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800acc8:	61bb      	str	r3, [r7, #24]
      break;
 800acca:	bf00      	nop
  }

  return sysclockfreq;
 800accc:	69bb      	ldr	r3, [r7, #24]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3724      	adds	r7, #36	; 0x24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	58024400 	.word	0x58024400
 800ace0:	03d09000 	.word	0x03d09000
 800ace4:	003d0900 	.word	0x003d0900
 800ace8:	017d7840 	.word	0x017d7840
 800acec:	46000000 	.word	0x46000000
 800acf0:	4c742400 	.word	0x4c742400
 800acf4:	4a742400 	.word	0x4a742400
 800acf8:	4bbebc20 	.word	0x4bbebc20

0800acfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad02:	f7ff fe81 	bl	800aa08 <HAL_RCC_GetSysClockFreq>
 800ad06:	4602      	mov	r2, r0
 800ad08:	4b10      	ldr	r3, [pc, #64]	; (800ad4c <HAL_RCC_GetHCLKFreq+0x50>)
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	0a1b      	lsrs	r3, r3, #8
 800ad0e:	f003 030f 	and.w	r3, r3, #15
 800ad12:	490f      	ldr	r1, [pc, #60]	; (800ad50 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad14:	5ccb      	ldrb	r3, [r1, r3]
 800ad16:	f003 031f 	and.w	r3, r3, #31
 800ad1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad1e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad20:	4b0a      	ldr	r3, [pc, #40]	; (800ad4c <HAL_RCC_GetHCLKFreq+0x50>)
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	f003 030f 	and.w	r3, r3, #15
 800ad28:	4a09      	ldr	r2, [pc, #36]	; (800ad50 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad2a:	5cd3      	ldrb	r3, [r2, r3]
 800ad2c:	f003 031f 	and.w	r3, r3, #31
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	fa22 f303 	lsr.w	r3, r2, r3
 800ad36:	4a07      	ldr	r2, [pc, #28]	; (800ad54 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ad3a:	4a07      	ldr	r2, [pc, #28]	; (800ad58 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ad40:	4b04      	ldr	r3, [pc, #16]	; (800ad54 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad42:	681b      	ldr	r3, [r3, #0]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	58024400 	.word	0x58024400
 800ad50:	080177d0 	.word	0x080177d0
 800ad54:	24000094 	.word	0x24000094
 800ad58:	24000090 	.word	0x24000090

0800ad5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ad60:	f7ff ffcc 	bl	800acfc <HAL_RCC_GetHCLKFreq>
 800ad64:	4602      	mov	r2, r0
 800ad66:	4b06      	ldr	r3, [pc, #24]	; (800ad80 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad68:	69db      	ldr	r3, [r3, #28]
 800ad6a:	091b      	lsrs	r3, r3, #4
 800ad6c:	f003 0307 	and.w	r3, r3, #7
 800ad70:	4904      	ldr	r1, [pc, #16]	; (800ad84 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad72:	5ccb      	ldrb	r3, [r1, r3]
 800ad74:	f003 031f 	and.w	r3, r3, #31
 800ad78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	58024400 	.word	0x58024400
 800ad84:	080177d0 	.word	0x080177d0

0800ad88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad8c:	f7ff ffb6 	bl	800acfc <HAL_RCC_GetHCLKFreq>
 800ad90:	4602      	mov	r2, r0
 800ad92:	4b06      	ldr	r3, [pc, #24]	; (800adac <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad94:	69db      	ldr	r3, [r3, #28]
 800ad96:	0a1b      	lsrs	r3, r3, #8
 800ad98:	f003 0307 	and.w	r3, r3, #7
 800ad9c:	4904      	ldr	r1, [pc, #16]	; (800adb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad9e:	5ccb      	ldrb	r3, [r1, r3]
 800ada0:	f003 031f 	and.w	r3, r3, #31
 800ada4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	58024400 	.word	0x58024400
 800adb0:	080177d0 	.word	0x080177d0

0800adb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	223f      	movs	r2, #63	; 0x3f
 800adc2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800adc4:	4b1a      	ldr	r3, [pc, #104]	; (800ae30 <HAL_RCC_GetClockConfig+0x7c>)
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	f003 0207 	and.w	r2, r3, #7
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800add0:	4b17      	ldr	r3, [pc, #92]	; (800ae30 <HAL_RCC_GetClockConfig+0x7c>)
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800addc:	4b14      	ldr	r3, [pc, #80]	; (800ae30 <HAL_RCC_GetClockConfig+0x7c>)
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	f003 020f 	and.w	r2, r3, #15
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ade8:	4b11      	ldr	r3, [pc, #68]	; (800ae30 <HAL_RCC_GetClockConfig+0x7c>)
 800adea:	699b      	ldr	r3, [r3, #24]
 800adec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800adf4:	4b0e      	ldr	r3, [pc, #56]	; (800ae30 <HAL_RCC_GetClockConfig+0x7c>)
 800adf6:	69db      	ldr	r3, [r3, #28]
 800adf8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ae00:	4b0b      	ldr	r3, [pc, #44]	; (800ae30 <HAL_RCC_GetClockConfig+0x7c>)
 800ae02:	69db      	ldr	r3, [r3, #28]
 800ae04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ae0c:	4b08      	ldr	r3, [pc, #32]	; (800ae30 <HAL_RCC_GetClockConfig+0x7c>)
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ae18:	4b06      	ldr	r3, [pc, #24]	; (800ae34 <HAL_RCC_GetClockConfig+0x80>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 020f 	and.w	r2, r3, #15
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	601a      	str	r2, [r3, #0]
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr
 800ae30:	58024400 	.word	0x58024400
 800ae34:	52002000 	.word	0x52002000

0800ae38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae3c:	b0ca      	sub	sp, #296	; 0x128
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae44:	2300      	movs	r3, #0
 800ae46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae58:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ae5c:	2500      	movs	r5, #0
 800ae5e:	ea54 0305 	orrs.w	r3, r4, r5
 800ae62:	d049      	beq.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae6e:	d02f      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ae70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae74:	d828      	bhi.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae7a:	d01a      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ae7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae80:	d822      	bhi.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ae86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae8a:	d007      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ae8c:	e01c      	b.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae8e:	4bb8      	ldr	r3, [pc, #736]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae92:	4ab7      	ldr	r2, [pc, #732]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae9a:	e01a      	b.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aea0:	3308      	adds	r3, #8
 800aea2:	2102      	movs	r1, #2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f002 fb61 	bl	800d56c <RCCEx_PLL2_Config>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aeb0:	e00f      	b.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aeb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb6:	3328      	adds	r3, #40	; 0x28
 800aeb8:	2102      	movs	r1, #2
 800aeba:	4618      	mov	r0, r3
 800aebc:	f002 fc08 	bl	800d6d0 <RCCEx_PLL3_Config>
 800aec0:	4603      	mov	r3, r0
 800aec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aec6:	e004      	b.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aece:	e000      	b.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10a      	bne.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aeda:	4ba5      	ldr	r3, [pc, #660]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aedc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aede:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aee8:	4aa1      	ldr	r2, [pc, #644]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aeea:	430b      	orrs	r3, r1
 800aeec:	6513      	str	r3, [r2, #80]	; 0x50
 800aeee:	e003      	b.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aef4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af00:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800af04:	f04f 0900 	mov.w	r9, #0
 800af08:	ea58 0309 	orrs.w	r3, r8, r9
 800af0c:	d047      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800af0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af14:	2b04      	cmp	r3, #4
 800af16:	d82a      	bhi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800af18:	a201      	add	r2, pc, #4	; (adr r2, 800af20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800af1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af1e:	bf00      	nop
 800af20:	0800af35 	.word	0x0800af35
 800af24:	0800af43 	.word	0x0800af43
 800af28:	0800af59 	.word	0x0800af59
 800af2c:	0800af77 	.word	0x0800af77
 800af30:	0800af77 	.word	0x0800af77
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af34:	4b8e      	ldr	r3, [pc, #568]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af38:	4a8d      	ldr	r2, [pc, #564]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af40:	e01a      	b.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af46:	3308      	adds	r3, #8
 800af48:	2100      	movs	r1, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f002 fb0e 	bl	800d56c <RCCEx_PLL2_Config>
 800af50:	4603      	mov	r3, r0
 800af52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af56:	e00f      	b.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af5c:	3328      	adds	r3, #40	; 0x28
 800af5e:	2100      	movs	r1, #0
 800af60:	4618      	mov	r0, r3
 800af62:	f002 fbb5 	bl	800d6d0 <RCCEx_PLL3_Config>
 800af66:	4603      	mov	r3, r0
 800af68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af6c:	e004      	b.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af74:	e000      	b.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800af76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10a      	bne.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af80:	4b7b      	ldr	r3, [pc, #492]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af84:	f023 0107 	bic.w	r1, r3, #7
 800af88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af8e:	4a78      	ldr	r2, [pc, #480]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af90:	430b      	orrs	r3, r1
 800af92:	6513      	str	r3, [r2, #80]	; 0x50
 800af94:	e003      	b.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800af9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800afaa:	f04f 0b00 	mov.w	fp, #0
 800afae:	ea5a 030b 	orrs.w	r3, sl, fp
 800afb2:	d04c      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800afb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afbe:	d030      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800afc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afc4:	d829      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afc6:	2bc0      	cmp	r3, #192	; 0xc0
 800afc8:	d02d      	beq.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800afca:	2bc0      	cmp	r3, #192	; 0xc0
 800afcc:	d825      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afce:	2b80      	cmp	r3, #128	; 0x80
 800afd0:	d018      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800afd2:	2b80      	cmp	r3, #128	; 0x80
 800afd4:	d821      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d002      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800afda:	2b40      	cmp	r3, #64	; 0x40
 800afdc:	d007      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800afde:	e01c      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afe0:	4b63      	ldr	r3, [pc, #396]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe4:	4a62      	ldr	r2, [pc, #392]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800afec:	e01c      	b.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aff2:	3308      	adds	r3, #8
 800aff4:	2100      	movs	r1, #0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f002 fab8 	bl	800d56c <RCCEx_PLL2_Config>
 800affc:	4603      	mov	r3, r0
 800affe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b002:	e011      	b.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b008:	3328      	adds	r3, #40	; 0x28
 800b00a:	2100      	movs	r1, #0
 800b00c:	4618      	mov	r0, r3
 800b00e:	f002 fb5f 	bl	800d6d0 <RCCEx_PLL3_Config>
 800b012:	4603      	mov	r3, r0
 800b014:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b018:	e006      	b.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b020:	e002      	b.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b022:	bf00      	nop
 800b024:	e000      	b.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b026:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10a      	bne.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b030:	4b4f      	ldr	r3, [pc, #316]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b034:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b03c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b03e:	4a4c      	ldr	r2, [pc, #304]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b040:	430b      	orrs	r3, r1
 800b042:	6513      	str	r3, [r2, #80]	; 0x50
 800b044:	e003      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b04a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b05a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b05e:	2300      	movs	r3, #0
 800b060:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b064:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b068:	460b      	mov	r3, r1
 800b06a:	4313      	orrs	r3, r2
 800b06c:	d053      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b072:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b07a:	d035      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b07c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b080:	d82e      	bhi.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b082:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b086:	d031      	beq.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b088:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b08c:	d828      	bhi.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b08e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b092:	d01a      	beq.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b098:	d822      	bhi.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d003      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b09e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0a2:	d007      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b0a4:	e01c      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0a6:	4b32      	ldr	r3, [pc, #200]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0aa:	4a31      	ldr	r2, [pc, #196]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0b2:	e01c      	b.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b8:	3308      	adds	r3, #8
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f002 fa55 	bl	800d56c <RCCEx_PLL2_Config>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b0c8:	e011      	b.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ce:	3328      	adds	r3, #40	; 0x28
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f002 fafc 	bl	800d6d0 <RCCEx_PLL3_Config>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0de:	e006      	b.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0e6:	e002      	b.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b0e8:	bf00      	nop
 800b0ea:	e000      	b.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b0ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10b      	bne.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b0f6:	4b1e      	ldr	r3, [pc, #120]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0fa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b102:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b106:	4a1a      	ldr	r2, [pc, #104]	; (800b170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b108:	430b      	orrs	r3, r1
 800b10a:	6593      	str	r3, [r2, #88]	; 0x58
 800b10c:	e003      	b.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b10e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b112:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b122:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b126:	2300      	movs	r3, #0
 800b128:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b12c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b130:	460b      	mov	r3, r1
 800b132:	4313      	orrs	r3, r2
 800b134:	d056      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b13a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b13e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b142:	d038      	beq.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b148:	d831      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b14a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b14e:	d034      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b150:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b154:	d82b      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b15a:	d01d      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b15c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b160:	d825      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b162:	2b00      	cmp	r3, #0
 800b164:	d006      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b166:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b16a:	d00a      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b16c:	e01f      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b16e:	bf00      	nop
 800b170:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b174:	4ba2      	ldr	r3, [pc, #648]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b178:	4aa1      	ldr	r2, [pc, #644]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b17a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b17e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b180:	e01c      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b186:	3308      	adds	r3, #8
 800b188:	2100      	movs	r1, #0
 800b18a:	4618      	mov	r0, r3
 800b18c:	f002 f9ee 	bl	800d56c <RCCEx_PLL2_Config>
 800b190:	4603      	mov	r3, r0
 800b192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b196:	e011      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b19c:	3328      	adds	r3, #40	; 0x28
 800b19e:	2100      	movs	r1, #0
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f002 fa95 	bl	800d6d0 <RCCEx_PLL3_Config>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1ac:	e006      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1b4:	e002      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b1b6:	bf00      	nop
 800b1b8:	e000      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b1ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10b      	bne.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b1c4:	4b8e      	ldr	r3, [pc, #568]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1d4:	4a8a      	ldr	r2, [pc, #552]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1d6:	430b      	orrs	r3, r1
 800b1d8:	6593      	str	r3, [r2, #88]	; 0x58
 800b1da:	e003      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b1f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b1fe:	460b      	mov	r3, r1
 800b200:	4313      	orrs	r3, r2
 800b202:	d03a      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b20a:	2b30      	cmp	r3, #48	; 0x30
 800b20c:	d01f      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b20e:	2b30      	cmp	r3, #48	; 0x30
 800b210:	d819      	bhi.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b212:	2b20      	cmp	r3, #32
 800b214:	d00c      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b216:	2b20      	cmp	r3, #32
 800b218:	d815      	bhi.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d019      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b21e:	2b10      	cmp	r3, #16
 800b220:	d111      	bne.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b222:	4b77      	ldr	r3, [pc, #476]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b226:	4a76      	ldr	r2, [pc, #472]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b22c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b22e:	e011      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b234:	3308      	adds	r3, #8
 800b236:	2102      	movs	r1, #2
 800b238:	4618      	mov	r0, r3
 800b23a:	f002 f997 	bl	800d56c <RCCEx_PLL2_Config>
 800b23e:	4603      	mov	r3, r0
 800b240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b244:	e006      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b24c:	e002      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b24e:	bf00      	nop
 800b250:	e000      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b252:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b254:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10a      	bne.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b25c:	4b68      	ldr	r3, [pc, #416]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b25e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b260:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b26a:	4a65      	ldr	r2, [pc, #404]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b26c:	430b      	orrs	r3, r1
 800b26e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b270:	e003      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b276:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b282:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b286:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b28a:	2300      	movs	r3, #0
 800b28c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b290:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b294:	460b      	mov	r3, r1
 800b296:	4313      	orrs	r3, r2
 800b298:	d051      	beq.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b29e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2a4:	d035      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b2a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2aa:	d82e      	bhi.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b2ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b2b0:	d031      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b2b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b2b6:	d828      	bhi.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b2b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2bc:	d01a      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b2be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2c2:	d822      	bhi.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b2c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2cc:	d007      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b2ce:	e01c      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2d0:	4b4b      	ldr	r3, [pc, #300]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d4:	4a4a      	ldr	r2, [pc, #296]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2dc:	e01c      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f002 f940 	bl	800d56c <RCCEx_PLL2_Config>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b2f2:	e011      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f8:	3328      	adds	r3, #40	; 0x28
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f002 f9e7 	bl	800d6d0 <RCCEx_PLL3_Config>
 800b302:	4603      	mov	r3, r0
 800b304:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b308:	e006      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b310:	e002      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b312:	bf00      	nop
 800b314:	e000      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b316:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b318:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10a      	bne.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b320:	4b37      	ldr	r3, [pc, #220]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b324:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b32c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b32e:	4a34      	ldr	r2, [pc, #208]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b330:	430b      	orrs	r3, r1
 800b332:	6513      	str	r3, [r2, #80]	; 0x50
 800b334:	e003      	b.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b33a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b346:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b34a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b34e:	2300      	movs	r3, #0
 800b350:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b354:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b358:	460b      	mov	r3, r1
 800b35a:	4313      	orrs	r3, r2
 800b35c:	d056      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b368:	d033      	beq.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b36a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b36e:	d82c      	bhi.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b370:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b374:	d02f      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b376:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b37a:	d826      	bhi.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b37c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b380:	d02b      	beq.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b386:	d820      	bhi.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b38c:	d012      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b38e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b392:	d81a      	bhi.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b394:	2b00      	cmp	r3, #0
 800b396:	d022      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b39c:	d115      	bne.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a2:	3308      	adds	r3, #8
 800b3a4:	2101      	movs	r1, #1
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f002 f8e0 	bl	800d56c <RCCEx_PLL2_Config>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b3b2:	e015      	b.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3b8:	3328      	adds	r3, #40	; 0x28
 800b3ba:	2101      	movs	r1, #1
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f002 f987 	bl	800d6d0 <RCCEx_PLL3_Config>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b3c8:	e00a      	b.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3d0:	e006      	b.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3d2:	bf00      	nop
 800b3d4:	e004      	b.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3d6:	bf00      	nop
 800b3d8:	e002      	b.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3da:	bf00      	nop
 800b3dc:	e000      	b.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b3de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d10d      	bne.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b3e8:	4b05      	ldr	r3, [pc, #20]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3f6:	4a02      	ldr	r2, [pc, #8]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3f8:	430b      	orrs	r3, r1
 800b3fa:	6513      	str	r3, [r2, #80]	; 0x50
 800b3fc:	e006      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b3fe:	bf00      	nop
 800b400:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b408:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b41c:	2300      	movs	r3, #0
 800b41e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b422:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b426:	460b      	mov	r3, r1
 800b428:	4313      	orrs	r3, r2
 800b42a:	d055      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b438:	d033      	beq.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b43a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b43e:	d82c      	bhi.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b444:	d02f      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b44a:	d826      	bhi.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b44c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b450:	d02b      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b456:	d820      	bhi.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b45c:	d012      	beq.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b45e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b462:	d81a      	bhi.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b464:	2b00      	cmp	r3, #0
 800b466:	d022      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b46c:	d115      	bne.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b472:	3308      	adds	r3, #8
 800b474:	2101      	movs	r1, #1
 800b476:	4618      	mov	r0, r3
 800b478:	f002 f878 	bl	800d56c <RCCEx_PLL2_Config>
 800b47c:	4603      	mov	r3, r0
 800b47e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b482:	e015      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b488:	3328      	adds	r3, #40	; 0x28
 800b48a:	2101      	movs	r1, #1
 800b48c:	4618      	mov	r0, r3
 800b48e:	f002 f91f 	bl	800d6d0 <RCCEx_PLL3_Config>
 800b492:	4603      	mov	r3, r0
 800b494:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b498:	e00a      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4a0:	e006      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b4a2:	bf00      	nop
 800b4a4:	e004      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b4a6:	bf00      	nop
 800b4a8:	e002      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b4aa:	bf00      	nop
 800b4ac:	e000      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b4ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10b      	bne.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b4b8:	4ba3      	ldr	r3, [pc, #652]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4bc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4c8:	4a9f      	ldr	r2, [pc, #636]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4ca:	430b      	orrs	r3, r1
 800b4cc:	6593      	str	r3, [r2, #88]	; 0x58
 800b4ce:	e003      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b4e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	d037      	beq.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b502:	d00e      	beq.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b508:	d816      	bhi.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d018      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b50e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b512:	d111      	bne.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b514:	4b8c      	ldr	r3, [pc, #560]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	4a8b      	ldr	r2, [pc, #556]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b51a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b51e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b520:	e00f      	b.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b526:	3308      	adds	r3, #8
 800b528:	2101      	movs	r1, #1
 800b52a:	4618      	mov	r0, r3
 800b52c:	f002 f81e 	bl	800d56c <RCCEx_PLL2_Config>
 800b530:	4603      	mov	r3, r0
 800b532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b536:	e004      	b.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b53e:	e000      	b.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b540:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10a      	bne.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b54a:	4b7f      	ldr	r3, [pc, #508]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b54e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b558:	4a7b      	ldr	r2, [pc, #492]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b55a:	430b      	orrs	r3, r1
 800b55c:	6513      	str	r3, [r2, #80]	; 0x50
 800b55e:	e003      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b564:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b578:	2300      	movs	r3, #0
 800b57a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b57e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b582:	460b      	mov	r3, r1
 800b584:	4313      	orrs	r3, r2
 800b586:	d039      	beq.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b58c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d81c      	bhi.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b592:	a201      	add	r2, pc, #4	; (adr r2, 800b598 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b598:	0800b5d5 	.word	0x0800b5d5
 800b59c:	0800b5a9 	.word	0x0800b5a9
 800b5a0:	0800b5b7 	.word	0x0800b5b7
 800b5a4:	0800b5d5 	.word	0x0800b5d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5a8:	4b67      	ldr	r3, [pc, #412]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ac:	4a66      	ldr	r2, [pc, #408]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b5b4:	e00f      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ba:	3308      	adds	r3, #8
 800b5bc:	2102      	movs	r1, #2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f001 ffd4 	bl	800d56c <RCCEx_PLL2_Config>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b5ca:	e004      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5d2:	e000      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b5d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10a      	bne.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b5de:	4b5a      	ldr	r3, [pc, #360]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5e2:	f023 0103 	bic.w	r1, r3, #3
 800b5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5ec:	4a56      	ldr	r2, [pc, #344]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5ee:	430b      	orrs	r3, r1
 800b5f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5f2:	e003      	b.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b608:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b60c:	2300      	movs	r3, #0
 800b60e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b612:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b616:	460b      	mov	r3, r1
 800b618:	4313      	orrs	r3, r2
 800b61a:	f000 809f 	beq.w	800b75c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b61e:	4b4b      	ldr	r3, [pc, #300]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a4a      	ldr	r2, [pc, #296]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b628:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b62a:	f7f8 fc09 	bl	8003e40 <HAL_GetTick>
 800b62e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b632:	e00b      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b634:	f7f8 fc04 	bl	8003e40 <HAL_GetTick>
 800b638:	4602      	mov	r2, r0
 800b63a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	2b64      	cmp	r3, #100	; 0x64
 800b642:	d903      	bls.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b644:	2303      	movs	r3, #3
 800b646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b64a:	e005      	b.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b64c:	4b3f      	ldr	r3, [pc, #252]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0ed      	beq.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b658:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d179      	bne.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b660:	4b39      	ldr	r3, [pc, #228]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b668:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b66c:	4053      	eors	r3, r2
 800b66e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b672:	2b00      	cmp	r3, #0
 800b674:	d015      	beq.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b676:	4b34      	ldr	r3, [pc, #208]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b67a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b67e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b682:	4b31      	ldr	r3, [pc, #196]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b686:	4a30      	ldr	r2, [pc, #192]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b68c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b68e:	4b2e      	ldr	r3, [pc, #184]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b692:	4a2d      	ldr	r2, [pc, #180]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b698:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b69a:	4a2b      	ldr	r2, [pc, #172]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b69c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b6a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ae:	d118      	bne.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6b0:	f7f8 fbc6 	bl	8003e40 <HAL_GetTick>
 800b6b4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b6b8:	e00d      	b.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6ba:	f7f8 fbc1 	bl	8003e40 <HAL_GetTick>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b6c4:	1ad2      	subs	r2, r2, r3
 800b6c6:	f241 3388 	movw	r3, #5000	; 0x1388
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d903      	bls.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b6d4:	e005      	b.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b6d6:	4b1c      	ldr	r3, [pc, #112]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6da:	f003 0302 	and.w	r3, r3, #2
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0eb      	beq.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d129      	bne.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6fa:	d10e      	bne.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b6fc:	4b12      	ldr	r3, [pc, #72]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b708:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b70c:	091a      	lsrs	r2, r3, #4
 800b70e:	4b10      	ldr	r3, [pc, #64]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b710:	4013      	ands	r3, r2
 800b712:	4a0d      	ldr	r2, [pc, #52]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b714:	430b      	orrs	r3, r1
 800b716:	6113      	str	r3, [r2, #16]
 800b718:	e005      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b71a:	4b0b      	ldr	r3, [pc, #44]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	4a0a      	ldr	r2, [pc, #40]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b720:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b724:	6113      	str	r3, [r2, #16]
 800b726:	4b08      	ldr	r3, [pc, #32]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b728:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b72e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b736:	4a04      	ldr	r2, [pc, #16]	; (800b748 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b738:	430b      	orrs	r3, r1
 800b73a:	6713      	str	r3, [r2, #112]	; 0x70
 800b73c:	e00e      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b73e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b746:	e009      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b748:	58024400 	.word	0x58024400
 800b74c:	58024800 	.word	0x58024800
 800b750:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b758:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f002 0301 	and.w	r3, r2, #1
 800b768:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b76c:	2300      	movs	r3, #0
 800b76e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b772:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b776:	460b      	mov	r3, r1
 800b778:	4313      	orrs	r3, r2
 800b77a:	f000 8089 	beq.w	800b890 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b784:	2b28      	cmp	r3, #40	; 0x28
 800b786:	d86b      	bhi.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b788:	a201      	add	r2, pc, #4	; (adr r2, 800b790 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78e:	bf00      	nop
 800b790:	0800b869 	.word	0x0800b869
 800b794:	0800b861 	.word	0x0800b861
 800b798:	0800b861 	.word	0x0800b861
 800b79c:	0800b861 	.word	0x0800b861
 800b7a0:	0800b861 	.word	0x0800b861
 800b7a4:	0800b861 	.word	0x0800b861
 800b7a8:	0800b861 	.word	0x0800b861
 800b7ac:	0800b861 	.word	0x0800b861
 800b7b0:	0800b835 	.word	0x0800b835
 800b7b4:	0800b861 	.word	0x0800b861
 800b7b8:	0800b861 	.word	0x0800b861
 800b7bc:	0800b861 	.word	0x0800b861
 800b7c0:	0800b861 	.word	0x0800b861
 800b7c4:	0800b861 	.word	0x0800b861
 800b7c8:	0800b861 	.word	0x0800b861
 800b7cc:	0800b861 	.word	0x0800b861
 800b7d0:	0800b84b 	.word	0x0800b84b
 800b7d4:	0800b861 	.word	0x0800b861
 800b7d8:	0800b861 	.word	0x0800b861
 800b7dc:	0800b861 	.word	0x0800b861
 800b7e0:	0800b861 	.word	0x0800b861
 800b7e4:	0800b861 	.word	0x0800b861
 800b7e8:	0800b861 	.word	0x0800b861
 800b7ec:	0800b861 	.word	0x0800b861
 800b7f0:	0800b869 	.word	0x0800b869
 800b7f4:	0800b861 	.word	0x0800b861
 800b7f8:	0800b861 	.word	0x0800b861
 800b7fc:	0800b861 	.word	0x0800b861
 800b800:	0800b861 	.word	0x0800b861
 800b804:	0800b861 	.word	0x0800b861
 800b808:	0800b861 	.word	0x0800b861
 800b80c:	0800b861 	.word	0x0800b861
 800b810:	0800b869 	.word	0x0800b869
 800b814:	0800b861 	.word	0x0800b861
 800b818:	0800b861 	.word	0x0800b861
 800b81c:	0800b861 	.word	0x0800b861
 800b820:	0800b861 	.word	0x0800b861
 800b824:	0800b861 	.word	0x0800b861
 800b828:	0800b861 	.word	0x0800b861
 800b82c:	0800b861 	.word	0x0800b861
 800b830:	0800b869 	.word	0x0800b869
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b838:	3308      	adds	r3, #8
 800b83a:	2101      	movs	r1, #1
 800b83c:	4618      	mov	r0, r3
 800b83e:	f001 fe95 	bl	800d56c <RCCEx_PLL2_Config>
 800b842:	4603      	mov	r3, r0
 800b844:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b848:	e00f      	b.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b84e:	3328      	adds	r3, #40	; 0x28
 800b850:	2101      	movs	r1, #1
 800b852:	4618      	mov	r0, r3
 800b854:	f001 ff3c 	bl	800d6d0 <RCCEx_PLL3_Config>
 800b858:	4603      	mov	r3, r0
 800b85a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b85e:	e004      	b.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b866:	e000      	b.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b86a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b872:	4bbf      	ldr	r3, [pc, #764]	; (800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b876:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b87a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b87e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b880:	4abb      	ldr	r2, [pc, #748]	; (800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b882:	430b      	orrs	r3, r1
 800b884:	6553      	str	r3, [r2, #84]	; 0x54
 800b886:	e003      	b.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b888:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b88c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	f002 0302 	and.w	r3, r2, #2
 800b89c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b8a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	d041      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b8b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8b6:	2b05      	cmp	r3, #5
 800b8b8:	d824      	bhi.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b8ba:	a201      	add	r2, pc, #4	; (adr r2, 800b8c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c0:	0800b90d 	.word	0x0800b90d
 800b8c4:	0800b8d9 	.word	0x0800b8d9
 800b8c8:	0800b8ef 	.word	0x0800b8ef
 800b8cc:	0800b90d 	.word	0x0800b90d
 800b8d0:	0800b90d 	.word	0x0800b90d
 800b8d4:	0800b90d 	.word	0x0800b90d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8dc:	3308      	adds	r3, #8
 800b8de:	2101      	movs	r1, #1
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f001 fe43 	bl	800d56c <RCCEx_PLL2_Config>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b8ec:	e00f      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f2:	3328      	adds	r3, #40	; 0x28
 800b8f4:	2101      	movs	r1, #1
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f001 feea 	bl	800d6d0 <RCCEx_PLL3_Config>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b902:	e004      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b90a:	e000      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b90c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b90e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10a      	bne.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b916:	4b96      	ldr	r3, [pc, #600]	; (800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b91a:	f023 0107 	bic.w	r1, r3, #7
 800b91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b924:	4a92      	ldr	r2, [pc, #584]	; (800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b926:	430b      	orrs	r3, r1
 800b928:	6553      	str	r3, [r2, #84]	; 0x54
 800b92a:	e003      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b92c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b930:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	f002 0304 	and.w	r3, r2, #4
 800b940:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b944:	2300      	movs	r3, #0
 800b946:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b94a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b94e:	460b      	mov	r3, r1
 800b950:	4313      	orrs	r3, r2
 800b952:	d044      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b95c:	2b05      	cmp	r3, #5
 800b95e:	d825      	bhi.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b960:	a201      	add	r2, pc, #4	; (adr r2, 800b968 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b966:	bf00      	nop
 800b968:	0800b9b5 	.word	0x0800b9b5
 800b96c:	0800b981 	.word	0x0800b981
 800b970:	0800b997 	.word	0x0800b997
 800b974:	0800b9b5 	.word	0x0800b9b5
 800b978:	0800b9b5 	.word	0x0800b9b5
 800b97c:	0800b9b5 	.word	0x0800b9b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b984:	3308      	adds	r3, #8
 800b986:	2101      	movs	r1, #1
 800b988:	4618      	mov	r0, r3
 800b98a:	f001 fdef 	bl	800d56c <RCCEx_PLL2_Config>
 800b98e:	4603      	mov	r3, r0
 800b990:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b994:	e00f      	b.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99a:	3328      	adds	r3, #40	; 0x28
 800b99c:	2101      	movs	r1, #1
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f001 fe96 	bl	800d6d0 <RCCEx_PLL3_Config>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b9aa:	e004      	b.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9b2:	e000      	b.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b9b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10b      	bne.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b9be:	4b6c      	ldr	r3, [pc, #432]	; (800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c2:	f023 0107 	bic.w	r1, r3, #7
 800b9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9ce:	4a68      	ldr	r2, [pc, #416]	; (800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9d0:	430b      	orrs	r3, r1
 800b9d2:	6593      	str	r3, [r2, #88]	; 0x58
 800b9d4:	e003      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	f002 0320 	and.w	r3, r2, #32
 800b9ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b9f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	d055      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba0a:	d033      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800ba0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba10:	d82c      	bhi.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba16:	d02f      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ba18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba1c:	d826      	bhi.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba22:	d02b      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ba24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba28:	d820      	bhi.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba2e:	d012      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ba30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba34:	d81a      	bhi.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d022      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ba3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba3e:	d115      	bne.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba44:	3308      	adds	r3, #8
 800ba46:	2100      	movs	r1, #0
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f001 fd8f 	bl	800d56c <RCCEx_PLL2_Config>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ba54:	e015      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba5a:	3328      	adds	r3, #40	; 0x28
 800ba5c:	2102      	movs	r1, #2
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f001 fe36 	bl	800d6d0 <RCCEx_PLL3_Config>
 800ba64:	4603      	mov	r3, r0
 800ba66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ba6a:	e00a      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba72:	e006      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba74:	bf00      	nop
 800ba76:	e004      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba78:	bf00      	nop
 800ba7a:	e002      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba7c:	bf00      	nop
 800ba7e:	e000      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ba80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10b      	bne.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba8a:	4b39      	ldr	r3, [pc, #228]	; (800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba8e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ba92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba9a:	4a35      	ldr	r2, [pc, #212]	; (800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba9c:	430b      	orrs	r3, r1
 800ba9e:	6553      	str	r3, [r2, #84]	; 0x54
 800baa0:	e003      	b.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800baaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800baba:	2300      	movs	r3, #0
 800babc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bac0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bac4:	460b      	mov	r3, r1
 800bac6:	4313      	orrs	r3, r2
 800bac8:	d058      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800baca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bad2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bad6:	d033      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bad8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800badc:	d82c      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bae2:	d02f      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bae8:	d826      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800baea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800baee:	d02b      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800baf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800baf4:	d820      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800baf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bafa:	d012      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bafc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb00:	d81a      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d022      	beq.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bb06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb0a:	d115      	bne.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb10:	3308      	adds	r3, #8
 800bb12:	2100      	movs	r1, #0
 800bb14:	4618      	mov	r0, r3
 800bb16:	f001 fd29 	bl	800d56c <RCCEx_PLL2_Config>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bb20:	e015      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb26:	3328      	adds	r3, #40	; 0x28
 800bb28:	2102      	movs	r1, #2
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f001 fdd0 	bl	800d6d0 <RCCEx_PLL3_Config>
 800bb30:	4603      	mov	r3, r0
 800bb32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bb36:	e00a      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb3e:	e006      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb40:	bf00      	nop
 800bb42:	e004      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb44:	bf00      	nop
 800bb46:	e002      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb48:	bf00      	nop
 800bb4a:	e000      	b.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bb4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10e      	bne.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bb56:	4b06      	ldr	r3, [pc, #24]	; (800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb5a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb66:	4a02      	ldr	r2, [pc, #8]	; (800bb70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb68:	430b      	orrs	r3, r1
 800bb6a:	6593      	str	r3, [r2, #88]	; 0x58
 800bb6c:	e006      	b.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bb6e:	bf00      	nop
 800bb70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bb88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb92:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bb96:	460b      	mov	r3, r1
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	d055      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bb9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bba4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bba8:	d033      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bbaa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bbae:	d82c      	bhi.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbb4:	d02f      	beq.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bbb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbba:	d826      	bhi.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bbc0:	d02b      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bbc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bbc6:	d820      	bhi.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbcc:	d012      	beq.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bbce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbd2:	d81a      	bhi.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d022      	beq.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bbd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbdc:	d115      	bne.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe2:	3308      	adds	r3, #8
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f001 fcc0 	bl	800d56c <RCCEx_PLL2_Config>
 800bbec:	4603      	mov	r3, r0
 800bbee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bbf2:	e015      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf8:	3328      	adds	r3, #40	; 0x28
 800bbfa:	2102      	movs	r1, #2
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f001 fd67 	bl	800d6d0 <RCCEx_PLL3_Config>
 800bc02:	4603      	mov	r3, r0
 800bc04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bc08:	e00a      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc10:	e006      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bc12:	bf00      	nop
 800bc14:	e004      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bc16:	bf00      	nop
 800bc18:	e002      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bc1a:	bf00      	nop
 800bc1c:	e000      	b.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bc1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10b      	bne.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bc28:	4ba1      	ldr	r3, [pc, #644]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc2c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bc30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc38:	4a9d      	ldr	r2, [pc, #628]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc3a:	430b      	orrs	r3, r1
 800bc3c:	6593      	str	r3, [r2, #88]	; 0x58
 800bc3e:	e003      	b.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bc48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc50:	f002 0308 	and.w	r3, r2, #8
 800bc54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc5e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bc62:	460b      	mov	r3, r1
 800bc64:	4313      	orrs	r3, r2
 800bc66:	d01e      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bc68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc74:	d10c      	bne.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc7a:	3328      	adds	r3, #40	; 0x28
 800bc7c:	2102      	movs	r1, #2
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f001 fd26 	bl	800d6d0 <RCCEx_PLL3_Config>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d002      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bc90:	4b87      	ldr	r3, [pc, #540]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bca0:	4a83      	ldr	r2, [pc, #524]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bca2:	430b      	orrs	r3, r1
 800bca4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	f002 0310 	and.w	r3, r2, #16
 800bcb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bcbc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	d01e      	beq.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bcc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bcce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd2:	d10c      	bne.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bcd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcd8:	3328      	adds	r3, #40	; 0x28
 800bcda:	2102      	movs	r1, #2
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f001 fcf7 	bl	800d6d0 <RCCEx_PLL3_Config>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bcee:	4b70      	ldr	r3, [pc, #448]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcf2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bcf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bcfe:	4a6c      	ldr	r2, [pc, #432]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd00:	430b      	orrs	r3, r1
 800bd02:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bd04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bd10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd14:	2300      	movs	r3, #0
 800bd16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd1a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4313      	orrs	r3, r2
 800bd22:	d03e      	beq.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bd24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd30:	d022      	beq.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bd32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd36:	d81b      	bhi.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bd3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd40:	d00b      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bd42:	e015      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd48:	3308      	adds	r3, #8
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f001 fc0d 	bl	800d56c <RCCEx_PLL2_Config>
 800bd52:	4603      	mov	r3, r0
 800bd54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bd58:	e00f      	b.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd5e:	3328      	adds	r3, #40	; 0x28
 800bd60:	2102      	movs	r1, #2
 800bd62:	4618      	mov	r0, r3
 800bd64:	f001 fcb4 	bl	800d6d0 <RCCEx_PLL3_Config>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bd6e:	e004      	b.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd76:	e000      	b.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bd78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10b      	bne.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bd82:	4b4b      	ldr	r3, [pc, #300]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd86:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bd8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd92:	4a47      	ldr	r2, [pc, #284]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd94:	430b      	orrs	r3, r1
 800bd96:	6593      	str	r3, [r2, #88]	; 0x58
 800bd98:	e003      	b.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bda2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdaa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bdae:	67bb      	str	r3, [r7, #120]	; 0x78
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bdb4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	d03b      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bdbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdca:	d01f      	beq.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bdcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdd0:	d818      	bhi.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bdd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdd6:	d003      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bdd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bddc:	d007      	beq.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bdde:	e011      	b.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bde0:	4b33      	ldr	r3, [pc, #204]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde4:	4a32      	ldr	r2, [pc, #200]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bde6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bdec:	e00f      	b.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf2:	3328      	adds	r3, #40	; 0x28
 800bdf4:	2101      	movs	r1, #1
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f001 fc6a 	bl	800d6d0 <RCCEx_PLL3_Config>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800be02:	e004      	b.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be04:	2301      	movs	r3, #1
 800be06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be0a:	e000      	b.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800be0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be12:	2b00      	cmp	r3, #0
 800be14:	d10b      	bne.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be16:	4b26      	ldr	r3, [pc, #152]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be1a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800be1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be26:	4a22      	ldr	r2, [pc, #136]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be28:	430b      	orrs	r3, r1
 800be2a:	6553      	str	r3, [r2, #84]	; 0x54
 800be2c:	e003      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800be36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800be42:	673b      	str	r3, [r7, #112]	; 0x70
 800be44:	2300      	movs	r3, #0
 800be46:	677b      	str	r3, [r7, #116]	; 0x74
 800be48:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800be4c:	460b      	mov	r3, r1
 800be4e:	4313      	orrs	r3, r2
 800be50:	d034      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800be52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d003      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800be5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be60:	d007      	beq.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800be62:	e011      	b.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be64:	4b12      	ldr	r3, [pc, #72]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be68:	4a11      	ldr	r2, [pc, #68]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be70:	e00e      	b.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be76:	3308      	adds	r3, #8
 800be78:	2102      	movs	r1, #2
 800be7a:	4618      	mov	r0, r3
 800be7c:	f001 fb76 	bl	800d56c <RCCEx_PLL2_Config>
 800be80:	4603      	mov	r3, r0
 800be82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be86:	e003      	b.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10d      	bne.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800be98:	4b05      	ldr	r3, [pc, #20]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bea6:	4a02      	ldr	r2, [pc, #8]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bea8:	430b      	orrs	r3, r1
 800beaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800beac:	e006      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800beae:	bf00      	nop
 800beb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bec8:	66bb      	str	r3, [r7, #104]	; 0x68
 800beca:	2300      	movs	r3, #0
 800becc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bece:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bed2:	460b      	mov	r3, r1
 800bed4:	4313      	orrs	r3, r2
 800bed6:	d00c      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bedc:	3328      	adds	r3, #40	; 0x28
 800bede:	2102      	movs	r1, #2
 800bee0:	4618      	mov	r0, r3
 800bee2:	f001 fbf5 	bl	800d6d0 <RCCEx_PLL3_Config>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d002      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800befe:	663b      	str	r3, [r7, #96]	; 0x60
 800bf00:	2300      	movs	r3, #0
 800bf02:	667b      	str	r3, [r7, #100]	; 0x64
 800bf04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bf08:	460b      	mov	r3, r1
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	d038      	beq.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bf0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf1a:	d018      	beq.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bf1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf20:	d811      	bhi.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bf22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf26:	d014      	beq.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bf28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf2c:	d80b      	bhi.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d011      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bf32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf36:	d106      	bne.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf38:	4bc3      	ldr	r3, [pc, #780]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3c:	4ac2      	ldr	r2, [pc, #776]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bf44:	e008      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf4c:	e004      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf4e:	bf00      	nop
 800bf50:	e002      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf52:	bf00      	nop
 800bf54:	e000      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bf56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10b      	bne.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf60:	4bb9      	ldr	r3, [pc, #740]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf64:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf70:	4ab5      	ldr	r2, [pc, #724]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf72:	430b      	orrs	r3, r1
 800bf74:	6553      	str	r3, [r2, #84]	; 0x54
 800bf76:	e003      	b.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bf8c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf8e:	2300      	movs	r3, #0
 800bf90:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bf96:	460b      	mov	r3, r1
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	d009      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bf9c:	4baa      	ldr	r3, [pc, #680]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfa0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bfa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfaa:	4aa7      	ldr	r2, [pc, #668]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfac:	430b      	orrs	r3, r1
 800bfae:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bfb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bfbc:	653b      	str	r3, [r7, #80]	; 0x50
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	657b      	str	r3, [r7, #84]	; 0x54
 800bfc2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	d00a      	beq.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bfcc:	4b9e      	ldr	r3, [pc, #632]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bfd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bfdc:	4a9a      	ldr	r2, [pc, #616]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bfde:	430b      	orrs	r3, r1
 800bfe0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bfee:	64bb      	str	r3, [r7, #72]	; 0x48
 800bff0:	2300      	movs	r3, #0
 800bff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bff4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bff8:	460b      	mov	r3, r1
 800bffa:	4313      	orrs	r3, r2
 800bffc:	d009      	beq.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bffe:	4b92      	ldr	r3, [pc, #584]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c002:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c00c:	4a8e      	ldr	r2, [pc, #568]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c00e:	430b      	orrs	r3, r1
 800c010:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c01e:	643b      	str	r3, [r7, #64]	; 0x40
 800c020:	2300      	movs	r3, #0
 800c022:	647b      	str	r3, [r7, #68]	; 0x44
 800c024:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c028:	460b      	mov	r3, r1
 800c02a:	4313      	orrs	r3, r2
 800c02c:	d00e      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c02e:	4b86      	ldr	r3, [pc, #536]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	4a85      	ldr	r2, [pc, #532]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c034:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c038:	6113      	str	r3, [r2, #16]
 800c03a:	4b83      	ldr	r3, [pc, #524]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c03c:	6919      	ldr	r1, [r3, #16]
 800c03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c042:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c046:	4a80      	ldr	r2, [pc, #512]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c048:	430b      	orrs	r3, r1
 800c04a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c058:	63bb      	str	r3, [r7, #56]	; 0x38
 800c05a:	2300      	movs	r3, #0
 800c05c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c05e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c062:	460b      	mov	r3, r1
 800c064:	4313      	orrs	r3, r2
 800c066:	d009      	beq.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c068:	4b77      	ldr	r3, [pc, #476]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c06a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c06c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c076:	4a74      	ldr	r2, [pc, #464]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c078:	430b      	orrs	r3, r1
 800c07a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c088:	633b      	str	r3, [r7, #48]	; 0x30
 800c08a:	2300      	movs	r3, #0
 800c08c:	637b      	str	r3, [r7, #52]	; 0x34
 800c08e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c092:	460b      	mov	r3, r1
 800c094:	4313      	orrs	r3, r2
 800c096:	d00a      	beq.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c098:	4b6b      	ldr	r3, [pc, #428]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c09a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c09c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0a8:	4a67      	ldr	r2, [pc, #412]	; (800c248 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0aa:	430b      	orrs	r3, r1
 800c0ac:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	62b9      	str	r1, [r7, #40]	; 0x28
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	d011      	beq.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ce:	3308      	adds	r3, #8
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f001 fa4a 	bl	800d56c <RCCEx_PLL2_Config>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d003      	beq.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	6239      	str	r1, [r7, #32]
 800c0fa:	f003 0302 	and.w	r3, r3, #2
 800c0fe:	627b      	str	r3, [r7, #36]	; 0x24
 800c100:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c104:	460b      	mov	r3, r1
 800c106:	4313      	orrs	r3, r2
 800c108:	d011      	beq.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c10e:	3308      	adds	r3, #8
 800c110:	2101      	movs	r1, #1
 800c112:	4618      	mov	r0, r3
 800c114:	f001 fa2a 	bl	800d56c <RCCEx_PLL2_Config>
 800c118:	4603      	mov	r3, r0
 800c11a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c11e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c122:	2b00      	cmp	r3, #0
 800c124:	d003      	beq.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c126:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c12a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	2100      	movs	r1, #0
 800c138:	61b9      	str	r1, [r7, #24]
 800c13a:	f003 0304 	and.w	r3, r3, #4
 800c13e:	61fb      	str	r3, [r7, #28]
 800c140:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c144:	460b      	mov	r3, r1
 800c146:	4313      	orrs	r3, r2
 800c148:	d011      	beq.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c14e:	3308      	adds	r3, #8
 800c150:	2102      	movs	r1, #2
 800c152:	4618      	mov	r0, r3
 800c154:	f001 fa0a 	bl	800d56c <RCCEx_PLL2_Config>
 800c158:	4603      	mov	r3, r0
 800c15a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c15e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c162:	2b00      	cmp	r3, #0
 800c164:	d003      	beq.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c16a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c176:	2100      	movs	r1, #0
 800c178:	6139      	str	r1, [r7, #16]
 800c17a:	f003 0308 	and.w	r3, r3, #8
 800c17e:	617b      	str	r3, [r7, #20]
 800c180:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c184:	460b      	mov	r3, r1
 800c186:	4313      	orrs	r3, r2
 800c188:	d011      	beq.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c18e:	3328      	adds	r3, #40	; 0x28
 800c190:	2100      	movs	r1, #0
 800c192:	4618      	mov	r0, r3
 800c194:	f001 fa9c 	bl	800d6d0 <RCCEx_PLL3_Config>
 800c198:	4603      	mov	r3, r0
 800c19a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c19e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d003      	beq.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	f003 0310 	and.w	r3, r3, #16
 800c1be:	60fb      	str	r3, [r7, #12]
 800c1c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	d011      	beq.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ce:	3328      	adds	r3, #40	; 0x28
 800c1d0:	2101      	movs	r1, #1
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f001 fa7c 	bl	800d6d0 <RCCEx_PLL3_Config>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d003      	beq.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	6039      	str	r1, [r7, #0]
 800c1fa:	f003 0320 	and.w	r3, r3, #32
 800c1fe:	607b      	str	r3, [r7, #4]
 800c200:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c204:	460b      	mov	r3, r1
 800c206:	4313      	orrs	r3, r2
 800c208:	d011      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c20e:	3328      	adds	r3, #40	; 0x28
 800c210:	2102      	movs	r1, #2
 800c212:	4618      	mov	r0, r3
 800c214:	f001 fa5c 	bl	800d6d0 <RCCEx_PLL3_Config>
 800c218:	4603      	mov	r3, r0
 800c21a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c21e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c222:	2b00      	cmp	r3, #0
 800c224:	d003      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c22a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c22e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	e000      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c23a:	2301      	movs	r3, #1
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c242:	46bd      	mov	sp, r7
 800c244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c248:	58024400 	.word	0x58024400

0800c24c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b090      	sub	sp, #64	; 0x40
 800c250:	af00      	add	r7, sp, #0
 800c252:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c25a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c25e:	430b      	orrs	r3, r1
 800c260:	f040 8094 	bne.w	800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c264:	4b9e      	ldr	r3, [pc, #632]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c268:	f003 0307 	and.w	r3, r3, #7
 800c26c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c270:	2b04      	cmp	r3, #4
 800c272:	f200 8087 	bhi.w	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c276:	a201      	add	r2, pc, #4	; (adr r2, 800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27c:	0800c291 	.word	0x0800c291
 800c280:	0800c2b9 	.word	0x0800c2b9
 800c284:	0800c2e1 	.word	0x0800c2e1
 800c288:	0800c37d 	.word	0x0800c37d
 800c28c:	0800c309 	.word	0x0800c309
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c290:	4b93      	ldr	r3, [pc, #588]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c29c:	d108      	bne.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c29e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f001 f810 	bl	800d2c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ac:	f000 bd45 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b4:	f000 bd41 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2b8:	4b89      	ldr	r3, [pc, #548]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2c4:	d108      	bne.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2c6:	f107 0318 	add.w	r3, r7, #24
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 fd54 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2d4:	f000 bd31 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2dc:	f000 bd2d 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2e0:	4b7f      	ldr	r3, [pc, #508]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2ec:	d108      	bne.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2ee:	f107 030c 	add.w	r3, r7, #12
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 fe94 	bl	800d020 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2fc:	f000 bd1d 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c300:	2300      	movs	r3, #0
 800c302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c304:	f000 bd19 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c308:	4b75      	ldr	r3, [pc, #468]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c30a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c30c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c310:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c312:	4b73      	ldr	r3, [pc, #460]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 0304 	and.w	r3, r3, #4
 800c31a:	2b04      	cmp	r3, #4
 800c31c:	d10c      	bne.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c320:	2b00      	cmp	r3, #0
 800c322:	d109      	bne.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c324:	4b6e      	ldr	r3, [pc, #440]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	08db      	lsrs	r3, r3, #3
 800c32a:	f003 0303 	and.w	r3, r3, #3
 800c32e:	4a6d      	ldr	r2, [pc, #436]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c330:	fa22 f303 	lsr.w	r3, r2, r3
 800c334:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c336:	e01f      	b.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c338:	4b69      	ldr	r3, [pc, #420]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c344:	d106      	bne.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c34c:	d102      	bne.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c34e:	4b66      	ldr	r3, [pc, #408]	; (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c350:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c352:	e011      	b.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c354:	4b62      	ldr	r3, [pc, #392]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c35c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c360:	d106      	bne.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c368:	d102      	bne.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c36a:	4b60      	ldr	r3, [pc, #384]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c36c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c36e:	e003      	b.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c370:	2300      	movs	r3, #0
 800c372:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c374:	f000 bce1 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c378:	f000 bcdf 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c37c:	4b5c      	ldr	r3, [pc, #368]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c380:	f000 bcdb 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c384:	2300      	movs	r3, #0
 800c386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c388:	f000 bcd7 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c38c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c390:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c394:	430b      	orrs	r3, r1
 800c396:	f040 80ad 	bne.w	800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c39a:	4b51      	ldr	r3, [pc, #324]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c39c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c39e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c3a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3aa:	d056      	beq.n	800c45a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3b2:	f200 8090 	bhi.w	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b8:	2bc0      	cmp	r3, #192	; 0xc0
 800c3ba:	f000 8088 	beq.w	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	2bc0      	cmp	r3, #192	; 0xc0
 800c3c2:	f200 8088 	bhi.w	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	2b80      	cmp	r3, #128	; 0x80
 800c3ca:	d032      	beq.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ce:	2b80      	cmp	r3, #128	; 0x80
 800c3d0:	f200 8081 	bhi.w	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3dc:	2b40      	cmp	r3, #64	; 0x40
 800c3de:	d014      	beq.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c3e0:	e079      	b.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3e2:	4b3f      	ldr	r3, [pc, #252]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3ee:	d108      	bne.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f000 ff67 	bl	800d2c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3fe:	f000 bc9c 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c406:	f000 bc98 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c40a:	4b35      	ldr	r3, [pc, #212]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c416:	d108      	bne.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c418:	f107 0318 	add.w	r3, r7, #24
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 fcab 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c426:	f000 bc88 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c42e:	f000 bc84 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c432:	4b2b      	ldr	r3, [pc, #172]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c43a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c43e:	d108      	bne.n	800c452 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c440:	f107 030c 	add.w	r3, r7, #12
 800c444:	4618      	mov	r0, r3
 800c446:	f000 fdeb 	bl	800d020 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c44e:	f000 bc74 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c456:	f000 bc70 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c45a:	4b21      	ldr	r3, [pc, #132]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c45c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c45e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c462:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c464:	4b1e      	ldr	r3, [pc, #120]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 0304 	and.w	r3, r3, #4
 800c46c:	2b04      	cmp	r3, #4
 800c46e:	d10c      	bne.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c472:	2b00      	cmp	r3, #0
 800c474:	d109      	bne.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c476:	4b1a      	ldr	r3, [pc, #104]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	08db      	lsrs	r3, r3, #3
 800c47c:	f003 0303 	and.w	r3, r3, #3
 800c480:	4a18      	ldr	r2, [pc, #96]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c482:	fa22 f303 	lsr.w	r3, r2, r3
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c488:	e01f      	b.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c48a:	4b15      	ldr	r3, [pc, #84]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c496:	d106      	bne.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c49e:	d102      	bne.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4a0:	4b11      	ldr	r3, [pc, #68]	; (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4a4:	e011      	b.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4a6:	4b0e      	ldr	r3, [pc, #56]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4b2:	d106      	bne.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4ba:	d102      	bne.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4bc:	4b0b      	ldr	r3, [pc, #44]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c4be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4c0:	e003      	b.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4c6:	f000 bc38 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4ca:	f000 bc36 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4ce:	4b08      	ldr	r3, [pc, #32]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d2:	f000 bc32 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4da:	f000 bc2e 	b.w	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4de:	bf00      	nop
 800c4e0:	58024400 	.word	0x58024400
 800c4e4:	03d09000 	.word	0x03d09000
 800c4e8:	003d0900 	.word	0x003d0900
 800c4ec:	017d7840 	.word	0x017d7840
 800c4f0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c4f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4f8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c4fc:	430b      	orrs	r3, r1
 800c4fe:	f040 809c 	bne.w	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c502:	4b9e      	ldr	r3, [pc, #632]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c506:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c50a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c512:	d054      	beq.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c516:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c51a:	f200 808b 	bhi.w	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c520:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c524:	f000 8083 	beq.w	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c52e:	f200 8081 	bhi.w	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c538:	d02f      	beq.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c540:	d878      	bhi.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c544:	2b00      	cmp	r3, #0
 800c546:	d004      	beq.n	800c552 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c54e:	d012      	beq.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c550:	e070      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c552:	4b8a      	ldr	r3, [pc, #552]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c55a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c55e:	d107      	bne.n	800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c564:	4618      	mov	r0, r3
 800c566:	f000 feaf 	bl	800d2c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c56e:	e3e4      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c570:	2300      	movs	r3, #0
 800c572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c574:	e3e1      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c576:	4b81      	ldr	r3, [pc, #516]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c57e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c582:	d107      	bne.n	800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c584:	f107 0318 	add.w	r3, r7, #24
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 fbf5 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c592:	e3d2      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c594:	2300      	movs	r3, #0
 800c596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c598:	e3cf      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c59a:	4b78      	ldr	r3, [pc, #480]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5a6:	d107      	bne.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5a8:	f107 030c 	add.w	r3, r7, #12
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f000 fd37 	bl	800d020 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b6:	e3c0      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5bc:	e3bd      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5be:	4b6f      	ldr	r3, [pc, #444]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5c8:	4b6c      	ldr	r3, [pc, #432]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 0304 	and.w	r3, r3, #4
 800c5d0:	2b04      	cmp	r3, #4
 800c5d2:	d10c      	bne.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d109      	bne.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5da:	4b68      	ldr	r3, [pc, #416]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	08db      	lsrs	r3, r3, #3
 800c5e0:	f003 0303 	and.w	r3, r3, #3
 800c5e4:	4a66      	ldr	r2, [pc, #408]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c5e6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ec:	e01e      	b.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5ee:	4b63      	ldr	r3, [pc, #396]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5fa:	d106      	bne.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c602:	d102      	bne.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c604:	4b5f      	ldr	r3, [pc, #380]	; (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c606:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c608:	e010      	b.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c60a:	4b5c      	ldr	r3, [pc, #368]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c616:	d106      	bne.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c61e:	d102      	bne.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c620:	4b59      	ldr	r3, [pc, #356]	; (800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c622:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c624:	e002      	b.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c62a:	e386      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c62c:	e385      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c62e:	4b57      	ldr	r3, [pc, #348]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c632:	e382      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c634:	2300      	movs	r3, #0
 800c636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c638:	e37f      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c63a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c63e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c642:	430b      	orrs	r3, r1
 800c644:	f040 80a7 	bne.w	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c648:	4b4c      	ldr	r3, [pc, #304]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c64a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c64c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c650:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c654:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c658:	d055      	beq.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c660:	f200 8096 	bhi.w	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c666:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c66a:	f000 8084 	beq.w	800c776 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c670:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c674:	f200 808c 	bhi.w	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c67e:	d030      	beq.n	800c6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c686:	f200 8083 	bhi.w	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d004      	beq.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c696:	d012      	beq.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c698:	e07a      	b.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c69a:	4b38      	ldr	r3, [pc, #224]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6a6:	d107      	bne.n	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f000 fe0b 	bl	800d2c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6b6:	e340      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6bc:	e33d      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6be:	4b2f      	ldr	r3, [pc, #188]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6ca:	d107      	bne.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6cc:	f107 0318 	add.w	r3, r7, #24
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 fb51 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6da:	e32e      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e0:	e32b      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6e2:	4b26      	ldr	r3, [pc, #152]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ee:	d107      	bne.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6f0:	f107 030c 	add.w	r3, r7, #12
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 fc93 	bl	800d020 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6fe:	e31c      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c704:	e319      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c706:	4b1d      	ldr	r3, [pc, #116]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c70a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c70e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c710:	4b1a      	ldr	r3, [pc, #104]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f003 0304 	and.w	r3, r3, #4
 800c718:	2b04      	cmp	r3, #4
 800c71a:	d10c      	bne.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d109      	bne.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c722:	4b16      	ldr	r3, [pc, #88]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	08db      	lsrs	r3, r3, #3
 800c728:	f003 0303 	and.w	r3, r3, #3
 800c72c:	4a14      	ldr	r2, [pc, #80]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c72e:	fa22 f303 	lsr.w	r3, r2, r3
 800c732:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c734:	e01e      	b.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c736:	4b11      	ldr	r3, [pc, #68]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c73e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c742:	d106      	bne.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c74a:	d102      	bne.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c74c:	4b0d      	ldr	r3, [pc, #52]	; (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c74e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c750:	e010      	b.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c752:	4b0a      	ldr	r3, [pc, #40]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c75a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c75e:	d106      	bne.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c766:	d102      	bne.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c768:	4b07      	ldr	r3, [pc, #28]	; (800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c76a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c76c:	e002      	b.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c772:	e2e2      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c774:	e2e1      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c776:	4b05      	ldr	r3, [pc, #20]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c77a:	e2de      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c77c:	58024400 	.word	0x58024400
 800c780:	03d09000 	.word	0x03d09000
 800c784:	003d0900 	.word	0x003d0900
 800c788:	017d7840 	.word	0x017d7840
 800c78c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c790:	2300      	movs	r3, #0
 800c792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c794:	e2d1      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c79a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c79e:	430b      	orrs	r3, r1
 800c7a0:	f040 809c 	bne.w	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c7a4:	4b93      	ldr	r3, [pc, #588]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c7ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7b4:	d054      	beq.n	800c860 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7bc:	f200 808b 	bhi.w	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c7c6:	f000 8083 	beq.w	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c7d0:	f200 8081 	bhi.w	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7da:	d02f      	beq.n	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7e2:	d878      	bhi.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d004      	beq.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7f0:	d012      	beq.n	800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c7f2:	e070      	b.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7f4:	4b7f      	ldr	r3, [pc, #508]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c800:	d107      	bne.n	800c812 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c806:	4618      	mov	r0, r3
 800c808:	f000 fd5e 	bl	800d2c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c810:	e293      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c816:	e290      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c818:	4b76      	ldr	r3, [pc, #472]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c824:	d107      	bne.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c826:	f107 0318 	add.w	r3, r7, #24
 800c82a:	4618      	mov	r0, r3
 800c82c:	f000 faa4 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c834:	e281      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c836:	2300      	movs	r3, #0
 800c838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83a:	e27e      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c83c:	4b6d      	ldr	r3, [pc, #436]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c848:	d107      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c84a:	f107 030c 	add.w	r3, r7, #12
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 fbe6 	bl	800d020 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c858:	e26f      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c85e:	e26c      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c860:	4b64      	ldr	r3, [pc, #400]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c864:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c868:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c86a:	4b62      	ldr	r3, [pc, #392]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f003 0304 	and.w	r3, r3, #4
 800c872:	2b04      	cmp	r3, #4
 800c874:	d10c      	bne.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d109      	bne.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c87c:	4b5d      	ldr	r3, [pc, #372]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	08db      	lsrs	r3, r3, #3
 800c882:	f003 0303 	and.w	r3, r3, #3
 800c886:	4a5c      	ldr	r2, [pc, #368]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c888:	fa22 f303 	lsr.w	r3, r2, r3
 800c88c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c88e:	e01e      	b.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c890:	4b58      	ldr	r3, [pc, #352]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c89c:	d106      	bne.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8a4:	d102      	bne.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8a6:	4b55      	ldr	r3, [pc, #340]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8aa:	e010      	b.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8ac:	4b51      	ldr	r3, [pc, #324]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8b8:	d106      	bne.n	800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8c0:	d102      	bne.n	800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8c2:	4b4f      	ldr	r3, [pc, #316]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8c6:	e002      	b.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8cc:	e235      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8ce:	e234      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8d0:	4b4c      	ldr	r3, [pc, #304]	; (800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d4:	e231      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8da:	e22e      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c8dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8e0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c8e4:	430b      	orrs	r3, r1
 800c8e6:	f040 808f 	bne.w	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c8ea:	4b42      	ldr	r3, [pc, #264]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c8f2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c8fa:	d06b      	beq.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c902:	d874      	bhi.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c90a:	d056      	beq.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c912:	d86c      	bhi.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c91a:	d03b      	beq.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c922:	d864      	bhi.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c92a:	d021      	beq.n	800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c932:	d85c      	bhi.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c936:	2b00      	cmp	r3, #0
 800c938:	d004      	beq.n	800c944 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c940:	d004      	beq.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c942:	e054      	b.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c944:	f7fe fa0a 	bl	800ad5c <HAL_RCC_GetPCLK1Freq>
 800c948:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c94a:	e1f6      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c94c:	4b29      	ldr	r3, [pc, #164]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c958:	d107      	bne.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c95a:	f107 0318 	add.w	r3, r7, #24
 800c95e:	4618      	mov	r0, r3
 800c960:	f000 fa0a 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c968:	e1e7      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96e:	e1e4      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c970:	4b20      	ldr	r3, [pc, #128]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c97c:	d107      	bne.n	800c98e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c97e:	f107 030c 	add.w	r3, r7, #12
 800c982:	4618      	mov	r0, r3
 800c984:	f000 fb4c 	bl	800d020 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c98c:	e1d5      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c992:	e1d2      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c994:	4b17      	ldr	r3, [pc, #92]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f003 0304 	and.w	r3, r3, #4
 800c99c:	2b04      	cmp	r3, #4
 800c99e:	d109      	bne.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9a0:	4b14      	ldr	r3, [pc, #80]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	08db      	lsrs	r3, r3, #3
 800c9a6:	f003 0303 	and.w	r3, r3, #3
 800c9aa:	4a13      	ldr	r2, [pc, #76]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c9ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9b2:	e1c2      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b8:	e1bf      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c9ba:	4b0e      	ldr	r3, [pc, #56]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9c6:	d102      	bne.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c9c8:	4b0c      	ldr	r3, [pc, #48]	; (800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9cc:	e1b5      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9d2:	e1b2      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c9d4:	4b07      	ldr	r3, [pc, #28]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9e0:	d102      	bne.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c9e2:	4b07      	ldr	r3, [pc, #28]	; (800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9e6:	e1a8      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ec:	e1a5      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f2:	e1a2      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9f4:	58024400 	.word	0x58024400
 800c9f8:	03d09000 	.word	0x03d09000
 800c9fc:	003d0900 	.word	0x003d0900
 800ca00:	017d7840 	.word	0x017d7840
 800ca04:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ca08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca0c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ca10:	430b      	orrs	r3, r1
 800ca12:	d173      	bne.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ca14:	4b9c      	ldr	r3, [pc, #624]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ca1c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca24:	d02f      	beq.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ca26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca2c:	d863      	bhi.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d004      	beq.n	800ca3e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca3a:	d012      	beq.n	800ca62 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ca3c:	e05b      	b.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca3e:	4b92      	ldr	r3, [pc, #584]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca4a:	d107      	bne.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca4c:	f107 0318 	add.w	r3, r7, #24
 800ca50:	4618      	mov	r0, r3
 800ca52:	f000 f991 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca5a:	e16e      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca60:	e16b      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca62:	4b89      	ldr	r3, [pc, #548]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca6e:	d107      	bne.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca70:	f107 030c 	add.w	r3, r7, #12
 800ca74:	4618      	mov	r0, r3
 800ca76:	f000 fad3 	bl	800d020 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca7e:	e15c      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca84:	e159      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca86:	4b80      	ldr	r3, [pc, #512]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca8e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca90:	4b7d      	ldr	r3, [pc, #500]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f003 0304 	and.w	r3, r3, #4
 800ca98:	2b04      	cmp	r3, #4
 800ca9a:	d10c      	bne.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ca9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d109      	bne.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800caa2:	4b79      	ldr	r3, [pc, #484]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	08db      	lsrs	r3, r3, #3
 800caa8:	f003 0303 	and.w	r3, r3, #3
 800caac:	4a77      	ldr	r2, [pc, #476]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800caae:	fa22 f303 	lsr.w	r3, r2, r3
 800cab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cab4:	e01e      	b.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cab6:	4b74      	ldr	r3, [pc, #464]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cabe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cac2:	d106      	bne.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800caca:	d102      	bne.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cacc:	4b70      	ldr	r3, [pc, #448]	; (800cc90 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cace:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cad0:	e010      	b.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cad2:	4b6d      	ldr	r3, [pc, #436]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cade:	d106      	bne.n	800caee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cae6:	d102      	bne.n	800caee <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cae8:	4b6a      	ldr	r3, [pc, #424]	; (800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800caea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caec:	e002      	b.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800caf2:	e122      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800caf4:	e121      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cafa:	e11e      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cafc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb00:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cb04:	430b      	orrs	r3, r1
 800cb06:	d133      	bne.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cb08:	4b5f      	ldr	r3, [pc, #380]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb10:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d004      	beq.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb1e:	d012      	beq.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cb20:	e023      	b.n	800cb6a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb22:	4b59      	ldr	r3, [pc, #356]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb2e:	d107      	bne.n	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb34:	4618      	mov	r0, r3
 800cb36:	f000 fbc7 	bl	800d2c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb3e:	e0fc      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb40:	2300      	movs	r3, #0
 800cb42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb44:	e0f9      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb46:	4b50      	ldr	r3, [pc, #320]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb52:	d107      	bne.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb54:	f107 0318 	add.w	r3, r7, #24
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f000 f90d 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cb5e:	6a3b      	ldr	r3, [r7, #32]
 800cb60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb62:	e0ea      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb64:	2300      	movs	r3, #0
 800cb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb68:	e0e7      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb6e:	e0e4      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cb70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb74:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cb78:	430b      	orrs	r3, r1
 800cb7a:	f040 808d 	bne.w	800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cb7e:	4b42      	ldr	r3, [pc, #264]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb82:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cb86:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb8e:	d06b      	beq.n	800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb96:	d874      	bhi.n	800cc82 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb9e:	d056      	beq.n	800cc4e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cba6:	d86c      	bhi.n	800cc82 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cbae:	d03b      	beq.n	800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cbb6:	d864      	bhi.n	800cc82 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbbe:	d021      	beq.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbc6:	d85c      	bhi.n	800cc82 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d004      	beq.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbd4:	d004      	beq.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cbd6:	e054      	b.n	800cc82 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cbd8:	f000 f8b8 	bl	800cd4c <HAL_RCCEx_GetD3PCLK1Freq>
 800cbdc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbde:	e0ac      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbe0:	4b29      	ldr	r3, [pc, #164]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbec:	d107      	bne.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbee:	f107 0318 	add.w	r3, r7, #24
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 f8c0 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbfc:	e09d      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc02:	e09a      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc04:	4b20      	ldr	r3, [pc, #128]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc10:	d107      	bne.n	800cc22 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc12:	f107 030c 	add.w	r3, r7, #12
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 fa02 	bl	800d020 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc20:	e08b      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc26:	e088      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc28:	4b17      	ldr	r3, [pc, #92]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f003 0304 	and.w	r3, r3, #4
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d109      	bne.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc34:	4b14      	ldr	r3, [pc, #80]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	08db      	lsrs	r3, r3, #3
 800cc3a:	f003 0303 	and.w	r3, r3, #3
 800cc3e:	4a13      	ldr	r2, [pc, #76]	; (800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cc40:	fa22 f303 	lsr.w	r3, r2, r3
 800cc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc46:	e078      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc4c:	e075      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc4e:	4b0e      	ldr	r3, [pc, #56]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc5a:	d102      	bne.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cc5c:	4b0c      	ldr	r3, [pc, #48]	; (800cc90 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc60:	e06b      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc66:	e068      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc68:	4b07      	ldr	r3, [pc, #28]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc74:	d102      	bne.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cc76:	4b07      	ldr	r3, [pc, #28]	; (800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cc78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc7a:	e05e      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc80:	e05b      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc86:	e058      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc88:	58024400 	.word	0x58024400
 800cc8c:	03d09000 	.word	0x03d09000
 800cc90:	003d0900 	.word	0x003d0900
 800cc94:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cc98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc9c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cca0:	430b      	orrs	r3, r1
 800cca2:	d148      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cca4:	4b27      	ldr	r3, [pc, #156]	; (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ccae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccb4:	d02a      	beq.n	800cd0c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ccb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccbc:	d838      	bhi.n	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ccbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d004      	beq.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccca:	d00d      	beq.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cccc:	e030      	b.n	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ccce:	4b1d      	ldr	r3, [pc, #116]	; (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccda:	d102      	bne.n	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ccdc:	4b1a      	ldr	r3, [pc, #104]	; (800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ccde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cce0:	e02b      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce6:	e028      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cce8:	4b16      	ldr	r3, [pc, #88]	; (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccf4:	d107      	bne.n	800cd06 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f000 fae4 	bl	800d2c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd04:	e019      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd06:	2300      	movs	r3, #0
 800cd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd0a:	e016      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd0c:	4b0d      	ldr	r3, [pc, #52]	; (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd18:	d107      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd1a:	f107 0318 	add.w	r3, r7, #24
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 f82a 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd28:	e007      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd2e:	e004      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd34:	e001      	b.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cd36:	2300      	movs	r3, #0
 800cd38:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3740      	adds	r7, #64	; 0x40
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	58024400 	.word	0x58024400
 800cd48:	017d7840 	.word	0x017d7840

0800cd4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cd50:	f7fd ffd4 	bl	800acfc <HAL_RCC_GetHCLKFreq>
 800cd54:	4602      	mov	r2, r0
 800cd56:	4b06      	ldr	r3, [pc, #24]	; (800cd70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cd58:	6a1b      	ldr	r3, [r3, #32]
 800cd5a:	091b      	lsrs	r3, r3, #4
 800cd5c:	f003 0307 	and.w	r3, r3, #7
 800cd60:	4904      	ldr	r1, [pc, #16]	; (800cd74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cd62:	5ccb      	ldrb	r3, [r1, r3]
 800cd64:	f003 031f 	and.w	r3, r3, #31
 800cd68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	58024400 	.word	0x58024400
 800cd74:	080177d0 	.word	0x080177d0

0800cd78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b089      	sub	sp, #36	; 0x24
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd80:	4ba1      	ldr	r3, [pc, #644]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd84:	f003 0303 	and.w	r3, r3, #3
 800cd88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cd8a:	4b9f      	ldr	r3, [pc, #636]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd8e:	0b1b      	lsrs	r3, r3, #12
 800cd90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cd96:	4b9c      	ldr	r3, [pc, #624]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9a:	091b      	lsrs	r3, r3, #4
 800cd9c:	f003 0301 	and.w	r3, r3, #1
 800cda0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cda2:	4b99      	ldr	r3, [pc, #612]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cda6:	08db      	lsrs	r3, r3, #3
 800cda8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cdac:	693a      	ldr	r2, [r7, #16]
 800cdae:	fb02 f303 	mul.w	r3, r2, r3
 800cdb2:	ee07 3a90 	vmov	s15, r3
 800cdb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f000 8111 	beq.w	800cfe8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	f000 8083 	beq.w	800ced4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	2b02      	cmp	r3, #2
 800cdd2:	f200 80a1 	bhi.w	800cf18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d003      	beq.n	800cde4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d056      	beq.n	800ce90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cde2:	e099      	b.n	800cf18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cde4:	4b88      	ldr	r3, [pc, #544]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f003 0320 	and.w	r3, r3, #32
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d02d      	beq.n	800ce4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdf0:	4b85      	ldr	r3, [pc, #532]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	08db      	lsrs	r3, r3, #3
 800cdf6:	f003 0303 	and.w	r3, r3, #3
 800cdfa:	4a84      	ldr	r2, [pc, #528]	; (800d00c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cdfc:	fa22 f303 	lsr.w	r3, r2, r3
 800ce00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	ee07 3a90 	vmov	s15, r3
 800ce08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	ee07 3a90 	vmov	s15, r3
 800ce12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce1a:	4b7b      	ldr	r3, [pc, #492]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce22:	ee07 3a90 	vmov	s15, r3
 800ce26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce4a:	e087      	b.n	800cf5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	ee07 3a90 	vmov	s15, r3
 800ce52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ce5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce5e:	4b6a      	ldr	r3, [pc, #424]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce66:	ee07 3a90 	vmov	s15, r3
 800ce6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce72:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce8e:	e065      	b.n	800cf5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	ee07 3a90 	vmov	s15, r3
 800ce96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ce9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cea2:	4b59      	ldr	r3, [pc, #356]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceaa:	ee07 3a90 	vmov	s15, r3
 800ceae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ceba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ced2:	e043      	b.n	800cf5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	ee07 3a90 	vmov	s15, r3
 800ceda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cede:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d01c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cee6:	4b48      	ldr	r3, [pc, #288]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceee:	ee07 3a90 	vmov	s15, r3
 800cef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cefa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cefe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf16:	e021      	b.n	800cf5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	ee07 3a90 	vmov	s15, r3
 800cf1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d018 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cf26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf2a:	4b37      	ldr	r3, [pc, #220]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf32:	ee07 3a90 	vmov	s15, r3
 800cf36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cf5c:	4b2a      	ldr	r3, [pc, #168]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf60:	0a5b      	lsrs	r3, r3, #9
 800cf62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf66:	ee07 3a90 	vmov	s15, r3
 800cf6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf76:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf82:	ee17 2a90 	vmov	r2, s15
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cf8a:	4b1f      	ldr	r3, [pc, #124]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8e:	0c1b      	lsrs	r3, r3, #16
 800cf90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf94:	ee07 3a90 	vmov	s15, r3
 800cf98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfa4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfb0:	ee17 2a90 	vmov	r2, s15
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cfb8:	4b13      	ldr	r3, [pc, #76]	; (800d008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfbc:	0e1b      	lsrs	r3, r3, #24
 800cfbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfc2:	ee07 3a90 	vmov	s15, r3
 800cfc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfde:	ee17 2a90 	vmov	r2, s15
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cfe6:	e008      	b.n	800cffa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	609a      	str	r2, [r3, #8]
}
 800cffa:	bf00      	nop
 800cffc:	3724      	adds	r7, #36	; 0x24
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	58024400 	.word	0x58024400
 800d00c:	03d09000 	.word	0x03d09000
 800d010:	46000000 	.word	0x46000000
 800d014:	4c742400 	.word	0x4c742400
 800d018:	4a742400 	.word	0x4a742400
 800d01c:	4bbebc20 	.word	0x4bbebc20

0800d020 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d020:	b480      	push	{r7}
 800d022:	b089      	sub	sp, #36	; 0x24
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d028:	4ba1      	ldr	r3, [pc, #644]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d02c:	f003 0303 	and.w	r3, r3, #3
 800d030:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d032:	4b9f      	ldr	r3, [pc, #636]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d036:	0d1b      	lsrs	r3, r3, #20
 800d038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d03c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d03e:	4b9c      	ldr	r3, [pc, #624]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d042:	0a1b      	lsrs	r3, r3, #8
 800d044:	f003 0301 	and.w	r3, r3, #1
 800d048:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d04a:	4b99      	ldr	r3, [pc, #612]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d04e:	08db      	lsrs	r3, r3, #3
 800d050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d054:	693a      	ldr	r2, [r7, #16]
 800d056:	fb02 f303 	mul.w	r3, r2, r3
 800d05a:	ee07 3a90 	vmov	s15, r3
 800d05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d062:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f000 8111 	beq.w	800d290 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	2b02      	cmp	r3, #2
 800d072:	f000 8083 	beq.w	800d17c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	2b02      	cmp	r3, #2
 800d07a:	f200 80a1 	bhi.w	800d1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d003      	beq.n	800d08c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	2b01      	cmp	r3, #1
 800d088:	d056      	beq.n	800d138 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d08a:	e099      	b.n	800d1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d08c:	4b88      	ldr	r3, [pc, #544]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f003 0320 	and.w	r3, r3, #32
 800d094:	2b00      	cmp	r3, #0
 800d096:	d02d      	beq.n	800d0f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d098:	4b85      	ldr	r3, [pc, #532]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	08db      	lsrs	r3, r3, #3
 800d09e:	f003 0303 	and.w	r3, r3, #3
 800d0a2:	4a84      	ldr	r2, [pc, #528]	; (800d2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d0a4:	fa22 f303 	lsr.w	r3, r2, r3
 800d0a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	ee07 3a90 	vmov	s15, r3
 800d0b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	ee07 3a90 	vmov	s15, r3
 800d0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0c2:	4b7b      	ldr	r3, [pc, #492]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ca:	ee07 3a90 	vmov	s15, r3
 800d0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0f2:	e087      	b.n	800d204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	ee07 3a90 	vmov	s15, r3
 800d0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d106:	4b6a      	ldr	r3, [pc, #424]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d10e:	ee07 3a90 	vmov	s15, r3
 800d112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d116:	ed97 6a03 	vldr	s12, [r7, #12]
 800d11a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d136:	e065      	b.n	800d204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	ee07 3a90 	vmov	s15, r3
 800d13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d142:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d14a:	4b59      	ldr	r3, [pc, #356]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d152:	ee07 3a90 	vmov	s15, r3
 800d156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d15e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d16a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d17a:	e043      	b.n	800d204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	ee07 3a90 	vmov	s15, r3
 800d182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d186:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d18e:	4b48      	ldr	r3, [pc, #288]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d196:	ee07 3a90 	vmov	s15, r3
 800d19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1be:	e021      	b.n	800d204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	ee07 3a90 	vmov	s15, r3
 800d1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1d2:	4b37      	ldr	r3, [pc, #220]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1da:	ee07 3a90 	vmov	s15, r3
 800d1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d202:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d204:	4b2a      	ldr	r3, [pc, #168]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d208:	0a5b      	lsrs	r3, r3, #9
 800d20a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d20e:	ee07 3a90 	vmov	s15, r3
 800d212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d216:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d21a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d21e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d22a:	ee17 2a90 	vmov	r2, s15
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d232:	4b1f      	ldr	r3, [pc, #124]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d236:	0c1b      	lsrs	r3, r3, #16
 800d238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d23c:	ee07 3a90 	vmov	s15, r3
 800d240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d24c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d258:	ee17 2a90 	vmov	r2, s15
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d260:	4b13      	ldr	r3, [pc, #76]	; (800d2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d264:	0e1b      	lsrs	r3, r3, #24
 800d266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d26a:	ee07 3a90 	vmov	s15, r3
 800d26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d27a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d286:	ee17 2a90 	vmov	r2, s15
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d28e:	e008      	b.n	800d2a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	609a      	str	r2, [r3, #8]
}
 800d2a2:	bf00      	nop
 800d2a4:	3724      	adds	r7, #36	; 0x24
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr
 800d2ae:	bf00      	nop
 800d2b0:	58024400 	.word	0x58024400
 800d2b4:	03d09000 	.word	0x03d09000
 800d2b8:	46000000 	.word	0x46000000
 800d2bc:	4c742400 	.word	0x4c742400
 800d2c0:	4a742400 	.word	0x4a742400
 800d2c4:	4bbebc20 	.word	0x4bbebc20

0800d2c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b089      	sub	sp, #36	; 0x24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2d0:	4ba0      	ldr	r3, [pc, #640]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2d4:	f003 0303 	and.w	r3, r3, #3
 800d2d8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d2da:	4b9e      	ldr	r3, [pc, #632]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2de:	091b      	lsrs	r3, r3, #4
 800d2e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2e4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d2e6:	4b9b      	ldr	r3, [pc, #620]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ea:	f003 0301 	and.w	r3, r3, #1
 800d2ee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d2f0:	4b98      	ldr	r3, [pc, #608]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f4:	08db      	lsrs	r3, r3, #3
 800d2f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2fa:	693a      	ldr	r2, [r7, #16]
 800d2fc:	fb02 f303 	mul.w	r3, r2, r3
 800d300:	ee07 3a90 	vmov	s15, r3
 800d304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d308:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 8111 	beq.w	800d536 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	2b02      	cmp	r3, #2
 800d318:	f000 8083 	beq.w	800d422 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d31c:	69bb      	ldr	r3, [r7, #24]
 800d31e:	2b02      	cmp	r3, #2
 800d320:	f200 80a1 	bhi.w	800d466 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d056      	beq.n	800d3de <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d330:	e099      	b.n	800d466 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d332:	4b88      	ldr	r3, [pc, #544]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f003 0320 	and.w	r3, r3, #32
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d02d      	beq.n	800d39a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d33e:	4b85      	ldr	r3, [pc, #532]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	08db      	lsrs	r3, r3, #3
 800d344:	f003 0303 	and.w	r3, r3, #3
 800d348:	4a83      	ldr	r2, [pc, #524]	; (800d558 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d34a:	fa22 f303 	lsr.w	r3, r2, r3
 800d34e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	ee07 3a90 	vmov	s15, r3
 800d356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	ee07 3a90 	vmov	s15, r3
 800d360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d368:	4b7a      	ldr	r3, [pc, #488]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d36c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d370:	ee07 3a90 	vmov	s15, r3
 800d374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d378:	ed97 6a03 	vldr	s12, [r7, #12]
 800d37c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d55c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d388:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d38c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d390:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d394:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d398:	e087      	b.n	800d4aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	ee07 3a90 	vmov	s15, r3
 800d3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d560 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d3a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ac:	4b69      	ldr	r3, [pc, #420]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b4:	ee07 3a90 	vmov	s15, r3
 800d3b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d55c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d3c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3dc:	e065      	b.n	800d4aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	ee07 3a90 	vmov	s15, r3
 800d3e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d564 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d3ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3f0:	4b58      	ldr	r3, [pc, #352]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3f8:	ee07 3a90 	vmov	s15, r3
 800d3fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d400:	ed97 6a03 	vldr	s12, [r7, #12]
 800d404:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d55c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d408:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d40c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d410:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d41c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d420:	e043      	b.n	800d4aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	ee07 3a90 	vmov	s15, r3
 800d428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d42c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d568 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d434:	4b47      	ldr	r3, [pc, #284]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d43c:	ee07 3a90 	vmov	s15, r3
 800d440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d444:	ed97 6a03 	vldr	s12, [r7, #12]
 800d448:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d55c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d44c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d450:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d454:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d45c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d460:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d464:	e021      	b.n	800d4aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	ee07 3a90 	vmov	s15, r3
 800d46c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d470:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d560 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d478:	4b36      	ldr	r3, [pc, #216]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d480:	ee07 3a90 	vmov	s15, r3
 800d484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d488:	ed97 6a03 	vldr	s12, [r7, #12]
 800d48c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d55c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d490:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d49c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d4aa:	4b2a      	ldr	r3, [pc, #168]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ae:	0a5b      	lsrs	r3, r3, #9
 800d4b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4b4:	ee07 3a90 	vmov	s15, r3
 800d4b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4d0:	ee17 2a90 	vmov	r2, s15
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d4d8:	4b1e      	ldr	r3, [pc, #120]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4dc:	0c1b      	lsrs	r3, r3, #16
 800d4de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4e2:	ee07 3a90 	vmov	s15, r3
 800d4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4fe:	ee17 2a90 	vmov	r2, s15
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d506:	4b13      	ldr	r3, [pc, #76]	; (800d554 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d50a:	0e1b      	lsrs	r3, r3, #24
 800d50c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d510:	ee07 3a90 	vmov	s15, r3
 800d514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d51c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d520:	edd7 6a07 	vldr	s13, [r7, #28]
 800d524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d52c:	ee17 2a90 	vmov	r2, s15
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d534:	e008      	b.n	800d548 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	609a      	str	r2, [r3, #8]
}
 800d548:	bf00      	nop
 800d54a:	3724      	adds	r7, #36	; 0x24
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr
 800d554:	58024400 	.word	0x58024400
 800d558:	03d09000 	.word	0x03d09000
 800d55c:	46000000 	.word	0x46000000
 800d560:	4c742400 	.word	0x4c742400
 800d564:	4a742400 	.word	0x4a742400
 800d568:	4bbebc20 	.word	0x4bbebc20

0800d56c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d57a:	4b53      	ldr	r3, [pc, #332]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57e:	f003 0303 	and.w	r3, r3, #3
 800d582:	2b03      	cmp	r3, #3
 800d584:	d101      	bne.n	800d58a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e099      	b.n	800d6be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d58a:	4b4f      	ldr	r3, [pc, #316]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4a4e      	ldr	r2, [pc, #312]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d590:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d596:	f7f6 fc53 	bl	8003e40 <HAL_GetTick>
 800d59a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d59c:	e008      	b.n	800d5b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d59e:	f7f6 fc4f 	bl	8003e40 <HAL_GetTick>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	d901      	bls.n	800d5b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d5ac:	2303      	movs	r3, #3
 800d5ae:	e086      	b.n	800d6be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d5b0:	4b45      	ldr	r3, [pc, #276]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d1f0      	bne.n	800d59e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d5bc:	4b42      	ldr	r3, [pc, #264]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	031b      	lsls	r3, r3, #12
 800d5ca:	493f      	ldr	r1, [pc, #252]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	628b      	str	r3, [r1, #40]	; 0x28
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	3b01      	subs	r3, #1
 800d5d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	3b01      	subs	r3, #1
 800d5e0:	025b      	lsls	r3, r3, #9
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	431a      	orrs	r2, r3
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	041b      	lsls	r3, r3, #16
 800d5ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d5f2:	431a      	orrs	r2, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	061b      	lsls	r3, r3, #24
 800d5fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d600:	4931      	ldr	r1, [pc, #196]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d602:	4313      	orrs	r3, r2
 800d604:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d606:	4b30      	ldr	r3, [pc, #192]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	695b      	ldr	r3, [r3, #20]
 800d612:	492d      	ldr	r1, [pc, #180]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d614:	4313      	orrs	r3, r2
 800d616:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d618:	4b2b      	ldr	r3, [pc, #172]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61c:	f023 0220 	bic.w	r2, r3, #32
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	699b      	ldr	r3, [r3, #24]
 800d624:	4928      	ldr	r1, [pc, #160]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d626:	4313      	orrs	r3, r2
 800d628:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d62a:	4b27      	ldr	r3, [pc, #156]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62e:	4a26      	ldr	r2, [pc, #152]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d630:	f023 0310 	bic.w	r3, r3, #16
 800d634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d636:	4b24      	ldr	r3, [pc, #144]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d63a:	4b24      	ldr	r3, [pc, #144]	; (800d6cc <RCCEx_PLL2_Config+0x160>)
 800d63c:	4013      	ands	r3, r2
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	69d2      	ldr	r2, [r2, #28]
 800d642:	00d2      	lsls	r2, r2, #3
 800d644:	4920      	ldr	r1, [pc, #128]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d646:	4313      	orrs	r3, r2
 800d648:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d64a:	4b1f      	ldr	r3, [pc, #124]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64e:	4a1e      	ldr	r2, [pc, #120]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d650:	f043 0310 	orr.w	r3, r3, #16
 800d654:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d106      	bne.n	800d66a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d65c:	4b1a      	ldr	r3, [pc, #104]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d660:	4a19      	ldr	r2, [pc, #100]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d666:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d668:	e00f      	b.n	800d68a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d106      	bne.n	800d67e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d670:	4b15      	ldr	r3, [pc, #84]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d674:	4a14      	ldr	r2, [pc, #80]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d67a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d67c:	e005      	b.n	800d68a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d67e:	4b12      	ldr	r3, [pc, #72]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d682:	4a11      	ldr	r2, [pc, #68]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d688:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d68a:	4b0f      	ldr	r3, [pc, #60]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a0e      	ldr	r2, [pc, #56]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d690:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d696:	f7f6 fbd3 	bl	8003e40 <HAL_GetTick>
 800d69a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d69c:	e008      	b.n	800d6b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d69e:	f7f6 fbcf 	bl	8003e40 <HAL_GetTick>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	1ad3      	subs	r3, r2, r3
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	d901      	bls.n	800d6b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d6ac:	2303      	movs	r3, #3
 800d6ae:	e006      	b.n	800d6be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d6b0:	4b05      	ldr	r3, [pc, #20]	; (800d6c8 <RCCEx_PLL2_Config+0x15c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d0f0      	beq.n	800d69e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3710      	adds	r7, #16
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	58024400 	.word	0x58024400
 800d6cc:	ffff0007 	.word	0xffff0007

0800d6d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d6de:	4b53      	ldr	r3, [pc, #332]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e2:	f003 0303 	and.w	r3, r3, #3
 800d6e6:	2b03      	cmp	r3, #3
 800d6e8:	d101      	bne.n	800d6ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e099      	b.n	800d822 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d6ee:	4b4f      	ldr	r3, [pc, #316]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a4e      	ldr	r2, [pc, #312]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d6f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6fa:	f7f6 fba1 	bl	8003e40 <HAL_GetTick>
 800d6fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d700:	e008      	b.n	800d714 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d702:	f7f6 fb9d 	bl	8003e40 <HAL_GetTick>
 800d706:	4602      	mov	r2, r0
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d901      	bls.n	800d714 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d710:	2303      	movs	r3, #3
 800d712:	e086      	b.n	800d822 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d714:	4b45      	ldr	r3, [pc, #276]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1f0      	bne.n	800d702 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d720:	4b42      	ldr	r3, [pc, #264]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d724:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	051b      	lsls	r3, r3, #20
 800d72e:	493f      	ldr	r1, [pc, #252]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d730:	4313      	orrs	r3, r2
 800d732:	628b      	str	r3, [r1, #40]	; 0x28
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	3b01      	subs	r3, #1
 800d73a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	3b01      	subs	r3, #1
 800d744:	025b      	lsls	r3, r3, #9
 800d746:	b29b      	uxth	r3, r3
 800d748:	431a      	orrs	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	3b01      	subs	r3, #1
 800d750:	041b      	lsls	r3, r3, #16
 800d752:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d756:	431a      	orrs	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	691b      	ldr	r3, [r3, #16]
 800d75c:	3b01      	subs	r3, #1
 800d75e:	061b      	lsls	r3, r3, #24
 800d760:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d764:	4931      	ldr	r1, [pc, #196]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d766:	4313      	orrs	r3, r2
 800d768:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d76a:	4b30      	ldr	r3, [pc, #192]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	695b      	ldr	r3, [r3, #20]
 800d776:	492d      	ldr	r1, [pc, #180]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d778:	4313      	orrs	r3, r2
 800d77a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d77c:	4b2b      	ldr	r3, [pc, #172]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d780:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	699b      	ldr	r3, [r3, #24]
 800d788:	4928      	ldr	r1, [pc, #160]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d78a:	4313      	orrs	r3, r2
 800d78c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d78e:	4b27      	ldr	r3, [pc, #156]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d792:	4a26      	ldr	r2, [pc, #152]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d79a:	4b24      	ldr	r3, [pc, #144]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d79c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d79e:	4b24      	ldr	r3, [pc, #144]	; (800d830 <RCCEx_PLL3_Config+0x160>)
 800d7a0:	4013      	ands	r3, r2
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	69d2      	ldr	r2, [r2, #28]
 800d7a6:	00d2      	lsls	r2, r2, #3
 800d7a8:	4920      	ldr	r1, [pc, #128]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d7ae:	4b1f      	ldr	r3, [pc, #124]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b2:	4a1e      	ldr	r2, [pc, #120]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d7b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d106      	bne.n	800d7ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d7c0:	4b1a      	ldr	r3, [pc, #104]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c4:	4a19      	ldr	r2, [pc, #100]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d7c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d7ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7cc:	e00f      	b.n	800d7ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d106      	bne.n	800d7e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d7d4:	4b15      	ldr	r3, [pc, #84]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d8:	4a14      	ldr	r2, [pc, #80]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d7da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d7de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7e0:	e005      	b.n	800d7ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d7e2:	4b12      	ldr	r3, [pc, #72]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e6:	4a11      	ldr	r2, [pc, #68]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d7e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d7ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d7ee:	4b0f      	ldr	r3, [pc, #60]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a0e      	ldr	r2, [pc, #56]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d7f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7fa:	f7f6 fb21 	bl	8003e40 <HAL_GetTick>
 800d7fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d800:	e008      	b.n	800d814 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d802:	f7f6 fb1d 	bl	8003e40 <HAL_GetTick>
 800d806:	4602      	mov	r2, r0
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d901      	bls.n	800d814 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d810:	2303      	movs	r3, #3
 800d812:	e006      	b.n	800d822 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d814:	4b05      	ldr	r3, [pc, #20]	; (800d82c <RCCEx_PLL3_Config+0x15c>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d0f0      	beq.n	800d802 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d820:	7bfb      	ldrb	r3, [r7, #15]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	58024400 	.word	0x58024400
 800d830:	ffff0007 	.word	0xffff0007

0800d834 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d83c:	2301      	movs	r3, #1
 800d83e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d071      	beq.n	800d92a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d106      	bne.n	800d860 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f7f5 fd88 	bl	8003370 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2202      	movs	r2, #2
 800d864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	f003 0310 	and.w	r3, r3, #16
 800d872:	2b10      	cmp	r3, #16
 800d874:	d050      	beq.n	800d918 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	22ca      	movs	r2, #202	; 0xca
 800d87c:	625a      	str	r2, [r3, #36]	; 0x24
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2253      	movs	r2, #83	; 0x53
 800d884:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 fa4a 	bl	800dd20 <RTC_EnterInitMode>
 800d88c:	4603      	mov	r3, r0
 800d88e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d890:	7bfb      	ldrb	r3, [r7, #15]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d124      	bne.n	800d8e0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	6899      	ldr	r1, [r3, #8]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	4b24      	ldr	r3, [pc, #144]	; (800d934 <HAL_RTC_Init+0x100>)
 800d8a2:	400b      	ands	r3, r1
 800d8a4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	6899      	ldr	r1, [r3, #8]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	685a      	ldr	r2, [r3, #4]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	691b      	ldr	r3, [r3, #16]
 800d8b4:	431a      	orrs	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	699b      	ldr	r3, [r3, #24]
 800d8ba:	431a      	orrs	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	430a      	orrs	r2, r1
 800d8c2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	0419      	lsls	r1, r3, #16
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	68da      	ldr	r2, [r3, #12]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	430a      	orrs	r2, r1
 800d8d4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fa56 	bl	800dd88 <RTC_ExitInitMode>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d8e0:	7bfb      	ldrb	r3, [r7, #15]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d113      	bne.n	800d90e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f022 0203 	bic.w	r2, r2, #3
 800d8f4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	69da      	ldr	r2, [r3, #28]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	695b      	ldr	r3, [r3, #20]
 800d904:	431a      	orrs	r2, r3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	430a      	orrs	r2, r1
 800d90c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	22ff      	movs	r2, #255	; 0xff
 800d914:	625a      	str	r2, [r3, #36]	; 0x24
 800d916:	e001      	b.n	800d91c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d918:	2300      	movs	r3, #0
 800d91a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d91c:	7bfb      	ldrb	r3, [r7, #15]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d103      	bne.n	800d92a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2201      	movs	r2, #1
 800d926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3710      	adds	r7, #16
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	ff8fffbf 	.word	0xff8fffbf

0800d938 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d938:	b590      	push	{r4, r7, lr}
 800d93a:	b087      	sub	sp, #28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d101      	bne.n	800d952 <HAL_RTC_SetTime+0x1a>
 800d94e:	2302      	movs	r3, #2
 800d950:	e089      	b.n	800da66 <HAL_RTC_SetTime+0x12e>
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2201      	movs	r2, #1
 800d956:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2202      	movs	r2, #2
 800d95e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	22ca      	movs	r2, #202	; 0xca
 800d968:	625a      	str	r2, [r3, #36]	; 0x24
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2253      	movs	r2, #83	; 0x53
 800d970:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f000 f9d4 	bl	800dd20 <RTC_EnterInitMode>
 800d978:	4603      	mov	r3, r0
 800d97a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d97c:	7cfb      	ldrb	r3, [r7, #19]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d161      	bne.n	800da46 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d126      	bne.n	800d9d6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d992:	2b00      	cmp	r3, #0
 800d994:	d102      	bne.n	800d99c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	2200      	movs	r2, #0
 800d99a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f000 fa2f 	bl	800de04 <RTC_ByteToBcd2>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	785b      	ldrb	r3, [r3, #1]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f000 fa28 	bl	800de04 <RTC_ByteToBcd2>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9b8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	789b      	ldrb	r3, [r3, #2]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f000 fa20 	bl	800de04 <RTC_ByteToBcd2>
 800d9c4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9c6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	78db      	ldrb	r3, [r3, #3]
 800d9ce:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	617b      	str	r3, [r7, #20]
 800d9d4:	e018      	b.n	800da08 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d102      	bne.n	800d9ea <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	785b      	ldrb	r3, [r3, #1]
 800d9f4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d9f6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d9f8:	68ba      	ldr	r2, [r7, #8]
 800d9fa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d9fc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	78db      	ldrb	r3, [r3, #3]
 800da02:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da04:	4313      	orrs	r3, r2
 800da06:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	6979      	ldr	r1, [r7, #20]
 800da0e:	4b18      	ldr	r3, [pc, #96]	; (800da70 <HAL_RTC_SetTime+0x138>)
 800da10:	400b      	ands	r3, r1
 800da12:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	689a      	ldr	r2, [r3, #8]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800da22:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	6899      	ldr	r1, [r3, #8]
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	68da      	ldr	r2, [r3, #12]
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	431a      	orrs	r2, r3
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	430a      	orrs	r2, r1
 800da3a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800da3c:	68f8      	ldr	r0, [r7, #12]
 800da3e:	f000 f9a3 	bl	800dd88 <RTC_ExitInitMode>
 800da42:	4603      	mov	r3, r0
 800da44:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	22ff      	movs	r2, #255	; 0xff
 800da4c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800da4e:	7cfb      	ldrb	r3, [r7, #19]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d103      	bne.n	800da5c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2201      	movs	r2, #1
 800da58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2200      	movs	r2, #0
 800da60:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800da64:	7cfb      	ldrb	r3, [r7, #19]
}
 800da66:	4618      	mov	r0, r3
 800da68:	371c      	adds	r7, #28
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd90      	pop	{r4, r7, pc}
 800da6e:	bf00      	nop
 800da70:	007f7f7f 	.word	0x007f7f7f

0800da74 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b086      	sub	sp, #24
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	4b22      	ldr	r3, [pc, #136]	; (800db28 <HAL_RTC_GetTime+0xb4>)
 800daa0:	4013      	ands	r3, r2
 800daa2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	0c1b      	lsrs	r3, r3, #16
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	0a1b      	lsrs	r3, r3, #8
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dabe:	b2da      	uxtb	r2, r3
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	0d9b      	lsrs	r3, r3, #22
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	f003 0301 	and.w	r3, r3, #1
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d11a      	bne.n	800db1e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	4618      	mov	r0, r3
 800daee:	f000 f9a9 	bl	800de44 <RTC_Bcd2ToByte>
 800daf2:	4603      	mov	r3, r0
 800daf4:	461a      	mov	r2, r3
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	785b      	ldrb	r3, [r3, #1]
 800dafe:	4618      	mov	r0, r3
 800db00:	f000 f9a0 	bl	800de44 <RTC_Bcd2ToByte>
 800db04:	4603      	mov	r3, r0
 800db06:	461a      	mov	r2, r3
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	789b      	ldrb	r3, [r3, #2]
 800db10:	4618      	mov	r0, r3
 800db12:	f000 f997 	bl	800de44 <RTC_Bcd2ToByte>
 800db16:	4603      	mov	r3, r0
 800db18:	461a      	mov	r2, r3
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	007f7f7f 	.word	0x007f7f7f

0800db2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800db2c:	b590      	push	{r4, r7, lr}
 800db2e:	b087      	sub	sp, #28
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d101      	bne.n	800db46 <HAL_RTC_SetDate+0x1a>
 800db42:	2302      	movs	r3, #2
 800db44:	e073      	b.n	800dc2e <HAL_RTC_SetDate+0x102>
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2201      	movs	r2, #1
 800db4a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2202      	movs	r2, #2
 800db52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d10e      	bne.n	800db7a <HAL_RTC_SetDate+0x4e>
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	785b      	ldrb	r3, [r3, #1]
 800db60:	f003 0310 	and.w	r3, r3, #16
 800db64:	2b00      	cmp	r3, #0
 800db66:	d008      	beq.n	800db7a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	785b      	ldrb	r3, [r3, #1]
 800db6c:	f023 0310 	bic.w	r3, r3, #16
 800db70:	b2db      	uxtb	r3, r3
 800db72:	330a      	adds	r3, #10
 800db74:	b2da      	uxtb	r2, r3
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d11c      	bne.n	800dbba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	78db      	ldrb	r3, [r3, #3]
 800db84:	4618      	mov	r0, r3
 800db86:	f000 f93d 	bl	800de04 <RTC_ByteToBcd2>
 800db8a:	4603      	mov	r3, r0
 800db8c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	785b      	ldrb	r3, [r3, #1]
 800db92:	4618      	mov	r0, r3
 800db94:	f000 f936 	bl	800de04 <RTC_ByteToBcd2>
 800db98:	4603      	mov	r3, r0
 800db9a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800db9c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	789b      	ldrb	r3, [r3, #2]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f000 f92e 	bl	800de04 <RTC_ByteToBcd2>
 800dba8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dbaa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	617b      	str	r3, [r7, #20]
 800dbb8:	e00e      	b.n	800dbd8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	78db      	ldrb	r3, [r3, #3]
 800dbbe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	785b      	ldrb	r3, [r3, #1]
 800dbc4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dbc6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dbc8:	68ba      	ldr	r2, [r7, #8]
 800dbca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dbcc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	22ca      	movs	r2, #202	; 0xca
 800dbde:	625a      	str	r2, [r3, #36]	; 0x24
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2253      	movs	r2, #83	; 0x53
 800dbe6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f000 f899 	bl	800dd20 <RTC_EnterInitMode>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dbf2:	7cfb      	ldrb	r3, [r7, #19]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d10a      	bne.n	800dc0e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	6979      	ldr	r1, [r7, #20]
 800dbfe:	4b0e      	ldr	r3, [pc, #56]	; (800dc38 <HAL_RTC_SetDate+0x10c>)
 800dc00:	400b      	ands	r3, r1
 800dc02:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f000 f8bf 	bl	800dd88 <RTC_ExitInitMode>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	22ff      	movs	r2, #255	; 0xff
 800dc14:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dc16:	7cfb      	ldrb	r3, [r7, #19]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d103      	bne.n	800dc24 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2201      	movs	r2, #1
 800dc20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2200      	movs	r2, #0
 800dc28:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dc2c:	7cfb      	ldrb	r3, [r7, #19]


}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	371c      	adds	r7, #28
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd90      	pop	{r4, r7, pc}
 800dc36:	bf00      	nop
 800dc38:	00ffff3f 	.word	0x00ffff3f

0800dc3c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b086      	sub	sp, #24
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	685a      	ldr	r2, [r3, #4]
 800dc4e:	4b21      	ldr	r3, [pc, #132]	; (800dcd4 <HAL_RTC_GetDate+0x98>)
 800dc50:	4013      	ands	r3, r2
 800dc52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	0c1b      	lsrs	r3, r3, #16
 800dc58:	b2da      	uxtb	r2, r3
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	0a1b      	lsrs	r3, r3, #8
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	f003 031f 	and.w	r3, r3, #31
 800dc68:	b2da      	uxtb	r2, r3
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	0b5b      	lsrs	r3, r3, #13
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	f003 0307 	and.w	r3, r3, #7
 800dc86:	b2da      	uxtb	r2, r3
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d11a      	bne.n	800dcc8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	78db      	ldrb	r3, [r3, #3]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 f8d4 	bl	800de44 <RTC_Bcd2ToByte>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	461a      	mov	r2, r3
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	785b      	ldrb	r3, [r3, #1]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f000 f8cb 	bl	800de44 <RTC_Bcd2ToByte>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	789b      	ldrb	r3, [r3, #2]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 f8c2 	bl	800de44 <RTC_Bcd2ToByte>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3718      	adds	r7, #24
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	00ffff3f 	.word	0x00ffff3f

0800dcd8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a0d      	ldr	r2, [pc, #52]	; (800dd1c <HAL_RTC_WaitForSynchro+0x44>)
 800dce6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800dce8:	f7f6 f8aa 	bl	8003e40 <HAL_GetTick>
 800dcec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dcee:	e009      	b.n	800dd04 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dcf0:	f7f6 f8a6 	bl	8003e40 <HAL_GetTick>
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	1ad3      	subs	r3, r2, r3
 800dcfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dcfe:	d901      	bls.n	800dd04 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800dd00:	2303      	movs	r3, #3
 800dd02:	e007      	b.n	800dd14 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	f003 0320 	and.w	r3, r3, #32
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d0ee      	beq.n	800dcf0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800dd12:	2300      	movs	r3, #0
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3710      	adds	r7, #16
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	0003ff5f 	.word	0x0003ff5f

0800dd20 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d120      	bne.n	800dd7c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd42:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dd44:	f7f6 f87c 	bl	8003e40 <HAL_GetTick>
 800dd48:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd4a:	e00d      	b.n	800dd68 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dd4c:	f7f6 f878 	bl	8003e40 <HAL_GetTick>
 800dd50:	4602      	mov	r2, r0
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd5a:	d905      	bls.n	800dd68 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dd5c:	2303      	movs	r3, #3
 800dd5e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2203      	movs	r2, #3
 800dd64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	68db      	ldr	r3, [r3, #12]
 800dd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d102      	bne.n	800dd7c <RTC_EnterInitMode+0x5c>
 800dd76:	7bfb      	ldrb	r3, [r7, #15]
 800dd78:	2b03      	cmp	r3, #3
 800dd7a:	d1e7      	bne.n	800dd4c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dd7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
	...

0800dd88 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd90:	2300      	movs	r3, #0
 800dd92:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800dd94:	4b1a      	ldr	r3, [pc, #104]	; (800de00 <RTC_ExitInitMode+0x78>)
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	4a19      	ldr	r2, [pc, #100]	; (800de00 <RTC_ExitInitMode+0x78>)
 800dd9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd9e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dda0:	4b17      	ldr	r3, [pc, #92]	; (800de00 <RTC_ExitInitMode+0x78>)
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	f003 0320 	and.w	r3, r3, #32
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10c      	bne.n	800ddc6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7ff ff93 	bl	800dcd8 <HAL_RTC_WaitForSynchro>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d01e      	beq.n	800ddf6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2203      	movs	r2, #3
 800ddbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ddc0:	2303      	movs	r3, #3
 800ddc2:	73fb      	strb	r3, [r7, #15]
 800ddc4:	e017      	b.n	800ddf6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ddc6:	4b0e      	ldr	r3, [pc, #56]	; (800de00 <RTC_ExitInitMode+0x78>)
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	4a0d      	ldr	r2, [pc, #52]	; (800de00 <RTC_ExitInitMode+0x78>)
 800ddcc:	f023 0320 	bic.w	r3, r3, #32
 800ddd0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7ff ff80 	bl	800dcd8 <HAL_RTC_WaitForSynchro>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d005      	beq.n	800ddea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2203      	movs	r2, #3
 800dde2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dde6:	2303      	movs	r3, #3
 800dde8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ddea:	4b05      	ldr	r3, [pc, #20]	; (800de00 <RTC_ExitInitMode+0x78>)
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	4a04      	ldr	r2, [pc, #16]	; (800de00 <RTC_ExitInitMode+0x78>)
 800ddf0:	f043 0320 	orr.w	r3, r3, #32
 800ddf4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ddf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3710      	adds	r7, #16
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	58004000 	.word	0x58004000

0800de04 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
 800de0a:	4603      	mov	r3, r0
 800de0c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800de0e:	2300      	movs	r3, #0
 800de10:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800de12:	79fb      	ldrb	r3, [r7, #7]
 800de14:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800de16:	e005      	b.n	800de24 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	3301      	adds	r3, #1
 800de1c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800de1e:	7afb      	ldrb	r3, [r7, #11]
 800de20:	3b0a      	subs	r3, #10
 800de22:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800de24:	7afb      	ldrb	r3, [r7, #11]
 800de26:	2b09      	cmp	r3, #9
 800de28:	d8f6      	bhi.n	800de18 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	011b      	lsls	r3, r3, #4
 800de30:	b2da      	uxtb	r2, r3
 800de32:	7afb      	ldrb	r3, [r7, #11]
 800de34:	4313      	orrs	r3, r2
 800de36:	b2db      	uxtb	r3, r3
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	4603      	mov	r3, r0
 800de4c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800de4e:	79fb      	ldrb	r3, [r7, #7]
 800de50:	091b      	lsrs	r3, r3, #4
 800de52:	b2db      	uxtb	r3, r3
 800de54:	461a      	mov	r2, r3
 800de56:	0092      	lsls	r2, r2, #2
 800de58:	4413      	add	r3, r2
 800de5a:	005b      	lsls	r3, r3, #1
 800de5c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800de5e:	79fb      	ldrb	r3, [r7, #7]
 800de60:	f003 030f 	and.w	r3, r3, #15
 800de64:	b2da      	uxtb	r2, r3
 800de66:	7bfb      	ldrb	r3, [r7, #15]
 800de68:	4413      	add	r3, r2
 800de6a:	b2db      	uxtb	r3, r3
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3714      	adds	r7, #20
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr

0800de78 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d101      	bne.n	800de8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800de86:	2301      	movs	r3, #1
 800de88:	e10f      	b.n	800e0aa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4a87      	ldr	r2, [pc, #540]	; (800e0b4 <HAL_SPI_Init+0x23c>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d00f      	beq.n	800deba <HAL_SPI_Init+0x42>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4a86      	ldr	r2, [pc, #536]	; (800e0b8 <HAL_SPI_Init+0x240>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d00a      	beq.n	800deba <HAL_SPI_Init+0x42>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	4a84      	ldr	r2, [pc, #528]	; (800e0bc <HAL_SPI_Init+0x244>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d005      	beq.n	800deba <HAL_SPI_Init+0x42>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	2b0f      	cmp	r3, #15
 800deb4:	d901      	bls.n	800deba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800deb6:	2301      	movs	r3, #1
 800deb8:	e0f7      	b.n	800e0aa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f000 fc12 	bl	800e6e4 <SPI_GetPacketSize>
 800dec0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4a7b      	ldr	r2, [pc, #492]	; (800e0b4 <HAL_SPI_Init+0x23c>)
 800dec8:	4293      	cmp	r3, r2
 800deca:	d00c      	beq.n	800dee6 <HAL_SPI_Init+0x6e>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a79      	ldr	r2, [pc, #484]	; (800e0b8 <HAL_SPI_Init+0x240>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d007      	beq.n	800dee6 <HAL_SPI_Init+0x6e>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4a78      	ldr	r2, [pc, #480]	; (800e0bc <HAL_SPI_Init+0x244>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d002      	beq.n	800dee6 <HAL_SPI_Init+0x6e>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2b08      	cmp	r3, #8
 800dee4:	d811      	bhi.n	800df0a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800deea:	4a72      	ldr	r2, [pc, #456]	; (800e0b4 <HAL_SPI_Init+0x23c>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d009      	beq.n	800df04 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4a70      	ldr	r2, [pc, #448]	; (800e0b8 <HAL_SPI_Init+0x240>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d004      	beq.n	800df04 <HAL_SPI_Init+0x8c>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a6f      	ldr	r2, [pc, #444]	; (800e0bc <HAL_SPI_Init+0x244>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d104      	bne.n	800df0e <HAL_SPI_Init+0x96>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2b10      	cmp	r3, #16
 800df08:	d901      	bls.n	800df0e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800df0a:	2301      	movs	r3, #1
 800df0c:	e0cd      	b.n	800e0aa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df14:	b2db      	uxtb	r3, r3
 800df16:	2b00      	cmp	r3, #0
 800df18:	d106      	bne.n	800df28 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2200      	movs	r2, #0
 800df1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7f5 fa58 	bl	80033d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2202      	movs	r2, #2
 800df2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	681a      	ldr	r2, [r3, #0]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f022 0201 	bic.w	r2, r2, #1
 800df3e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800df4a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	699b      	ldr	r3, [r3, #24]
 800df50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800df54:	d119      	bne.n	800df8a <HAL_SPI_Init+0x112>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df5e:	d103      	bne.n	800df68 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df64:	2b00      	cmp	r3, #0
 800df66:	d008      	beq.n	800df7a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d10c      	bne.n	800df8a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800df74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df78:	d107      	bne.n	800df8a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800df88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00f      	beq.n	800dfb6 <HAL_SPI_Init+0x13e>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	2b06      	cmp	r3, #6
 800df9c:	d90b      	bls.n	800dfb6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	430a      	orrs	r2, r1
 800dfb2:	601a      	str	r2, [r3, #0]
 800dfb4:	e007      	b.n	800dfc6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dfc4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	69da      	ldr	r2, [r3, #28]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfce:	431a      	orrs	r2, r3
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	431a      	orrs	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfd8:	ea42 0103 	orr.w	r1, r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	68da      	ldr	r2, [r3, #12]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	430a      	orrs	r2, r1
 800dfe6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff0:	431a      	orrs	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dff6:	431a      	orrs	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	699b      	ldr	r3, [r3, #24]
 800dffc:	431a      	orrs	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	691b      	ldr	r3, [r3, #16]
 800e002:	431a      	orrs	r2, r3
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	695b      	ldr	r3, [r3, #20]
 800e008:	431a      	orrs	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a1b      	ldr	r3, [r3, #32]
 800e00e:	431a      	orrs	r2, r3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	431a      	orrs	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e01a:	431a      	orrs	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	431a      	orrs	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e026:	ea42 0103 	orr.w	r1, r2, r3
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	430a      	orrs	r2, r1
 800e034:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d113      	bne.n	800e066 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e050:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e064:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f022 0201 	bic.w	r2, r2, #1
 800e074:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d00a      	beq.n	800e098 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	430a      	orrs	r2, r1
 800e096:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2200      	movs	r2, #0
 800e09c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	40013000 	.word	0x40013000
 800e0b8:	40003800 	.word	0x40003800
 800e0bc:	40003c00 	.word	0x40003c00

0800e0c0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b088      	sub	sp, #32
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	603b      	str	r3, [r7, #0]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0d4:	095b      	lsrs	r3, r3, #5
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	3301      	adds	r3, #1
 800e0da:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	3330      	adds	r3, #48	; 0x30
 800e0e2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e0e4:	f7f5 feac 	bl	8003e40 <HAL_GetTick>
 800e0e8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d001      	beq.n	800e0fa <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e0f6:	2302      	movs	r3, #2
 800e0f8:	e250      	b.n	800e59c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <HAL_SPI_Receive+0x46>
 800e100:	88fb      	ldrh	r3, [r7, #6]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d101      	bne.n	800e10a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e106:	2301      	movs	r3, #1
 800e108:	e248      	b.n	800e59c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e110:	2b01      	cmp	r3, #1
 800e112:	d101      	bne.n	800e118 <HAL_SPI_Receive+0x58>
 800e114:	2302      	movs	r3, #2
 800e116:	e241      	b.n	800e59c <HAL_SPI_Receive+0x4dc>
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2201      	movs	r2, #1
 800e11c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2204      	movs	r2, #4
 800e124:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	68ba      	ldr	r2, [r7, #8]
 800e134:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	88fa      	ldrh	r2, [r7, #6]
 800e13a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	88fa      	ldrh	r2, [r7, #6]
 800e142:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2200      	movs	r2, #0
 800e150:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2200      	movs	r2, #0
 800e160:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e170:	d108      	bne.n	800e184 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e180:	601a      	str	r2, [r3, #0]
 800e182:	e009      	b.n	800e198 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e196:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	685a      	ldr	r2, [r3, #4]
 800e19e:	4b95      	ldr	r3, [pc, #596]	; (800e3f4 <HAL_SPI_Receive+0x334>)
 800e1a0:	4013      	ands	r3, r2
 800e1a2:	88f9      	ldrh	r1, [r7, #6]
 800e1a4:	68fa      	ldr	r2, [r7, #12]
 800e1a6:	6812      	ldr	r2, [r2, #0]
 800e1a8:	430b      	orrs	r3, r1
 800e1aa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f042 0201 	orr.w	r2, r2, #1
 800e1ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1c4:	d107      	bne.n	800e1d6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	2b0f      	cmp	r3, #15
 800e1dc:	d96c      	bls.n	800e2b8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e1de:	e064      	b.n	800e2aa <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	695b      	ldr	r3, [r3, #20]
 800e1e6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	695b      	ldr	r3, [r3, #20]
 800e1ee:	f003 0301 	and.w	r3, r3, #1
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d114      	bne.n	800e220 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e200:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e206:	1d1a      	adds	r2, r3, #4
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e212:	b29b      	uxth	r3, r3
 800e214:	3b01      	subs	r3, #1
 800e216:	b29a      	uxth	r2, r3
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e21e:	e044      	b.n	800e2aa <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e226:	b29b      	uxth	r3, r3
 800e228:	8bfa      	ldrh	r2, [r7, #30]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d919      	bls.n	800e262 <HAL_SPI_Receive+0x1a2>
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e234:	2b00      	cmp	r3, #0
 800e236:	d014      	beq.n	800e262 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e240:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e242:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e248:	1d1a      	adds	r2, r3, #4
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e254:	b29b      	uxth	r3, r3
 800e256:	3b01      	subs	r3, #1
 800e258:	b29a      	uxth	r2, r3
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e260:	e023      	b.n	800e2aa <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e262:	f7f5 fded 	bl	8003e40 <HAL_GetTick>
 800e266:	4602      	mov	r2, r0
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	683a      	ldr	r2, [r7, #0]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d803      	bhi.n	800e27a <HAL_SPI_Receive+0x1ba>
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e278:	d102      	bne.n	800e280 <HAL_SPI_Receive+0x1c0>
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d114      	bne.n	800e2aa <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f000 f98f 	bl	800e5a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e28c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2201      	movs	r2, #1
 800e29a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e2a6:	2303      	movs	r3, #3
 800e2a8:	e178      	b.n	800e59c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d194      	bne.n	800e1e0 <HAL_SPI_Receive+0x120>
 800e2b6:	e15e      	b.n	800e576 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	2b07      	cmp	r3, #7
 800e2be:	f240 8153 	bls.w	800e568 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e2c2:	e08f      	b.n	800e3e4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	695b      	ldr	r3, [r3, #20]
 800e2ca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	695b      	ldr	r3, [r3, #20]
 800e2d2:	f003 0301 	and.w	r3, r3, #1
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d114      	bne.n	800e304 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2de:	69ba      	ldr	r2, [r7, #24]
 800e2e0:	8812      	ldrh	r2, [r2, #0]
 800e2e2:	b292      	uxth	r2, r2
 800e2e4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ea:	1c9a      	adds	r2, r3, #2
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e302:	e06f      	b.n	800e3e4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	8bfa      	ldrh	r2, [r7, #30]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d924      	bls.n	800e35c <HAL_SPI_Receive+0x29c>
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d01f      	beq.n	800e35c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e320:	69ba      	ldr	r2, [r7, #24]
 800e322:	8812      	ldrh	r2, [r2, #0]
 800e324:	b292      	uxth	r2, r2
 800e326:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e32c:	1c9a      	adds	r2, r3, #2
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e336:	69ba      	ldr	r2, [r7, #24]
 800e338:	8812      	ldrh	r2, [r2, #0]
 800e33a:	b292      	uxth	r2, r2
 800e33c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e342:	1c9a      	adds	r2, r3, #2
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e34e:	b29b      	uxth	r3, r3
 800e350:	3b02      	subs	r3, #2
 800e352:	b29a      	uxth	r2, r3
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e35a:	e043      	b.n	800e3e4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e362:	b29b      	uxth	r3, r3
 800e364:	2b01      	cmp	r3, #1
 800e366:	d119      	bne.n	800e39c <HAL_SPI_Receive+0x2dc>
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d014      	beq.n	800e39c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e376:	69ba      	ldr	r2, [r7, #24]
 800e378:	8812      	ldrh	r2, [r2, #0]
 800e37a:	b292      	uxth	r2, r2
 800e37c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e382:	1c9a      	adds	r2, r3, #2
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e38e:	b29b      	uxth	r3, r3
 800e390:	3b01      	subs	r3, #1
 800e392:	b29a      	uxth	r2, r3
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e39a:	e023      	b.n	800e3e4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e39c:	f7f5 fd50 	bl	8003e40 <HAL_GetTick>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	1ad3      	subs	r3, r2, r3
 800e3a6:	683a      	ldr	r2, [r7, #0]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d803      	bhi.n	800e3b4 <HAL_SPI_Receive+0x2f4>
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3b2:	d102      	bne.n	800e3ba <HAL_SPI_Receive+0x2fa>
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d114      	bne.n	800e3e4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f000 f8f2 	bl	800e5a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e3e0:	2303      	movs	r3, #3
 800e3e2:	e0db      	b.n	800e59c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	f47f af69 	bne.w	800e2c4 <HAL_SPI_Receive+0x204>
 800e3f2:	e0c0      	b.n	800e576 <HAL_SPI_Receive+0x4b6>
 800e3f4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	695b      	ldr	r3, [r3, #20]
 800e3fe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	695b      	ldr	r3, [r3, #20]
 800e406:	f003 0301 	and.w	r3, r3, #1
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d117      	bne.n	800e43e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e41a:	7812      	ldrb	r2, [r2, #0]
 800e41c:	b2d2      	uxtb	r2, r2
 800e41e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e424:	1c5a      	adds	r2, r3, #1
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e430:	b29b      	uxth	r3, r3
 800e432:	3b01      	subs	r3, #1
 800e434:	b29a      	uxth	r2, r3
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e43c:	e094      	b.n	800e568 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e444:	b29b      	uxth	r3, r3
 800e446:	8bfa      	ldrh	r2, [r7, #30]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d946      	bls.n	800e4da <HAL_SPI_Receive+0x41a>
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e452:	2b00      	cmp	r3, #0
 800e454:	d041      	beq.n	800e4da <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e462:	7812      	ldrb	r2, [r2, #0]
 800e464:	b2d2      	uxtb	r2, r2
 800e466:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e46c:	1c5a      	adds	r2, r3, #1
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e47e:	7812      	ldrb	r2, [r2, #0]
 800e480:	b2d2      	uxtb	r2, r2
 800e482:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e488:	1c5a      	adds	r2, r3, #1
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e49a:	7812      	ldrb	r2, [r2, #0]
 800e49c:	b2d2      	uxtb	r2, r2
 800e49e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4a4:	1c5a      	adds	r2, r3, #1
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4b6:	7812      	ldrb	r2, [r2, #0]
 800e4b8:	b2d2      	uxtb	r2, r2
 800e4ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4c0:	1c5a      	adds	r2, r3, #1
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	3b04      	subs	r3, #4
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4d8:	e046      	b.n	800e568 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	2b03      	cmp	r3, #3
 800e4e4:	d81c      	bhi.n	800e520 <HAL_SPI_Receive+0x460>
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d017      	beq.n	800e520 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4fc:	7812      	ldrb	r2, [r2, #0]
 800e4fe:	b2d2      	uxtb	r2, r2
 800e500:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e506:	1c5a      	adds	r2, r3, #1
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e512:	b29b      	uxth	r3, r3
 800e514:	3b01      	subs	r3, #1
 800e516:	b29a      	uxth	r2, r3
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e51e:	e023      	b.n	800e568 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e520:	f7f5 fc8e 	bl	8003e40 <HAL_GetTick>
 800e524:	4602      	mov	r2, r0
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	683a      	ldr	r2, [r7, #0]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d803      	bhi.n	800e538 <HAL_SPI_Receive+0x478>
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e536:	d102      	bne.n	800e53e <HAL_SPI_Receive+0x47e>
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d114      	bne.n	800e568 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e53e:	68f8      	ldr	r0, [r7, #12]
 800e540:	f000 f830 	bl	800e5a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e54a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2201      	movs	r2, #1
 800e558:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e564:	2303      	movs	r3, #3
 800e566:	e019      	b.n	800e59c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e56e:	b29b      	uxth	r3, r3
 800e570:	2b00      	cmp	r3, #0
 800e572:	f47f af41 	bne.w	800e3f8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f000 f814 	bl	800e5a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e592:	2b00      	cmp	r3, #0
 800e594:	d001      	beq.n	800e59a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e596:	2301      	movs	r3, #1
 800e598:	e000      	b.n	800e59c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e59a:	2300      	movs	r3, #0
  }
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3720      	adds	r7, #32
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	695b      	ldr	r3, [r3, #20]
 800e5b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	699a      	ldr	r2, [r3, #24]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f042 0208 	orr.w	r2, r2, #8
 800e5c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	699a      	ldr	r2, [r3, #24]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f042 0210 	orr.w	r2, r2, #16
 800e5d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f022 0201 	bic.w	r2, r2, #1
 800e5e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	6919      	ldr	r1, [r3, #16]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	4b3c      	ldr	r3, [pc, #240]	; (800e6e0 <SPI_CloseTransfer+0x13c>)
 800e5f0:	400b      	ands	r3, r1
 800e5f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	689a      	ldr	r2, [r3, #8]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e602:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	2b04      	cmp	r3, #4
 800e60e:	d014      	beq.n	800e63a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f003 0320 	and.w	r3, r3, #32
 800e616:	2b00      	cmp	r3, #0
 800e618:	d00f      	beq.n	800e63a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e620:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	699a      	ldr	r2, [r3, #24]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f042 0220 	orr.w	r2, r2, #32
 800e638:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e640:	b2db      	uxtb	r3, r3
 800e642:	2b03      	cmp	r3, #3
 800e644:	d014      	beq.n	800e670 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00f      	beq.n	800e670 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e656:	f043 0204 	orr.w	r2, r3, #4
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	699a      	ldr	r2, [r3, #24]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e66e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e676:	2b00      	cmp	r3, #0
 800e678:	d00f      	beq.n	800e69a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e680:	f043 0201 	orr.w	r2, r3, #1
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	699a      	ldr	r2, [r3, #24]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e698:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00f      	beq.n	800e6c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6aa:	f043 0208 	orr.w	r2, r3, #8
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	699a      	ldr	r2, [r3, #24]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e6d4:	bf00      	nop
 800e6d6:	3714      	adds	r7, #20
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr
 800e6e0:	fffffc90 	.word	0xfffffc90

0800e6e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6f0:	095b      	lsrs	r3, r3, #5
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	68db      	ldr	r3, [r3, #12]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	3307      	adds	r3, #7
 800e702:	08db      	lsrs	r3, r3, #3
 800e704:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3714      	adds	r7, #20
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr

0800e71a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b082      	sub	sp, #8
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d101      	bne.n	800e72c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e728:	2301      	movs	r3, #1
 800e72a:	e049      	b.n	800e7c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e732:	b2db      	uxtb	r3, r3
 800e734:	2b00      	cmp	r3, #0
 800e736:	d106      	bne.n	800e746 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2200      	movs	r2, #0
 800e73c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f7f4 feff 	bl	8003544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2202      	movs	r2, #2
 800e74a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	3304      	adds	r3, #4
 800e756:	4619      	mov	r1, r3
 800e758:	4610      	mov	r0, r2
 800e75a:	f000 fe7d 	bl	800f458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2201      	movs	r2, #1
 800e762:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2201      	movs	r2, #1
 800e76a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2201      	movs	r2, #1
 800e772:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2201      	movs	r2, #1
 800e77a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2201      	movs	r2, #1
 800e782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2201      	movs	r2, #1
 800e78a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2201      	movs	r2, #1
 800e792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2201      	movs	r2, #1
 800e79a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e7be:	2300      	movs	r3, #0
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3708      	adds	r7, #8
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b085      	sub	sp, #20
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	d001      	beq.n	800e7e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	e054      	b.n	800e88a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2202      	movs	r2, #2
 800e7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	68da      	ldr	r2, [r3, #12]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f042 0201 	orr.w	r2, r2, #1
 800e7f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a26      	ldr	r2, [pc, #152]	; (800e898 <HAL_TIM_Base_Start_IT+0xd0>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d022      	beq.n	800e848 <HAL_TIM_Base_Start_IT+0x80>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e80a:	d01d      	beq.n	800e848 <HAL_TIM_Base_Start_IT+0x80>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a22      	ldr	r2, [pc, #136]	; (800e89c <HAL_TIM_Base_Start_IT+0xd4>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d018      	beq.n	800e848 <HAL_TIM_Base_Start_IT+0x80>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a21      	ldr	r2, [pc, #132]	; (800e8a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d013      	beq.n	800e848 <HAL_TIM_Base_Start_IT+0x80>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a1f      	ldr	r2, [pc, #124]	; (800e8a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d00e      	beq.n	800e848 <HAL_TIM_Base_Start_IT+0x80>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4a1e      	ldr	r2, [pc, #120]	; (800e8a8 <HAL_TIM_Base_Start_IT+0xe0>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d009      	beq.n	800e848 <HAL_TIM_Base_Start_IT+0x80>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a1c      	ldr	r2, [pc, #112]	; (800e8ac <HAL_TIM_Base_Start_IT+0xe4>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d004      	beq.n	800e848 <HAL_TIM_Base_Start_IT+0x80>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a1b      	ldr	r2, [pc, #108]	; (800e8b0 <HAL_TIM_Base_Start_IT+0xe8>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d115      	bne.n	800e874 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	689a      	ldr	r2, [r3, #8]
 800e84e:	4b19      	ldr	r3, [pc, #100]	; (800e8b4 <HAL_TIM_Base_Start_IT+0xec>)
 800e850:	4013      	ands	r3, r2
 800e852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2b06      	cmp	r3, #6
 800e858:	d015      	beq.n	800e886 <HAL_TIM_Base_Start_IT+0xbe>
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e860:	d011      	beq.n	800e886 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f042 0201 	orr.w	r2, r2, #1
 800e870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e872:	e008      	b.n	800e886 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f042 0201 	orr.w	r2, r2, #1
 800e882:	601a      	str	r2, [r3, #0]
 800e884:	e000      	b.n	800e888 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e886:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e888:	2300      	movs	r3, #0
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3714      	adds	r7, #20
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop
 800e898:	40010000 	.word	0x40010000
 800e89c:	40000400 	.word	0x40000400
 800e8a0:	40000800 	.word	0x40000800
 800e8a4:	40000c00 	.word	0x40000c00
 800e8a8:	40010400 	.word	0x40010400
 800e8ac:	40001800 	.word	0x40001800
 800e8b0:	40014000 	.word	0x40014000
 800e8b4:	00010007 	.word	0x00010007

0800e8b8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d109      	bne.n	800e8e0 <HAL_TIM_OC_Start_IT+0x28>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	bf14      	ite	ne
 800e8d8:	2301      	movne	r3, #1
 800e8da:	2300      	moveq	r3, #0
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	e03c      	b.n	800e95a <HAL_TIM_OC_Start_IT+0xa2>
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	2b04      	cmp	r3, #4
 800e8e4:	d109      	bne.n	800e8fa <HAL_TIM_OC_Start_IT+0x42>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	2b01      	cmp	r3, #1
 800e8f0:	bf14      	ite	ne
 800e8f2:	2301      	movne	r3, #1
 800e8f4:	2300      	moveq	r3, #0
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	e02f      	b.n	800e95a <HAL_TIM_OC_Start_IT+0xa2>
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	2b08      	cmp	r3, #8
 800e8fe:	d109      	bne.n	800e914 <HAL_TIM_OC_Start_IT+0x5c>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e906:	b2db      	uxtb	r3, r3
 800e908:	2b01      	cmp	r3, #1
 800e90a:	bf14      	ite	ne
 800e90c:	2301      	movne	r3, #1
 800e90e:	2300      	moveq	r3, #0
 800e910:	b2db      	uxtb	r3, r3
 800e912:	e022      	b.n	800e95a <HAL_TIM_OC_Start_IT+0xa2>
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2b0c      	cmp	r3, #12
 800e918:	d109      	bne.n	800e92e <HAL_TIM_OC_Start_IT+0x76>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e920:	b2db      	uxtb	r3, r3
 800e922:	2b01      	cmp	r3, #1
 800e924:	bf14      	ite	ne
 800e926:	2301      	movne	r3, #1
 800e928:	2300      	moveq	r3, #0
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	e015      	b.n	800e95a <HAL_TIM_OC_Start_IT+0xa2>
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	2b10      	cmp	r3, #16
 800e932:	d109      	bne.n	800e948 <HAL_TIM_OC_Start_IT+0x90>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	bf14      	ite	ne
 800e940:	2301      	movne	r3, #1
 800e942:	2300      	moveq	r3, #0
 800e944:	b2db      	uxtb	r3, r3
 800e946:	e008      	b.n	800e95a <HAL_TIM_OC_Start_IT+0xa2>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	2b01      	cmp	r3, #1
 800e952:	bf14      	ite	ne
 800e954:	2301      	movne	r3, #1
 800e956:	2300      	moveq	r3, #0
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d001      	beq.n	800e962 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e95e:	2301      	movs	r3, #1
 800e960:	e0ec      	b.n	800eb3c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d104      	bne.n	800e972 <HAL_TIM_OC_Start_IT+0xba>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2202      	movs	r2, #2
 800e96c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e970:	e023      	b.n	800e9ba <HAL_TIM_OC_Start_IT+0x102>
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	2b04      	cmp	r3, #4
 800e976:	d104      	bne.n	800e982 <HAL_TIM_OC_Start_IT+0xca>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2202      	movs	r2, #2
 800e97c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e980:	e01b      	b.n	800e9ba <HAL_TIM_OC_Start_IT+0x102>
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	2b08      	cmp	r3, #8
 800e986:	d104      	bne.n	800e992 <HAL_TIM_OC_Start_IT+0xda>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2202      	movs	r2, #2
 800e98c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e990:	e013      	b.n	800e9ba <HAL_TIM_OC_Start_IT+0x102>
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	2b0c      	cmp	r3, #12
 800e996:	d104      	bne.n	800e9a2 <HAL_TIM_OC_Start_IT+0xea>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2202      	movs	r2, #2
 800e99c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e9a0:	e00b      	b.n	800e9ba <HAL_TIM_OC_Start_IT+0x102>
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	2b10      	cmp	r3, #16
 800e9a6:	d104      	bne.n	800e9b2 <HAL_TIM_OC_Start_IT+0xfa>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2202      	movs	r2, #2
 800e9ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e9b0:	e003      	b.n	800e9ba <HAL_TIM_OC_Start_IT+0x102>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2202      	movs	r2, #2
 800e9b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	2b0c      	cmp	r3, #12
 800e9be:	d841      	bhi.n	800ea44 <HAL_TIM_OC_Start_IT+0x18c>
 800e9c0:	a201      	add	r2, pc, #4	; (adr r2, 800e9c8 <HAL_TIM_OC_Start_IT+0x110>)
 800e9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c6:	bf00      	nop
 800e9c8:	0800e9fd 	.word	0x0800e9fd
 800e9cc:	0800ea45 	.word	0x0800ea45
 800e9d0:	0800ea45 	.word	0x0800ea45
 800e9d4:	0800ea45 	.word	0x0800ea45
 800e9d8:	0800ea0f 	.word	0x0800ea0f
 800e9dc:	0800ea45 	.word	0x0800ea45
 800e9e0:	0800ea45 	.word	0x0800ea45
 800e9e4:	0800ea45 	.word	0x0800ea45
 800e9e8:	0800ea21 	.word	0x0800ea21
 800e9ec:	0800ea45 	.word	0x0800ea45
 800e9f0:	0800ea45 	.word	0x0800ea45
 800e9f4:	0800ea45 	.word	0x0800ea45
 800e9f8:	0800ea33 	.word	0x0800ea33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	68da      	ldr	r2, [r3, #12]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f042 0202 	orr.w	r2, r2, #2
 800ea0a:	60da      	str	r2, [r3, #12]
      break;
 800ea0c:	e01d      	b.n	800ea4a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	68da      	ldr	r2, [r3, #12]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f042 0204 	orr.w	r2, r2, #4
 800ea1c:	60da      	str	r2, [r3, #12]
      break;
 800ea1e:	e014      	b.n	800ea4a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	68da      	ldr	r2, [r3, #12]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f042 0208 	orr.w	r2, r2, #8
 800ea2e:	60da      	str	r2, [r3, #12]
      break;
 800ea30:	e00b      	b.n	800ea4a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	68da      	ldr	r2, [r3, #12]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f042 0210 	orr.w	r2, r2, #16
 800ea40:	60da      	str	r2, [r3, #12]
      break;
 800ea42:	e002      	b.n	800ea4a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ea44:	2301      	movs	r3, #1
 800ea46:	73fb      	strb	r3, [r7, #15]
      break;
 800ea48:	bf00      	nop
  }

  if (status == HAL_OK)
 800ea4a:	7bfb      	ldrb	r3, [r7, #15]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d174      	bne.n	800eb3a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2201      	movs	r2, #1
 800ea56:	6839      	ldr	r1, [r7, #0]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f001 f917 	bl	800fc8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	4a38      	ldr	r2, [pc, #224]	; (800eb44 <HAL_TIM_OC_Start_IT+0x28c>)
 800ea64:	4293      	cmp	r3, r2
 800ea66:	d013      	beq.n	800ea90 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4a36      	ldr	r2, [pc, #216]	; (800eb48 <HAL_TIM_OC_Start_IT+0x290>)
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d00e      	beq.n	800ea90 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	4a35      	ldr	r2, [pc, #212]	; (800eb4c <HAL_TIM_OC_Start_IT+0x294>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d009      	beq.n	800ea90 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a33      	ldr	r2, [pc, #204]	; (800eb50 <HAL_TIM_OC_Start_IT+0x298>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d004      	beq.n	800ea90 <HAL_TIM_OC_Start_IT+0x1d8>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4a32      	ldr	r2, [pc, #200]	; (800eb54 <HAL_TIM_OC_Start_IT+0x29c>)
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d101      	bne.n	800ea94 <HAL_TIM_OC_Start_IT+0x1dc>
 800ea90:	2301      	movs	r3, #1
 800ea92:	e000      	b.n	800ea96 <HAL_TIM_OC_Start_IT+0x1de>
 800ea94:	2300      	movs	r3, #0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d007      	beq.n	800eaaa <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eaa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a25      	ldr	r2, [pc, #148]	; (800eb44 <HAL_TIM_OC_Start_IT+0x28c>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d022      	beq.n	800eafa <HAL_TIM_OC_Start_IT+0x242>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eabc:	d01d      	beq.n	800eafa <HAL_TIM_OC_Start_IT+0x242>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a25      	ldr	r2, [pc, #148]	; (800eb58 <HAL_TIM_OC_Start_IT+0x2a0>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d018      	beq.n	800eafa <HAL_TIM_OC_Start_IT+0x242>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a23      	ldr	r2, [pc, #140]	; (800eb5c <HAL_TIM_OC_Start_IT+0x2a4>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d013      	beq.n	800eafa <HAL_TIM_OC_Start_IT+0x242>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4a22      	ldr	r2, [pc, #136]	; (800eb60 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d00e      	beq.n	800eafa <HAL_TIM_OC_Start_IT+0x242>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a19      	ldr	r2, [pc, #100]	; (800eb48 <HAL_TIM_OC_Start_IT+0x290>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d009      	beq.n	800eafa <HAL_TIM_OC_Start_IT+0x242>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4a1e      	ldr	r2, [pc, #120]	; (800eb64 <HAL_TIM_OC_Start_IT+0x2ac>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d004      	beq.n	800eafa <HAL_TIM_OC_Start_IT+0x242>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4a15      	ldr	r2, [pc, #84]	; (800eb4c <HAL_TIM_OC_Start_IT+0x294>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d115      	bne.n	800eb26 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	689a      	ldr	r2, [r3, #8]
 800eb00:	4b19      	ldr	r3, [pc, #100]	; (800eb68 <HAL_TIM_OC_Start_IT+0x2b0>)
 800eb02:	4013      	ands	r3, r2
 800eb04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	2b06      	cmp	r3, #6
 800eb0a:	d015      	beq.n	800eb38 <HAL_TIM_OC_Start_IT+0x280>
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb12:	d011      	beq.n	800eb38 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f042 0201 	orr.w	r2, r2, #1
 800eb22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb24:	e008      	b.n	800eb38 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f042 0201 	orr.w	r2, r2, #1
 800eb34:	601a      	str	r2, [r3, #0]
 800eb36:	e000      	b.n	800eb3a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb38:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800eb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}
 800eb44:	40010000 	.word	0x40010000
 800eb48:	40010400 	.word	0x40010400
 800eb4c:	40014000 	.word	0x40014000
 800eb50:	40014400 	.word	0x40014400
 800eb54:	40014800 	.word	0x40014800
 800eb58:	40000400 	.word	0x40000400
 800eb5c:	40000800 	.word	0x40000800
 800eb60:	40000c00 	.word	0x40000c00
 800eb64:	40001800 	.word	0x40001800
 800eb68:	00010007 	.word	0x00010007

0800eb6c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb76:	2300      	movs	r3, #0
 800eb78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	2b0c      	cmp	r3, #12
 800eb7e:	d841      	bhi.n	800ec04 <HAL_TIM_OC_Stop_IT+0x98>
 800eb80:	a201      	add	r2, pc, #4	; (adr r2, 800eb88 <HAL_TIM_OC_Stop_IT+0x1c>)
 800eb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb86:	bf00      	nop
 800eb88:	0800ebbd 	.word	0x0800ebbd
 800eb8c:	0800ec05 	.word	0x0800ec05
 800eb90:	0800ec05 	.word	0x0800ec05
 800eb94:	0800ec05 	.word	0x0800ec05
 800eb98:	0800ebcf 	.word	0x0800ebcf
 800eb9c:	0800ec05 	.word	0x0800ec05
 800eba0:	0800ec05 	.word	0x0800ec05
 800eba4:	0800ec05 	.word	0x0800ec05
 800eba8:	0800ebe1 	.word	0x0800ebe1
 800ebac:	0800ec05 	.word	0x0800ec05
 800ebb0:	0800ec05 	.word	0x0800ec05
 800ebb4:	0800ec05 	.word	0x0800ec05
 800ebb8:	0800ebf3 	.word	0x0800ebf3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	68da      	ldr	r2, [r3, #12]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f022 0202 	bic.w	r2, r2, #2
 800ebca:	60da      	str	r2, [r3, #12]
      break;
 800ebcc:	e01d      	b.n	800ec0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68da      	ldr	r2, [r3, #12]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f022 0204 	bic.w	r2, r2, #4
 800ebdc:	60da      	str	r2, [r3, #12]
      break;
 800ebde:	e014      	b.n	800ec0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	68da      	ldr	r2, [r3, #12]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f022 0208 	bic.w	r2, r2, #8
 800ebee:	60da      	str	r2, [r3, #12]
      break;
 800ebf0:	e00b      	b.n	800ec0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	68da      	ldr	r2, [r3, #12]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f022 0210 	bic.w	r2, r2, #16
 800ec00:	60da      	str	r2, [r3, #12]
      break;
 800ec02:	e002      	b.n	800ec0a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ec04:	2301      	movs	r3, #1
 800ec06:	73fb      	strb	r3, [r7, #15]
      break;
 800ec08:	bf00      	nop
  }

  if (status == HAL_OK)
 800ec0a:	7bfb      	ldrb	r3, [r7, #15]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	f040 8081 	bne.w	800ed14 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	2200      	movs	r2, #0
 800ec18:	6839      	ldr	r1, [r7, #0]
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f001 f836 	bl	800fc8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4a3e      	ldr	r2, [pc, #248]	; (800ed20 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d013      	beq.n	800ec52 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4a3d      	ldr	r2, [pc, #244]	; (800ed24 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d00e      	beq.n	800ec52 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4a3b      	ldr	r2, [pc, #236]	; (800ed28 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d009      	beq.n	800ec52 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4a3a      	ldr	r2, [pc, #232]	; (800ed2c <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d004      	beq.n	800ec52 <HAL_TIM_OC_Stop_IT+0xe6>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4a38      	ldr	r2, [pc, #224]	; (800ed30 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d101      	bne.n	800ec56 <HAL_TIM_OC_Stop_IT+0xea>
 800ec52:	2301      	movs	r3, #1
 800ec54:	e000      	b.n	800ec58 <HAL_TIM_OC_Stop_IT+0xec>
 800ec56:	2300      	movs	r3, #0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d017      	beq.n	800ec8c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6a1a      	ldr	r2, [r3, #32]
 800ec62:	f241 1311 	movw	r3, #4369	; 0x1111
 800ec66:	4013      	ands	r3, r2
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d10f      	bne.n	800ec8c <HAL_TIM_OC_Stop_IT+0x120>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	6a1a      	ldr	r2, [r3, #32]
 800ec72:	f240 4344 	movw	r3, #1092	; 0x444
 800ec76:	4013      	ands	r3, r2
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d107      	bne.n	800ec8c <HAL_TIM_OC_Stop_IT+0x120>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec8a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	6a1a      	ldr	r2, [r3, #32]
 800ec92:	f241 1311 	movw	r3, #4369	; 0x1111
 800ec96:	4013      	ands	r3, r2
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d10f      	bne.n	800ecbc <HAL_TIM_OC_Stop_IT+0x150>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	6a1a      	ldr	r2, [r3, #32]
 800eca2:	f240 4344 	movw	r3, #1092	; 0x444
 800eca6:	4013      	ands	r3, r2
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d107      	bne.n	800ecbc <HAL_TIM_OC_Stop_IT+0x150>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	681a      	ldr	r2, [r3, #0]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f022 0201 	bic.w	r2, r2, #1
 800ecba:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d104      	bne.n	800eccc <HAL_TIM_OC_Stop_IT+0x160>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ecca:	e023      	b.n	800ed14 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	2b04      	cmp	r3, #4
 800ecd0:	d104      	bne.n	800ecdc <HAL_TIM_OC_Stop_IT+0x170>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ecda:	e01b      	b.n	800ed14 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2b08      	cmp	r3, #8
 800ece0:	d104      	bne.n	800ecec <HAL_TIM_OC_Stop_IT+0x180>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2201      	movs	r2, #1
 800ece6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ecea:	e013      	b.n	800ed14 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	2b0c      	cmp	r3, #12
 800ecf0:	d104      	bne.n	800ecfc <HAL_TIM_OC_Stop_IT+0x190>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ecfa:	e00b      	b.n	800ed14 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	2b10      	cmp	r3, #16
 800ed00:	d104      	bne.n	800ed0c <HAL_TIM_OC_Stop_IT+0x1a0>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2201      	movs	r2, #1
 800ed06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed0a:	e003      	b.n	800ed14 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ed14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3710      	adds	r7, #16
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	40010000 	.word	0x40010000
 800ed24:	40010400 	.word	0x40010400
 800ed28:	40014000 	.word	0x40014000
 800ed2c:	40014400 	.word	0x40014400
 800ed30:	40014800 	.word	0x40014800

0800ed34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d101      	bne.n	800ed46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed42:	2301      	movs	r3, #1
 800ed44:	e049      	b.n	800edda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d106      	bne.n	800ed60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2200      	movs	r2, #0
 800ed56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 f841 	bl	800ede2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2202      	movs	r2, #2
 800ed64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	3304      	adds	r3, #4
 800ed70:	4619      	mov	r1, r3
 800ed72:	4610      	mov	r0, r2
 800ed74:	f000 fb70 	bl	800f458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2201      	movs	r2, #1
 800ed94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2201      	movs	r2, #1
 800edac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800edd8:	2300      	movs	r3, #0
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3708      	adds	r7, #8
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ede2:	b480      	push	{r7}
 800ede4:	b083      	sub	sp, #12
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800edea:	bf00      	nop
 800edec:	370c      	adds	r7, #12
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b084      	sub	sp, #16
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	691b      	ldr	r3, [r3, #16]
 800ee0c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	f003 0302 	and.w	r3, r3, #2
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d020      	beq.n	800ee5a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f003 0302 	and.w	r3, r3, #2
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d01b      	beq.n	800ee5a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f06f 0202 	mvn.w	r2, #2
 800ee2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	699b      	ldr	r3, [r3, #24]
 800ee38:	f003 0303 	and.w	r3, r3, #3
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d003      	beq.n	800ee48 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f000 faeb 	bl	800f41c <HAL_TIM_IC_CaptureCallback>
 800ee46:	e005      	b.n	800ee54 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f7f1 fbd9 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 faee 	bl	800f430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2200      	movs	r2, #0
 800ee58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	f003 0304 	and.w	r3, r3, #4
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d020      	beq.n	800eea6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f003 0304 	and.w	r3, r3, #4
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d01b      	beq.n	800eea6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f06f 0204 	mvn.w	r2, #4
 800ee76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2202      	movs	r2, #2
 800ee7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	699b      	ldr	r3, [r3, #24]
 800ee84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d003      	beq.n	800ee94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 fac5 	bl	800f41c <HAL_TIM_IC_CaptureCallback>
 800ee92:	e005      	b.n	800eea0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f7f1 fbb3 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 fac8 	bl	800f430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2200      	movs	r2, #0
 800eea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	f003 0308 	and.w	r3, r3, #8
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d020      	beq.n	800eef2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f003 0308 	and.w	r3, r3, #8
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d01b      	beq.n	800eef2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f06f 0208 	mvn.w	r2, #8
 800eec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2204      	movs	r2, #4
 800eec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	69db      	ldr	r3, [r3, #28]
 800eed0:	f003 0303 	and.w	r3, r3, #3
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d003      	beq.n	800eee0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 fa9f 	bl	800f41c <HAL_TIM_IC_CaptureCallback>
 800eede:	e005      	b.n	800eeec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f7f1 fb8d 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 faa2 	bl	800f430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	f003 0310 	and.w	r3, r3, #16
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d020      	beq.n	800ef3e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f003 0310 	and.w	r3, r3, #16
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d01b      	beq.n	800ef3e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f06f 0210 	mvn.w	r2, #16
 800ef0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2208      	movs	r2, #8
 800ef14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	69db      	ldr	r3, [r3, #28]
 800ef1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d003      	beq.n	800ef2c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 fa79 	bl	800f41c <HAL_TIM_IC_CaptureCallback>
 800ef2a:	e005      	b.n	800ef38 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f7f1 fb67 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f000 fa7c 	bl	800f430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00c      	beq.n	800ef62 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f003 0301 	and.w	r3, r3, #1
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d007      	beq.n	800ef62 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f06f 0201 	mvn.w	r2, #1
 800ef5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f7f3 ffcb 	bl	8002ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d104      	bne.n	800ef76 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00c      	beq.n	800ef90 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d007      	beq.n	800ef90 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ef88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f000 ffba 	bl	800ff04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00c      	beq.n	800efb4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d007      	beq.n	800efb4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800efac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 ffb2 	bl	800ff18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00c      	beq.n	800efd8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d007      	beq.n	800efd8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800efd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 fa36 	bl	800f444 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	f003 0320 	and.w	r3, r3, #32
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d00c      	beq.n	800effc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f003 0320 	and.w	r3, r3, #32
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d007      	beq.n	800effc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f06f 0220 	mvn.w	r2, #32
 800eff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 ff7a 	bl	800fef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800effc:	bf00      	nop
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b086      	sub	sp, #24
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f010:	2300      	movs	r3, #0
 800f012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d101      	bne.n	800f022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f01e:	2302      	movs	r3, #2
 800f020:	e0ff      	b.n	800f222 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2201      	movs	r2, #1
 800f026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2b14      	cmp	r3, #20
 800f02e:	f200 80f0 	bhi.w	800f212 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f032:	a201      	add	r2, pc, #4	; (adr r2, 800f038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f038:	0800f08d 	.word	0x0800f08d
 800f03c:	0800f213 	.word	0x0800f213
 800f040:	0800f213 	.word	0x0800f213
 800f044:	0800f213 	.word	0x0800f213
 800f048:	0800f0cd 	.word	0x0800f0cd
 800f04c:	0800f213 	.word	0x0800f213
 800f050:	0800f213 	.word	0x0800f213
 800f054:	0800f213 	.word	0x0800f213
 800f058:	0800f10f 	.word	0x0800f10f
 800f05c:	0800f213 	.word	0x0800f213
 800f060:	0800f213 	.word	0x0800f213
 800f064:	0800f213 	.word	0x0800f213
 800f068:	0800f14f 	.word	0x0800f14f
 800f06c:	0800f213 	.word	0x0800f213
 800f070:	0800f213 	.word	0x0800f213
 800f074:	0800f213 	.word	0x0800f213
 800f078:	0800f191 	.word	0x0800f191
 800f07c:	0800f213 	.word	0x0800f213
 800f080:	0800f213 	.word	0x0800f213
 800f084:	0800f213 	.word	0x0800f213
 800f088:	0800f1d1 	.word	0x0800f1d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	68b9      	ldr	r1, [r7, #8]
 800f092:	4618      	mov	r0, r3
 800f094:	f000 fa86 	bl	800f5a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	699a      	ldr	r2, [r3, #24]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f042 0208 	orr.w	r2, r2, #8
 800f0a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	699a      	ldr	r2, [r3, #24]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f022 0204 	bic.w	r2, r2, #4
 800f0b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	6999      	ldr	r1, [r3, #24]
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	691a      	ldr	r2, [r3, #16]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	430a      	orrs	r2, r1
 800f0c8:	619a      	str	r2, [r3, #24]
      break;
 800f0ca:	e0a5      	b.n	800f218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68b9      	ldr	r1, [r7, #8]
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 faf6 	bl	800f6c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	699a      	ldr	r2, [r3, #24]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	699a      	ldr	r2, [r3, #24]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	6999      	ldr	r1, [r3, #24]
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	691b      	ldr	r3, [r3, #16]
 800f102:	021a      	lsls	r2, r3, #8
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	430a      	orrs	r2, r1
 800f10a:	619a      	str	r2, [r3, #24]
      break;
 800f10c:	e084      	b.n	800f218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	68b9      	ldr	r1, [r7, #8]
 800f114:	4618      	mov	r0, r3
 800f116:	f000 fb5f 	bl	800f7d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	69da      	ldr	r2, [r3, #28]
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f042 0208 	orr.w	r2, r2, #8
 800f128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	69da      	ldr	r2, [r3, #28]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f022 0204 	bic.w	r2, r2, #4
 800f138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	69d9      	ldr	r1, [r3, #28]
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	691a      	ldr	r2, [r3, #16]
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	430a      	orrs	r2, r1
 800f14a:	61da      	str	r2, [r3, #28]
      break;
 800f14c:	e064      	b.n	800f218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	68b9      	ldr	r1, [r7, #8]
 800f154:	4618      	mov	r0, r3
 800f156:	f000 fbc7 	bl	800f8e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	69da      	ldr	r2, [r3, #28]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	69da      	ldr	r2, [r3, #28]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	69d9      	ldr	r1, [r3, #28]
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	691b      	ldr	r3, [r3, #16]
 800f184:	021a      	lsls	r2, r3, #8
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	430a      	orrs	r2, r1
 800f18c:	61da      	str	r2, [r3, #28]
      break;
 800f18e:	e043      	b.n	800f218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	68b9      	ldr	r1, [r7, #8]
 800f196:	4618      	mov	r0, r3
 800f198:	f000 fc10 	bl	800f9bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f042 0208 	orr.w	r2, r2, #8
 800f1aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f022 0204 	bic.w	r2, r2, #4
 800f1ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	691a      	ldr	r2, [r3, #16]
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	430a      	orrs	r2, r1
 800f1cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f1ce:	e023      	b.n	800f218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	68b9      	ldr	r1, [r7, #8]
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f000 fc54 	bl	800fa84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	691b      	ldr	r3, [r3, #16]
 800f206:	021a      	lsls	r2, r3, #8
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	430a      	orrs	r2, r1
 800f20e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f210:	e002      	b.n	800f218 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f212:	2301      	movs	r3, #1
 800f214:	75fb      	strb	r3, [r7, #23]
      break;
 800f216:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2200      	movs	r2, #0
 800f21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f220:	7dfb      	ldrb	r3, [r7, #23]
}
 800f222:	4618      	mov	r0, r3
 800f224:	3718      	adds	r7, #24
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop

0800f22c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f236:	2300      	movs	r3, #0
 800f238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f240:	2b01      	cmp	r3, #1
 800f242:	d101      	bne.n	800f248 <HAL_TIM_ConfigClockSource+0x1c>
 800f244:	2302      	movs	r3, #2
 800f246:	e0dc      	b.n	800f402 <HAL_TIM_ConfigClockSource+0x1d6>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2201      	movs	r2, #1
 800f24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2202      	movs	r2, #2
 800f254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	4b6a      	ldr	r3, [pc, #424]	; (800f40c <HAL_TIM_ConfigClockSource+0x1e0>)
 800f264:	4013      	ands	r3, r2
 800f266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f26e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	68ba      	ldr	r2, [r7, #8]
 800f276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4a64      	ldr	r2, [pc, #400]	; (800f410 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	f000 80a9 	beq.w	800f3d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f284:	4a62      	ldr	r2, [pc, #392]	; (800f410 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f286:	4293      	cmp	r3, r2
 800f288:	f200 80ae 	bhi.w	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f28c:	4a61      	ldr	r2, [pc, #388]	; (800f414 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	f000 80a1 	beq.w	800f3d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f294:	4a5f      	ldr	r2, [pc, #380]	; (800f414 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f296:	4293      	cmp	r3, r2
 800f298:	f200 80a6 	bhi.w	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f29c:	4a5e      	ldr	r2, [pc, #376]	; (800f418 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	f000 8099 	beq.w	800f3d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f2a4:	4a5c      	ldr	r2, [pc, #368]	; (800f418 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	f200 809e 	bhi.w	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f2b0:	f000 8091 	beq.w	800f3d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f2b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f2b8:	f200 8096 	bhi.w	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2c0:	f000 8089 	beq.w	800f3d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f2c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2c8:	f200 808e 	bhi.w	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2d0:	d03e      	beq.n	800f350 <HAL_TIM_ConfigClockSource+0x124>
 800f2d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2d6:	f200 8087 	bhi.w	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2de:	f000 8086 	beq.w	800f3ee <HAL_TIM_ConfigClockSource+0x1c2>
 800f2e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2e6:	d87f      	bhi.n	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2e8:	2b70      	cmp	r3, #112	; 0x70
 800f2ea:	d01a      	beq.n	800f322 <HAL_TIM_ConfigClockSource+0xf6>
 800f2ec:	2b70      	cmp	r3, #112	; 0x70
 800f2ee:	d87b      	bhi.n	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2f0:	2b60      	cmp	r3, #96	; 0x60
 800f2f2:	d050      	beq.n	800f396 <HAL_TIM_ConfigClockSource+0x16a>
 800f2f4:	2b60      	cmp	r3, #96	; 0x60
 800f2f6:	d877      	bhi.n	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2f8:	2b50      	cmp	r3, #80	; 0x50
 800f2fa:	d03c      	beq.n	800f376 <HAL_TIM_ConfigClockSource+0x14a>
 800f2fc:	2b50      	cmp	r3, #80	; 0x50
 800f2fe:	d873      	bhi.n	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f300:	2b40      	cmp	r3, #64	; 0x40
 800f302:	d058      	beq.n	800f3b6 <HAL_TIM_ConfigClockSource+0x18a>
 800f304:	2b40      	cmp	r3, #64	; 0x40
 800f306:	d86f      	bhi.n	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f308:	2b30      	cmp	r3, #48	; 0x30
 800f30a:	d064      	beq.n	800f3d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f30c:	2b30      	cmp	r3, #48	; 0x30
 800f30e:	d86b      	bhi.n	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f310:	2b20      	cmp	r3, #32
 800f312:	d060      	beq.n	800f3d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f314:	2b20      	cmp	r3, #32
 800f316:	d867      	bhi.n	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d05c      	beq.n	800f3d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f31c:	2b10      	cmp	r3, #16
 800f31e:	d05a      	beq.n	800f3d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800f320:	e062      	b.n	800f3e8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6818      	ldr	r0, [r3, #0]
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	6899      	ldr	r1, [r3, #8]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	685a      	ldr	r2, [r3, #4]
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	68db      	ldr	r3, [r3, #12]
 800f332:	f000 fc8b 	bl	800fc4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	689b      	ldr	r3, [r3, #8]
 800f33c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	68ba      	ldr	r2, [r7, #8]
 800f34c:	609a      	str	r2, [r3, #8]
      break;
 800f34e:	e04f      	b.n	800f3f0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6818      	ldr	r0, [r3, #0]
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	6899      	ldr	r1, [r3, #8]
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	685a      	ldr	r2, [r3, #4]
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	f000 fc74 	bl	800fc4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	689a      	ldr	r2, [r3, #8]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f372:	609a      	str	r2, [r3, #8]
      break;
 800f374:	e03c      	b.n	800f3f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6818      	ldr	r0, [r3, #0]
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	6859      	ldr	r1, [r3, #4]
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	461a      	mov	r2, r3
 800f384:	f000 fbe4 	bl	800fb50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2150      	movs	r1, #80	; 0x50
 800f38e:	4618      	mov	r0, r3
 800f390:	f000 fc3e 	bl	800fc10 <TIM_ITRx_SetConfig>
      break;
 800f394:	e02c      	b.n	800f3f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6818      	ldr	r0, [r3, #0]
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	6859      	ldr	r1, [r3, #4]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	f000 fc03 	bl	800fbae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	2160      	movs	r1, #96	; 0x60
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f000 fc2e 	bl	800fc10 <TIM_ITRx_SetConfig>
      break;
 800f3b4:	e01c      	b.n	800f3f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6818      	ldr	r0, [r3, #0]
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	6859      	ldr	r1, [r3, #4]
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	f000 fbc4 	bl	800fb50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2140      	movs	r1, #64	; 0x40
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f000 fc1e 	bl	800fc10 <TIM_ITRx_SetConfig>
      break;
 800f3d4:	e00c      	b.n	800f3f0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	4619      	mov	r1, r3
 800f3e0:	4610      	mov	r0, r2
 800f3e2:	f000 fc15 	bl	800fc10 <TIM_ITRx_SetConfig>
      break;
 800f3e6:	e003      	b.n	800f3f0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	73fb      	strb	r3, [r7, #15]
      break;
 800f3ec:	e000      	b.n	800f3f0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f3ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f400:	7bfb      	ldrb	r3, [r7, #15]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	ffceff88 	.word	0xffceff88
 800f410:	00100040 	.word	0x00100040
 800f414:	00100030 	.word	0x00100030
 800f418:	00100020 	.word	0x00100020

0800f41c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f424:	bf00      	nop
 800f426:	370c      	adds	r7, #12
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr

0800f430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f438:	bf00      	nop
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f444:	b480      	push	{r7}
 800f446:	b083      	sub	sp, #12
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f44c:	bf00      	nop
 800f44e:	370c      	adds	r7, #12
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr

0800f458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f458:	b480      	push	{r7}
 800f45a:	b085      	sub	sp, #20
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4a46      	ldr	r2, [pc, #280]	; (800f584 <TIM_Base_SetConfig+0x12c>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d013      	beq.n	800f498 <TIM_Base_SetConfig+0x40>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f476:	d00f      	beq.n	800f498 <TIM_Base_SetConfig+0x40>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	4a43      	ldr	r2, [pc, #268]	; (800f588 <TIM_Base_SetConfig+0x130>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d00b      	beq.n	800f498 <TIM_Base_SetConfig+0x40>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4a42      	ldr	r2, [pc, #264]	; (800f58c <TIM_Base_SetConfig+0x134>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d007      	beq.n	800f498 <TIM_Base_SetConfig+0x40>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4a41      	ldr	r2, [pc, #260]	; (800f590 <TIM_Base_SetConfig+0x138>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d003      	beq.n	800f498 <TIM_Base_SetConfig+0x40>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4a40      	ldr	r2, [pc, #256]	; (800f594 <TIM_Base_SetConfig+0x13c>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d108      	bne.n	800f4aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f49e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	68fa      	ldr	r2, [r7, #12]
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4a35      	ldr	r2, [pc, #212]	; (800f584 <TIM_Base_SetConfig+0x12c>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d01f      	beq.n	800f4f2 <TIM_Base_SetConfig+0x9a>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4b8:	d01b      	beq.n	800f4f2 <TIM_Base_SetConfig+0x9a>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4a32      	ldr	r2, [pc, #200]	; (800f588 <TIM_Base_SetConfig+0x130>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d017      	beq.n	800f4f2 <TIM_Base_SetConfig+0x9a>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4a31      	ldr	r2, [pc, #196]	; (800f58c <TIM_Base_SetConfig+0x134>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d013      	beq.n	800f4f2 <TIM_Base_SetConfig+0x9a>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4a30      	ldr	r2, [pc, #192]	; (800f590 <TIM_Base_SetConfig+0x138>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d00f      	beq.n	800f4f2 <TIM_Base_SetConfig+0x9a>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4a2f      	ldr	r2, [pc, #188]	; (800f594 <TIM_Base_SetConfig+0x13c>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d00b      	beq.n	800f4f2 <TIM_Base_SetConfig+0x9a>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4a2e      	ldr	r2, [pc, #184]	; (800f598 <TIM_Base_SetConfig+0x140>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d007      	beq.n	800f4f2 <TIM_Base_SetConfig+0x9a>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4a2d      	ldr	r2, [pc, #180]	; (800f59c <TIM_Base_SetConfig+0x144>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d003      	beq.n	800f4f2 <TIM_Base_SetConfig+0x9a>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a2c      	ldr	r2, [pc, #176]	; (800f5a0 <TIM_Base_SetConfig+0x148>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d108      	bne.n	800f504 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	68db      	ldr	r3, [r3, #12]
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	4313      	orrs	r3, r2
 800f502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	695b      	ldr	r3, [r3, #20]
 800f50e:	4313      	orrs	r3, r2
 800f510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	68fa      	ldr	r2, [r7, #12]
 800f516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	689a      	ldr	r2, [r3, #8]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4a16      	ldr	r2, [pc, #88]	; (800f584 <TIM_Base_SetConfig+0x12c>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d00f      	beq.n	800f550 <TIM_Base_SetConfig+0xf8>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	4a18      	ldr	r2, [pc, #96]	; (800f594 <TIM_Base_SetConfig+0x13c>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d00b      	beq.n	800f550 <TIM_Base_SetConfig+0xf8>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4a17      	ldr	r2, [pc, #92]	; (800f598 <TIM_Base_SetConfig+0x140>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d007      	beq.n	800f550 <TIM_Base_SetConfig+0xf8>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4a16      	ldr	r2, [pc, #88]	; (800f59c <TIM_Base_SetConfig+0x144>)
 800f544:	4293      	cmp	r3, r2
 800f546:	d003      	beq.n	800f550 <TIM_Base_SetConfig+0xf8>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4a15      	ldr	r2, [pc, #84]	; (800f5a0 <TIM_Base_SetConfig+0x148>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d103      	bne.n	800f558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	691a      	ldr	r2, [r3, #16]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2201      	movs	r2, #1
 800f55c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	691b      	ldr	r3, [r3, #16]
 800f562:	f003 0301 	and.w	r3, r3, #1
 800f566:	2b01      	cmp	r3, #1
 800f568:	d105      	bne.n	800f576 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	691b      	ldr	r3, [r3, #16]
 800f56e:	f023 0201 	bic.w	r2, r3, #1
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	611a      	str	r2, [r3, #16]
  }
}
 800f576:	bf00      	nop
 800f578:	3714      	adds	r7, #20
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop
 800f584:	40010000 	.word	0x40010000
 800f588:	40000400 	.word	0x40000400
 800f58c:	40000800 	.word	0x40000800
 800f590:	40000c00 	.word	0x40000c00
 800f594:	40010400 	.word	0x40010400
 800f598:	40014000 	.word	0x40014000
 800f59c:	40014400 	.word	0x40014400
 800f5a0:	40014800 	.word	0x40014800

0800f5a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b087      	sub	sp, #28
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6a1b      	ldr	r3, [r3, #32]
 800f5b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6a1b      	ldr	r3, [r3, #32]
 800f5b8:	f023 0201 	bic.w	r2, r3, #1
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	699b      	ldr	r3, [r3, #24]
 800f5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	4b37      	ldr	r3, [pc, #220]	; (800f6ac <TIM_OC1_SetConfig+0x108>)
 800f5d0:	4013      	ands	r3, r2
 800f5d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f023 0303 	bic.w	r3, r3, #3
 800f5da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	f023 0302 	bic.w	r3, r3, #2
 800f5ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	689b      	ldr	r3, [r3, #8]
 800f5f2:	697a      	ldr	r2, [r7, #20]
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4a2d      	ldr	r2, [pc, #180]	; (800f6b0 <TIM_OC1_SetConfig+0x10c>)
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d00f      	beq.n	800f620 <TIM_OC1_SetConfig+0x7c>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	4a2c      	ldr	r2, [pc, #176]	; (800f6b4 <TIM_OC1_SetConfig+0x110>)
 800f604:	4293      	cmp	r3, r2
 800f606:	d00b      	beq.n	800f620 <TIM_OC1_SetConfig+0x7c>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	4a2b      	ldr	r2, [pc, #172]	; (800f6b8 <TIM_OC1_SetConfig+0x114>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d007      	beq.n	800f620 <TIM_OC1_SetConfig+0x7c>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	4a2a      	ldr	r2, [pc, #168]	; (800f6bc <TIM_OC1_SetConfig+0x118>)
 800f614:	4293      	cmp	r3, r2
 800f616:	d003      	beq.n	800f620 <TIM_OC1_SetConfig+0x7c>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a29      	ldr	r2, [pc, #164]	; (800f6c0 <TIM_OC1_SetConfig+0x11c>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d10c      	bne.n	800f63a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	f023 0308 	bic.w	r3, r3, #8
 800f626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	697a      	ldr	r2, [r7, #20]
 800f62e:	4313      	orrs	r3, r2
 800f630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	f023 0304 	bic.w	r3, r3, #4
 800f638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4a1c      	ldr	r2, [pc, #112]	; (800f6b0 <TIM_OC1_SetConfig+0x10c>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d00f      	beq.n	800f662 <TIM_OC1_SetConfig+0xbe>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4a1b      	ldr	r2, [pc, #108]	; (800f6b4 <TIM_OC1_SetConfig+0x110>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d00b      	beq.n	800f662 <TIM_OC1_SetConfig+0xbe>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4a1a      	ldr	r2, [pc, #104]	; (800f6b8 <TIM_OC1_SetConfig+0x114>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d007      	beq.n	800f662 <TIM_OC1_SetConfig+0xbe>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4a19      	ldr	r2, [pc, #100]	; (800f6bc <TIM_OC1_SetConfig+0x118>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d003      	beq.n	800f662 <TIM_OC1_SetConfig+0xbe>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	4a18      	ldr	r2, [pc, #96]	; (800f6c0 <TIM_OC1_SetConfig+0x11c>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d111      	bne.n	800f686 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	695b      	ldr	r3, [r3, #20]
 800f676:	693a      	ldr	r2, [r7, #16]
 800f678:	4313      	orrs	r3, r2
 800f67a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	699b      	ldr	r3, [r3, #24]
 800f680:	693a      	ldr	r2, [r7, #16]
 800f682:	4313      	orrs	r3, r2
 800f684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	693a      	ldr	r2, [r7, #16]
 800f68a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	68fa      	ldr	r2, [r7, #12]
 800f690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	685a      	ldr	r2, [r3, #4]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	697a      	ldr	r2, [r7, #20]
 800f69e:	621a      	str	r2, [r3, #32]
}
 800f6a0:	bf00      	nop
 800f6a2:	371c      	adds	r7, #28
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr
 800f6ac:	fffeff8f 	.word	0xfffeff8f
 800f6b0:	40010000 	.word	0x40010000
 800f6b4:	40010400 	.word	0x40010400
 800f6b8:	40014000 	.word	0x40014000
 800f6bc:	40014400 	.word	0x40014400
 800f6c0:	40014800 	.word	0x40014800

0800f6c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b087      	sub	sp, #28
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a1b      	ldr	r3, [r3, #32]
 800f6d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6a1b      	ldr	r3, [r3, #32]
 800f6d8:	f023 0210 	bic.w	r2, r3, #16
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	685b      	ldr	r3, [r3, #4]
 800f6e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	699b      	ldr	r3, [r3, #24]
 800f6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f6ec:	68fa      	ldr	r2, [r7, #12]
 800f6ee:	4b34      	ldr	r3, [pc, #208]	; (800f7c0 <TIM_OC2_SetConfig+0xfc>)
 800f6f0:	4013      	ands	r3, r2
 800f6f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	021b      	lsls	r3, r3, #8
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	4313      	orrs	r3, r2
 800f706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	f023 0320 	bic.w	r3, r3, #32
 800f70e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	689b      	ldr	r3, [r3, #8]
 800f714:	011b      	lsls	r3, r3, #4
 800f716:	697a      	ldr	r2, [r7, #20]
 800f718:	4313      	orrs	r3, r2
 800f71a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4a29      	ldr	r2, [pc, #164]	; (800f7c4 <TIM_OC2_SetConfig+0x100>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d003      	beq.n	800f72c <TIM_OC2_SetConfig+0x68>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	4a28      	ldr	r2, [pc, #160]	; (800f7c8 <TIM_OC2_SetConfig+0x104>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d10d      	bne.n	800f748 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	011b      	lsls	r3, r3, #4
 800f73a:	697a      	ldr	r2, [r7, #20]
 800f73c:	4313      	orrs	r3, r2
 800f73e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f746:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4a1e      	ldr	r2, [pc, #120]	; (800f7c4 <TIM_OC2_SetConfig+0x100>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d00f      	beq.n	800f770 <TIM_OC2_SetConfig+0xac>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	4a1d      	ldr	r2, [pc, #116]	; (800f7c8 <TIM_OC2_SetConfig+0x104>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d00b      	beq.n	800f770 <TIM_OC2_SetConfig+0xac>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4a1c      	ldr	r2, [pc, #112]	; (800f7cc <TIM_OC2_SetConfig+0x108>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d007      	beq.n	800f770 <TIM_OC2_SetConfig+0xac>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4a1b      	ldr	r2, [pc, #108]	; (800f7d0 <TIM_OC2_SetConfig+0x10c>)
 800f764:	4293      	cmp	r3, r2
 800f766:	d003      	beq.n	800f770 <TIM_OC2_SetConfig+0xac>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	4a1a      	ldr	r2, [pc, #104]	; (800f7d4 <TIM_OC2_SetConfig+0x110>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d113      	bne.n	800f798 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f77e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	695b      	ldr	r3, [r3, #20]
 800f784:	009b      	lsls	r3, r3, #2
 800f786:	693a      	ldr	r2, [r7, #16]
 800f788:	4313      	orrs	r3, r2
 800f78a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	699b      	ldr	r3, [r3, #24]
 800f790:	009b      	lsls	r3, r3, #2
 800f792:	693a      	ldr	r2, [r7, #16]
 800f794:	4313      	orrs	r3, r2
 800f796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	693a      	ldr	r2, [r7, #16]
 800f79c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	685a      	ldr	r2, [r3, #4]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	697a      	ldr	r2, [r7, #20]
 800f7b0:	621a      	str	r2, [r3, #32]
}
 800f7b2:	bf00      	nop
 800f7b4:	371c      	adds	r7, #28
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr
 800f7be:	bf00      	nop
 800f7c0:	feff8fff 	.word	0xfeff8fff
 800f7c4:	40010000 	.word	0x40010000
 800f7c8:	40010400 	.word	0x40010400
 800f7cc:	40014000 	.word	0x40014000
 800f7d0:	40014400 	.word	0x40014400
 800f7d4:	40014800 	.word	0x40014800

0800f7d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b087      	sub	sp, #28
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6a1b      	ldr	r3, [r3, #32]
 800f7e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6a1b      	ldr	r3, [r3, #32]
 800f7ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	69db      	ldr	r3, [r3, #28]
 800f7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f800:	68fa      	ldr	r2, [r7, #12]
 800f802:	4b33      	ldr	r3, [pc, #204]	; (800f8d0 <TIM_OC3_SetConfig+0xf8>)
 800f804:	4013      	ands	r3, r2
 800f806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f023 0303 	bic.w	r3, r3, #3
 800f80e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	68fa      	ldr	r2, [r7, #12]
 800f816:	4313      	orrs	r3, r2
 800f818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	689b      	ldr	r3, [r3, #8]
 800f826:	021b      	lsls	r3, r3, #8
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	4313      	orrs	r3, r2
 800f82c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4a28      	ldr	r2, [pc, #160]	; (800f8d4 <TIM_OC3_SetConfig+0xfc>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d003      	beq.n	800f83e <TIM_OC3_SetConfig+0x66>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4a27      	ldr	r2, [pc, #156]	; (800f8d8 <TIM_OC3_SetConfig+0x100>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d10d      	bne.n	800f85a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	021b      	lsls	r3, r3, #8
 800f84c:	697a      	ldr	r2, [r7, #20]
 800f84e:	4313      	orrs	r3, r2
 800f850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4a1d      	ldr	r2, [pc, #116]	; (800f8d4 <TIM_OC3_SetConfig+0xfc>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d00f      	beq.n	800f882 <TIM_OC3_SetConfig+0xaa>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	4a1c      	ldr	r2, [pc, #112]	; (800f8d8 <TIM_OC3_SetConfig+0x100>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d00b      	beq.n	800f882 <TIM_OC3_SetConfig+0xaa>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4a1b      	ldr	r2, [pc, #108]	; (800f8dc <TIM_OC3_SetConfig+0x104>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d007      	beq.n	800f882 <TIM_OC3_SetConfig+0xaa>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4a1a      	ldr	r2, [pc, #104]	; (800f8e0 <TIM_OC3_SetConfig+0x108>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d003      	beq.n	800f882 <TIM_OC3_SetConfig+0xaa>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4a19      	ldr	r2, [pc, #100]	; (800f8e4 <TIM_OC3_SetConfig+0x10c>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d113      	bne.n	800f8aa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	695b      	ldr	r3, [r3, #20]
 800f896:	011b      	lsls	r3, r3, #4
 800f898:	693a      	ldr	r2, [r7, #16]
 800f89a:	4313      	orrs	r3, r2
 800f89c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	699b      	ldr	r3, [r3, #24]
 800f8a2:	011b      	lsls	r3, r3, #4
 800f8a4:	693a      	ldr	r2, [r7, #16]
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	693a      	ldr	r2, [r7, #16]
 800f8ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	68fa      	ldr	r2, [r7, #12]
 800f8b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	685a      	ldr	r2, [r3, #4]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	697a      	ldr	r2, [r7, #20]
 800f8c2:	621a      	str	r2, [r3, #32]
}
 800f8c4:	bf00      	nop
 800f8c6:	371c      	adds	r7, #28
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr
 800f8d0:	fffeff8f 	.word	0xfffeff8f
 800f8d4:	40010000 	.word	0x40010000
 800f8d8:	40010400 	.word	0x40010400
 800f8dc:	40014000 	.word	0x40014000
 800f8e0:	40014400 	.word	0x40014400
 800f8e4:	40014800 	.word	0x40014800

0800f8e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b087      	sub	sp, #28
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6a1b      	ldr	r3, [r3, #32]
 800f8f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6a1b      	ldr	r3, [r3, #32]
 800f8fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	69db      	ldr	r3, [r3, #28]
 800f90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	4b24      	ldr	r3, [pc, #144]	; (800f9a4 <TIM_OC4_SetConfig+0xbc>)
 800f914:	4013      	ands	r3, r2
 800f916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f91e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	021b      	lsls	r3, r3, #8
 800f926:	68fa      	ldr	r2, [r7, #12]
 800f928:	4313      	orrs	r3, r2
 800f92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	689b      	ldr	r3, [r3, #8]
 800f938:	031b      	lsls	r3, r3, #12
 800f93a:	693a      	ldr	r2, [r7, #16]
 800f93c:	4313      	orrs	r3, r2
 800f93e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4a19      	ldr	r2, [pc, #100]	; (800f9a8 <TIM_OC4_SetConfig+0xc0>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d00f      	beq.n	800f968 <TIM_OC4_SetConfig+0x80>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	4a18      	ldr	r2, [pc, #96]	; (800f9ac <TIM_OC4_SetConfig+0xc4>)
 800f94c:	4293      	cmp	r3, r2
 800f94e:	d00b      	beq.n	800f968 <TIM_OC4_SetConfig+0x80>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	4a17      	ldr	r2, [pc, #92]	; (800f9b0 <TIM_OC4_SetConfig+0xc8>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d007      	beq.n	800f968 <TIM_OC4_SetConfig+0x80>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4a16      	ldr	r2, [pc, #88]	; (800f9b4 <TIM_OC4_SetConfig+0xcc>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d003      	beq.n	800f968 <TIM_OC4_SetConfig+0x80>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4a15      	ldr	r2, [pc, #84]	; (800f9b8 <TIM_OC4_SetConfig+0xd0>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d109      	bne.n	800f97c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f96e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	695b      	ldr	r3, [r3, #20]
 800f974:	019b      	lsls	r3, r3, #6
 800f976:	697a      	ldr	r2, [r7, #20]
 800f978:	4313      	orrs	r3, r2
 800f97a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	697a      	ldr	r2, [r7, #20]
 800f980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	685a      	ldr	r2, [r3, #4]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	693a      	ldr	r2, [r7, #16]
 800f994:	621a      	str	r2, [r3, #32]
}
 800f996:	bf00      	nop
 800f998:	371c      	adds	r7, #28
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	feff8fff 	.word	0xfeff8fff
 800f9a8:	40010000 	.word	0x40010000
 800f9ac:	40010400 	.word	0x40010400
 800f9b0:	40014000 	.word	0x40014000
 800f9b4:	40014400 	.word	0x40014400
 800f9b8:	40014800 	.word	0x40014800

0800f9bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b087      	sub	sp, #28
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6a1b      	ldr	r3, [r3, #32]
 800f9ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6a1b      	ldr	r3, [r3, #32]
 800f9d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f9e4:	68fa      	ldr	r2, [r7, #12]
 800f9e6:	4b21      	ldr	r3, [pc, #132]	; (800fa6c <TIM_OC5_SetConfig+0xb0>)
 800f9e8:	4013      	ands	r3, r2
 800f9ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	68fa      	ldr	r2, [r7, #12]
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f9fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	689b      	ldr	r3, [r3, #8]
 800fa02:	041b      	lsls	r3, r3, #16
 800fa04:	693a      	ldr	r2, [r7, #16]
 800fa06:	4313      	orrs	r3, r2
 800fa08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4a18      	ldr	r2, [pc, #96]	; (800fa70 <TIM_OC5_SetConfig+0xb4>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d00f      	beq.n	800fa32 <TIM_OC5_SetConfig+0x76>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	4a17      	ldr	r2, [pc, #92]	; (800fa74 <TIM_OC5_SetConfig+0xb8>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d00b      	beq.n	800fa32 <TIM_OC5_SetConfig+0x76>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4a16      	ldr	r2, [pc, #88]	; (800fa78 <TIM_OC5_SetConfig+0xbc>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d007      	beq.n	800fa32 <TIM_OC5_SetConfig+0x76>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a15      	ldr	r2, [pc, #84]	; (800fa7c <TIM_OC5_SetConfig+0xc0>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d003      	beq.n	800fa32 <TIM_OC5_SetConfig+0x76>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4a14      	ldr	r2, [pc, #80]	; (800fa80 <TIM_OC5_SetConfig+0xc4>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d109      	bne.n	800fa46 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	695b      	ldr	r3, [r3, #20]
 800fa3e:	021b      	lsls	r3, r3, #8
 800fa40:	697a      	ldr	r2, [r7, #20]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	697a      	ldr	r2, [r7, #20]
 800fa4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	68fa      	ldr	r2, [r7, #12]
 800fa50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	685a      	ldr	r2, [r3, #4]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	693a      	ldr	r2, [r7, #16]
 800fa5e:	621a      	str	r2, [r3, #32]
}
 800fa60:	bf00      	nop
 800fa62:	371c      	adds	r7, #28
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr
 800fa6c:	fffeff8f 	.word	0xfffeff8f
 800fa70:	40010000 	.word	0x40010000
 800fa74:	40010400 	.word	0x40010400
 800fa78:	40014000 	.word	0x40014000
 800fa7c:	40014400 	.word	0x40014400
 800fa80:	40014800 	.word	0x40014800

0800fa84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b087      	sub	sp, #28
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a1b      	ldr	r3, [r3, #32]
 800fa92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6a1b      	ldr	r3, [r3, #32]
 800fa98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	4b22      	ldr	r3, [pc, #136]	; (800fb38 <TIM_OC6_SetConfig+0xb4>)
 800fab0:	4013      	ands	r3, r2
 800fab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	021b      	lsls	r3, r3, #8
 800faba:	68fa      	ldr	r2, [r7, #12]
 800fabc:	4313      	orrs	r3, r2
 800fabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	689b      	ldr	r3, [r3, #8]
 800facc:	051b      	lsls	r3, r3, #20
 800face:	693a      	ldr	r2, [r7, #16]
 800fad0:	4313      	orrs	r3, r2
 800fad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	4a19      	ldr	r2, [pc, #100]	; (800fb3c <TIM_OC6_SetConfig+0xb8>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d00f      	beq.n	800fafc <TIM_OC6_SetConfig+0x78>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	4a18      	ldr	r2, [pc, #96]	; (800fb40 <TIM_OC6_SetConfig+0xbc>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d00b      	beq.n	800fafc <TIM_OC6_SetConfig+0x78>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	4a17      	ldr	r2, [pc, #92]	; (800fb44 <TIM_OC6_SetConfig+0xc0>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d007      	beq.n	800fafc <TIM_OC6_SetConfig+0x78>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	4a16      	ldr	r2, [pc, #88]	; (800fb48 <TIM_OC6_SetConfig+0xc4>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d003      	beq.n	800fafc <TIM_OC6_SetConfig+0x78>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4a15      	ldr	r2, [pc, #84]	; (800fb4c <TIM_OC6_SetConfig+0xc8>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d109      	bne.n	800fb10 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	695b      	ldr	r3, [r3, #20]
 800fb08:	029b      	lsls	r3, r3, #10
 800fb0a:	697a      	ldr	r2, [r7, #20]
 800fb0c:	4313      	orrs	r3, r2
 800fb0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	697a      	ldr	r2, [r7, #20]
 800fb14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	68fa      	ldr	r2, [r7, #12]
 800fb1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	685a      	ldr	r2, [r3, #4]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	693a      	ldr	r2, [r7, #16]
 800fb28:	621a      	str	r2, [r3, #32]
}
 800fb2a:	bf00      	nop
 800fb2c:	371c      	adds	r7, #28
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop
 800fb38:	feff8fff 	.word	0xfeff8fff
 800fb3c:	40010000 	.word	0x40010000
 800fb40:	40010400 	.word	0x40010400
 800fb44:	40014000 	.word	0x40014000
 800fb48:	40014400 	.word	0x40014400
 800fb4c:	40014800 	.word	0x40014800

0800fb50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb50:	b480      	push	{r7}
 800fb52:	b087      	sub	sp, #28
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	60b9      	str	r1, [r7, #8]
 800fb5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	6a1b      	ldr	r3, [r3, #32]
 800fb60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	6a1b      	ldr	r3, [r3, #32]
 800fb66:	f023 0201 	bic.w	r2, r3, #1
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	699b      	ldr	r3, [r3, #24]
 800fb72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	011b      	lsls	r3, r3, #4
 800fb80:	693a      	ldr	r2, [r7, #16]
 800fb82:	4313      	orrs	r3, r2
 800fb84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	f023 030a 	bic.w	r3, r3, #10
 800fb8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fb8e:	697a      	ldr	r2, [r7, #20]
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	4313      	orrs	r3, r2
 800fb94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	693a      	ldr	r2, [r7, #16]
 800fb9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	697a      	ldr	r2, [r7, #20]
 800fba0:	621a      	str	r2, [r3, #32]
}
 800fba2:	bf00      	nop
 800fba4:	371c      	adds	r7, #28
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr

0800fbae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbae:	b480      	push	{r7}
 800fbb0:	b087      	sub	sp, #28
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	60f8      	str	r0, [r7, #12]
 800fbb6:	60b9      	str	r1, [r7, #8]
 800fbb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	6a1b      	ldr	r3, [r3, #32]
 800fbbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	6a1b      	ldr	r3, [r3, #32]
 800fbc4:	f023 0210 	bic.w	r2, r3, #16
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	699b      	ldr	r3, [r3, #24]
 800fbd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fbd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	031b      	lsls	r3, r3, #12
 800fbde:	693a      	ldr	r2, [r7, #16]
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fbea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	011b      	lsls	r3, r3, #4
 800fbf0:	697a      	ldr	r2, [r7, #20]
 800fbf2:	4313      	orrs	r3, r2
 800fbf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	693a      	ldr	r2, [r7, #16]
 800fbfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	697a      	ldr	r2, [r7, #20]
 800fc00:	621a      	str	r2, [r3, #32]
}
 800fc02:	bf00      	nop
 800fc04:	371c      	adds	r7, #28
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
	...

0800fc10 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b085      	sub	sp, #20
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	689b      	ldr	r3, [r3, #8]
 800fc1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	4b09      	ldr	r3, [pc, #36]	; (800fc48 <TIM_ITRx_SetConfig+0x38>)
 800fc24:	4013      	ands	r3, r2
 800fc26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc28:	683a      	ldr	r2, [r7, #0]
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	f043 0307 	orr.w	r3, r3, #7
 800fc32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	68fa      	ldr	r2, [r7, #12]
 800fc38:	609a      	str	r2, [r3, #8]
}
 800fc3a:	bf00      	nop
 800fc3c:	3714      	adds	r7, #20
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr
 800fc46:	bf00      	nop
 800fc48:	ffcfff8f 	.word	0xffcfff8f

0800fc4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b087      	sub	sp, #28
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
 800fc58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	689b      	ldr	r3, [r3, #8]
 800fc5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fc66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	021a      	lsls	r2, r3, #8
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	431a      	orrs	r2, r3
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	4313      	orrs	r3, r2
 800fc74:	697a      	ldr	r2, [r7, #20]
 800fc76:	4313      	orrs	r3, r2
 800fc78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	697a      	ldr	r2, [r7, #20]
 800fc7e:	609a      	str	r2, [r3, #8]
}
 800fc80:	bf00      	nop
 800fc82:	371c      	adds	r7, #28
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr

0800fc8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b087      	sub	sp, #28
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	60f8      	str	r0, [r7, #12]
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	f003 031f 	and.w	r3, r3, #31
 800fc9e:	2201      	movs	r2, #1
 800fca0:	fa02 f303 	lsl.w	r3, r2, r3
 800fca4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	6a1a      	ldr	r2, [r3, #32]
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	43db      	mvns	r3, r3
 800fcae:	401a      	ands	r2, r3
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	6a1a      	ldr	r2, [r3, #32]
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	f003 031f 	and.w	r3, r3, #31
 800fcbe:	6879      	ldr	r1, [r7, #4]
 800fcc0:	fa01 f303 	lsl.w	r3, r1, r3
 800fcc4:	431a      	orrs	r2, r3
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	621a      	str	r2, [r3, #32]
}
 800fcca:	bf00      	nop
 800fccc:	371c      	adds	r7, #28
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr
	...

0800fcd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b085      	sub	sp, #20
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d101      	bne.n	800fcf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fcec:	2302      	movs	r3, #2
 800fcee:	e06d      	b.n	800fdcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2202      	movs	r2, #2
 800fcfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	689b      	ldr	r3, [r3, #8]
 800fd0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	4a30      	ldr	r2, [pc, #192]	; (800fdd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d004      	beq.n	800fd24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4a2f      	ldr	r2, [pc, #188]	; (800fddc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d108      	bne.n	800fd36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fd2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	4313      	orrs	r3, r2
 800fd34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	4313      	orrs	r3, r2
 800fd46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4a20      	ldr	r2, [pc, #128]	; (800fdd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d022      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd62:	d01d      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a1d      	ldr	r2, [pc, #116]	; (800fde0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d018      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4a1c      	ldr	r2, [pc, #112]	; (800fde4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d013      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	4a1a      	ldr	r2, [pc, #104]	; (800fde8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d00e      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	4a15      	ldr	r2, [pc, #84]	; (800fddc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d009      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4a16      	ldr	r2, [pc, #88]	; (800fdec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d004      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	4a15      	ldr	r2, [pc, #84]	; (800fdf0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fd9c:	4293      	cmp	r3, r2
 800fd9e:	d10c      	bne.n	800fdba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fda6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	68ba      	ldr	r2, [r7, #8]
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	68ba      	ldr	r2, [r7, #8]
 800fdb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fdca:	2300      	movs	r3, #0
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3714      	adds	r7, #20
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr
 800fdd8:	40010000 	.word	0x40010000
 800fddc:	40010400 	.word	0x40010400
 800fde0:	40000400 	.word	0x40000400
 800fde4:	40000800 	.word	0x40000800
 800fde8:	40000c00 	.word	0x40000c00
 800fdec:	40001800 	.word	0x40001800
 800fdf0:	40014000 	.word	0x40014000

0800fdf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b085      	sub	sp, #20
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d101      	bne.n	800fe10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe0c:	2302      	movs	r3, #2
 800fe0e:	e065      	b.n	800fedc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2201      	movs	r2, #1
 800fe14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	68db      	ldr	r3, [r3, #12]
 800fe22:	4313      	orrs	r3, r2
 800fe24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	689b      	ldr	r3, [r3, #8]
 800fe30:	4313      	orrs	r3, r2
 800fe32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4313      	orrs	r3, r2
 800fe4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	691b      	ldr	r3, [r3, #16]
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	695b      	ldr	r3, [r3, #20]
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe76:	4313      	orrs	r3, r2
 800fe78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	699b      	ldr	r3, [r3, #24]
 800fe84:	041b      	lsls	r3, r3, #16
 800fe86:	4313      	orrs	r3, r2
 800fe88:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a16      	ldr	r2, [pc, #88]	; (800fee8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d004      	beq.n	800fe9e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a14      	ldr	r2, [pc, #80]	; (800feec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d115      	bne.n	800feca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea8:	051b      	lsls	r3, r3, #20
 800feaa:	4313      	orrs	r3, r2
 800feac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	69db      	ldr	r3, [r3, #28]
 800feb8:	4313      	orrs	r3, r2
 800feba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	6a1b      	ldr	r3, [r3, #32]
 800fec6:	4313      	orrs	r3, r2
 800fec8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2200      	movs	r2, #0
 800fed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800feda:	2300      	movs	r3, #0
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3714      	adds	r7, #20
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr
 800fee8:	40010000 	.word	0x40010000
 800feec:	40010400 	.word	0x40010400

0800fef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff0c:	bf00      	nop
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d101      	bne.n	800ff3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	e042      	b.n	800ffc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d106      	bne.n	800ff56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7f3 fbf7 	bl	8003744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2224      	movs	r2, #36	; 0x24
 800ff5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	681a      	ldr	r2, [r3, #0]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f022 0201 	bic.w	r2, r2, #1
 800ff6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d002      	beq.n	800ff7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f001 fc42 	bl	8011800 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f000 fed7 	bl	8010d30 <UART_SetConfig>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d101      	bne.n	800ff8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e01b      	b.n	800ffc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	685a      	ldr	r2, [r3, #4]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	689a      	ldr	r2, [r3, #8]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ffaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	681a      	ldr	r2, [r3, #0]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	f042 0201 	orr.w	r2, r2, #1
 800ffba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f001 fcc1 	bl	8011944 <UART_CheckIdleState>
 800ffc2:	4603      	mov	r3, r0
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3708      	adds	r7, #8
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b08a      	sub	sp, #40	; 0x28
 800ffd0:	af02      	add	r7, sp, #8
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	603b      	str	r3, [r7, #0]
 800ffd8:	4613      	mov	r3, r2
 800ffda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffe2:	2b20      	cmp	r3, #32
 800ffe4:	d17b      	bne.n	80100de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d002      	beq.n	800fff2 <HAL_UART_Transmit+0x26>
 800ffec:	88fb      	ldrh	r3, [r7, #6]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d101      	bne.n	800fff6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fff2:	2301      	movs	r3, #1
 800fff4:	e074      	b.n	80100e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2200      	movs	r2, #0
 800fffa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2221      	movs	r2, #33	; 0x21
 8010002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010006:	f7f3 ff1b 	bl	8003e40 <HAL_GetTick>
 801000a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	88fa      	ldrh	r2, [r7, #6]
 8010010:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	88fa      	ldrh	r2, [r7, #6]
 8010018:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	689b      	ldr	r3, [r3, #8]
 8010020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010024:	d108      	bne.n	8010038 <HAL_UART_Transmit+0x6c>
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	691b      	ldr	r3, [r3, #16]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d104      	bne.n	8010038 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801002e:	2300      	movs	r3, #0
 8010030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	61bb      	str	r3, [r7, #24]
 8010036:	e003      	b.n	8010040 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801003c:	2300      	movs	r3, #0
 801003e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010040:	e030      	b.n	80100a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	9300      	str	r3, [sp, #0]
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	2200      	movs	r2, #0
 801004a:	2180      	movs	r1, #128	; 0x80
 801004c:	68f8      	ldr	r0, [r7, #12]
 801004e:	f001 fd23 	bl	8011a98 <UART_WaitOnFlagUntilTimeout>
 8010052:	4603      	mov	r3, r0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d005      	beq.n	8010064 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2220      	movs	r2, #32
 801005c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010060:	2303      	movs	r3, #3
 8010062:	e03d      	b.n	80100e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d10b      	bne.n	8010082 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801006a:	69bb      	ldr	r3, [r7, #24]
 801006c:	881b      	ldrh	r3, [r3, #0]
 801006e:	461a      	mov	r2, r3
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010078:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	3302      	adds	r3, #2
 801007e:	61bb      	str	r3, [r7, #24]
 8010080:	e007      	b.n	8010092 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010082:	69fb      	ldr	r3, [r7, #28]
 8010084:	781a      	ldrb	r2, [r3, #0]
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	3301      	adds	r3, #1
 8010090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010098:	b29b      	uxth	r3, r3
 801009a:	3b01      	subs	r3, #1
 801009c:	b29a      	uxth	r2, r3
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80100aa:	b29b      	uxth	r3, r3
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d1c8      	bne.n	8010042 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	9300      	str	r3, [sp, #0]
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	2200      	movs	r2, #0
 80100b8:	2140      	movs	r1, #64	; 0x40
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f001 fcec 	bl	8011a98 <UART_WaitOnFlagUntilTimeout>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d005      	beq.n	80100d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2220      	movs	r2, #32
 80100ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80100ce:	2303      	movs	r3, #3
 80100d0:	e006      	b.n	80100e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2220      	movs	r2, #32
 80100d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80100da:	2300      	movs	r3, #0
 80100dc:	e000      	b.n	80100e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80100de:	2302      	movs	r3, #2
  }
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3720      	adds	r7, #32
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b08a      	sub	sp, #40	; 0x28
 80100ec:	af02      	add	r7, sp, #8
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	60b9      	str	r1, [r7, #8]
 80100f2:	603b      	str	r3, [r7, #0]
 80100f4:	4613      	mov	r3, r2
 80100f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100fe:	2b20      	cmp	r3, #32
 8010100:	f040 80b5 	bne.w	801026e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d002      	beq.n	8010110 <HAL_UART_Receive+0x28>
 801010a:	88fb      	ldrh	r3, [r7, #6]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d101      	bne.n	8010114 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010110:	2301      	movs	r3, #1
 8010112:	e0ad      	b.n	8010270 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	2200      	movs	r2, #0
 8010118:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	2222      	movs	r2, #34	; 0x22
 8010120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2200      	movs	r2, #0
 8010128:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801012a:	f7f3 fe89 	bl	8003e40 <HAL_GetTick>
 801012e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	88fa      	ldrh	r2, [r7, #6]
 8010134:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	88fa      	ldrh	r2, [r7, #6]
 801013c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	689b      	ldr	r3, [r3, #8]
 8010144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010148:	d10e      	bne.n	8010168 <HAL_UART_Receive+0x80>
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	691b      	ldr	r3, [r3, #16]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d105      	bne.n	801015e <HAL_UART_Receive+0x76>
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010158:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801015c:	e02d      	b.n	80101ba <HAL_UART_Receive+0xd2>
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	22ff      	movs	r2, #255	; 0xff
 8010162:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010166:	e028      	b.n	80101ba <HAL_UART_Receive+0xd2>
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	689b      	ldr	r3, [r3, #8]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d10d      	bne.n	801018c <HAL_UART_Receive+0xa4>
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	691b      	ldr	r3, [r3, #16]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d104      	bne.n	8010182 <HAL_UART_Receive+0x9a>
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	22ff      	movs	r2, #255	; 0xff
 801017c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010180:	e01b      	b.n	80101ba <HAL_UART_Receive+0xd2>
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	227f      	movs	r2, #127	; 0x7f
 8010186:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801018a:	e016      	b.n	80101ba <HAL_UART_Receive+0xd2>
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	689b      	ldr	r3, [r3, #8]
 8010190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010194:	d10d      	bne.n	80101b2 <HAL_UART_Receive+0xca>
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	691b      	ldr	r3, [r3, #16]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d104      	bne.n	80101a8 <HAL_UART_Receive+0xc0>
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	227f      	movs	r2, #127	; 0x7f
 80101a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101a6:	e008      	b.n	80101ba <HAL_UART_Receive+0xd2>
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	223f      	movs	r2, #63	; 0x3f
 80101ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101b0:	e003      	b.n	80101ba <HAL_UART_Receive+0xd2>
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2200      	movs	r2, #0
 80101b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101c0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	689b      	ldr	r3, [r3, #8]
 80101c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101ca:	d108      	bne.n	80101de <HAL_UART_Receive+0xf6>
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	691b      	ldr	r3, [r3, #16]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d104      	bne.n	80101de <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80101d4:	2300      	movs	r3, #0
 80101d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	61bb      	str	r3, [r7, #24]
 80101dc:	e003      	b.n	80101e6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80101e2:	2300      	movs	r3, #0
 80101e4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80101e6:	e036      	b.n	8010256 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	9300      	str	r3, [sp, #0]
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	2200      	movs	r2, #0
 80101f0:	2120      	movs	r1, #32
 80101f2:	68f8      	ldr	r0, [r7, #12]
 80101f4:	f001 fc50 	bl	8011a98 <UART_WaitOnFlagUntilTimeout>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d005      	beq.n	801020a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2220      	movs	r2, #32
 8010202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8010206:	2303      	movs	r3, #3
 8010208:	e032      	b.n	8010270 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d10c      	bne.n	801022a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010216:	b29a      	uxth	r2, r3
 8010218:	8a7b      	ldrh	r3, [r7, #18]
 801021a:	4013      	ands	r3, r2
 801021c:	b29a      	uxth	r2, r3
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010222:	69bb      	ldr	r3, [r7, #24]
 8010224:	3302      	adds	r3, #2
 8010226:	61bb      	str	r3, [r7, #24]
 8010228:	e00c      	b.n	8010244 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010230:	b2da      	uxtb	r2, r3
 8010232:	8a7b      	ldrh	r3, [r7, #18]
 8010234:	b2db      	uxtb	r3, r3
 8010236:	4013      	ands	r3, r2
 8010238:	b2da      	uxtb	r2, r3
 801023a:	69fb      	ldr	r3, [r7, #28]
 801023c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	3301      	adds	r3, #1
 8010242:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801024a:	b29b      	uxth	r3, r3
 801024c:	3b01      	subs	r3, #1
 801024e:	b29a      	uxth	r2, r3
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801025c:	b29b      	uxth	r3, r3
 801025e:	2b00      	cmp	r3, #0
 8010260:	d1c2      	bne.n	80101e8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2220      	movs	r2, #32
 8010266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801026a:	2300      	movs	r3, #0
 801026c:	e000      	b.n	8010270 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801026e:	2302      	movs	r3, #2
  }
}
 8010270:	4618      	mov	r0, r3
 8010272:	3720      	adds	r7, #32
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b08a      	sub	sp, #40	; 0x28
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	4613      	mov	r3, r2
 8010284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801028c:	2b20      	cmp	r3, #32
 801028e:	d137      	bne.n	8010300 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d002      	beq.n	801029c <HAL_UART_Receive_IT+0x24>
 8010296:	88fb      	ldrh	r3, [r7, #6]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d101      	bne.n	80102a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801029c:	2301      	movs	r3, #1
 801029e:	e030      	b.n	8010302 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	2200      	movs	r2, #0
 80102a4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	4a18      	ldr	r2, [pc, #96]	; (801030c <HAL_UART_Receive_IT+0x94>)
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d01f      	beq.n	80102f0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d018      	beq.n	80102f0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	e853 3f00 	ldrex	r3, [r3]
 80102ca:	613b      	str	r3, [r7, #16]
   return(result);
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80102d2:	627b      	str	r3, [r7, #36]	; 0x24
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	461a      	mov	r2, r3
 80102da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102dc:	623b      	str	r3, [r7, #32]
 80102de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102e0:	69f9      	ldr	r1, [r7, #28]
 80102e2:	6a3a      	ldr	r2, [r7, #32]
 80102e4:	e841 2300 	strex	r3, r2, [r1]
 80102e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80102ea:	69bb      	ldr	r3, [r7, #24]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d1e6      	bne.n	80102be <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80102f0:	88fb      	ldrh	r3, [r7, #6]
 80102f2:	461a      	mov	r2, r3
 80102f4:	68b9      	ldr	r1, [r7, #8]
 80102f6:	68f8      	ldr	r0, [r7, #12]
 80102f8:	f001 fc3c 	bl	8011b74 <UART_Start_Receive_IT>
 80102fc:	4603      	mov	r3, r0
 80102fe:	e000      	b.n	8010302 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010300:	2302      	movs	r3, #2
  }
}
 8010302:	4618      	mov	r0, r3
 8010304:	3728      	adds	r7, #40	; 0x28
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	58000c00 	.word	0x58000c00

08010310 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b08a      	sub	sp, #40	; 0x28
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	4613      	mov	r3, r2
 801031c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010324:	2b20      	cmp	r3, #32
 8010326:	d167      	bne.n	80103f8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d002      	beq.n	8010334 <HAL_UART_Transmit_DMA+0x24>
 801032e:	88fb      	ldrh	r3, [r7, #6]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d101      	bne.n	8010338 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010334:	2301      	movs	r3, #1
 8010336:	e060      	b.n	80103fa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	68ba      	ldr	r2, [r7, #8]
 801033c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	88fa      	ldrh	r2, [r7, #6]
 8010342:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	88fa      	ldrh	r2, [r7, #6]
 801034a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2200      	movs	r2, #0
 8010352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2221      	movs	r2, #33	; 0x21
 801035a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010362:	2b00      	cmp	r3, #0
 8010364:	d028      	beq.n	80103b8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801036a:	4a26      	ldr	r2, [pc, #152]	; (8010404 <HAL_UART_Transmit_DMA+0xf4>)
 801036c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010372:	4a25      	ldr	r2, [pc, #148]	; (8010408 <HAL_UART_Transmit_DMA+0xf8>)
 8010374:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801037a:	4a24      	ldr	r2, [pc, #144]	; (801040c <HAL_UART_Transmit_DMA+0xfc>)
 801037c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010382:	2200      	movs	r2, #0
 8010384:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801038e:	4619      	mov	r1, r3
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	3328      	adds	r3, #40	; 0x28
 8010396:	461a      	mov	r2, r3
 8010398:	88fb      	ldrh	r3, [r7, #6]
 801039a:	f7f6 f9d5 	bl	8006748 <HAL_DMA_Start_IT>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d009      	beq.n	80103b8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2210      	movs	r2, #16
 80103a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2220      	movs	r2, #32
 80103b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80103b4:	2301      	movs	r3, #1
 80103b6:	e020      	b.n	80103fa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	2240      	movs	r2, #64	; 0x40
 80103be:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	3308      	adds	r3, #8
 80103c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	e853 3f00 	ldrex	r3, [r3]
 80103ce:	613b      	str	r3, [r7, #16]
   return(result);
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103d6:	627b      	str	r3, [r7, #36]	; 0x24
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	3308      	adds	r3, #8
 80103de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103e0:	623a      	str	r2, [r7, #32]
 80103e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e4:	69f9      	ldr	r1, [r7, #28]
 80103e6:	6a3a      	ldr	r2, [r7, #32]
 80103e8:	e841 2300 	strex	r3, r2, [r1]
 80103ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80103ee:	69bb      	ldr	r3, [r7, #24]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d1e5      	bne.n	80103c0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80103f4:	2300      	movs	r3, #0
 80103f6:	e000      	b.n	80103fa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80103f8:	2302      	movs	r3, #2
  }
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3728      	adds	r7, #40	; 0x28
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}
 8010402:	bf00      	nop
 8010404:	08011f09 	.word	0x08011f09
 8010408:	08011f9f 	.word	0x08011f9f
 801040c:	08011fbb 	.word	0x08011fbb

08010410 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b09a      	sub	sp, #104	; 0x68
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801041e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010420:	e853 3f00 	ldrex	r3, [r3]
 8010424:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801042c:	667b      	str	r3, [r7, #100]	; 0x64
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	461a      	mov	r2, r3
 8010434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010436:	657b      	str	r3, [r7, #84]	; 0x54
 8010438:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801043c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801043e:	e841 2300 	strex	r3, r2, [r1]
 8010442:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010446:	2b00      	cmp	r3, #0
 8010448:	d1e6      	bne.n	8010418 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	3308      	adds	r3, #8
 8010450:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010454:	e853 3f00 	ldrex	r3, [r3]
 8010458:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801045a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801045c:	4b46      	ldr	r3, [pc, #280]	; (8010578 <HAL_UART_AbortReceive+0x168>)
 801045e:	4013      	ands	r3, r2
 8010460:	663b      	str	r3, [r7, #96]	; 0x60
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	3308      	adds	r3, #8
 8010468:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801046a:	643a      	str	r2, [r7, #64]	; 0x40
 801046c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801046e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010472:	e841 2300 	strex	r3, r2, [r1]
 8010476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047a:	2b00      	cmp	r3, #0
 801047c:	d1e5      	bne.n	801044a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010482:	2b01      	cmp	r3, #1
 8010484:	d118      	bne.n	80104b8 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801048c:	6a3b      	ldr	r3, [r7, #32]
 801048e:	e853 3f00 	ldrex	r3, [r3]
 8010492:	61fb      	str	r3, [r7, #28]
   return(result);
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	f023 0310 	bic.w	r3, r3, #16
 801049a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	461a      	mov	r2, r3
 80104a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104ac:	e841 2300 	strex	r3, r2, [r1]
 80104b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d1e6      	bne.n	8010486 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	689b      	ldr	r3, [r3, #8]
 80104be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104c2:	2b40      	cmp	r3, #64	; 0x40
 80104c4:	d13b      	bne.n	801053e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	3308      	adds	r3, #8
 80104cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	e853 3f00 	ldrex	r3, [r3]
 80104d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	3308      	adds	r3, #8
 80104e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104e6:	61ba      	str	r2, [r7, #24]
 80104e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ea:	6979      	ldr	r1, [r7, #20]
 80104ec:	69ba      	ldr	r2, [r7, #24]
 80104ee:	e841 2300 	strex	r3, r2, [r1]
 80104f2:	613b      	str	r3, [r7, #16]
   return(result);
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d1e5      	bne.n	80104c6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010500:	2b00      	cmp	r3, #0
 8010502:	d01c      	beq.n	801053e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801050a:	2200      	movs	r2, #0
 801050c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010514:	4618      	mov	r0, r3
 8010516:	f7f6 fb81 	bl	8006c1c <HAL_DMA_Abort>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00e      	beq.n	801053e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010526:	4618      	mov	r0, r3
 8010528:	f7f8 f806 	bl	8008538 <HAL_DMA_GetError>
 801052c:	4603      	mov	r3, r0
 801052e:	2b20      	cmp	r3, #32
 8010530:	d105      	bne.n	801053e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2210      	movs	r2, #16
 8010536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801053a:	2303      	movs	r3, #3
 801053c:	e017      	b.n	801056e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2200      	movs	r2, #0
 8010542:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	220f      	movs	r2, #15
 801054c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	699a      	ldr	r2, [r3, #24]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f042 0208 	orr.w	r2, r2, #8
 801055c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2220      	movs	r2, #32
 8010562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2200      	movs	r2, #0
 801056a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 801056c:	2300      	movs	r3, #0
}
 801056e:	4618      	mov	r0, r3
 8010570:	3768      	adds	r7, #104	; 0x68
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	effffffe 	.word	0xeffffffe

0801057c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b0ba      	sub	sp, #232	; 0xe8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	69db      	ldr	r3, [r3, #28]
 801058a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	689b      	ldr	r3, [r3, #8]
 801059e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80105a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80105a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80105aa:	4013      	ands	r3, r2
 80105ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80105b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d11b      	bne.n	80105f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80105b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105bc:	f003 0320 	and.w	r3, r3, #32
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d015      	beq.n	80105f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80105c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80105c8:	f003 0320 	and.w	r3, r3, #32
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d105      	bne.n	80105dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80105d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80105d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d009      	beq.n	80105f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f000 8377 	beq.w	8010cd4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	4798      	blx	r3
      }
      return;
 80105ee:	e371      	b.n	8010cd4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80105f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	f000 8123 	beq.w	8010840 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80105fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80105fe:	4b8d      	ldr	r3, [pc, #564]	; (8010834 <HAL_UART_IRQHandler+0x2b8>)
 8010600:	4013      	ands	r3, r2
 8010602:	2b00      	cmp	r3, #0
 8010604:	d106      	bne.n	8010614 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010606:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801060a:	4b8b      	ldr	r3, [pc, #556]	; (8010838 <HAL_UART_IRQHandler+0x2bc>)
 801060c:	4013      	ands	r3, r2
 801060e:	2b00      	cmp	r3, #0
 8010610:	f000 8116 	beq.w	8010840 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010618:	f003 0301 	and.w	r3, r3, #1
 801061c:	2b00      	cmp	r3, #0
 801061e:	d011      	beq.n	8010644 <HAL_UART_IRQHandler+0xc8>
 8010620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010628:	2b00      	cmp	r3, #0
 801062a:	d00b      	beq.n	8010644 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2201      	movs	r2, #1
 8010632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801063a:	f043 0201 	orr.w	r2, r3, #1
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010648:	f003 0302 	and.w	r3, r3, #2
 801064c:	2b00      	cmp	r3, #0
 801064e:	d011      	beq.n	8010674 <HAL_UART_IRQHandler+0xf8>
 8010650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010654:	f003 0301 	and.w	r3, r3, #1
 8010658:	2b00      	cmp	r3, #0
 801065a:	d00b      	beq.n	8010674 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	2202      	movs	r2, #2
 8010662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801066a:	f043 0204 	orr.w	r2, r3, #4
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010678:	f003 0304 	and.w	r3, r3, #4
 801067c:	2b00      	cmp	r3, #0
 801067e:	d011      	beq.n	80106a4 <HAL_UART_IRQHandler+0x128>
 8010680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010684:	f003 0301 	and.w	r3, r3, #1
 8010688:	2b00      	cmp	r3, #0
 801068a:	d00b      	beq.n	80106a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	2204      	movs	r2, #4
 8010692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801069a:	f043 0202 	orr.w	r2, r3, #2
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80106a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106a8:	f003 0308 	and.w	r3, r3, #8
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d017      	beq.n	80106e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80106b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106b4:	f003 0320 	and.w	r3, r3, #32
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d105      	bne.n	80106c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80106bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80106c0:	4b5c      	ldr	r3, [pc, #368]	; (8010834 <HAL_UART_IRQHandler+0x2b8>)
 80106c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d00b      	beq.n	80106e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2208      	movs	r2, #8
 80106ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106d6:	f043 0208 	orr.w	r2, r3, #8
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80106e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d012      	beq.n	8010712 <HAL_UART_IRQHandler+0x196>
 80106ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d00c      	beq.n	8010712 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010700:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010708:	f043 0220 	orr.w	r2, r3, #32
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010718:	2b00      	cmp	r3, #0
 801071a:	f000 82dd 	beq.w	8010cd8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801071e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010722:	f003 0320 	and.w	r3, r3, #32
 8010726:	2b00      	cmp	r3, #0
 8010728:	d013      	beq.n	8010752 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801072a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801072e:	f003 0320 	and.w	r3, r3, #32
 8010732:	2b00      	cmp	r3, #0
 8010734:	d105      	bne.n	8010742 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801073e:	2b00      	cmp	r3, #0
 8010740:	d007      	beq.n	8010752 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010746:	2b00      	cmp	r3, #0
 8010748:	d003      	beq.n	8010752 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010758:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	689b      	ldr	r3, [r3, #8]
 8010762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010766:	2b40      	cmp	r3, #64	; 0x40
 8010768:	d005      	beq.n	8010776 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801076a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801076e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010772:	2b00      	cmp	r3, #0
 8010774:	d054      	beq.n	8010820 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f001 fb60 	bl	8011e3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	689b      	ldr	r3, [r3, #8]
 8010782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010786:	2b40      	cmp	r3, #64	; 0x40
 8010788:	d146      	bne.n	8010818 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	3308      	adds	r3, #8
 8010790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010798:	e853 3f00 	ldrex	r3, [r3]
 801079c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80107a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80107a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	3308      	adds	r3, #8
 80107b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80107b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80107ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80107c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80107c6:	e841 2300 	strex	r3, r2, [r1]
 80107ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80107ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d1d9      	bne.n	801078a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d017      	beq.n	8010810 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107e6:	4a15      	ldr	r2, [pc, #84]	; (801083c <HAL_UART_IRQHandler+0x2c0>)
 80107e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7f6 fd31 	bl	8007258 <HAL_DMA_Abort_IT>
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d019      	beq.n	8010830 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801080a:	4610      	mov	r0, r2
 801080c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801080e:	e00f      	b.n	8010830 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f000 fa77 	bl	8010d04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010816:	e00b      	b.n	8010830 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f000 fa73 	bl	8010d04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801081e:	e007      	b.n	8010830 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 fa6f 	bl	8010d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2200      	movs	r2, #0
 801082a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801082e:	e253      	b.n	8010cd8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010830:	bf00      	nop
    return;
 8010832:	e251      	b.n	8010cd8 <HAL_UART_IRQHandler+0x75c>
 8010834:	10000001 	.word	0x10000001
 8010838:	04000120 	.word	0x04000120
 801083c:	0801203b 	.word	0x0801203b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010844:	2b01      	cmp	r3, #1
 8010846:	f040 81e7 	bne.w	8010c18 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801084a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801084e:	f003 0310 	and.w	r3, r3, #16
 8010852:	2b00      	cmp	r3, #0
 8010854:	f000 81e0 	beq.w	8010c18 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801085c:	f003 0310 	and.w	r3, r3, #16
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 81d9 	beq.w	8010c18 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	2210      	movs	r2, #16
 801086c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	689b      	ldr	r3, [r3, #8]
 8010874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010878:	2b40      	cmp	r3, #64	; 0x40
 801087a:	f040 8151 	bne.w	8010b20 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	4a96      	ldr	r2, [pc, #600]	; (8010ae0 <HAL_UART_IRQHandler+0x564>)
 8010888:	4293      	cmp	r3, r2
 801088a:	d068      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4a93      	ldr	r2, [pc, #588]	; (8010ae4 <HAL_UART_IRQHandler+0x568>)
 8010896:	4293      	cmp	r3, r2
 8010898:	d061      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4a91      	ldr	r2, [pc, #580]	; (8010ae8 <HAL_UART_IRQHandler+0x56c>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d05a      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4a8e      	ldr	r2, [pc, #568]	; (8010aec <HAL_UART_IRQHandler+0x570>)
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d053      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	4a8c      	ldr	r2, [pc, #560]	; (8010af0 <HAL_UART_IRQHandler+0x574>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d04c      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	4a89      	ldr	r2, [pc, #548]	; (8010af4 <HAL_UART_IRQHandler+0x578>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d045      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	4a87      	ldr	r2, [pc, #540]	; (8010af8 <HAL_UART_IRQHandler+0x57c>)
 80108dc:	4293      	cmp	r3, r2
 80108de:	d03e      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	4a84      	ldr	r2, [pc, #528]	; (8010afc <HAL_UART_IRQHandler+0x580>)
 80108ea:	4293      	cmp	r3, r2
 80108ec:	d037      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	4a82      	ldr	r2, [pc, #520]	; (8010b00 <HAL_UART_IRQHandler+0x584>)
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d030      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4a7f      	ldr	r2, [pc, #508]	; (8010b04 <HAL_UART_IRQHandler+0x588>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d029      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	4a7d      	ldr	r2, [pc, #500]	; (8010b08 <HAL_UART_IRQHandler+0x58c>)
 8010914:	4293      	cmp	r3, r2
 8010916:	d022      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4a7a      	ldr	r2, [pc, #488]	; (8010b0c <HAL_UART_IRQHandler+0x590>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d01b      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	4a78      	ldr	r2, [pc, #480]	; (8010b10 <HAL_UART_IRQHandler+0x594>)
 8010930:	4293      	cmp	r3, r2
 8010932:	d014      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	4a75      	ldr	r2, [pc, #468]	; (8010b14 <HAL_UART_IRQHandler+0x598>)
 801093e:	4293      	cmp	r3, r2
 8010940:	d00d      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4a73      	ldr	r2, [pc, #460]	; (8010b18 <HAL_UART_IRQHandler+0x59c>)
 801094c:	4293      	cmp	r3, r2
 801094e:	d006      	beq.n	801095e <HAL_UART_IRQHandler+0x3e2>
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4a70      	ldr	r2, [pc, #448]	; (8010b1c <HAL_UART_IRQHandler+0x5a0>)
 801095a:	4293      	cmp	r3, r2
 801095c:	d106      	bne.n	801096c <HAL_UART_IRQHandler+0x3f0>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	685b      	ldr	r3, [r3, #4]
 8010968:	b29b      	uxth	r3, r3
 801096a:	e005      	b.n	8010978 <HAL_UART_IRQHandler+0x3fc>
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	685b      	ldr	r3, [r3, #4]
 8010976:	b29b      	uxth	r3, r3
 8010978:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801097c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010980:	2b00      	cmp	r3, #0
 8010982:	f000 81ab 	beq.w	8010cdc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801098c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010990:	429a      	cmp	r2, r3
 8010992:	f080 81a3 	bcs.w	8010cdc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801099c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109a6:	69db      	ldr	r3, [r3, #28]
 80109a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109ac:	f000 8087 	beq.w	8010abe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80109bc:	e853 3f00 	ldrex	r3, [r3]
 80109c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80109c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80109c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80109cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	461a      	mov	r2, r3
 80109d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80109da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80109de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80109e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80109ea:	e841 2300 	strex	r3, r2, [r1]
 80109ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80109f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d1da      	bne.n	80109b0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	3308      	adds	r3, #8
 8010a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a04:	e853 3f00 	ldrex	r3, [r3]
 8010a08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a0c:	f023 0301 	bic.w	r3, r3, #1
 8010a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	3308      	adds	r3, #8
 8010a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010a1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010a22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010a2a:	e841 2300 	strex	r3, r2, [r1]
 8010a2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d1e1      	bne.n	80109fa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	3308      	adds	r3, #8
 8010a3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a40:	e853 3f00 	ldrex	r3, [r3]
 8010a44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	3308      	adds	r3, #8
 8010a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010a5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010a62:	e841 2300 	strex	r3, r2, [r1]
 8010a66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d1e3      	bne.n	8010a36 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2220      	movs	r2, #32
 8010a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a84:	e853 3f00 	ldrex	r3, [r3]
 8010a88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a8c:	f023 0310 	bic.w	r3, r3, #16
 8010a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	461a      	mov	r2, r3
 8010a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010aa0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010aa6:	e841 2300 	strex	r3, r2, [r1]
 8010aaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d1e4      	bne.n	8010a7c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7f6 f8af 	bl	8006c1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2202      	movs	r2, #2
 8010ac2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	1ad3      	subs	r3, r2, r3
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f000 f91d 	bl	8010d18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010ade:	e0fd      	b.n	8010cdc <HAL_UART_IRQHandler+0x760>
 8010ae0:	40020010 	.word	0x40020010
 8010ae4:	40020028 	.word	0x40020028
 8010ae8:	40020040 	.word	0x40020040
 8010aec:	40020058 	.word	0x40020058
 8010af0:	40020070 	.word	0x40020070
 8010af4:	40020088 	.word	0x40020088
 8010af8:	400200a0 	.word	0x400200a0
 8010afc:	400200b8 	.word	0x400200b8
 8010b00:	40020410 	.word	0x40020410
 8010b04:	40020428 	.word	0x40020428
 8010b08:	40020440 	.word	0x40020440
 8010b0c:	40020458 	.word	0x40020458
 8010b10:	40020470 	.word	0x40020470
 8010b14:	40020488 	.word	0x40020488
 8010b18:	400204a0 	.word	0x400204a0
 8010b1c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	f000 80cf 	beq.w	8010ce0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010b42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	f000 80ca 	beq.w	8010ce0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b54:	e853 3f00 	ldrex	r3, [r3]
 8010b58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	461a      	mov	r2, r3
 8010b6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8010b70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b76:	e841 2300 	strex	r3, r2, [r1]
 8010b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d1e4      	bne.n	8010b4c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	3308      	adds	r3, #8
 8010b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8c:	e853 3f00 	ldrex	r3, [r3]
 8010b90:	623b      	str	r3, [r7, #32]
   return(result);
 8010b92:	6a3a      	ldr	r2, [r7, #32]
 8010b94:	4b55      	ldr	r3, [pc, #340]	; (8010cec <HAL_UART_IRQHandler+0x770>)
 8010b96:	4013      	ands	r3, r2
 8010b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	3308      	adds	r3, #8
 8010ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8010ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bae:	e841 2300 	strex	r3, r2, [r1]
 8010bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d1e3      	bne.n	8010b82 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2220      	movs	r2, #32
 8010bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	e853 3f00 	ldrex	r3, [r3]
 8010bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	f023 0310 	bic.w	r3, r3, #16
 8010be2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	461a      	mov	r2, r3
 8010bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010bf0:	61fb      	str	r3, [r7, #28]
 8010bf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf4:	69b9      	ldr	r1, [r7, #24]
 8010bf6:	69fa      	ldr	r2, [r7, #28]
 8010bf8:	e841 2300 	strex	r3, r2, [r1]
 8010bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d1e4      	bne.n	8010bce <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2202      	movs	r2, #2
 8010c08:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010c0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010c0e:	4619      	mov	r1, r3
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 f881 	bl	8010d18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010c16:	e063      	b.n	8010ce0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d00e      	beq.n	8010c42 <HAL_UART_IRQHandler+0x6c6>
 8010c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d008      	beq.n	8010c42 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010c38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f001 ff5a 	bl	8012af4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010c40:	e051      	b.n	8010ce6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d014      	beq.n	8010c78 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d105      	bne.n	8010c66 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d008      	beq.n	8010c78 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d03a      	beq.n	8010ce4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	4798      	blx	r3
    }
    return;
 8010c76:	e035      	b.n	8010ce4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d009      	beq.n	8010c98 <HAL_UART_IRQHandler+0x71c>
 8010c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d003      	beq.n	8010c98 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f001 f9e8 	bl	8012066 <UART_EndTransmit_IT>
    return;
 8010c96:	e026      	b.n	8010ce6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d009      	beq.n	8010cb8 <HAL_UART_IRQHandler+0x73c>
 8010ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ca8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d003      	beq.n	8010cb8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f001 ff33 	bl	8012b1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010cb6:	e016      	b.n	8010ce6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d010      	beq.n	8010ce6 <HAL_UART_IRQHandler+0x76a>
 8010cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	da0c      	bge.n	8010ce6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f001 ff1b 	bl	8012b08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010cd2:	e008      	b.n	8010ce6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010cd4:	bf00      	nop
 8010cd6:	e006      	b.n	8010ce6 <HAL_UART_IRQHandler+0x76a>
    return;
 8010cd8:	bf00      	nop
 8010cda:	e004      	b.n	8010ce6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010cdc:	bf00      	nop
 8010cde:	e002      	b.n	8010ce6 <HAL_UART_IRQHandler+0x76a>
      return;
 8010ce0:	bf00      	nop
 8010ce2:	e000      	b.n	8010ce6 <HAL_UART_IRQHandler+0x76a>
    return;
 8010ce4:	bf00      	nop
  }
}
 8010ce6:	37e8      	adds	r7, #232	; 0xe8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	effffffe 	.word	0xeffffffe

08010cf0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b083      	sub	sp, #12
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010cf8:	bf00      	nop
 8010cfa:	370c      	adds	r7, #12
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr

08010d04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b083      	sub	sp, #12
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010d0c:	bf00      	nop
 8010d0e:	370c      	adds	r7, #12
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr

08010d18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b083      	sub	sp, #12
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	460b      	mov	r3, r1
 8010d22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010d24:	bf00      	nop
 8010d26:	370c      	adds	r7, #12
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr

08010d30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010d34:	b092      	sub	sp, #72	; 0x48
 8010d36:	af00      	add	r7, sp, #0
 8010d38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	689a      	ldr	r2, [r3, #8]
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	691b      	ldr	r3, [r3, #16]
 8010d48:	431a      	orrs	r2, r3
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	695b      	ldr	r3, [r3, #20]
 8010d4e:	431a      	orrs	r2, r3
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	69db      	ldr	r3, [r3, #28]
 8010d54:	4313      	orrs	r3, r2
 8010d56:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	681a      	ldr	r2, [r3, #0]
 8010d5e:	4bbe      	ldr	r3, [pc, #760]	; (8011058 <UART_SetConfig+0x328>)
 8010d60:	4013      	ands	r3, r2
 8010d62:	697a      	ldr	r2, [r7, #20]
 8010d64:	6812      	ldr	r2, [r2, #0]
 8010d66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d68:	430b      	orrs	r3, r1
 8010d6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	68da      	ldr	r2, [r3, #12]
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	430a      	orrs	r2, r1
 8010d80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	699b      	ldr	r3, [r3, #24]
 8010d86:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	4ab3      	ldr	r2, [pc, #716]	; (801105c <UART_SetConfig+0x32c>)
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d004      	beq.n	8010d9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	6a1b      	ldr	r3, [r3, #32]
 8010d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d98:	4313      	orrs	r3, r2
 8010d9a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	689a      	ldr	r2, [r3, #8]
 8010da2:	4baf      	ldr	r3, [pc, #700]	; (8011060 <UART_SetConfig+0x330>)
 8010da4:	4013      	ands	r3, r2
 8010da6:	697a      	ldr	r2, [r7, #20]
 8010da8:	6812      	ldr	r2, [r2, #0]
 8010daa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010dac:	430b      	orrs	r3, r1
 8010dae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db6:	f023 010f 	bic.w	r1, r3, #15
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	430a      	orrs	r2, r1
 8010dc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	4aa6      	ldr	r2, [pc, #664]	; (8011064 <UART_SetConfig+0x334>)
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d177      	bne.n	8010ec0 <UART_SetConfig+0x190>
 8010dd0:	4ba5      	ldr	r3, [pc, #660]	; (8011068 <UART_SetConfig+0x338>)
 8010dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010dd8:	2b28      	cmp	r3, #40	; 0x28
 8010dda:	d86d      	bhi.n	8010eb8 <UART_SetConfig+0x188>
 8010ddc:	a201      	add	r2, pc, #4	; (adr r2, 8010de4 <UART_SetConfig+0xb4>)
 8010dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de2:	bf00      	nop
 8010de4:	08010e89 	.word	0x08010e89
 8010de8:	08010eb9 	.word	0x08010eb9
 8010dec:	08010eb9 	.word	0x08010eb9
 8010df0:	08010eb9 	.word	0x08010eb9
 8010df4:	08010eb9 	.word	0x08010eb9
 8010df8:	08010eb9 	.word	0x08010eb9
 8010dfc:	08010eb9 	.word	0x08010eb9
 8010e00:	08010eb9 	.word	0x08010eb9
 8010e04:	08010e91 	.word	0x08010e91
 8010e08:	08010eb9 	.word	0x08010eb9
 8010e0c:	08010eb9 	.word	0x08010eb9
 8010e10:	08010eb9 	.word	0x08010eb9
 8010e14:	08010eb9 	.word	0x08010eb9
 8010e18:	08010eb9 	.word	0x08010eb9
 8010e1c:	08010eb9 	.word	0x08010eb9
 8010e20:	08010eb9 	.word	0x08010eb9
 8010e24:	08010e99 	.word	0x08010e99
 8010e28:	08010eb9 	.word	0x08010eb9
 8010e2c:	08010eb9 	.word	0x08010eb9
 8010e30:	08010eb9 	.word	0x08010eb9
 8010e34:	08010eb9 	.word	0x08010eb9
 8010e38:	08010eb9 	.word	0x08010eb9
 8010e3c:	08010eb9 	.word	0x08010eb9
 8010e40:	08010eb9 	.word	0x08010eb9
 8010e44:	08010ea1 	.word	0x08010ea1
 8010e48:	08010eb9 	.word	0x08010eb9
 8010e4c:	08010eb9 	.word	0x08010eb9
 8010e50:	08010eb9 	.word	0x08010eb9
 8010e54:	08010eb9 	.word	0x08010eb9
 8010e58:	08010eb9 	.word	0x08010eb9
 8010e5c:	08010eb9 	.word	0x08010eb9
 8010e60:	08010eb9 	.word	0x08010eb9
 8010e64:	08010ea9 	.word	0x08010ea9
 8010e68:	08010eb9 	.word	0x08010eb9
 8010e6c:	08010eb9 	.word	0x08010eb9
 8010e70:	08010eb9 	.word	0x08010eb9
 8010e74:	08010eb9 	.word	0x08010eb9
 8010e78:	08010eb9 	.word	0x08010eb9
 8010e7c:	08010eb9 	.word	0x08010eb9
 8010e80:	08010eb9 	.word	0x08010eb9
 8010e84:	08010eb1 	.word	0x08010eb1
 8010e88:	2301      	movs	r3, #1
 8010e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8e:	e222      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010e90:	2304      	movs	r3, #4
 8010e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e96:	e21e      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010e98:	2308      	movs	r3, #8
 8010e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9e:	e21a      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010ea0:	2310      	movs	r3, #16
 8010ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea6:	e216      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010ea8:	2320      	movs	r3, #32
 8010eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eae:	e212      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010eb0:	2340      	movs	r3, #64	; 0x40
 8010eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb6:	e20e      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010eb8:	2380      	movs	r3, #128	; 0x80
 8010eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ebe:	e20a      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4a69      	ldr	r2, [pc, #420]	; (801106c <UART_SetConfig+0x33c>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d130      	bne.n	8010f2c <UART_SetConfig+0x1fc>
 8010eca:	4b67      	ldr	r3, [pc, #412]	; (8011068 <UART_SetConfig+0x338>)
 8010ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ece:	f003 0307 	and.w	r3, r3, #7
 8010ed2:	2b05      	cmp	r3, #5
 8010ed4:	d826      	bhi.n	8010f24 <UART_SetConfig+0x1f4>
 8010ed6:	a201      	add	r2, pc, #4	; (adr r2, 8010edc <UART_SetConfig+0x1ac>)
 8010ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010edc:	08010ef5 	.word	0x08010ef5
 8010ee0:	08010efd 	.word	0x08010efd
 8010ee4:	08010f05 	.word	0x08010f05
 8010ee8:	08010f0d 	.word	0x08010f0d
 8010eec:	08010f15 	.word	0x08010f15
 8010ef0:	08010f1d 	.word	0x08010f1d
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efa:	e1ec      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010efc:	2304      	movs	r3, #4
 8010efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f02:	e1e8      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f04:	2308      	movs	r3, #8
 8010f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f0a:	e1e4      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f0c:	2310      	movs	r3, #16
 8010f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f12:	e1e0      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f14:	2320      	movs	r3, #32
 8010f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1a:	e1dc      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f1c:	2340      	movs	r3, #64	; 0x40
 8010f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f22:	e1d8      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f24:	2380      	movs	r3, #128	; 0x80
 8010f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2a:	e1d4      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a4f      	ldr	r2, [pc, #316]	; (8011070 <UART_SetConfig+0x340>)
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d130      	bne.n	8010f98 <UART_SetConfig+0x268>
 8010f36:	4b4c      	ldr	r3, [pc, #304]	; (8011068 <UART_SetConfig+0x338>)
 8010f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f3a:	f003 0307 	and.w	r3, r3, #7
 8010f3e:	2b05      	cmp	r3, #5
 8010f40:	d826      	bhi.n	8010f90 <UART_SetConfig+0x260>
 8010f42:	a201      	add	r2, pc, #4	; (adr r2, 8010f48 <UART_SetConfig+0x218>)
 8010f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f48:	08010f61 	.word	0x08010f61
 8010f4c:	08010f69 	.word	0x08010f69
 8010f50:	08010f71 	.word	0x08010f71
 8010f54:	08010f79 	.word	0x08010f79
 8010f58:	08010f81 	.word	0x08010f81
 8010f5c:	08010f89 	.word	0x08010f89
 8010f60:	2300      	movs	r3, #0
 8010f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f66:	e1b6      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f68:	2304      	movs	r3, #4
 8010f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6e:	e1b2      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f70:	2308      	movs	r3, #8
 8010f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f76:	e1ae      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f78:	2310      	movs	r3, #16
 8010f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f7e:	e1aa      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f80:	2320      	movs	r3, #32
 8010f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f86:	e1a6      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f88:	2340      	movs	r3, #64	; 0x40
 8010f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f8e:	e1a2      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f90:	2380      	movs	r3, #128	; 0x80
 8010f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f96:	e19e      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	4a35      	ldr	r2, [pc, #212]	; (8011074 <UART_SetConfig+0x344>)
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d130      	bne.n	8011004 <UART_SetConfig+0x2d4>
 8010fa2:	4b31      	ldr	r3, [pc, #196]	; (8011068 <UART_SetConfig+0x338>)
 8010fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fa6:	f003 0307 	and.w	r3, r3, #7
 8010faa:	2b05      	cmp	r3, #5
 8010fac:	d826      	bhi.n	8010ffc <UART_SetConfig+0x2cc>
 8010fae:	a201      	add	r2, pc, #4	; (adr r2, 8010fb4 <UART_SetConfig+0x284>)
 8010fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb4:	08010fcd 	.word	0x08010fcd
 8010fb8:	08010fd5 	.word	0x08010fd5
 8010fbc:	08010fdd 	.word	0x08010fdd
 8010fc0:	08010fe5 	.word	0x08010fe5
 8010fc4:	08010fed 	.word	0x08010fed
 8010fc8:	08010ff5 	.word	0x08010ff5
 8010fcc:	2300      	movs	r3, #0
 8010fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fd2:	e180      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010fd4:	2304      	movs	r3, #4
 8010fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fda:	e17c      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010fdc:	2308      	movs	r3, #8
 8010fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe2:	e178      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010fe4:	2310      	movs	r3, #16
 8010fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fea:	e174      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010fec:	2320      	movs	r3, #32
 8010fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ff2:	e170      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010ff4:	2340      	movs	r3, #64	; 0x40
 8010ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ffa:	e16c      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8010ffc:	2380      	movs	r3, #128	; 0x80
 8010ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011002:	e168      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	4a1b      	ldr	r2, [pc, #108]	; (8011078 <UART_SetConfig+0x348>)
 801100a:	4293      	cmp	r3, r2
 801100c:	d142      	bne.n	8011094 <UART_SetConfig+0x364>
 801100e:	4b16      	ldr	r3, [pc, #88]	; (8011068 <UART_SetConfig+0x338>)
 8011010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011012:	f003 0307 	and.w	r3, r3, #7
 8011016:	2b05      	cmp	r3, #5
 8011018:	d838      	bhi.n	801108c <UART_SetConfig+0x35c>
 801101a:	a201      	add	r2, pc, #4	; (adr r2, 8011020 <UART_SetConfig+0x2f0>)
 801101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011020:	08011039 	.word	0x08011039
 8011024:	08011041 	.word	0x08011041
 8011028:	08011049 	.word	0x08011049
 801102c:	08011051 	.word	0x08011051
 8011030:	0801107d 	.word	0x0801107d
 8011034:	08011085 	.word	0x08011085
 8011038:	2300      	movs	r3, #0
 801103a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103e:	e14a      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011040:	2304      	movs	r3, #4
 8011042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011046:	e146      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011048:	2308      	movs	r3, #8
 801104a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104e:	e142      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011050:	2310      	movs	r3, #16
 8011052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011056:	e13e      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011058:	cfff69f3 	.word	0xcfff69f3
 801105c:	58000c00 	.word	0x58000c00
 8011060:	11fff4ff 	.word	0x11fff4ff
 8011064:	40011000 	.word	0x40011000
 8011068:	58024400 	.word	0x58024400
 801106c:	40004400 	.word	0x40004400
 8011070:	40004800 	.word	0x40004800
 8011074:	40004c00 	.word	0x40004c00
 8011078:	40005000 	.word	0x40005000
 801107c:	2320      	movs	r3, #32
 801107e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011082:	e128      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011084:	2340      	movs	r3, #64	; 0x40
 8011086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108a:	e124      	b.n	80112d6 <UART_SetConfig+0x5a6>
 801108c:	2380      	movs	r3, #128	; 0x80
 801108e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011092:	e120      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	4acb      	ldr	r2, [pc, #812]	; (80113c8 <UART_SetConfig+0x698>)
 801109a:	4293      	cmp	r3, r2
 801109c:	d176      	bne.n	801118c <UART_SetConfig+0x45c>
 801109e:	4bcb      	ldr	r3, [pc, #812]	; (80113cc <UART_SetConfig+0x69c>)
 80110a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80110a6:	2b28      	cmp	r3, #40	; 0x28
 80110a8:	d86c      	bhi.n	8011184 <UART_SetConfig+0x454>
 80110aa:	a201      	add	r2, pc, #4	; (adr r2, 80110b0 <UART_SetConfig+0x380>)
 80110ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b0:	08011155 	.word	0x08011155
 80110b4:	08011185 	.word	0x08011185
 80110b8:	08011185 	.word	0x08011185
 80110bc:	08011185 	.word	0x08011185
 80110c0:	08011185 	.word	0x08011185
 80110c4:	08011185 	.word	0x08011185
 80110c8:	08011185 	.word	0x08011185
 80110cc:	08011185 	.word	0x08011185
 80110d0:	0801115d 	.word	0x0801115d
 80110d4:	08011185 	.word	0x08011185
 80110d8:	08011185 	.word	0x08011185
 80110dc:	08011185 	.word	0x08011185
 80110e0:	08011185 	.word	0x08011185
 80110e4:	08011185 	.word	0x08011185
 80110e8:	08011185 	.word	0x08011185
 80110ec:	08011185 	.word	0x08011185
 80110f0:	08011165 	.word	0x08011165
 80110f4:	08011185 	.word	0x08011185
 80110f8:	08011185 	.word	0x08011185
 80110fc:	08011185 	.word	0x08011185
 8011100:	08011185 	.word	0x08011185
 8011104:	08011185 	.word	0x08011185
 8011108:	08011185 	.word	0x08011185
 801110c:	08011185 	.word	0x08011185
 8011110:	0801116d 	.word	0x0801116d
 8011114:	08011185 	.word	0x08011185
 8011118:	08011185 	.word	0x08011185
 801111c:	08011185 	.word	0x08011185
 8011120:	08011185 	.word	0x08011185
 8011124:	08011185 	.word	0x08011185
 8011128:	08011185 	.word	0x08011185
 801112c:	08011185 	.word	0x08011185
 8011130:	08011175 	.word	0x08011175
 8011134:	08011185 	.word	0x08011185
 8011138:	08011185 	.word	0x08011185
 801113c:	08011185 	.word	0x08011185
 8011140:	08011185 	.word	0x08011185
 8011144:	08011185 	.word	0x08011185
 8011148:	08011185 	.word	0x08011185
 801114c:	08011185 	.word	0x08011185
 8011150:	0801117d 	.word	0x0801117d
 8011154:	2301      	movs	r3, #1
 8011156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115a:	e0bc      	b.n	80112d6 <UART_SetConfig+0x5a6>
 801115c:	2304      	movs	r3, #4
 801115e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011162:	e0b8      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011164:	2308      	movs	r3, #8
 8011166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116a:	e0b4      	b.n	80112d6 <UART_SetConfig+0x5a6>
 801116c:	2310      	movs	r3, #16
 801116e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011172:	e0b0      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011174:	2320      	movs	r3, #32
 8011176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117a:	e0ac      	b.n	80112d6 <UART_SetConfig+0x5a6>
 801117c:	2340      	movs	r3, #64	; 0x40
 801117e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011182:	e0a8      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011184:	2380      	movs	r3, #128	; 0x80
 8011186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118a:	e0a4      	b.n	80112d6 <UART_SetConfig+0x5a6>
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4a8f      	ldr	r2, [pc, #572]	; (80113d0 <UART_SetConfig+0x6a0>)
 8011192:	4293      	cmp	r3, r2
 8011194:	d130      	bne.n	80111f8 <UART_SetConfig+0x4c8>
 8011196:	4b8d      	ldr	r3, [pc, #564]	; (80113cc <UART_SetConfig+0x69c>)
 8011198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801119a:	f003 0307 	and.w	r3, r3, #7
 801119e:	2b05      	cmp	r3, #5
 80111a0:	d826      	bhi.n	80111f0 <UART_SetConfig+0x4c0>
 80111a2:	a201      	add	r2, pc, #4	; (adr r2, 80111a8 <UART_SetConfig+0x478>)
 80111a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111a8:	080111c1 	.word	0x080111c1
 80111ac:	080111c9 	.word	0x080111c9
 80111b0:	080111d1 	.word	0x080111d1
 80111b4:	080111d9 	.word	0x080111d9
 80111b8:	080111e1 	.word	0x080111e1
 80111bc:	080111e9 	.word	0x080111e9
 80111c0:	2300      	movs	r3, #0
 80111c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c6:	e086      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80111c8:	2304      	movs	r3, #4
 80111ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ce:	e082      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80111d0:	2308      	movs	r3, #8
 80111d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d6:	e07e      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80111d8:	2310      	movs	r3, #16
 80111da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111de:	e07a      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80111e0:	2320      	movs	r3, #32
 80111e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111e6:	e076      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80111e8:	2340      	movs	r3, #64	; 0x40
 80111ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ee:	e072      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80111f0:	2380      	movs	r3, #128	; 0x80
 80111f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f6:	e06e      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	4a75      	ldr	r2, [pc, #468]	; (80113d4 <UART_SetConfig+0x6a4>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	d130      	bne.n	8011264 <UART_SetConfig+0x534>
 8011202:	4b72      	ldr	r3, [pc, #456]	; (80113cc <UART_SetConfig+0x69c>)
 8011204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011206:	f003 0307 	and.w	r3, r3, #7
 801120a:	2b05      	cmp	r3, #5
 801120c:	d826      	bhi.n	801125c <UART_SetConfig+0x52c>
 801120e:	a201      	add	r2, pc, #4	; (adr r2, 8011214 <UART_SetConfig+0x4e4>)
 8011210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011214:	0801122d 	.word	0x0801122d
 8011218:	08011235 	.word	0x08011235
 801121c:	0801123d 	.word	0x0801123d
 8011220:	08011245 	.word	0x08011245
 8011224:	0801124d 	.word	0x0801124d
 8011228:	08011255 	.word	0x08011255
 801122c:	2300      	movs	r3, #0
 801122e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011232:	e050      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011234:	2304      	movs	r3, #4
 8011236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123a:	e04c      	b.n	80112d6 <UART_SetConfig+0x5a6>
 801123c:	2308      	movs	r3, #8
 801123e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011242:	e048      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011244:	2310      	movs	r3, #16
 8011246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801124a:	e044      	b.n	80112d6 <UART_SetConfig+0x5a6>
 801124c:	2320      	movs	r3, #32
 801124e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011252:	e040      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011254:	2340      	movs	r3, #64	; 0x40
 8011256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801125a:	e03c      	b.n	80112d6 <UART_SetConfig+0x5a6>
 801125c:	2380      	movs	r3, #128	; 0x80
 801125e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011262:	e038      	b.n	80112d6 <UART_SetConfig+0x5a6>
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4a5b      	ldr	r2, [pc, #364]	; (80113d8 <UART_SetConfig+0x6a8>)
 801126a:	4293      	cmp	r3, r2
 801126c:	d130      	bne.n	80112d0 <UART_SetConfig+0x5a0>
 801126e:	4b57      	ldr	r3, [pc, #348]	; (80113cc <UART_SetConfig+0x69c>)
 8011270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011272:	f003 0307 	and.w	r3, r3, #7
 8011276:	2b05      	cmp	r3, #5
 8011278:	d826      	bhi.n	80112c8 <UART_SetConfig+0x598>
 801127a:	a201      	add	r2, pc, #4	; (adr r2, 8011280 <UART_SetConfig+0x550>)
 801127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011280:	08011299 	.word	0x08011299
 8011284:	080112a1 	.word	0x080112a1
 8011288:	080112a9 	.word	0x080112a9
 801128c:	080112b1 	.word	0x080112b1
 8011290:	080112b9 	.word	0x080112b9
 8011294:	080112c1 	.word	0x080112c1
 8011298:	2302      	movs	r3, #2
 801129a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801129e:	e01a      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80112a0:	2304      	movs	r3, #4
 80112a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112a6:	e016      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80112a8:	2308      	movs	r3, #8
 80112aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ae:	e012      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80112b0:	2310      	movs	r3, #16
 80112b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b6:	e00e      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80112b8:	2320      	movs	r3, #32
 80112ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112be:	e00a      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80112c0:	2340      	movs	r3, #64	; 0x40
 80112c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c6:	e006      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80112c8:	2380      	movs	r3, #128	; 0x80
 80112ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ce:	e002      	b.n	80112d6 <UART_SetConfig+0x5a6>
 80112d0:	2380      	movs	r3, #128	; 0x80
 80112d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	4a3f      	ldr	r2, [pc, #252]	; (80113d8 <UART_SetConfig+0x6a8>)
 80112dc:	4293      	cmp	r3, r2
 80112de:	f040 80f8 	bne.w	80114d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80112e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112e6:	2b20      	cmp	r3, #32
 80112e8:	dc46      	bgt.n	8011378 <UART_SetConfig+0x648>
 80112ea:	2b02      	cmp	r3, #2
 80112ec:	f2c0 8082 	blt.w	80113f4 <UART_SetConfig+0x6c4>
 80112f0:	3b02      	subs	r3, #2
 80112f2:	2b1e      	cmp	r3, #30
 80112f4:	d87e      	bhi.n	80113f4 <UART_SetConfig+0x6c4>
 80112f6:	a201      	add	r2, pc, #4	; (adr r2, 80112fc <UART_SetConfig+0x5cc>)
 80112f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112fc:	0801137f 	.word	0x0801137f
 8011300:	080113f5 	.word	0x080113f5
 8011304:	08011387 	.word	0x08011387
 8011308:	080113f5 	.word	0x080113f5
 801130c:	080113f5 	.word	0x080113f5
 8011310:	080113f5 	.word	0x080113f5
 8011314:	08011397 	.word	0x08011397
 8011318:	080113f5 	.word	0x080113f5
 801131c:	080113f5 	.word	0x080113f5
 8011320:	080113f5 	.word	0x080113f5
 8011324:	080113f5 	.word	0x080113f5
 8011328:	080113f5 	.word	0x080113f5
 801132c:	080113f5 	.word	0x080113f5
 8011330:	080113f5 	.word	0x080113f5
 8011334:	080113a7 	.word	0x080113a7
 8011338:	080113f5 	.word	0x080113f5
 801133c:	080113f5 	.word	0x080113f5
 8011340:	080113f5 	.word	0x080113f5
 8011344:	080113f5 	.word	0x080113f5
 8011348:	080113f5 	.word	0x080113f5
 801134c:	080113f5 	.word	0x080113f5
 8011350:	080113f5 	.word	0x080113f5
 8011354:	080113f5 	.word	0x080113f5
 8011358:	080113f5 	.word	0x080113f5
 801135c:	080113f5 	.word	0x080113f5
 8011360:	080113f5 	.word	0x080113f5
 8011364:	080113f5 	.word	0x080113f5
 8011368:	080113f5 	.word	0x080113f5
 801136c:	080113f5 	.word	0x080113f5
 8011370:	080113f5 	.word	0x080113f5
 8011374:	080113e7 	.word	0x080113e7
 8011378:	2b40      	cmp	r3, #64	; 0x40
 801137a:	d037      	beq.n	80113ec <UART_SetConfig+0x6bc>
 801137c:	e03a      	b.n	80113f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801137e:	f7fb fce5 	bl	800cd4c <HAL_RCCEx_GetD3PCLK1Freq>
 8011382:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011384:	e03c      	b.n	8011400 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801138a:	4618      	mov	r0, r3
 801138c:	f7fb fcf4 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011394:	e034      	b.n	8011400 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011396:	f107 0318 	add.w	r3, r7, #24
 801139a:	4618      	mov	r0, r3
 801139c:	f7fb fe40 	bl	800d020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113a4:	e02c      	b.n	8011400 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113a6:	4b09      	ldr	r3, [pc, #36]	; (80113cc <UART_SetConfig+0x69c>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f003 0320 	and.w	r3, r3, #32
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d016      	beq.n	80113e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80113b2:	4b06      	ldr	r3, [pc, #24]	; (80113cc <UART_SetConfig+0x69c>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	08db      	lsrs	r3, r3, #3
 80113b8:	f003 0303 	and.w	r3, r3, #3
 80113bc:	4a07      	ldr	r2, [pc, #28]	; (80113dc <UART_SetConfig+0x6ac>)
 80113be:	fa22 f303 	lsr.w	r3, r2, r3
 80113c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80113c4:	e01c      	b.n	8011400 <UART_SetConfig+0x6d0>
 80113c6:	bf00      	nop
 80113c8:	40011400 	.word	0x40011400
 80113cc:	58024400 	.word	0x58024400
 80113d0:	40007800 	.word	0x40007800
 80113d4:	40007c00 	.word	0x40007c00
 80113d8:	58000c00 	.word	0x58000c00
 80113dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80113e0:	4b9d      	ldr	r3, [pc, #628]	; (8011658 <UART_SetConfig+0x928>)
 80113e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113e4:	e00c      	b.n	8011400 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80113e6:	4b9d      	ldr	r3, [pc, #628]	; (801165c <UART_SetConfig+0x92c>)
 80113e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113ea:	e009      	b.n	8011400 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113f2:	e005      	b.n	8011400 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80113f4:	2300      	movs	r3, #0
 80113f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80113f8:	2301      	movs	r3, #1
 80113fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80113fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011402:	2b00      	cmp	r3, #0
 8011404:	f000 81de 	beq.w	80117c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801140c:	4a94      	ldr	r2, [pc, #592]	; (8011660 <UART_SetConfig+0x930>)
 801140e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011412:	461a      	mov	r2, r3
 8011414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011416:	fbb3 f3f2 	udiv	r3, r3, r2
 801141a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	685a      	ldr	r2, [r3, #4]
 8011420:	4613      	mov	r3, r2
 8011422:	005b      	lsls	r3, r3, #1
 8011424:	4413      	add	r3, r2
 8011426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011428:	429a      	cmp	r2, r3
 801142a:	d305      	bcc.n	8011438 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011434:	429a      	cmp	r2, r3
 8011436:	d903      	bls.n	8011440 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011438:	2301      	movs	r3, #1
 801143a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801143e:	e1c1      	b.n	80117c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011442:	2200      	movs	r2, #0
 8011444:	60bb      	str	r3, [r7, #8]
 8011446:	60fa      	str	r2, [r7, #12]
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801144c:	4a84      	ldr	r2, [pc, #528]	; (8011660 <UART_SetConfig+0x930>)
 801144e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011452:	b29b      	uxth	r3, r3
 8011454:	2200      	movs	r2, #0
 8011456:	603b      	str	r3, [r7, #0]
 8011458:	607a      	str	r2, [r7, #4]
 801145a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801145e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011462:	f7ee ff3d 	bl	80002e0 <__aeabi_uldivmod>
 8011466:	4602      	mov	r2, r0
 8011468:	460b      	mov	r3, r1
 801146a:	4610      	mov	r0, r2
 801146c:	4619      	mov	r1, r3
 801146e:	f04f 0200 	mov.w	r2, #0
 8011472:	f04f 0300 	mov.w	r3, #0
 8011476:	020b      	lsls	r3, r1, #8
 8011478:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801147c:	0202      	lsls	r2, r0, #8
 801147e:	6979      	ldr	r1, [r7, #20]
 8011480:	6849      	ldr	r1, [r1, #4]
 8011482:	0849      	lsrs	r1, r1, #1
 8011484:	2000      	movs	r0, #0
 8011486:	460c      	mov	r4, r1
 8011488:	4605      	mov	r5, r0
 801148a:	eb12 0804 	adds.w	r8, r2, r4
 801148e:	eb43 0905 	adc.w	r9, r3, r5
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	2200      	movs	r2, #0
 8011498:	469a      	mov	sl, r3
 801149a:	4693      	mov	fp, r2
 801149c:	4652      	mov	r2, sl
 801149e:	465b      	mov	r3, fp
 80114a0:	4640      	mov	r0, r8
 80114a2:	4649      	mov	r1, r9
 80114a4:	f7ee ff1c 	bl	80002e0 <__aeabi_uldivmod>
 80114a8:	4602      	mov	r2, r0
 80114aa:	460b      	mov	r3, r1
 80114ac:	4613      	mov	r3, r2
 80114ae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80114b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80114b6:	d308      	bcc.n	80114ca <UART_SetConfig+0x79a>
 80114b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80114be:	d204      	bcs.n	80114ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114c6:	60da      	str	r2, [r3, #12]
 80114c8:	e17c      	b.n	80117c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80114ca:	2301      	movs	r3, #1
 80114cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80114d0:	e178      	b.n	80117c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	69db      	ldr	r3, [r3, #28]
 80114d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114da:	f040 80c5 	bne.w	8011668 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80114de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80114e2:	2b20      	cmp	r3, #32
 80114e4:	dc48      	bgt.n	8011578 <UART_SetConfig+0x848>
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	db7b      	blt.n	80115e2 <UART_SetConfig+0x8b2>
 80114ea:	2b20      	cmp	r3, #32
 80114ec:	d879      	bhi.n	80115e2 <UART_SetConfig+0x8b2>
 80114ee:	a201      	add	r2, pc, #4	; (adr r2, 80114f4 <UART_SetConfig+0x7c4>)
 80114f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f4:	0801157f 	.word	0x0801157f
 80114f8:	08011587 	.word	0x08011587
 80114fc:	080115e3 	.word	0x080115e3
 8011500:	080115e3 	.word	0x080115e3
 8011504:	0801158f 	.word	0x0801158f
 8011508:	080115e3 	.word	0x080115e3
 801150c:	080115e3 	.word	0x080115e3
 8011510:	080115e3 	.word	0x080115e3
 8011514:	0801159f 	.word	0x0801159f
 8011518:	080115e3 	.word	0x080115e3
 801151c:	080115e3 	.word	0x080115e3
 8011520:	080115e3 	.word	0x080115e3
 8011524:	080115e3 	.word	0x080115e3
 8011528:	080115e3 	.word	0x080115e3
 801152c:	080115e3 	.word	0x080115e3
 8011530:	080115e3 	.word	0x080115e3
 8011534:	080115af 	.word	0x080115af
 8011538:	080115e3 	.word	0x080115e3
 801153c:	080115e3 	.word	0x080115e3
 8011540:	080115e3 	.word	0x080115e3
 8011544:	080115e3 	.word	0x080115e3
 8011548:	080115e3 	.word	0x080115e3
 801154c:	080115e3 	.word	0x080115e3
 8011550:	080115e3 	.word	0x080115e3
 8011554:	080115e3 	.word	0x080115e3
 8011558:	080115e3 	.word	0x080115e3
 801155c:	080115e3 	.word	0x080115e3
 8011560:	080115e3 	.word	0x080115e3
 8011564:	080115e3 	.word	0x080115e3
 8011568:	080115e3 	.word	0x080115e3
 801156c:	080115e3 	.word	0x080115e3
 8011570:	080115e3 	.word	0x080115e3
 8011574:	080115d5 	.word	0x080115d5
 8011578:	2b40      	cmp	r3, #64	; 0x40
 801157a:	d02e      	beq.n	80115da <UART_SetConfig+0x8aa>
 801157c:	e031      	b.n	80115e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801157e:	f7f9 fbed 	bl	800ad5c <HAL_RCC_GetPCLK1Freq>
 8011582:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011584:	e033      	b.n	80115ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011586:	f7f9 fbff 	bl	800ad88 <HAL_RCC_GetPCLK2Freq>
 801158a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801158c:	e02f      	b.n	80115ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011592:	4618      	mov	r0, r3
 8011594:	f7fb fbf0 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801159a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801159c:	e027      	b.n	80115ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801159e:	f107 0318 	add.w	r3, r7, #24
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fb fd3c 	bl	800d020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115ac:	e01f      	b.n	80115ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115ae:	4b2d      	ldr	r3, [pc, #180]	; (8011664 <UART_SetConfig+0x934>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	f003 0320 	and.w	r3, r3, #32
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d009      	beq.n	80115ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80115ba:	4b2a      	ldr	r3, [pc, #168]	; (8011664 <UART_SetConfig+0x934>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	08db      	lsrs	r3, r3, #3
 80115c0:	f003 0303 	and.w	r3, r3, #3
 80115c4:	4a24      	ldr	r2, [pc, #144]	; (8011658 <UART_SetConfig+0x928>)
 80115c6:	fa22 f303 	lsr.w	r3, r2, r3
 80115ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80115cc:	e00f      	b.n	80115ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80115ce:	4b22      	ldr	r3, [pc, #136]	; (8011658 <UART_SetConfig+0x928>)
 80115d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115d2:	e00c      	b.n	80115ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80115d4:	4b21      	ldr	r3, [pc, #132]	; (801165c <UART_SetConfig+0x92c>)
 80115d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115d8:	e009      	b.n	80115ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80115da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80115de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115e0:	e005      	b.n	80115ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80115e2:	2300      	movs	r3, #0
 80115e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80115e6:	2301      	movs	r3, #1
 80115e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80115ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80115ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f000 80e7 	beq.w	80117c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115fa:	4a19      	ldr	r2, [pc, #100]	; (8011660 <UART_SetConfig+0x930>)
 80115fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011600:	461a      	mov	r2, r3
 8011602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011604:	fbb3 f3f2 	udiv	r3, r3, r2
 8011608:	005a      	lsls	r2, r3, #1
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	085b      	lsrs	r3, r3, #1
 8011610:	441a      	add	r2, r3
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	fbb2 f3f3 	udiv	r3, r2, r3
 801161a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801161c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161e:	2b0f      	cmp	r3, #15
 8011620:	d916      	bls.n	8011650 <UART_SetConfig+0x920>
 8011622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011628:	d212      	bcs.n	8011650 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801162a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162c:	b29b      	uxth	r3, r3
 801162e:	f023 030f 	bic.w	r3, r3, #15
 8011632:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011636:	085b      	lsrs	r3, r3, #1
 8011638:	b29b      	uxth	r3, r3
 801163a:	f003 0307 	and.w	r3, r3, #7
 801163e:	b29a      	uxth	r2, r3
 8011640:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011642:	4313      	orrs	r3, r2
 8011644:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801164c:	60da      	str	r2, [r3, #12]
 801164e:	e0b9      	b.n	80117c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011650:	2301      	movs	r3, #1
 8011652:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011656:	e0b5      	b.n	80117c4 <UART_SetConfig+0xa94>
 8011658:	03d09000 	.word	0x03d09000
 801165c:	003d0900 	.word	0x003d0900
 8011660:	080177e8 	.word	0x080177e8
 8011664:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011668:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801166c:	2b20      	cmp	r3, #32
 801166e:	dc49      	bgt.n	8011704 <UART_SetConfig+0x9d4>
 8011670:	2b00      	cmp	r3, #0
 8011672:	db7c      	blt.n	801176e <UART_SetConfig+0xa3e>
 8011674:	2b20      	cmp	r3, #32
 8011676:	d87a      	bhi.n	801176e <UART_SetConfig+0xa3e>
 8011678:	a201      	add	r2, pc, #4	; (adr r2, 8011680 <UART_SetConfig+0x950>)
 801167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801167e:	bf00      	nop
 8011680:	0801170b 	.word	0x0801170b
 8011684:	08011713 	.word	0x08011713
 8011688:	0801176f 	.word	0x0801176f
 801168c:	0801176f 	.word	0x0801176f
 8011690:	0801171b 	.word	0x0801171b
 8011694:	0801176f 	.word	0x0801176f
 8011698:	0801176f 	.word	0x0801176f
 801169c:	0801176f 	.word	0x0801176f
 80116a0:	0801172b 	.word	0x0801172b
 80116a4:	0801176f 	.word	0x0801176f
 80116a8:	0801176f 	.word	0x0801176f
 80116ac:	0801176f 	.word	0x0801176f
 80116b0:	0801176f 	.word	0x0801176f
 80116b4:	0801176f 	.word	0x0801176f
 80116b8:	0801176f 	.word	0x0801176f
 80116bc:	0801176f 	.word	0x0801176f
 80116c0:	0801173b 	.word	0x0801173b
 80116c4:	0801176f 	.word	0x0801176f
 80116c8:	0801176f 	.word	0x0801176f
 80116cc:	0801176f 	.word	0x0801176f
 80116d0:	0801176f 	.word	0x0801176f
 80116d4:	0801176f 	.word	0x0801176f
 80116d8:	0801176f 	.word	0x0801176f
 80116dc:	0801176f 	.word	0x0801176f
 80116e0:	0801176f 	.word	0x0801176f
 80116e4:	0801176f 	.word	0x0801176f
 80116e8:	0801176f 	.word	0x0801176f
 80116ec:	0801176f 	.word	0x0801176f
 80116f0:	0801176f 	.word	0x0801176f
 80116f4:	0801176f 	.word	0x0801176f
 80116f8:	0801176f 	.word	0x0801176f
 80116fc:	0801176f 	.word	0x0801176f
 8011700:	08011761 	.word	0x08011761
 8011704:	2b40      	cmp	r3, #64	; 0x40
 8011706:	d02e      	beq.n	8011766 <UART_SetConfig+0xa36>
 8011708:	e031      	b.n	801176e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801170a:	f7f9 fb27 	bl	800ad5c <HAL_RCC_GetPCLK1Freq>
 801170e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011710:	e033      	b.n	801177a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011712:	f7f9 fb39 	bl	800ad88 <HAL_RCC_GetPCLK2Freq>
 8011716:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011718:	e02f      	b.n	801177a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801171e:	4618      	mov	r0, r3
 8011720:	f7fb fb2a 	bl	800cd78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011728:	e027      	b.n	801177a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801172a:	f107 0318 	add.w	r3, r7, #24
 801172e:	4618      	mov	r0, r3
 8011730:	f7fb fc76 	bl	800d020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011734:	69fb      	ldr	r3, [r7, #28]
 8011736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011738:	e01f      	b.n	801177a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801173a:	4b2d      	ldr	r3, [pc, #180]	; (80117f0 <UART_SetConfig+0xac0>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	f003 0320 	and.w	r3, r3, #32
 8011742:	2b00      	cmp	r3, #0
 8011744:	d009      	beq.n	801175a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011746:	4b2a      	ldr	r3, [pc, #168]	; (80117f0 <UART_SetConfig+0xac0>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	08db      	lsrs	r3, r3, #3
 801174c:	f003 0303 	and.w	r3, r3, #3
 8011750:	4a28      	ldr	r2, [pc, #160]	; (80117f4 <UART_SetConfig+0xac4>)
 8011752:	fa22 f303 	lsr.w	r3, r2, r3
 8011756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011758:	e00f      	b.n	801177a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801175a:	4b26      	ldr	r3, [pc, #152]	; (80117f4 <UART_SetConfig+0xac4>)
 801175c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801175e:	e00c      	b.n	801177a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011760:	4b25      	ldr	r3, [pc, #148]	; (80117f8 <UART_SetConfig+0xac8>)
 8011762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011764:	e009      	b.n	801177a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801176a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801176c:	e005      	b.n	801177a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801176e:	2300      	movs	r3, #0
 8011770:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011772:	2301      	movs	r3, #1
 8011774:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011778:	bf00      	nop
    }

    if (pclk != 0U)
 801177a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801177c:	2b00      	cmp	r3, #0
 801177e:	d021      	beq.n	80117c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011784:	4a1d      	ldr	r2, [pc, #116]	; (80117fc <UART_SetConfig+0xacc>)
 8011786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801178a:	461a      	mov	r2, r3
 801178c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801178e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	085b      	lsrs	r3, r3, #1
 8011798:	441a      	add	r2, r3
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80117a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a6:	2b0f      	cmp	r3, #15
 80117a8:	d909      	bls.n	80117be <UART_SetConfig+0xa8e>
 80117aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117b0:	d205      	bcs.n	80117be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80117b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b4:	b29a      	uxth	r2, r3
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	60da      	str	r2, [r3, #12]
 80117bc:	e002      	b.n	80117c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80117be:	2301      	movs	r3, #1
 80117c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	2201      	movs	r2, #1
 80117c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	2201      	movs	r2, #1
 80117d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	2200      	movs	r2, #0
 80117d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	2200      	movs	r2, #0
 80117de:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80117e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3748      	adds	r7, #72	; 0x48
 80117e8:	46bd      	mov	sp, r7
 80117ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80117ee:	bf00      	nop
 80117f0:	58024400 	.word	0x58024400
 80117f4:	03d09000 	.word	0x03d09000
 80117f8:	003d0900 	.word	0x003d0900
 80117fc:	080177e8 	.word	0x080177e8

08011800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801180c:	f003 0308 	and.w	r3, r3, #8
 8011810:	2b00      	cmp	r3, #0
 8011812:	d00a      	beq.n	801182a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	430a      	orrs	r2, r1
 8011828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801182e:	f003 0301 	and.w	r3, r3, #1
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00a      	beq.n	801184c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	685b      	ldr	r3, [r3, #4]
 801183c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	430a      	orrs	r2, r1
 801184a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011850:	f003 0302 	and.w	r3, r3, #2
 8011854:	2b00      	cmp	r3, #0
 8011856:	d00a      	beq.n	801186e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	430a      	orrs	r2, r1
 801186c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011872:	f003 0304 	and.w	r3, r3, #4
 8011876:	2b00      	cmp	r3, #0
 8011878:	d00a      	beq.n	8011890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	430a      	orrs	r2, r1
 801188e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011894:	f003 0310 	and.w	r3, r3, #16
 8011898:	2b00      	cmp	r3, #0
 801189a:	d00a      	beq.n	80118b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	689b      	ldr	r3, [r3, #8]
 80118a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	430a      	orrs	r2, r1
 80118b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118b6:	f003 0320 	and.w	r3, r3, #32
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00a      	beq.n	80118d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	689b      	ldr	r3, [r3, #8]
 80118c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	430a      	orrs	r2, r1
 80118d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d01a      	beq.n	8011916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	430a      	orrs	r2, r1
 80118f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80118fe:	d10a      	bne.n	8011916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	430a      	orrs	r2, r1
 8011914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801191e:	2b00      	cmp	r3, #0
 8011920:	d00a      	beq.n	8011938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	430a      	orrs	r2, r1
 8011936:	605a      	str	r2, [r3, #4]
  }
}
 8011938:	bf00      	nop
 801193a:	370c      	adds	r7, #12
 801193c:	46bd      	mov	sp, r7
 801193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011942:	4770      	bx	lr

08011944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b098      	sub	sp, #96	; 0x60
 8011948:	af02      	add	r7, sp, #8
 801194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2200      	movs	r2, #0
 8011950:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011954:	f7f2 fa74 	bl	8003e40 <HAL_GetTick>
 8011958:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	f003 0308 	and.w	r3, r3, #8
 8011964:	2b08      	cmp	r3, #8
 8011966:	d12f      	bne.n	80119c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801196c:	9300      	str	r3, [sp, #0]
 801196e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011970:	2200      	movs	r2, #0
 8011972:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	f000 f88e 	bl	8011a98 <UART_WaitOnFlagUntilTimeout>
 801197c:	4603      	mov	r3, r0
 801197e:	2b00      	cmp	r3, #0
 8011980:	d022      	beq.n	80119c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801198a:	e853 3f00 	ldrex	r3, [r3]
 801198e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011996:	653b      	str	r3, [r7, #80]	; 0x50
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	461a      	mov	r2, r3
 801199e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119a0:	647b      	str	r3, [r7, #68]	; 0x44
 80119a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80119a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119a8:	e841 2300 	strex	r3, r2, [r1]
 80119ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80119ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d1e6      	bne.n	8011982 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2220      	movs	r2, #32
 80119b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2200      	movs	r2, #0
 80119c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80119c4:	2303      	movs	r3, #3
 80119c6:	e063      	b.n	8011a90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	f003 0304 	and.w	r3, r3, #4
 80119d2:	2b04      	cmp	r3, #4
 80119d4:	d149      	bne.n	8011a6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80119d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80119da:	9300      	str	r3, [sp, #0]
 80119dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119de:	2200      	movs	r2, #0
 80119e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f000 f857 	bl	8011a98 <UART_WaitOnFlagUntilTimeout>
 80119ea:	4603      	mov	r3, r0
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d03c      	beq.n	8011a6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f8:	e853 3f00 	ldrex	r3, [r3]
 80119fc:	623b      	str	r3, [r7, #32]
   return(result);
 80119fe:	6a3b      	ldr	r3, [r7, #32]
 8011a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8011a10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a16:	e841 2300 	strex	r3, r2, [r1]
 8011a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d1e6      	bne.n	80119f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	3308      	adds	r3, #8
 8011a28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	e853 3f00 	ldrex	r3, [r3]
 8011a30:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	f023 0301 	bic.w	r3, r3, #1
 8011a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	3308      	adds	r3, #8
 8011a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a42:	61fa      	str	r2, [r7, #28]
 8011a44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a46:	69b9      	ldr	r1, [r7, #24]
 8011a48:	69fa      	ldr	r2, [r7, #28]
 8011a4a:	e841 2300 	strex	r3, r2, [r1]
 8011a4e:	617b      	str	r3, [r7, #20]
   return(result);
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d1e5      	bne.n	8011a22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2220      	movs	r2, #32
 8011a5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2200      	movs	r2, #0
 8011a62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a66:	2303      	movs	r3, #3
 8011a68:	e012      	b.n	8011a90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2220      	movs	r2, #32
 8011a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2220      	movs	r2, #32
 8011a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2200      	movs	r2, #0
 8011a84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a8e:	2300      	movs	r3, #0
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3758      	adds	r7, #88	; 0x58
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}

08011a98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b084      	sub	sp, #16
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	60f8      	str	r0, [r7, #12]
 8011aa0:	60b9      	str	r1, [r7, #8]
 8011aa2:	603b      	str	r3, [r7, #0]
 8011aa4:	4613      	mov	r3, r2
 8011aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011aa8:	e04f      	b.n	8011b4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011aaa:	69bb      	ldr	r3, [r7, #24]
 8011aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ab0:	d04b      	beq.n	8011b4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ab2:	f7f2 f9c5 	bl	8003e40 <HAL_GetTick>
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	1ad3      	subs	r3, r2, r3
 8011abc:	69ba      	ldr	r2, [r7, #24]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d302      	bcc.n	8011ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8011ac2:	69bb      	ldr	r3, [r7, #24]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d101      	bne.n	8011acc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011ac8:	2303      	movs	r3, #3
 8011aca:	e04e      	b.n	8011b6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f003 0304 	and.w	r3, r3, #4
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d037      	beq.n	8011b4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	2b80      	cmp	r3, #128	; 0x80
 8011ade:	d034      	beq.n	8011b4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	2b40      	cmp	r3, #64	; 0x40
 8011ae4:	d031      	beq.n	8011b4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	69db      	ldr	r3, [r3, #28]
 8011aec:	f003 0308 	and.w	r3, r3, #8
 8011af0:	2b08      	cmp	r3, #8
 8011af2:	d110      	bne.n	8011b16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	2208      	movs	r2, #8
 8011afa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011afc:	68f8      	ldr	r0, [r7, #12]
 8011afe:	f000 f99d 	bl	8011e3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	2208      	movs	r2, #8
 8011b06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011b12:	2301      	movs	r3, #1
 8011b14:	e029      	b.n	8011b6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	69db      	ldr	r3, [r3, #28]
 8011b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b24:	d111      	bne.n	8011b4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b30:	68f8      	ldr	r0, [r7, #12]
 8011b32:	f000 f983 	bl	8011e3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	2220      	movs	r2, #32
 8011b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2200      	movs	r2, #0
 8011b42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011b46:	2303      	movs	r3, #3
 8011b48:	e00f      	b.n	8011b6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	69da      	ldr	r2, [r3, #28]
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	4013      	ands	r3, r2
 8011b54:	68ba      	ldr	r2, [r7, #8]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	bf0c      	ite	eq
 8011b5a:	2301      	moveq	r3, #1
 8011b5c:	2300      	movne	r3, #0
 8011b5e:	b2db      	uxtb	r3, r3
 8011b60:	461a      	mov	r2, r3
 8011b62:	79fb      	ldrb	r3, [r7, #7]
 8011b64:	429a      	cmp	r2, r3
 8011b66:	d0a0      	beq.n	8011aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b68:	2300      	movs	r3, #0
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
	...

08011b74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b74:	b480      	push	{r7}
 8011b76:	b0a3      	sub	sp, #140	; 0x8c
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	4613      	mov	r3, r2
 8011b80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	68ba      	ldr	r2, [r7, #8]
 8011b86:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	88fa      	ldrh	r2, [r7, #6]
 8011b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	88fa      	ldrh	r2, [r7, #6]
 8011b94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	689b      	ldr	r3, [r3, #8]
 8011ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ba6:	d10e      	bne.n	8011bc6 <UART_Start_Receive_IT+0x52>
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	691b      	ldr	r3, [r3, #16]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d105      	bne.n	8011bbc <UART_Start_Receive_IT+0x48>
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011bb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011bba:	e02d      	b.n	8011c18 <UART_Start_Receive_IT+0xa4>
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	22ff      	movs	r2, #255	; 0xff
 8011bc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011bc4:	e028      	b.n	8011c18 <UART_Start_Receive_IT+0xa4>
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d10d      	bne.n	8011bea <UART_Start_Receive_IT+0x76>
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	691b      	ldr	r3, [r3, #16]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d104      	bne.n	8011be0 <UART_Start_Receive_IT+0x6c>
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	22ff      	movs	r2, #255	; 0xff
 8011bda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011bde:	e01b      	b.n	8011c18 <UART_Start_Receive_IT+0xa4>
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	227f      	movs	r2, #127	; 0x7f
 8011be4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011be8:	e016      	b.n	8011c18 <UART_Start_Receive_IT+0xa4>
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	689b      	ldr	r3, [r3, #8]
 8011bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011bf2:	d10d      	bne.n	8011c10 <UART_Start_Receive_IT+0x9c>
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	691b      	ldr	r3, [r3, #16]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d104      	bne.n	8011c06 <UART_Start_Receive_IT+0x92>
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	227f      	movs	r2, #127	; 0x7f
 8011c00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011c04:	e008      	b.n	8011c18 <UART_Start_Receive_IT+0xa4>
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	223f      	movs	r2, #63	; 0x3f
 8011c0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011c0e:	e003      	b.n	8011c18 <UART_Start_Receive_IT+0xa4>
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	2200      	movs	r2, #0
 8011c14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2222      	movs	r2, #34	; 0x22
 8011c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	3308      	adds	r3, #8
 8011c2e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c32:	e853 3f00 	ldrex	r3, [r3]
 8011c36:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c3a:	f043 0301 	orr.w	r3, r3, #1
 8011c3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	3308      	adds	r3, #8
 8011c48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011c4c:	673a      	str	r2, [r7, #112]	; 0x70
 8011c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c50:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011c52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011c54:	e841 2300 	strex	r3, r2, [r1]
 8011c58:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011c5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d1e3      	bne.n	8011c28 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011c68:	d14f      	bne.n	8011d0a <UART_Start_Receive_IT+0x196>
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011c70:	88fa      	ldrh	r2, [r7, #6]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d349      	bcc.n	8011d0a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	689b      	ldr	r3, [r3, #8]
 8011c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c7e:	d107      	bne.n	8011c90 <UART_Start_Receive_IT+0x11c>
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	691b      	ldr	r3, [r3, #16]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d103      	bne.n	8011c90 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	4a47      	ldr	r2, [pc, #284]	; (8011da8 <UART_Start_Receive_IT+0x234>)
 8011c8c:	675a      	str	r2, [r3, #116]	; 0x74
 8011c8e:	e002      	b.n	8011c96 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	4a46      	ldr	r2, [pc, #280]	; (8011dac <UART_Start_Receive_IT+0x238>)
 8011c94:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	691b      	ldr	r3, [r3, #16]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d01a      	beq.n	8011cd4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ca6:	e853 3f00 	ldrex	r3, [r3]
 8011caa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011cb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	461a      	mov	r2, r3
 8011cbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011cc2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011cc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011cc8:	e841 2300 	strex	r3, r2, [r1]
 8011ccc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d1e4      	bne.n	8011c9e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	3308      	adds	r3, #8
 8011cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cde:	e853 3f00 	ldrex	r3, [r3]
 8011ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011cea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	3308      	adds	r3, #8
 8011cf2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011cf4:	64ba      	str	r2, [r7, #72]	; 0x48
 8011cf6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cf8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cfc:	e841 2300 	strex	r3, r2, [r1]
 8011d00:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d1e5      	bne.n	8011cd4 <UART_Start_Receive_IT+0x160>
 8011d08:	e046      	b.n	8011d98 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	689b      	ldr	r3, [r3, #8]
 8011d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d12:	d107      	bne.n	8011d24 <UART_Start_Receive_IT+0x1b0>
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	691b      	ldr	r3, [r3, #16]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d103      	bne.n	8011d24 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	4a24      	ldr	r2, [pc, #144]	; (8011db0 <UART_Start_Receive_IT+0x23c>)
 8011d20:	675a      	str	r2, [r3, #116]	; 0x74
 8011d22:	e002      	b.n	8011d2a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	4a23      	ldr	r2, [pc, #140]	; (8011db4 <UART_Start_Receive_IT+0x240>)
 8011d28:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	691b      	ldr	r3, [r3, #16]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d019      	beq.n	8011d66 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3a:	e853 3f00 	ldrex	r3, [r3]
 8011d3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d42:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011d46:	677b      	str	r3, [r7, #116]	; 0x74
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d50:	637b      	str	r3, [r7, #52]	; 0x34
 8011d52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d58:	e841 2300 	strex	r3, r2, [r1]
 8011d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d1e6      	bne.n	8011d32 <UART_Start_Receive_IT+0x1be>
 8011d64:	e018      	b.n	8011d98 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	e853 3f00 	ldrex	r3, [r3]
 8011d72:	613b      	str	r3, [r7, #16]
   return(result);
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	f043 0320 	orr.w	r3, r3, #32
 8011d7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	461a      	mov	r2, r3
 8011d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d84:	623b      	str	r3, [r7, #32]
 8011d86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d88:	69f9      	ldr	r1, [r7, #28]
 8011d8a:	6a3a      	ldr	r2, [r7, #32]
 8011d8c:	e841 2300 	strex	r3, r2, [r1]
 8011d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d1e6      	bne.n	8011d66 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011d98:	2300      	movs	r3, #0
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	378c      	adds	r7, #140	; 0x8c
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da4:	4770      	bx	lr
 8011da6:	bf00      	nop
 8011da8:	0801278d 	.word	0x0801278d
 8011dac:	0801242d 	.word	0x0801242d
 8011db0:	08012275 	.word	0x08012275
 8011db4:	080120bd 	.word	0x080120bd

08011db8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011db8:	b480      	push	{r7}
 8011dba:	b08f      	sub	sp, #60	; 0x3c
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dc6:	6a3b      	ldr	r3, [r7, #32]
 8011dc8:	e853 3f00 	ldrex	r3, [r3]
 8011dcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	461a      	mov	r2, r3
 8011ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011de0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011de2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011de6:	e841 2300 	strex	r3, r2, [r1]
 8011dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d1e6      	bne.n	8011dc0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	3308      	adds	r3, #8
 8011df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	e853 3f00 	ldrex	r3, [r3]
 8011e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011e08:	633b      	str	r3, [r7, #48]	; 0x30
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	3308      	adds	r3, #8
 8011e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e12:	61ba      	str	r2, [r7, #24]
 8011e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e16:	6979      	ldr	r1, [r7, #20]
 8011e18:	69ba      	ldr	r2, [r7, #24]
 8011e1a:	e841 2300 	strex	r3, r2, [r1]
 8011e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d1e5      	bne.n	8011df2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2220      	movs	r2, #32
 8011e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011e2e:	bf00      	nop
 8011e30:	373c      	adds	r7, #60	; 0x3c
 8011e32:	46bd      	mov	sp, r7
 8011e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e38:	4770      	bx	lr
	...

08011e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b095      	sub	sp, #84	; 0x54
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e4c:	e853 3f00 	ldrex	r3, [r3]
 8011e50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	461a      	mov	r2, r3
 8011e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e62:	643b      	str	r3, [r7, #64]	; 0x40
 8011e64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e6a:	e841 2300 	strex	r3, r2, [r1]
 8011e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d1e6      	bne.n	8011e44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	3308      	adds	r3, #8
 8011e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e7e:	6a3b      	ldr	r3, [r7, #32]
 8011e80:	e853 3f00 	ldrex	r3, [r3]
 8011e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e86:	69fa      	ldr	r2, [r7, #28]
 8011e88:	4b1e      	ldr	r3, [pc, #120]	; (8011f04 <UART_EndRxTransfer+0xc8>)
 8011e8a:	4013      	ands	r3, r2
 8011e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	3308      	adds	r3, #8
 8011e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011e98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e9e:	e841 2300 	strex	r3, r2, [r1]
 8011ea2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d1e5      	bne.n	8011e76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d118      	bne.n	8011ee4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	e853 3f00 	ldrex	r3, [r3]
 8011ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	f023 0310 	bic.w	r3, r3, #16
 8011ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	461a      	mov	r2, r3
 8011ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ed0:	61bb      	str	r3, [r7, #24]
 8011ed2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ed4:	6979      	ldr	r1, [r7, #20]
 8011ed6:	69ba      	ldr	r2, [r7, #24]
 8011ed8:	e841 2300 	strex	r3, r2, [r1]
 8011edc:	613b      	str	r3, [r7, #16]
   return(result);
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d1e6      	bne.n	8011eb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2220      	movs	r2, #32
 8011ee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2200      	movs	r2, #0
 8011ef0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011ef8:	bf00      	nop
 8011efa:	3754      	adds	r7, #84	; 0x54
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr
 8011f04:	effffffe 	.word	0xeffffffe

08011f08 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b090      	sub	sp, #64	; 0x40
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f14:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	69db      	ldr	r3, [r3, #28]
 8011f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f1e:	d037      	beq.n	8011f90 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f22:	2200      	movs	r2, #0
 8011f24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	3308      	adds	r3, #8
 8011f2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f32:	e853 3f00 	ldrex	r3, [r3]
 8011f36:	623b      	str	r3, [r7, #32]
   return(result);
 8011f38:	6a3b      	ldr	r3, [r7, #32]
 8011f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	3308      	adds	r3, #8
 8011f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f48:	633a      	str	r2, [r7, #48]	; 0x30
 8011f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f50:	e841 2300 	strex	r3, r2, [r1]
 8011f54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d1e5      	bne.n	8011f28 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	e853 3f00 	ldrex	r3, [r3]
 8011f68:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f70:	637b      	str	r3, [r7, #52]	; 0x34
 8011f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	461a      	mov	r2, r3
 8011f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f7a:	61fb      	str	r3, [r7, #28]
 8011f7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f7e:	69b9      	ldr	r1, [r7, #24]
 8011f80:	69fa      	ldr	r2, [r7, #28]
 8011f82:	e841 2300 	strex	r3, r2, [r1]
 8011f86:	617b      	str	r3, [r7, #20]
   return(result);
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d1e6      	bne.n	8011f5c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011f8e:	e002      	b.n	8011f96 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011f90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011f92:	f7f0 f9a7 	bl	80022e4 <HAL_UART_TxCpltCallback>
}
 8011f96:	bf00      	nop
 8011f98:	3740      	adds	r7, #64	; 0x40
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}

08011f9e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011f9e:	b580      	push	{r7, lr}
 8011fa0:	b084      	sub	sp, #16
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011faa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011fac:	68f8      	ldr	r0, [r7, #12]
 8011fae:	f7fe fe9f 	bl	8010cf0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011fb2:	bf00      	nop
 8011fb4:	3710      	adds	r7, #16
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}

08011fba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011fba:	b580      	push	{r7, lr}
 8011fbc:	b086      	sub	sp, #24
 8011fbe:	af00      	add	r7, sp, #0
 8011fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fc6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011fd6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	689b      	ldr	r3, [r3, #8]
 8011fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fe2:	2b80      	cmp	r3, #128	; 0x80
 8011fe4:	d109      	bne.n	8011ffa <UART_DMAError+0x40>
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	2b21      	cmp	r3, #33	; 0x21
 8011fea:	d106      	bne.n	8011ffa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011ff4:	6978      	ldr	r0, [r7, #20]
 8011ff6:	f7ff fedf 	bl	8011db8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	689b      	ldr	r3, [r3, #8]
 8012000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012004:	2b40      	cmp	r3, #64	; 0x40
 8012006:	d109      	bne.n	801201c <UART_DMAError+0x62>
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	2b22      	cmp	r3, #34	; 0x22
 801200c:	d106      	bne.n	801201c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	2200      	movs	r2, #0
 8012012:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8012016:	6978      	ldr	r0, [r7, #20]
 8012018:	f7ff ff10 	bl	8011e3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012022:	f043 0210 	orr.w	r2, r3, #16
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801202c:	6978      	ldr	r0, [r7, #20]
 801202e:	f7fe fe69 	bl	8010d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012032:	bf00      	nop
 8012034:	3718      	adds	r7, #24
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}

0801203a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801203a:	b580      	push	{r7, lr}
 801203c:	b084      	sub	sp, #16
 801203e:	af00      	add	r7, sp, #0
 8012040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012046:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	2200      	movs	r2, #0
 801204c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	2200      	movs	r2, #0
 8012054:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012058:	68f8      	ldr	r0, [r7, #12]
 801205a:	f7fe fe53 	bl	8010d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801205e:	bf00      	nop
 8012060:	3710      	adds	r7, #16
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}

08012066 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012066:	b580      	push	{r7, lr}
 8012068:	b088      	sub	sp, #32
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	e853 3f00 	ldrex	r3, [r3]
 801207a:	60bb      	str	r3, [r7, #8]
   return(result);
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012082:	61fb      	str	r3, [r7, #28]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	461a      	mov	r2, r3
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	61bb      	str	r3, [r7, #24]
 801208e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012090:	6979      	ldr	r1, [r7, #20]
 8012092:	69ba      	ldr	r2, [r7, #24]
 8012094:	e841 2300 	strex	r3, r2, [r1]
 8012098:	613b      	str	r3, [r7, #16]
   return(result);
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d1e6      	bne.n	801206e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2220      	movs	r2, #32
 80120a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2200      	movs	r2, #0
 80120ac:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	f7f0 f918 	bl	80022e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80120b4:	bf00      	nop
 80120b6:	3720      	adds	r7, #32
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}

080120bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b09c      	sub	sp, #112	; 0x70
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120d4:	2b22      	cmp	r3, #34	; 0x22
 80120d6:	f040 80be 	bne.w	8012256 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80120e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80120e8:	b2d9      	uxtb	r1, r3
 80120ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80120ee:	b2da      	uxtb	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120f4:	400a      	ands	r2, r1
 80120f6:	b2d2      	uxtb	r2, r2
 80120f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120fe:	1c5a      	adds	r2, r3, #1
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801210a:	b29b      	uxth	r3, r3
 801210c:	3b01      	subs	r3, #1
 801210e:	b29a      	uxth	r2, r3
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801211c:	b29b      	uxth	r3, r3
 801211e:	2b00      	cmp	r3, #0
 8012120:	f040 80a1 	bne.w	8012266 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801212a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801212c:	e853 3f00 	ldrex	r3, [r3]
 8012130:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012138:	66bb      	str	r3, [r7, #104]	; 0x68
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	461a      	mov	r2, r3
 8012140:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012142:	65bb      	str	r3, [r7, #88]	; 0x58
 8012144:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012146:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801214a:	e841 2300 	strex	r3, r2, [r1]
 801214e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012152:	2b00      	cmp	r3, #0
 8012154:	d1e6      	bne.n	8012124 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	3308      	adds	r3, #8
 801215c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012160:	e853 3f00 	ldrex	r3, [r3]
 8012164:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012168:	f023 0301 	bic.w	r3, r3, #1
 801216c:	667b      	str	r3, [r7, #100]	; 0x64
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	3308      	adds	r3, #8
 8012174:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012176:	647a      	str	r2, [r7, #68]	; 0x44
 8012178:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801217a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801217c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801217e:	e841 2300 	strex	r3, r2, [r1]
 8012182:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012186:	2b00      	cmp	r3, #0
 8012188:	d1e5      	bne.n	8012156 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	2220      	movs	r2, #32
 801218e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2200      	movs	r2, #0
 8012196:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2200      	movs	r2, #0
 801219c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	4a33      	ldr	r2, [pc, #204]	; (8012270 <UART_RxISR_8BIT+0x1b4>)
 80121a4:	4293      	cmp	r3, r2
 80121a6:	d01f      	beq.n	80121e8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d018      	beq.n	80121e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121be:	e853 3f00 	ldrex	r3, [r3]
 80121c2:	623b      	str	r3, [r7, #32]
   return(result);
 80121c4:	6a3b      	ldr	r3, [r7, #32]
 80121c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80121ca:	663b      	str	r3, [r7, #96]	; 0x60
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	461a      	mov	r2, r3
 80121d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121d4:	633b      	str	r3, [r7, #48]	; 0x30
 80121d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121dc:	e841 2300 	strex	r3, r2, [r1]
 80121e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80121e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d1e6      	bne.n	80121b6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121ec:	2b01      	cmp	r3, #1
 80121ee:	d12e      	bne.n	801224e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2200      	movs	r2, #0
 80121f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	e853 3f00 	ldrex	r3, [r3]
 8012202:	60fb      	str	r3, [r7, #12]
   return(result);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	f023 0310 	bic.w	r3, r3, #16
 801220a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	461a      	mov	r2, r3
 8012212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012214:	61fb      	str	r3, [r7, #28]
 8012216:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012218:	69b9      	ldr	r1, [r7, #24]
 801221a:	69fa      	ldr	r2, [r7, #28]
 801221c:	e841 2300 	strex	r3, r2, [r1]
 8012220:	617b      	str	r3, [r7, #20]
   return(result);
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d1e6      	bne.n	80121f6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	69db      	ldr	r3, [r3, #28]
 801222e:	f003 0310 	and.w	r3, r3, #16
 8012232:	2b10      	cmp	r3, #16
 8012234:	d103      	bne.n	801223e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	2210      	movs	r2, #16
 801223c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012244:	4619      	mov	r1, r3
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f7fe fd66 	bl	8010d18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801224c:	e00b      	b.n	8012266 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f7ee fa1a 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012254:	e007      	b.n	8012266 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	699a      	ldr	r2, [r3, #24]
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	f042 0208 	orr.w	r2, r2, #8
 8012264:	619a      	str	r2, [r3, #24]
}
 8012266:	bf00      	nop
 8012268:	3770      	adds	r7, #112	; 0x70
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	58000c00 	.word	0x58000c00

08012274 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b09c      	sub	sp, #112	; 0x70
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012282:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801228c:	2b22      	cmp	r3, #34	; 0x22
 801228e:	f040 80be 	bne.w	801240e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012298:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122a0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80122a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80122a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80122aa:	4013      	ands	r3, r2
 80122ac:	b29a      	uxth	r2, r3
 80122ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80122b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122b6:	1c9a      	adds	r2, r3, #2
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	3b01      	subs	r3, #1
 80122c6:	b29a      	uxth	r2, r3
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	f040 80a1 	bne.w	801241e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122e4:	e853 3f00 	ldrex	r3, [r3]
 80122e8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80122ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80122f0:	667b      	str	r3, [r7, #100]	; 0x64
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	461a      	mov	r2, r3
 80122f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122fa:	657b      	str	r3, [r7, #84]	; 0x54
 80122fc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012302:	e841 2300 	strex	r3, r2, [r1]
 8012306:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801230a:	2b00      	cmp	r3, #0
 801230c:	d1e6      	bne.n	80122dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	3308      	adds	r3, #8
 8012314:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012318:	e853 3f00 	ldrex	r3, [r3]
 801231c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012320:	f023 0301 	bic.w	r3, r3, #1
 8012324:	663b      	str	r3, [r7, #96]	; 0x60
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	3308      	adds	r3, #8
 801232c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801232e:	643a      	str	r2, [r7, #64]	; 0x40
 8012330:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012332:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012336:	e841 2300 	strex	r3, r2, [r1]
 801233a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801233e:	2b00      	cmp	r3, #0
 8012340:	d1e5      	bne.n	801230e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2220      	movs	r2, #32
 8012346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2200      	movs	r2, #0
 801234e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2200      	movs	r2, #0
 8012354:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	4a33      	ldr	r2, [pc, #204]	; (8012428 <UART_RxISR_16BIT+0x1b4>)
 801235c:	4293      	cmp	r3, r2
 801235e:	d01f      	beq.n	80123a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801236a:	2b00      	cmp	r3, #0
 801236c:	d018      	beq.n	80123a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012374:	6a3b      	ldr	r3, [r7, #32]
 8012376:	e853 3f00 	ldrex	r3, [r3]
 801237a:	61fb      	str	r3, [r7, #28]
   return(result);
 801237c:	69fb      	ldr	r3, [r7, #28]
 801237e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012382:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	461a      	mov	r2, r3
 801238a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801238c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801238e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012394:	e841 2300 	strex	r3, r2, [r1]
 8012398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239c:	2b00      	cmp	r3, #0
 801239e:	d1e6      	bne.n	801236e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	d12e      	bne.n	8012406 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2200      	movs	r2, #0
 80123ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	e853 3f00 	ldrex	r3, [r3]
 80123ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	f023 0310 	bic.w	r3, r3, #16
 80123c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	461a      	mov	r2, r3
 80123ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123cc:	61bb      	str	r3, [r7, #24]
 80123ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123d0:	6979      	ldr	r1, [r7, #20]
 80123d2:	69ba      	ldr	r2, [r7, #24]
 80123d4:	e841 2300 	strex	r3, r2, [r1]
 80123d8:	613b      	str	r3, [r7, #16]
   return(result);
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d1e6      	bne.n	80123ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	69db      	ldr	r3, [r3, #28]
 80123e6:	f003 0310 	and.w	r3, r3, #16
 80123ea:	2b10      	cmp	r3, #16
 80123ec:	d103      	bne.n	80123f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	2210      	movs	r2, #16
 80123f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123fc:	4619      	mov	r1, r3
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f7fe fc8a 	bl	8010d18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012404:	e00b      	b.n	801241e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7ee f93e 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 801240c:	e007      	b.n	801241e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	699a      	ldr	r2, [r3, #24]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f042 0208 	orr.w	r2, r2, #8
 801241c:	619a      	str	r2, [r3, #24]
}
 801241e:	bf00      	nop
 8012420:	3770      	adds	r7, #112	; 0x70
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	58000c00 	.word	0x58000c00

0801242c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b0ac      	sub	sp, #176	; 0xb0
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801243a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	69db      	ldr	r3, [r3, #28]
 8012444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	689b      	ldr	r3, [r3, #8]
 8012458:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012462:	2b22      	cmp	r3, #34	; 0x22
 8012464:	f040 8180 	bne.w	8012768 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801246e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012472:	e123      	b.n	80126bc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801247a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801247e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012482:	b2d9      	uxtb	r1, r3
 8012484:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012488:	b2da      	uxtb	r2, r3
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801248e:	400a      	ands	r2, r1
 8012490:	b2d2      	uxtb	r2, r2
 8012492:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012498:	1c5a      	adds	r2, r3, #1
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124a4:	b29b      	uxth	r3, r3
 80124a6:	3b01      	subs	r3, #1
 80124a8:	b29a      	uxth	r2, r3
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	69db      	ldr	r3, [r3, #28]
 80124b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80124ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124be:	f003 0307 	and.w	r3, r3, #7
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d053      	beq.n	801256e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80124c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124ca:	f003 0301 	and.w	r3, r3, #1
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d011      	beq.n	80124f6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80124d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80124d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d00b      	beq.n	80124f6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	2201      	movs	r2, #1
 80124e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124ec:	f043 0201 	orr.w	r2, r3, #1
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80124f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124fa:	f003 0302 	and.w	r3, r3, #2
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d011      	beq.n	8012526 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012506:	f003 0301 	and.w	r3, r3, #1
 801250a:	2b00      	cmp	r3, #0
 801250c:	d00b      	beq.n	8012526 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	2202      	movs	r2, #2
 8012514:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801251c:	f043 0204 	orr.w	r2, r3, #4
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801252a:	f003 0304 	and.w	r3, r3, #4
 801252e:	2b00      	cmp	r3, #0
 8012530:	d011      	beq.n	8012556 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012536:	f003 0301 	and.w	r3, r3, #1
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00b      	beq.n	8012556 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	2204      	movs	r2, #4
 8012544:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801254c:	f043 0202 	orr.w	r2, r3, #2
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801255c:	2b00      	cmp	r3, #0
 801255e:	d006      	beq.n	801256e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f7fe fbcf 	bl	8010d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	2200      	movs	r2, #0
 801256a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012574:	b29b      	uxth	r3, r3
 8012576:	2b00      	cmp	r3, #0
 8012578:	f040 80a0 	bne.w	80126bc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012584:	e853 3f00 	ldrex	r3, [r3]
 8012588:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801258a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801258c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	461a      	mov	r2, r3
 801259a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801259e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80125a0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125a2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80125a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80125a6:	e841 2300 	strex	r3, r2, [r1]
 80125aa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80125ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d1e4      	bne.n	801257c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	3308      	adds	r3, #8
 80125b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80125bc:	e853 3f00 	ldrex	r3, [r3]
 80125c0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80125c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80125c4:	4b6e      	ldr	r3, [pc, #440]	; (8012780 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80125c6:	4013      	ands	r3, r2
 80125c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	3308      	adds	r3, #8
 80125d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80125d6:	66ba      	str	r2, [r7, #104]	; 0x68
 80125d8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125da:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80125dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80125de:	e841 2300 	strex	r3, r2, [r1]
 80125e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80125e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d1e3      	bne.n	80125b2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2220      	movs	r2, #32
 80125ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2200      	movs	r2, #0
 80125f6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2200      	movs	r2, #0
 80125fc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	4a60      	ldr	r2, [pc, #384]	; (8012784 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012604:	4293      	cmp	r3, r2
 8012606:	d021      	beq.n	801264c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	685b      	ldr	r3, [r3, #4]
 801260e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012612:	2b00      	cmp	r3, #0
 8012614:	d01a      	beq.n	801264c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801261c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801261e:	e853 3f00 	ldrex	r3, [r3]
 8012622:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012626:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801262a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	461a      	mov	r2, r3
 8012634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012638:	657b      	str	r3, [r7, #84]	; 0x54
 801263a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801263c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801263e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012640:	e841 2300 	strex	r3, r2, [r1]
 8012644:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012648:	2b00      	cmp	r3, #0
 801264a:	d1e4      	bne.n	8012616 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012650:	2b01      	cmp	r3, #1
 8012652:	d130      	bne.n	80126b6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2200      	movs	r2, #0
 8012658:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012662:	e853 3f00 	ldrex	r3, [r3]
 8012666:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801266a:	f023 0310 	bic.w	r3, r3, #16
 801266e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	461a      	mov	r2, r3
 8012678:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801267c:	643b      	str	r3, [r7, #64]	; 0x40
 801267e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012680:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012682:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012684:	e841 2300 	strex	r3, r2, [r1]
 8012688:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268c:	2b00      	cmp	r3, #0
 801268e:	d1e4      	bne.n	801265a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	69db      	ldr	r3, [r3, #28]
 8012696:	f003 0310 	and.w	r3, r3, #16
 801269a:	2b10      	cmp	r3, #16
 801269c:	d103      	bne.n	80126a6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	2210      	movs	r2, #16
 80126a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80126ac:	4619      	mov	r1, r3
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f7fe fb32 	bl	8010d18 <HAL_UARTEx_RxEventCallback>
 80126b4:	e002      	b.n	80126bc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f7ed ffe6 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80126bc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d006      	beq.n	80126d2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80126c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126c8:	f003 0320 	and.w	r3, r3, #32
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	f47f aed1 	bne.w	8012474 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80126dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d049      	beq.n	8012778 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126ea:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d242      	bcs.n	8012778 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	3308      	adds	r3, #8
 80126f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126fa:	6a3b      	ldr	r3, [r7, #32]
 80126fc:	e853 3f00 	ldrex	r3, [r3]
 8012700:	61fb      	str	r3, [r7, #28]
   return(result);
 8012702:	69fb      	ldr	r3, [r7, #28]
 8012704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	3308      	adds	r3, #8
 8012712:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012716:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012718:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801271a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801271c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801271e:	e841 2300 	strex	r3, r2, [r1]
 8012722:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012726:	2b00      	cmp	r3, #0
 8012728:	d1e3      	bne.n	80126f2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	4a16      	ldr	r2, [pc, #88]	; (8012788 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801272e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	e853 3f00 	ldrex	r3, [r3]
 801273c:	60bb      	str	r3, [r7, #8]
   return(result);
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	f043 0320 	orr.w	r3, r3, #32
 8012744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	461a      	mov	r2, r3
 801274e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012752:	61bb      	str	r3, [r7, #24]
 8012754:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012756:	6979      	ldr	r1, [r7, #20]
 8012758:	69ba      	ldr	r2, [r7, #24]
 801275a:	e841 2300 	strex	r3, r2, [r1]
 801275e:	613b      	str	r3, [r7, #16]
   return(result);
 8012760:	693b      	ldr	r3, [r7, #16]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d1e4      	bne.n	8012730 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012766:	e007      	b.n	8012778 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	699a      	ldr	r2, [r3, #24]
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	f042 0208 	orr.w	r2, r2, #8
 8012776:	619a      	str	r2, [r3, #24]
}
 8012778:	bf00      	nop
 801277a:	37b0      	adds	r7, #176	; 0xb0
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	effffffe 	.word	0xeffffffe
 8012784:	58000c00 	.word	0x58000c00
 8012788:	080120bd 	.word	0x080120bd

0801278c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b0ae      	sub	sp, #184	; 0xb8
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801279a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	69db      	ldr	r3, [r3, #28]
 80127a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	689b      	ldr	r3, [r3, #8]
 80127b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80127c2:	2b22      	cmp	r3, #34	; 0x22
 80127c4:	f040 8184 	bne.w	8012ad0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80127ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80127d2:	e127      	b.n	8012a24 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127da:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80127e6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80127ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80127ee:	4013      	ands	r3, r2
 80127f0:	b29a      	uxth	r2, r3
 80127f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80127f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127fc:	1c9a      	adds	r2, r3, #2
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012808:	b29b      	uxth	r3, r3
 801280a:	3b01      	subs	r3, #1
 801280c:	b29a      	uxth	r2, r3
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	69db      	ldr	r3, [r3, #28]
 801281a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801281e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012822:	f003 0307 	and.w	r3, r3, #7
 8012826:	2b00      	cmp	r3, #0
 8012828:	d053      	beq.n	80128d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801282a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801282e:	f003 0301 	and.w	r3, r3, #1
 8012832:	2b00      	cmp	r3, #0
 8012834:	d011      	beq.n	801285a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801283e:	2b00      	cmp	r3, #0
 8012840:	d00b      	beq.n	801285a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	2201      	movs	r2, #1
 8012848:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012850:	f043 0201 	orr.w	r2, r3, #1
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801285a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801285e:	f003 0302 	and.w	r3, r3, #2
 8012862:	2b00      	cmp	r3, #0
 8012864:	d011      	beq.n	801288a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801286a:	f003 0301 	and.w	r3, r3, #1
 801286e:	2b00      	cmp	r3, #0
 8012870:	d00b      	beq.n	801288a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	2202      	movs	r2, #2
 8012878:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012880:	f043 0204 	orr.w	r2, r3, #4
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801288a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801288e:	f003 0304 	and.w	r3, r3, #4
 8012892:	2b00      	cmp	r3, #0
 8012894:	d011      	beq.n	80128ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801289a:	f003 0301 	and.w	r3, r3, #1
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d00b      	beq.n	80128ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	2204      	movs	r2, #4
 80128a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128b0:	f043 0202 	orr.w	r2, r3, #2
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d006      	beq.n	80128d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f7fe fa1d 	bl	8010d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2200      	movs	r2, #0
 80128ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80128d8:	b29b      	uxth	r3, r3
 80128da:	2b00      	cmp	r3, #0
 80128dc:	f040 80a2 	bne.w	8012a24 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80128e8:	e853 3f00 	ldrex	r3, [r3]
 80128ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80128ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80128f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	461a      	mov	r2, r3
 80128fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012902:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012906:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012908:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801290a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801290e:	e841 2300 	strex	r3, r2, [r1]
 8012912:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012916:	2b00      	cmp	r3, #0
 8012918:	d1e2      	bne.n	80128e0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	3308      	adds	r3, #8
 8012920:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012924:	e853 3f00 	ldrex	r3, [r3]
 8012928:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801292a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801292c:	4b6e      	ldr	r3, [pc, #440]	; (8012ae8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801292e:	4013      	ands	r3, r2
 8012930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	3308      	adds	r3, #8
 801293a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801293e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012940:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012942:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012944:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012946:	e841 2300 	strex	r3, r2, [r1]
 801294a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801294c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801294e:	2b00      	cmp	r3, #0
 8012950:	d1e3      	bne.n	801291a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2220      	movs	r2, #32
 8012956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2200      	movs	r2, #0
 801295e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2200      	movs	r2, #0
 8012964:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	4a60      	ldr	r2, [pc, #384]	; (8012aec <UART_RxISR_16BIT_FIFOEN+0x360>)
 801296c:	4293      	cmp	r3, r2
 801296e:	d021      	beq.n	80129b4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	685b      	ldr	r3, [r3, #4]
 8012976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801297a:	2b00      	cmp	r3, #0
 801297c:	d01a      	beq.n	80129b4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012986:	e853 3f00 	ldrex	r3, [r3]
 801298a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801298c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801298e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	461a      	mov	r2, r3
 801299c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80129a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80129a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80129a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80129a8:	e841 2300 	strex	r3, r2, [r1]
 80129ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80129ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d1e4      	bne.n	801297e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129b8:	2b01      	cmp	r3, #1
 80129ba:	d130      	bne.n	8012a1e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	2200      	movs	r2, #0
 80129c0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ca:	e853 3f00 	ldrex	r3, [r3]
 80129ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80129d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129d2:	f023 0310 	bic.w	r3, r3, #16
 80129d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	461a      	mov	r2, r3
 80129e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80129e4:	647b      	str	r3, [r7, #68]	; 0x44
 80129e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129ec:	e841 2300 	strex	r3, r2, [r1]
 80129f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80129f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d1e4      	bne.n	80129c2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	69db      	ldr	r3, [r3, #28]
 80129fe:	f003 0310 	and.w	r3, r3, #16
 8012a02:	2b10      	cmp	r3, #16
 8012a04:	d103      	bne.n	8012a0e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	2210      	movs	r2, #16
 8012a0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012a14:	4619      	mov	r1, r3
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f7fe f97e 	bl	8010d18 <HAL_UARTEx_RxEventCallback>
 8012a1c:	e002      	b.n	8012a24 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f7ed fe32 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a24:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d006      	beq.n	8012a3a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012a2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a30:	f003 0320 	and.w	r3, r3, #32
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	f47f aecd 	bne.w	80127d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a40:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012a44:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d049      	beq.n	8012ae0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a52:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d242      	bcs.n	8012ae0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	3308      	adds	r3, #8
 8012a60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a64:	e853 3f00 	ldrex	r3, [r3]
 8012a68:	623b      	str	r3, [r7, #32]
   return(result);
 8012a6a:	6a3b      	ldr	r3, [r7, #32]
 8012a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	3308      	adds	r3, #8
 8012a7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012a7e:	633a      	str	r2, [r7, #48]	; 0x30
 8012a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a86:	e841 2300 	strex	r3, r2, [r1]
 8012a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d1e3      	bne.n	8012a5a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	4a16      	ldr	r2, [pc, #88]	; (8012af0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012a96:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	e853 3f00 	ldrex	r3, [r3]
 8012aa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	f043 0320 	orr.w	r3, r3, #32
 8012aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	461a      	mov	r2, r3
 8012ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012aba:	61fb      	str	r3, [r7, #28]
 8012abc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012abe:	69b9      	ldr	r1, [r7, #24]
 8012ac0:	69fa      	ldr	r2, [r7, #28]
 8012ac2:	e841 2300 	strex	r3, r2, [r1]
 8012ac6:	617b      	str	r3, [r7, #20]
   return(result);
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d1e4      	bne.n	8012a98 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012ace:	e007      	b.n	8012ae0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	699a      	ldr	r2, [r3, #24]
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	f042 0208 	orr.w	r2, r2, #8
 8012ade:	619a      	str	r2, [r3, #24]
}
 8012ae0:	bf00      	nop
 8012ae2:	37b8      	adds	r7, #184	; 0xb8
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	effffffe 	.word	0xeffffffe
 8012aec:	58000c00 	.word	0x58000c00
 8012af0:	08012275 	.word	0x08012275

08012af4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012af4:	b480      	push	{r7}
 8012af6:	b083      	sub	sp, #12
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012afc:	bf00      	nop
 8012afe:	370c      	adds	r7, #12
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr

08012b08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b083      	sub	sp, #12
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012b10:	bf00      	nop
 8012b12:	370c      	adds	r7, #12
 8012b14:	46bd      	mov	sp, r7
 8012b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1a:	4770      	bx	lr

08012b1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	b083      	sub	sp, #12
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012b24:	bf00      	nop
 8012b26:	370c      	adds	r7, #12
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2e:	4770      	bx	lr

08012b30 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b089      	sub	sp, #36	; 0x24
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b3e:	2b01      	cmp	r3, #1
 8012b40:	d101      	bne.n	8012b46 <HAL_UARTEx_EnableStopMode+0x16>
 8012b42:	2302      	movs	r3, #2
 8012b44:	e021      	b.n	8012b8a <HAL_UARTEx_EnableStopMode+0x5a>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2201      	movs	r2, #1
 8012b4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	e853 3f00 	ldrex	r3, [r3]
 8012b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	f043 0302 	orr.w	r3, r3, #2
 8012b62:	61fb      	str	r3, [r7, #28]
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	461a      	mov	r2, r3
 8012b6a:	69fb      	ldr	r3, [r7, #28]
 8012b6c:	61bb      	str	r3, [r7, #24]
 8012b6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b70:	6979      	ldr	r1, [r7, #20]
 8012b72:	69ba      	ldr	r2, [r7, #24]
 8012b74:	e841 2300 	strex	r3, r2, [r1]
 8012b78:	613b      	str	r3, [r7, #16]
   return(result);
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1e6      	bne.n	8012b4e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2200      	movs	r2, #0
 8012b84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b88:	2300      	movs	r3, #0
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3724      	adds	r7, #36	; 0x24
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b94:	4770      	bx	lr

08012b96 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012b96:	b580      	push	{r7, lr}
 8012b98:	b084      	sub	sp, #16
 8012b9a:	af00      	add	r7, sp, #0
 8012b9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	d101      	bne.n	8012bac <HAL_UARTEx_EnableFifoMode+0x16>
 8012ba8:	2302      	movs	r3, #2
 8012baa:	e02b      	b.n	8012c04 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2201      	movs	r2, #1
 8012bb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2224      	movs	r2, #36	; 0x24
 8012bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	681a      	ldr	r2, [r3, #0]
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	f022 0201 	bic.w	r2, r2, #1
 8012bd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012bda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012be2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f000 f8c3 	bl	8012d78 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2220      	movs	r2, #32
 8012bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c02:	2300      	movs	r3, #0
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	3710      	adds	r7, #16
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}

08012c0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b085      	sub	sp, #20
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c1a:	2b01      	cmp	r3, #1
 8012c1c:	d101      	bne.n	8012c22 <HAL_UARTEx_DisableFifoMode+0x16>
 8012c1e:	2302      	movs	r3, #2
 8012c20:	e027      	b.n	8012c72 <HAL_UARTEx_DisableFifoMode+0x66>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2201      	movs	r2, #1
 8012c26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2224      	movs	r2, #36	; 0x24
 8012c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	681a      	ldr	r2, [r3, #0]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	f022 0201 	bic.w	r2, r2, #1
 8012c48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012c50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2200      	movs	r2, #0
 8012c56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	68fa      	ldr	r2, [r7, #12]
 8012c5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2220      	movs	r2, #32
 8012c64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c70:	2300      	movs	r3, #0
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3714      	adds	r7, #20
 8012c76:	46bd      	mov	sp, r7
 8012c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7c:	4770      	bx	lr

08012c7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c7e:	b580      	push	{r7, lr}
 8012c80:	b084      	sub	sp, #16
 8012c82:	af00      	add	r7, sp, #0
 8012c84:	6078      	str	r0, [r7, #4]
 8012c86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d101      	bne.n	8012c96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012c92:	2302      	movs	r3, #2
 8012c94:	e02d      	b.n	8012cf2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2201      	movs	r2, #1
 8012c9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2224      	movs	r2, #36	; 0x24
 8012ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	681a      	ldr	r2, [r3, #0]
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	f022 0201 	bic.w	r2, r2, #1
 8012cbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	689b      	ldr	r3, [r3, #8]
 8012cc4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	683a      	ldr	r2, [r7, #0]
 8012cce:	430a      	orrs	r2, r1
 8012cd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f000 f850 	bl	8012d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	68fa      	ldr	r2, [r7, #12]
 8012cde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2220      	movs	r2, #32
 8012ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2200      	movs	r2, #0
 8012cec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012cf0:	2300      	movs	r3, #0
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3710      	adds	r7, #16
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}

08012cfa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012cfa:	b580      	push	{r7, lr}
 8012cfc:	b084      	sub	sp, #16
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	6078      	str	r0, [r7, #4]
 8012d02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d0a:	2b01      	cmp	r3, #1
 8012d0c:	d101      	bne.n	8012d12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012d0e:	2302      	movs	r3, #2
 8012d10:	e02d      	b.n	8012d6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2201      	movs	r2, #1
 8012d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	2224      	movs	r2, #36	; 0x24
 8012d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	681a      	ldr	r2, [r3, #0]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	f022 0201 	bic.w	r2, r2, #1
 8012d38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	689b      	ldr	r3, [r3, #8]
 8012d40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	683a      	ldr	r2, [r7, #0]
 8012d4a:	430a      	orrs	r2, r1
 8012d4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f000 f812 	bl	8012d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2220      	movs	r2, #32
 8012d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2200      	movs	r2, #0
 8012d68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d6c:	2300      	movs	r3, #0
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3710      	adds	r7, #16
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd80      	pop	{r7, pc}
	...

08012d78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b085      	sub	sp, #20
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d108      	bne.n	8012d9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2201      	movs	r2, #1
 8012d94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012d98:	e031      	b.n	8012dfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012d9a:	2310      	movs	r3, #16
 8012d9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012d9e:	2310      	movs	r3, #16
 8012da0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	689b      	ldr	r3, [r3, #8]
 8012da8:	0e5b      	lsrs	r3, r3, #25
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	f003 0307 	and.w	r3, r3, #7
 8012db0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	689b      	ldr	r3, [r3, #8]
 8012db8:	0f5b      	lsrs	r3, r3, #29
 8012dba:	b2db      	uxtb	r3, r3
 8012dbc:	f003 0307 	and.w	r3, r3, #7
 8012dc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012dc2:	7bbb      	ldrb	r3, [r7, #14]
 8012dc4:	7b3a      	ldrb	r2, [r7, #12]
 8012dc6:	4911      	ldr	r1, [pc, #68]	; (8012e0c <UARTEx_SetNbDataToProcess+0x94>)
 8012dc8:	5c8a      	ldrb	r2, [r1, r2]
 8012dca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012dce:	7b3a      	ldrb	r2, [r7, #12]
 8012dd0:	490f      	ldr	r1, [pc, #60]	; (8012e10 <UARTEx_SetNbDataToProcess+0x98>)
 8012dd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012dd8:	b29a      	uxth	r2, r3
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012de0:	7bfb      	ldrb	r3, [r7, #15]
 8012de2:	7b7a      	ldrb	r2, [r7, #13]
 8012de4:	4909      	ldr	r1, [pc, #36]	; (8012e0c <UARTEx_SetNbDataToProcess+0x94>)
 8012de6:	5c8a      	ldrb	r2, [r1, r2]
 8012de8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012dec:	7b7a      	ldrb	r2, [r7, #13]
 8012dee:	4908      	ldr	r1, [pc, #32]	; (8012e10 <UARTEx_SetNbDataToProcess+0x98>)
 8012df0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012df2:	fb93 f3f2 	sdiv	r3, r3, r2
 8012df6:	b29a      	uxth	r2, r3
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012dfe:	bf00      	nop
 8012e00:	3714      	adds	r7, #20
 8012e02:	46bd      	mov	sp, r7
 8012e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e08:	4770      	bx	lr
 8012e0a:	bf00      	nop
 8012e0c:	08017800 	.word	0x08017800
 8012e10:	08017808 	.word	0x08017808

08012e14 <__NVIC_SetPriority>:
 8012e14:	b480      	push	{r7}
 8012e16:	b083      	sub	sp, #12
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	6039      	str	r1, [r7, #0]
 8012e1e:	80fb      	strh	r3, [r7, #6]
 8012e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	db0a      	blt.n	8012e3e <__NVIC_SetPriority+0x2a>
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	b2da      	uxtb	r2, r3
 8012e2c:	490c      	ldr	r1, [pc, #48]	; (8012e60 <__NVIC_SetPriority+0x4c>)
 8012e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e32:	0112      	lsls	r2, r2, #4
 8012e34:	b2d2      	uxtb	r2, r2
 8012e36:	440b      	add	r3, r1
 8012e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8012e3c:	e00a      	b.n	8012e54 <__NVIC_SetPriority+0x40>
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	b2da      	uxtb	r2, r3
 8012e42:	4908      	ldr	r1, [pc, #32]	; (8012e64 <__NVIC_SetPriority+0x50>)
 8012e44:	88fb      	ldrh	r3, [r7, #6]
 8012e46:	f003 030f 	and.w	r3, r3, #15
 8012e4a:	3b04      	subs	r3, #4
 8012e4c:	0112      	lsls	r2, r2, #4
 8012e4e:	b2d2      	uxtb	r2, r2
 8012e50:	440b      	add	r3, r1
 8012e52:	761a      	strb	r2, [r3, #24]
 8012e54:	bf00      	nop
 8012e56:	370c      	adds	r7, #12
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5e:	4770      	bx	lr
 8012e60:	e000e100 	.word	0xe000e100
 8012e64:	e000ed00 	.word	0xe000ed00

08012e68 <SysTick_Handler>:
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	af00      	add	r7, sp, #0
 8012e6c:	4b05      	ldr	r3, [pc, #20]	; (8012e84 <SysTick_Handler+0x1c>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	f002 fcf0 	bl	8015854 <xTaskGetSchedulerState>
 8012e74:	4603      	mov	r3, r0
 8012e76:	2b01      	cmp	r3, #1
 8012e78:	d001      	beq.n	8012e7e <SysTick_Handler+0x16>
 8012e7a:	f003 fb0d 	bl	8016498 <xPortSysTickHandler>
 8012e7e:	bf00      	nop
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	e000e010 	.word	0xe000e010

08012e88 <SVC_Setup>:
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	2100      	movs	r1, #0
 8012e8e:	f06f 0004 	mvn.w	r0, #4
 8012e92:	f7ff ffbf 	bl	8012e14 <__NVIC_SetPriority>
 8012e96:	bf00      	nop
 8012e98:	bd80      	pop	{r7, pc}
	...

08012e9c <osKernelInitialize>:
 8012e9c:	b480      	push	{r7}
 8012e9e:	b083      	sub	sp, #12
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	f3ef 8305 	mrs	r3, IPSR
 8012ea6:	603b      	str	r3, [r7, #0]
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d003      	beq.n	8012eb6 <osKernelInitialize+0x1a>
 8012eae:	f06f 0305 	mvn.w	r3, #5
 8012eb2:	607b      	str	r3, [r7, #4]
 8012eb4:	e00c      	b.n	8012ed0 <osKernelInitialize+0x34>
 8012eb6:	4b0a      	ldr	r3, [pc, #40]	; (8012ee0 <osKernelInitialize+0x44>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d105      	bne.n	8012eca <osKernelInitialize+0x2e>
 8012ebe:	4b08      	ldr	r3, [pc, #32]	; (8012ee0 <osKernelInitialize+0x44>)
 8012ec0:	2201      	movs	r2, #1
 8012ec2:	601a      	str	r2, [r3, #0]
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	607b      	str	r3, [r7, #4]
 8012ec8:	e002      	b.n	8012ed0 <osKernelInitialize+0x34>
 8012eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ece:	607b      	str	r3, [r7, #4]
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	370c      	adds	r7, #12
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012edc:	4770      	bx	lr
 8012ede:	bf00      	nop
 8012ee0:	24001110 	.word	0x24001110

08012ee4 <osKernelStart>:
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b082      	sub	sp, #8
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	f3ef 8305 	mrs	r3, IPSR
 8012eee:	603b      	str	r3, [r7, #0]
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d003      	beq.n	8012efe <osKernelStart+0x1a>
 8012ef6:	f06f 0305 	mvn.w	r3, #5
 8012efa:	607b      	str	r3, [r7, #4]
 8012efc:	e010      	b.n	8012f20 <osKernelStart+0x3c>
 8012efe:	4b0b      	ldr	r3, [pc, #44]	; (8012f2c <osKernelStart+0x48>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	2b01      	cmp	r3, #1
 8012f04:	d109      	bne.n	8012f1a <osKernelStart+0x36>
 8012f06:	f7ff ffbf 	bl	8012e88 <SVC_Setup>
 8012f0a:	4b08      	ldr	r3, [pc, #32]	; (8012f2c <osKernelStart+0x48>)
 8012f0c:	2202      	movs	r2, #2
 8012f0e:	601a      	str	r2, [r3, #0]
 8012f10:	f001 ffb2 	bl	8014e78 <vTaskStartScheduler>
 8012f14:	2300      	movs	r3, #0
 8012f16:	607b      	str	r3, [r7, #4]
 8012f18:	e002      	b.n	8012f20 <osKernelStart+0x3c>
 8012f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f1e:	607b      	str	r3, [r7, #4]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	4618      	mov	r0, r3
 8012f24:	3708      	adds	r7, #8
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}
 8012f2a:	bf00      	nop
 8012f2c:	24001110 	.word	0x24001110

08012f30 <osThreadNew>:
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b08e      	sub	sp, #56	; 0x38
 8012f34:	af04      	add	r7, sp, #16
 8012f36:	60f8      	str	r0, [r7, #12]
 8012f38:	60b9      	str	r1, [r7, #8]
 8012f3a:	607a      	str	r2, [r7, #4]
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	613b      	str	r3, [r7, #16]
 8012f40:	f3ef 8305 	mrs	r3, IPSR
 8012f44:	617b      	str	r3, [r7, #20]
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d17e      	bne.n	801304a <osThreadNew+0x11a>
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d07b      	beq.n	801304a <osThreadNew+0x11a>
 8012f52:	2380      	movs	r3, #128	; 0x80
 8012f54:	623b      	str	r3, [r7, #32]
 8012f56:	2318      	movs	r3, #24
 8012f58:	61fb      	str	r3, [r7, #28]
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8012f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f62:	61bb      	str	r3, [r7, #24]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d045      	beq.n	8012ff6 <osThreadNew+0xc6>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d002      	beq.n	8012f78 <osThreadNew+0x48>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	627b      	str	r3, [r7, #36]	; 0x24
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	699b      	ldr	r3, [r3, #24]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d002      	beq.n	8012f86 <osThreadNew+0x56>
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	699b      	ldr	r3, [r3, #24]
 8012f84:	61fb      	str	r3, [r7, #28]
 8012f86:	69fb      	ldr	r3, [r7, #28]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d008      	beq.n	8012f9e <osThreadNew+0x6e>
 8012f8c:	69fb      	ldr	r3, [r7, #28]
 8012f8e:	2b38      	cmp	r3, #56	; 0x38
 8012f90:	d805      	bhi.n	8012f9e <osThreadNew+0x6e>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	f003 0301 	and.w	r3, r3, #1
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d001      	beq.n	8012fa2 <osThreadNew+0x72>
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	e054      	b.n	801304c <osThreadNew+0x11c>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	695b      	ldr	r3, [r3, #20]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d003      	beq.n	8012fb2 <osThreadNew+0x82>
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	695b      	ldr	r3, [r3, #20]
 8012fae:	089b      	lsrs	r3, r3, #2
 8012fb0:	623b      	str	r3, [r7, #32]
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	689b      	ldr	r3, [r3, #8]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d00e      	beq.n	8012fd8 <osThreadNew+0xa8>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	68db      	ldr	r3, [r3, #12]
 8012fbe:	2b5b      	cmp	r3, #91	; 0x5b
 8012fc0:	d90a      	bls.n	8012fd8 <osThreadNew+0xa8>
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	691b      	ldr	r3, [r3, #16]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d006      	beq.n	8012fd8 <osThreadNew+0xa8>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	695b      	ldr	r3, [r3, #20]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d002      	beq.n	8012fd8 <osThreadNew+0xa8>
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	61bb      	str	r3, [r7, #24]
 8012fd6:	e010      	b.n	8012ffa <osThreadNew+0xca>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d10c      	bne.n	8012ffa <osThreadNew+0xca>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	68db      	ldr	r3, [r3, #12]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d108      	bne.n	8012ffa <osThreadNew+0xca>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	691b      	ldr	r3, [r3, #16]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d104      	bne.n	8012ffa <osThreadNew+0xca>
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	61bb      	str	r3, [r7, #24]
 8012ff4:	e001      	b.n	8012ffa <osThreadNew+0xca>
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	61bb      	str	r3, [r7, #24]
 8012ffa:	69bb      	ldr	r3, [r7, #24]
 8012ffc:	2b01      	cmp	r3, #1
 8012ffe:	d110      	bne.n	8013022 <osThreadNew+0xf2>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	691b      	ldr	r3, [r3, #16]
 8013004:	687a      	ldr	r2, [r7, #4]
 8013006:	6892      	ldr	r2, [r2, #8]
 8013008:	9202      	str	r2, [sp, #8]
 801300a:	9301      	str	r3, [sp, #4]
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	9300      	str	r3, [sp, #0]
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	6a3a      	ldr	r2, [r7, #32]
 8013014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013016:	68f8      	ldr	r0, [r7, #12]
 8013018:	f001 fbe0 	bl	80147dc <xTaskCreateStatic>
 801301c:	4603      	mov	r3, r0
 801301e:	613b      	str	r3, [r7, #16]
 8013020:	e013      	b.n	801304a <osThreadNew+0x11a>
 8013022:	69bb      	ldr	r3, [r7, #24]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d110      	bne.n	801304a <osThreadNew+0x11a>
 8013028:	6a3b      	ldr	r3, [r7, #32]
 801302a:	b29a      	uxth	r2, r3
 801302c:	f107 0310 	add.w	r3, r7, #16
 8013030:	9301      	str	r3, [sp, #4]
 8013032:	69fb      	ldr	r3, [r7, #28]
 8013034:	9300      	str	r3, [sp, #0]
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801303a:	68f8      	ldr	r0, [r7, #12]
 801303c:	f001 fc2b 	bl	8014896 <xTaskCreate>
 8013040:	4603      	mov	r3, r0
 8013042:	2b01      	cmp	r3, #1
 8013044:	d001      	beq.n	801304a <osThreadNew+0x11a>
 8013046:	2300      	movs	r3, #0
 8013048:	613b      	str	r3, [r7, #16]
 801304a:	693b      	ldr	r3, [r7, #16]
 801304c:	4618      	mov	r0, r3
 801304e:	3728      	adds	r7, #40	; 0x28
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <osThreadYield>:
 8013054:	b480      	push	{r7}
 8013056:	b083      	sub	sp, #12
 8013058:	af00      	add	r7, sp, #0
 801305a:	f3ef 8305 	mrs	r3, IPSR
 801305e:	603b      	str	r3, [r7, #0]
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d003      	beq.n	801306e <osThreadYield+0x1a>
 8013066:	f06f 0305 	mvn.w	r3, #5
 801306a:	607b      	str	r3, [r7, #4]
 801306c:	e009      	b.n	8013082 <osThreadYield+0x2e>
 801306e:	2300      	movs	r3, #0
 8013070:	607b      	str	r3, [r7, #4]
 8013072:	4b07      	ldr	r3, [pc, #28]	; (8013090 <osThreadYield+0x3c>)
 8013074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013078:	601a      	str	r2, [r3, #0]
 801307a:	f3bf 8f4f 	dsb	sy
 801307e:	f3bf 8f6f 	isb	sy
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	4618      	mov	r0, r3
 8013086:	370c      	adds	r7, #12
 8013088:	46bd      	mov	sp, r7
 801308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308e:	4770      	bx	lr
 8013090:	e000ed04 	.word	0xe000ed04

08013094 <osThreadSuspend>:
 8013094:	b580      	push	{r7, lr}
 8013096:	b086      	sub	sp, #24
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	613b      	str	r3, [r7, #16]
 80130a0:	f3ef 8305 	mrs	r3, IPSR
 80130a4:	60fb      	str	r3, [r7, #12]
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d003      	beq.n	80130b4 <osThreadSuspend+0x20>
 80130ac:	f06f 0305 	mvn.w	r3, #5
 80130b0:	617b      	str	r3, [r7, #20]
 80130b2:	e00b      	b.n	80130cc <osThreadSuspend+0x38>
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d103      	bne.n	80130c2 <osThreadSuspend+0x2e>
 80130ba:	f06f 0303 	mvn.w	r3, #3
 80130be:	617b      	str	r3, [r7, #20]
 80130c0:	e004      	b.n	80130cc <osThreadSuspend+0x38>
 80130c2:	2300      	movs	r3, #0
 80130c4:	617b      	str	r3, [r7, #20]
 80130c6:	6938      	ldr	r0, [r7, #16]
 80130c8:	f001 fd5e 	bl	8014b88 <vTaskSuspend>
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	4618      	mov	r0, r3
 80130d0:	3718      	adds	r7, #24
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <osDelay>:
 80130d6:	b580      	push	{r7, lr}
 80130d8:	b084      	sub	sp, #16
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
 80130de:	f3ef 8305 	mrs	r3, IPSR
 80130e2:	60bb      	str	r3, [r7, #8]
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d003      	beq.n	80130f2 <osDelay+0x1c>
 80130ea:	f06f 0305 	mvn.w	r3, #5
 80130ee:	60fb      	str	r3, [r7, #12]
 80130f0:	e007      	b.n	8013102 <osDelay+0x2c>
 80130f2:	2300      	movs	r3, #0
 80130f4:	60fb      	str	r3, [r7, #12]
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d002      	beq.n	8013102 <osDelay+0x2c>
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f001 fd0f 	bl	8014b20 <vTaskDelay>
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	4618      	mov	r0, r3
 8013106:	3710      	adds	r7, #16
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <osEventFlagsNew>:
 801310c:	b580      	push	{r7, lr}
 801310e:	b086      	sub	sp, #24
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
 8013114:	2300      	movs	r3, #0
 8013116:	617b      	str	r3, [r7, #20]
 8013118:	f3ef 8305 	mrs	r3, IPSR
 801311c:	60fb      	str	r3, [r7, #12]
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d12d      	bne.n	8013180 <osEventFlagsNew+0x74>
 8013124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013128:	613b      	str	r3, [r7, #16]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d015      	beq.n	801315c <osEventFlagsNew+0x50>
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	689b      	ldr	r3, [r3, #8]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d006      	beq.n	8013146 <osEventFlagsNew+0x3a>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	2b1f      	cmp	r3, #31
 801313e:	d902      	bls.n	8013146 <osEventFlagsNew+0x3a>
 8013140:	2301      	movs	r3, #1
 8013142:	613b      	str	r3, [r7, #16]
 8013144:	e00c      	b.n	8013160 <osEventFlagsNew+0x54>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d108      	bne.n	8013160 <osEventFlagsNew+0x54>
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d104      	bne.n	8013160 <osEventFlagsNew+0x54>
 8013156:	2300      	movs	r3, #0
 8013158:	613b      	str	r3, [r7, #16]
 801315a:	e001      	b.n	8013160 <osEventFlagsNew+0x54>
 801315c:	2300      	movs	r3, #0
 801315e:	613b      	str	r3, [r7, #16]
 8013160:	693b      	ldr	r3, [r7, #16]
 8013162:	2b01      	cmp	r3, #1
 8013164:	d106      	bne.n	8013174 <osEventFlagsNew+0x68>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	689b      	ldr	r3, [r3, #8]
 801316a:	4618      	mov	r0, r3
 801316c:	f000 fa70 	bl	8013650 <xEventGroupCreateStatic>
 8013170:	6178      	str	r0, [r7, #20]
 8013172:	e005      	b.n	8013180 <osEventFlagsNew+0x74>
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d102      	bne.n	8013180 <osEventFlagsNew+0x74>
 801317a:	f000 faa0 	bl	80136be <xEventGroupCreate>
 801317e:	6178      	str	r0, [r7, #20]
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	4618      	mov	r0, r3
 8013184:	3718      	adds	r7, #24
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
	...

0801318c <osEventFlagsSet>:
 801318c:	b580      	push	{r7, lr}
 801318e:	b086      	sub	sp, #24
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	6039      	str	r1, [r7, #0]
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	613b      	str	r3, [r7, #16]
 801319a:	693b      	ldr	r3, [r7, #16]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d004      	beq.n	80131aa <osEventFlagsSet+0x1e>
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d003      	beq.n	80131b2 <osEventFlagsSet+0x26>
 80131aa:	f06f 0303 	mvn.w	r3, #3
 80131ae:	617b      	str	r3, [r7, #20]
 80131b0:	e028      	b.n	8013204 <osEventFlagsSet+0x78>
 80131b2:	f3ef 8305 	mrs	r3, IPSR
 80131b6:	60fb      	str	r3, [r7, #12]
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d01d      	beq.n	80131fa <osEventFlagsSet+0x6e>
 80131be:	2300      	movs	r3, #0
 80131c0:	60bb      	str	r3, [r7, #8]
 80131c2:	f107 0308 	add.w	r3, r7, #8
 80131c6:	461a      	mov	r2, r3
 80131c8:	6839      	ldr	r1, [r7, #0]
 80131ca:	6938      	ldr	r0, [r7, #16]
 80131cc:	f000 fc98 	bl	8013b00 <xEventGroupSetBitsFromISR>
 80131d0:	4603      	mov	r3, r0
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d103      	bne.n	80131de <osEventFlagsSet+0x52>
 80131d6:	f06f 0302 	mvn.w	r3, #2
 80131da:	617b      	str	r3, [r7, #20]
 80131dc:	e012      	b.n	8013204 <osEventFlagsSet+0x78>
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	617b      	str	r3, [r7, #20]
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d00d      	beq.n	8013204 <osEventFlagsSet+0x78>
 80131e8:	4b09      	ldr	r3, [pc, #36]	; (8013210 <osEventFlagsSet+0x84>)
 80131ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131ee:	601a      	str	r2, [r3, #0]
 80131f0:	f3bf 8f4f 	dsb	sy
 80131f4:	f3bf 8f6f 	isb	sy
 80131f8:	e004      	b.n	8013204 <osEventFlagsSet+0x78>
 80131fa:	6839      	ldr	r1, [r7, #0]
 80131fc:	6938      	ldr	r0, [r7, #16]
 80131fe:	f000 fbb7 	bl	8013970 <xEventGroupSetBits>
 8013202:	6178      	str	r0, [r7, #20]
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	4618      	mov	r0, r3
 8013208:	3718      	adds	r7, #24
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	e000ed04 	.word	0xe000ed04

08013214 <osEventFlagsClear>:
 8013214:	b580      	push	{r7, lr}
 8013216:	b086      	sub	sp, #24
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	613b      	str	r3, [r7, #16]
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d004      	beq.n	8013232 <osEventFlagsClear+0x1e>
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801322e:	2b00      	cmp	r3, #0
 8013230:	d003      	beq.n	801323a <osEventFlagsClear+0x26>
 8013232:	f06f 0303 	mvn.w	r3, #3
 8013236:	617b      	str	r3, [r7, #20]
 8013238:	e019      	b.n	801326e <osEventFlagsClear+0x5a>
 801323a:	f3ef 8305 	mrs	r3, IPSR
 801323e:	60fb      	str	r3, [r7, #12]
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d00e      	beq.n	8013264 <osEventFlagsClear+0x50>
 8013246:	6938      	ldr	r0, [r7, #16]
 8013248:	f000 fb6e 	bl	8013928 <xEventGroupGetBitsFromISR>
 801324c:	6178      	str	r0, [r7, #20]
 801324e:	6839      	ldr	r1, [r7, #0]
 8013250:	6938      	ldr	r0, [r7, #16]
 8013252:	f000 fb55 	bl	8013900 <xEventGroupClearBitsFromISR>
 8013256:	4603      	mov	r3, r0
 8013258:	2b00      	cmp	r3, #0
 801325a:	d108      	bne.n	801326e <osEventFlagsClear+0x5a>
 801325c:	f06f 0302 	mvn.w	r3, #2
 8013260:	617b      	str	r3, [r7, #20]
 8013262:	e004      	b.n	801326e <osEventFlagsClear+0x5a>
 8013264:	6839      	ldr	r1, [r7, #0]
 8013266:	6938      	ldr	r0, [r7, #16]
 8013268:	f000 fb12 	bl	8013890 <xEventGroupClearBits>
 801326c:	6178      	str	r0, [r7, #20]
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	4618      	mov	r0, r3
 8013272:	3718      	adds	r7, #24
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}

08013278 <osEventFlagsGet>:
 8013278:	b580      	push	{r7, lr}
 801327a:	b086      	sub	sp, #24
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	613b      	str	r3, [r7, #16]
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d102      	bne.n	8013290 <osEventFlagsGet+0x18>
 801328a:	2300      	movs	r3, #0
 801328c:	617b      	str	r3, [r7, #20]
 801328e:	e00f      	b.n	80132b0 <osEventFlagsGet+0x38>
 8013290:	f3ef 8305 	mrs	r3, IPSR
 8013294:	60fb      	str	r3, [r7, #12]
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d004      	beq.n	80132a6 <osEventFlagsGet+0x2e>
 801329c:	6938      	ldr	r0, [r7, #16]
 801329e:	f000 fb43 	bl	8013928 <xEventGroupGetBitsFromISR>
 80132a2:	6178      	str	r0, [r7, #20]
 80132a4:	e004      	b.n	80132b0 <osEventFlagsGet+0x38>
 80132a6:	2100      	movs	r1, #0
 80132a8:	6938      	ldr	r0, [r7, #16]
 80132aa:	f000 faf1 	bl	8013890 <xEventGroupClearBits>
 80132ae:	6178      	str	r0, [r7, #20]
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	4618      	mov	r0, r3
 80132b4:	3718      	adds	r7, #24
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}

080132ba <osEventFlagsWait>:
 80132ba:	b580      	push	{r7, lr}
 80132bc:	b08c      	sub	sp, #48	; 0x30
 80132be:	af02      	add	r7, sp, #8
 80132c0:	60f8      	str	r0, [r7, #12]
 80132c2:	60b9      	str	r1, [r7, #8]
 80132c4:	607a      	str	r2, [r7, #4]
 80132c6:	603b      	str	r3, [r7, #0]
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	61bb      	str	r3, [r7, #24]
 80132cc:	69bb      	ldr	r3, [r7, #24]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d004      	beq.n	80132dc <osEventFlagsWait+0x22>
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d003      	beq.n	80132e4 <osEventFlagsWait+0x2a>
 80132dc:	f06f 0303 	mvn.w	r3, #3
 80132e0:	61fb      	str	r3, [r7, #28]
 80132e2:	e04b      	b.n	801337c <osEventFlagsWait+0xc2>
 80132e4:	f3ef 8305 	mrs	r3, IPSR
 80132e8:	617b      	str	r3, [r7, #20]
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d003      	beq.n	80132f8 <osEventFlagsWait+0x3e>
 80132f0:	f06f 0305 	mvn.w	r3, #5
 80132f4:	61fb      	str	r3, [r7, #28]
 80132f6:	e041      	b.n	801337c <osEventFlagsWait+0xc2>
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f003 0301 	and.w	r3, r3, #1
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d002      	beq.n	8013308 <osEventFlagsWait+0x4e>
 8013302:	2301      	movs	r3, #1
 8013304:	627b      	str	r3, [r7, #36]	; 0x24
 8013306:	e001      	b.n	801330c <osEventFlagsWait+0x52>
 8013308:	2300      	movs	r3, #0
 801330a:	627b      	str	r3, [r7, #36]	; 0x24
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f003 0302 	and.w	r3, r3, #2
 8013312:	2b00      	cmp	r3, #0
 8013314:	d002      	beq.n	801331c <osEventFlagsWait+0x62>
 8013316:	2300      	movs	r3, #0
 8013318:	623b      	str	r3, [r7, #32]
 801331a:	e001      	b.n	8013320 <osEventFlagsWait+0x66>
 801331c:	2301      	movs	r3, #1
 801331e:	623b      	str	r3, [r7, #32]
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	9300      	str	r3, [sp, #0]
 8013324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013326:	6a3a      	ldr	r2, [r7, #32]
 8013328:	68b9      	ldr	r1, [r7, #8]
 801332a:	69b8      	ldr	r0, [r7, #24]
 801332c:	f000 f9e2 	bl	80136f4 <xEventGroupWaitBits>
 8013330:	61f8      	str	r0, [r7, #28]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f003 0301 	and.w	r3, r3, #1
 8013338:	2b00      	cmp	r3, #0
 801333a:	d010      	beq.n	801335e <osEventFlagsWait+0xa4>
 801333c:	68ba      	ldr	r2, [r7, #8]
 801333e:	69fb      	ldr	r3, [r7, #28]
 8013340:	4013      	ands	r3, r2
 8013342:	68ba      	ldr	r2, [r7, #8]
 8013344:	429a      	cmp	r2, r3
 8013346:	d019      	beq.n	801337c <osEventFlagsWait+0xc2>
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d003      	beq.n	8013356 <osEventFlagsWait+0x9c>
 801334e:	f06f 0301 	mvn.w	r3, #1
 8013352:	61fb      	str	r3, [r7, #28]
 8013354:	e012      	b.n	801337c <osEventFlagsWait+0xc2>
 8013356:	f06f 0302 	mvn.w	r3, #2
 801335a:	61fb      	str	r3, [r7, #28]
 801335c:	e00e      	b.n	801337c <osEventFlagsWait+0xc2>
 801335e:	68ba      	ldr	r2, [r7, #8]
 8013360:	69fb      	ldr	r3, [r7, #28]
 8013362:	4013      	ands	r3, r2
 8013364:	2b00      	cmp	r3, #0
 8013366:	d109      	bne.n	801337c <osEventFlagsWait+0xc2>
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d003      	beq.n	8013376 <osEventFlagsWait+0xbc>
 801336e:	f06f 0301 	mvn.w	r3, #1
 8013372:	61fb      	str	r3, [r7, #28]
 8013374:	e002      	b.n	801337c <osEventFlagsWait+0xc2>
 8013376:	f06f 0302 	mvn.w	r3, #2
 801337a:	61fb      	str	r3, [r7, #28]
 801337c:	69fb      	ldr	r3, [r7, #28]
 801337e:	4618      	mov	r0, r3
 8013380:	3728      	adds	r7, #40	; 0x28
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}

08013386 <osMessageQueueNew>:
 8013386:	b580      	push	{r7, lr}
 8013388:	b08a      	sub	sp, #40	; 0x28
 801338a:	af02      	add	r7, sp, #8
 801338c:	60f8      	str	r0, [r7, #12]
 801338e:	60b9      	str	r1, [r7, #8]
 8013390:	607a      	str	r2, [r7, #4]
 8013392:	2300      	movs	r3, #0
 8013394:	61fb      	str	r3, [r7, #28]
 8013396:	f3ef 8305 	mrs	r3, IPSR
 801339a:	613b      	str	r3, [r7, #16]
 801339c:	693b      	ldr	r3, [r7, #16]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d15f      	bne.n	8013462 <osMessageQueueNew+0xdc>
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d05c      	beq.n	8013462 <osMessageQueueNew+0xdc>
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d059      	beq.n	8013462 <osMessageQueueNew+0xdc>
 80133ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133b2:	61bb      	str	r3, [r7, #24]
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d029      	beq.n	801340e <osMessageQueueNew+0x88>
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	689b      	ldr	r3, [r3, #8]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d012      	beq.n	80133e8 <osMessageQueueNew+0x62>
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	68db      	ldr	r3, [r3, #12]
 80133c6:	2b4f      	cmp	r3, #79	; 0x4f
 80133c8:	d90e      	bls.n	80133e8 <osMessageQueueNew+0x62>
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	691b      	ldr	r3, [r3, #16]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d00a      	beq.n	80133e8 <osMessageQueueNew+0x62>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	695a      	ldr	r2, [r3, #20]
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	68b9      	ldr	r1, [r7, #8]
 80133da:	fb01 f303 	mul.w	r3, r1, r3
 80133de:	429a      	cmp	r2, r3
 80133e0:	d302      	bcc.n	80133e8 <osMessageQueueNew+0x62>
 80133e2:	2301      	movs	r3, #1
 80133e4:	61bb      	str	r3, [r7, #24]
 80133e6:	e014      	b.n	8013412 <osMessageQueueNew+0x8c>
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	689b      	ldr	r3, [r3, #8]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d110      	bne.n	8013412 <osMessageQueueNew+0x8c>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d10c      	bne.n	8013412 <osMessageQueueNew+0x8c>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	691b      	ldr	r3, [r3, #16]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d108      	bne.n	8013412 <osMessageQueueNew+0x8c>
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	695b      	ldr	r3, [r3, #20]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d104      	bne.n	8013412 <osMessageQueueNew+0x8c>
 8013408:	2300      	movs	r3, #0
 801340a:	61bb      	str	r3, [r7, #24]
 801340c:	e001      	b.n	8013412 <osMessageQueueNew+0x8c>
 801340e:	2300      	movs	r3, #0
 8013410:	61bb      	str	r3, [r7, #24]
 8013412:	69bb      	ldr	r3, [r7, #24]
 8013414:	2b01      	cmp	r3, #1
 8013416:	d10b      	bne.n	8013430 <osMessageQueueNew+0xaa>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	691a      	ldr	r2, [r3, #16]
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	689b      	ldr	r3, [r3, #8]
 8013420:	2100      	movs	r1, #0
 8013422:	9100      	str	r1, [sp, #0]
 8013424:	68b9      	ldr	r1, [r7, #8]
 8013426:	68f8      	ldr	r0, [r7, #12]
 8013428:	f000 fc9a 	bl	8013d60 <xQueueGenericCreateStatic>
 801342c:	61f8      	str	r0, [r7, #28]
 801342e:	e008      	b.n	8013442 <osMessageQueueNew+0xbc>
 8013430:	69bb      	ldr	r3, [r7, #24]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d105      	bne.n	8013442 <osMessageQueueNew+0xbc>
 8013436:	2200      	movs	r2, #0
 8013438:	68b9      	ldr	r1, [r7, #8]
 801343a:	68f8      	ldr	r0, [r7, #12]
 801343c:	f000 fd08 	bl	8013e50 <xQueueGenericCreate>
 8013440:	61f8      	str	r0, [r7, #28]
 8013442:	69fb      	ldr	r3, [r7, #28]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d00c      	beq.n	8013462 <osMessageQueueNew+0xdc>
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d003      	beq.n	8013456 <osMessageQueueNew+0xd0>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	617b      	str	r3, [r7, #20]
 8013454:	e001      	b.n	801345a <osMessageQueueNew+0xd4>
 8013456:	2300      	movs	r3, #0
 8013458:	617b      	str	r3, [r7, #20]
 801345a:	6979      	ldr	r1, [r7, #20]
 801345c:	69f8      	ldr	r0, [r7, #28]
 801345e:	f001 f95f 	bl	8014720 <vQueueAddToRegistry>
 8013462:	69fb      	ldr	r3, [r7, #28]
 8013464:	4618      	mov	r0, r3
 8013466:	3720      	adds	r7, #32
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}

0801346c <osMessageQueuePut>:
 801346c:	b580      	push	{r7, lr}
 801346e:	b088      	sub	sp, #32
 8013470:	af00      	add	r7, sp, #0
 8013472:	60f8      	str	r0, [r7, #12]
 8013474:	60b9      	str	r1, [r7, #8]
 8013476:	603b      	str	r3, [r7, #0]
 8013478:	4613      	mov	r3, r2
 801347a:	71fb      	strb	r3, [r7, #7]
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	61bb      	str	r3, [r7, #24]
 8013480:	2300      	movs	r3, #0
 8013482:	61fb      	str	r3, [r7, #28]
 8013484:	f3ef 8305 	mrs	r3, IPSR
 8013488:	617b      	str	r3, [r7, #20]
 801348a:	697b      	ldr	r3, [r7, #20]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d028      	beq.n	80134e2 <osMessageQueuePut+0x76>
 8013490:	69bb      	ldr	r3, [r7, #24]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d005      	beq.n	80134a2 <osMessageQueuePut+0x36>
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d002      	beq.n	80134a2 <osMessageQueuePut+0x36>
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d003      	beq.n	80134aa <osMessageQueuePut+0x3e>
 80134a2:	f06f 0303 	mvn.w	r3, #3
 80134a6:	61fb      	str	r3, [r7, #28]
 80134a8:	e038      	b.n	801351c <osMessageQueuePut+0xb0>
 80134aa:	2300      	movs	r3, #0
 80134ac:	613b      	str	r3, [r7, #16]
 80134ae:	f107 0210 	add.w	r2, r7, #16
 80134b2:	2300      	movs	r3, #0
 80134b4:	68b9      	ldr	r1, [r7, #8]
 80134b6:	69b8      	ldr	r0, [r7, #24]
 80134b8:	f000 fe26 	bl	8014108 <xQueueGenericSendFromISR>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d003      	beq.n	80134ca <osMessageQueuePut+0x5e>
 80134c2:	f06f 0302 	mvn.w	r3, #2
 80134c6:	61fb      	str	r3, [r7, #28]
 80134c8:	e028      	b.n	801351c <osMessageQueuePut+0xb0>
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d025      	beq.n	801351c <osMessageQueuePut+0xb0>
 80134d0:	4b15      	ldr	r3, [pc, #84]	; (8013528 <osMessageQueuePut+0xbc>)
 80134d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134d6:	601a      	str	r2, [r3, #0]
 80134d8:	f3bf 8f4f 	dsb	sy
 80134dc:	f3bf 8f6f 	isb	sy
 80134e0:	e01c      	b.n	801351c <osMessageQueuePut+0xb0>
 80134e2:	69bb      	ldr	r3, [r7, #24]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d002      	beq.n	80134ee <osMessageQueuePut+0x82>
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d103      	bne.n	80134f6 <osMessageQueuePut+0x8a>
 80134ee:	f06f 0303 	mvn.w	r3, #3
 80134f2:	61fb      	str	r3, [r7, #28]
 80134f4:	e012      	b.n	801351c <osMessageQueuePut+0xb0>
 80134f6:	2300      	movs	r3, #0
 80134f8:	683a      	ldr	r2, [r7, #0]
 80134fa:	68b9      	ldr	r1, [r7, #8]
 80134fc:	69b8      	ldr	r0, [r7, #24]
 80134fe:	f000 fd05 	bl	8013f0c <xQueueGenericSend>
 8013502:	4603      	mov	r3, r0
 8013504:	2b01      	cmp	r3, #1
 8013506:	d009      	beq.n	801351c <osMessageQueuePut+0xb0>
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d003      	beq.n	8013516 <osMessageQueuePut+0xaa>
 801350e:	f06f 0301 	mvn.w	r3, #1
 8013512:	61fb      	str	r3, [r7, #28]
 8013514:	e002      	b.n	801351c <osMessageQueuePut+0xb0>
 8013516:	f06f 0302 	mvn.w	r3, #2
 801351a:	61fb      	str	r3, [r7, #28]
 801351c:	69fb      	ldr	r3, [r7, #28]
 801351e:	4618      	mov	r0, r3
 8013520:	3720      	adds	r7, #32
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}
 8013526:	bf00      	nop
 8013528:	e000ed04 	.word	0xe000ed04

0801352c <osMessageQueueGet>:
 801352c:	b580      	push	{r7, lr}
 801352e:	b088      	sub	sp, #32
 8013530:	af00      	add	r7, sp, #0
 8013532:	60f8      	str	r0, [r7, #12]
 8013534:	60b9      	str	r1, [r7, #8]
 8013536:	607a      	str	r2, [r7, #4]
 8013538:	603b      	str	r3, [r7, #0]
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	61bb      	str	r3, [r7, #24]
 801353e:	2300      	movs	r3, #0
 8013540:	61fb      	str	r3, [r7, #28]
 8013542:	f3ef 8305 	mrs	r3, IPSR
 8013546:	617b      	str	r3, [r7, #20]
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d028      	beq.n	80135a0 <osMessageQueueGet+0x74>
 801354e:	69bb      	ldr	r3, [r7, #24]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d005      	beq.n	8013560 <osMessageQueueGet+0x34>
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d002      	beq.n	8013560 <osMessageQueueGet+0x34>
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d003      	beq.n	8013568 <osMessageQueueGet+0x3c>
 8013560:	f06f 0303 	mvn.w	r3, #3
 8013564:	61fb      	str	r3, [r7, #28]
 8013566:	e037      	b.n	80135d8 <osMessageQueueGet+0xac>
 8013568:	2300      	movs	r3, #0
 801356a:	613b      	str	r3, [r7, #16]
 801356c:	f107 0310 	add.w	r3, r7, #16
 8013570:	461a      	mov	r2, r3
 8013572:	68b9      	ldr	r1, [r7, #8]
 8013574:	69b8      	ldr	r0, [r7, #24]
 8013576:	f000 ff43 	bl	8014400 <xQueueReceiveFromISR>
 801357a:	4603      	mov	r3, r0
 801357c:	2b01      	cmp	r3, #1
 801357e:	d003      	beq.n	8013588 <osMessageQueueGet+0x5c>
 8013580:	f06f 0302 	mvn.w	r3, #2
 8013584:	61fb      	str	r3, [r7, #28]
 8013586:	e027      	b.n	80135d8 <osMessageQueueGet+0xac>
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d024      	beq.n	80135d8 <osMessageQueueGet+0xac>
 801358e:	4b15      	ldr	r3, [pc, #84]	; (80135e4 <osMessageQueueGet+0xb8>)
 8013590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013594:	601a      	str	r2, [r3, #0]
 8013596:	f3bf 8f4f 	dsb	sy
 801359a:	f3bf 8f6f 	isb	sy
 801359e:	e01b      	b.n	80135d8 <osMessageQueueGet+0xac>
 80135a0:	69bb      	ldr	r3, [r7, #24]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d002      	beq.n	80135ac <osMessageQueueGet+0x80>
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d103      	bne.n	80135b4 <osMessageQueueGet+0x88>
 80135ac:	f06f 0303 	mvn.w	r3, #3
 80135b0:	61fb      	str	r3, [r7, #28]
 80135b2:	e011      	b.n	80135d8 <osMessageQueueGet+0xac>
 80135b4:	683a      	ldr	r2, [r7, #0]
 80135b6:	68b9      	ldr	r1, [r7, #8]
 80135b8:	69b8      	ldr	r0, [r7, #24]
 80135ba:	f000 fe41 	bl	8014240 <xQueueReceive>
 80135be:	4603      	mov	r3, r0
 80135c0:	2b01      	cmp	r3, #1
 80135c2:	d009      	beq.n	80135d8 <osMessageQueueGet+0xac>
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d003      	beq.n	80135d2 <osMessageQueueGet+0xa6>
 80135ca:	f06f 0301 	mvn.w	r3, #1
 80135ce:	61fb      	str	r3, [r7, #28]
 80135d0:	e002      	b.n	80135d8 <osMessageQueueGet+0xac>
 80135d2:	f06f 0302 	mvn.w	r3, #2
 80135d6:	61fb      	str	r3, [r7, #28]
 80135d8:	69fb      	ldr	r3, [r7, #28]
 80135da:	4618      	mov	r0, r3
 80135dc:	3720      	adds	r7, #32
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
 80135e2:	bf00      	nop
 80135e4:	e000ed04 	.word	0xe000ed04

080135e8 <vApplicationGetIdleTaskMemory>:
 80135e8:	b480      	push	{r7}
 80135ea:	b085      	sub	sp, #20
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	60f8      	str	r0, [r7, #12]
 80135f0:	60b9      	str	r1, [r7, #8]
 80135f2:	607a      	str	r2, [r7, #4]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	4a07      	ldr	r2, [pc, #28]	; (8013614 <vApplicationGetIdleTaskMemory+0x2c>)
 80135f8:	601a      	str	r2, [r3, #0]
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	4a06      	ldr	r2, [pc, #24]	; (8013618 <vApplicationGetIdleTaskMemory+0x30>)
 80135fe:	601a      	str	r2, [r3, #0]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2280      	movs	r2, #128	; 0x80
 8013604:	601a      	str	r2, [r3, #0]
 8013606:	bf00      	nop
 8013608:	3714      	adds	r7, #20
 801360a:	46bd      	mov	sp, r7
 801360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013610:	4770      	bx	lr
 8013612:	bf00      	nop
 8013614:	24001114 	.word	0x24001114
 8013618:	24001170 	.word	0x24001170

0801361c <vApplicationGetTimerTaskMemory>:
 801361c:	b480      	push	{r7}
 801361e:	b085      	sub	sp, #20
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	607a      	str	r2, [r7, #4]
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	4a07      	ldr	r2, [pc, #28]	; (8013648 <vApplicationGetTimerTaskMemory+0x2c>)
 801362c:	601a      	str	r2, [r3, #0]
 801362e:	68bb      	ldr	r3, [r7, #8]
 8013630:	4a06      	ldr	r2, [pc, #24]	; (801364c <vApplicationGetTimerTaskMemory+0x30>)
 8013632:	601a      	str	r2, [r3, #0]
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f44f 7280 	mov.w	r2, #256	; 0x100
 801363a:	601a      	str	r2, [r3, #0]
 801363c:	bf00      	nop
 801363e:	3714      	adds	r7, #20
 8013640:	46bd      	mov	sp, r7
 8013642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013646:	4770      	bx	lr
 8013648:	24001370 	.word	0x24001370
 801364c:	240013cc 	.word	0x240013cc

08013650 <xEventGroupCreateStatic>:
 8013650:	b580      	push	{r7, lr}
 8013652:	b086      	sub	sp, #24
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d10a      	bne.n	8013674 <xEventGroupCreateStatic+0x24>
 801365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013662:	f383 8811 	msr	BASEPRI, r3
 8013666:	f3bf 8f6f 	isb	sy
 801366a:	f3bf 8f4f 	dsb	sy
 801366e:	613b      	str	r3, [r7, #16]
 8013670:	bf00      	nop
 8013672:	e7fe      	b.n	8013672 <xEventGroupCreateStatic+0x22>
 8013674:	2320      	movs	r3, #32
 8013676:	60bb      	str	r3, [r7, #8]
 8013678:	68bb      	ldr	r3, [r7, #8]
 801367a:	2b20      	cmp	r3, #32
 801367c:	d00a      	beq.n	8013694 <xEventGroupCreateStatic+0x44>
 801367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013682:	f383 8811 	msr	BASEPRI, r3
 8013686:	f3bf 8f6f 	isb	sy
 801368a:	f3bf 8f4f 	dsb	sy
 801368e:	60fb      	str	r3, [r7, #12]
 8013690:	bf00      	nop
 8013692:	e7fe      	b.n	8013692 <xEventGroupCreateStatic+0x42>
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	617b      	str	r3, [r7, #20]
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d00a      	beq.n	80136b4 <xEventGroupCreateStatic+0x64>
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	2200      	movs	r2, #0
 80136a2:	601a      	str	r2, [r3, #0]
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	3304      	adds	r3, #4
 80136a8:	4618      	mov	r0, r3
 80136aa:	f000 fa3d 	bl	8013b28 <vListInitialise>
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	2201      	movs	r2, #1
 80136b2:	771a      	strb	r2, [r3, #28]
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	4618      	mov	r0, r3
 80136b8:	3718      	adds	r7, #24
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}

080136be <xEventGroupCreate>:
 80136be:	b580      	push	{r7, lr}
 80136c0:	b082      	sub	sp, #8
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	2020      	movs	r0, #32
 80136c6:	f002 ff77 	bl	80165b8 <pvPortMalloc>
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d00a      	beq.n	80136e8 <xEventGroupCreate+0x2a>
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	2200      	movs	r2, #0
 80136d6:	601a      	str	r2, [r3, #0]
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	3304      	adds	r3, #4
 80136dc:	4618      	mov	r0, r3
 80136de:	f000 fa23 	bl	8013b28 <vListInitialise>
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2200      	movs	r2, #0
 80136e6:	771a      	strb	r2, [r3, #28]
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	4618      	mov	r0, r3
 80136ec:	3708      	adds	r7, #8
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
	...

080136f4 <xEventGroupWaitBits>:
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b090      	sub	sp, #64	; 0x40
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	60b9      	str	r1, [r7, #8]
 80136fe:	607a      	str	r2, [r7, #4]
 8013700:	603b      	str	r3, [r7, #0]
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	637b      	str	r3, [r7, #52]	; 0x34
 8013706:	2300      	movs	r3, #0
 8013708:	63bb      	str	r3, [r7, #56]	; 0x38
 801370a:	2300      	movs	r3, #0
 801370c:	633b      	str	r3, [r7, #48]	; 0x30
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d10a      	bne.n	801372a <xEventGroupWaitBits+0x36>
 8013714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013718:	f383 8811 	msr	BASEPRI, r3
 801371c:	f3bf 8f6f 	isb	sy
 8013720:	f3bf 8f4f 	dsb	sy
 8013724:	623b      	str	r3, [r7, #32]
 8013726:	bf00      	nop
 8013728:	e7fe      	b.n	8013728 <xEventGroupWaitBits+0x34>
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013730:	2b00      	cmp	r3, #0
 8013732:	d00a      	beq.n	801374a <xEventGroupWaitBits+0x56>
 8013734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013738:	f383 8811 	msr	BASEPRI, r3
 801373c:	f3bf 8f6f 	isb	sy
 8013740:	f3bf 8f4f 	dsb	sy
 8013744:	61fb      	str	r3, [r7, #28]
 8013746:	bf00      	nop
 8013748:	e7fe      	b.n	8013748 <xEventGroupWaitBits+0x54>
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d10a      	bne.n	8013766 <xEventGroupWaitBits+0x72>
 8013750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013754:	f383 8811 	msr	BASEPRI, r3
 8013758:	f3bf 8f6f 	isb	sy
 801375c:	f3bf 8f4f 	dsb	sy
 8013760:	61bb      	str	r3, [r7, #24]
 8013762:	bf00      	nop
 8013764:	e7fe      	b.n	8013764 <xEventGroupWaitBits+0x70>
 8013766:	f002 f875 	bl	8015854 <xTaskGetSchedulerState>
 801376a:	4603      	mov	r3, r0
 801376c:	2b00      	cmp	r3, #0
 801376e:	d102      	bne.n	8013776 <xEventGroupWaitBits+0x82>
 8013770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013772:	2b00      	cmp	r3, #0
 8013774:	d101      	bne.n	801377a <xEventGroupWaitBits+0x86>
 8013776:	2301      	movs	r3, #1
 8013778:	e000      	b.n	801377c <xEventGroupWaitBits+0x88>
 801377a:	2300      	movs	r3, #0
 801377c:	2b00      	cmp	r3, #0
 801377e:	d10a      	bne.n	8013796 <xEventGroupWaitBits+0xa2>
 8013780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013784:	f383 8811 	msr	BASEPRI, r3
 8013788:	f3bf 8f6f 	isb	sy
 801378c:	f3bf 8f4f 	dsb	sy
 8013790:	617b      	str	r3, [r7, #20]
 8013792:	bf00      	nop
 8013794:	e7fe      	b.n	8013794 <xEventGroupWaitBits+0xa0>
 8013796:	f001 fbd5 	bl	8014f44 <vTaskSuspendAll>
 801379a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137a0:	683a      	ldr	r2, [r7, #0]
 80137a2:	68b9      	ldr	r1, [r7, #8]
 80137a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137a6:	f000 f988 	bl	8013aba <prvTestWaitCondition>
 80137aa:	62b8      	str	r0, [r7, #40]	; 0x28
 80137ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d00e      	beq.n	80137d0 <xEventGroupWaitBits+0xdc>
 80137b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137b6:	2300      	movs	r3, #0
 80137b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d028      	beq.n	8013812 <xEventGroupWaitBits+0x11e>
 80137c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137c2:	681a      	ldr	r2, [r3, #0]
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	43db      	mvns	r3, r3
 80137c8:	401a      	ands	r2, r3
 80137ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137cc:	601a      	str	r2, [r3, #0]
 80137ce:	e020      	b.n	8013812 <xEventGroupWaitBits+0x11e>
 80137d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d104      	bne.n	80137e0 <xEventGroupWaitBits+0xec>
 80137d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137da:	2301      	movs	r3, #1
 80137dc:	633b      	str	r3, [r7, #48]	; 0x30
 80137de:	e018      	b.n	8013812 <xEventGroupWaitBits+0x11e>
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d003      	beq.n	80137ee <xEventGroupWaitBits+0xfa>
 80137e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80137ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d003      	beq.n	80137fc <xEventGroupWaitBits+0x108>
 80137f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80137fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80137fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137fe:	1d18      	adds	r0, r3, #4
 8013800:	68ba      	ldr	r2, [r7, #8]
 8013802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013804:	4313      	orrs	r3, r2
 8013806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013808:	4619      	mov	r1, r3
 801380a:	f001 fd9b 	bl	8015344 <vTaskPlaceOnUnorderedEventList>
 801380e:	2300      	movs	r3, #0
 8013810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013812:	f001 fba5 	bl	8014f60 <xTaskResumeAll>
 8013816:	6278      	str	r0, [r7, #36]	; 0x24
 8013818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801381a:	2b00      	cmp	r3, #0
 801381c:	d031      	beq.n	8013882 <xEventGroupWaitBits+0x18e>
 801381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013820:	2b00      	cmp	r3, #0
 8013822:	d107      	bne.n	8013834 <xEventGroupWaitBits+0x140>
 8013824:	4b19      	ldr	r3, [pc, #100]	; (801388c <xEventGroupWaitBits+0x198>)
 8013826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801382a:	601a      	str	r2, [r3, #0]
 801382c:	f3bf 8f4f 	dsb	sy
 8013830:	f3bf 8f6f 	isb	sy
 8013834:	f002 f89a 	bl	801596c <uxTaskResetEventItemValue>
 8013838:	63f8      	str	r0, [r7, #60]	; 0x3c
 801383a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801383c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013840:	2b00      	cmp	r3, #0
 8013842:	d11a      	bne.n	801387a <xEventGroupWaitBits+0x186>
 8013844:	f002 fd96 	bl	8016374 <vPortEnterCritical>
 8013848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801384e:	683a      	ldr	r2, [r7, #0]
 8013850:	68b9      	ldr	r1, [r7, #8]
 8013852:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013854:	f000 f931 	bl	8013aba <prvTestWaitCondition>
 8013858:	4603      	mov	r3, r0
 801385a:	2b00      	cmp	r3, #0
 801385c:	d009      	beq.n	8013872 <xEventGroupWaitBits+0x17e>
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d006      	beq.n	8013872 <xEventGroupWaitBits+0x17e>
 8013864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013866:	681a      	ldr	r2, [r3, #0]
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	43db      	mvns	r3, r3
 801386c:	401a      	ands	r2, r3
 801386e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013870:	601a      	str	r2, [r3, #0]
 8013872:	2301      	movs	r3, #1
 8013874:	633b      	str	r3, [r7, #48]	; 0x30
 8013876:	f002 fdad 	bl	80163d4 <vPortExitCritical>
 801387a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801387c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013884:	4618      	mov	r0, r3
 8013886:	3740      	adds	r7, #64	; 0x40
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}
 801388c:	e000ed04 	.word	0xe000ed04

08013890 <xEventGroupClearBits>:
 8013890:	b580      	push	{r7, lr}
 8013892:	b086      	sub	sp, #24
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	6039      	str	r1, [r7, #0]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	617b      	str	r3, [r7, #20]
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d10a      	bne.n	80138ba <xEventGroupClearBits+0x2a>
 80138a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a8:	f383 8811 	msr	BASEPRI, r3
 80138ac:	f3bf 8f6f 	isb	sy
 80138b0:	f3bf 8f4f 	dsb	sy
 80138b4:	60fb      	str	r3, [r7, #12]
 80138b6:	bf00      	nop
 80138b8:	e7fe      	b.n	80138b8 <xEventGroupClearBits+0x28>
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d00a      	beq.n	80138da <xEventGroupClearBits+0x4a>
 80138c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c8:	f383 8811 	msr	BASEPRI, r3
 80138cc:	f3bf 8f6f 	isb	sy
 80138d0:	f3bf 8f4f 	dsb	sy
 80138d4:	60bb      	str	r3, [r7, #8]
 80138d6:	bf00      	nop
 80138d8:	e7fe      	b.n	80138d8 <xEventGroupClearBits+0x48>
 80138da:	f002 fd4b 	bl	8016374 <vPortEnterCritical>
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	613b      	str	r3, [r7, #16]
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	681a      	ldr	r2, [r3, #0]
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	43db      	mvns	r3, r3
 80138ec:	401a      	ands	r2, r3
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	601a      	str	r2, [r3, #0]
 80138f2:	f002 fd6f 	bl	80163d4 <vPortExitCritical>
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	4618      	mov	r0, r3
 80138fa:	3718      	adds	r7, #24
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}

08013900 <xEventGroupClearBitsFromISR>:
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
 801390a:	2300      	movs	r3, #0
 801390c:	683a      	ldr	r2, [r7, #0]
 801390e:	6879      	ldr	r1, [r7, #4]
 8013910:	4804      	ldr	r0, [pc, #16]	; (8013924 <xEventGroupClearBitsFromISR+0x24>)
 8013912:	f002 fbe5 	bl	80160e0 <xTimerPendFunctionCallFromISR>
 8013916:	60f8      	str	r0, [r7, #12]
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	4618      	mov	r0, r3
 801391c:	3710      	adds	r7, #16
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	08013aa1 	.word	0x08013aa1

08013928 <xEventGroupGetBitsFromISR>:
 8013928:	b480      	push	{r7}
 801392a:	b089      	sub	sp, #36	; 0x24
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	61fb      	str	r3, [r7, #28]
 8013934:	f3ef 8211 	mrs	r2, BASEPRI
 8013938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801393c:	f383 8811 	msr	BASEPRI, r3
 8013940:	f3bf 8f6f 	isb	sy
 8013944:	f3bf 8f4f 	dsb	sy
 8013948:	60fa      	str	r2, [r7, #12]
 801394a:	60bb      	str	r3, [r7, #8]
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	61bb      	str	r3, [r7, #24]
 8013950:	69fb      	ldr	r3, [r7, #28]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	617b      	str	r3, [r7, #20]
 8013956:	69bb      	ldr	r3, [r7, #24]
 8013958:	613b      	str	r3, [r7, #16]
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	f383 8811 	msr	BASEPRI, r3
 8013960:	bf00      	nop
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	4618      	mov	r0, r3
 8013966:	3724      	adds	r7, #36	; 0x24
 8013968:	46bd      	mov	sp, r7
 801396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396e:	4770      	bx	lr

08013970 <xEventGroupSetBits>:
 8013970:	b580      	push	{r7, lr}
 8013972:	b08e      	sub	sp, #56	; 0x38
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	6039      	str	r1, [r7, #0]
 801397a:	2300      	movs	r3, #0
 801397c:	633b      	str	r3, [r7, #48]	; 0x30
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	62bb      	str	r3, [r7, #40]	; 0x28
 8013982:	2300      	movs	r3, #0
 8013984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d10a      	bne.n	80139a2 <xEventGroupSetBits+0x32>
 801398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013990:	f383 8811 	msr	BASEPRI, r3
 8013994:	f3bf 8f6f 	isb	sy
 8013998:	f3bf 8f4f 	dsb	sy
 801399c:	613b      	str	r3, [r7, #16]
 801399e:	bf00      	nop
 80139a0:	e7fe      	b.n	80139a0 <xEventGroupSetBits+0x30>
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d00a      	beq.n	80139c2 <xEventGroupSetBits+0x52>
 80139ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139b0:	f383 8811 	msr	BASEPRI, r3
 80139b4:	f3bf 8f6f 	isb	sy
 80139b8:	f3bf 8f4f 	dsb	sy
 80139bc:	60fb      	str	r3, [r7, #12]
 80139be:	bf00      	nop
 80139c0:	e7fe      	b.n	80139c0 <xEventGroupSetBits+0x50>
 80139c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c4:	3304      	adds	r3, #4
 80139c6:	627b      	str	r3, [r7, #36]	; 0x24
 80139c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ca:	3308      	adds	r3, #8
 80139cc:	623b      	str	r3, [r7, #32]
 80139ce:	f001 fab9 	bl	8014f44 <vTaskSuspendAll>
 80139d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d4:	68db      	ldr	r3, [r3, #12]
 80139d6:	637b      	str	r3, [r7, #52]	; 0x34
 80139d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139da:	681a      	ldr	r2, [r3, #0]
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	431a      	orrs	r2, r3
 80139e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e2:	601a      	str	r2, [r3, #0]
 80139e4:	e03c      	b.n	8013a60 <xEventGroupSetBits+0xf0>
 80139e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	61fb      	str	r3, [r7, #28]
 80139ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	61bb      	str	r3, [r7, #24]
 80139f2:	2300      	movs	r3, #0
 80139f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139f6:	69bb      	ldr	r3, [r7, #24]
 80139f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80139fc:	617b      	str	r3, [r7, #20]
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013a04:	61bb      	str	r3, [r7, #24]
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d108      	bne.n	8013a22 <xEventGroupSetBits+0xb2>
 8013a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a12:	681a      	ldr	r2, [r3, #0]
 8013a14:	69bb      	ldr	r3, [r7, #24]
 8013a16:	4013      	ands	r3, r2
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d00b      	beq.n	8013a34 <xEventGroupSetBits+0xc4>
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a20:	e008      	b.n	8013a34 <xEventGroupSetBits+0xc4>
 8013a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	69bb      	ldr	r3, [r7, #24]
 8013a28:	4013      	ands	r3, r2
 8013a2a:	69ba      	ldr	r2, [r7, #24]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d101      	bne.n	8013a34 <xEventGroupSetBits+0xc4>
 8013a30:	2301      	movs	r3, #1
 8013a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d010      	beq.n	8013a5c <xEventGroupSetBits+0xec>
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d003      	beq.n	8013a4c <xEventGroupSetBits+0xdc>
 8013a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a46:	69bb      	ldr	r3, [r7, #24]
 8013a48:	4313      	orrs	r3, r2
 8013a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8013a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013a54:	4619      	mov	r1, r3
 8013a56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013a58:	f001 fd40 	bl	80154dc <vTaskRemoveFromUnorderedEventList>
 8013a5c:	69fb      	ldr	r3, [r7, #28]
 8013a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8013a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a62:	6a3b      	ldr	r3, [r7, #32]
 8013a64:	429a      	cmp	r2, r3
 8013a66:	d1be      	bne.n	80139e6 <xEventGroupSetBits+0x76>
 8013a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6a:	681a      	ldr	r2, [r3, #0]
 8013a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a6e:	43db      	mvns	r3, r3
 8013a70:	401a      	ands	r2, r3
 8013a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a74:	601a      	str	r2, [r3, #0]
 8013a76:	f001 fa73 	bl	8014f60 <xTaskResumeAll>
 8013a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3738      	adds	r7, #56	; 0x38
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}

08013a86 <vEventGroupSetBitsCallback>:
 8013a86:	b580      	push	{r7, lr}
 8013a88:	b082      	sub	sp, #8
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
 8013a8e:	6039      	str	r1, [r7, #0]
 8013a90:	6839      	ldr	r1, [r7, #0]
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	f7ff ff6c 	bl	8013970 <xEventGroupSetBits>
 8013a98:	bf00      	nop
 8013a9a:	3708      	adds	r7, #8
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}

08013aa0 <vEventGroupClearBitsCallback>:
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b082      	sub	sp, #8
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	6039      	str	r1, [r7, #0]
 8013aaa:	6839      	ldr	r1, [r7, #0]
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f7ff feef 	bl	8013890 <xEventGroupClearBits>
 8013ab2:	bf00      	nop
 8013ab4:	3708      	adds	r7, #8
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}

08013aba <prvTestWaitCondition>:
 8013aba:	b480      	push	{r7}
 8013abc:	b087      	sub	sp, #28
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	60f8      	str	r0, [r7, #12]
 8013ac2:	60b9      	str	r1, [r7, #8]
 8013ac4:	607a      	str	r2, [r7, #4]
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	617b      	str	r3, [r7, #20]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d107      	bne.n	8013ae0 <prvTestWaitCondition+0x26>
 8013ad0:	68fa      	ldr	r2, [r7, #12]
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	4013      	ands	r3, r2
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d00a      	beq.n	8013af0 <prvTestWaitCondition+0x36>
 8013ada:	2301      	movs	r3, #1
 8013adc:	617b      	str	r3, [r7, #20]
 8013ade:	e007      	b.n	8013af0 <prvTestWaitCondition+0x36>
 8013ae0:	68fa      	ldr	r2, [r7, #12]
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	4013      	ands	r3, r2
 8013ae6:	68ba      	ldr	r2, [r7, #8]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d101      	bne.n	8013af0 <prvTestWaitCondition+0x36>
 8013aec:	2301      	movs	r3, #1
 8013aee:	617b      	str	r3, [r7, #20]
 8013af0:	697b      	ldr	r3, [r7, #20]
 8013af2:	4618      	mov	r0, r3
 8013af4:	371c      	adds	r7, #28
 8013af6:	46bd      	mov	sp, r7
 8013af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afc:	4770      	bx	lr
	...

08013b00 <xEventGroupSetBitsFromISR>:
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b086      	sub	sp, #24
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	60f8      	str	r0, [r7, #12]
 8013b08:	60b9      	str	r1, [r7, #8]
 8013b0a:	607a      	str	r2, [r7, #4]
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	68ba      	ldr	r2, [r7, #8]
 8013b10:	68f9      	ldr	r1, [r7, #12]
 8013b12:	4804      	ldr	r0, [pc, #16]	; (8013b24 <xEventGroupSetBitsFromISR+0x24>)
 8013b14:	f002 fae4 	bl	80160e0 <xTimerPendFunctionCallFromISR>
 8013b18:	6178      	str	r0, [r7, #20]
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3718      	adds	r7, #24
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	08013a87 	.word	0x08013a87

08013b28 <vListInitialise>:
 8013b28:	b480      	push	{r7}
 8013b2a:	b083      	sub	sp, #12
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f103 0208 	add.w	r2, r3, #8
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	605a      	str	r2, [r3, #4]
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b40:	609a      	str	r2, [r3, #8]
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f103 0208 	add.w	r2, r3, #8
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	60da      	str	r2, [r3, #12]
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f103 0208 	add.w	r2, r3, #8
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	611a      	str	r2, [r3, #16]
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	601a      	str	r2, [r3, #0]
 8013b5c:	bf00      	nop
 8013b5e:	370c      	adds	r7, #12
 8013b60:	46bd      	mov	sp, r7
 8013b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b66:	4770      	bx	lr

08013b68 <vListInitialiseItem>:
 8013b68:	b480      	push	{r7}
 8013b6a:	b083      	sub	sp, #12
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	2200      	movs	r2, #0
 8013b74:	611a      	str	r2, [r3, #16]
 8013b76:	bf00      	nop
 8013b78:	370c      	adds	r7, #12
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b80:	4770      	bx	lr

08013b82 <vListInsertEnd>:
 8013b82:	b480      	push	{r7}
 8013b84:	b085      	sub	sp, #20
 8013b86:	af00      	add	r7, sp, #0
 8013b88:	6078      	str	r0, [r7, #4]
 8013b8a:	6039      	str	r1, [r7, #0]
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	685b      	ldr	r3, [r3, #4]
 8013b90:	60fb      	str	r3, [r7, #12]
 8013b92:	683b      	ldr	r3, [r7, #0]
 8013b94:	68fa      	ldr	r2, [r7, #12]
 8013b96:	605a      	str	r2, [r3, #4]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	689a      	ldr	r2, [r3, #8]
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	609a      	str	r2, [r3, #8]
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	689b      	ldr	r3, [r3, #8]
 8013ba4:	683a      	ldr	r2, [r7, #0]
 8013ba6:	605a      	str	r2, [r3, #4]
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	683a      	ldr	r2, [r7, #0]
 8013bac:	609a      	str	r2, [r3, #8]
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	687a      	ldr	r2, [r7, #4]
 8013bb2:	611a      	str	r2, [r3, #16]
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	1c5a      	adds	r2, r3, #1
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	601a      	str	r2, [r3, #0]
 8013bbe:	bf00      	nop
 8013bc0:	3714      	adds	r7, #20
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc8:	4770      	bx	lr

08013bca <vListInsert>:
 8013bca:	b480      	push	{r7}
 8013bcc:	b085      	sub	sp, #20
 8013bce:	af00      	add	r7, sp, #0
 8013bd0:	6078      	str	r0, [r7, #4]
 8013bd2:	6039      	str	r1, [r7, #0]
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	60bb      	str	r3, [r7, #8]
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013be0:	d103      	bne.n	8013bea <vListInsert+0x20>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	691b      	ldr	r3, [r3, #16]
 8013be6:	60fb      	str	r3, [r7, #12]
 8013be8:	e00c      	b.n	8013c04 <vListInsert+0x3a>
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	3308      	adds	r3, #8
 8013bee:	60fb      	str	r3, [r7, #12]
 8013bf0:	e002      	b.n	8013bf8 <vListInsert+0x2e>
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	60fb      	str	r3, [r7, #12]
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	685b      	ldr	r3, [r3, #4]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	68ba      	ldr	r2, [r7, #8]
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d2f6      	bcs.n	8013bf2 <vListInsert+0x28>
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	685a      	ldr	r2, [r3, #4]
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	605a      	str	r2, [r3, #4]
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	685b      	ldr	r3, [r3, #4]
 8013c10:	683a      	ldr	r2, [r7, #0]
 8013c12:	609a      	str	r2, [r3, #8]
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	68fa      	ldr	r2, [r7, #12]
 8013c18:	609a      	str	r2, [r3, #8]
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	683a      	ldr	r2, [r7, #0]
 8013c1e:	605a      	str	r2, [r3, #4]
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	611a      	str	r2, [r3, #16]
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	1c5a      	adds	r2, r3, #1
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	601a      	str	r2, [r3, #0]
 8013c30:	bf00      	nop
 8013c32:	3714      	adds	r7, #20
 8013c34:	46bd      	mov	sp, r7
 8013c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3a:	4770      	bx	lr

08013c3c <uxListRemove>:
 8013c3c:	b480      	push	{r7}
 8013c3e:	b085      	sub	sp, #20
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	691b      	ldr	r3, [r3, #16]
 8013c48:	60fb      	str	r3, [r7, #12]
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	685b      	ldr	r3, [r3, #4]
 8013c4e:	687a      	ldr	r2, [r7, #4]
 8013c50:	6892      	ldr	r2, [r2, #8]
 8013c52:	609a      	str	r2, [r3, #8]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	689b      	ldr	r3, [r3, #8]
 8013c58:	687a      	ldr	r2, [r7, #4]
 8013c5a:	6852      	ldr	r2, [r2, #4]
 8013c5c:	605a      	str	r2, [r3, #4]
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	687a      	ldr	r2, [r7, #4]
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d103      	bne.n	8013c70 <uxListRemove+0x34>
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	689a      	ldr	r2, [r3, #8]
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	605a      	str	r2, [r3, #4]
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2200      	movs	r2, #0
 8013c74:	611a      	str	r2, [r3, #16]
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	1e5a      	subs	r2, r3, #1
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	601a      	str	r2, [r3, #0]
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	4618      	mov	r0, r3
 8013c86:	3714      	adds	r7, #20
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8e:	4770      	bx	lr

08013c90 <xQueueGenericReset>:
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	6039      	str	r1, [r7, #0]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	60fb      	str	r3, [r7, #12]
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d10a      	bne.n	8013cba <xQueueGenericReset+0x2a>
 8013ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca8:	f383 8811 	msr	BASEPRI, r3
 8013cac:	f3bf 8f6f 	isb	sy
 8013cb0:	f3bf 8f4f 	dsb	sy
 8013cb4:	60bb      	str	r3, [r7, #8]
 8013cb6:	bf00      	nop
 8013cb8:	e7fe      	b.n	8013cb8 <xQueueGenericReset+0x28>
 8013cba:	f002 fb5b 	bl	8016374 <vPortEnterCritical>
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	681a      	ldr	r2, [r3, #0]
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cc6:	68f9      	ldr	r1, [r7, #12]
 8013cc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013cca:	fb01 f303 	mul.w	r3, r1, r3
 8013cce:	441a      	add	r2, r3
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	609a      	str	r2, [r3, #8]
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	681a      	ldr	r2, [r3, #0]
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	605a      	str	r2, [r3, #4]
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	681a      	ldr	r2, [r3, #0]
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cea:	3b01      	subs	r3, #1
 8013cec:	68f9      	ldr	r1, [r7, #12]
 8013cee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013cf0:	fb01 f303 	mul.w	r3, r1, r3
 8013cf4:	441a      	add	r2, r3
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	60da      	str	r2, [r3, #12]
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	22ff      	movs	r2, #255	; 0xff
 8013cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	22ff      	movs	r2, #255	; 0xff
 8013d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d114      	bne.n	8013d3a <xQueueGenericReset+0xaa>
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	691b      	ldr	r3, [r3, #16]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d01a      	beq.n	8013d4e <xQueueGenericReset+0xbe>
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	3310      	adds	r3, #16
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f001 fb79 	bl	8015414 <xTaskRemoveFromEventList>
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d012      	beq.n	8013d4e <xQueueGenericReset+0xbe>
 8013d28:	4b0c      	ldr	r3, [pc, #48]	; (8013d5c <xQueueGenericReset+0xcc>)
 8013d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d2e:	601a      	str	r2, [r3, #0]
 8013d30:	f3bf 8f4f 	dsb	sy
 8013d34:	f3bf 8f6f 	isb	sy
 8013d38:	e009      	b.n	8013d4e <xQueueGenericReset+0xbe>
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	3310      	adds	r3, #16
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f7ff fef2 	bl	8013b28 <vListInitialise>
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	3324      	adds	r3, #36	; 0x24
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7ff feed 	bl	8013b28 <vListInitialise>
 8013d4e:	f002 fb41 	bl	80163d4 <vPortExitCritical>
 8013d52:	2301      	movs	r3, #1
 8013d54:	4618      	mov	r0, r3
 8013d56:	3710      	adds	r7, #16
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	e000ed04 	.word	0xe000ed04

08013d60 <xQueueGenericCreateStatic>:
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b08e      	sub	sp, #56	; 0x38
 8013d64:	af02      	add	r7, sp, #8
 8013d66:	60f8      	str	r0, [r7, #12]
 8013d68:	60b9      	str	r1, [r7, #8]
 8013d6a:	607a      	str	r2, [r7, #4]
 8013d6c:	603b      	str	r3, [r7, #0]
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d10a      	bne.n	8013d8a <xQueueGenericCreateStatic+0x2a>
 8013d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d78:	f383 8811 	msr	BASEPRI, r3
 8013d7c:	f3bf 8f6f 	isb	sy
 8013d80:	f3bf 8f4f 	dsb	sy
 8013d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8013d86:	bf00      	nop
 8013d88:	e7fe      	b.n	8013d88 <xQueueGenericCreateStatic+0x28>
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d10a      	bne.n	8013da6 <xQueueGenericCreateStatic+0x46>
 8013d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d94:	f383 8811 	msr	BASEPRI, r3
 8013d98:	f3bf 8f6f 	isb	sy
 8013d9c:	f3bf 8f4f 	dsb	sy
 8013da0:	627b      	str	r3, [r7, #36]	; 0x24
 8013da2:	bf00      	nop
 8013da4:	e7fe      	b.n	8013da4 <xQueueGenericCreateStatic+0x44>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d002      	beq.n	8013db2 <xQueueGenericCreateStatic+0x52>
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d001      	beq.n	8013db6 <xQueueGenericCreateStatic+0x56>
 8013db2:	2301      	movs	r3, #1
 8013db4:	e000      	b.n	8013db8 <xQueueGenericCreateStatic+0x58>
 8013db6:	2300      	movs	r3, #0
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d10a      	bne.n	8013dd2 <xQueueGenericCreateStatic+0x72>
 8013dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc0:	f383 8811 	msr	BASEPRI, r3
 8013dc4:	f3bf 8f6f 	isb	sy
 8013dc8:	f3bf 8f4f 	dsb	sy
 8013dcc:	623b      	str	r3, [r7, #32]
 8013dce:	bf00      	nop
 8013dd0:	e7fe      	b.n	8013dd0 <xQueueGenericCreateStatic+0x70>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d102      	bne.n	8013dde <xQueueGenericCreateStatic+0x7e>
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d101      	bne.n	8013de2 <xQueueGenericCreateStatic+0x82>
 8013dde:	2301      	movs	r3, #1
 8013de0:	e000      	b.n	8013de4 <xQueueGenericCreateStatic+0x84>
 8013de2:	2300      	movs	r3, #0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d10a      	bne.n	8013dfe <xQueueGenericCreateStatic+0x9e>
 8013de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dec:	f383 8811 	msr	BASEPRI, r3
 8013df0:	f3bf 8f6f 	isb	sy
 8013df4:	f3bf 8f4f 	dsb	sy
 8013df8:	61fb      	str	r3, [r7, #28]
 8013dfa:	bf00      	nop
 8013dfc:	e7fe      	b.n	8013dfc <xQueueGenericCreateStatic+0x9c>
 8013dfe:	2350      	movs	r3, #80	; 0x50
 8013e00:	617b      	str	r3, [r7, #20]
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	2b50      	cmp	r3, #80	; 0x50
 8013e06:	d00a      	beq.n	8013e1e <xQueueGenericCreateStatic+0xbe>
 8013e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e0c:	f383 8811 	msr	BASEPRI, r3
 8013e10:	f3bf 8f6f 	isb	sy
 8013e14:	f3bf 8f4f 	dsb	sy
 8013e18:	61bb      	str	r3, [r7, #24]
 8013e1a:	bf00      	nop
 8013e1c:	e7fe      	b.n	8013e1c <xQueueGenericCreateStatic+0xbc>
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d00d      	beq.n	8013e46 <xQueueGenericCreateStatic+0xe6>
 8013e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2c:	2201      	movs	r2, #1
 8013e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013e32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e38:	9300      	str	r3, [sp, #0]
 8013e3a:	4613      	mov	r3, r2
 8013e3c:	687a      	ldr	r2, [r7, #4]
 8013e3e:	68b9      	ldr	r1, [r7, #8]
 8013e40:	68f8      	ldr	r0, [r7, #12]
 8013e42:	f000 f83f 	bl	8013ec4 <prvInitialiseNewQueue>
 8013e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e48:	4618      	mov	r0, r3
 8013e4a:	3730      	adds	r7, #48	; 0x30
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}

08013e50 <xQueueGenericCreate>:
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b08a      	sub	sp, #40	; 0x28
 8013e54:	af02      	add	r7, sp, #8
 8013e56:	60f8      	str	r0, [r7, #12]
 8013e58:	60b9      	str	r1, [r7, #8]
 8013e5a:	4613      	mov	r3, r2
 8013e5c:	71fb      	strb	r3, [r7, #7]
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d10a      	bne.n	8013e7a <xQueueGenericCreate+0x2a>
 8013e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e68:	f383 8811 	msr	BASEPRI, r3
 8013e6c:	f3bf 8f6f 	isb	sy
 8013e70:	f3bf 8f4f 	dsb	sy
 8013e74:	613b      	str	r3, [r7, #16]
 8013e76:	bf00      	nop
 8013e78:	e7fe      	b.n	8013e78 <xQueueGenericCreate+0x28>
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	68ba      	ldr	r2, [r7, #8]
 8013e7e:	fb02 f303 	mul.w	r3, r2, r3
 8013e82:	61fb      	str	r3, [r7, #28]
 8013e84:	69fb      	ldr	r3, [r7, #28]
 8013e86:	3350      	adds	r3, #80	; 0x50
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f002 fb95 	bl	80165b8 <pvPortMalloc>
 8013e8e:	61b8      	str	r0, [r7, #24]
 8013e90:	69bb      	ldr	r3, [r7, #24]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d011      	beq.n	8013eba <xQueueGenericCreate+0x6a>
 8013e96:	69bb      	ldr	r3, [r7, #24]
 8013e98:	617b      	str	r3, [r7, #20]
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	3350      	adds	r3, #80	; 0x50
 8013e9e:	617b      	str	r3, [r7, #20]
 8013ea0:	69bb      	ldr	r3, [r7, #24]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013ea8:	79fa      	ldrb	r2, [r7, #7]
 8013eaa:	69bb      	ldr	r3, [r7, #24]
 8013eac:	9300      	str	r3, [sp, #0]
 8013eae:	4613      	mov	r3, r2
 8013eb0:	697a      	ldr	r2, [r7, #20]
 8013eb2:	68b9      	ldr	r1, [r7, #8]
 8013eb4:	68f8      	ldr	r0, [r7, #12]
 8013eb6:	f000 f805 	bl	8013ec4 <prvInitialiseNewQueue>
 8013eba:	69bb      	ldr	r3, [r7, #24]
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3720      	adds	r7, #32
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}

08013ec4 <prvInitialiseNewQueue>:
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b084      	sub	sp, #16
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	60f8      	str	r0, [r7, #12]
 8013ecc:	60b9      	str	r1, [r7, #8]
 8013ece:	607a      	str	r2, [r7, #4]
 8013ed0:	70fb      	strb	r3, [r7, #3]
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d103      	bne.n	8013ee0 <prvInitialiseNewQueue+0x1c>
 8013ed8:	69bb      	ldr	r3, [r7, #24]
 8013eda:	69ba      	ldr	r2, [r7, #24]
 8013edc:	601a      	str	r2, [r3, #0]
 8013ede:	e002      	b.n	8013ee6 <prvInitialiseNewQueue+0x22>
 8013ee0:	69bb      	ldr	r3, [r7, #24]
 8013ee2:	687a      	ldr	r2, [r7, #4]
 8013ee4:	601a      	str	r2, [r3, #0]
 8013ee6:	69bb      	ldr	r3, [r7, #24]
 8013ee8:	68fa      	ldr	r2, [r7, #12]
 8013eea:	63da      	str	r2, [r3, #60]	; 0x3c
 8013eec:	69bb      	ldr	r3, [r7, #24]
 8013eee:	68ba      	ldr	r2, [r7, #8]
 8013ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8013ef2:	2101      	movs	r1, #1
 8013ef4:	69b8      	ldr	r0, [r7, #24]
 8013ef6:	f7ff fecb 	bl	8013c90 <xQueueGenericReset>
 8013efa:	69bb      	ldr	r3, [r7, #24]
 8013efc:	78fa      	ldrb	r2, [r7, #3]
 8013efe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8013f02:	bf00      	nop
 8013f04:	3710      	adds	r7, #16
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
	...

08013f0c <xQueueGenericSend>:
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b08e      	sub	sp, #56	; 0x38
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	60f8      	str	r0, [r7, #12]
 8013f14:	60b9      	str	r1, [r7, #8]
 8013f16:	607a      	str	r2, [r7, #4]
 8013f18:	603b      	str	r3, [r7, #0]
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	633b      	str	r3, [r7, #48]	; 0x30
 8013f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d10a      	bne.n	8013f3e <xQueueGenericSend+0x32>
 8013f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f2c:	f383 8811 	msr	BASEPRI, r3
 8013f30:	f3bf 8f6f 	isb	sy
 8013f34:	f3bf 8f4f 	dsb	sy
 8013f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f3a:	bf00      	nop
 8013f3c:	e7fe      	b.n	8013f3c <xQueueGenericSend+0x30>
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d103      	bne.n	8013f4c <xQueueGenericSend+0x40>
 8013f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d101      	bne.n	8013f50 <xQueueGenericSend+0x44>
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	e000      	b.n	8013f52 <xQueueGenericSend+0x46>
 8013f50:	2300      	movs	r3, #0
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d10a      	bne.n	8013f6c <xQueueGenericSend+0x60>
 8013f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f5a:	f383 8811 	msr	BASEPRI, r3
 8013f5e:	f3bf 8f6f 	isb	sy
 8013f62:	f3bf 8f4f 	dsb	sy
 8013f66:	627b      	str	r3, [r7, #36]	; 0x24
 8013f68:	bf00      	nop
 8013f6a:	e7fe      	b.n	8013f6a <xQueueGenericSend+0x5e>
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	2b02      	cmp	r3, #2
 8013f70:	d103      	bne.n	8013f7a <xQueueGenericSend+0x6e>
 8013f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	d101      	bne.n	8013f7e <xQueueGenericSend+0x72>
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	e000      	b.n	8013f80 <xQueueGenericSend+0x74>
 8013f7e:	2300      	movs	r3, #0
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d10a      	bne.n	8013f9a <xQueueGenericSend+0x8e>
 8013f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f88:	f383 8811 	msr	BASEPRI, r3
 8013f8c:	f3bf 8f6f 	isb	sy
 8013f90:	f3bf 8f4f 	dsb	sy
 8013f94:	623b      	str	r3, [r7, #32]
 8013f96:	bf00      	nop
 8013f98:	e7fe      	b.n	8013f98 <xQueueGenericSend+0x8c>
 8013f9a:	f001 fc5b 	bl	8015854 <xTaskGetSchedulerState>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d102      	bne.n	8013faa <xQueueGenericSend+0x9e>
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d101      	bne.n	8013fae <xQueueGenericSend+0xa2>
 8013faa:	2301      	movs	r3, #1
 8013fac:	e000      	b.n	8013fb0 <xQueueGenericSend+0xa4>
 8013fae:	2300      	movs	r3, #0
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d10a      	bne.n	8013fca <xQueueGenericSend+0xbe>
 8013fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb8:	f383 8811 	msr	BASEPRI, r3
 8013fbc:	f3bf 8f6f 	isb	sy
 8013fc0:	f3bf 8f4f 	dsb	sy
 8013fc4:	61fb      	str	r3, [r7, #28]
 8013fc6:	bf00      	nop
 8013fc8:	e7fe      	b.n	8013fc8 <xQueueGenericSend+0xbc>
 8013fca:	f002 f9d3 	bl	8016374 <vPortEnterCritical>
 8013fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	d302      	bcc.n	8013fe0 <xQueueGenericSend+0xd4>
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	2b02      	cmp	r3, #2
 8013fde:	d129      	bne.n	8014034 <xQueueGenericSend+0x128>
 8013fe0:	683a      	ldr	r2, [r7, #0]
 8013fe2:	68b9      	ldr	r1, [r7, #8]
 8013fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fe6:	f000 fa8b 	bl	8014500 <prvCopyDataToQueue>
 8013fea:	62f8      	str	r0, [r7, #44]	; 0x2c
 8013fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d010      	beq.n	8014016 <xQueueGenericSend+0x10a>
 8013ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff6:	3324      	adds	r3, #36	; 0x24
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f001 fa0b 	bl	8015414 <xTaskRemoveFromEventList>
 8013ffe:	4603      	mov	r3, r0
 8014000:	2b00      	cmp	r3, #0
 8014002:	d013      	beq.n	801402c <xQueueGenericSend+0x120>
 8014004:	4b3f      	ldr	r3, [pc, #252]	; (8014104 <xQueueGenericSend+0x1f8>)
 8014006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801400a:	601a      	str	r2, [r3, #0]
 801400c:	f3bf 8f4f 	dsb	sy
 8014010:	f3bf 8f6f 	isb	sy
 8014014:	e00a      	b.n	801402c <xQueueGenericSend+0x120>
 8014016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014018:	2b00      	cmp	r3, #0
 801401a:	d007      	beq.n	801402c <xQueueGenericSend+0x120>
 801401c:	4b39      	ldr	r3, [pc, #228]	; (8014104 <xQueueGenericSend+0x1f8>)
 801401e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014022:	601a      	str	r2, [r3, #0]
 8014024:	f3bf 8f4f 	dsb	sy
 8014028:	f3bf 8f6f 	isb	sy
 801402c:	f002 f9d2 	bl	80163d4 <vPortExitCritical>
 8014030:	2301      	movs	r3, #1
 8014032:	e063      	b.n	80140fc <xQueueGenericSend+0x1f0>
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d103      	bne.n	8014042 <xQueueGenericSend+0x136>
 801403a:	f002 f9cb 	bl	80163d4 <vPortExitCritical>
 801403e:	2300      	movs	r3, #0
 8014040:	e05c      	b.n	80140fc <xQueueGenericSend+0x1f0>
 8014042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014044:	2b00      	cmp	r3, #0
 8014046:	d106      	bne.n	8014056 <xQueueGenericSend+0x14a>
 8014048:	f107 0314 	add.w	r3, r7, #20
 801404c:	4618      	mov	r0, r3
 801404e:	f001 faa7 	bl	80155a0 <vTaskInternalSetTimeOutState>
 8014052:	2301      	movs	r3, #1
 8014054:	637b      	str	r3, [r7, #52]	; 0x34
 8014056:	f002 f9bd 	bl	80163d4 <vPortExitCritical>
 801405a:	f000 ff73 	bl	8014f44 <vTaskSuspendAll>
 801405e:	f002 f989 	bl	8016374 <vPortEnterCritical>
 8014062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014068:	b25b      	sxtb	r3, r3
 801406a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801406e:	d103      	bne.n	8014078 <xQueueGenericSend+0x16c>
 8014070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014072:	2200      	movs	r2, #0
 8014074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801407a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801407e:	b25b      	sxtb	r3, r3
 8014080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014084:	d103      	bne.n	801408e <xQueueGenericSend+0x182>
 8014086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014088:	2200      	movs	r2, #0
 801408a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801408e:	f002 f9a1 	bl	80163d4 <vPortExitCritical>
 8014092:	1d3a      	adds	r2, r7, #4
 8014094:	f107 0314 	add.w	r3, r7, #20
 8014098:	4611      	mov	r1, r2
 801409a:	4618      	mov	r0, r3
 801409c:	f001 fa96 	bl	80155cc <xTaskCheckForTimeOut>
 80140a0:	4603      	mov	r3, r0
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d124      	bne.n	80140f0 <xQueueGenericSend+0x1e4>
 80140a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140a8:	f000 fb22 	bl	80146f0 <prvIsQueueFull>
 80140ac:	4603      	mov	r3, r0
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d018      	beq.n	80140e4 <xQueueGenericSend+0x1d8>
 80140b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b4:	3310      	adds	r3, #16
 80140b6:	687a      	ldr	r2, [r7, #4]
 80140b8:	4611      	mov	r1, r2
 80140ba:	4618      	mov	r0, r3
 80140bc:	f001 f91e 	bl	80152fc <vTaskPlaceOnEventList>
 80140c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140c2:	f000 faad 	bl	8014620 <prvUnlockQueue>
 80140c6:	f000 ff4b 	bl	8014f60 <xTaskResumeAll>
 80140ca:	4603      	mov	r3, r0
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	f47f af7c 	bne.w	8013fca <xQueueGenericSend+0xbe>
 80140d2:	4b0c      	ldr	r3, [pc, #48]	; (8014104 <xQueueGenericSend+0x1f8>)
 80140d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140d8:	601a      	str	r2, [r3, #0]
 80140da:	f3bf 8f4f 	dsb	sy
 80140de:	f3bf 8f6f 	isb	sy
 80140e2:	e772      	b.n	8013fca <xQueueGenericSend+0xbe>
 80140e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140e6:	f000 fa9b 	bl	8014620 <prvUnlockQueue>
 80140ea:	f000 ff39 	bl	8014f60 <xTaskResumeAll>
 80140ee:	e76c      	b.n	8013fca <xQueueGenericSend+0xbe>
 80140f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140f2:	f000 fa95 	bl	8014620 <prvUnlockQueue>
 80140f6:	f000 ff33 	bl	8014f60 <xTaskResumeAll>
 80140fa:	2300      	movs	r3, #0
 80140fc:	4618      	mov	r0, r3
 80140fe:	3738      	adds	r7, #56	; 0x38
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}
 8014104:	e000ed04 	.word	0xe000ed04

08014108 <xQueueGenericSendFromISR>:
 8014108:	b580      	push	{r7, lr}
 801410a:	b090      	sub	sp, #64	; 0x40
 801410c:	af00      	add	r7, sp, #0
 801410e:	60f8      	str	r0, [r7, #12]
 8014110:	60b9      	str	r1, [r7, #8]
 8014112:	607a      	str	r2, [r7, #4]
 8014114:	603b      	str	r3, [r7, #0]
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	63bb      	str	r3, [r7, #56]	; 0x38
 801411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801411c:	2b00      	cmp	r3, #0
 801411e:	d10a      	bne.n	8014136 <xQueueGenericSendFromISR+0x2e>
 8014120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014124:	f383 8811 	msr	BASEPRI, r3
 8014128:	f3bf 8f6f 	isb	sy
 801412c:	f3bf 8f4f 	dsb	sy
 8014130:	62bb      	str	r3, [r7, #40]	; 0x28
 8014132:	bf00      	nop
 8014134:	e7fe      	b.n	8014134 <xQueueGenericSendFromISR+0x2c>
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d103      	bne.n	8014144 <xQueueGenericSendFromISR+0x3c>
 801413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014140:	2b00      	cmp	r3, #0
 8014142:	d101      	bne.n	8014148 <xQueueGenericSendFromISR+0x40>
 8014144:	2301      	movs	r3, #1
 8014146:	e000      	b.n	801414a <xQueueGenericSendFromISR+0x42>
 8014148:	2300      	movs	r3, #0
 801414a:	2b00      	cmp	r3, #0
 801414c:	d10a      	bne.n	8014164 <xQueueGenericSendFromISR+0x5c>
 801414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014152:	f383 8811 	msr	BASEPRI, r3
 8014156:	f3bf 8f6f 	isb	sy
 801415a:	f3bf 8f4f 	dsb	sy
 801415e:	627b      	str	r3, [r7, #36]	; 0x24
 8014160:	bf00      	nop
 8014162:	e7fe      	b.n	8014162 <xQueueGenericSendFromISR+0x5a>
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	2b02      	cmp	r3, #2
 8014168:	d103      	bne.n	8014172 <xQueueGenericSendFromISR+0x6a>
 801416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801416e:	2b01      	cmp	r3, #1
 8014170:	d101      	bne.n	8014176 <xQueueGenericSendFromISR+0x6e>
 8014172:	2301      	movs	r3, #1
 8014174:	e000      	b.n	8014178 <xQueueGenericSendFromISR+0x70>
 8014176:	2300      	movs	r3, #0
 8014178:	2b00      	cmp	r3, #0
 801417a:	d10a      	bne.n	8014192 <xQueueGenericSendFromISR+0x8a>
 801417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014180:	f383 8811 	msr	BASEPRI, r3
 8014184:	f3bf 8f6f 	isb	sy
 8014188:	f3bf 8f4f 	dsb	sy
 801418c:	623b      	str	r3, [r7, #32]
 801418e:	bf00      	nop
 8014190:	e7fe      	b.n	8014190 <xQueueGenericSendFromISR+0x88>
 8014192:	f002 f9d1 	bl	8016538 <vPortValidateInterruptPriority>
 8014196:	f3ef 8211 	mrs	r2, BASEPRI
 801419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801419e:	f383 8811 	msr	BASEPRI, r3
 80141a2:	f3bf 8f6f 	isb	sy
 80141a6:	f3bf 8f4f 	dsb	sy
 80141aa:	61fa      	str	r2, [r7, #28]
 80141ac:	61bb      	str	r3, [r7, #24]
 80141ae:	69fb      	ldr	r3, [r7, #28]
 80141b0:	637b      	str	r3, [r7, #52]	; 0x34
 80141b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80141b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d302      	bcc.n	80141c4 <xQueueGenericSendFromISR+0xbc>
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	2b02      	cmp	r3, #2
 80141c2:	d12f      	bne.n	8014224 <xQueueGenericSendFromISR+0x11c>
 80141c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80141ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80141ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80141d4:	683a      	ldr	r2, [r7, #0]
 80141d6:	68b9      	ldr	r1, [r7, #8]
 80141d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80141da:	f000 f991 	bl	8014500 <prvCopyDataToQueue>
 80141de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80141e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141e6:	d112      	bne.n	801420e <xQueueGenericSendFromISR+0x106>
 80141e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d016      	beq.n	801421e <xQueueGenericSendFromISR+0x116>
 80141f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f2:	3324      	adds	r3, #36	; 0x24
 80141f4:	4618      	mov	r0, r3
 80141f6:	f001 f90d 	bl	8015414 <xTaskRemoveFromEventList>
 80141fa:	4603      	mov	r3, r0
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d00e      	beq.n	801421e <xQueueGenericSendFromISR+0x116>
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d00b      	beq.n	801421e <xQueueGenericSendFromISR+0x116>
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	2201      	movs	r2, #1
 801420a:	601a      	str	r2, [r3, #0]
 801420c:	e007      	b.n	801421e <xQueueGenericSendFromISR+0x116>
 801420e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014212:	3301      	adds	r3, #1
 8014214:	b2db      	uxtb	r3, r3
 8014216:	b25a      	sxtb	r2, r3
 8014218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801421a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801421e:	2301      	movs	r3, #1
 8014220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014222:	e001      	b.n	8014228 <xQueueGenericSendFromISR+0x120>
 8014224:	2300      	movs	r3, #0
 8014226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801422a:	617b      	str	r3, [r7, #20]
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	f383 8811 	msr	BASEPRI, r3
 8014232:	bf00      	nop
 8014234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014236:	4618      	mov	r0, r3
 8014238:	3740      	adds	r7, #64	; 0x40
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
	...

08014240 <xQueueReceive>:
 8014240:	b580      	push	{r7, lr}
 8014242:	b08c      	sub	sp, #48	; 0x30
 8014244:	af00      	add	r7, sp, #0
 8014246:	60f8      	str	r0, [r7, #12]
 8014248:	60b9      	str	r1, [r7, #8]
 801424a:	607a      	str	r2, [r7, #4]
 801424c:	2300      	movs	r3, #0
 801424e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	62bb      	str	r3, [r7, #40]	; 0x28
 8014254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014256:	2b00      	cmp	r3, #0
 8014258:	d10a      	bne.n	8014270 <xQueueReceive+0x30>
 801425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801425e:	f383 8811 	msr	BASEPRI, r3
 8014262:	f3bf 8f6f 	isb	sy
 8014266:	f3bf 8f4f 	dsb	sy
 801426a:	623b      	str	r3, [r7, #32]
 801426c:	bf00      	nop
 801426e:	e7fe      	b.n	801426e <xQueueReceive+0x2e>
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d103      	bne.n	801427e <xQueueReceive+0x3e>
 8014276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801427a:	2b00      	cmp	r3, #0
 801427c:	d101      	bne.n	8014282 <xQueueReceive+0x42>
 801427e:	2301      	movs	r3, #1
 8014280:	e000      	b.n	8014284 <xQueueReceive+0x44>
 8014282:	2300      	movs	r3, #0
 8014284:	2b00      	cmp	r3, #0
 8014286:	d10a      	bne.n	801429e <xQueueReceive+0x5e>
 8014288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801428c:	f383 8811 	msr	BASEPRI, r3
 8014290:	f3bf 8f6f 	isb	sy
 8014294:	f3bf 8f4f 	dsb	sy
 8014298:	61fb      	str	r3, [r7, #28]
 801429a:	bf00      	nop
 801429c:	e7fe      	b.n	801429c <xQueueReceive+0x5c>
 801429e:	f001 fad9 	bl	8015854 <xTaskGetSchedulerState>
 80142a2:	4603      	mov	r3, r0
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d102      	bne.n	80142ae <xQueueReceive+0x6e>
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d101      	bne.n	80142b2 <xQueueReceive+0x72>
 80142ae:	2301      	movs	r3, #1
 80142b0:	e000      	b.n	80142b4 <xQueueReceive+0x74>
 80142b2:	2300      	movs	r3, #0
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d10a      	bne.n	80142ce <xQueueReceive+0x8e>
 80142b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142bc:	f383 8811 	msr	BASEPRI, r3
 80142c0:	f3bf 8f6f 	isb	sy
 80142c4:	f3bf 8f4f 	dsb	sy
 80142c8:	61bb      	str	r3, [r7, #24]
 80142ca:	bf00      	nop
 80142cc:	e7fe      	b.n	80142cc <xQueueReceive+0x8c>
 80142ce:	f002 f851 	bl	8016374 <vPortEnterCritical>
 80142d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142d6:	627b      	str	r3, [r7, #36]	; 0x24
 80142d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d01f      	beq.n	801431e <xQueueReceive+0xde>
 80142de:	68b9      	ldr	r1, [r7, #8]
 80142e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142e2:	f000 f977 	bl	80145d4 <prvCopyDataFromQueue>
 80142e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e8:	1e5a      	subs	r2, r3, #1
 80142ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ec:	639a      	str	r2, [r3, #56]	; 0x38
 80142ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f0:	691b      	ldr	r3, [r3, #16]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d00f      	beq.n	8014316 <xQueueReceive+0xd6>
 80142f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f8:	3310      	adds	r3, #16
 80142fa:	4618      	mov	r0, r3
 80142fc:	f001 f88a 	bl	8015414 <xTaskRemoveFromEventList>
 8014300:	4603      	mov	r3, r0
 8014302:	2b00      	cmp	r3, #0
 8014304:	d007      	beq.n	8014316 <xQueueReceive+0xd6>
 8014306:	4b3d      	ldr	r3, [pc, #244]	; (80143fc <xQueueReceive+0x1bc>)
 8014308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801430c:	601a      	str	r2, [r3, #0]
 801430e:	f3bf 8f4f 	dsb	sy
 8014312:	f3bf 8f6f 	isb	sy
 8014316:	f002 f85d 	bl	80163d4 <vPortExitCritical>
 801431a:	2301      	movs	r3, #1
 801431c:	e069      	b.n	80143f2 <xQueueReceive+0x1b2>
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d103      	bne.n	801432c <xQueueReceive+0xec>
 8014324:	f002 f856 	bl	80163d4 <vPortExitCritical>
 8014328:	2300      	movs	r3, #0
 801432a:	e062      	b.n	80143f2 <xQueueReceive+0x1b2>
 801432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801432e:	2b00      	cmp	r3, #0
 8014330:	d106      	bne.n	8014340 <xQueueReceive+0x100>
 8014332:	f107 0310 	add.w	r3, r7, #16
 8014336:	4618      	mov	r0, r3
 8014338:	f001 f932 	bl	80155a0 <vTaskInternalSetTimeOutState>
 801433c:	2301      	movs	r3, #1
 801433e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014340:	f002 f848 	bl	80163d4 <vPortExitCritical>
 8014344:	f000 fdfe 	bl	8014f44 <vTaskSuspendAll>
 8014348:	f002 f814 	bl	8016374 <vPortEnterCritical>
 801434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801434e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014352:	b25b      	sxtb	r3, r3
 8014354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014358:	d103      	bne.n	8014362 <xQueueReceive+0x122>
 801435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801435c:	2200      	movs	r2, #0
 801435e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014368:	b25b      	sxtb	r3, r3
 801436a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801436e:	d103      	bne.n	8014378 <xQueueReceive+0x138>
 8014370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014372:	2200      	movs	r2, #0
 8014374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014378:	f002 f82c 	bl	80163d4 <vPortExitCritical>
 801437c:	1d3a      	adds	r2, r7, #4
 801437e:	f107 0310 	add.w	r3, r7, #16
 8014382:	4611      	mov	r1, r2
 8014384:	4618      	mov	r0, r3
 8014386:	f001 f921 	bl	80155cc <xTaskCheckForTimeOut>
 801438a:	4603      	mov	r3, r0
 801438c:	2b00      	cmp	r3, #0
 801438e:	d123      	bne.n	80143d8 <xQueueReceive+0x198>
 8014390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014392:	f000 f997 	bl	80146c4 <prvIsQueueEmpty>
 8014396:	4603      	mov	r3, r0
 8014398:	2b00      	cmp	r3, #0
 801439a:	d017      	beq.n	80143cc <xQueueReceive+0x18c>
 801439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801439e:	3324      	adds	r3, #36	; 0x24
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	4611      	mov	r1, r2
 80143a4:	4618      	mov	r0, r3
 80143a6:	f000 ffa9 	bl	80152fc <vTaskPlaceOnEventList>
 80143aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143ac:	f000 f938 	bl	8014620 <prvUnlockQueue>
 80143b0:	f000 fdd6 	bl	8014f60 <xTaskResumeAll>
 80143b4:	4603      	mov	r3, r0
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d189      	bne.n	80142ce <xQueueReceive+0x8e>
 80143ba:	4b10      	ldr	r3, [pc, #64]	; (80143fc <xQueueReceive+0x1bc>)
 80143bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143c0:	601a      	str	r2, [r3, #0]
 80143c2:	f3bf 8f4f 	dsb	sy
 80143c6:	f3bf 8f6f 	isb	sy
 80143ca:	e780      	b.n	80142ce <xQueueReceive+0x8e>
 80143cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143ce:	f000 f927 	bl	8014620 <prvUnlockQueue>
 80143d2:	f000 fdc5 	bl	8014f60 <xTaskResumeAll>
 80143d6:	e77a      	b.n	80142ce <xQueueReceive+0x8e>
 80143d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143da:	f000 f921 	bl	8014620 <prvUnlockQueue>
 80143de:	f000 fdbf 	bl	8014f60 <xTaskResumeAll>
 80143e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143e4:	f000 f96e 	bl	80146c4 <prvIsQueueEmpty>
 80143e8:	4603      	mov	r3, r0
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	f43f af6f 	beq.w	80142ce <xQueueReceive+0x8e>
 80143f0:	2300      	movs	r3, #0
 80143f2:	4618      	mov	r0, r3
 80143f4:	3730      	adds	r7, #48	; 0x30
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
 80143fa:	bf00      	nop
 80143fc:	e000ed04 	.word	0xe000ed04

08014400 <xQueueReceiveFromISR>:
 8014400:	b580      	push	{r7, lr}
 8014402:	b08e      	sub	sp, #56	; 0x38
 8014404:	af00      	add	r7, sp, #0
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	607a      	str	r2, [r7, #4]
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	633b      	str	r3, [r7, #48]	; 0x30
 8014410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014412:	2b00      	cmp	r3, #0
 8014414:	d10a      	bne.n	801442c <xQueueReceiveFromISR+0x2c>
 8014416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801441a:	f383 8811 	msr	BASEPRI, r3
 801441e:	f3bf 8f6f 	isb	sy
 8014422:	f3bf 8f4f 	dsb	sy
 8014426:	623b      	str	r3, [r7, #32]
 8014428:	bf00      	nop
 801442a:	e7fe      	b.n	801442a <xQueueReceiveFromISR+0x2a>
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d103      	bne.n	801443a <xQueueReceiveFromISR+0x3a>
 8014432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014436:	2b00      	cmp	r3, #0
 8014438:	d101      	bne.n	801443e <xQueueReceiveFromISR+0x3e>
 801443a:	2301      	movs	r3, #1
 801443c:	e000      	b.n	8014440 <xQueueReceiveFromISR+0x40>
 801443e:	2300      	movs	r3, #0
 8014440:	2b00      	cmp	r3, #0
 8014442:	d10a      	bne.n	801445a <xQueueReceiveFromISR+0x5a>
 8014444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014448:	f383 8811 	msr	BASEPRI, r3
 801444c:	f3bf 8f6f 	isb	sy
 8014450:	f3bf 8f4f 	dsb	sy
 8014454:	61fb      	str	r3, [r7, #28]
 8014456:	bf00      	nop
 8014458:	e7fe      	b.n	8014458 <xQueueReceiveFromISR+0x58>
 801445a:	f002 f86d 	bl	8016538 <vPortValidateInterruptPriority>
 801445e:	f3ef 8211 	mrs	r2, BASEPRI
 8014462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014466:	f383 8811 	msr	BASEPRI, r3
 801446a:	f3bf 8f6f 	isb	sy
 801446e:	f3bf 8f4f 	dsb	sy
 8014472:	61ba      	str	r2, [r7, #24]
 8014474:	617b      	str	r3, [r7, #20]
 8014476:	69bb      	ldr	r3, [r7, #24]
 8014478:	62fb      	str	r3, [r7, #44]	; 0x2c
 801447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801447e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014482:	2b00      	cmp	r3, #0
 8014484:	d02f      	beq.n	80144e6 <xQueueReceiveFromISR+0xe6>
 8014486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801448c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014490:	68b9      	ldr	r1, [r7, #8]
 8014492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014494:	f000 f89e 	bl	80145d4 <prvCopyDataFromQueue>
 8014498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801449a:	1e5a      	subs	r2, r3, #1
 801449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801449e:	639a      	str	r2, [r3, #56]	; 0x38
 80144a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80144a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144a8:	d112      	bne.n	80144d0 <xQueueReceiveFromISR+0xd0>
 80144aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ac:	691b      	ldr	r3, [r3, #16]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d016      	beq.n	80144e0 <xQueueReceiveFromISR+0xe0>
 80144b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b4:	3310      	adds	r3, #16
 80144b6:	4618      	mov	r0, r3
 80144b8:	f000 ffac 	bl	8015414 <xTaskRemoveFromEventList>
 80144bc:	4603      	mov	r3, r0
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d00e      	beq.n	80144e0 <xQueueReceiveFromISR+0xe0>
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d00b      	beq.n	80144e0 <xQueueReceiveFromISR+0xe0>
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2201      	movs	r2, #1
 80144cc:	601a      	str	r2, [r3, #0]
 80144ce:	e007      	b.n	80144e0 <xQueueReceiveFromISR+0xe0>
 80144d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144d4:	3301      	adds	r3, #1
 80144d6:	b2db      	uxtb	r3, r3
 80144d8:	b25a      	sxtb	r2, r3
 80144da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80144e0:	2301      	movs	r3, #1
 80144e2:	637b      	str	r3, [r7, #52]	; 0x34
 80144e4:	e001      	b.n	80144ea <xQueueReceiveFromISR+0xea>
 80144e6:	2300      	movs	r3, #0
 80144e8:	637b      	str	r3, [r7, #52]	; 0x34
 80144ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ec:	613b      	str	r3, [r7, #16]
 80144ee:	693b      	ldr	r3, [r7, #16]
 80144f0:	f383 8811 	msr	BASEPRI, r3
 80144f4:	bf00      	nop
 80144f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144f8:	4618      	mov	r0, r3
 80144fa:	3738      	adds	r7, #56	; 0x38
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <prvCopyDataToQueue>:
 8014500:	b580      	push	{r7, lr}
 8014502:	b086      	sub	sp, #24
 8014504:	af00      	add	r7, sp, #0
 8014506:	60f8      	str	r0, [r7, #12]
 8014508:	60b9      	str	r1, [r7, #8]
 801450a:	607a      	str	r2, [r7, #4]
 801450c:	2300      	movs	r3, #0
 801450e:	617b      	str	r3, [r7, #20]
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014514:	613b      	str	r3, [r7, #16]
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801451a:	2b00      	cmp	r3, #0
 801451c:	d10d      	bne.n	801453a <prvCopyDataToQueue+0x3a>
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d14d      	bne.n	80145c2 <prvCopyDataToQueue+0xc2>
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	689b      	ldr	r3, [r3, #8]
 801452a:	4618      	mov	r0, r3
 801452c:	f001 f9b0 	bl	8015890 <xTaskPriorityDisinherit>
 8014530:	6178      	str	r0, [r7, #20]
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	2200      	movs	r2, #0
 8014536:	609a      	str	r2, [r3, #8]
 8014538:	e043      	b.n	80145c2 <prvCopyDataToQueue+0xc2>
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d119      	bne.n	8014574 <prvCopyDataToQueue+0x74>
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	6858      	ldr	r0, [r3, #4]
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014548:	461a      	mov	r2, r3
 801454a:	68b9      	ldr	r1, [r7, #8]
 801454c:	f002 fa58 	bl	8016a00 <memcpy>
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	685a      	ldr	r2, [r3, #4]
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014558:	441a      	add	r2, r3
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	605a      	str	r2, [r3, #4]
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	685a      	ldr	r2, [r3, #4]
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	689b      	ldr	r3, [r3, #8]
 8014566:	429a      	cmp	r2, r3
 8014568:	d32b      	bcc.n	80145c2 <prvCopyDataToQueue+0xc2>
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	681a      	ldr	r2, [r3, #0]
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	605a      	str	r2, [r3, #4]
 8014572:	e026      	b.n	80145c2 <prvCopyDataToQueue+0xc2>
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	68d8      	ldr	r0, [r3, #12]
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801457c:	461a      	mov	r2, r3
 801457e:	68b9      	ldr	r1, [r7, #8]
 8014580:	f002 fa3e 	bl	8016a00 <memcpy>
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	68da      	ldr	r2, [r3, #12]
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801458c:	425b      	negs	r3, r3
 801458e:	441a      	add	r2, r3
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	60da      	str	r2, [r3, #12]
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	68da      	ldr	r2, [r3, #12]
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	429a      	cmp	r2, r3
 801459e:	d207      	bcs.n	80145b0 <prvCopyDataToQueue+0xb0>
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	689a      	ldr	r2, [r3, #8]
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145a8:	425b      	negs	r3, r3
 80145aa:	441a      	add	r2, r3
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	60da      	str	r2, [r3, #12]
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	2b02      	cmp	r3, #2
 80145b4:	d105      	bne.n	80145c2 <prvCopyDataToQueue+0xc2>
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d002      	beq.n	80145c2 <prvCopyDataToQueue+0xc2>
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	3b01      	subs	r3, #1
 80145c0:	613b      	str	r3, [r7, #16]
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	1c5a      	adds	r2, r3, #1
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	639a      	str	r2, [r3, #56]	; 0x38
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	4618      	mov	r0, r3
 80145ce:	3718      	adds	r7, #24
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <prvCopyDataFromQueue>:
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b082      	sub	sp, #8
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	6039      	str	r1, [r7, #0]
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d018      	beq.n	8014618 <prvCopyDataFromQueue+0x44>
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	68da      	ldr	r2, [r3, #12]
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145ee:	441a      	add	r2, r3
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	60da      	str	r2, [r3, #12]
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	68da      	ldr	r2, [r3, #12]
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	689b      	ldr	r3, [r3, #8]
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d303      	bcc.n	8014608 <prvCopyDataFromQueue+0x34>
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681a      	ldr	r2, [r3, #0]
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	60da      	str	r2, [r3, #12]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	68d9      	ldr	r1, [r3, #12]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014610:	461a      	mov	r2, r3
 8014612:	6838      	ldr	r0, [r7, #0]
 8014614:	f002 f9f4 	bl	8016a00 <memcpy>
 8014618:	bf00      	nop
 801461a:	3708      	adds	r7, #8
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}

08014620 <prvUnlockQueue>:
 8014620:	b580      	push	{r7, lr}
 8014622:	b084      	sub	sp, #16
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
 8014628:	f001 fea4 	bl	8016374 <vPortEnterCritical>
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014632:	73fb      	strb	r3, [r7, #15]
 8014634:	e011      	b.n	801465a <prvUnlockQueue+0x3a>
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801463a:	2b00      	cmp	r3, #0
 801463c:	d012      	beq.n	8014664 <prvUnlockQueue+0x44>
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	3324      	adds	r3, #36	; 0x24
 8014642:	4618      	mov	r0, r3
 8014644:	f000 fee6 	bl	8015414 <xTaskRemoveFromEventList>
 8014648:	4603      	mov	r3, r0
 801464a:	2b00      	cmp	r3, #0
 801464c:	d001      	beq.n	8014652 <prvUnlockQueue+0x32>
 801464e:	f001 f81f 	bl	8015690 <vTaskMissedYield>
 8014652:	7bfb      	ldrb	r3, [r7, #15]
 8014654:	3b01      	subs	r3, #1
 8014656:	b2db      	uxtb	r3, r3
 8014658:	73fb      	strb	r3, [r7, #15]
 801465a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801465e:	2b00      	cmp	r3, #0
 8014660:	dce9      	bgt.n	8014636 <prvUnlockQueue+0x16>
 8014662:	e000      	b.n	8014666 <prvUnlockQueue+0x46>
 8014664:	bf00      	nop
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	22ff      	movs	r2, #255	; 0xff
 801466a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801466e:	f001 feb1 	bl	80163d4 <vPortExitCritical>
 8014672:	f001 fe7f 	bl	8016374 <vPortEnterCritical>
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801467c:	73bb      	strb	r3, [r7, #14]
 801467e:	e011      	b.n	80146a4 <prvUnlockQueue+0x84>
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	691b      	ldr	r3, [r3, #16]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d012      	beq.n	80146ae <prvUnlockQueue+0x8e>
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	3310      	adds	r3, #16
 801468c:	4618      	mov	r0, r3
 801468e:	f000 fec1 	bl	8015414 <xTaskRemoveFromEventList>
 8014692:	4603      	mov	r3, r0
 8014694:	2b00      	cmp	r3, #0
 8014696:	d001      	beq.n	801469c <prvUnlockQueue+0x7c>
 8014698:	f000 fffa 	bl	8015690 <vTaskMissedYield>
 801469c:	7bbb      	ldrb	r3, [r7, #14]
 801469e:	3b01      	subs	r3, #1
 80146a0:	b2db      	uxtb	r3, r3
 80146a2:	73bb      	strb	r3, [r7, #14]
 80146a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	dce9      	bgt.n	8014680 <prvUnlockQueue+0x60>
 80146ac:	e000      	b.n	80146b0 <prvUnlockQueue+0x90>
 80146ae:	bf00      	nop
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	22ff      	movs	r2, #255	; 0xff
 80146b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80146b8:	f001 fe8c 	bl	80163d4 <vPortExitCritical>
 80146bc:	bf00      	nop
 80146be:	3710      	adds	r7, #16
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}

080146c4 <prvIsQueueEmpty>:
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b084      	sub	sp, #16
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	f001 fe52 	bl	8016374 <vPortEnterCritical>
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d102      	bne.n	80146de <prvIsQueueEmpty+0x1a>
 80146d8:	2301      	movs	r3, #1
 80146da:	60fb      	str	r3, [r7, #12]
 80146dc:	e001      	b.n	80146e2 <prvIsQueueEmpty+0x1e>
 80146de:	2300      	movs	r3, #0
 80146e0:	60fb      	str	r3, [r7, #12]
 80146e2:	f001 fe77 	bl	80163d4 <vPortExitCritical>
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	4618      	mov	r0, r3
 80146ea:	3710      	adds	r7, #16
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <prvIsQueueFull>:
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b084      	sub	sp, #16
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	f001 fe3c 	bl	8016374 <vPortEnterCritical>
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014704:	429a      	cmp	r2, r3
 8014706:	d102      	bne.n	801470e <prvIsQueueFull+0x1e>
 8014708:	2301      	movs	r3, #1
 801470a:	60fb      	str	r3, [r7, #12]
 801470c:	e001      	b.n	8014712 <prvIsQueueFull+0x22>
 801470e:	2300      	movs	r3, #0
 8014710:	60fb      	str	r3, [r7, #12]
 8014712:	f001 fe5f 	bl	80163d4 <vPortExitCritical>
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	4618      	mov	r0, r3
 801471a:	3710      	adds	r7, #16
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <vQueueAddToRegistry>:
 8014720:	b480      	push	{r7}
 8014722:	b085      	sub	sp, #20
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	6039      	str	r1, [r7, #0]
 801472a:	2300      	movs	r3, #0
 801472c:	60fb      	str	r3, [r7, #12]
 801472e:	e014      	b.n	801475a <vQueueAddToRegistry+0x3a>
 8014730:	4a0f      	ldr	r2, [pc, #60]	; (8014770 <vQueueAddToRegistry+0x50>)
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d10b      	bne.n	8014754 <vQueueAddToRegistry+0x34>
 801473c:	490c      	ldr	r1, [pc, #48]	; (8014770 <vQueueAddToRegistry+0x50>)
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	683a      	ldr	r2, [r7, #0]
 8014742:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8014746:	4a0a      	ldr	r2, [pc, #40]	; (8014770 <vQueueAddToRegistry+0x50>)
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	00db      	lsls	r3, r3, #3
 801474c:	4413      	add	r3, r2
 801474e:	687a      	ldr	r2, [r7, #4]
 8014750:	605a      	str	r2, [r3, #4]
 8014752:	e006      	b.n	8014762 <vQueueAddToRegistry+0x42>
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	3301      	adds	r3, #1
 8014758:	60fb      	str	r3, [r7, #12]
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	2b07      	cmp	r3, #7
 801475e:	d9e7      	bls.n	8014730 <vQueueAddToRegistry+0x10>
 8014760:	bf00      	nop
 8014762:	bf00      	nop
 8014764:	3714      	adds	r7, #20
 8014766:	46bd      	mov	sp, r7
 8014768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476c:	4770      	bx	lr
 801476e:	bf00      	nop
 8014770:	240017cc 	.word	0x240017cc

08014774 <vQueueWaitForMessageRestricted>:
 8014774:	b580      	push	{r7, lr}
 8014776:	b086      	sub	sp, #24
 8014778:	af00      	add	r7, sp, #0
 801477a:	60f8      	str	r0, [r7, #12]
 801477c:	60b9      	str	r1, [r7, #8]
 801477e:	607a      	str	r2, [r7, #4]
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	617b      	str	r3, [r7, #20]
 8014784:	f001 fdf6 	bl	8016374 <vPortEnterCritical>
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801478e:	b25b      	sxtb	r3, r3
 8014790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014794:	d103      	bne.n	801479e <vQueueWaitForMessageRestricted+0x2a>
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	2200      	movs	r2, #0
 801479a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80147a4:	b25b      	sxtb	r3, r3
 80147a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80147aa:	d103      	bne.n	80147b4 <vQueueWaitForMessageRestricted+0x40>
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	2200      	movs	r2, #0
 80147b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80147b4:	f001 fe0e 	bl	80163d4 <vPortExitCritical>
 80147b8:	697b      	ldr	r3, [r7, #20]
 80147ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d106      	bne.n	80147ce <vQueueWaitForMessageRestricted+0x5a>
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	3324      	adds	r3, #36	; 0x24
 80147c4:	687a      	ldr	r2, [r7, #4]
 80147c6:	68b9      	ldr	r1, [r7, #8]
 80147c8:	4618      	mov	r0, r3
 80147ca:	f000 fdf7 	bl	80153bc <vTaskPlaceOnEventListRestricted>
 80147ce:	6978      	ldr	r0, [r7, #20]
 80147d0:	f7ff ff26 	bl	8014620 <prvUnlockQueue>
 80147d4:	bf00      	nop
 80147d6:	3718      	adds	r7, #24
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}

080147dc <xTaskCreateStatic>:
 80147dc:	b580      	push	{r7, lr}
 80147de:	b08e      	sub	sp, #56	; 0x38
 80147e0:	af04      	add	r7, sp, #16
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	607a      	str	r2, [r7, #4]
 80147e8:	603b      	str	r3, [r7, #0]
 80147ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d10a      	bne.n	8014806 <xTaskCreateStatic+0x2a>
 80147f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147f4:	f383 8811 	msr	BASEPRI, r3
 80147f8:	f3bf 8f6f 	isb	sy
 80147fc:	f3bf 8f4f 	dsb	sy
 8014800:	623b      	str	r3, [r7, #32]
 8014802:	bf00      	nop
 8014804:	e7fe      	b.n	8014804 <xTaskCreateStatic+0x28>
 8014806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014808:	2b00      	cmp	r3, #0
 801480a:	d10a      	bne.n	8014822 <xTaskCreateStatic+0x46>
 801480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014810:	f383 8811 	msr	BASEPRI, r3
 8014814:	f3bf 8f6f 	isb	sy
 8014818:	f3bf 8f4f 	dsb	sy
 801481c:	61fb      	str	r3, [r7, #28]
 801481e:	bf00      	nop
 8014820:	e7fe      	b.n	8014820 <xTaskCreateStatic+0x44>
 8014822:	235c      	movs	r3, #92	; 0x5c
 8014824:	613b      	str	r3, [r7, #16]
 8014826:	693b      	ldr	r3, [r7, #16]
 8014828:	2b5c      	cmp	r3, #92	; 0x5c
 801482a:	d00a      	beq.n	8014842 <xTaskCreateStatic+0x66>
 801482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014830:	f383 8811 	msr	BASEPRI, r3
 8014834:	f3bf 8f6f 	isb	sy
 8014838:	f3bf 8f4f 	dsb	sy
 801483c:	61bb      	str	r3, [r7, #24]
 801483e:	bf00      	nop
 8014840:	e7fe      	b.n	8014840 <xTaskCreateStatic+0x64>
 8014842:	693b      	ldr	r3, [r7, #16]
 8014844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014846:	2b00      	cmp	r3, #0
 8014848:	d01e      	beq.n	8014888 <xTaskCreateStatic+0xac>
 801484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801484c:	2b00      	cmp	r3, #0
 801484e:	d01b      	beq.n	8014888 <xTaskCreateStatic+0xac>
 8014850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014852:	627b      	str	r3, [r7, #36]	; 0x24
 8014854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014858:	631a      	str	r2, [r3, #48]	; 0x30
 801485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801485c:	2202      	movs	r2, #2
 801485e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8014862:	2300      	movs	r3, #0
 8014864:	9303      	str	r3, [sp, #12]
 8014866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014868:	9302      	str	r3, [sp, #8]
 801486a:	f107 0314 	add.w	r3, r7, #20
 801486e:	9301      	str	r3, [sp, #4]
 8014870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014872:	9300      	str	r3, [sp, #0]
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	68b9      	ldr	r1, [r7, #8]
 801487a:	68f8      	ldr	r0, [r7, #12]
 801487c:	f000 f850 	bl	8014920 <prvInitialiseNewTask>
 8014880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014882:	f000 f8dd 	bl	8014a40 <prvAddNewTaskToReadyList>
 8014886:	e001      	b.n	801488c <xTaskCreateStatic+0xb0>
 8014888:	2300      	movs	r3, #0
 801488a:	617b      	str	r3, [r7, #20]
 801488c:	697b      	ldr	r3, [r7, #20]
 801488e:	4618      	mov	r0, r3
 8014890:	3728      	adds	r7, #40	; 0x28
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}

08014896 <xTaskCreate>:
 8014896:	b580      	push	{r7, lr}
 8014898:	b08c      	sub	sp, #48	; 0x30
 801489a:	af04      	add	r7, sp, #16
 801489c:	60f8      	str	r0, [r7, #12]
 801489e:	60b9      	str	r1, [r7, #8]
 80148a0:	603b      	str	r3, [r7, #0]
 80148a2:	4613      	mov	r3, r2
 80148a4:	80fb      	strh	r3, [r7, #6]
 80148a6:	88fb      	ldrh	r3, [r7, #6]
 80148a8:	009b      	lsls	r3, r3, #2
 80148aa:	4618      	mov	r0, r3
 80148ac:	f001 fe84 	bl	80165b8 <pvPortMalloc>
 80148b0:	6178      	str	r0, [r7, #20]
 80148b2:	697b      	ldr	r3, [r7, #20]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d00e      	beq.n	80148d6 <xTaskCreate+0x40>
 80148b8:	205c      	movs	r0, #92	; 0x5c
 80148ba:	f001 fe7d 	bl	80165b8 <pvPortMalloc>
 80148be:	61f8      	str	r0, [r7, #28]
 80148c0:	69fb      	ldr	r3, [r7, #28]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d003      	beq.n	80148ce <xTaskCreate+0x38>
 80148c6:	69fb      	ldr	r3, [r7, #28]
 80148c8:	697a      	ldr	r2, [r7, #20]
 80148ca:	631a      	str	r2, [r3, #48]	; 0x30
 80148cc:	e005      	b.n	80148da <xTaskCreate+0x44>
 80148ce:	6978      	ldr	r0, [r7, #20]
 80148d0:	f001 ff3e 	bl	8016750 <vPortFree>
 80148d4:	e001      	b.n	80148da <xTaskCreate+0x44>
 80148d6:	2300      	movs	r3, #0
 80148d8:	61fb      	str	r3, [r7, #28]
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d017      	beq.n	8014910 <xTaskCreate+0x7a>
 80148e0:	69fb      	ldr	r3, [r7, #28]
 80148e2:	2200      	movs	r2, #0
 80148e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80148e8:	88fa      	ldrh	r2, [r7, #6]
 80148ea:	2300      	movs	r3, #0
 80148ec:	9303      	str	r3, [sp, #12]
 80148ee:	69fb      	ldr	r3, [r7, #28]
 80148f0:	9302      	str	r3, [sp, #8]
 80148f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148f4:	9301      	str	r3, [sp, #4]
 80148f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f8:	9300      	str	r3, [sp, #0]
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	68b9      	ldr	r1, [r7, #8]
 80148fe:	68f8      	ldr	r0, [r7, #12]
 8014900:	f000 f80e 	bl	8014920 <prvInitialiseNewTask>
 8014904:	69f8      	ldr	r0, [r7, #28]
 8014906:	f000 f89b 	bl	8014a40 <prvAddNewTaskToReadyList>
 801490a:	2301      	movs	r3, #1
 801490c:	61bb      	str	r3, [r7, #24]
 801490e:	e002      	b.n	8014916 <xTaskCreate+0x80>
 8014910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014914:	61bb      	str	r3, [r7, #24]
 8014916:	69bb      	ldr	r3, [r7, #24]
 8014918:	4618      	mov	r0, r3
 801491a:	3720      	adds	r7, #32
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}

08014920 <prvInitialiseNewTask>:
 8014920:	b580      	push	{r7, lr}
 8014922:	b088      	sub	sp, #32
 8014924:	af00      	add	r7, sp, #0
 8014926:	60f8      	str	r0, [r7, #12]
 8014928:	60b9      	str	r1, [r7, #8]
 801492a:	607a      	str	r2, [r7, #4]
 801492c:	603b      	str	r3, [r7, #0]
 801492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014930:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	009b      	lsls	r3, r3, #2
 8014936:	461a      	mov	r2, r3
 8014938:	21a5      	movs	r1, #165	; 0xa5
 801493a:	f002 f86f 	bl	8016a1c <memset>
 801493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014942:	6879      	ldr	r1, [r7, #4]
 8014944:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014948:	440b      	add	r3, r1
 801494a:	009b      	lsls	r3, r3, #2
 801494c:	4413      	add	r3, r2
 801494e:	61bb      	str	r3, [r7, #24]
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	f023 0307 	bic.w	r3, r3, #7
 8014956:	61bb      	str	r3, [r7, #24]
 8014958:	69bb      	ldr	r3, [r7, #24]
 801495a:	f003 0307 	and.w	r3, r3, #7
 801495e:	2b00      	cmp	r3, #0
 8014960:	d00a      	beq.n	8014978 <prvInitialiseNewTask+0x58>
 8014962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014966:	f383 8811 	msr	BASEPRI, r3
 801496a:	f3bf 8f6f 	isb	sy
 801496e:	f3bf 8f4f 	dsb	sy
 8014972:	617b      	str	r3, [r7, #20]
 8014974:	bf00      	nop
 8014976:	e7fe      	b.n	8014976 <prvInitialiseNewTask+0x56>
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d01f      	beq.n	80149be <prvInitialiseNewTask+0x9e>
 801497e:	2300      	movs	r3, #0
 8014980:	61fb      	str	r3, [r7, #28]
 8014982:	e012      	b.n	80149aa <prvInitialiseNewTask+0x8a>
 8014984:	68ba      	ldr	r2, [r7, #8]
 8014986:	69fb      	ldr	r3, [r7, #28]
 8014988:	4413      	add	r3, r2
 801498a:	7819      	ldrb	r1, [r3, #0]
 801498c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801498e:	69fb      	ldr	r3, [r7, #28]
 8014990:	4413      	add	r3, r2
 8014992:	3334      	adds	r3, #52	; 0x34
 8014994:	460a      	mov	r2, r1
 8014996:	701a      	strb	r2, [r3, #0]
 8014998:	68ba      	ldr	r2, [r7, #8]
 801499a:	69fb      	ldr	r3, [r7, #28]
 801499c:	4413      	add	r3, r2
 801499e:	781b      	ldrb	r3, [r3, #0]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d006      	beq.n	80149b2 <prvInitialiseNewTask+0x92>
 80149a4:	69fb      	ldr	r3, [r7, #28]
 80149a6:	3301      	adds	r3, #1
 80149a8:	61fb      	str	r3, [r7, #28]
 80149aa:	69fb      	ldr	r3, [r7, #28]
 80149ac:	2b0f      	cmp	r3, #15
 80149ae:	d9e9      	bls.n	8014984 <prvInitialiseNewTask+0x64>
 80149b0:	e000      	b.n	80149b4 <prvInitialiseNewTask+0x94>
 80149b2:	bf00      	nop
 80149b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149b6:	2200      	movs	r2, #0
 80149b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80149bc:	e003      	b.n	80149c6 <prvInitialiseNewTask+0xa6>
 80149be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c0:	2200      	movs	r2, #0
 80149c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80149c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c8:	2b37      	cmp	r3, #55	; 0x37
 80149ca:	d901      	bls.n	80149d0 <prvInitialiseNewTask+0xb0>
 80149cc:	2337      	movs	r3, #55	; 0x37
 80149ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80149d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80149d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80149d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80149da:	64da      	str	r2, [r3, #76]	; 0x4c
 80149dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149de:	2200      	movs	r2, #0
 80149e0:	651a      	str	r2, [r3, #80]	; 0x50
 80149e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149e4:	3304      	adds	r3, #4
 80149e6:	4618      	mov	r0, r3
 80149e8:	f7ff f8be 	bl	8013b68 <vListInitialiseItem>
 80149ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ee:	3318      	adds	r3, #24
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7ff f8b9 	bl	8013b68 <vListInitialiseItem>
 80149f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149fa:	611a      	str	r2, [r3, #16]
 80149fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a04:	619a      	str	r2, [r3, #24]
 8014a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8014a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a0e:	2200      	movs	r2, #0
 8014a10:	655a      	str	r2, [r3, #84]	; 0x54
 8014a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a14:	2200      	movs	r2, #0
 8014a16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8014a1a:	683a      	ldr	r2, [r7, #0]
 8014a1c:	68f9      	ldr	r1, [r7, #12]
 8014a1e:	69b8      	ldr	r0, [r7, #24]
 8014a20:	f001 fb7e 	bl	8016120 <pxPortInitialiseStack>
 8014a24:	4602      	mov	r2, r0
 8014a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a28:	601a      	str	r2, [r3, #0]
 8014a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d002      	beq.n	8014a36 <prvInitialiseNewTask+0x116>
 8014a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a34:	601a      	str	r2, [r3, #0]
 8014a36:	bf00      	nop
 8014a38:	3720      	adds	r7, #32
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}
	...

08014a40 <prvAddNewTaskToReadyList>:
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b082      	sub	sp, #8
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
 8014a48:	f001 fc94 	bl	8016374 <vPortEnterCritical>
 8014a4c:	4b2d      	ldr	r3, [pc, #180]	; (8014b04 <prvAddNewTaskToReadyList+0xc4>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	3301      	adds	r3, #1
 8014a52:	4a2c      	ldr	r2, [pc, #176]	; (8014b04 <prvAddNewTaskToReadyList+0xc4>)
 8014a54:	6013      	str	r3, [r2, #0]
 8014a56:	4b2c      	ldr	r3, [pc, #176]	; (8014b08 <prvAddNewTaskToReadyList+0xc8>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d109      	bne.n	8014a72 <prvAddNewTaskToReadyList+0x32>
 8014a5e:	4a2a      	ldr	r2, [pc, #168]	; (8014b08 <prvAddNewTaskToReadyList+0xc8>)
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	6013      	str	r3, [r2, #0]
 8014a64:	4b27      	ldr	r3, [pc, #156]	; (8014b04 <prvAddNewTaskToReadyList+0xc4>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2b01      	cmp	r3, #1
 8014a6a:	d110      	bne.n	8014a8e <prvAddNewTaskToReadyList+0x4e>
 8014a6c:	f000 fe34 	bl	80156d8 <prvInitialiseTaskLists>
 8014a70:	e00d      	b.n	8014a8e <prvAddNewTaskToReadyList+0x4e>
 8014a72:	4b26      	ldr	r3, [pc, #152]	; (8014b0c <prvAddNewTaskToReadyList+0xcc>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d109      	bne.n	8014a8e <prvAddNewTaskToReadyList+0x4e>
 8014a7a:	4b23      	ldr	r3, [pc, #140]	; (8014b08 <prvAddNewTaskToReadyList+0xc8>)
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d802      	bhi.n	8014a8e <prvAddNewTaskToReadyList+0x4e>
 8014a88:	4a1f      	ldr	r2, [pc, #124]	; (8014b08 <prvAddNewTaskToReadyList+0xc8>)
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	6013      	str	r3, [r2, #0]
 8014a8e:	4b20      	ldr	r3, [pc, #128]	; (8014b10 <prvAddNewTaskToReadyList+0xd0>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	3301      	adds	r3, #1
 8014a94:	4a1e      	ldr	r2, [pc, #120]	; (8014b10 <prvAddNewTaskToReadyList+0xd0>)
 8014a96:	6013      	str	r3, [r2, #0]
 8014a98:	4b1d      	ldr	r3, [pc, #116]	; (8014b10 <prvAddNewTaskToReadyList+0xd0>)
 8014a9a:	681a      	ldr	r2, [r3, #0]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	645a      	str	r2, [r3, #68]	; 0x44
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014aa4:	4b1b      	ldr	r3, [pc, #108]	; (8014b14 <prvAddNewTaskToReadyList+0xd4>)
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d903      	bls.n	8014ab4 <prvAddNewTaskToReadyList+0x74>
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ab0:	4a18      	ldr	r2, [pc, #96]	; (8014b14 <prvAddNewTaskToReadyList+0xd4>)
 8014ab2:	6013      	str	r3, [r2, #0]
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ab8:	4613      	mov	r3, r2
 8014aba:	009b      	lsls	r3, r3, #2
 8014abc:	4413      	add	r3, r2
 8014abe:	009b      	lsls	r3, r3, #2
 8014ac0:	4a15      	ldr	r2, [pc, #84]	; (8014b18 <prvAddNewTaskToReadyList+0xd8>)
 8014ac2:	441a      	add	r2, r3
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	3304      	adds	r3, #4
 8014ac8:	4619      	mov	r1, r3
 8014aca:	4610      	mov	r0, r2
 8014acc:	f7ff f859 	bl	8013b82 <vListInsertEnd>
 8014ad0:	f001 fc80 	bl	80163d4 <vPortExitCritical>
 8014ad4:	4b0d      	ldr	r3, [pc, #52]	; (8014b0c <prvAddNewTaskToReadyList+0xcc>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d00e      	beq.n	8014afa <prvAddNewTaskToReadyList+0xba>
 8014adc:	4b0a      	ldr	r3, [pc, #40]	; (8014b08 <prvAddNewTaskToReadyList+0xc8>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d207      	bcs.n	8014afa <prvAddNewTaskToReadyList+0xba>
 8014aea:	4b0c      	ldr	r3, [pc, #48]	; (8014b1c <prvAddNewTaskToReadyList+0xdc>)
 8014aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014af0:	601a      	str	r2, [r3, #0]
 8014af2:	f3bf 8f4f 	dsb	sy
 8014af6:	f3bf 8f6f 	isb	sy
 8014afa:	bf00      	nop
 8014afc:	3708      	adds	r7, #8
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}
 8014b02:	bf00      	nop
 8014b04:	24001ce0 	.word	0x24001ce0
 8014b08:	2400180c 	.word	0x2400180c
 8014b0c:	24001cec 	.word	0x24001cec
 8014b10:	24001cfc 	.word	0x24001cfc
 8014b14:	24001ce8 	.word	0x24001ce8
 8014b18:	24001810 	.word	0x24001810
 8014b1c:	e000ed04 	.word	0xe000ed04

08014b20 <vTaskDelay>:
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b084      	sub	sp, #16
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	2300      	movs	r3, #0
 8014b2a:	60fb      	str	r3, [r7, #12]
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d017      	beq.n	8014b62 <vTaskDelay+0x42>
 8014b32:	4b13      	ldr	r3, [pc, #76]	; (8014b80 <vTaskDelay+0x60>)
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d00a      	beq.n	8014b50 <vTaskDelay+0x30>
 8014b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b3e:	f383 8811 	msr	BASEPRI, r3
 8014b42:	f3bf 8f6f 	isb	sy
 8014b46:	f3bf 8f4f 	dsb	sy
 8014b4a:	60bb      	str	r3, [r7, #8]
 8014b4c:	bf00      	nop
 8014b4e:	e7fe      	b.n	8014b4e <vTaskDelay+0x2e>
 8014b50:	f000 f9f8 	bl	8014f44 <vTaskSuspendAll>
 8014b54:	2100      	movs	r1, #0
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f000 ff20 	bl	801599c <prvAddCurrentTaskToDelayedList>
 8014b5c:	f000 fa00 	bl	8014f60 <xTaskResumeAll>
 8014b60:	60f8      	str	r0, [r7, #12]
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d107      	bne.n	8014b78 <vTaskDelay+0x58>
 8014b68:	4b06      	ldr	r3, [pc, #24]	; (8014b84 <vTaskDelay+0x64>)
 8014b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b6e:	601a      	str	r2, [r3, #0]
 8014b70:	f3bf 8f4f 	dsb	sy
 8014b74:	f3bf 8f6f 	isb	sy
 8014b78:	bf00      	nop
 8014b7a:	3710      	adds	r7, #16
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}
 8014b80:	24001d08 	.word	0x24001d08
 8014b84:	e000ed04 	.word	0xe000ed04

08014b88 <vTaskSuspend>:
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b084      	sub	sp, #16
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	f001 fbf0 	bl	8016374 <vPortEnterCritical>
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d102      	bne.n	8014ba0 <vTaskSuspend+0x18>
 8014b9a:	4b30      	ldr	r3, [pc, #192]	; (8014c5c <vTaskSuspend+0xd4>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	e000      	b.n	8014ba2 <vTaskSuspend+0x1a>
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	60fb      	str	r3, [r7, #12]
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	3304      	adds	r3, #4
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7ff f847 	bl	8013c3c <uxListRemove>
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d004      	beq.n	8014bc0 <vTaskSuspend+0x38>
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	3318      	adds	r3, #24
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7ff f83e 	bl	8013c3c <uxListRemove>
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	3304      	adds	r3, #4
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	4826      	ldr	r0, [pc, #152]	; (8014c60 <vTaskSuspend+0xd8>)
 8014bc8:	f7fe ffdb 	bl	8013b82 <vListInsertEnd>
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014bd2:	b2db      	uxtb	r3, r3
 8014bd4:	2b01      	cmp	r3, #1
 8014bd6:	d103      	bne.n	8014be0 <vTaskSuspend+0x58>
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8014be0:	f001 fbf8 	bl	80163d4 <vPortExitCritical>
 8014be4:	4b1f      	ldr	r3, [pc, #124]	; (8014c64 <vTaskSuspend+0xdc>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d005      	beq.n	8014bf8 <vTaskSuspend+0x70>
 8014bec:	f001 fbc2 	bl	8016374 <vPortEnterCritical>
 8014bf0:	f000 fe10 	bl	8015814 <prvResetNextTaskUnblockTime>
 8014bf4:	f001 fbee 	bl	80163d4 <vPortExitCritical>
 8014bf8:	4b18      	ldr	r3, [pc, #96]	; (8014c5c <vTaskSuspend+0xd4>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	68fa      	ldr	r2, [r7, #12]
 8014bfe:	429a      	cmp	r2, r3
 8014c00:	d127      	bne.n	8014c52 <vTaskSuspend+0xca>
 8014c02:	4b18      	ldr	r3, [pc, #96]	; (8014c64 <vTaskSuspend+0xdc>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d017      	beq.n	8014c3a <vTaskSuspend+0xb2>
 8014c0a:	4b17      	ldr	r3, [pc, #92]	; (8014c68 <vTaskSuspend+0xe0>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d00a      	beq.n	8014c28 <vTaskSuspend+0xa0>
 8014c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c16:	f383 8811 	msr	BASEPRI, r3
 8014c1a:	f3bf 8f6f 	isb	sy
 8014c1e:	f3bf 8f4f 	dsb	sy
 8014c22:	60bb      	str	r3, [r7, #8]
 8014c24:	bf00      	nop
 8014c26:	e7fe      	b.n	8014c26 <vTaskSuspend+0x9e>
 8014c28:	4b10      	ldr	r3, [pc, #64]	; (8014c6c <vTaskSuspend+0xe4>)
 8014c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c2e:	601a      	str	r2, [r3, #0]
 8014c30:	f3bf 8f4f 	dsb	sy
 8014c34:	f3bf 8f6f 	isb	sy
 8014c38:	e00b      	b.n	8014c52 <vTaskSuspend+0xca>
 8014c3a:	4b09      	ldr	r3, [pc, #36]	; (8014c60 <vTaskSuspend+0xd8>)
 8014c3c:	681a      	ldr	r2, [r3, #0]
 8014c3e:	4b0c      	ldr	r3, [pc, #48]	; (8014c70 <vTaskSuspend+0xe8>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d103      	bne.n	8014c4e <vTaskSuspend+0xc6>
 8014c46:	4b05      	ldr	r3, [pc, #20]	; (8014c5c <vTaskSuspend+0xd4>)
 8014c48:	2200      	movs	r2, #0
 8014c4a:	601a      	str	r2, [r3, #0]
 8014c4c:	e001      	b.n	8014c52 <vTaskSuspend+0xca>
 8014c4e:	f000 faf7 	bl	8015240 <vTaskSwitchContext>
 8014c52:	bf00      	nop
 8014c54:	3710      	adds	r7, #16
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}
 8014c5a:	bf00      	nop
 8014c5c:	2400180c 	.word	0x2400180c
 8014c60:	24001ccc 	.word	0x24001ccc
 8014c64:	24001cec 	.word	0x24001cec
 8014c68:	24001d08 	.word	0x24001d08
 8014c6c:	e000ed04 	.word	0xe000ed04
 8014c70:	24001ce0 	.word	0x24001ce0

08014c74 <prvTaskIsTaskSuspended>:
 8014c74:	b480      	push	{r7}
 8014c76:	b087      	sub	sp, #28
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	617b      	str	r3, [r7, #20]
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	613b      	str	r3, [r7, #16]
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d10a      	bne.n	8014ca0 <prvTaskIsTaskSuspended+0x2c>
 8014c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c8e:	f383 8811 	msr	BASEPRI, r3
 8014c92:	f3bf 8f6f 	isb	sy
 8014c96:	f3bf 8f4f 	dsb	sy
 8014c9a:	60fb      	str	r3, [r7, #12]
 8014c9c:	bf00      	nop
 8014c9e:	e7fe      	b.n	8014c9e <prvTaskIsTaskSuspended+0x2a>
 8014ca0:	693b      	ldr	r3, [r7, #16]
 8014ca2:	695b      	ldr	r3, [r3, #20]
 8014ca4:	4a0a      	ldr	r2, [pc, #40]	; (8014cd0 <prvTaskIsTaskSuspended+0x5c>)
 8014ca6:	4293      	cmp	r3, r2
 8014ca8:	d10a      	bne.n	8014cc0 <prvTaskIsTaskSuspended+0x4c>
 8014caa:	693b      	ldr	r3, [r7, #16]
 8014cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cae:	4a09      	ldr	r2, [pc, #36]	; (8014cd4 <prvTaskIsTaskSuspended+0x60>)
 8014cb0:	4293      	cmp	r3, r2
 8014cb2:	d005      	beq.n	8014cc0 <prvTaskIsTaskSuspended+0x4c>
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d101      	bne.n	8014cc0 <prvTaskIsTaskSuspended+0x4c>
 8014cbc:	2301      	movs	r3, #1
 8014cbe:	617b      	str	r3, [r7, #20]
 8014cc0:	697b      	ldr	r3, [r7, #20]
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	371c      	adds	r7, #28
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ccc:	4770      	bx	lr
 8014cce:	bf00      	nop
 8014cd0:	24001ccc 	.word	0x24001ccc
 8014cd4:	24001ca0 	.word	0x24001ca0

08014cd8 <vTaskResume>:
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	60fb      	str	r3, [r7, #12]
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d10a      	bne.n	8014d00 <vTaskResume+0x28>
 8014cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cee:	f383 8811 	msr	BASEPRI, r3
 8014cf2:	f3bf 8f6f 	isb	sy
 8014cf6:	f3bf 8f4f 	dsb	sy
 8014cfa:	60bb      	str	r3, [r7, #8]
 8014cfc:	bf00      	nop
 8014cfe:	e7fe      	b.n	8014cfe <vTaskResume+0x26>
 8014d00:	4b20      	ldr	r3, [pc, #128]	; (8014d84 <vTaskResume+0xac>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	68fa      	ldr	r2, [r7, #12]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d038      	beq.n	8014d7c <vTaskResume+0xa4>
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d035      	beq.n	8014d7c <vTaskResume+0xa4>
 8014d10:	f001 fb30 	bl	8016374 <vPortEnterCritical>
 8014d14:	68f8      	ldr	r0, [r7, #12]
 8014d16:	f7ff ffad 	bl	8014c74 <prvTaskIsTaskSuspended>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d02b      	beq.n	8014d78 <vTaskResume+0xa0>
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	3304      	adds	r3, #4
 8014d24:	4618      	mov	r0, r3
 8014d26:	f7fe ff89 	bl	8013c3c <uxListRemove>
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d2e:	4b16      	ldr	r3, [pc, #88]	; (8014d88 <vTaskResume+0xb0>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	429a      	cmp	r2, r3
 8014d34:	d903      	bls.n	8014d3e <vTaskResume+0x66>
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d3a:	4a13      	ldr	r2, [pc, #76]	; (8014d88 <vTaskResume+0xb0>)
 8014d3c:	6013      	str	r3, [r2, #0]
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d42:	4613      	mov	r3, r2
 8014d44:	009b      	lsls	r3, r3, #2
 8014d46:	4413      	add	r3, r2
 8014d48:	009b      	lsls	r3, r3, #2
 8014d4a:	4a10      	ldr	r2, [pc, #64]	; (8014d8c <vTaskResume+0xb4>)
 8014d4c:	441a      	add	r2, r3
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	3304      	adds	r3, #4
 8014d52:	4619      	mov	r1, r3
 8014d54:	4610      	mov	r0, r2
 8014d56:	f7fe ff14 	bl	8013b82 <vListInsertEnd>
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d5e:	4b09      	ldr	r3, [pc, #36]	; (8014d84 <vTaskResume+0xac>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d307      	bcc.n	8014d78 <vTaskResume+0xa0>
 8014d68:	4b09      	ldr	r3, [pc, #36]	; (8014d90 <vTaskResume+0xb8>)
 8014d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d6e:	601a      	str	r2, [r3, #0]
 8014d70:	f3bf 8f4f 	dsb	sy
 8014d74:	f3bf 8f6f 	isb	sy
 8014d78:	f001 fb2c 	bl	80163d4 <vPortExitCritical>
 8014d7c:	bf00      	nop
 8014d7e:	3710      	adds	r7, #16
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}
 8014d84:	2400180c 	.word	0x2400180c
 8014d88:	24001ce8 	.word	0x24001ce8
 8014d8c:	24001810 	.word	0x24001810
 8014d90:	e000ed04 	.word	0xe000ed04

08014d94 <xTaskResumeFromISR>:
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b08a      	sub	sp, #40	; 0x28
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	623b      	str	r3, [r7, #32]
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d10a      	bne.n	8014dc0 <xTaskResumeFromISR+0x2c>
 8014daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dae:	f383 8811 	msr	BASEPRI, r3
 8014db2:	f3bf 8f6f 	isb	sy
 8014db6:	f3bf 8f4f 	dsb	sy
 8014dba:	61bb      	str	r3, [r7, #24]
 8014dbc:	bf00      	nop
 8014dbe:	e7fe      	b.n	8014dbe <xTaskResumeFromISR+0x2a>
 8014dc0:	f001 fbba 	bl	8016538 <vPortValidateInterruptPriority>
 8014dc4:	f3ef 8211 	mrs	r2, BASEPRI
 8014dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dcc:	f383 8811 	msr	BASEPRI, r3
 8014dd0:	f3bf 8f6f 	isb	sy
 8014dd4:	f3bf 8f4f 	dsb	sy
 8014dd8:	617a      	str	r2, [r7, #20]
 8014dda:	613b      	str	r3, [r7, #16]
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	61fb      	str	r3, [r7, #28]
 8014de0:	6a38      	ldr	r0, [r7, #32]
 8014de2:	f7ff ff47 	bl	8014c74 <prvTaskIsTaskSuspended>
 8014de6:	4603      	mov	r3, r0
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d030      	beq.n	8014e4e <xTaskResumeFromISR+0xba>
 8014dec:	4b1d      	ldr	r3, [pc, #116]	; (8014e64 <xTaskResumeFromISR+0xd0>)
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d126      	bne.n	8014e42 <xTaskResumeFromISR+0xae>
 8014df4:	6a3b      	ldr	r3, [r7, #32]
 8014df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014df8:	4b1b      	ldr	r3, [pc, #108]	; (8014e68 <xTaskResumeFromISR+0xd4>)
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dfe:	429a      	cmp	r2, r3
 8014e00:	d301      	bcc.n	8014e06 <xTaskResumeFromISR+0x72>
 8014e02:	2301      	movs	r3, #1
 8014e04:	627b      	str	r3, [r7, #36]	; 0x24
 8014e06:	6a3b      	ldr	r3, [r7, #32]
 8014e08:	3304      	adds	r3, #4
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7fe ff16 	bl	8013c3c <uxListRemove>
 8014e10:	6a3b      	ldr	r3, [r7, #32]
 8014e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e14:	4b15      	ldr	r3, [pc, #84]	; (8014e6c <xTaskResumeFromISR+0xd8>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d903      	bls.n	8014e24 <xTaskResumeFromISR+0x90>
 8014e1c:	6a3b      	ldr	r3, [r7, #32]
 8014e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e20:	4a12      	ldr	r2, [pc, #72]	; (8014e6c <xTaskResumeFromISR+0xd8>)
 8014e22:	6013      	str	r3, [r2, #0]
 8014e24:	6a3b      	ldr	r3, [r7, #32]
 8014e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e28:	4613      	mov	r3, r2
 8014e2a:	009b      	lsls	r3, r3, #2
 8014e2c:	4413      	add	r3, r2
 8014e2e:	009b      	lsls	r3, r3, #2
 8014e30:	4a0f      	ldr	r2, [pc, #60]	; (8014e70 <xTaskResumeFromISR+0xdc>)
 8014e32:	441a      	add	r2, r3
 8014e34:	6a3b      	ldr	r3, [r7, #32]
 8014e36:	3304      	adds	r3, #4
 8014e38:	4619      	mov	r1, r3
 8014e3a:	4610      	mov	r0, r2
 8014e3c:	f7fe fea1 	bl	8013b82 <vListInsertEnd>
 8014e40:	e005      	b.n	8014e4e <xTaskResumeFromISR+0xba>
 8014e42:	6a3b      	ldr	r3, [r7, #32]
 8014e44:	3318      	adds	r3, #24
 8014e46:	4619      	mov	r1, r3
 8014e48:	480a      	ldr	r0, [pc, #40]	; (8014e74 <xTaskResumeFromISR+0xe0>)
 8014e4a:	f7fe fe9a 	bl	8013b82 <vListInsertEnd>
 8014e4e:	69fb      	ldr	r3, [r7, #28]
 8014e50:	60fb      	str	r3, [r7, #12]
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	f383 8811 	msr	BASEPRI, r3
 8014e58:	bf00      	nop
 8014e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3728      	adds	r7, #40	; 0x28
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}
 8014e64:	24001d08 	.word	0x24001d08
 8014e68:	2400180c 	.word	0x2400180c
 8014e6c:	24001ce8 	.word	0x24001ce8
 8014e70:	24001810 	.word	0x24001810
 8014e74:	24001ca0 	.word	0x24001ca0

08014e78 <vTaskStartScheduler>:
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b08a      	sub	sp, #40	; 0x28
 8014e7c:	af04      	add	r7, sp, #16
 8014e7e:	2300      	movs	r3, #0
 8014e80:	60bb      	str	r3, [r7, #8]
 8014e82:	2300      	movs	r3, #0
 8014e84:	607b      	str	r3, [r7, #4]
 8014e86:	463a      	mov	r2, r7
 8014e88:	1d39      	adds	r1, r7, #4
 8014e8a:	f107 0308 	add.w	r3, r7, #8
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7fe fbaa 	bl	80135e8 <vApplicationGetIdleTaskMemory>
 8014e94:	6839      	ldr	r1, [r7, #0]
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	68ba      	ldr	r2, [r7, #8]
 8014e9a:	9202      	str	r2, [sp, #8]
 8014e9c:	9301      	str	r3, [sp, #4]
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	9300      	str	r3, [sp, #0]
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	460a      	mov	r2, r1
 8014ea6:	4921      	ldr	r1, [pc, #132]	; (8014f2c <vTaskStartScheduler+0xb4>)
 8014ea8:	4821      	ldr	r0, [pc, #132]	; (8014f30 <vTaskStartScheduler+0xb8>)
 8014eaa:	f7ff fc97 	bl	80147dc <xTaskCreateStatic>
 8014eae:	4603      	mov	r3, r0
 8014eb0:	4a20      	ldr	r2, [pc, #128]	; (8014f34 <vTaskStartScheduler+0xbc>)
 8014eb2:	6013      	str	r3, [r2, #0]
 8014eb4:	4b1f      	ldr	r3, [pc, #124]	; (8014f34 <vTaskStartScheduler+0xbc>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d002      	beq.n	8014ec2 <vTaskStartScheduler+0x4a>
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	617b      	str	r3, [r7, #20]
 8014ec0:	e001      	b.n	8014ec6 <vTaskStartScheduler+0x4e>
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	617b      	str	r3, [r7, #20]
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	2b01      	cmp	r3, #1
 8014eca:	d102      	bne.n	8014ed2 <vTaskStartScheduler+0x5a>
 8014ecc:	f000 fdba 	bl	8015a44 <xTimerCreateTimerTask>
 8014ed0:	6178      	str	r0, [r7, #20]
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	2b01      	cmp	r3, #1
 8014ed6:	d116      	bne.n	8014f06 <vTaskStartScheduler+0x8e>
 8014ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014edc:	f383 8811 	msr	BASEPRI, r3
 8014ee0:	f3bf 8f6f 	isb	sy
 8014ee4:	f3bf 8f4f 	dsb	sy
 8014ee8:	613b      	str	r3, [r7, #16]
 8014eea:	bf00      	nop
 8014eec:	4b12      	ldr	r3, [pc, #72]	; (8014f38 <vTaskStartScheduler+0xc0>)
 8014eee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ef2:	601a      	str	r2, [r3, #0]
 8014ef4:	4b11      	ldr	r3, [pc, #68]	; (8014f3c <vTaskStartScheduler+0xc4>)
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	601a      	str	r2, [r3, #0]
 8014efa:	4b11      	ldr	r3, [pc, #68]	; (8014f40 <vTaskStartScheduler+0xc8>)
 8014efc:	2200      	movs	r2, #0
 8014efe:	601a      	str	r2, [r3, #0]
 8014f00:	f001 f996 	bl	8016230 <xPortStartScheduler>
 8014f04:	e00e      	b.n	8014f24 <vTaskStartScheduler+0xac>
 8014f06:	697b      	ldr	r3, [r7, #20]
 8014f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014f0c:	d10a      	bne.n	8014f24 <vTaskStartScheduler+0xac>
 8014f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f12:	f383 8811 	msr	BASEPRI, r3
 8014f16:	f3bf 8f6f 	isb	sy
 8014f1a:	f3bf 8f4f 	dsb	sy
 8014f1e:	60fb      	str	r3, [r7, #12]
 8014f20:	bf00      	nop
 8014f22:	e7fe      	b.n	8014f22 <vTaskStartScheduler+0xaa>
 8014f24:	bf00      	nop
 8014f26:	3718      	adds	r7, #24
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bd80      	pop	{r7, pc}
 8014f2c:	08017698 	.word	0x08017698
 8014f30:	080156a9 	.word	0x080156a9
 8014f34:	24001d04 	.word	0x24001d04
 8014f38:	24001d00 	.word	0x24001d00
 8014f3c:	24001cec 	.word	0x24001cec
 8014f40:	24001ce4 	.word	0x24001ce4

08014f44 <vTaskSuspendAll>:
 8014f44:	b480      	push	{r7}
 8014f46:	af00      	add	r7, sp, #0
 8014f48:	4b04      	ldr	r3, [pc, #16]	; (8014f5c <vTaskSuspendAll+0x18>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	3301      	adds	r3, #1
 8014f4e:	4a03      	ldr	r2, [pc, #12]	; (8014f5c <vTaskSuspendAll+0x18>)
 8014f50:	6013      	str	r3, [r2, #0]
 8014f52:	bf00      	nop
 8014f54:	46bd      	mov	sp, r7
 8014f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5a:	4770      	bx	lr
 8014f5c:	24001d08 	.word	0x24001d08

08014f60 <xTaskResumeAll>:
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b084      	sub	sp, #16
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	2300      	movs	r3, #0
 8014f68:	60fb      	str	r3, [r7, #12]
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	60bb      	str	r3, [r7, #8]
 8014f6e:	4b42      	ldr	r3, [pc, #264]	; (8015078 <xTaskResumeAll+0x118>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d10a      	bne.n	8014f8c <xTaskResumeAll+0x2c>
 8014f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f7a:	f383 8811 	msr	BASEPRI, r3
 8014f7e:	f3bf 8f6f 	isb	sy
 8014f82:	f3bf 8f4f 	dsb	sy
 8014f86:	603b      	str	r3, [r7, #0]
 8014f88:	bf00      	nop
 8014f8a:	e7fe      	b.n	8014f8a <xTaskResumeAll+0x2a>
 8014f8c:	f001 f9f2 	bl	8016374 <vPortEnterCritical>
 8014f90:	4b39      	ldr	r3, [pc, #228]	; (8015078 <xTaskResumeAll+0x118>)
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	3b01      	subs	r3, #1
 8014f96:	4a38      	ldr	r2, [pc, #224]	; (8015078 <xTaskResumeAll+0x118>)
 8014f98:	6013      	str	r3, [r2, #0]
 8014f9a:	4b37      	ldr	r3, [pc, #220]	; (8015078 <xTaskResumeAll+0x118>)
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d162      	bne.n	8015068 <xTaskResumeAll+0x108>
 8014fa2:	4b36      	ldr	r3, [pc, #216]	; (801507c <xTaskResumeAll+0x11c>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d05e      	beq.n	8015068 <xTaskResumeAll+0x108>
 8014faa:	e02f      	b.n	801500c <xTaskResumeAll+0xac>
 8014fac:	4b34      	ldr	r3, [pc, #208]	; (8015080 <xTaskResumeAll+0x120>)
 8014fae:	68db      	ldr	r3, [r3, #12]
 8014fb0:	68db      	ldr	r3, [r3, #12]
 8014fb2:	60fb      	str	r3, [r7, #12]
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	3318      	adds	r3, #24
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7fe fe3f 	bl	8013c3c <uxListRemove>
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	3304      	adds	r3, #4
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7fe fe3a 	bl	8013c3c <uxListRemove>
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fcc:	4b2d      	ldr	r3, [pc, #180]	; (8015084 <xTaskResumeAll+0x124>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d903      	bls.n	8014fdc <xTaskResumeAll+0x7c>
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fd8:	4a2a      	ldr	r2, [pc, #168]	; (8015084 <xTaskResumeAll+0x124>)
 8014fda:	6013      	str	r3, [r2, #0]
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fe0:	4613      	mov	r3, r2
 8014fe2:	009b      	lsls	r3, r3, #2
 8014fe4:	4413      	add	r3, r2
 8014fe6:	009b      	lsls	r3, r3, #2
 8014fe8:	4a27      	ldr	r2, [pc, #156]	; (8015088 <xTaskResumeAll+0x128>)
 8014fea:	441a      	add	r2, r3
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	3304      	adds	r3, #4
 8014ff0:	4619      	mov	r1, r3
 8014ff2:	4610      	mov	r0, r2
 8014ff4:	f7fe fdc5 	bl	8013b82 <vListInsertEnd>
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ffc:	4b23      	ldr	r3, [pc, #140]	; (801508c <xTaskResumeAll+0x12c>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015002:	429a      	cmp	r2, r3
 8015004:	d302      	bcc.n	801500c <xTaskResumeAll+0xac>
 8015006:	4b22      	ldr	r3, [pc, #136]	; (8015090 <xTaskResumeAll+0x130>)
 8015008:	2201      	movs	r2, #1
 801500a:	601a      	str	r2, [r3, #0]
 801500c:	4b1c      	ldr	r3, [pc, #112]	; (8015080 <xTaskResumeAll+0x120>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d1cb      	bne.n	8014fac <xTaskResumeAll+0x4c>
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d001      	beq.n	801501e <xTaskResumeAll+0xbe>
 801501a:	f000 fbfb 	bl	8015814 <prvResetNextTaskUnblockTime>
 801501e:	4b1d      	ldr	r3, [pc, #116]	; (8015094 <xTaskResumeAll+0x134>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	607b      	str	r3, [r7, #4]
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d010      	beq.n	801504c <xTaskResumeAll+0xec>
 801502a:	f000 f847 	bl	80150bc <xTaskIncrementTick>
 801502e:	4603      	mov	r3, r0
 8015030:	2b00      	cmp	r3, #0
 8015032:	d002      	beq.n	801503a <xTaskResumeAll+0xda>
 8015034:	4b16      	ldr	r3, [pc, #88]	; (8015090 <xTaskResumeAll+0x130>)
 8015036:	2201      	movs	r2, #1
 8015038:	601a      	str	r2, [r3, #0]
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	3b01      	subs	r3, #1
 801503e:	607b      	str	r3, [r7, #4]
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d1f1      	bne.n	801502a <xTaskResumeAll+0xca>
 8015046:	4b13      	ldr	r3, [pc, #76]	; (8015094 <xTaskResumeAll+0x134>)
 8015048:	2200      	movs	r2, #0
 801504a:	601a      	str	r2, [r3, #0]
 801504c:	4b10      	ldr	r3, [pc, #64]	; (8015090 <xTaskResumeAll+0x130>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d009      	beq.n	8015068 <xTaskResumeAll+0x108>
 8015054:	2301      	movs	r3, #1
 8015056:	60bb      	str	r3, [r7, #8]
 8015058:	4b0f      	ldr	r3, [pc, #60]	; (8015098 <xTaskResumeAll+0x138>)
 801505a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801505e:	601a      	str	r2, [r3, #0]
 8015060:	f3bf 8f4f 	dsb	sy
 8015064:	f3bf 8f6f 	isb	sy
 8015068:	f001 f9b4 	bl	80163d4 <vPortExitCritical>
 801506c:	68bb      	ldr	r3, [r7, #8]
 801506e:	4618      	mov	r0, r3
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}
 8015076:	bf00      	nop
 8015078:	24001d08 	.word	0x24001d08
 801507c:	24001ce0 	.word	0x24001ce0
 8015080:	24001ca0 	.word	0x24001ca0
 8015084:	24001ce8 	.word	0x24001ce8
 8015088:	24001810 	.word	0x24001810
 801508c:	2400180c 	.word	0x2400180c
 8015090:	24001cf4 	.word	0x24001cf4
 8015094:	24001cf0 	.word	0x24001cf0
 8015098:	e000ed04 	.word	0xe000ed04

0801509c <xTaskGetTickCount>:
 801509c:	b480      	push	{r7}
 801509e:	b083      	sub	sp, #12
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	4b05      	ldr	r3, [pc, #20]	; (80150b8 <xTaskGetTickCount+0x1c>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	607b      	str	r3, [r7, #4]
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	4618      	mov	r0, r3
 80150ac:	370c      	adds	r7, #12
 80150ae:	46bd      	mov	sp, r7
 80150b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b4:	4770      	bx	lr
 80150b6:	bf00      	nop
 80150b8:	24001ce4 	.word	0x24001ce4

080150bc <xTaskIncrementTick>:
 80150bc:	b580      	push	{r7, lr}
 80150be:	b086      	sub	sp, #24
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	2300      	movs	r3, #0
 80150c4:	617b      	str	r3, [r7, #20]
 80150c6:	4b53      	ldr	r3, [pc, #332]	; (8015214 <xTaskIncrementTick+0x158>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	f040 8095 	bne.w	80151fa <xTaskIncrementTick+0x13e>
 80150d0:	4b51      	ldr	r3, [pc, #324]	; (8015218 <xTaskIncrementTick+0x15c>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	3301      	adds	r3, #1
 80150d6:	613b      	str	r3, [r7, #16]
 80150d8:	4a4f      	ldr	r2, [pc, #316]	; (8015218 <xTaskIncrementTick+0x15c>)
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	6013      	str	r3, [r2, #0]
 80150de:	693b      	ldr	r3, [r7, #16]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d120      	bne.n	8015126 <xTaskIncrementTick+0x6a>
 80150e4:	4b4d      	ldr	r3, [pc, #308]	; (801521c <xTaskIncrementTick+0x160>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d00a      	beq.n	8015104 <xTaskIncrementTick+0x48>
 80150ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f2:	f383 8811 	msr	BASEPRI, r3
 80150f6:	f3bf 8f6f 	isb	sy
 80150fa:	f3bf 8f4f 	dsb	sy
 80150fe:	603b      	str	r3, [r7, #0]
 8015100:	bf00      	nop
 8015102:	e7fe      	b.n	8015102 <xTaskIncrementTick+0x46>
 8015104:	4b45      	ldr	r3, [pc, #276]	; (801521c <xTaskIncrementTick+0x160>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	60fb      	str	r3, [r7, #12]
 801510a:	4b45      	ldr	r3, [pc, #276]	; (8015220 <xTaskIncrementTick+0x164>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	4a43      	ldr	r2, [pc, #268]	; (801521c <xTaskIncrementTick+0x160>)
 8015110:	6013      	str	r3, [r2, #0]
 8015112:	4a43      	ldr	r2, [pc, #268]	; (8015220 <xTaskIncrementTick+0x164>)
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	6013      	str	r3, [r2, #0]
 8015118:	4b42      	ldr	r3, [pc, #264]	; (8015224 <xTaskIncrementTick+0x168>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	3301      	adds	r3, #1
 801511e:	4a41      	ldr	r2, [pc, #260]	; (8015224 <xTaskIncrementTick+0x168>)
 8015120:	6013      	str	r3, [r2, #0]
 8015122:	f000 fb77 	bl	8015814 <prvResetNextTaskUnblockTime>
 8015126:	4b40      	ldr	r3, [pc, #256]	; (8015228 <xTaskIncrementTick+0x16c>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	693a      	ldr	r2, [r7, #16]
 801512c:	429a      	cmp	r2, r3
 801512e:	d349      	bcc.n	80151c4 <xTaskIncrementTick+0x108>
 8015130:	4b3a      	ldr	r3, [pc, #232]	; (801521c <xTaskIncrementTick+0x160>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d104      	bne.n	8015144 <xTaskIncrementTick+0x88>
 801513a:	4b3b      	ldr	r3, [pc, #236]	; (8015228 <xTaskIncrementTick+0x16c>)
 801513c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015140:	601a      	str	r2, [r3, #0]
 8015142:	e03f      	b.n	80151c4 <xTaskIncrementTick+0x108>
 8015144:	4b35      	ldr	r3, [pc, #212]	; (801521c <xTaskIncrementTick+0x160>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	68db      	ldr	r3, [r3, #12]
 801514a:	68db      	ldr	r3, [r3, #12]
 801514c:	60bb      	str	r3, [r7, #8]
 801514e:	68bb      	ldr	r3, [r7, #8]
 8015150:	685b      	ldr	r3, [r3, #4]
 8015152:	607b      	str	r3, [r7, #4]
 8015154:	693a      	ldr	r2, [r7, #16]
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	429a      	cmp	r2, r3
 801515a:	d203      	bcs.n	8015164 <xTaskIncrementTick+0xa8>
 801515c:	4a32      	ldr	r2, [pc, #200]	; (8015228 <xTaskIncrementTick+0x16c>)
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6013      	str	r3, [r2, #0]
 8015162:	e02f      	b.n	80151c4 <xTaskIncrementTick+0x108>
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	3304      	adds	r3, #4
 8015168:	4618      	mov	r0, r3
 801516a:	f7fe fd67 	bl	8013c3c <uxListRemove>
 801516e:	68bb      	ldr	r3, [r7, #8]
 8015170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015172:	2b00      	cmp	r3, #0
 8015174:	d004      	beq.n	8015180 <xTaskIncrementTick+0xc4>
 8015176:	68bb      	ldr	r3, [r7, #8]
 8015178:	3318      	adds	r3, #24
 801517a:	4618      	mov	r0, r3
 801517c:	f7fe fd5e 	bl	8013c3c <uxListRemove>
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015184:	4b29      	ldr	r3, [pc, #164]	; (801522c <xTaskIncrementTick+0x170>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	429a      	cmp	r2, r3
 801518a:	d903      	bls.n	8015194 <xTaskIncrementTick+0xd8>
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015190:	4a26      	ldr	r2, [pc, #152]	; (801522c <xTaskIncrementTick+0x170>)
 8015192:	6013      	str	r3, [r2, #0]
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015198:	4613      	mov	r3, r2
 801519a:	009b      	lsls	r3, r3, #2
 801519c:	4413      	add	r3, r2
 801519e:	009b      	lsls	r3, r3, #2
 80151a0:	4a23      	ldr	r2, [pc, #140]	; (8015230 <xTaskIncrementTick+0x174>)
 80151a2:	441a      	add	r2, r3
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	3304      	adds	r3, #4
 80151a8:	4619      	mov	r1, r3
 80151aa:	4610      	mov	r0, r2
 80151ac:	f7fe fce9 	bl	8013b82 <vListInsertEnd>
 80151b0:	68bb      	ldr	r3, [r7, #8]
 80151b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151b4:	4b1f      	ldr	r3, [pc, #124]	; (8015234 <xTaskIncrementTick+0x178>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d3b8      	bcc.n	8015130 <xTaskIncrementTick+0x74>
 80151be:	2301      	movs	r3, #1
 80151c0:	617b      	str	r3, [r7, #20]
 80151c2:	e7b5      	b.n	8015130 <xTaskIncrementTick+0x74>
 80151c4:	4b1b      	ldr	r3, [pc, #108]	; (8015234 <xTaskIncrementTick+0x178>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151ca:	4919      	ldr	r1, [pc, #100]	; (8015230 <xTaskIncrementTick+0x174>)
 80151cc:	4613      	mov	r3, r2
 80151ce:	009b      	lsls	r3, r3, #2
 80151d0:	4413      	add	r3, r2
 80151d2:	009b      	lsls	r3, r3, #2
 80151d4:	440b      	add	r3, r1
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	2b01      	cmp	r3, #1
 80151da:	d901      	bls.n	80151e0 <xTaskIncrementTick+0x124>
 80151dc:	2301      	movs	r3, #1
 80151de:	617b      	str	r3, [r7, #20]
 80151e0:	4b15      	ldr	r3, [pc, #84]	; (8015238 <xTaskIncrementTick+0x17c>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d101      	bne.n	80151ec <xTaskIncrementTick+0x130>
 80151e8:	f7eb f9fc 	bl	80005e4 <vApplicationTickHook>
 80151ec:	4b13      	ldr	r3, [pc, #76]	; (801523c <xTaskIncrementTick+0x180>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d009      	beq.n	8015208 <xTaskIncrementTick+0x14c>
 80151f4:	2301      	movs	r3, #1
 80151f6:	617b      	str	r3, [r7, #20]
 80151f8:	e006      	b.n	8015208 <xTaskIncrementTick+0x14c>
 80151fa:	4b0f      	ldr	r3, [pc, #60]	; (8015238 <xTaskIncrementTick+0x17c>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	3301      	adds	r3, #1
 8015200:	4a0d      	ldr	r2, [pc, #52]	; (8015238 <xTaskIncrementTick+0x17c>)
 8015202:	6013      	str	r3, [r2, #0]
 8015204:	f7eb f9ee 	bl	80005e4 <vApplicationTickHook>
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	4618      	mov	r0, r3
 801520c:	3718      	adds	r7, #24
 801520e:	46bd      	mov	sp, r7
 8015210:	bd80      	pop	{r7, pc}
 8015212:	bf00      	nop
 8015214:	24001d08 	.word	0x24001d08
 8015218:	24001ce4 	.word	0x24001ce4
 801521c:	24001c98 	.word	0x24001c98
 8015220:	24001c9c 	.word	0x24001c9c
 8015224:	24001cf8 	.word	0x24001cf8
 8015228:	24001d00 	.word	0x24001d00
 801522c:	24001ce8 	.word	0x24001ce8
 8015230:	24001810 	.word	0x24001810
 8015234:	2400180c 	.word	0x2400180c
 8015238:	24001cf0 	.word	0x24001cf0
 801523c:	24001cf4 	.word	0x24001cf4

08015240 <vTaskSwitchContext>:
 8015240:	b480      	push	{r7}
 8015242:	b085      	sub	sp, #20
 8015244:	af00      	add	r7, sp, #0
 8015246:	4b28      	ldr	r3, [pc, #160]	; (80152e8 <vTaskSwitchContext+0xa8>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d003      	beq.n	8015256 <vTaskSwitchContext+0x16>
 801524e:	4b27      	ldr	r3, [pc, #156]	; (80152ec <vTaskSwitchContext+0xac>)
 8015250:	2201      	movs	r2, #1
 8015252:	601a      	str	r2, [r3, #0]
 8015254:	e041      	b.n	80152da <vTaskSwitchContext+0x9a>
 8015256:	4b25      	ldr	r3, [pc, #148]	; (80152ec <vTaskSwitchContext+0xac>)
 8015258:	2200      	movs	r2, #0
 801525a:	601a      	str	r2, [r3, #0]
 801525c:	4b24      	ldr	r3, [pc, #144]	; (80152f0 <vTaskSwitchContext+0xb0>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	60fb      	str	r3, [r7, #12]
 8015262:	e010      	b.n	8015286 <vTaskSwitchContext+0x46>
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d10a      	bne.n	8015280 <vTaskSwitchContext+0x40>
 801526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801526e:	f383 8811 	msr	BASEPRI, r3
 8015272:	f3bf 8f6f 	isb	sy
 8015276:	f3bf 8f4f 	dsb	sy
 801527a:	607b      	str	r3, [r7, #4]
 801527c:	bf00      	nop
 801527e:	e7fe      	b.n	801527e <vTaskSwitchContext+0x3e>
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	3b01      	subs	r3, #1
 8015284:	60fb      	str	r3, [r7, #12]
 8015286:	491b      	ldr	r1, [pc, #108]	; (80152f4 <vTaskSwitchContext+0xb4>)
 8015288:	68fa      	ldr	r2, [r7, #12]
 801528a:	4613      	mov	r3, r2
 801528c:	009b      	lsls	r3, r3, #2
 801528e:	4413      	add	r3, r2
 8015290:	009b      	lsls	r3, r3, #2
 8015292:	440b      	add	r3, r1
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d0e4      	beq.n	8015264 <vTaskSwitchContext+0x24>
 801529a:	68fa      	ldr	r2, [r7, #12]
 801529c:	4613      	mov	r3, r2
 801529e:	009b      	lsls	r3, r3, #2
 80152a0:	4413      	add	r3, r2
 80152a2:	009b      	lsls	r3, r3, #2
 80152a4:	4a13      	ldr	r2, [pc, #76]	; (80152f4 <vTaskSwitchContext+0xb4>)
 80152a6:	4413      	add	r3, r2
 80152a8:	60bb      	str	r3, [r7, #8]
 80152aa:	68bb      	ldr	r3, [r7, #8]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	685a      	ldr	r2, [r3, #4]
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	605a      	str	r2, [r3, #4]
 80152b4:	68bb      	ldr	r3, [r7, #8]
 80152b6:	685a      	ldr	r2, [r3, #4]
 80152b8:	68bb      	ldr	r3, [r7, #8]
 80152ba:	3308      	adds	r3, #8
 80152bc:	429a      	cmp	r2, r3
 80152be:	d104      	bne.n	80152ca <vTaskSwitchContext+0x8a>
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	685b      	ldr	r3, [r3, #4]
 80152c4:	685a      	ldr	r2, [r3, #4]
 80152c6:	68bb      	ldr	r3, [r7, #8]
 80152c8:	605a      	str	r2, [r3, #4]
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	685b      	ldr	r3, [r3, #4]
 80152ce:	68db      	ldr	r3, [r3, #12]
 80152d0:	4a09      	ldr	r2, [pc, #36]	; (80152f8 <vTaskSwitchContext+0xb8>)
 80152d2:	6013      	str	r3, [r2, #0]
 80152d4:	4a06      	ldr	r2, [pc, #24]	; (80152f0 <vTaskSwitchContext+0xb0>)
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	6013      	str	r3, [r2, #0]
 80152da:	bf00      	nop
 80152dc:	3714      	adds	r7, #20
 80152de:	46bd      	mov	sp, r7
 80152e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e4:	4770      	bx	lr
 80152e6:	bf00      	nop
 80152e8:	24001d08 	.word	0x24001d08
 80152ec:	24001cf4 	.word	0x24001cf4
 80152f0:	24001ce8 	.word	0x24001ce8
 80152f4:	24001810 	.word	0x24001810
 80152f8:	2400180c 	.word	0x2400180c

080152fc <vTaskPlaceOnEventList>:
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b084      	sub	sp, #16
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
 8015304:	6039      	str	r1, [r7, #0]
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d10a      	bne.n	8015322 <vTaskPlaceOnEventList+0x26>
 801530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015310:	f383 8811 	msr	BASEPRI, r3
 8015314:	f3bf 8f6f 	isb	sy
 8015318:	f3bf 8f4f 	dsb	sy
 801531c:	60fb      	str	r3, [r7, #12]
 801531e:	bf00      	nop
 8015320:	e7fe      	b.n	8015320 <vTaskPlaceOnEventList+0x24>
 8015322:	4b07      	ldr	r3, [pc, #28]	; (8015340 <vTaskPlaceOnEventList+0x44>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	3318      	adds	r3, #24
 8015328:	4619      	mov	r1, r3
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	f7fe fc4d 	bl	8013bca <vListInsert>
 8015330:	2101      	movs	r1, #1
 8015332:	6838      	ldr	r0, [r7, #0]
 8015334:	f000 fb32 	bl	801599c <prvAddCurrentTaskToDelayedList>
 8015338:	bf00      	nop
 801533a:	3710      	adds	r7, #16
 801533c:	46bd      	mov	sp, r7
 801533e:	bd80      	pop	{r7, pc}
 8015340:	2400180c 	.word	0x2400180c

08015344 <vTaskPlaceOnUnorderedEventList>:
 8015344:	b580      	push	{r7, lr}
 8015346:	b086      	sub	sp, #24
 8015348:	af00      	add	r7, sp, #0
 801534a:	60f8      	str	r0, [r7, #12]
 801534c:	60b9      	str	r1, [r7, #8]
 801534e:	607a      	str	r2, [r7, #4]
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d10a      	bne.n	801536c <vTaskPlaceOnUnorderedEventList+0x28>
 8015356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801535a:	f383 8811 	msr	BASEPRI, r3
 801535e:	f3bf 8f6f 	isb	sy
 8015362:	f3bf 8f4f 	dsb	sy
 8015366:	617b      	str	r3, [r7, #20]
 8015368:	bf00      	nop
 801536a:	e7fe      	b.n	801536a <vTaskPlaceOnUnorderedEventList+0x26>
 801536c:	4b11      	ldr	r3, [pc, #68]	; (80153b4 <vTaskPlaceOnUnorderedEventList+0x70>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d10a      	bne.n	801538a <vTaskPlaceOnUnorderedEventList+0x46>
 8015374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015378:	f383 8811 	msr	BASEPRI, r3
 801537c:	f3bf 8f6f 	isb	sy
 8015380:	f3bf 8f4f 	dsb	sy
 8015384:	613b      	str	r3, [r7, #16]
 8015386:	bf00      	nop
 8015388:	e7fe      	b.n	8015388 <vTaskPlaceOnUnorderedEventList+0x44>
 801538a:	4b0b      	ldr	r3, [pc, #44]	; (80153b8 <vTaskPlaceOnUnorderedEventList+0x74>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	68ba      	ldr	r2, [r7, #8]
 8015390:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8015394:	619a      	str	r2, [r3, #24]
 8015396:	4b08      	ldr	r3, [pc, #32]	; (80153b8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	3318      	adds	r3, #24
 801539c:	4619      	mov	r1, r3
 801539e:	68f8      	ldr	r0, [r7, #12]
 80153a0:	f7fe fbef 	bl	8013b82 <vListInsertEnd>
 80153a4:	2101      	movs	r1, #1
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	f000 faf8 	bl	801599c <prvAddCurrentTaskToDelayedList>
 80153ac:	bf00      	nop
 80153ae:	3718      	adds	r7, #24
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}
 80153b4:	24001d08 	.word	0x24001d08
 80153b8:	2400180c 	.word	0x2400180c

080153bc <vTaskPlaceOnEventListRestricted>:
 80153bc:	b580      	push	{r7, lr}
 80153be:	b086      	sub	sp, #24
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	60f8      	str	r0, [r7, #12]
 80153c4:	60b9      	str	r1, [r7, #8]
 80153c6:	607a      	str	r2, [r7, #4]
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d10a      	bne.n	80153e4 <vTaskPlaceOnEventListRestricted+0x28>
 80153ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d2:	f383 8811 	msr	BASEPRI, r3
 80153d6:	f3bf 8f6f 	isb	sy
 80153da:	f3bf 8f4f 	dsb	sy
 80153de:	617b      	str	r3, [r7, #20]
 80153e0:	bf00      	nop
 80153e2:	e7fe      	b.n	80153e2 <vTaskPlaceOnEventListRestricted+0x26>
 80153e4:	4b0a      	ldr	r3, [pc, #40]	; (8015410 <vTaskPlaceOnEventListRestricted+0x54>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	3318      	adds	r3, #24
 80153ea:	4619      	mov	r1, r3
 80153ec:	68f8      	ldr	r0, [r7, #12]
 80153ee:	f7fe fbc8 	bl	8013b82 <vListInsertEnd>
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d002      	beq.n	80153fe <vTaskPlaceOnEventListRestricted+0x42>
 80153f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153fc:	60bb      	str	r3, [r7, #8]
 80153fe:	6879      	ldr	r1, [r7, #4]
 8015400:	68b8      	ldr	r0, [r7, #8]
 8015402:	f000 facb 	bl	801599c <prvAddCurrentTaskToDelayedList>
 8015406:	bf00      	nop
 8015408:	3718      	adds	r7, #24
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}
 801540e:	bf00      	nop
 8015410:	2400180c 	.word	0x2400180c

08015414 <xTaskRemoveFromEventList>:
 8015414:	b580      	push	{r7, lr}
 8015416:	b086      	sub	sp, #24
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	68db      	ldr	r3, [r3, #12]
 8015420:	68db      	ldr	r3, [r3, #12]
 8015422:	613b      	str	r3, [r7, #16]
 8015424:	693b      	ldr	r3, [r7, #16]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d10a      	bne.n	8015440 <xTaskRemoveFromEventList+0x2c>
 801542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801542e:	f383 8811 	msr	BASEPRI, r3
 8015432:	f3bf 8f6f 	isb	sy
 8015436:	f3bf 8f4f 	dsb	sy
 801543a:	60fb      	str	r3, [r7, #12]
 801543c:	bf00      	nop
 801543e:	e7fe      	b.n	801543e <xTaskRemoveFromEventList+0x2a>
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	3318      	adds	r3, #24
 8015444:	4618      	mov	r0, r3
 8015446:	f7fe fbf9 	bl	8013c3c <uxListRemove>
 801544a:	4b1e      	ldr	r3, [pc, #120]	; (80154c4 <xTaskRemoveFromEventList+0xb0>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d11d      	bne.n	801548e <xTaskRemoveFromEventList+0x7a>
 8015452:	693b      	ldr	r3, [r7, #16]
 8015454:	3304      	adds	r3, #4
 8015456:	4618      	mov	r0, r3
 8015458:	f7fe fbf0 	bl	8013c3c <uxListRemove>
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015460:	4b19      	ldr	r3, [pc, #100]	; (80154c8 <xTaskRemoveFromEventList+0xb4>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	429a      	cmp	r2, r3
 8015466:	d903      	bls.n	8015470 <xTaskRemoveFromEventList+0x5c>
 8015468:	693b      	ldr	r3, [r7, #16]
 801546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801546c:	4a16      	ldr	r2, [pc, #88]	; (80154c8 <xTaskRemoveFromEventList+0xb4>)
 801546e:	6013      	str	r3, [r2, #0]
 8015470:	693b      	ldr	r3, [r7, #16]
 8015472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015474:	4613      	mov	r3, r2
 8015476:	009b      	lsls	r3, r3, #2
 8015478:	4413      	add	r3, r2
 801547a:	009b      	lsls	r3, r3, #2
 801547c:	4a13      	ldr	r2, [pc, #76]	; (80154cc <xTaskRemoveFromEventList+0xb8>)
 801547e:	441a      	add	r2, r3
 8015480:	693b      	ldr	r3, [r7, #16]
 8015482:	3304      	adds	r3, #4
 8015484:	4619      	mov	r1, r3
 8015486:	4610      	mov	r0, r2
 8015488:	f7fe fb7b 	bl	8013b82 <vListInsertEnd>
 801548c:	e005      	b.n	801549a <xTaskRemoveFromEventList+0x86>
 801548e:	693b      	ldr	r3, [r7, #16]
 8015490:	3318      	adds	r3, #24
 8015492:	4619      	mov	r1, r3
 8015494:	480e      	ldr	r0, [pc, #56]	; (80154d0 <xTaskRemoveFromEventList+0xbc>)
 8015496:	f7fe fb74 	bl	8013b82 <vListInsertEnd>
 801549a:	693b      	ldr	r3, [r7, #16]
 801549c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801549e:	4b0d      	ldr	r3, [pc, #52]	; (80154d4 <xTaskRemoveFromEventList+0xc0>)
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d905      	bls.n	80154b4 <xTaskRemoveFromEventList+0xa0>
 80154a8:	2301      	movs	r3, #1
 80154aa:	617b      	str	r3, [r7, #20]
 80154ac:	4b0a      	ldr	r3, [pc, #40]	; (80154d8 <xTaskRemoveFromEventList+0xc4>)
 80154ae:	2201      	movs	r2, #1
 80154b0:	601a      	str	r2, [r3, #0]
 80154b2:	e001      	b.n	80154b8 <xTaskRemoveFromEventList+0xa4>
 80154b4:	2300      	movs	r3, #0
 80154b6:	617b      	str	r3, [r7, #20]
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	4618      	mov	r0, r3
 80154bc:	3718      	adds	r7, #24
 80154be:	46bd      	mov	sp, r7
 80154c0:	bd80      	pop	{r7, pc}
 80154c2:	bf00      	nop
 80154c4:	24001d08 	.word	0x24001d08
 80154c8:	24001ce8 	.word	0x24001ce8
 80154cc:	24001810 	.word	0x24001810
 80154d0:	24001ca0 	.word	0x24001ca0
 80154d4:	2400180c 	.word	0x2400180c
 80154d8:	24001cf4 	.word	0x24001cf4

080154dc <vTaskRemoveFromUnorderedEventList>:
 80154dc:	b580      	push	{r7, lr}
 80154de:	b086      	sub	sp, #24
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
 80154e4:	6039      	str	r1, [r7, #0]
 80154e6:	4b29      	ldr	r3, [pc, #164]	; (801558c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d10a      	bne.n	8015504 <vTaskRemoveFromUnorderedEventList+0x28>
 80154ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f2:	f383 8811 	msr	BASEPRI, r3
 80154f6:	f3bf 8f6f 	isb	sy
 80154fa:	f3bf 8f4f 	dsb	sy
 80154fe:	613b      	str	r3, [r7, #16]
 8015500:	bf00      	nop
 8015502:	e7fe      	b.n	8015502 <vTaskRemoveFromUnorderedEventList+0x26>
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	601a      	str	r2, [r3, #0]
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	68db      	ldr	r3, [r3, #12]
 8015512:	617b      	str	r3, [r7, #20]
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d10a      	bne.n	8015530 <vTaskRemoveFromUnorderedEventList+0x54>
 801551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801551e:	f383 8811 	msr	BASEPRI, r3
 8015522:	f3bf 8f6f 	isb	sy
 8015526:	f3bf 8f4f 	dsb	sy
 801552a:	60fb      	str	r3, [r7, #12]
 801552c:	bf00      	nop
 801552e:	e7fe      	b.n	801552e <vTaskRemoveFromUnorderedEventList+0x52>
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f7fe fb83 	bl	8013c3c <uxListRemove>
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	3304      	adds	r3, #4
 801553a:	4618      	mov	r0, r3
 801553c:	f7fe fb7e 	bl	8013c3c <uxListRemove>
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015544:	4b12      	ldr	r3, [pc, #72]	; (8015590 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	429a      	cmp	r2, r3
 801554a:	d903      	bls.n	8015554 <vTaskRemoveFromUnorderedEventList+0x78>
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015550:	4a0f      	ldr	r2, [pc, #60]	; (8015590 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015552:	6013      	str	r3, [r2, #0]
 8015554:	697b      	ldr	r3, [r7, #20]
 8015556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015558:	4613      	mov	r3, r2
 801555a:	009b      	lsls	r3, r3, #2
 801555c:	4413      	add	r3, r2
 801555e:	009b      	lsls	r3, r3, #2
 8015560:	4a0c      	ldr	r2, [pc, #48]	; (8015594 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015562:	441a      	add	r2, r3
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	3304      	adds	r3, #4
 8015568:	4619      	mov	r1, r3
 801556a:	4610      	mov	r0, r2
 801556c:	f7fe fb09 	bl	8013b82 <vListInsertEnd>
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015574:	4b08      	ldr	r3, [pc, #32]	; (8015598 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801557a:	429a      	cmp	r2, r3
 801557c:	d902      	bls.n	8015584 <vTaskRemoveFromUnorderedEventList+0xa8>
 801557e:	4b07      	ldr	r3, [pc, #28]	; (801559c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015580:	2201      	movs	r2, #1
 8015582:	601a      	str	r2, [r3, #0]
 8015584:	bf00      	nop
 8015586:	3718      	adds	r7, #24
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	24001d08 	.word	0x24001d08
 8015590:	24001ce8 	.word	0x24001ce8
 8015594:	24001810 	.word	0x24001810
 8015598:	2400180c 	.word	0x2400180c
 801559c:	24001cf4 	.word	0x24001cf4

080155a0 <vTaskInternalSetTimeOutState>:
 80155a0:	b480      	push	{r7}
 80155a2:	b083      	sub	sp, #12
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
 80155a8:	4b06      	ldr	r3, [pc, #24]	; (80155c4 <vTaskInternalSetTimeOutState+0x24>)
 80155aa:	681a      	ldr	r2, [r3, #0]
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	601a      	str	r2, [r3, #0]
 80155b0:	4b05      	ldr	r3, [pc, #20]	; (80155c8 <vTaskInternalSetTimeOutState+0x28>)
 80155b2:	681a      	ldr	r2, [r3, #0]
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	605a      	str	r2, [r3, #4]
 80155b8:	bf00      	nop
 80155ba:	370c      	adds	r7, #12
 80155bc:	46bd      	mov	sp, r7
 80155be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c2:	4770      	bx	lr
 80155c4:	24001cf8 	.word	0x24001cf8
 80155c8:	24001ce4 	.word	0x24001ce4

080155cc <xTaskCheckForTimeOut>:
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b088      	sub	sp, #32
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
 80155d4:	6039      	str	r1, [r7, #0]
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d10a      	bne.n	80155f2 <xTaskCheckForTimeOut+0x26>
 80155dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155e0:	f383 8811 	msr	BASEPRI, r3
 80155e4:	f3bf 8f6f 	isb	sy
 80155e8:	f3bf 8f4f 	dsb	sy
 80155ec:	613b      	str	r3, [r7, #16]
 80155ee:	bf00      	nop
 80155f0:	e7fe      	b.n	80155f0 <xTaskCheckForTimeOut+0x24>
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d10a      	bne.n	801560e <xTaskCheckForTimeOut+0x42>
 80155f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155fc:	f383 8811 	msr	BASEPRI, r3
 8015600:	f3bf 8f6f 	isb	sy
 8015604:	f3bf 8f4f 	dsb	sy
 8015608:	60fb      	str	r3, [r7, #12]
 801560a:	bf00      	nop
 801560c:	e7fe      	b.n	801560c <xTaskCheckForTimeOut+0x40>
 801560e:	f000 feb1 	bl	8016374 <vPortEnterCritical>
 8015612:	4b1d      	ldr	r3, [pc, #116]	; (8015688 <xTaskCheckForTimeOut+0xbc>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	61bb      	str	r3, [r7, #24]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	685b      	ldr	r3, [r3, #4]
 801561c:	69ba      	ldr	r2, [r7, #24]
 801561e:	1ad3      	subs	r3, r2, r3
 8015620:	617b      	str	r3, [r7, #20]
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801562a:	d102      	bne.n	8015632 <xTaskCheckForTimeOut+0x66>
 801562c:	2300      	movs	r3, #0
 801562e:	61fb      	str	r3, [r7, #28]
 8015630:	e023      	b.n	801567a <xTaskCheckForTimeOut+0xae>
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	681a      	ldr	r2, [r3, #0]
 8015636:	4b15      	ldr	r3, [pc, #84]	; (801568c <xTaskCheckForTimeOut+0xc0>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	429a      	cmp	r2, r3
 801563c:	d007      	beq.n	801564e <xTaskCheckForTimeOut+0x82>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	685b      	ldr	r3, [r3, #4]
 8015642:	69ba      	ldr	r2, [r7, #24]
 8015644:	429a      	cmp	r2, r3
 8015646:	d302      	bcc.n	801564e <xTaskCheckForTimeOut+0x82>
 8015648:	2301      	movs	r3, #1
 801564a:	61fb      	str	r3, [r7, #28]
 801564c:	e015      	b.n	801567a <xTaskCheckForTimeOut+0xae>
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	697a      	ldr	r2, [r7, #20]
 8015654:	429a      	cmp	r2, r3
 8015656:	d20b      	bcs.n	8015670 <xTaskCheckForTimeOut+0xa4>
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	681a      	ldr	r2, [r3, #0]
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	1ad2      	subs	r2, r2, r3
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	601a      	str	r2, [r3, #0]
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f7ff ff9b 	bl	80155a0 <vTaskInternalSetTimeOutState>
 801566a:	2300      	movs	r3, #0
 801566c:	61fb      	str	r3, [r7, #28]
 801566e:	e004      	b.n	801567a <xTaskCheckForTimeOut+0xae>
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	2200      	movs	r2, #0
 8015674:	601a      	str	r2, [r3, #0]
 8015676:	2301      	movs	r3, #1
 8015678:	61fb      	str	r3, [r7, #28]
 801567a:	f000 feab 	bl	80163d4 <vPortExitCritical>
 801567e:	69fb      	ldr	r3, [r7, #28]
 8015680:	4618      	mov	r0, r3
 8015682:	3720      	adds	r7, #32
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	24001ce4 	.word	0x24001ce4
 801568c:	24001cf8 	.word	0x24001cf8

08015690 <vTaskMissedYield>:
 8015690:	b480      	push	{r7}
 8015692:	af00      	add	r7, sp, #0
 8015694:	4b03      	ldr	r3, [pc, #12]	; (80156a4 <vTaskMissedYield+0x14>)
 8015696:	2201      	movs	r2, #1
 8015698:	601a      	str	r2, [r3, #0]
 801569a:	bf00      	nop
 801569c:	46bd      	mov	sp, r7
 801569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a2:	4770      	bx	lr
 80156a4:	24001cf4 	.word	0x24001cf4

080156a8 <prvIdleTask>:
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b082      	sub	sp, #8
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	f000 f852 	bl	8015758 <prvCheckTasksWaitingTermination>
 80156b4:	4b06      	ldr	r3, [pc, #24]	; (80156d0 <prvIdleTask+0x28>)
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	2b01      	cmp	r3, #1
 80156ba:	d9f9      	bls.n	80156b0 <prvIdleTask+0x8>
 80156bc:	4b05      	ldr	r3, [pc, #20]	; (80156d4 <prvIdleTask+0x2c>)
 80156be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156c2:	601a      	str	r2, [r3, #0]
 80156c4:	f3bf 8f4f 	dsb	sy
 80156c8:	f3bf 8f6f 	isb	sy
 80156cc:	e7f0      	b.n	80156b0 <prvIdleTask+0x8>
 80156ce:	bf00      	nop
 80156d0:	24001810 	.word	0x24001810
 80156d4:	e000ed04 	.word	0xe000ed04

080156d8 <prvInitialiseTaskLists>:
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	2300      	movs	r3, #0
 80156e0:	607b      	str	r3, [r7, #4]
 80156e2:	e00c      	b.n	80156fe <prvInitialiseTaskLists+0x26>
 80156e4:	687a      	ldr	r2, [r7, #4]
 80156e6:	4613      	mov	r3, r2
 80156e8:	009b      	lsls	r3, r3, #2
 80156ea:	4413      	add	r3, r2
 80156ec:	009b      	lsls	r3, r3, #2
 80156ee:	4a12      	ldr	r2, [pc, #72]	; (8015738 <prvInitialiseTaskLists+0x60>)
 80156f0:	4413      	add	r3, r2
 80156f2:	4618      	mov	r0, r3
 80156f4:	f7fe fa18 	bl	8013b28 <vListInitialise>
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	3301      	adds	r3, #1
 80156fc:	607b      	str	r3, [r7, #4]
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2b37      	cmp	r3, #55	; 0x37
 8015702:	d9ef      	bls.n	80156e4 <prvInitialiseTaskLists+0xc>
 8015704:	480d      	ldr	r0, [pc, #52]	; (801573c <prvInitialiseTaskLists+0x64>)
 8015706:	f7fe fa0f 	bl	8013b28 <vListInitialise>
 801570a:	480d      	ldr	r0, [pc, #52]	; (8015740 <prvInitialiseTaskLists+0x68>)
 801570c:	f7fe fa0c 	bl	8013b28 <vListInitialise>
 8015710:	480c      	ldr	r0, [pc, #48]	; (8015744 <prvInitialiseTaskLists+0x6c>)
 8015712:	f7fe fa09 	bl	8013b28 <vListInitialise>
 8015716:	480c      	ldr	r0, [pc, #48]	; (8015748 <prvInitialiseTaskLists+0x70>)
 8015718:	f7fe fa06 	bl	8013b28 <vListInitialise>
 801571c:	480b      	ldr	r0, [pc, #44]	; (801574c <prvInitialiseTaskLists+0x74>)
 801571e:	f7fe fa03 	bl	8013b28 <vListInitialise>
 8015722:	4b0b      	ldr	r3, [pc, #44]	; (8015750 <prvInitialiseTaskLists+0x78>)
 8015724:	4a05      	ldr	r2, [pc, #20]	; (801573c <prvInitialiseTaskLists+0x64>)
 8015726:	601a      	str	r2, [r3, #0]
 8015728:	4b0a      	ldr	r3, [pc, #40]	; (8015754 <prvInitialiseTaskLists+0x7c>)
 801572a:	4a05      	ldr	r2, [pc, #20]	; (8015740 <prvInitialiseTaskLists+0x68>)
 801572c:	601a      	str	r2, [r3, #0]
 801572e:	bf00      	nop
 8015730:	3708      	adds	r7, #8
 8015732:	46bd      	mov	sp, r7
 8015734:	bd80      	pop	{r7, pc}
 8015736:	bf00      	nop
 8015738:	24001810 	.word	0x24001810
 801573c:	24001c70 	.word	0x24001c70
 8015740:	24001c84 	.word	0x24001c84
 8015744:	24001ca0 	.word	0x24001ca0
 8015748:	24001cb4 	.word	0x24001cb4
 801574c:	24001ccc 	.word	0x24001ccc
 8015750:	24001c98 	.word	0x24001c98
 8015754:	24001c9c 	.word	0x24001c9c

08015758 <prvCheckTasksWaitingTermination>:
 8015758:	b580      	push	{r7, lr}
 801575a:	b082      	sub	sp, #8
 801575c:	af00      	add	r7, sp, #0
 801575e:	e019      	b.n	8015794 <prvCheckTasksWaitingTermination+0x3c>
 8015760:	f000 fe08 	bl	8016374 <vPortEnterCritical>
 8015764:	4b10      	ldr	r3, [pc, #64]	; (80157a8 <prvCheckTasksWaitingTermination+0x50>)
 8015766:	68db      	ldr	r3, [r3, #12]
 8015768:	68db      	ldr	r3, [r3, #12]
 801576a:	607b      	str	r3, [r7, #4]
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	3304      	adds	r3, #4
 8015770:	4618      	mov	r0, r3
 8015772:	f7fe fa63 	bl	8013c3c <uxListRemove>
 8015776:	4b0d      	ldr	r3, [pc, #52]	; (80157ac <prvCheckTasksWaitingTermination+0x54>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	3b01      	subs	r3, #1
 801577c:	4a0b      	ldr	r2, [pc, #44]	; (80157ac <prvCheckTasksWaitingTermination+0x54>)
 801577e:	6013      	str	r3, [r2, #0]
 8015780:	4b0b      	ldr	r3, [pc, #44]	; (80157b0 <prvCheckTasksWaitingTermination+0x58>)
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	3b01      	subs	r3, #1
 8015786:	4a0a      	ldr	r2, [pc, #40]	; (80157b0 <prvCheckTasksWaitingTermination+0x58>)
 8015788:	6013      	str	r3, [r2, #0]
 801578a:	f000 fe23 	bl	80163d4 <vPortExitCritical>
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f000 f810 	bl	80157b4 <prvDeleteTCB>
 8015794:	4b06      	ldr	r3, [pc, #24]	; (80157b0 <prvCheckTasksWaitingTermination+0x58>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d1e1      	bne.n	8015760 <prvCheckTasksWaitingTermination+0x8>
 801579c:	bf00      	nop
 801579e:	bf00      	nop
 80157a0:	3708      	adds	r7, #8
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	bf00      	nop
 80157a8:	24001cb4 	.word	0x24001cb4
 80157ac:	24001ce0 	.word	0x24001ce0
 80157b0:	24001cc8 	.word	0x24001cc8

080157b4 <prvDeleteTCB>:
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b084      	sub	sp, #16
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d108      	bne.n	80157d8 <prvDeleteTCB+0x24>
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ca:	4618      	mov	r0, r3
 80157cc:	f000 ffc0 	bl	8016750 <vPortFree>
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f000 ffbd 	bl	8016750 <vPortFree>
 80157d6:	e018      	b.n	801580a <prvDeleteTCB+0x56>
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80157de:	2b01      	cmp	r3, #1
 80157e0:	d103      	bne.n	80157ea <prvDeleteTCB+0x36>
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f000 ffb4 	bl	8016750 <vPortFree>
 80157e8:	e00f      	b.n	801580a <prvDeleteTCB+0x56>
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80157f0:	2b02      	cmp	r3, #2
 80157f2:	d00a      	beq.n	801580a <prvDeleteTCB+0x56>
 80157f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157f8:	f383 8811 	msr	BASEPRI, r3
 80157fc:	f3bf 8f6f 	isb	sy
 8015800:	f3bf 8f4f 	dsb	sy
 8015804:	60fb      	str	r3, [r7, #12]
 8015806:	bf00      	nop
 8015808:	e7fe      	b.n	8015808 <prvDeleteTCB+0x54>
 801580a:	bf00      	nop
 801580c:	3710      	adds	r7, #16
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}
	...

08015814 <prvResetNextTaskUnblockTime>:
 8015814:	b480      	push	{r7}
 8015816:	b083      	sub	sp, #12
 8015818:	af00      	add	r7, sp, #0
 801581a:	4b0c      	ldr	r3, [pc, #48]	; (801584c <prvResetNextTaskUnblockTime+0x38>)
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d104      	bne.n	801582e <prvResetNextTaskUnblockTime+0x1a>
 8015824:	4b0a      	ldr	r3, [pc, #40]	; (8015850 <prvResetNextTaskUnblockTime+0x3c>)
 8015826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801582a:	601a      	str	r2, [r3, #0]
 801582c:	e008      	b.n	8015840 <prvResetNextTaskUnblockTime+0x2c>
 801582e:	4b07      	ldr	r3, [pc, #28]	; (801584c <prvResetNextTaskUnblockTime+0x38>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	68db      	ldr	r3, [r3, #12]
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	607b      	str	r3, [r7, #4]
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	685b      	ldr	r3, [r3, #4]
 801583c:	4a04      	ldr	r2, [pc, #16]	; (8015850 <prvResetNextTaskUnblockTime+0x3c>)
 801583e:	6013      	str	r3, [r2, #0]
 8015840:	bf00      	nop
 8015842:	370c      	adds	r7, #12
 8015844:	46bd      	mov	sp, r7
 8015846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584a:	4770      	bx	lr
 801584c:	24001c98 	.word	0x24001c98
 8015850:	24001d00 	.word	0x24001d00

08015854 <xTaskGetSchedulerState>:
 8015854:	b480      	push	{r7}
 8015856:	b083      	sub	sp, #12
 8015858:	af00      	add	r7, sp, #0
 801585a:	4b0b      	ldr	r3, [pc, #44]	; (8015888 <xTaskGetSchedulerState+0x34>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d102      	bne.n	8015868 <xTaskGetSchedulerState+0x14>
 8015862:	2301      	movs	r3, #1
 8015864:	607b      	str	r3, [r7, #4]
 8015866:	e008      	b.n	801587a <xTaskGetSchedulerState+0x26>
 8015868:	4b08      	ldr	r3, [pc, #32]	; (801588c <xTaskGetSchedulerState+0x38>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d102      	bne.n	8015876 <xTaskGetSchedulerState+0x22>
 8015870:	2302      	movs	r3, #2
 8015872:	607b      	str	r3, [r7, #4]
 8015874:	e001      	b.n	801587a <xTaskGetSchedulerState+0x26>
 8015876:	2300      	movs	r3, #0
 8015878:	607b      	str	r3, [r7, #4]
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	4618      	mov	r0, r3
 801587e:	370c      	adds	r7, #12
 8015880:	46bd      	mov	sp, r7
 8015882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015886:	4770      	bx	lr
 8015888:	24001cec 	.word	0x24001cec
 801588c:	24001d08 	.word	0x24001d08

08015890 <xTaskPriorityDisinherit>:
 8015890:	b580      	push	{r7, lr}
 8015892:	b086      	sub	sp, #24
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	613b      	str	r3, [r7, #16]
 801589c:	2300      	movs	r3, #0
 801589e:	617b      	str	r3, [r7, #20]
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d056      	beq.n	8015954 <xTaskPriorityDisinherit+0xc4>
 80158a6:	4b2e      	ldr	r3, [pc, #184]	; (8015960 <xTaskPriorityDisinherit+0xd0>)
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	693a      	ldr	r2, [r7, #16]
 80158ac:	429a      	cmp	r2, r3
 80158ae:	d00a      	beq.n	80158c6 <xTaskPriorityDisinherit+0x36>
 80158b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158b4:	f383 8811 	msr	BASEPRI, r3
 80158b8:	f3bf 8f6f 	isb	sy
 80158bc:	f3bf 8f4f 	dsb	sy
 80158c0:	60fb      	str	r3, [r7, #12]
 80158c2:	bf00      	nop
 80158c4:	e7fe      	b.n	80158c4 <xTaskPriorityDisinherit+0x34>
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d10a      	bne.n	80158e4 <xTaskPriorityDisinherit+0x54>
 80158ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158d2:	f383 8811 	msr	BASEPRI, r3
 80158d6:	f3bf 8f6f 	isb	sy
 80158da:	f3bf 8f4f 	dsb	sy
 80158de:	60bb      	str	r3, [r7, #8]
 80158e0:	bf00      	nop
 80158e2:	e7fe      	b.n	80158e2 <xTaskPriorityDisinherit+0x52>
 80158e4:	693b      	ldr	r3, [r7, #16]
 80158e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158e8:	1e5a      	subs	r2, r3, #1
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	651a      	str	r2, [r3, #80]	; 0x50
 80158ee:	693b      	ldr	r3, [r7, #16]
 80158f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158f2:	693b      	ldr	r3, [r7, #16]
 80158f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80158f6:	429a      	cmp	r2, r3
 80158f8:	d02c      	beq.n	8015954 <xTaskPriorityDisinherit+0xc4>
 80158fa:	693b      	ldr	r3, [r7, #16]
 80158fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d128      	bne.n	8015954 <xTaskPriorityDisinherit+0xc4>
 8015902:	693b      	ldr	r3, [r7, #16]
 8015904:	3304      	adds	r3, #4
 8015906:	4618      	mov	r0, r3
 8015908:	f7fe f998 	bl	8013c3c <uxListRemove>
 801590c:	693b      	ldr	r3, [r7, #16]
 801590e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015910:	693b      	ldr	r3, [r7, #16]
 8015912:	62da      	str	r2, [r3, #44]	; 0x2c
 8015914:	693b      	ldr	r3, [r7, #16]
 8015916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015918:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	619a      	str	r2, [r3, #24]
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015924:	4b0f      	ldr	r3, [pc, #60]	; (8015964 <xTaskPriorityDisinherit+0xd4>)
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	429a      	cmp	r2, r3
 801592a:	d903      	bls.n	8015934 <xTaskPriorityDisinherit+0xa4>
 801592c:	693b      	ldr	r3, [r7, #16]
 801592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015930:	4a0c      	ldr	r2, [pc, #48]	; (8015964 <xTaskPriorityDisinherit+0xd4>)
 8015932:	6013      	str	r3, [r2, #0]
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015938:	4613      	mov	r3, r2
 801593a:	009b      	lsls	r3, r3, #2
 801593c:	4413      	add	r3, r2
 801593e:	009b      	lsls	r3, r3, #2
 8015940:	4a09      	ldr	r2, [pc, #36]	; (8015968 <xTaskPriorityDisinherit+0xd8>)
 8015942:	441a      	add	r2, r3
 8015944:	693b      	ldr	r3, [r7, #16]
 8015946:	3304      	adds	r3, #4
 8015948:	4619      	mov	r1, r3
 801594a:	4610      	mov	r0, r2
 801594c:	f7fe f919 	bl	8013b82 <vListInsertEnd>
 8015950:	2301      	movs	r3, #1
 8015952:	617b      	str	r3, [r7, #20]
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	4618      	mov	r0, r3
 8015958:	3718      	adds	r7, #24
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
 801595e:	bf00      	nop
 8015960:	2400180c 	.word	0x2400180c
 8015964:	24001ce8 	.word	0x24001ce8
 8015968:	24001810 	.word	0x24001810

0801596c <uxTaskResetEventItemValue>:
 801596c:	b480      	push	{r7}
 801596e:	b083      	sub	sp, #12
 8015970:	af00      	add	r7, sp, #0
 8015972:	4b09      	ldr	r3, [pc, #36]	; (8015998 <uxTaskResetEventItemValue+0x2c>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	699b      	ldr	r3, [r3, #24]
 8015978:	607b      	str	r3, [r7, #4]
 801597a:	4b07      	ldr	r3, [pc, #28]	; (8015998 <uxTaskResetEventItemValue+0x2c>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015980:	4b05      	ldr	r3, [pc, #20]	; (8015998 <uxTaskResetEventItemValue+0x2c>)
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015988:	619a      	str	r2, [r3, #24]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	4618      	mov	r0, r3
 801598e:	370c      	adds	r7, #12
 8015990:	46bd      	mov	sp, r7
 8015992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015996:	4770      	bx	lr
 8015998:	2400180c 	.word	0x2400180c

0801599c <prvAddCurrentTaskToDelayedList>:
 801599c:	b580      	push	{r7, lr}
 801599e:	b084      	sub	sp, #16
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	6039      	str	r1, [r7, #0]
 80159a6:	4b21      	ldr	r3, [pc, #132]	; (8015a2c <prvAddCurrentTaskToDelayedList+0x90>)
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	60fb      	str	r3, [r7, #12]
 80159ac:	4b20      	ldr	r3, [pc, #128]	; (8015a30 <prvAddCurrentTaskToDelayedList+0x94>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	3304      	adds	r3, #4
 80159b2:	4618      	mov	r0, r3
 80159b4:	f7fe f942 	bl	8013c3c <uxListRemove>
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80159be:	d10a      	bne.n	80159d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d007      	beq.n	80159d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80159c6:	4b1a      	ldr	r3, [pc, #104]	; (8015a30 <prvAddCurrentTaskToDelayedList+0x94>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	3304      	adds	r3, #4
 80159cc:	4619      	mov	r1, r3
 80159ce:	4819      	ldr	r0, [pc, #100]	; (8015a34 <prvAddCurrentTaskToDelayedList+0x98>)
 80159d0:	f7fe f8d7 	bl	8013b82 <vListInsertEnd>
 80159d4:	e026      	b.n	8015a24 <prvAddCurrentTaskToDelayedList+0x88>
 80159d6:	68fa      	ldr	r2, [r7, #12]
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	4413      	add	r3, r2
 80159dc:	60bb      	str	r3, [r7, #8]
 80159de:	4b14      	ldr	r3, [pc, #80]	; (8015a30 <prvAddCurrentTaskToDelayedList+0x94>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	68ba      	ldr	r2, [r7, #8]
 80159e4:	605a      	str	r2, [r3, #4]
 80159e6:	68ba      	ldr	r2, [r7, #8]
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	429a      	cmp	r2, r3
 80159ec:	d209      	bcs.n	8015a02 <prvAddCurrentTaskToDelayedList+0x66>
 80159ee:	4b12      	ldr	r3, [pc, #72]	; (8015a38 <prvAddCurrentTaskToDelayedList+0x9c>)
 80159f0:	681a      	ldr	r2, [r3, #0]
 80159f2:	4b0f      	ldr	r3, [pc, #60]	; (8015a30 <prvAddCurrentTaskToDelayedList+0x94>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	3304      	adds	r3, #4
 80159f8:	4619      	mov	r1, r3
 80159fa:	4610      	mov	r0, r2
 80159fc:	f7fe f8e5 	bl	8013bca <vListInsert>
 8015a00:	e010      	b.n	8015a24 <prvAddCurrentTaskToDelayedList+0x88>
 8015a02:	4b0e      	ldr	r3, [pc, #56]	; (8015a3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8015a04:	681a      	ldr	r2, [r3, #0]
 8015a06:	4b0a      	ldr	r3, [pc, #40]	; (8015a30 <prvAddCurrentTaskToDelayedList+0x94>)
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	3304      	adds	r3, #4
 8015a0c:	4619      	mov	r1, r3
 8015a0e:	4610      	mov	r0, r2
 8015a10:	f7fe f8db 	bl	8013bca <vListInsert>
 8015a14:	4b0a      	ldr	r3, [pc, #40]	; (8015a40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	68ba      	ldr	r2, [r7, #8]
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d202      	bcs.n	8015a24 <prvAddCurrentTaskToDelayedList+0x88>
 8015a1e:	4a08      	ldr	r2, [pc, #32]	; (8015a40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	6013      	str	r3, [r2, #0]
 8015a24:	bf00      	nop
 8015a26:	3710      	adds	r7, #16
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}
 8015a2c:	24001ce4 	.word	0x24001ce4
 8015a30:	2400180c 	.word	0x2400180c
 8015a34:	24001ccc 	.word	0x24001ccc
 8015a38:	24001c9c 	.word	0x24001c9c
 8015a3c:	24001c98 	.word	0x24001c98
 8015a40:	24001d00 	.word	0x24001d00

08015a44 <xTimerCreateTimerTask>:
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b08a      	sub	sp, #40	; 0x28
 8015a48:	af04      	add	r7, sp, #16
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	617b      	str	r3, [r7, #20]
 8015a4e:	f000 fb07 	bl	8016060 <prvCheckForValidListAndQueue>
 8015a52:	4b1c      	ldr	r3, [pc, #112]	; (8015ac4 <xTimerCreateTimerTask+0x80>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d021      	beq.n	8015a9e <xTimerCreateTimerTask+0x5a>
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	60fb      	str	r3, [r7, #12]
 8015a5e:	2300      	movs	r3, #0
 8015a60:	60bb      	str	r3, [r7, #8]
 8015a62:	1d3a      	adds	r2, r7, #4
 8015a64:	f107 0108 	add.w	r1, r7, #8
 8015a68:	f107 030c 	add.w	r3, r7, #12
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7fd fdd5 	bl	801361c <vApplicationGetTimerTaskMemory>
 8015a72:	6879      	ldr	r1, [r7, #4]
 8015a74:	68bb      	ldr	r3, [r7, #8]
 8015a76:	68fa      	ldr	r2, [r7, #12]
 8015a78:	9202      	str	r2, [sp, #8]
 8015a7a:	9301      	str	r3, [sp, #4]
 8015a7c:	2302      	movs	r3, #2
 8015a7e:	9300      	str	r3, [sp, #0]
 8015a80:	2300      	movs	r3, #0
 8015a82:	460a      	mov	r2, r1
 8015a84:	4910      	ldr	r1, [pc, #64]	; (8015ac8 <xTimerCreateTimerTask+0x84>)
 8015a86:	4811      	ldr	r0, [pc, #68]	; (8015acc <xTimerCreateTimerTask+0x88>)
 8015a88:	f7fe fea8 	bl	80147dc <xTaskCreateStatic>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	4a10      	ldr	r2, [pc, #64]	; (8015ad0 <xTimerCreateTimerTask+0x8c>)
 8015a90:	6013      	str	r3, [r2, #0]
 8015a92:	4b0f      	ldr	r3, [pc, #60]	; (8015ad0 <xTimerCreateTimerTask+0x8c>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d001      	beq.n	8015a9e <xTimerCreateTimerTask+0x5a>
 8015a9a:	2301      	movs	r3, #1
 8015a9c:	617b      	str	r3, [r7, #20]
 8015a9e:	697b      	ldr	r3, [r7, #20]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d10a      	bne.n	8015aba <xTimerCreateTimerTask+0x76>
 8015aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aa8:	f383 8811 	msr	BASEPRI, r3
 8015aac:	f3bf 8f6f 	isb	sy
 8015ab0:	f3bf 8f4f 	dsb	sy
 8015ab4:	613b      	str	r3, [r7, #16]
 8015ab6:	bf00      	nop
 8015ab8:	e7fe      	b.n	8015ab8 <xTimerCreateTimerTask+0x74>
 8015aba:	697b      	ldr	r3, [r7, #20]
 8015abc:	4618      	mov	r0, r3
 8015abe:	3718      	adds	r7, #24
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}
 8015ac4:	24001d3c 	.word	0x24001d3c
 8015ac8:	080176a0 	.word	0x080176a0
 8015acc:	08015c09 	.word	0x08015c09
 8015ad0:	24001d40 	.word	0x24001d40

08015ad4 <xTimerGenericCommand>:
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b08a      	sub	sp, #40	; 0x28
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	60f8      	str	r0, [r7, #12]
 8015adc:	60b9      	str	r1, [r7, #8]
 8015ade:	607a      	str	r2, [r7, #4]
 8015ae0:	603b      	str	r3, [r7, #0]
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d10a      	bne.n	8015b02 <xTimerGenericCommand+0x2e>
 8015aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af0:	f383 8811 	msr	BASEPRI, r3
 8015af4:	f3bf 8f6f 	isb	sy
 8015af8:	f3bf 8f4f 	dsb	sy
 8015afc:	623b      	str	r3, [r7, #32]
 8015afe:	bf00      	nop
 8015b00:	e7fe      	b.n	8015b00 <xTimerGenericCommand+0x2c>
 8015b02:	4b1a      	ldr	r3, [pc, #104]	; (8015b6c <xTimerGenericCommand+0x98>)
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d02a      	beq.n	8015b60 <xTimerGenericCommand+0x8c>
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	613b      	str	r3, [r7, #16]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	617b      	str	r3, [r7, #20]
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	61bb      	str	r3, [r7, #24]
 8015b16:	68bb      	ldr	r3, [r7, #8]
 8015b18:	2b05      	cmp	r3, #5
 8015b1a:	dc18      	bgt.n	8015b4e <xTimerGenericCommand+0x7a>
 8015b1c:	f7ff fe9a 	bl	8015854 <xTaskGetSchedulerState>
 8015b20:	4603      	mov	r3, r0
 8015b22:	2b02      	cmp	r3, #2
 8015b24:	d109      	bne.n	8015b3a <xTimerGenericCommand+0x66>
 8015b26:	4b11      	ldr	r3, [pc, #68]	; (8015b6c <xTimerGenericCommand+0x98>)
 8015b28:	6818      	ldr	r0, [r3, #0]
 8015b2a:	f107 0110 	add.w	r1, r7, #16
 8015b2e:	2300      	movs	r3, #0
 8015b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b32:	f7fe f9eb 	bl	8013f0c <xQueueGenericSend>
 8015b36:	6278      	str	r0, [r7, #36]	; 0x24
 8015b38:	e012      	b.n	8015b60 <xTimerGenericCommand+0x8c>
 8015b3a:	4b0c      	ldr	r3, [pc, #48]	; (8015b6c <xTimerGenericCommand+0x98>)
 8015b3c:	6818      	ldr	r0, [r3, #0]
 8015b3e:	f107 0110 	add.w	r1, r7, #16
 8015b42:	2300      	movs	r3, #0
 8015b44:	2200      	movs	r2, #0
 8015b46:	f7fe f9e1 	bl	8013f0c <xQueueGenericSend>
 8015b4a:	6278      	str	r0, [r7, #36]	; 0x24
 8015b4c:	e008      	b.n	8015b60 <xTimerGenericCommand+0x8c>
 8015b4e:	4b07      	ldr	r3, [pc, #28]	; (8015b6c <xTimerGenericCommand+0x98>)
 8015b50:	6818      	ldr	r0, [r3, #0]
 8015b52:	f107 0110 	add.w	r1, r7, #16
 8015b56:	2300      	movs	r3, #0
 8015b58:	683a      	ldr	r2, [r7, #0]
 8015b5a:	f7fe fad5 	bl	8014108 <xQueueGenericSendFromISR>
 8015b5e:	6278      	str	r0, [r7, #36]	; 0x24
 8015b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b62:	4618      	mov	r0, r3
 8015b64:	3728      	adds	r7, #40	; 0x28
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bd80      	pop	{r7, pc}
 8015b6a:	bf00      	nop
 8015b6c:	24001d3c 	.word	0x24001d3c

08015b70 <prvProcessExpiredTimer>:
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b088      	sub	sp, #32
 8015b74:	af02      	add	r7, sp, #8
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	6039      	str	r1, [r7, #0]
 8015b7a:	4b22      	ldr	r3, [pc, #136]	; (8015c04 <prvProcessExpiredTimer+0x94>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	68db      	ldr	r3, [r3, #12]
 8015b80:	68db      	ldr	r3, [r3, #12]
 8015b82:	617b      	str	r3, [r7, #20]
 8015b84:	697b      	ldr	r3, [r7, #20]
 8015b86:	3304      	adds	r3, #4
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7fe f857 	bl	8013c3c <uxListRemove>
 8015b8e:	697b      	ldr	r3, [r7, #20]
 8015b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b94:	f003 0304 	and.w	r3, r3, #4
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d022      	beq.n	8015be2 <prvProcessExpiredTimer+0x72>
 8015b9c:	697b      	ldr	r3, [r7, #20]
 8015b9e:	699a      	ldr	r2, [r3, #24]
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	18d1      	adds	r1, r2, r3
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	683a      	ldr	r2, [r7, #0]
 8015ba8:	6978      	ldr	r0, [r7, #20]
 8015baa:	f000 f8d1 	bl	8015d50 <prvInsertTimerInActiveList>
 8015bae:	4603      	mov	r3, r0
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d01f      	beq.n	8015bf4 <prvProcessExpiredTimer+0x84>
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	9300      	str	r3, [sp, #0]
 8015bb8:	2300      	movs	r3, #0
 8015bba:	687a      	ldr	r2, [r7, #4]
 8015bbc:	2100      	movs	r1, #0
 8015bbe:	6978      	ldr	r0, [r7, #20]
 8015bc0:	f7ff ff88 	bl	8015ad4 <xTimerGenericCommand>
 8015bc4:	6138      	str	r0, [r7, #16]
 8015bc6:	693b      	ldr	r3, [r7, #16]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d113      	bne.n	8015bf4 <prvProcessExpiredTimer+0x84>
 8015bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd0:	f383 8811 	msr	BASEPRI, r3
 8015bd4:	f3bf 8f6f 	isb	sy
 8015bd8:	f3bf 8f4f 	dsb	sy
 8015bdc:	60fb      	str	r3, [r7, #12]
 8015bde:	bf00      	nop
 8015be0:	e7fe      	b.n	8015be0 <prvProcessExpiredTimer+0x70>
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015be8:	f023 0301 	bic.w	r3, r3, #1
 8015bec:	b2da      	uxtb	r2, r3
 8015bee:	697b      	ldr	r3, [r7, #20]
 8015bf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	6a1b      	ldr	r3, [r3, #32]
 8015bf8:	6978      	ldr	r0, [r7, #20]
 8015bfa:	4798      	blx	r3
 8015bfc:	bf00      	nop
 8015bfe:	3718      	adds	r7, #24
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}
 8015c04:	24001d34 	.word	0x24001d34

08015c08 <prvTimerTask>:
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b084      	sub	sp, #16
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
 8015c10:	f107 0308 	add.w	r3, r7, #8
 8015c14:	4618      	mov	r0, r3
 8015c16:	f000 f857 	bl	8015cc8 <prvGetNextExpireTime>
 8015c1a:	60f8      	str	r0, [r7, #12]
 8015c1c:	68bb      	ldr	r3, [r7, #8]
 8015c1e:	4619      	mov	r1, r3
 8015c20:	68f8      	ldr	r0, [r7, #12]
 8015c22:	f000 f803 	bl	8015c2c <prvProcessTimerOrBlockTask>
 8015c26:	f000 f8d5 	bl	8015dd4 <prvProcessReceivedCommands>
 8015c2a:	e7f1      	b.n	8015c10 <prvTimerTask+0x8>

08015c2c <prvProcessTimerOrBlockTask>:
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b084      	sub	sp, #16
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	6039      	str	r1, [r7, #0]
 8015c36:	f7ff f985 	bl	8014f44 <vTaskSuspendAll>
 8015c3a:	f107 0308 	add.w	r3, r7, #8
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f000 f866 	bl	8015d10 <prvSampleTimeNow>
 8015c44:	60f8      	str	r0, [r7, #12]
 8015c46:	68bb      	ldr	r3, [r7, #8]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d130      	bne.n	8015cae <prvProcessTimerOrBlockTask+0x82>
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d10a      	bne.n	8015c68 <prvProcessTimerOrBlockTask+0x3c>
 8015c52:	687a      	ldr	r2, [r7, #4]
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d806      	bhi.n	8015c68 <prvProcessTimerOrBlockTask+0x3c>
 8015c5a:	f7ff f981 	bl	8014f60 <xTaskResumeAll>
 8015c5e:	68f9      	ldr	r1, [r7, #12]
 8015c60:	6878      	ldr	r0, [r7, #4]
 8015c62:	f7ff ff85 	bl	8015b70 <prvProcessExpiredTimer>
 8015c66:	e024      	b.n	8015cb2 <prvProcessTimerOrBlockTask+0x86>
 8015c68:	683b      	ldr	r3, [r7, #0]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d008      	beq.n	8015c80 <prvProcessTimerOrBlockTask+0x54>
 8015c6e:	4b13      	ldr	r3, [pc, #76]	; (8015cbc <prvProcessTimerOrBlockTask+0x90>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d101      	bne.n	8015c7c <prvProcessTimerOrBlockTask+0x50>
 8015c78:	2301      	movs	r3, #1
 8015c7a:	e000      	b.n	8015c7e <prvProcessTimerOrBlockTask+0x52>
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	603b      	str	r3, [r7, #0]
 8015c80:	4b0f      	ldr	r3, [pc, #60]	; (8015cc0 <prvProcessTimerOrBlockTask+0x94>)
 8015c82:	6818      	ldr	r0, [r3, #0]
 8015c84:	687a      	ldr	r2, [r7, #4]
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	1ad3      	subs	r3, r2, r3
 8015c8a:	683a      	ldr	r2, [r7, #0]
 8015c8c:	4619      	mov	r1, r3
 8015c8e:	f7fe fd71 	bl	8014774 <vQueueWaitForMessageRestricted>
 8015c92:	f7ff f965 	bl	8014f60 <xTaskResumeAll>
 8015c96:	4603      	mov	r3, r0
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d10a      	bne.n	8015cb2 <prvProcessTimerOrBlockTask+0x86>
 8015c9c:	4b09      	ldr	r3, [pc, #36]	; (8015cc4 <prvProcessTimerOrBlockTask+0x98>)
 8015c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ca2:	601a      	str	r2, [r3, #0]
 8015ca4:	f3bf 8f4f 	dsb	sy
 8015ca8:	f3bf 8f6f 	isb	sy
 8015cac:	e001      	b.n	8015cb2 <prvProcessTimerOrBlockTask+0x86>
 8015cae:	f7ff f957 	bl	8014f60 <xTaskResumeAll>
 8015cb2:	bf00      	nop
 8015cb4:	3710      	adds	r7, #16
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}
 8015cba:	bf00      	nop
 8015cbc:	24001d38 	.word	0x24001d38
 8015cc0:	24001d3c 	.word	0x24001d3c
 8015cc4:	e000ed04 	.word	0xe000ed04

08015cc8 <prvGetNextExpireTime>:
 8015cc8:	b480      	push	{r7}
 8015cca:	b085      	sub	sp, #20
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	4b0e      	ldr	r3, [pc, #56]	; (8015d0c <prvGetNextExpireTime+0x44>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d101      	bne.n	8015cde <prvGetNextExpireTime+0x16>
 8015cda:	2201      	movs	r2, #1
 8015cdc:	e000      	b.n	8015ce0 <prvGetNextExpireTime+0x18>
 8015cde:	2200      	movs	r2, #0
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	601a      	str	r2, [r3, #0]
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d105      	bne.n	8015cf8 <prvGetNextExpireTime+0x30>
 8015cec:	4b07      	ldr	r3, [pc, #28]	; (8015d0c <prvGetNextExpireTime+0x44>)
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	68db      	ldr	r3, [r3, #12]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	60fb      	str	r3, [r7, #12]
 8015cf6:	e001      	b.n	8015cfc <prvGetNextExpireTime+0x34>
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	60fb      	str	r3, [r7, #12]
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	3714      	adds	r7, #20
 8015d02:	46bd      	mov	sp, r7
 8015d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d08:	4770      	bx	lr
 8015d0a:	bf00      	nop
 8015d0c:	24001d34 	.word	0x24001d34

08015d10 <prvSampleTimeNow>:
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
 8015d18:	f7ff f9c0 	bl	801509c <xTaskGetTickCount>
 8015d1c:	60f8      	str	r0, [r7, #12]
 8015d1e:	4b0b      	ldr	r3, [pc, #44]	; (8015d4c <prvSampleTimeNow+0x3c>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	68fa      	ldr	r2, [r7, #12]
 8015d24:	429a      	cmp	r2, r3
 8015d26:	d205      	bcs.n	8015d34 <prvSampleTimeNow+0x24>
 8015d28:	f000 f936 	bl	8015f98 <prvSwitchTimerLists>
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2201      	movs	r2, #1
 8015d30:	601a      	str	r2, [r3, #0]
 8015d32:	e002      	b.n	8015d3a <prvSampleTimeNow+0x2a>
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	2200      	movs	r2, #0
 8015d38:	601a      	str	r2, [r3, #0]
 8015d3a:	4a04      	ldr	r2, [pc, #16]	; (8015d4c <prvSampleTimeNow+0x3c>)
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	6013      	str	r3, [r2, #0]
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	4618      	mov	r0, r3
 8015d44:	3710      	adds	r7, #16
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}
 8015d4a:	bf00      	nop
 8015d4c:	24001d44 	.word	0x24001d44

08015d50 <prvInsertTimerInActiveList>:
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b086      	sub	sp, #24
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	60f8      	str	r0, [r7, #12]
 8015d58:	60b9      	str	r1, [r7, #8]
 8015d5a:	607a      	str	r2, [r7, #4]
 8015d5c:	603b      	str	r3, [r7, #0]
 8015d5e:	2300      	movs	r3, #0
 8015d60:	617b      	str	r3, [r7, #20]
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	68ba      	ldr	r2, [r7, #8]
 8015d66:	605a      	str	r2, [r3, #4]
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	68fa      	ldr	r2, [r7, #12]
 8015d6c:	611a      	str	r2, [r3, #16]
 8015d6e:	68ba      	ldr	r2, [r7, #8]
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d812      	bhi.n	8015d9c <prvInsertTimerInActiveList+0x4c>
 8015d76:	687a      	ldr	r2, [r7, #4]
 8015d78:	683b      	ldr	r3, [r7, #0]
 8015d7a:	1ad2      	subs	r2, r2, r3
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	699b      	ldr	r3, [r3, #24]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d302      	bcc.n	8015d8a <prvInsertTimerInActiveList+0x3a>
 8015d84:	2301      	movs	r3, #1
 8015d86:	617b      	str	r3, [r7, #20]
 8015d88:	e01b      	b.n	8015dc2 <prvInsertTimerInActiveList+0x72>
 8015d8a:	4b10      	ldr	r3, [pc, #64]	; (8015dcc <prvInsertTimerInActiveList+0x7c>)
 8015d8c:	681a      	ldr	r2, [r3, #0]
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	3304      	adds	r3, #4
 8015d92:	4619      	mov	r1, r3
 8015d94:	4610      	mov	r0, r2
 8015d96:	f7fd ff18 	bl	8013bca <vListInsert>
 8015d9a:	e012      	b.n	8015dc2 <prvInsertTimerInActiveList+0x72>
 8015d9c:	687a      	ldr	r2, [r7, #4]
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	429a      	cmp	r2, r3
 8015da2:	d206      	bcs.n	8015db2 <prvInsertTimerInActiveList+0x62>
 8015da4:	68ba      	ldr	r2, [r7, #8]
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d302      	bcc.n	8015db2 <prvInsertTimerInActiveList+0x62>
 8015dac:	2301      	movs	r3, #1
 8015dae:	617b      	str	r3, [r7, #20]
 8015db0:	e007      	b.n	8015dc2 <prvInsertTimerInActiveList+0x72>
 8015db2:	4b07      	ldr	r3, [pc, #28]	; (8015dd0 <prvInsertTimerInActiveList+0x80>)
 8015db4:	681a      	ldr	r2, [r3, #0]
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	3304      	adds	r3, #4
 8015dba:	4619      	mov	r1, r3
 8015dbc:	4610      	mov	r0, r2
 8015dbe:	f7fd ff04 	bl	8013bca <vListInsert>
 8015dc2:	697b      	ldr	r3, [r7, #20]
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	3718      	adds	r7, #24
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	24001d38 	.word	0x24001d38
 8015dd0:	24001d34 	.word	0x24001d34

08015dd4 <prvProcessReceivedCommands>:
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b08e      	sub	sp, #56	; 0x38
 8015dd8:	af02      	add	r7, sp, #8
 8015dda:	e0ca      	b.n	8015f72 <prvProcessReceivedCommands+0x19e>
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	da18      	bge.n	8015e14 <prvProcessReceivedCommands+0x40>
 8015de2:	1d3b      	adds	r3, r7, #4
 8015de4:	3304      	adds	r3, #4
 8015de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d10a      	bne.n	8015e04 <prvProcessReceivedCommands+0x30>
 8015dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df2:	f383 8811 	msr	BASEPRI, r3
 8015df6:	f3bf 8f6f 	isb	sy
 8015dfa:	f3bf 8f4f 	dsb	sy
 8015dfe:	61fb      	str	r3, [r7, #28]
 8015e00:	bf00      	nop
 8015e02:	e7fe      	b.n	8015e02 <prvProcessReceivedCommands+0x2e>
 8015e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e0a:	6850      	ldr	r0, [r2, #4]
 8015e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e0e:	6892      	ldr	r2, [r2, #8]
 8015e10:	4611      	mov	r1, r2
 8015e12:	4798      	blx	r3
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	f2c0 80aa 	blt.w	8015f70 <prvProcessReceivedCommands+0x19c>
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e22:	695b      	ldr	r3, [r3, #20]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d004      	beq.n	8015e32 <prvProcessReceivedCommands+0x5e>
 8015e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e2a:	3304      	adds	r3, #4
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f7fd ff05 	bl	8013c3c <uxListRemove>
 8015e32:	463b      	mov	r3, r7
 8015e34:	4618      	mov	r0, r3
 8015e36:	f7ff ff6b 	bl	8015d10 <prvSampleTimeNow>
 8015e3a:	6278      	str	r0, [r7, #36]	; 0x24
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	2b09      	cmp	r3, #9
 8015e40:	f200 8097 	bhi.w	8015f72 <prvProcessReceivedCommands+0x19e>
 8015e44:	a201      	add	r2, pc, #4	; (adr r2, 8015e4c <prvProcessReceivedCommands+0x78>)
 8015e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e4a:	bf00      	nop
 8015e4c:	08015e75 	.word	0x08015e75
 8015e50:	08015e75 	.word	0x08015e75
 8015e54:	08015e75 	.word	0x08015e75
 8015e58:	08015ee9 	.word	0x08015ee9
 8015e5c:	08015efd 	.word	0x08015efd
 8015e60:	08015f47 	.word	0x08015f47
 8015e64:	08015e75 	.word	0x08015e75
 8015e68:	08015e75 	.word	0x08015e75
 8015e6c:	08015ee9 	.word	0x08015ee9
 8015e70:	08015efd 	.word	0x08015efd
 8015e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e7a:	f043 0301 	orr.w	r3, r3, #1
 8015e7e:	b2da      	uxtb	r2, r3
 8015e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015e86:	68ba      	ldr	r2, [r7, #8]
 8015e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e8a:	699b      	ldr	r3, [r3, #24]
 8015e8c:	18d1      	adds	r1, r2, r3
 8015e8e:	68bb      	ldr	r3, [r7, #8]
 8015e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e94:	f7ff ff5c 	bl	8015d50 <prvInsertTimerInActiveList>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d069      	beq.n	8015f72 <prvProcessReceivedCommands+0x19e>
 8015e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ea0:	6a1b      	ldr	r3, [r3, #32]
 8015ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ea4:	4798      	blx	r3
 8015ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015eac:	f003 0304 	and.w	r3, r3, #4
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d05e      	beq.n	8015f72 <prvProcessReceivedCommands+0x19e>
 8015eb4:	68ba      	ldr	r2, [r7, #8]
 8015eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eb8:	699b      	ldr	r3, [r3, #24]
 8015eba:	441a      	add	r2, r3
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	9300      	str	r3, [sp, #0]
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	2100      	movs	r1, #0
 8015ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ec6:	f7ff fe05 	bl	8015ad4 <xTimerGenericCommand>
 8015eca:	6238      	str	r0, [r7, #32]
 8015ecc:	6a3b      	ldr	r3, [r7, #32]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d14f      	bne.n	8015f72 <prvProcessReceivedCommands+0x19e>
 8015ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ed6:	f383 8811 	msr	BASEPRI, r3
 8015eda:	f3bf 8f6f 	isb	sy
 8015ede:	f3bf 8f4f 	dsb	sy
 8015ee2:	61bb      	str	r3, [r7, #24]
 8015ee4:	bf00      	nop
 8015ee6:	e7fe      	b.n	8015ee6 <prvProcessReceivedCommands+0x112>
 8015ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015eee:	f023 0301 	bic.w	r3, r3, #1
 8015ef2:	b2da      	uxtb	r2, r3
 8015ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015efa:	e03a      	b.n	8015f72 <prvProcessReceivedCommands+0x19e>
 8015efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f02:	f043 0301 	orr.w	r3, r3, #1
 8015f06:	b2da      	uxtb	r2, r3
 8015f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015f0e:	68ba      	ldr	r2, [r7, #8]
 8015f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f12:	619a      	str	r2, [r3, #24]
 8015f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f16:	699b      	ldr	r3, [r3, #24]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d10a      	bne.n	8015f32 <prvProcessReceivedCommands+0x15e>
 8015f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f20:	f383 8811 	msr	BASEPRI, r3
 8015f24:	f3bf 8f6f 	isb	sy
 8015f28:	f3bf 8f4f 	dsb	sy
 8015f2c:	617b      	str	r3, [r7, #20]
 8015f2e:	bf00      	nop
 8015f30:	e7fe      	b.n	8015f30 <prvProcessReceivedCommands+0x15c>
 8015f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f34:	699a      	ldr	r2, [r3, #24]
 8015f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f38:	18d1      	adds	r1, r2, r3
 8015f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f40:	f7ff ff06 	bl	8015d50 <prvInsertTimerInActiveList>
 8015f44:	e015      	b.n	8015f72 <prvProcessReceivedCommands+0x19e>
 8015f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f4c:	f003 0302 	and.w	r3, r3, #2
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d103      	bne.n	8015f5c <prvProcessReceivedCommands+0x188>
 8015f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f56:	f000 fbfb 	bl	8016750 <vPortFree>
 8015f5a:	e00a      	b.n	8015f72 <prvProcessReceivedCommands+0x19e>
 8015f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f62:	f023 0301 	bic.w	r3, r3, #1
 8015f66:	b2da      	uxtb	r2, r3
 8015f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015f6e:	e000      	b.n	8015f72 <prvProcessReceivedCommands+0x19e>
 8015f70:	bf00      	nop
 8015f72:	4b08      	ldr	r3, [pc, #32]	; (8015f94 <prvProcessReceivedCommands+0x1c0>)
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	1d39      	adds	r1, r7, #4
 8015f78:	2200      	movs	r2, #0
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	f7fe f960 	bl	8014240 <xQueueReceive>
 8015f80:	4603      	mov	r3, r0
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	f47f af2a 	bne.w	8015ddc <prvProcessReceivedCommands+0x8>
 8015f88:	bf00      	nop
 8015f8a:	bf00      	nop
 8015f8c:	3730      	adds	r7, #48	; 0x30
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}
 8015f92:	bf00      	nop
 8015f94:	24001d3c 	.word	0x24001d3c

08015f98 <prvSwitchTimerLists>:
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b088      	sub	sp, #32
 8015f9c:	af02      	add	r7, sp, #8
 8015f9e:	e048      	b.n	8016032 <prvSwitchTimerLists+0x9a>
 8015fa0:	4b2d      	ldr	r3, [pc, #180]	; (8016058 <prvSwitchTimerLists+0xc0>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	68db      	ldr	r3, [r3, #12]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	613b      	str	r3, [r7, #16]
 8015faa:	4b2b      	ldr	r3, [pc, #172]	; (8016058 <prvSwitchTimerLists+0xc0>)
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	68db      	ldr	r3, [r3, #12]
 8015fb0:	68db      	ldr	r3, [r3, #12]
 8015fb2:	60fb      	str	r3, [r7, #12]
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	3304      	adds	r3, #4
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f7fd fe3f 	bl	8013c3c <uxListRemove>
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	6a1b      	ldr	r3, [r3, #32]
 8015fc2:	68f8      	ldr	r0, [r7, #12]
 8015fc4:	4798      	blx	r3
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fcc:	f003 0304 	and.w	r3, r3, #4
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d02e      	beq.n	8016032 <prvSwitchTimerLists+0x9a>
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	699b      	ldr	r3, [r3, #24]
 8015fd8:	693a      	ldr	r2, [r7, #16]
 8015fda:	4413      	add	r3, r2
 8015fdc:	60bb      	str	r3, [r7, #8]
 8015fde:	68ba      	ldr	r2, [r7, #8]
 8015fe0:	693b      	ldr	r3, [r7, #16]
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	d90e      	bls.n	8016004 <prvSwitchTimerLists+0x6c>
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	68ba      	ldr	r2, [r7, #8]
 8015fea:	605a      	str	r2, [r3, #4]
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	68fa      	ldr	r2, [r7, #12]
 8015ff0:	611a      	str	r2, [r3, #16]
 8015ff2:	4b19      	ldr	r3, [pc, #100]	; (8016058 <prvSwitchTimerLists+0xc0>)
 8015ff4:	681a      	ldr	r2, [r3, #0]
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	3304      	adds	r3, #4
 8015ffa:	4619      	mov	r1, r3
 8015ffc:	4610      	mov	r0, r2
 8015ffe:	f7fd fde4 	bl	8013bca <vListInsert>
 8016002:	e016      	b.n	8016032 <prvSwitchTimerLists+0x9a>
 8016004:	2300      	movs	r3, #0
 8016006:	9300      	str	r3, [sp, #0]
 8016008:	2300      	movs	r3, #0
 801600a:	693a      	ldr	r2, [r7, #16]
 801600c:	2100      	movs	r1, #0
 801600e:	68f8      	ldr	r0, [r7, #12]
 8016010:	f7ff fd60 	bl	8015ad4 <xTimerGenericCommand>
 8016014:	6078      	str	r0, [r7, #4]
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d10a      	bne.n	8016032 <prvSwitchTimerLists+0x9a>
 801601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016020:	f383 8811 	msr	BASEPRI, r3
 8016024:	f3bf 8f6f 	isb	sy
 8016028:	f3bf 8f4f 	dsb	sy
 801602c:	603b      	str	r3, [r7, #0]
 801602e:	bf00      	nop
 8016030:	e7fe      	b.n	8016030 <prvSwitchTimerLists+0x98>
 8016032:	4b09      	ldr	r3, [pc, #36]	; (8016058 <prvSwitchTimerLists+0xc0>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d1b1      	bne.n	8015fa0 <prvSwitchTimerLists+0x8>
 801603c:	4b06      	ldr	r3, [pc, #24]	; (8016058 <prvSwitchTimerLists+0xc0>)
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	617b      	str	r3, [r7, #20]
 8016042:	4b06      	ldr	r3, [pc, #24]	; (801605c <prvSwitchTimerLists+0xc4>)
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	4a04      	ldr	r2, [pc, #16]	; (8016058 <prvSwitchTimerLists+0xc0>)
 8016048:	6013      	str	r3, [r2, #0]
 801604a:	4a04      	ldr	r2, [pc, #16]	; (801605c <prvSwitchTimerLists+0xc4>)
 801604c:	697b      	ldr	r3, [r7, #20]
 801604e:	6013      	str	r3, [r2, #0]
 8016050:	bf00      	nop
 8016052:	3718      	adds	r7, #24
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}
 8016058:	24001d34 	.word	0x24001d34
 801605c:	24001d38 	.word	0x24001d38

08016060 <prvCheckForValidListAndQueue>:
 8016060:	b580      	push	{r7, lr}
 8016062:	b082      	sub	sp, #8
 8016064:	af02      	add	r7, sp, #8
 8016066:	f000 f985 	bl	8016374 <vPortEnterCritical>
 801606a:	4b15      	ldr	r3, [pc, #84]	; (80160c0 <prvCheckForValidListAndQueue+0x60>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d120      	bne.n	80160b4 <prvCheckForValidListAndQueue+0x54>
 8016072:	4814      	ldr	r0, [pc, #80]	; (80160c4 <prvCheckForValidListAndQueue+0x64>)
 8016074:	f7fd fd58 	bl	8013b28 <vListInitialise>
 8016078:	4813      	ldr	r0, [pc, #76]	; (80160c8 <prvCheckForValidListAndQueue+0x68>)
 801607a:	f7fd fd55 	bl	8013b28 <vListInitialise>
 801607e:	4b13      	ldr	r3, [pc, #76]	; (80160cc <prvCheckForValidListAndQueue+0x6c>)
 8016080:	4a10      	ldr	r2, [pc, #64]	; (80160c4 <prvCheckForValidListAndQueue+0x64>)
 8016082:	601a      	str	r2, [r3, #0]
 8016084:	4b12      	ldr	r3, [pc, #72]	; (80160d0 <prvCheckForValidListAndQueue+0x70>)
 8016086:	4a10      	ldr	r2, [pc, #64]	; (80160c8 <prvCheckForValidListAndQueue+0x68>)
 8016088:	601a      	str	r2, [r3, #0]
 801608a:	2300      	movs	r3, #0
 801608c:	9300      	str	r3, [sp, #0]
 801608e:	4b11      	ldr	r3, [pc, #68]	; (80160d4 <prvCheckForValidListAndQueue+0x74>)
 8016090:	4a11      	ldr	r2, [pc, #68]	; (80160d8 <prvCheckForValidListAndQueue+0x78>)
 8016092:	2110      	movs	r1, #16
 8016094:	200a      	movs	r0, #10
 8016096:	f7fd fe63 	bl	8013d60 <xQueueGenericCreateStatic>
 801609a:	4603      	mov	r3, r0
 801609c:	4a08      	ldr	r2, [pc, #32]	; (80160c0 <prvCheckForValidListAndQueue+0x60>)
 801609e:	6013      	str	r3, [r2, #0]
 80160a0:	4b07      	ldr	r3, [pc, #28]	; (80160c0 <prvCheckForValidListAndQueue+0x60>)
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d005      	beq.n	80160b4 <prvCheckForValidListAndQueue+0x54>
 80160a8:	4b05      	ldr	r3, [pc, #20]	; (80160c0 <prvCheckForValidListAndQueue+0x60>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	490b      	ldr	r1, [pc, #44]	; (80160dc <prvCheckForValidListAndQueue+0x7c>)
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7fe fb36 	bl	8014720 <vQueueAddToRegistry>
 80160b4:	f000 f98e 	bl	80163d4 <vPortExitCritical>
 80160b8:	bf00      	nop
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd80      	pop	{r7, pc}
 80160be:	bf00      	nop
 80160c0:	24001d3c 	.word	0x24001d3c
 80160c4:	24001d0c 	.word	0x24001d0c
 80160c8:	24001d20 	.word	0x24001d20
 80160cc:	24001d34 	.word	0x24001d34
 80160d0:	24001d38 	.word	0x24001d38
 80160d4:	24001de8 	.word	0x24001de8
 80160d8:	24001d48 	.word	0x24001d48
 80160dc:	080176a8 	.word	0x080176a8

080160e0 <xTimerPendFunctionCallFromISR>:
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b08a      	sub	sp, #40	; 0x28
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	60f8      	str	r0, [r7, #12]
 80160e8:	60b9      	str	r1, [r7, #8]
 80160ea:	607a      	str	r2, [r7, #4]
 80160ec:	603b      	str	r3, [r7, #0]
 80160ee:	f06f 0301 	mvn.w	r3, #1
 80160f2:	617b      	str	r3, [r7, #20]
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	61bb      	str	r3, [r7, #24]
 80160f8:	68bb      	ldr	r3, [r7, #8]
 80160fa:	61fb      	str	r3, [r7, #28]
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	623b      	str	r3, [r7, #32]
 8016100:	4b06      	ldr	r3, [pc, #24]	; (801611c <xTimerPendFunctionCallFromISR+0x3c>)
 8016102:	6818      	ldr	r0, [r3, #0]
 8016104:	f107 0114 	add.w	r1, r7, #20
 8016108:	2300      	movs	r3, #0
 801610a:	683a      	ldr	r2, [r7, #0]
 801610c:	f7fd fffc 	bl	8014108 <xQueueGenericSendFromISR>
 8016110:	6278      	str	r0, [r7, #36]	; 0x24
 8016112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016114:	4618      	mov	r0, r3
 8016116:	3728      	adds	r7, #40	; 0x28
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}
 801611c:	24001d3c 	.word	0x24001d3c

08016120 <pxPortInitialiseStack>:
 8016120:	b480      	push	{r7}
 8016122:	b085      	sub	sp, #20
 8016124:	af00      	add	r7, sp, #0
 8016126:	60f8      	str	r0, [r7, #12]
 8016128:	60b9      	str	r1, [r7, #8]
 801612a:	607a      	str	r2, [r7, #4]
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	3b04      	subs	r3, #4
 8016130:	60fb      	str	r3, [r7, #12]
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016138:	601a      	str	r2, [r3, #0]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	3b04      	subs	r3, #4
 801613e:	60fb      	str	r3, [r7, #12]
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	f023 0201 	bic.w	r2, r3, #1
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	601a      	str	r2, [r3, #0]
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	3b04      	subs	r3, #4
 801614e:	60fb      	str	r3, [r7, #12]
 8016150:	4a0c      	ldr	r2, [pc, #48]	; (8016184 <pxPortInitialiseStack+0x64>)
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	601a      	str	r2, [r3, #0]
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	3b14      	subs	r3, #20
 801615a:	60fb      	str	r3, [r7, #12]
 801615c:	687a      	ldr	r2, [r7, #4]
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	601a      	str	r2, [r3, #0]
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	3b04      	subs	r3, #4
 8016166:	60fb      	str	r3, [r7, #12]
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	f06f 0202 	mvn.w	r2, #2
 801616e:	601a      	str	r2, [r3, #0]
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	3b20      	subs	r3, #32
 8016174:	60fb      	str	r3, [r7, #12]
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	4618      	mov	r0, r3
 801617a:	3714      	adds	r7, #20
 801617c:	46bd      	mov	sp, r7
 801617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016182:	4770      	bx	lr
 8016184:	08016189 	.word	0x08016189

08016188 <prvTaskExitError>:
 8016188:	b480      	push	{r7}
 801618a:	b085      	sub	sp, #20
 801618c:	af00      	add	r7, sp, #0
 801618e:	2300      	movs	r3, #0
 8016190:	607b      	str	r3, [r7, #4]
 8016192:	4b12      	ldr	r3, [pc, #72]	; (80161dc <prvTaskExitError+0x54>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801619a:	d00a      	beq.n	80161b2 <prvTaskExitError+0x2a>
 801619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161a0:	f383 8811 	msr	BASEPRI, r3
 80161a4:	f3bf 8f6f 	isb	sy
 80161a8:	f3bf 8f4f 	dsb	sy
 80161ac:	60fb      	str	r3, [r7, #12]
 80161ae:	bf00      	nop
 80161b0:	e7fe      	b.n	80161b0 <prvTaskExitError+0x28>
 80161b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161b6:	f383 8811 	msr	BASEPRI, r3
 80161ba:	f3bf 8f6f 	isb	sy
 80161be:	f3bf 8f4f 	dsb	sy
 80161c2:	60bb      	str	r3, [r7, #8]
 80161c4:	bf00      	nop
 80161c6:	bf00      	nop
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d0fc      	beq.n	80161c8 <prvTaskExitError+0x40>
 80161ce:	bf00      	nop
 80161d0:	bf00      	nop
 80161d2:	3714      	adds	r7, #20
 80161d4:	46bd      	mov	sp, r7
 80161d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161da:	4770      	bx	lr
 80161dc:	240000a0 	.word	0x240000a0

080161e0 <SVC_Handler>:
 80161e0:	4b07      	ldr	r3, [pc, #28]	; (8016200 <pxCurrentTCBConst2>)
 80161e2:	6819      	ldr	r1, [r3, #0]
 80161e4:	6808      	ldr	r0, [r1, #0]
 80161e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ea:	f380 8809 	msr	PSP, r0
 80161ee:	f3bf 8f6f 	isb	sy
 80161f2:	f04f 0000 	mov.w	r0, #0
 80161f6:	f380 8811 	msr	BASEPRI, r0
 80161fa:	4770      	bx	lr
 80161fc:	f3af 8000 	nop.w

08016200 <pxCurrentTCBConst2>:
 8016200:	2400180c 	.word	0x2400180c
 8016204:	bf00      	nop
 8016206:	bf00      	nop

08016208 <prvPortStartFirstTask>:
 8016208:	4808      	ldr	r0, [pc, #32]	; (801622c <prvPortStartFirstTask+0x24>)
 801620a:	6800      	ldr	r0, [r0, #0]
 801620c:	6800      	ldr	r0, [r0, #0]
 801620e:	f380 8808 	msr	MSP, r0
 8016212:	f04f 0000 	mov.w	r0, #0
 8016216:	f380 8814 	msr	CONTROL, r0
 801621a:	b662      	cpsie	i
 801621c:	b661      	cpsie	f
 801621e:	f3bf 8f4f 	dsb	sy
 8016222:	f3bf 8f6f 	isb	sy
 8016226:	df00      	svc	0
 8016228:	bf00      	nop
 801622a:	bf00      	nop
 801622c:	e000ed08 	.word	0xe000ed08

08016230 <xPortStartScheduler>:
 8016230:	b580      	push	{r7, lr}
 8016232:	b086      	sub	sp, #24
 8016234:	af00      	add	r7, sp, #0
 8016236:	4b46      	ldr	r3, [pc, #280]	; (8016350 <xPortStartScheduler+0x120>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	4a46      	ldr	r2, [pc, #280]	; (8016354 <xPortStartScheduler+0x124>)
 801623c:	4293      	cmp	r3, r2
 801623e:	d10a      	bne.n	8016256 <xPortStartScheduler+0x26>
 8016240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016244:	f383 8811 	msr	BASEPRI, r3
 8016248:	f3bf 8f6f 	isb	sy
 801624c:	f3bf 8f4f 	dsb	sy
 8016250:	613b      	str	r3, [r7, #16]
 8016252:	bf00      	nop
 8016254:	e7fe      	b.n	8016254 <xPortStartScheduler+0x24>
 8016256:	4b3e      	ldr	r3, [pc, #248]	; (8016350 <xPortStartScheduler+0x120>)
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	4a3f      	ldr	r2, [pc, #252]	; (8016358 <xPortStartScheduler+0x128>)
 801625c:	4293      	cmp	r3, r2
 801625e:	d10a      	bne.n	8016276 <xPortStartScheduler+0x46>
 8016260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016264:	f383 8811 	msr	BASEPRI, r3
 8016268:	f3bf 8f6f 	isb	sy
 801626c:	f3bf 8f4f 	dsb	sy
 8016270:	60fb      	str	r3, [r7, #12]
 8016272:	bf00      	nop
 8016274:	e7fe      	b.n	8016274 <xPortStartScheduler+0x44>
 8016276:	4b39      	ldr	r3, [pc, #228]	; (801635c <xPortStartScheduler+0x12c>)
 8016278:	617b      	str	r3, [r7, #20]
 801627a:	697b      	ldr	r3, [r7, #20]
 801627c:	781b      	ldrb	r3, [r3, #0]
 801627e:	b2db      	uxtb	r3, r3
 8016280:	607b      	str	r3, [r7, #4]
 8016282:	697b      	ldr	r3, [r7, #20]
 8016284:	22ff      	movs	r2, #255	; 0xff
 8016286:	701a      	strb	r2, [r3, #0]
 8016288:	697b      	ldr	r3, [r7, #20]
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	b2db      	uxtb	r3, r3
 801628e:	70fb      	strb	r3, [r7, #3]
 8016290:	78fb      	ldrb	r3, [r7, #3]
 8016292:	b2db      	uxtb	r3, r3
 8016294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016298:	b2da      	uxtb	r2, r3
 801629a:	4b31      	ldr	r3, [pc, #196]	; (8016360 <xPortStartScheduler+0x130>)
 801629c:	701a      	strb	r2, [r3, #0]
 801629e:	4b31      	ldr	r3, [pc, #196]	; (8016364 <xPortStartScheduler+0x134>)
 80162a0:	2207      	movs	r2, #7
 80162a2:	601a      	str	r2, [r3, #0]
 80162a4:	e009      	b.n	80162ba <xPortStartScheduler+0x8a>
 80162a6:	4b2f      	ldr	r3, [pc, #188]	; (8016364 <xPortStartScheduler+0x134>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	3b01      	subs	r3, #1
 80162ac:	4a2d      	ldr	r2, [pc, #180]	; (8016364 <xPortStartScheduler+0x134>)
 80162ae:	6013      	str	r3, [r2, #0]
 80162b0:	78fb      	ldrb	r3, [r7, #3]
 80162b2:	b2db      	uxtb	r3, r3
 80162b4:	005b      	lsls	r3, r3, #1
 80162b6:	b2db      	uxtb	r3, r3
 80162b8:	70fb      	strb	r3, [r7, #3]
 80162ba:	78fb      	ldrb	r3, [r7, #3]
 80162bc:	b2db      	uxtb	r3, r3
 80162be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80162c2:	2b80      	cmp	r3, #128	; 0x80
 80162c4:	d0ef      	beq.n	80162a6 <xPortStartScheduler+0x76>
 80162c6:	4b27      	ldr	r3, [pc, #156]	; (8016364 <xPortStartScheduler+0x134>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	f1c3 0307 	rsb	r3, r3, #7
 80162ce:	2b04      	cmp	r3, #4
 80162d0:	d00a      	beq.n	80162e8 <xPortStartScheduler+0xb8>
 80162d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d6:	f383 8811 	msr	BASEPRI, r3
 80162da:	f3bf 8f6f 	isb	sy
 80162de:	f3bf 8f4f 	dsb	sy
 80162e2:	60bb      	str	r3, [r7, #8]
 80162e4:	bf00      	nop
 80162e6:	e7fe      	b.n	80162e6 <xPortStartScheduler+0xb6>
 80162e8:	4b1e      	ldr	r3, [pc, #120]	; (8016364 <xPortStartScheduler+0x134>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	021b      	lsls	r3, r3, #8
 80162ee:	4a1d      	ldr	r2, [pc, #116]	; (8016364 <xPortStartScheduler+0x134>)
 80162f0:	6013      	str	r3, [r2, #0]
 80162f2:	4b1c      	ldr	r3, [pc, #112]	; (8016364 <xPortStartScheduler+0x134>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80162fa:	4a1a      	ldr	r2, [pc, #104]	; (8016364 <xPortStartScheduler+0x134>)
 80162fc:	6013      	str	r3, [r2, #0]
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	b2da      	uxtb	r2, r3
 8016302:	697b      	ldr	r3, [r7, #20]
 8016304:	701a      	strb	r2, [r3, #0]
 8016306:	4b18      	ldr	r3, [pc, #96]	; (8016368 <xPortStartScheduler+0x138>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	4a17      	ldr	r2, [pc, #92]	; (8016368 <xPortStartScheduler+0x138>)
 801630c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016310:	6013      	str	r3, [r2, #0]
 8016312:	4b15      	ldr	r3, [pc, #84]	; (8016368 <xPortStartScheduler+0x138>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	4a14      	ldr	r2, [pc, #80]	; (8016368 <xPortStartScheduler+0x138>)
 8016318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801631c:	6013      	str	r3, [r2, #0]
 801631e:	f000 f8dd 	bl	80164dc <vPortSetupTimerInterrupt>
 8016322:	4b12      	ldr	r3, [pc, #72]	; (801636c <xPortStartScheduler+0x13c>)
 8016324:	2200      	movs	r2, #0
 8016326:	601a      	str	r2, [r3, #0]
 8016328:	f000 f8fc 	bl	8016524 <vPortEnableVFP>
 801632c:	4b10      	ldr	r3, [pc, #64]	; (8016370 <xPortStartScheduler+0x140>)
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	4a0f      	ldr	r2, [pc, #60]	; (8016370 <xPortStartScheduler+0x140>)
 8016332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016336:	6013      	str	r3, [r2, #0]
 8016338:	f7ff ff66 	bl	8016208 <prvPortStartFirstTask>
 801633c:	f7fe ff80 	bl	8015240 <vTaskSwitchContext>
 8016340:	f7ff ff22 	bl	8016188 <prvTaskExitError>
 8016344:	2300      	movs	r3, #0
 8016346:	4618      	mov	r0, r3
 8016348:	3718      	adds	r7, #24
 801634a:	46bd      	mov	sp, r7
 801634c:	bd80      	pop	{r7, pc}
 801634e:	bf00      	nop
 8016350:	e000ed00 	.word	0xe000ed00
 8016354:	410fc271 	.word	0x410fc271
 8016358:	410fc270 	.word	0x410fc270
 801635c:	e000e400 	.word	0xe000e400
 8016360:	24001e38 	.word	0x24001e38
 8016364:	24001e3c 	.word	0x24001e3c
 8016368:	e000ed20 	.word	0xe000ed20
 801636c:	240000a0 	.word	0x240000a0
 8016370:	e000ef34 	.word	0xe000ef34

08016374 <vPortEnterCritical>:
 8016374:	b480      	push	{r7}
 8016376:	b083      	sub	sp, #12
 8016378:	af00      	add	r7, sp, #0
 801637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801637e:	f383 8811 	msr	BASEPRI, r3
 8016382:	f3bf 8f6f 	isb	sy
 8016386:	f3bf 8f4f 	dsb	sy
 801638a:	607b      	str	r3, [r7, #4]
 801638c:	bf00      	nop
 801638e:	4b0f      	ldr	r3, [pc, #60]	; (80163cc <vPortEnterCritical+0x58>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	3301      	adds	r3, #1
 8016394:	4a0d      	ldr	r2, [pc, #52]	; (80163cc <vPortEnterCritical+0x58>)
 8016396:	6013      	str	r3, [r2, #0]
 8016398:	4b0c      	ldr	r3, [pc, #48]	; (80163cc <vPortEnterCritical+0x58>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	2b01      	cmp	r3, #1
 801639e:	d10f      	bne.n	80163c0 <vPortEnterCritical+0x4c>
 80163a0:	4b0b      	ldr	r3, [pc, #44]	; (80163d0 <vPortEnterCritical+0x5c>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	b2db      	uxtb	r3, r3
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d00a      	beq.n	80163c0 <vPortEnterCritical+0x4c>
 80163aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163ae:	f383 8811 	msr	BASEPRI, r3
 80163b2:	f3bf 8f6f 	isb	sy
 80163b6:	f3bf 8f4f 	dsb	sy
 80163ba:	603b      	str	r3, [r7, #0]
 80163bc:	bf00      	nop
 80163be:	e7fe      	b.n	80163be <vPortEnterCritical+0x4a>
 80163c0:	bf00      	nop
 80163c2:	370c      	adds	r7, #12
 80163c4:	46bd      	mov	sp, r7
 80163c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ca:	4770      	bx	lr
 80163cc:	240000a0 	.word	0x240000a0
 80163d0:	e000ed04 	.word	0xe000ed04

080163d4 <vPortExitCritical>:
 80163d4:	b480      	push	{r7}
 80163d6:	b083      	sub	sp, #12
 80163d8:	af00      	add	r7, sp, #0
 80163da:	4b12      	ldr	r3, [pc, #72]	; (8016424 <vPortExitCritical+0x50>)
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d10a      	bne.n	80163f8 <vPortExitCritical+0x24>
 80163e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163e6:	f383 8811 	msr	BASEPRI, r3
 80163ea:	f3bf 8f6f 	isb	sy
 80163ee:	f3bf 8f4f 	dsb	sy
 80163f2:	607b      	str	r3, [r7, #4]
 80163f4:	bf00      	nop
 80163f6:	e7fe      	b.n	80163f6 <vPortExitCritical+0x22>
 80163f8:	4b0a      	ldr	r3, [pc, #40]	; (8016424 <vPortExitCritical+0x50>)
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	3b01      	subs	r3, #1
 80163fe:	4a09      	ldr	r2, [pc, #36]	; (8016424 <vPortExitCritical+0x50>)
 8016400:	6013      	str	r3, [r2, #0]
 8016402:	4b08      	ldr	r3, [pc, #32]	; (8016424 <vPortExitCritical+0x50>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d105      	bne.n	8016416 <vPortExitCritical+0x42>
 801640a:	2300      	movs	r3, #0
 801640c:	603b      	str	r3, [r7, #0]
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	f383 8811 	msr	BASEPRI, r3
 8016414:	bf00      	nop
 8016416:	bf00      	nop
 8016418:	370c      	adds	r7, #12
 801641a:	46bd      	mov	sp, r7
 801641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016420:	4770      	bx	lr
 8016422:	bf00      	nop
 8016424:	240000a0 	.word	0x240000a0
	...

08016430 <PendSV_Handler>:
 8016430:	f3ef 8009 	mrs	r0, PSP
 8016434:	f3bf 8f6f 	isb	sy
 8016438:	4b15      	ldr	r3, [pc, #84]	; (8016490 <pxCurrentTCBConst>)
 801643a:	681a      	ldr	r2, [r3, #0]
 801643c:	f01e 0f10 	tst.w	lr, #16
 8016440:	bf08      	it	eq
 8016442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801644a:	6010      	str	r0, [r2, #0]
 801644c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016454:	f380 8811 	msr	BASEPRI, r0
 8016458:	f3bf 8f4f 	dsb	sy
 801645c:	f3bf 8f6f 	isb	sy
 8016460:	f7fe feee 	bl	8015240 <vTaskSwitchContext>
 8016464:	f04f 0000 	mov.w	r0, #0
 8016468:	f380 8811 	msr	BASEPRI, r0
 801646c:	bc09      	pop	{r0, r3}
 801646e:	6819      	ldr	r1, [r3, #0]
 8016470:	6808      	ldr	r0, [r1, #0]
 8016472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016476:	f01e 0f10 	tst.w	lr, #16
 801647a:	bf08      	it	eq
 801647c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016480:	f380 8809 	msr	PSP, r0
 8016484:	f3bf 8f6f 	isb	sy
 8016488:	4770      	bx	lr
 801648a:	bf00      	nop
 801648c:	f3af 8000 	nop.w

08016490 <pxCurrentTCBConst>:
 8016490:	2400180c 	.word	0x2400180c
 8016494:	bf00      	nop
 8016496:	bf00      	nop

08016498 <xPortSysTickHandler>:
 8016498:	b580      	push	{r7, lr}
 801649a:	b082      	sub	sp, #8
 801649c:	af00      	add	r7, sp, #0
 801649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164a2:	f383 8811 	msr	BASEPRI, r3
 80164a6:	f3bf 8f6f 	isb	sy
 80164aa:	f3bf 8f4f 	dsb	sy
 80164ae:	607b      	str	r3, [r7, #4]
 80164b0:	bf00      	nop
 80164b2:	f7fe fe03 	bl	80150bc <xTaskIncrementTick>
 80164b6:	4603      	mov	r3, r0
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d003      	beq.n	80164c4 <xPortSysTickHandler+0x2c>
 80164bc:	4b06      	ldr	r3, [pc, #24]	; (80164d8 <xPortSysTickHandler+0x40>)
 80164be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164c2:	601a      	str	r2, [r3, #0]
 80164c4:	2300      	movs	r3, #0
 80164c6:	603b      	str	r3, [r7, #0]
 80164c8:	683b      	ldr	r3, [r7, #0]
 80164ca:	f383 8811 	msr	BASEPRI, r3
 80164ce:	bf00      	nop
 80164d0:	bf00      	nop
 80164d2:	3708      	adds	r7, #8
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	e000ed04 	.word	0xe000ed04

080164dc <vPortSetupTimerInterrupt>:
 80164dc:	b480      	push	{r7}
 80164de:	af00      	add	r7, sp, #0
 80164e0:	4b0b      	ldr	r3, [pc, #44]	; (8016510 <vPortSetupTimerInterrupt+0x34>)
 80164e2:	2200      	movs	r2, #0
 80164e4:	601a      	str	r2, [r3, #0]
 80164e6:	4b0b      	ldr	r3, [pc, #44]	; (8016514 <vPortSetupTimerInterrupt+0x38>)
 80164e8:	2200      	movs	r2, #0
 80164ea:	601a      	str	r2, [r3, #0]
 80164ec:	4b0a      	ldr	r3, [pc, #40]	; (8016518 <vPortSetupTimerInterrupt+0x3c>)
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	4a0a      	ldr	r2, [pc, #40]	; (801651c <vPortSetupTimerInterrupt+0x40>)
 80164f2:	fba2 2303 	umull	r2, r3, r2, r3
 80164f6:	099b      	lsrs	r3, r3, #6
 80164f8:	4a09      	ldr	r2, [pc, #36]	; (8016520 <vPortSetupTimerInterrupt+0x44>)
 80164fa:	3b01      	subs	r3, #1
 80164fc:	6013      	str	r3, [r2, #0]
 80164fe:	4b04      	ldr	r3, [pc, #16]	; (8016510 <vPortSetupTimerInterrupt+0x34>)
 8016500:	2207      	movs	r2, #7
 8016502:	601a      	str	r2, [r3, #0]
 8016504:	bf00      	nop
 8016506:	46bd      	mov	sp, r7
 8016508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650c:	4770      	bx	lr
 801650e:	bf00      	nop
 8016510:	e000e010 	.word	0xe000e010
 8016514:	e000e018 	.word	0xe000e018
 8016518:	24000090 	.word	0x24000090
 801651c:	10624dd3 	.word	0x10624dd3
 8016520:	e000e014 	.word	0xe000e014

08016524 <vPortEnableVFP>:
 8016524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016534 <vPortEnableVFP+0x10>
 8016528:	6801      	ldr	r1, [r0, #0]
 801652a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801652e:	6001      	str	r1, [r0, #0]
 8016530:	4770      	bx	lr
 8016532:	bf00      	nop
 8016534:	e000ed88 	.word	0xe000ed88

08016538 <vPortValidateInterruptPriority>:
 8016538:	b480      	push	{r7}
 801653a:	b085      	sub	sp, #20
 801653c:	af00      	add	r7, sp, #0
 801653e:	f3ef 8305 	mrs	r3, IPSR
 8016542:	60fb      	str	r3, [r7, #12]
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	2b0f      	cmp	r3, #15
 8016548:	d914      	bls.n	8016574 <vPortValidateInterruptPriority+0x3c>
 801654a:	4a17      	ldr	r2, [pc, #92]	; (80165a8 <vPortValidateInterruptPriority+0x70>)
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	4413      	add	r3, r2
 8016550:	781b      	ldrb	r3, [r3, #0]
 8016552:	72fb      	strb	r3, [r7, #11]
 8016554:	4b15      	ldr	r3, [pc, #84]	; (80165ac <vPortValidateInterruptPriority+0x74>)
 8016556:	781b      	ldrb	r3, [r3, #0]
 8016558:	7afa      	ldrb	r2, [r7, #11]
 801655a:	429a      	cmp	r2, r3
 801655c:	d20a      	bcs.n	8016574 <vPortValidateInterruptPriority+0x3c>
 801655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016562:	f383 8811 	msr	BASEPRI, r3
 8016566:	f3bf 8f6f 	isb	sy
 801656a:	f3bf 8f4f 	dsb	sy
 801656e:	607b      	str	r3, [r7, #4]
 8016570:	bf00      	nop
 8016572:	e7fe      	b.n	8016572 <vPortValidateInterruptPriority+0x3a>
 8016574:	4b0e      	ldr	r3, [pc, #56]	; (80165b0 <vPortValidateInterruptPriority+0x78>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801657c:	4b0d      	ldr	r3, [pc, #52]	; (80165b4 <vPortValidateInterruptPriority+0x7c>)
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	429a      	cmp	r2, r3
 8016582:	d90a      	bls.n	801659a <vPortValidateInterruptPriority+0x62>
 8016584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016588:	f383 8811 	msr	BASEPRI, r3
 801658c:	f3bf 8f6f 	isb	sy
 8016590:	f3bf 8f4f 	dsb	sy
 8016594:	603b      	str	r3, [r7, #0]
 8016596:	bf00      	nop
 8016598:	e7fe      	b.n	8016598 <vPortValidateInterruptPriority+0x60>
 801659a:	bf00      	nop
 801659c:	3714      	adds	r7, #20
 801659e:	46bd      	mov	sp, r7
 80165a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a4:	4770      	bx	lr
 80165a6:	bf00      	nop
 80165a8:	e000e3f0 	.word	0xe000e3f0
 80165ac:	24001e38 	.word	0x24001e38
 80165b0:	e000ed0c 	.word	0xe000ed0c
 80165b4:	24001e3c 	.word	0x24001e3c

080165b8 <pvPortMalloc>:
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b08a      	sub	sp, #40	; 0x28
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
 80165c0:	2300      	movs	r3, #0
 80165c2:	61fb      	str	r3, [r7, #28]
 80165c4:	f7fe fcbe 	bl	8014f44 <vTaskSuspendAll>
 80165c8:	4b5b      	ldr	r3, [pc, #364]	; (8016738 <pvPortMalloc+0x180>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d101      	bne.n	80165d4 <pvPortMalloc+0x1c>
 80165d0:	f000 f920 	bl	8016814 <prvHeapInit>
 80165d4:	4b59      	ldr	r3, [pc, #356]	; (801673c <pvPortMalloc+0x184>)
 80165d6:	681a      	ldr	r2, [r3, #0]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	4013      	ands	r3, r2
 80165dc:	2b00      	cmp	r3, #0
 80165de:	f040 8093 	bne.w	8016708 <pvPortMalloc+0x150>
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d01d      	beq.n	8016624 <pvPortMalloc+0x6c>
 80165e8:	2208      	movs	r2, #8
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	4413      	add	r3, r2
 80165ee:	607b      	str	r3, [r7, #4]
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	f003 0307 	and.w	r3, r3, #7
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d014      	beq.n	8016624 <pvPortMalloc+0x6c>
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	f023 0307 	bic.w	r3, r3, #7
 8016600:	3308      	adds	r3, #8
 8016602:	607b      	str	r3, [r7, #4]
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f003 0307 	and.w	r3, r3, #7
 801660a:	2b00      	cmp	r3, #0
 801660c:	d00a      	beq.n	8016624 <pvPortMalloc+0x6c>
 801660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016612:	f383 8811 	msr	BASEPRI, r3
 8016616:	f3bf 8f6f 	isb	sy
 801661a:	f3bf 8f4f 	dsb	sy
 801661e:	617b      	str	r3, [r7, #20]
 8016620:	bf00      	nop
 8016622:	e7fe      	b.n	8016622 <pvPortMalloc+0x6a>
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d06e      	beq.n	8016708 <pvPortMalloc+0x150>
 801662a:	4b45      	ldr	r3, [pc, #276]	; (8016740 <pvPortMalloc+0x188>)
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	687a      	ldr	r2, [r7, #4]
 8016630:	429a      	cmp	r2, r3
 8016632:	d869      	bhi.n	8016708 <pvPortMalloc+0x150>
 8016634:	4b43      	ldr	r3, [pc, #268]	; (8016744 <pvPortMalloc+0x18c>)
 8016636:	623b      	str	r3, [r7, #32]
 8016638:	4b42      	ldr	r3, [pc, #264]	; (8016744 <pvPortMalloc+0x18c>)
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	627b      	str	r3, [r7, #36]	; 0x24
 801663e:	e004      	b.n	801664a <pvPortMalloc+0x92>
 8016640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016642:	623b      	str	r3, [r7, #32]
 8016644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	627b      	str	r3, [r7, #36]	; 0x24
 801664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801664c:	685b      	ldr	r3, [r3, #4]
 801664e:	687a      	ldr	r2, [r7, #4]
 8016650:	429a      	cmp	r2, r3
 8016652:	d903      	bls.n	801665c <pvPortMalloc+0xa4>
 8016654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d1f1      	bne.n	8016640 <pvPortMalloc+0x88>
 801665c:	4b36      	ldr	r3, [pc, #216]	; (8016738 <pvPortMalloc+0x180>)
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016662:	429a      	cmp	r2, r3
 8016664:	d050      	beq.n	8016708 <pvPortMalloc+0x150>
 8016666:	6a3b      	ldr	r3, [r7, #32]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	2208      	movs	r2, #8
 801666c:	4413      	add	r3, r2
 801666e:	61fb      	str	r3, [r7, #28]
 8016670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016672:	681a      	ldr	r2, [r3, #0]
 8016674:	6a3b      	ldr	r3, [r7, #32]
 8016676:	601a      	str	r2, [r3, #0]
 8016678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801667a:	685a      	ldr	r2, [r3, #4]
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	1ad2      	subs	r2, r2, r3
 8016680:	2308      	movs	r3, #8
 8016682:	005b      	lsls	r3, r3, #1
 8016684:	429a      	cmp	r2, r3
 8016686:	d91f      	bls.n	80166c8 <pvPortMalloc+0x110>
 8016688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	4413      	add	r3, r2
 801668e:	61bb      	str	r3, [r7, #24]
 8016690:	69bb      	ldr	r3, [r7, #24]
 8016692:	f003 0307 	and.w	r3, r3, #7
 8016696:	2b00      	cmp	r3, #0
 8016698:	d00a      	beq.n	80166b0 <pvPortMalloc+0xf8>
 801669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801669e:	f383 8811 	msr	BASEPRI, r3
 80166a2:	f3bf 8f6f 	isb	sy
 80166a6:	f3bf 8f4f 	dsb	sy
 80166aa:	613b      	str	r3, [r7, #16]
 80166ac:	bf00      	nop
 80166ae:	e7fe      	b.n	80166ae <pvPortMalloc+0xf6>
 80166b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166b2:	685a      	ldr	r2, [r3, #4]
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	1ad2      	subs	r2, r2, r3
 80166b8:	69bb      	ldr	r3, [r7, #24]
 80166ba:	605a      	str	r2, [r3, #4]
 80166bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166be:	687a      	ldr	r2, [r7, #4]
 80166c0:	605a      	str	r2, [r3, #4]
 80166c2:	69b8      	ldr	r0, [r7, #24]
 80166c4:	f000 f908 	bl	80168d8 <prvInsertBlockIntoFreeList>
 80166c8:	4b1d      	ldr	r3, [pc, #116]	; (8016740 <pvPortMalloc+0x188>)
 80166ca:	681a      	ldr	r2, [r3, #0]
 80166cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ce:	685b      	ldr	r3, [r3, #4]
 80166d0:	1ad3      	subs	r3, r2, r3
 80166d2:	4a1b      	ldr	r2, [pc, #108]	; (8016740 <pvPortMalloc+0x188>)
 80166d4:	6013      	str	r3, [r2, #0]
 80166d6:	4b1a      	ldr	r3, [pc, #104]	; (8016740 <pvPortMalloc+0x188>)
 80166d8:	681a      	ldr	r2, [r3, #0]
 80166da:	4b1b      	ldr	r3, [pc, #108]	; (8016748 <pvPortMalloc+0x190>)
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	429a      	cmp	r2, r3
 80166e0:	d203      	bcs.n	80166ea <pvPortMalloc+0x132>
 80166e2:	4b17      	ldr	r3, [pc, #92]	; (8016740 <pvPortMalloc+0x188>)
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	4a18      	ldr	r2, [pc, #96]	; (8016748 <pvPortMalloc+0x190>)
 80166e8:	6013      	str	r3, [r2, #0]
 80166ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ec:	685a      	ldr	r2, [r3, #4]
 80166ee:	4b13      	ldr	r3, [pc, #76]	; (801673c <pvPortMalloc+0x184>)
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	431a      	orrs	r2, r3
 80166f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f6:	605a      	str	r2, [r3, #4]
 80166f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166fa:	2200      	movs	r2, #0
 80166fc:	601a      	str	r2, [r3, #0]
 80166fe:	4b13      	ldr	r3, [pc, #76]	; (801674c <pvPortMalloc+0x194>)
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	3301      	adds	r3, #1
 8016704:	4a11      	ldr	r2, [pc, #68]	; (801674c <pvPortMalloc+0x194>)
 8016706:	6013      	str	r3, [r2, #0]
 8016708:	f7fe fc2a 	bl	8014f60 <xTaskResumeAll>
 801670c:	69fb      	ldr	r3, [r7, #28]
 801670e:	f003 0307 	and.w	r3, r3, #7
 8016712:	2b00      	cmp	r3, #0
 8016714:	d00a      	beq.n	801672c <pvPortMalloc+0x174>
 8016716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801671a:	f383 8811 	msr	BASEPRI, r3
 801671e:	f3bf 8f6f 	isb	sy
 8016722:	f3bf 8f4f 	dsb	sy
 8016726:	60fb      	str	r3, [r7, #12]
 8016728:	bf00      	nop
 801672a:	e7fe      	b.n	801672a <pvPortMalloc+0x172>
 801672c:	69fb      	ldr	r3, [r7, #28]
 801672e:	4618      	mov	r0, r3
 8016730:	3728      	adds	r7, #40	; 0x28
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}
 8016736:	bf00      	nop
 8016738:	24005a48 	.word	0x24005a48
 801673c:	24005a5c 	.word	0x24005a5c
 8016740:	24005a4c 	.word	0x24005a4c
 8016744:	24005a40 	.word	0x24005a40
 8016748:	24005a50 	.word	0x24005a50
 801674c:	24005a54 	.word	0x24005a54

08016750 <vPortFree>:
 8016750:	b580      	push	{r7, lr}
 8016752:	b086      	sub	sp, #24
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	617b      	str	r3, [r7, #20]
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d04d      	beq.n	80167fe <vPortFree+0xae>
 8016762:	2308      	movs	r3, #8
 8016764:	425b      	negs	r3, r3
 8016766:	697a      	ldr	r2, [r7, #20]
 8016768:	4413      	add	r3, r2
 801676a:	617b      	str	r3, [r7, #20]
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	613b      	str	r3, [r7, #16]
 8016770:	693b      	ldr	r3, [r7, #16]
 8016772:	685a      	ldr	r2, [r3, #4]
 8016774:	4b24      	ldr	r3, [pc, #144]	; (8016808 <vPortFree+0xb8>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	4013      	ands	r3, r2
 801677a:	2b00      	cmp	r3, #0
 801677c:	d10a      	bne.n	8016794 <vPortFree+0x44>
 801677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016782:	f383 8811 	msr	BASEPRI, r3
 8016786:	f3bf 8f6f 	isb	sy
 801678a:	f3bf 8f4f 	dsb	sy
 801678e:	60fb      	str	r3, [r7, #12]
 8016790:	bf00      	nop
 8016792:	e7fe      	b.n	8016792 <vPortFree+0x42>
 8016794:	693b      	ldr	r3, [r7, #16]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d00a      	beq.n	80167b2 <vPortFree+0x62>
 801679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167a0:	f383 8811 	msr	BASEPRI, r3
 80167a4:	f3bf 8f6f 	isb	sy
 80167a8:	f3bf 8f4f 	dsb	sy
 80167ac:	60bb      	str	r3, [r7, #8]
 80167ae:	bf00      	nop
 80167b0:	e7fe      	b.n	80167b0 <vPortFree+0x60>
 80167b2:	693b      	ldr	r3, [r7, #16]
 80167b4:	685a      	ldr	r2, [r3, #4]
 80167b6:	4b14      	ldr	r3, [pc, #80]	; (8016808 <vPortFree+0xb8>)
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	4013      	ands	r3, r2
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d01e      	beq.n	80167fe <vPortFree+0xae>
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d11a      	bne.n	80167fe <vPortFree+0xae>
 80167c8:	693b      	ldr	r3, [r7, #16]
 80167ca:	685a      	ldr	r2, [r3, #4]
 80167cc:	4b0e      	ldr	r3, [pc, #56]	; (8016808 <vPortFree+0xb8>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	43db      	mvns	r3, r3
 80167d2:	401a      	ands	r2, r3
 80167d4:	693b      	ldr	r3, [r7, #16]
 80167d6:	605a      	str	r2, [r3, #4]
 80167d8:	f7fe fbb4 	bl	8014f44 <vTaskSuspendAll>
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	685a      	ldr	r2, [r3, #4]
 80167e0:	4b0a      	ldr	r3, [pc, #40]	; (801680c <vPortFree+0xbc>)
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	4413      	add	r3, r2
 80167e6:	4a09      	ldr	r2, [pc, #36]	; (801680c <vPortFree+0xbc>)
 80167e8:	6013      	str	r3, [r2, #0]
 80167ea:	6938      	ldr	r0, [r7, #16]
 80167ec:	f000 f874 	bl	80168d8 <prvInsertBlockIntoFreeList>
 80167f0:	4b07      	ldr	r3, [pc, #28]	; (8016810 <vPortFree+0xc0>)
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	3301      	adds	r3, #1
 80167f6:	4a06      	ldr	r2, [pc, #24]	; (8016810 <vPortFree+0xc0>)
 80167f8:	6013      	str	r3, [r2, #0]
 80167fa:	f7fe fbb1 	bl	8014f60 <xTaskResumeAll>
 80167fe:	bf00      	nop
 8016800:	3718      	adds	r7, #24
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}
 8016806:	bf00      	nop
 8016808:	24005a5c 	.word	0x24005a5c
 801680c:	24005a4c 	.word	0x24005a4c
 8016810:	24005a58 	.word	0x24005a58

08016814 <prvHeapInit>:
 8016814:	b480      	push	{r7}
 8016816:	b085      	sub	sp, #20
 8016818:	af00      	add	r7, sp, #0
 801681a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801681e:	60bb      	str	r3, [r7, #8]
 8016820:	4b27      	ldr	r3, [pc, #156]	; (80168c0 <prvHeapInit+0xac>)
 8016822:	60fb      	str	r3, [r7, #12]
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	f003 0307 	and.w	r3, r3, #7
 801682a:	2b00      	cmp	r3, #0
 801682c:	d00c      	beq.n	8016848 <prvHeapInit+0x34>
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	3307      	adds	r3, #7
 8016832:	60fb      	str	r3, [r7, #12]
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	f023 0307 	bic.w	r3, r3, #7
 801683a:	60fb      	str	r3, [r7, #12]
 801683c:	68ba      	ldr	r2, [r7, #8]
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	1ad3      	subs	r3, r2, r3
 8016842:	4a1f      	ldr	r2, [pc, #124]	; (80168c0 <prvHeapInit+0xac>)
 8016844:	4413      	add	r3, r2
 8016846:	60bb      	str	r3, [r7, #8]
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	607b      	str	r3, [r7, #4]
 801684c:	4a1d      	ldr	r2, [pc, #116]	; (80168c4 <prvHeapInit+0xb0>)
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	6013      	str	r3, [r2, #0]
 8016852:	4b1c      	ldr	r3, [pc, #112]	; (80168c4 <prvHeapInit+0xb0>)
 8016854:	2200      	movs	r2, #0
 8016856:	605a      	str	r2, [r3, #4]
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	68ba      	ldr	r2, [r7, #8]
 801685c:	4413      	add	r3, r2
 801685e:	60fb      	str	r3, [r7, #12]
 8016860:	2208      	movs	r2, #8
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	1a9b      	subs	r3, r3, r2
 8016866:	60fb      	str	r3, [r7, #12]
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	f023 0307 	bic.w	r3, r3, #7
 801686e:	60fb      	str	r3, [r7, #12]
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	4a15      	ldr	r2, [pc, #84]	; (80168c8 <prvHeapInit+0xb4>)
 8016874:	6013      	str	r3, [r2, #0]
 8016876:	4b14      	ldr	r3, [pc, #80]	; (80168c8 <prvHeapInit+0xb4>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	2200      	movs	r2, #0
 801687c:	605a      	str	r2, [r3, #4]
 801687e:	4b12      	ldr	r3, [pc, #72]	; (80168c8 <prvHeapInit+0xb4>)
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	2200      	movs	r2, #0
 8016884:	601a      	str	r2, [r3, #0]
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	603b      	str	r3, [r7, #0]
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	68fa      	ldr	r2, [r7, #12]
 801688e:	1ad2      	subs	r2, r2, r3
 8016890:	683b      	ldr	r3, [r7, #0]
 8016892:	605a      	str	r2, [r3, #4]
 8016894:	4b0c      	ldr	r3, [pc, #48]	; (80168c8 <prvHeapInit+0xb4>)
 8016896:	681a      	ldr	r2, [r3, #0]
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	601a      	str	r2, [r3, #0]
 801689c:	683b      	ldr	r3, [r7, #0]
 801689e:	685b      	ldr	r3, [r3, #4]
 80168a0:	4a0a      	ldr	r2, [pc, #40]	; (80168cc <prvHeapInit+0xb8>)
 80168a2:	6013      	str	r3, [r2, #0]
 80168a4:	683b      	ldr	r3, [r7, #0]
 80168a6:	685b      	ldr	r3, [r3, #4]
 80168a8:	4a09      	ldr	r2, [pc, #36]	; (80168d0 <prvHeapInit+0xbc>)
 80168aa:	6013      	str	r3, [r2, #0]
 80168ac:	4b09      	ldr	r3, [pc, #36]	; (80168d4 <prvHeapInit+0xc0>)
 80168ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80168b2:	601a      	str	r2, [r3, #0]
 80168b4:	bf00      	nop
 80168b6:	3714      	adds	r7, #20
 80168b8:	46bd      	mov	sp, r7
 80168ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168be:	4770      	bx	lr
 80168c0:	24001e40 	.word	0x24001e40
 80168c4:	24005a40 	.word	0x24005a40
 80168c8:	24005a48 	.word	0x24005a48
 80168cc:	24005a50 	.word	0x24005a50
 80168d0:	24005a4c 	.word	0x24005a4c
 80168d4:	24005a5c 	.word	0x24005a5c

080168d8 <prvInsertBlockIntoFreeList>:
 80168d8:	b480      	push	{r7}
 80168da:	b085      	sub	sp, #20
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
 80168e0:	4b28      	ldr	r3, [pc, #160]	; (8016984 <prvInsertBlockIntoFreeList+0xac>)
 80168e2:	60fb      	str	r3, [r7, #12]
 80168e4:	e002      	b.n	80168ec <prvInsertBlockIntoFreeList+0x14>
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	60fb      	str	r3, [r7, #12]
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	687a      	ldr	r2, [r7, #4]
 80168f2:	429a      	cmp	r2, r3
 80168f4:	d8f7      	bhi.n	80168e6 <prvInsertBlockIntoFreeList+0xe>
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	60bb      	str	r3, [r7, #8]
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	685b      	ldr	r3, [r3, #4]
 80168fe:	68ba      	ldr	r2, [r7, #8]
 8016900:	4413      	add	r3, r2
 8016902:	687a      	ldr	r2, [r7, #4]
 8016904:	429a      	cmp	r2, r3
 8016906:	d108      	bne.n	801691a <prvInsertBlockIntoFreeList+0x42>
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	685a      	ldr	r2, [r3, #4]
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	685b      	ldr	r3, [r3, #4]
 8016910:	441a      	add	r2, r3
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	605a      	str	r2, [r3, #4]
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	607b      	str	r3, [r7, #4]
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	60bb      	str	r3, [r7, #8]
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	685b      	ldr	r3, [r3, #4]
 8016922:	68ba      	ldr	r2, [r7, #8]
 8016924:	441a      	add	r2, r3
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	429a      	cmp	r2, r3
 801692c:	d118      	bne.n	8016960 <prvInsertBlockIntoFreeList+0x88>
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	681a      	ldr	r2, [r3, #0]
 8016932:	4b15      	ldr	r3, [pc, #84]	; (8016988 <prvInsertBlockIntoFreeList+0xb0>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	429a      	cmp	r2, r3
 8016938:	d00d      	beq.n	8016956 <prvInsertBlockIntoFreeList+0x7e>
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	685a      	ldr	r2, [r3, #4]
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	685b      	ldr	r3, [r3, #4]
 8016944:	441a      	add	r2, r3
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	605a      	str	r2, [r3, #4]
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	681a      	ldr	r2, [r3, #0]
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	601a      	str	r2, [r3, #0]
 8016954:	e008      	b.n	8016968 <prvInsertBlockIntoFreeList+0x90>
 8016956:	4b0c      	ldr	r3, [pc, #48]	; (8016988 <prvInsertBlockIntoFreeList+0xb0>)
 8016958:	681a      	ldr	r2, [r3, #0]
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	601a      	str	r2, [r3, #0]
 801695e:	e003      	b.n	8016968 <prvInsertBlockIntoFreeList+0x90>
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	681a      	ldr	r2, [r3, #0]
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	601a      	str	r2, [r3, #0]
 8016968:	68fa      	ldr	r2, [r7, #12]
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	429a      	cmp	r2, r3
 801696e:	d002      	beq.n	8016976 <prvInsertBlockIntoFreeList+0x9e>
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	687a      	ldr	r2, [r7, #4]
 8016974:	601a      	str	r2, [r3, #0]
 8016976:	bf00      	nop
 8016978:	3714      	adds	r7, #20
 801697a:	46bd      	mov	sp, r7
 801697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016980:	4770      	bx	lr
 8016982:	bf00      	nop
 8016984:	24005a40 	.word	0x24005a40
 8016988:	24005a48 	.word	0x24005a48

0801698c <__errno>:
 801698c:	4b01      	ldr	r3, [pc, #4]	; (8016994 <__errno+0x8>)
 801698e:	6818      	ldr	r0, [r3, #0]
 8016990:	4770      	bx	lr
 8016992:	bf00      	nop
 8016994:	240000a4 	.word	0x240000a4

08016998 <__libc_init_array>:
 8016998:	b570      	push	{r4, r5, r6, lr}
 801699a:	4d0d      	ldr	r5, [pc, #52]	; (80169d0 <__libc_init_array+0x38>)
 801699c:	4c0d      	ldr	r4, [pc, #52]	; (80169d4 <__libc_init_array+0x3c>)
 801699e:	1b64      	subs	r4, r4, r5
 80169a0:	10a4      	asrs	r4, r4, #2
 80169a2:	2600      	movs	r6, #0
 80169a4:	42a6      	cmp	r6, r4
 80169a6:	d109      	bne.n	80169bc <__libc_init_array+0x24>
 80169a8:	4d0b      	ldr	r5, [pc, #44]	; (80169d8 <__libc_init_array+0x40>)
 80169aa:	4c0c      	ldr	r4, [pc, #48]	; (80169dc <__libc_init_array+0x44>)
 80169ac:	f000 fd3c 	bl	8017428 <_init>
 80169b0:	1b64      	subs	r4, r4, r5
 80169b2:	10a4      	asrs	r4, r4, #2
 80169b4:	2600      	movs	r6, #0
 80169b6:	42a6      	cmp	r6, r4
 80169b8:	d105      	bne.n	80169c6 <__libc_init_array+0x2e>
 80169ba:	bd70      	pop	{r4, r5, r6, pc}
 80169bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80169c0:	4798      	blx	r3
 80169c2:	3601      	adds	r6, #1
 80169c4:	e7ee      	b.n	80169a4 <__libc_init_array+0xc>
 80169c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80169ca:	4798      	blx	r3
 80169cc:	3601      	adds	r6, #1
 80169ce:	e7f2      	b.n	80169b6 <__libc_init_array+0x1e>
 80169d0:	0801787c 	.word	0x0801787c
 80169d4:	0801787c 	.word	0x0801787c
 80169d8:	0801787c 	.word	0x0801787c
 80169dc:	08017880 	.word	0x08017880

080169e0 <malloc>:
 80169e0:	4b02      	ldr	r3, [pc, #8]	; (80169ec <malloc+0xc>)
 80169e2:	4601      	mov	r1, r0
 80169e4:	6818      	ldr	r0, [r3, #0]
 80169e6:	f000 b88d 	b.w	8016b04 <_malloc_r>
 80169ea:	bf00      	nop
 80169ec:	240000a4 	.word	0x240000a4

080169f0 <free>:
 80169f0:	4b02      	ldr	r3, [pc, #8]	; (80169fc <free+0xc>)
 80169f2:	4601      	mov	r1, r0
 80169f4:	6818      	ldr	r0, [r3, #0]
 80169f6:	f000 b819 	b.w	8016a2c <_free_r>
 80169fa:	bf00      	nop
 80169fc:	240000a4 	.word	0x240000a4

08016a00 <memcpy>:
 8016a00:	440a      	add	r2, r1
 8016a02:	4291      	cmp	r1, r2
 8016a04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016a08:	d100      	bne.n	8016a0c <memcpy+0xc>
 8016a0a:	4770      	bx	lr
 8016a0c:	b510      	push	{r4, lr}
 8016a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016a16:	4291      	cmp	r1, r2
 8016a18:	d1f9      	bne.n	8016a0e <memcpy+0xe>
 8016a1a:	bd10      	pop	{r4, pc}

08016a1c <memset>:
 8016a1c:	4402      	add	r2, r0
 8016a1e:	4603      	mov	r3, r0
 8016a20:	4293      	cmp	r3, r2
 8016a22:	d100      	bne.n	8016a26 <memset+0xa>
 8016a24:	4770      	bx	lr
 8016a26:	f803 1b01 	strb.w	r1, [r3], #1
 8016a2a:	e7f9      	b.n	8016a20 <memset+0x4>

08016a2c <_free_r>:
 8016a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a2e:	2900      	cmp	r1, #0
 8016a30:	d044      	beq.n	8016abc <_free_r+0x90>
 8016a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a36:	9001      	str	r0, [sp, #4]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8016a3e:	bfb8      	it	lt
 8016a40:	18e4      	addlt	r4, r4, r3
 8016a42:	f000 fc39 	bl	80172b8 <__malloc_lock>
 8016a46:	4a1e      	ldr	r2, [pc, #120]	; (8016ac0 <_free_r+0x94>)
 8016a48:	9801      	ldr	r0, [sp, #4]
 8016a4a:	6813      	ldr	r3, [r2, #0]
 8016a4c:	b933      	cbnz	r3, 8016a5c <_free_r+0x30>
 8016a4e:	6063      	str	r3, [r4, #4]
 8016a50:	6014      	str	r4, [r2, #0]
 8016a52:	b003      	add	sp, #12
 8016a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a58:	f000 bc34 	b.w	80172c4 <__malloc_unlock>
 8016a5c:	42a3      	cmp	r3, r4
 8016a5e:	d908      	bls.n	8016a72 <_free_r+0x46>
 8016a60:	6825      	ldr	r5, [r4, #0]
 8016a62:	1961      	adds	r1, r4, r5
 8016a64:	428b      	cmp	r3, r1
 8016a66:	bf01      	itttt	eq
 8016a68:	6819      	ldreq	r1, [r3, #0]
 8016a6a:	685b      	ldreq	r3, [r3, #4]
 8016a6c:	1949      	addeq	r1, r1, r5
 8016a6e:	6021      	streq	r1, [r4, #0]
 8016a70:	e7ed      	b.n	8016a4e <_free_r+0x22>
 8016a72:	461a      	mov	r2, r3
 8016a74:	685b      	ldr	r3, [r3, #4]
 8016a76:	b10b      	cbz	r3, 8016a7c <_free_r+0x50>
 8016a78:	42a3      	cmp	r3, r4
 8016a7a:	d9fa      	bls.n	8016a72 <_free_r+0x46>
 8016a7c:	6811      	ldr	r1, [r2, #0]
 8016a7e:	1855      	adds	r5, r2, r1
 8016a80:	42a5      	cmp	r5, r4
 8016a82:	d10b      	bne.n	8016a9c <_free_r+0x70>
 8016a84:	6824      	ldr	r4, [r4, #0]
 8016a86:	4421      	add	r1, r4
 8016a88:	1854      	adds	r4, r2, r1
 8016a8a:	42a3      	cmp	r3, r4
 8016a8c:	6011      	str	r1, [r2, #0]
 8016a8e:	d1e0      	bne.n	8016a52 <_free_r+0x26>
 8016a90:	681c      	ldr	r4, [r3, #0]
 8016a92:	685b      	ldr	r3, [r3, #4]
 8016a94:	6053      	str	r3, [r2, #4]
 8016a96:	4421      	add	r1, r4
 8016a98:	6011      	str	r1, [r2, #0]
 8016a9a:	e7da      	b.n	8016a52 <_free_r+0x26>
 8016a9c:	d902      	bls.n	8016aa4 <_free_r+0x78>
 8016a9e:	230c      	movs	r3, #12
 8016aa0:	6003      	str	r3, [r0, #0]
 8016aa2:	e7d6      	b.n	8016a52 <_free_r+0x26>
 8016aa4:	6825      	ldr	r5, [r4, #0]
 8016aa6:	1961      	adds	r1, r4, r5
 8016aa8:	428b      	cmp	r3, r1
 8016aaa:	bf04      	itt	eq
 8016aac:	6819      	ldreq	r1, [r3, #0]
 8016aae:	685b      	ldreq	r3, [r3, #4]
 8016ab0:	6063      	str	r3, [r4, #4]
 8016ab2:	bf04      	itt	eq
 8016ab4:	1949      	addeq	r1, r1, r5
 8016ab6:	6021      	streq	r1, [r4, #0]
 8016ab8:	6054      	str	r4, [r2, #4]
 8016aba:	e7ca      	b.n	8016a52 <_free_r+0x26>
 8016abc:	b003      	add	sp, #12
 8016abe:	bd30      	pop	{r4, r5, pc}
 8016ac0:	24005a60 	.word	0x24005a60

08016ac4 <sbrk_aligned>:
 8016ac4:	b570      	push	{r4, r5, r6, lr}
 8016ac6:	4e0e      	ldr	r6, [pc, #56]	; (8016b00 <sbrk_aligned+0x3c>)
 8016ac8:	460c      	mov	r4, r1
 8016aca:	6831      	ldr	r1, [r6, #0]
 8016acc:	4605      	mov	r5, r0
 8016ace:	b911      	cbnz	r1, 8016ad6 <sbrk_aligned+0x12>
 8016ad0:	f000 f902 	bl	8016cd8 <_sbrk_r>
 8016ad4:	6030      	str	r0, [r6, #0]
 8016ad6:	4621      	mov	r1, r4
 8016ad8:	4628      	mov	r0, r5
 8016ada:	f000 f8fd 	bl	8016cd8 <_sbrk_r>
 8016ade:	1c43      	adds	r3, r0, #1
 8016ae0:	d00a      	beq.n	8016af8 <sbrk_aligned+0x34>
 8016ae2:	1cc4      	adds	r4, r0, #3
 8016ae4:	f024 0403 	bic.w	r4, r4, #3
 8016ae8:	42a0      	cmp	r0, r4
 8016aea:	d007      	beq.n	8016afc <sbrk_aligned+0x38>
 8016aec:	1a21      	subs	r1, r4, r0
 8016aee:	4628      	mov	r0, r5
 8016af0:	f000 f8f2 	bl	8016cd8 <_sbrk_r>
 8016af4:	3001      	adds	r0, #1
 8016af6:	d101      	bne.n	8016afc <sbrk_aligned+0x38>
 8016af8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016afc:	4620      	mov	r0, r4
 8016afe:	bd70      	pop	{r4, r5, r6, pc}
 8016b00:	24005a64 	.word	0x24005a64

08016b04 <_malloc_r>:
 8016b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b08:	1ccd      	adds	r5, r1, #3
 8016b0a:	f025 0503 	bic.w	r5, r5, #3
 8016b0e:	3508      	adds	r5, #8
 8016b10:	2d0c      	cmp	r5, #12
 8016b12:	bf38      	it	cc
 8016b14:	250c      	movcc	r5, #12
 8016b16:	2d00      	cmp	r5, #0
 8016b18:	4607      	mov	r7, r0
 8016b1a:	db01      	blt.n	8016b20 <_malloc_r+0x1c>
 8016b1c:	42a9      	cmp	r1, r5
 8016b1e:	d905      	bls.n	8016b2c <_malloc_r+0x28>
 8016b20:	230c      	movs	r3, #12
 8016b22:	603b      	str	r3, [r7, #0]
 8016b24:	2600      	movs	r6, #0
 8016b26:	4630      	mov	r0, r6
 8016b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b2c:	4e2e      	ldr	r6, [pc, #184]	; (8016be8 <_malloc_r+0xe4>)
 8016b2e:	f000 fbc3 	bl	80172b8 <__malloc_lock>
 8016b32:	6833      	ldr	r3, [r6, #0]
 8016b34:	461c      	mov	r4, r3
 8016b36:	bb34      	cbnz	r4, 8016b86 <_malloc_r+0x82>
 8016b38:	4629      	mov	r1, r5
 8016b3a:	4638      	mov	r0, r7
 8016b3c:	f7ff ffc2 	bl	8016ac4 <sbrk_aligned>
 8016b40:	1c43      	adds	r3, r0, #1
 8016b42:	4604      	mov	r4, r0
 8016b44:	d14d      	bne.n	8016be2 <_malloc_r+0xde>
 8016b46:	6834      	ldr	r4, [r6, #0]
 8016b48:	4626      	mov	r6, r4
 8016b4a:	2e00      	cmp	r6, #0
 8016b4c:	d140      	bne.n	8016bd0 <_malloc_r+0xcc>
 8016b4e:	6823      	ldr	r3, [r4, #0]
 8016b50:	4631      	mov	r1, r6
 8016b52:	4638      	mov	r0, r7
 8016b54:	eb04 0803 	add.w	r8, r4, r3
 8016b58:	f000 f8be 	bl	8016cd8 <_sbrk_r>
 8016b5c:	4580      	cmp	r8, r0
 8016b5e:	d13a      	bne.n	8016bd6 <_malloc_r+0xd2>
 8016b60:	6821      	ldr	r1, [r4, #0]
 8016b62:	3503      	adds	r5, #3
 8016b64:	1a6d      	subs	r5, r5, r1
 8016b66:	f025 0503 	bic.w	r5, r5, #3
 8016b6a:	3508      	adds	r5, #8
 8016b6c:	2d0c      	cmp	r5, #12
 8016b6e:	bf38      	it	cc
 8016b70:	250c      	movcc	r5, #12
 8016b72:	4629      	mov	r1, r5
 8016b74:	4638      	mov	r0, r7
 8016b76:	f7ff ffa5 	bl	8016ac4 <sbrk_aligned>
 8016b7a:	3001      	adds	r0, #1
 8016b7c:	d02b      	beq.n	8016bd6 <_malloc_r+0xd2>
 8016b7e:	6823      	ldr	r3, [r4, #0]
 8016b80:	442b      	add	r3, r5
 8016b82:	6023      	str	r3, [r4, #0]
 8016b84:	e00e      	b.n	8016ba4 <_malloc_r+0xa0>
 8016b86:	6822      	ldr	r2, [r4, #0]
 8016b88:	1b52      	subs	r2, r2, r5
 8016b8a:	d41e      	bmi.n	8016bca <_malloc_r+0xc6>
 8016b8c:	2a0b      	cmp	r2, #11
 8016b8e:	d916      	bls.n	8016bbe <_malloc_r+0xba>
 8016b90:	1961      	adds	r1, r4, r5
 8016b92:	42a3      	cmp	r3, r4
 8016b94:	6025      	str	r5, [r4, #0]
 8016b96:	bf18      	it	ne
 8016b98:	6059      	strne	r1, [r3, #4]
 8016b9a:	6863      	ldr	r3, [r4, #4]
 8016b9c:	bf08      	it	eq
 8016b9e:	6031      	streq	r1, [r6, #0]
 8016ba0:	5162      	str	r2, [r4, r5]
 8016ba2:	604b      	str	r3, [r1, #4]
 8016ba4:	4638      	mov	r0, r7
 8016ba6:	f104 060b 	add.w	r6, r4, #11
 8016baa:	f000 fb8b 	bl	80172c4 <__malloc_unlock>
 8016bae:	f026 0607 	bic.w	r6, r6, #7
 8016bb2:	1d23      	adds	r3, r4, #4
 8016bb4:	1af2      	subs	r2, r6, r3
 8016bb6:	d0b6      	beq.n	8016b26 <_malloc_r+0x22>
 8016bb8:	1b9b      	subs	r3, r3, r6
 8016bba:	50a3      	str	r3, [r4, r2]
 8016bbc:	e7b3      	b.n	8016b26 <_malloc_r+0x22>
 8016bbe:	6862      	ldr	r2, [r4, #4]
 8016bc0:	42a3      	cmp	r3, r4
 8016bc2:	bf0c      	ite	eq
 8016bc4:	6032      	streq	r2, [r6, #0]
 8016bc6:	605a      	strne	r2, [r3, #4]
 8016bc8:	e7ec      	b.n	8016ba4 <_malloc_r+0xa0>
 8016bca:	4623      	mov	r3, r4
 8016bcc:	6864      	ldr	r4, [r4, #4]
 8016bce:	e7b2      	b.n	8016b36 <_malloc_r+0x32>
 8016bd0:	4634      	mov	r4, r6
 8016bd2:	6876      	ldr	r6, [r6, #4]
 8016bd4:	e7b9      	b.n	8016b4a <_malloc_r+0x46>
 8016bd6:	230c      	movs	r3, #12
 8016bd8:	603b      	str	r3, [r7, #0]
 8016bda:	4638      	mov	r0, r7
 8016bdc:	f000 fb72 	bl	80172c4 <__malloc_unlock>
 8016be0:	e7a1      	b.n	8016b26 <_malloc_r+0x22>
 8016be2:	6025      	str	r5, [r4, #0]
 8016be4:	e7de      	b.n	8016ba4 <_malloc_r+0xa0>
 8016be6:	bf00      	nop
 8016be8:	24005a60 	.word	0x24005a60

08016bec <_puts_r>:
 8016bec:	b570      	push	{r4, r5, r6, lr}
 8016bee:	460e      	mov	r6, r1
 8016bf0:	4605      	mov	r5, r0
 8016bf2:	b118      	cbz	r0, 8016bfc <_puts_r+0x10>
 8016bf4:	6983      	ldr	r3, [r0, #24]
 8016bf6:	b90b      	cbnz	r3, 8016bfc <_puts_r+0x10>
 8016bf8:	f000 fa58 	bl	80170ac <__sinit>
 8016bfc:	69ab      	ldr	r3, [r5, #24]
 8016bfe:	68ac      	ldr	r4, [r5, #8]
 8016c00:	b913      	cbnz	r3, 8016c08 <_puts_r+0x1c>
 8016c02:	4628      	mov	r0, r5
 8016c04:	f000 fa52 	bl	80170ac <__sinit>
 8016c08:	4b2c      	ldr	r3, [pc, #176]	; (8016cbc <_puts_r+0xd0>)
 8016c0a:	429c      	cmp	r4, r3
 8016c0c:	d120      	bne.n	8016c50 <_puts_r+0x64>
 8016c0e:	686c      	ldr	r4, [r5, #4]
 8016c10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c12:	07db      	lsls	r3, r3, #31
 8016c14:	d405      	bmi.n	8016c22 <_puts_r+0x36>
 8016c16:	89a3      	ldrh	r3, [r4, #12]
 8016c18:	0598      	lsls	r0, r3, #22
 8016c1a:	d402      	bmi.n	8016c22 <_puts_r+0x36>
 8016c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c1e:	f000 fae3 	bl	80171e8 <__retarget_lock_acquire_recursive>
 8016c22:	89a3      	ldrh	r3, [r4, #12]
 8016c24:	0719      	lsls	r1, r3, #28
 8016c26:	d51d      	bpl.n	8016c64 <_puts_r+0x78>
 8016c28:	6923      	ldr	r3, [r4, #16]
 8016c2a:	b1db      	cbz	r3, 8016c64 <_puts_r+0x78>
 8016c2c:	3e01      	subs	r6, #1
 8016c2e:	68a3      	ldr	r3, [r4, #8]
 8016c30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016c34:	3b01      	subs	r3, #1
 8016c36:	60a3      	str	r3, [r4, #8]
 8016c38:	bb39      	cbnz	r1, 8016c8a <_puts_r+0x9e>
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	da38      	bge.n	8016cb0 <_puts_r+0xc4>
 8016c3e:	4622      	mov	r2, r4
 8016c40:	210a      	movs	r1, #10
 8016c42:	4628      	mov	r0, r5
 8016c44:	f000 f858 	bl	8016cf8 <__swbuf_r>
 8016c48:	3001      	adds	r0, #1
 8016c4a:	d011      	beq.n	8016c70 <_puts_r+0x84>
 8016c4c:	250a      	movs	r5, #10
 8016c4e:	e011      	b.n	8016c74 <_puts_r+0x88>
 8016c50:	4b1b      	ldr	r3, [pc, #108]	; (8016cc0 <_puts_r+0xd4>)
 8016c52:	429c      	cmp	r4, r3
 8016c54:	d101      	bne.n	8016c5a <_puts_r+0x6e>
 8016c56:	68ac      	ldr	r4, [r5, #8]
 8016c58:	e7da      	b.n	8016c10 <_puts_r+0x24>
 8016c5a:	4b1a      	ldr	r3, [pc, #104]	; (8016cc4 <_puts_r+0xd8>)
 8016c5c:	429c      	cmp	r4, r3
 8016c5e:	bf08      	it	eq
 8016c60:	68ec      	ldreq	r4, [r5, #12]
 8016c62:	e7d5      	b.n	8016c10 <_puts_r+0x24>
 8016c64:	4621      	mov	r1, r4
 8016c66:	4628      	mov	r0, r5
 8016c68:	f000 f898 	bl	8016d9c <__swsetup_r>
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	d0dd      	beq.n	8016c2c <_puts_r+0x40>
 8016c70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c76:	07da      	lsls	r2, r3, #31
 8016c78:	d405      	bmi.n	8016c86 <_puts_r+0x9a>
 8016c7a:	89a3      	ldrh	r3, [r4, #12]
 8016c7c:	059b      	lsls	r3, r3, #22
 8016c7e:	d402      	bmi.n	8016c86 <_puts_r+0x9a>
 8016c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c82:	f000 fab2 	bl	80171ea <__retarget_lock_release_recursive>
 8016c86:	4628      	mov	r0, r5
 8016c88:	bd70      	pop	{r4, r5, r6, pc}
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	da04      	bge.n	8016c98 <_puts_r+0xac>
 8016c8e:	69a2      	ldr	r2, [r4, #24]
 8016c90:	429a      	cmp	r2, r3
 8016c92:	dc06      	bgt.n	8016ca2 <_puts_r+0xb6>
 8016c94:	290a      	cmp	r1, #10
 8016c96:	d004      	beq.n	8016ca2 <_puts_r+0xb6>
 8016c98:	6823      	ldr	r3, [r4, #0]
 8016c9a:	1c5a      	adds	r2, r3, #1
 8016c9c:	6022      	str	r2, [r4, #0]
 8016c9e:	7019      	strb	r1, [r3, #0]
 8016ca0:	e7c5      	b.n	8016c2e <_puts_r+0x42>
 8016ca2:	4622      	mov	r2, r4
 8016ca4:	4628      	mov	r0, r5
 8016ca6:	f000 f827 	bl	8016cf8 <__swbuf_r>
 8016caa:	3001      	adds	r0, #1
 8016cac:	d1bf      	bne.n	8016c2e <_puts_r+0x42>
 8016cae:	e7df      	b.n	8016c70 <_puts_r+0x84>
 8016cb0:	6823      	ldr	r3, [r4, #0]
 8016cb2:	250a      	movs	r5, #10
 8016cb4:	1c5a      	adds	r2, r3, #1
 8016cb6:	6022      	str	r2, [r4, #0]
 8016cb8:	701d      	strb	r5, [r3, #0]
 8016cba:	e7db      	b.n	8016c74 <_puts_r+0x88>
 8016cbc:	08017834 	.word	0x08017834
 8016cc0:	08017854 	.word	0x08017854
 8016cc4:	08017814 	.word	0x08017814

08016cc8 <puts>:
 8016cc8:	4b02      	ldr	r3, [pc, #8]	; (8016cd4 <puts+0xc>)
 8016cca:	4601      	mov	r1, r0
 8016ccc:	6818      	ldr	r0, [r3, #0]
 8016cce:	f7ff bf8d 	b.w	8016bec <_puts_r>
 8016cd2:	bf00      	nop
 8016cd4:	240000a4 	.word	0x240000a4

08016cd8 <_sbrk_r>:
 8016cd8:	b538      	push	{r3, r4, r5, lr}
 8016cda:	4d06      	ldr	r5, [pc, #24]	; (8016cf4 <_sbrk_r+0x1c>)
 8016cdc:	2300      	movs	r3, #0
 8016cde:	4604      	mov	r4, r0
 8016ce0:	4608      	mov	r0, r1
 8016ce2:	602b      	str	r3, [r5, #0]
 8016ce4:	f7ec ff74 	bl	8003bd0 <_sbrk>
 8016ce8:	1c43      	adds	r3, r0, #1
 8016cea:	d102      	bne.n	8016cf2 <_sbrk_r+0x1a>
 8016cec:	682b      	ldr	r3, [r5, #0]
 8016cee:	b103      	cbz	r3, 8016cf2 <_sbrk_r+0x1a>
 8016cf0:	6023      	str	r3, [r4, #0]
 8016cf2:	bd38      	pop	{r3, r4, r5, pc}
 8016cf4:	24005a6c 	.word	0x24005a6c

08016cf8 <__swbuf_r>:
 8016cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cfa:	460e      	mov	r6, r1
 8016cfc:	4614      	mov	r4, r2
 8016cfe:	4605      	mov	r5, r0
 8016d00:	b118      	cbz	r0, 8016d0a <__swbuf_r+0x12>
 8016d02:	6983      	ldr	r3, [r0, #24]
 8016d04:	b90b      	cbnz	r3, 8016d0a <__swbuf_r+0x12>
 8016d06:	f000 f9d1 	bl	80170ac <__sinit>
 8016d0a:	4b21      	ldr	r3, [pc, #132]	; (8016d90 <__swbuf_r+0x98>)
 8016d0c:	429c      	cmp	r4, r3
 8016d0e:	d12b      	bne.n	8016d68 <__swbuf_r+0x70>
 8016d10:	686c      	ldr	r4, [r5, #4]
 8016d12:	69a3      	ldr	r3, [r4, #24]
 8016d14:	60a3      	str	r3, [r4, #8]
 8016d16:	89a3      	ldrh	r3, [r4, #12]
 8016d18:	071a      	lsls	r2, r3, #28
 8016d1a:	d52f      	bpl.n	8016d7c <__swbuf_r+0x84>
 8016d1c:	6923      	ldr	r3, [r4, #16]
 8016d1e:	b36b      	cbz	r3, 8016d7c <__swbuf_r+0x84>
 8016d20:	6923      	ldr	r3, [r4, #16]
 8016d22:	6820      	ldr	r0, [r4, #0]
 8016d24:	1ac0      	subs	r0, r0, r3
 8016d26:	6963      	ldr	r3, [r4, #20]
 8016d28:	b2f6      	uxtb	r6, r6
 8016d2a:	4283      	cmp	r3, r0
 8016d2c:	4637      	mov	r7, r6
 8016d2e:	dc04      	bgt.n	8016d3a <__swbuf_r+0x42>
 8016d30:	4621      	mov	r1, r4
 8016d32:	4628      	mov	r0, r5
 8016d34:	f000 f926 	bl	8016f84 <_fflush_r>
 8016d38:	bb30      	cbnz	r0, 8016d88 <__swbuf_r+0x90>
 8016d3a:	68a3      	ldr	r3, [r4, #8]
 8016d3c:	3b01      	subs	r3, #1
 8016d3e:	60a3      	str	r3, [r4, #8]
 8016d40:	6823      	ldr	r3, [r4, #0]
 8016d42:	1c5a      	adds	r2, r3, #1
 8016d44:	6022      	str	r2, [r4, #0]
 8016d46:	701e      	strb	r6, [r3, #0]
 8016d48:	6963      	ldr	r3, [r4, #20]
 8016d4a:	3001      	adds	r0, #1
 8016d4c:	4283      	cmp	r3, r0
 8016d4e:	d004      	beq.n	8016d5a <__swbuf_r+0x62>
 8016d50:	89a3      	ldrh	r3, [r4, #12]
 8016d52:	07db      	lsls	r3, r3, #31
 8016d54:	d506      	bpl.n	8016d64 <__swbuf_r+0x6c>
 8016d56:	2e0a      	cmp	r6, #10
 8016d58:	d104      	bne.n	8016d64 <__swbuf_r+0x6c>
 8016d5a:	4621      	mov	r1, r4
 8016d5c:	4628      	mov	r0, r5
 8016d5e:	f000 f911 	bl	8016f84 <_fflush_r>
 8016d62:	b988      	cbnz	r0, 8016d88 <__swbuf_r+0x90>
 8016d64:	4638      	mov	r0, r7
 8016d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d68:	4b0a      	ldr	r3, [pc, #40]	; (8016d94 <__swbuf_r+0x9c>)
 8016d6a:	429c      	cmp	r4, r3
 8016d6c:	d101      	bne.n	8016d72 <__swbuf_r+0x7a>
 8016d6e:	68ac      	ldr	r4, [r5, #8]
 8016d70:	e7cf      	b.n	8016d12 <__swbuf_r+0x1a>
 8016d72:	4b09      	ldr	r3, [pc, #36]	; (8016d98 <__swbuf_r+0xa0>)
 8016d74:	429c      	cmp	r4, r3
 8016d76:	bf08      	it	eq
 8016d78:	68ec      	ldreq	r4, [r5, #12]
 8016d7a:	e7ca      	b.n	8016d12 <__swbuf_r+0x1a>
 8016d7c:	4621      	mov	r1, r4
 8016d7e:	4628      	mov	r0, r5
 8016d80:	f000 f80c 	bl	8016d9c <__swsetup_r>
 8016d84:	2800      	cmp	r0, #0
 8016d86:	d0cb      	beq.n	8016d20 <__swbuf_r+0x28>
 8016d88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016d8c:	e7ea      	b.n	8016d64 <__swbuf_r+0x6c>
 8016d8e:	bf00      	nop
 8016d90:	08017834 	.word	0x08017834
 8016d94:	08017854 	.word	0x08017854
 8016d98:	08017814 	.word	0x08017814

08016d9c <__swsetup_r>:
 8016d9c:	4b32      	ldr	r3, [pc, #200]	; (8016e68 <__swsetup_r+0xcc>)
 8016d9e:	b570      	push	{r4, r5, r6, lr}
 8016da0:	681d      	ldr	r5, [r3, #0]
 8016da2:	4606      	mov	r6, r0
 8016da4:	460c      	mov	r4, r1
 8016da6:	b125      	cbz	r5, 8016db2 <__swsetup_r+0x16>
 8016da8:	69ab      	ldr	r3, [r5, #24]
 8016daa:	b913      	cbnz	r3, 8016db2 <__swsetup_r+0x16>
 8016dac:	4628      	mov	r0, r5
 8016dae:	f000 f97d 	bl	80170ac <__sinit>
 8016db2:	4b2e      	ldr	r3, [pc, #184]	; (8016e6c <__swsetup_r+0xd0>)
 8016db4:	429c      	cmp	r4, r3
 8016db6:	d10f      	bne.n	8016dd8 <__swsetup_r+0x3c>
 8016db8:	686c      	ldr	r4, [r5, #4]
 8016dba:	89a3      	ldrh	r3, [r4, #12]
 8016dbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016dc0:	0719      	lsls	r1, r3, #28
 8016dc2:	d42c      	bmi.n	8016e1e <__swsetup_r+0x82>
 8016dc4:	06dd      	lsls	r5, r3, #27
 8016dc6:	d411      	bmi.n	8016dec <__swsetup_r+0x50>
 8016dc8:	2309      	movs	r3, #9
 8016dca:	6033      	str	r3, [r6, #0]
 8016dcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016dd0:	81a3      	strh	r3, [r4, #12]
 8016dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016dd6:	e03e      	b.n	8016e56 <__swsetup_r+0xba>
 8016dd8:	4b25      	ldr	r3, [pc, #148]	; (8016e70 <__swsetup_r+0xd4>)
 8016dda:	429c      	cmp	r4, r3
 8016ddc:	d101      	bne.n	8016de2 <__swsetup_r+0x46>
 8016dde:	68ac      	ldr	r4, [r5, #8]
 8016de0:	e7eb      	b.n	8016dba <__swsetup_r+0x1e>
 8016de2:	4b24      	ldr	r3, [pc, #144]	; (8016e74 <__swsetup_r+0xd8>)
 8016de4:	429c      	cmp	r4, r3
 8016de6:	bf08      	it	eq
 8016de8:	68ec      	ldreq	r4, [r5, #12]
 8016dea:	e7e6      	b.n	8016dba <__swsetup_r+0x1e>
 8016dec:	0758      	lsls	r0, r3, #29
 8016dee:	d512      	bpl.n	8016e16 <__swsetup_r+0x7a>
 8016df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016df2:	b141      	cbz	r1, 8016e06 <__swsetup_r+0x6a>
 8016df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016df8:	4299      	cmp	r1, r3
 8016dfa:	d002      	beq.n	8016e02 <__swsetup_r+0x66>
 8016dfc:	4630      	mov	r0, r6
 8016dfe:	f7ff fe15 	bl	8016a2c <_free_r>
 8016e02:	2300      	movs	r3, #0
 8016e04:	6363      	str	r3, [r4, #52]	; 0x34
 8016e06:	89a3      	ldrh	r3, [r4, #12]
 8016e08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016e0c:	81a3      	strh	r3, [r4, #12]
 8016e0e:	2300      	movs	r3, #0
 8016e10:	6063      	str	r3, [r4, #4]
 8016e12:	6923      	ldr	r3, [r4, #16]
 8016e14:	6023      	str	r3, [r4, #0]
 8016e16:	89a3      	ldrh	r3, [r4, #12]
 8016e18:	f043 0308 	orr.w	r3, r3, #8
 8016e1c:	81a3      	strh	r3, [r4, #12]
 8016e1e:	6923      	ldr	r3, [r4, #16]
 8016e20:	b94b      	cbnz	r3, 8016e36 <__swsetup_r+0x9a>
 8016e22:	89a3      	ldrh	r3, [r4, #12]
 8016e24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e2c:	d003      	beq.n	8016e36 <__swsetup_r+0x9a>
 8016e2e:	4621      	mov	r1, r4
 8016e30:	4630      	mov	r0, r6
 8016e32:	f000 fa01 	bl	8017238 <__smakebuf_r>
 8016e36:	89a0      	ldrh	r0, [r4, #12]
 8016e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e3c:	f010 0301 	ands.w	r3, r0, #1
 8016e40:	d00a      	beq.n	8016e58 <__swsetup_r+0xbc>
 8016e42:	2300      	movs	r3, #0
 8016e44:	60a3      	str	r3, [r4, #8]
 8016e46:	6963      	ldr	r3, [r4, #20]
 8016e48:	425b      	negs	r3, r3
 8016e4a:	61a3      	str	r3, [r4, #24]
 8016e4c:	6923      	ldr	r3, [r4, #16]
 8016e4e:	b943      	cbnz	r3, 8016e62 <__swsetup_r+0xc6>
 8016e50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016e54:	d1ba      	bne.n	8016dcc <__swsetup_r+0x30>
 8016e56:	bd70      	pop	{r4, r5, r6, pc}
 8016e58:	0781      	lsls	r1, r0, #30
 8016e5a:	bf58      	it	pl
 8016e5c:	6963      	ldrpl	r3, [r4, #20]
 8016e5e:	60a3      	str	r3, [r4, #8]
 8016e60:	e7f4      	b.n	8016e4c <__swsetup_r+0xb0>
 8016e62:	2000      	movs	r0, #0
 8016e64:	e7f7      	b.n	8016e56 <__swsetup_r+0xba>
 8016e66:	bf00      	nop
 8016e68:	240000a4 	.word	0x240000a4
 8016e6c:	08017834 	.word	0x08017834
 8016e70:	08017854 	.word	0x08017854
 8016e74:	08017814 	.word	0x08017814

08016e78 <__sflush_r>:
 8016e78:	898a      	ldrh	r2, [r1, #12]
 8016e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e7e:	4605      	mov	r5, r0
 8016e80:	0710      	lsls	r0, r2, #28
 8016e82:	460c      	mov	r4, r1
 8016e84:	d458      	bmi.n	8016f38 <__sflush_r+0xc0>
 8016e86:	684b      	ldr	r3, [r1, #4]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	dc05      	bgt.n	8016e98 <__sflush_r+0x20>
 8016e8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	dc02      	bgt.n	8016e98 <__sflush_r+0x20>
 8016e92:	2000      	movs	r0, #0
 8016e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e9a:	2e00      	cmp	r6, #0
 8016e9c:	d0f9      	beq.n	8016e92 <__sflush_r+0x1a>
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016ea4:	682f      	ldr	r7, [r5, #0]
 8016ea6:	602b      	str	r3, [r5, #0]
 8016ea8:	d032      	beq.n	8016f10 <__sflush_r+0x98>
 8016eaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016eac:	89a3      	ldrh	r3, [r4, #12]
 8016eae:	075a      	lsls	r2, r3, #29
 8016eb0:	d505      	bpl.n	8016ebe <__sflush_r+0x46>
 8016eb2:	6863      	ldr	r3, [r4, #4]
 8016eb4:	1ac0      	subs	r0, r0, r3
 8016eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016eb8:	b10b      	cbz	r3, 8016ebe <__sflush_r+0x46>
 8016eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016ebc:	1ac0      	subs	r0, r0, r3
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	4602      	mov	r2, r0
 8016ec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ec4:	6a21      	ldr	r1, [r4, #32]
 8016ec6:	4628      	mov	r0, r5
 8016ec8:	47b0      	blx	r6
 8016eca:	1c43      	adds	r3, r0, #1
 8016ecc:	89a3      	ldrh	r3, [r4, #12]
 8016ece:	d106      	bne.n	8016ede <__sflush_r+0x66>
 8016ed0:	6829      	ldr	r1, [r5, #0]
 8016ed2:	291d      	cmp	r1, #29
 8016ed4:	d82c      	bhi.n	8016f30 <__sflush_r+0xb8>
 8016ed6:	4a2a      	ldr	r2, [pc, #168]	; (8016f80 <__sflush_r+0x108>)
 8016ed8:	40ca      	lsrs	r2, r1
 8016eda:	07d6      	lsls	r6, r2, #31
 8016edc:	d528      	bpl.n	8016f30 <__sflush_r+0xb8>
 8016ede:	2200      	movs	r2, #0
 8016ee0:	6062      	str	r2, [r4, #4]
 8016ee2:	04d9      	lsls	r1, r3, #19
 8016ee4:	6922      	ldr	r2, [r4, #16]
 8016ee6:	6022      	str	r2, [r4, #0]
 8016ee8:	d504      	bpl.n	8016ef4 <__sflush_r+0x7c>
 8016eea:	1c42      	adds	r2, r0, #1
 8016eec:	d101      	bne.n	8016ef2 <__sflush_r+0x7a>
 8016eee:	682b      	ldr	r3, [r5, #0]
 8016ef0:	b903      	cbnz	r3, 8016ef4 <__sflush_r+0x7c>
 8016ef2:	6560      	str	r0, [r4, #84]	; 0x54
 8016ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ef6:	602f      	str	r7, [r5, #0]
 8016ef8:	2900      	cmp	r1, #0
 8016efa:	d0ca      	beq.n	8016e92 <__sflush_r+0x1a>
 8016efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f00:	4299      	cmp	r1, r3
 8016f02:	d002      	beq.n	8016f0a <__sflush_r+0x92>
 8016f04:	4628      	mov	r0, r5
 8016f06:	f7ff fd91 	bl	8016a2c <_free_r>
 8016f0a:	2000      	movs	r0, #0
 8016f0c:	6360      	str	r0, [r4, #52]	; 0x34
 8016f0e:	e7c1      	b.n	8016e94 <__sflush_r+0x1c>
 8016f10:	6a21      	ldr	r1, [r4, #32]
 8016f12:	2301      	movs	r3, #1
 8016f14:	4628      	mov	r0, r5
 8016f16:	47b0      	blx	r6
 8016f18:	1c41      	adds	r1, r0, #1
 8016f1a:	d1c7      	bne.n	8016eac <__sflush_r+0x34>
 8016f1c:	682b      	ldr	r3, [r5, #0]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d0c4      	beq.n	8016eac <__sflush_r+0x34>
 8016f22:	2b1d      	cmp	r3, #29
 8016f24:	d001      	beq.n	8016f2a <__sflush_r+0xb2>
 8016f26:	2b16      	cmp	r3, #22
 8016f28:	d101      	bne.n	8016f2e <__sflush_r+0xb6>
 8016f2a:	602f      	str	r7, [r5, #0]
 8016f2c:	e7b1      	b.n	8016e92 <__sflush_r+0x1a>
 8016f2e:	89a3      	ldrh	r3, [r4, #12]
 8016f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f34:	81a3      	strh	r3, [r4, #12]
 8016f36:	e7ad      	b.n	8016e94 <__sflush_r+0x1c>
 8016f38:	690f      	ldr	r7, [r1, #16]
 8016f3a:	2f00      	cmp	r7, #0
 8016f3c:	d0a9      	beq.n	8016e92 <__sflush_r+0x1a>
 8016f3e:	0793      	lsls	r3, r2, #30
 8016f40:	680e      	ldr	r6, [r1, #0]
 8016f42:	bf08      	it	eq
 8016f44:	694b      	ldreq	r3, [r1, #20]
 8016f46:	600f      	str	r7, [r1, #0]
 8016f48:	bf18      	it	ne
 8016f4a:	2300      	movne	r3, #0
 8016f4c:	eba6 0807 	sub.w	r8, r6, r7
 8016f50:	608b      	str	r3, [r1, #8]
 8016f52:	f1b8 0f00 	cmp.w	r8, #0
 8016f56:	dd9c      	ble.n	8016e92 <__sflush_r+0x1a>
 8016f58:	6a21      	ldr	r1, [r4, #32]
 8016f5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f5c:	4643      	mov	r3, r8
 8016f5e:	463a      	mov	r2, r7
 8016f60:	4628      	mov	r0, r5
 8016f62:	47b0      	blx	r6
 8016f64:	2800      	cmp	r0, #0
 8016f66:	dc06      	bgt.n	8016f76 <__sflush_r+0xfe>
 8016f68:	89a3      	ldrh	r3, [r4, #12]
 8016f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f6e:	81a3      	strh	r3, [r4, #12]
 8016f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f74:	e78e      	b.n	8016e94 <__sflush_r+0x1c>
 8016f76:	4407      	add	r7, r0
 8016f78:	eba8 0800 	sub.w	r8, r8, r0
 8016f7c:	e7e9      	b.n	8016f52 <__sflush_r+0xda>
 8016f7e:	bf00      	nop
 8016f80:	20400001 	.word	0x20400001

08016f84 <_fflush_r>:
 8016f84:	b538      	push	{r3, r4, r5, lr}
 8016f86:	690b      	ldr	r3, [r1, #16]
 8016f88:	4605      	mov	r5, r0
 8016f8a:	460c      	mov	r4, r1
 8016f8c:	b913      	cbnz	r3, 8016f94 <_fflush_r+0x10>
 8016f8e:	2500      	movs	r5, #0
 8016f90:	4628      	mov	r0, r5
 8016f92:	bd38      	pop	{r3, r4, r5, pc}
 8016f94:	b118      	cbz	r0, 8016f9e <_fflush_r+0x1a>
 8016f96:	6983      	ldr	r3, [r0, #24]
 8016f98:	b90b      	cbnz	r3, 8016f9e <_fflush_r+0x1a>
 8016f9a:	f000 f887 	bl	80170ac <__sinit>
 8016f9e:	4b14      	ldr	r3, [pc, #80]	; (8016ff0 <_fflush_r+0x6c>)
 8016fa0:	429c      	cmp	r4, r3
 8016fa2:	d11b      	bne.n	8016fdc <_fflush_r+0x58>
 8016fa4:	686c      	ldr	r4, [r5, #4]
 8016fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d0ef      	beq.n	8016f8e <_fflush_r+0xa>
 8016fae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016fb0:	07d0      	lsls	r0, r2, #31
 8016fb2:	d404      	bmi.n	8016fbe <_fflush_r+0x3a>
 8016fb4:	0599      	lsls	r1, r3, #22
 8016fb6:	d402      	bmi.n	8016fbe <_fflush_r+0x3a>
 8016fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fba:	f000 f915 	bl	80171e8 <__retarget_lock_acquire_recursive>
 8016fbe:	4628      	mov	r0, r5
 8016fc0:	4621      	mov	r1, r4
 8016fc2:	f7ff ff59 	bl	8016e78 <__sflush_r>
 8016fc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016fc8:	07da      	lsls	r2, r3, #31
 8016fca:	4605      	mov	r5, r0
 8016fcc:	d4e0      	bmi.n	8016f90 <_fflush_r+0xc>
 8016fce:	89a3      	ldrh	r3, [r4, #12]
 8016fd0:	059b      	lsls	r3, r3, #22
 8016fd2:	d4dd      	bmi.n	8016f90 <_fflush_r+0xc>
 8016fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fd6:	f000 f908 	bl	80171ea <__retarget_lock_release_recursive>
 8016fda:	e7d9      	b.n	8016f90 <_fflush_r+0xc>
 8016fdc:	4b05      	ldr	r3, [pc, #20]	; (8016ff4 <_fflush_r+0x70>)
 8016fde:	429c      	cmp	r4, r3
 8016fe0:	d101      	bne.n	8016fe6 <_fflush_r+0x62>
 8016fe2:	68ac      	ldr	r4, [r5, #8]
 8016fe4:	e7df      	b.n	8016fa6 <_fflush_r+0x22>
 8016fe6:	4b04      	ldr	r3, [pc, #16]	; (8016ff8 <_fflush_r+0x74>)
 8016fe8:	429c      	cmp	r4, r3
 8016fea:	bf08      	it	eq
 8016fec:	68ec      	ldreq	r4, [r5, #12]
 8016fee:	e7da      	b.n	8016fa6 <_fflush_r+0x22>
 8016ff0:	08017834 	.word	0x08017834
 8016ff4:	08017854 	.word	0x08017854
 8016ff8:	08017814 	.word	0x08017814

08016ffc <std>:
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	b510      	push	{r4, lr}
 8017000:	4604      	mov	r4, r0
 8017002:	e9c0 3300 	strd	r3, r3, [r0]
 8017006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801700a:	6083      	str	r3, [r0, #8]
 801700c:	8181      	strh	r1, [r0, #12]
 801700e:	6643      	str	r3, [r0, #100]	; 0x64
 8017010:	81c2      	strh	r2, [r0, #14]
 8017012:	6183      	str	r3, [r0, #24]
 8017014:	4619      	mov	r1, r3
 8017016:	2208      	movs	r2, #8
 8017018:	305c      	adds	r0, #92	; 0x5c
 801701a:	f7ff fcff 	bl	8016a1c <memset>
 801701e:	4b05      	ldr	r3, [pc, #20]	; (8017034 <std+0x38>)
 8017020:	6263      	str	r3, [r4, #36]	; 0x24
 8017022:	4b05      	ldr	r3, [pc, #20]	; (8017038 <std+0x3c>)
 8017024:	62a3      	str	r3, [r4, #40]	; 0x28
 8017026:	4b05      	ldr	r3, [pc, #20]	; (801703c <std+0x40>)
 8017028:	62e3      	str	r3, [r4, #44]	; 0x2c
 801702a:	4b05      	ldr	r3, [pc, #20]	; (8017040 <std+0x44>)
 801702c:	6224      	str	r4, [r4, #32]
 801702e:	6323      	str	r3, [r4, #48]	; 0x30
 8017030:	bd10      	pop	{r4, pc}
 8017032:	bf00      	nop
 8017034:	080172d1 	.word	0x080172d1
 8017038:	080172f3 	.word	0x080172f3
 801703c:	0801732b 	.word	0x0801732b
 8017040:	0801734f 	.word	0x0801734f

08017044 <_cleanup_r>:
 8017044:	4901      	ldr	r1, [pc, #4]	; (801704c <_cleanup_r+0x8>)
 8017046:	f000 b8af 	b.w	80171a8 <_fwalk_reent>
 801704a:	bf00      	nop
 801704c:	08016f85 	.word	0x08016f85

08017050 <__sfmoreglue>:
 8017050:	b570      	push	{r4, r5, r6, lr}
 8017052:	2268      	movs	r2, #104	; 0x68
 8017054:	1e4d      	subs	r5, r1, #1
 8017056:	4355      	muls	r5, r2
 8017058:	460e      	mov	r6, r1
 801705a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801705e:	f7ff fd51 	bl	8016b04 <_malloc_r>
 8017062:	4604      	mov	r4, r0
 8017064:	b140      	cbz	r0, 8017078 <__sfmoreglue+0x28>
 8017066:	2100      	movs	r1, #0
 8017068:	e9c0 1600 	strd	r1, r6, [r0]
 801706c:	300c      	adds	r0, #12
 801706e:	60a0      	str	r0, [r4, #8]
 8017070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017074:	f7ff fcd2 	bl	8016a1c <memset>
 8017078:	4620      	mov	r0, r4
 801707a:	bd70      	pop	{r4, r5, r6, pc}

0801707c <__sfp_lock_acquire>:
 801707c:	4801      	ldr	r0, [pc, #4]	; (8017084 <__sfp_lock_acquire+0x8>)
 801707e:	f000 b8b3 	b.w	80171e8 <__retarget_lock_acquire_recursive>
 8017082:	bf00      	nop
 8017084:	24005a69 	.word	0x24005a69

08017088 <__sfp_lock_release>:
 8017088:	4801      	ldr	r0, [pc, #4]	; (8017090 <__sfp_lock_release+0x8>)
 801708a:	f000 b8ae 	b.w	80171ea <__retarget_lock_release_recursive>
 801708e:	bf00      	nop
 8017090:	24005a69 	.word	0x24005a69

08017094 <__sinit_lock_acquire>:
 8017094:	4801      	ldr	r0, [pc, #4]	; (801709c <__sinit_lock_acquire+0x8>)
 8017096:	f000 b8a7 	b.w	80171e8 <__retarget_lock_acquire_recursive>
 801709a:	bf00      	nop
 801709c:	24005a6a 	.word	0x24005a6a

080170a0 <__sinit_lock_release>:
 80170a0:	4801      	ldr	r0, [pc, #4]	; (80170a8 <__sinit_lock_release+0x8>)
 80170a2:	f000 b8a2 	b.w	80171ea <__retarget_lock_release_recursive>
 80170a6:	bf00      	nop
 80170a8:	24005a6a 	.word	0x24005a6a

080170ac <__sinit>:
 80170ac:	b510      	push	{r4, lr}
 80170ae:	4604      	mov	r4, r0
 80170b0:	f7ff fff0 	bl	8017094 <__sinit_lock_acquire>
 80170b4:	69a3      	ldr	r3, [r4, #24]
 80170b6:	b11b      	cbz	r3, 80170c0 <__sinit+0x14>
 80170b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170bc:	f7ff bff0 	b.w	80170a0 <__sinit_lock_release>
 80170c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80170c4:	6523      	str	r3, [r4, #80]	; 0x50
 80170c6:	4b13      	ldr	r3, [pc, #76]	; (8017114 <__sinit+0x68>)
 80170c8:	4a13      	ldr	r2, [pc, #76]	; (8017118 <__sinit+0x6c>)
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80170ce:	42a3      	cmp	r3, r4
 80170d0:	bf04      	itt	eq
 80170d2:	2301      	moveq	r3, #1
 80170d4:	61a3      	streq	r3, [r4, #24]
 80170d6:	4620      	mov	r0, r4
 80170d8:	f000 f820 	bl	801711c <__sfp>
 80170dc:	6060      	str	r0, [r4, #4]
 80170de:	4620      	mov	r0, r4
 80170e0:	f000 f81c 	bl	801711c <__sfp>
 80170e4:	60a0      	str	r0, [r4, #8]
 80170e6:	4620      	mov	r0, r4
 80170e8:	f000 f818 	bl	801711c <__sfp>
 80170ec:	2200      	movs	r2, #0
 80170ee:	60e0      	str	r0, [r4, #12]
 80170f0:	2104      	movs	r1, #4
 80170f2:	6860      	ldr	r0, [r4, #4]
 80170f4:	f7ff ff82 	bl	8016ffc <std>
 80170f8:	68a0      	ldr	r0, [r4, #8]
 80170fa:	2201      	movs	r2, #1
 80170fc:	2109      	movs	r1, #9
 80170fe:	f7ff ff7d 	bl	8016ffc <std>
 8017102:	68e0      	ldr	r0, [r4, #12]
 8017104:	2202      	movs	r2, #2
 8017106:	2112      	movs	r1, #18
 8017108:	f7ff ff78 	bl	8016ffc <std>
 801710c:	2301      	movs	r3, #1
 801710e:	61a3      	str	r3, [r4, #24]
 8017110:	e7d2      	b.n	80170b8 <__sinit+0xc>
 8017112:	bf00      	nop
 8017114:	08017810 	.word	0x08017810
 8017118:	08017045 	.word	0x08017045

0801711c <__sfp>:
 801711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801711e:	4607      	mov	r7, r0
 8017120:	f7ff ffac 	bl	801707c <__sfp_lock_acquire>
 8017124:	4b1e      	ldr	r3, [pc, #120]	; (80171a0 <__sfp+0x84>)
 8017126:	681e      	ldr	r6, [r3, #0]
 8017128:	69b3      	ldr	r3, [r6, #24]
 801712a:	b913      	cbnz	r3, 8017132 <__sfp+0x16>
 801712c:	4630      	mov	r0, r6
 801712e:	f7ff ffbd 	bl	80170ac <__sinit>
 8017132:	3648      	adds	r6, #72	; 0x48
 8017134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017138:	3b01      	subs	r3, #1
 801713a:	d503      	bpl.n	8017144 <__sfp+0x28>
 801713c:	6833      	ldr	r3, [r6, #0]
 801713e:	b30b      	cbz	r3, 8017184 <__sfp+0x68>
 8017140:	6836      	ldr	r6, [r6, #0]
 8017142:	e7f7      	b.n	8017134 <__sfp+0x18>
 8017144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017148:	b9d5      	cbnz	r5, 8017180 <__sfp+0x64>
 801714a:	4b16      	ldr	r3, [pc, #88]	; (80171a4 <__sfp+0x88>)
 801714c:	60e3      	str	r3, [r4, #12]
 801714e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017152:	6665      	str	r5, [r4, #100]	; 0x64
 8017154:	f000 f847 	bl	80171e6 <__retarget_lock_init_recursive>
 8017158:	f7ff ff96 	bl	8017088 <__sfp_lock_release>
 801715c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017160:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017164:	6025      	str	r5, [r4, #0]
 8017166:	61a5      	str	r5, [r4, #24]
 8017168:	2208      	movs	r2, #8
 801716a:	4629      	mov	r1, r5
 801716c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017170:	f7ff fc54 	bl	8016a1c <memset>
 8017174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801717c:	4620      	mov	r0, r4
 801717e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017180:	3468      	adds	r4, #104	; 0x68
 8017182:	e7d9      	b.n	8017138 <__sfp+0x1c>
 8017184:	2104      	movs	r1, #4
 8017186:	4638      	mov	r0, r7
 8017188:	f7ff ff62 	bl	8017050 <__sfmoreglue>
 801718c:	4604      	mov	r4, r0
 801718e:	6030      	str	r0, [r6, #0]
 8017190:	2800      	cmp	r0, #0
 8017192:	d1d5      	bne.n	8017140 <__sfp+0x24>
 8017194:	f7ff ff78 	bl	8017088 <__sfp_lock_release>
 8017198:	230c      	movs	r3, #12
 801719a:	603b      	str	r3, [r7, #0]
 801719c:	e7ee      	b.n	801717c <__sfp+0x60>
 801719e:	bf00      	nop
 80171a0:	08017810 	.word	0x08017810
 80171a4:	ffff0001 	.word	0xffff0001

080171a8 <_fwalk_reent>:
 80171a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171ac:	4606      	mov	r6, r0
 80171ae:	4688      	mov	r8, r1
 80171b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80171b4:	2700      	movs	r7, #0
 80171b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80171ba:	f1b9 0901 	subs.w	r9, r9, #1
 80171be:	d505      	bpl.n	80171cc <_fwalk_reent+0x24>
 80171c0:	6824      	ldr	r4, [r4, #0]
 80171c2:	2c00      	cmp	r4, #0
 80171c4:	d1f7      	bne.n	80171b6 <_fwalk_reent+0xe>
 80171c6:	4638      	mov	r0, r7
 80171c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171cc:	89ab      	ldrh	r3, [r5, #12]
 80171ce:	2b01      	cmp	r3, #1
 80171d0:	d907      	bls.n	80171e2 <_fwalk_reent+0x3a>
 80171d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80171d6:	3301      	adds	r3, #1
 80171d8:	d003      	beq.n	80171e2 <_fwalk_reent+0x3a>
 80171da:	4629      	mov	r1, r5
 80171dc:	4630      	mov	r0, r6
 80171de:	47c0      	blx	r8
 80171e0:	4307      	orrs	r7, r0
 80171e2:	3568      	adds	r5, #104	; 0x68
 80171e4:	e7e9      	b.n	80171ba <_fwalk_reent+0x12>

080171e6 <__retarget_lock_init_recursive>:
 80171e6:	4770      	bx	lr

080171e8 <__retarget_lock_acquire_recursive>:
 80171e8:	4770      	bx	lr

080171ea <__retarget_lock_release_recursive>:
 80171ea:	4770      	bx	lr

080171ec <__swhatbuf_r>:
 80171ec:	b570      	push	{r4, r5, r6, lr}
 80171ee:	460e      	mov	r6, r1
 80171f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171f4:	2900      	cmp	r1, #0
 80171f6:	b096      	sub	sp, #88	; 0x58
 80171f8:	4614      	mov	r4, r2
 80171fa:	461d      	mov	r5, r3
 80171fc:	da08      	bge.n	8017210 <__swhatbuf_r+0x24>
 80171fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017202:	2200      	movs	r2, #0
 8017204:	602a      	str	r2, [r5, #0]
 8017206:	061a      	lsls	r2, r3, #24
 8017208:	d410      	bmi.n	801722c <__swhatbuf_r+0x40>
 801720a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801720e:	e00e      	b.n	801722e <__swhatbuf_r+0x42>
 8017210:	466a      	mov	r2, sp
 8017212:	f000 f8c3 	bl	801739c <_fstat_r>
 8017216:	2800      	cmp	r0, #0
 8017218:	dbf1      	blt.n	80171fe <__swhatbuf_r+0x12>
 801721a:	9a01      	ldr	r2, [sp, #4]
 801721c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017220:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017224:	425a      	negs	r2, r3
 8017226:	415a      	adcs	r2, r3
 8017228:	602a      	str	r2, [r5, #0]
 801722a:	e7ee      	b.n	801720a <__swhatbuf_r+0x1e>
 801722c:	2340      	movs	r3, #64	; 0x40
 801722e:	2000      	movs	r0, #0
 8017230:	6023      	str	r3, [r4, #0]
 8017232:	b016      	add	sp, #88	; 0x58
 8017234:	bd70      	pop	{r4, r5, r6, pc}
	...

08017238 <__smakebuf_r>:
 8017238:	898b      	ldrh	r3, [r1, #12]
 801723a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801723c:	079d      	lsls	r5, r3, #30
 801723e:	4606      	mov	r6, r0
 8017240:	460c      	mov	r4, r1
 8017242:	d507      	bpl.n	8017254 <__smakebuf_r+0x1c>
 8017244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017248:	6023      	str	r3, [r4, #0]
 801724a:	6123      	str	r3, [r4, #16]
 801724c:	2301      	movs	r3, #1
 801724e:	6163      	str	r3, [r4, #20]
 8017250:	b002      	add	sp, #8
 8017252:	bd70      	pop	{r4, r5, r6, pc}
 8017254:	ab01      	add	r3, sp, #4
 8017256:	466a      	mov	r2, sp
 8017258:	f7ff ffc8 	bl	80171ec <__swhatbuf_r>
 801725c:	9900      	ldr	r1, [sp, #0]
 801725e:	4605      	mov	r5, r0
 8017260:	4630      	mov	r0, r6
 8017262:	f7ff fc4f 	bl	8016b04 <_malloc_r>
 8017266:	b948      	cbnz	r0, 801727c <__smakebuf_r+0x44>
 8017268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801726c:	059a      	lsls	r2, r3, #22
 801726e:	d4ef      	bmi.n	8017250 <__smakebuf_r+0x18>
 8017270:	f023 0303 	bic.w	r3, r3, #3
 8017274:	f043 0302 	orr.w	r3, r3, #2
 8017278:	81a3      	strh	r3, [r4, #12]
 801727a:	e7e3      	b.n	8017244 <__smakebuf_r+0xc>
 801727c:	4b0d      	ldr	r3, [pc, #52]	; (80172b4 <__smakebuf_r+0x7c>)
 801727e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017280:	89a3      	ldrh	r3, [r4, #12]
 8017282:	6020      	str	r0, [r4, #0]
 8017284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017288:	81a3      	strh	r3, [r4, #12]
 801728a:	9b00      	ldr	r3, [sp, #0]
 801728c:	6163      	str	r3, [r4, #20]
 801728e:	9b01      	ldr	r3, [sp, #4]
 8017290:	6120      	str	r0, [r4, #16]
 8017292:	b15b      	cbz	r3, 80172ac <__smakebuf_r+0x74>
 8017294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017298:	4630      	mov	r0, r6
 801729a:	f000 f891 	bl	80173c0 <_isatty_r>
 801729e:	b128      	cbz	r0, 80172ac <__smakebuf_r+0x74>
 80172a0:	89a3      	ldrh	r3, [r4, #12]
 80172a2:	f023 0303 	bic.w	r3, r3, #3
 80172a6:	f043 0301 	orr.w	r3, r3, #1
 80172aa:	81a3      	strh	r3, [r4, #12]
 80172ac:	89a0      	ldrh	r0, [r4, #12]
 80172ae:	4305      	orrs	r5, r0
 80172b0:	81a5      	strh	r5, [r4, #12]
 80172b2:	e7cd      	b.n	8017250 <__smakebuf_r+0x18>
 80172b4:	08017045 	.word	0x08017045

080172b8 <__malloc_lock>:
 80172b8:	4801      	ldr	r0, [pc, #4]	; (80172c0 <__malloc_lock+0x8>)
 80172ba:	f7ff bf95 	b.w	80171e8 <__retarget_lock_acquire_recursive>
 80172be:	bf00      	nop
 80172c0:	24005a68 	.word	0x24005a68

080172c4 <__malloc_unlock>:
 80172c4:	4801      	ldr	r0, [pc, #4]	; (80172cc <__malloc_unlock+0x8>)
 80172c6:	f7ff bf90 	b.w	80171ea <__retarget_lock_release_recursive>
 80172ca:	bf00      	nop
 80172cc:	24005a68 	.word	0x24005a68

080172d0 <__sread>:
 80172d0:	b510      	push	{r4, lr}
 80172d2:	460c      	mov	r4, r1
 80172d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172d8:	f000 f894 	bl	8017404 <_read_r>
 80172dc:	2800      	cmp	r0, #0
 80172de:	bfab      	itete	ge
 80172e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80172e2:	89a3      	ldrhlt	r3, [r4, #12]
 80172e4:	181b      	addge	r3, r3, r0
 80172e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80172ea:	bfac      	ite	ge
 80172ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80172ee:	81a3      	strhlt	r3, [r4, #12]
 80172f0:	bd10      	pop	{r4, pc}

080172f2 <__swrite>:
 80172f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172f6:	461f      	mov	r7, r3
 80172f8:	898b      	ldrh	r3, [r1, #12]
 80172fa:	05db      	lsls	r3, r3, #23
 80172fc:	4605      	mov	r5, r0
 80172fe:	460c      	mov	r4, r1
 8017300:	4616      	mov	r6, r2
 8017302:	d505      	bpl.n	8017310 <__swrite+0x1e>
 8017304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017308:	2302      	movs	r3, #2
 801730a:	2200      	movs	r2, #0
 801730c:	f000 f868 	bl	80173e0 <_lseek_r>
 8017310:	89a3      	ldrh	r3, [r4, #12]
 8017312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801731a:	81a3      	strh	r3, [r4, #12]
 801731c:	4632      	mov	r2, r6
 801731e:	463b      	mov	r3, r7
 8017320:	4628      	mov	r0, r5
 8017322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017326:	f000 b817 	b.w	8017358 <_write_r>

0801732a <__sseek>:
 801732a:	b510      	push	{r4, lr}
 801732c:	460c      	mov	r4, r1
 801732e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017332:	f000 f855 	bl	80173e0 <_lseek_r>
 8017336:	1c43      	adds	r3, r0, #1
 8017338:	89a3      	ldrh	r3, [r4, #12]
 801733a:	bf15      	itete	ne
 801733c:	6560      	strne	r0, [r4, #84]	; 0x54
 801733e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017346:	81a3      	strheq	r3, [r4, #12]
 8017348:	bf18      	it	ne
 801734a:	81a3      	strhne	r3, [r4, #12]
 801734c:	bd10      	pop	{r4, pc}

0801734e <__sclose>:
 801734e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017352:	f000 b813 	b.w	801737c <_close_r>
	...

08017358 <_write_r>:
 8017358:	b538      	push	{r3, r4, r5, lr}
 801735a:	4d07      	ldr	r5, [pc, #28]	; (8017378 <_write_r+0x20>)
 801735c:	4604      	mov	r4, r0
 801735e:	4608      	mov	r0, r1
 8017360:	4611      	mov	r1, r2
 8017362:	2200      	movs	r2, #0
 8017364:	602a      	str	r2, [r5, #0]
 8017366:	461a      	mov	r2, r3
 8017368:	f7ec fbe1 	bl	8003b2e <_write>
 801736c:	1c43      	adds	r3, r0, #1
 801736e:	d102      	bne.n	8017376 <_write_r+0x1e>
 8017370:	682b      	ldr	r3, [r5, #0]
 8017372:	b103      	cbz	r3, 8017376 <_write_r+0x1e>
 8017374:	6023      	str	r3, [r4, #0]
 8017376:	bd38      	pop	{r3, r4, r5, pc}
 8017378:	24005a6c 	.word	0x24005a6c

0801737c <_close_r>:
 801737c:	b538      	push	{r3, r4, r5, lr}
 801737e:	4d06      	ldr	r5, [pc, #24]	; (8017398 <_close_r+0x1c>)
 8017380:	2300      	movs	r3, #0
 8017382:	4604      	mov	r4, r0
 8017384:	4608      	mov	r0, r1
 8017386:	602b      	str	r3, [r5, #0]
 8017388:	f7ec fbed 	bl	8003b66 <_close>
 801738c:	1c43      	adds	r3, r0, #1
 801738e:	d102      	bne.n	8017396 <_close_r+0x1a>
 8017390:	682b      	ldr	r3, [r5, #0]
 8017392:	b103      	cbz	r3, 8017396 <_close_r+0x1a>
 8017394:	6023      	str	r3, [r4, #0]
 8017396:	bd38      	pop	{r3, r4, r5, pc}
 8017398:	24005a6c 	.word	0x24005a6c

0801739c <_fstat_r>:
 801739c:	b538      	push	{r3, r4, r5, lr}
 801739e:	4d07      	ldr	r5, [pc, #28]	; (80173bc <_fstat_r+0x20>)
 80173a0:	2300      	movs	r3, #0
 80173a2:	4604      	mov	r4, r0
 80173a4:	4608      	mov	r0, r1
 80173a6:	4611      	mov	r1, r2
 80173a8:	602b      	str	r3, [r5, #0]
 80173aa:	f7ec fbe8 	bl	8003b7e <_fstat>
 80173ae:	1c43      	adds	r3, r0, #1
 80173b0:	d102      	bne.n	80173b8 <_fstat_r+0x1c>
 80173b2:	682b      	ldr	r3, [r5, #0]
 80173b4:	b103      	cbz	r3, 80173b8 <_fstat_r+0x1c>
 80173b6:	6023      	str	r3, [r4, #0]
 80173b8:	bd38      	pop	{r3, r4, r5, pc}
 80173ba:	bf00      	nop
 80173bc:	24005a6c 	.word	0x24005a6c

080173c0 <_isatty_r>:
 80173c0:	b538      	push	{r3, r4, r5, lr}
 80173c2:	4d06      	ldr	r5, [pc, #24]	; (80173dc <_isatty_r+0x1c>)
 80173c4:	2300      	movs	r3, #0
 80173c6:	4604      	mov	r4, r0
 80173c8:	4608      	mov	r0, r1
 80173ca:	602b      	str	r3, [r5, #0]
 80173cc:	f7ec fbe7 	bl	8003b9e <_isatty>
 80173d0:	1c43      	adds	r3, r0, #1
 80173d2:	d102      	bne.n	80173da <_isatty_r+0x1a>
 80173d4:	682b      	ldr	r3, [r5, #0]
 80173d6:	b103      	cbz	r3, 80173da <_isatty_r+0x1a>
 80173d8:	6023      	str	r3, [r4, #0]
 80173da:	bd38      	pop	{r3, r4, r5, pc}
 80173dc:	24005a6c 	.word	0x24005a6c

080173e0 <_lseek_r>:
 80173e0:	b538      	push	{r3, r4, r5, lr}
 80173e2:	4d07      	ldr	r5, [pc, #28]	; (8017400 <_lseek_r+0x20>)
 80173e4:	4604      	mov	r4, r0
 80173e6:	4608      	mov	r0, r1
 80173e8:	4611      	mov	r1, r2
 80173ea:	2200      	movs	r2, #0
 80173ec:	602a      	str	r2, [r5, #0]
 80173ee:	461a      	mov	r2, r3
 80173f0:	f7ec fbe0 	bl	8003bb4 <_lseek>
 80173f4:	1c43      	adds	r3, r0, #1
 80173f6:	d102      	bne.n	80173fe <_lseek_r+0x1e>
 80173f8:	682b      	ldr	r3, [r5, #0]
 80173fa:	b103      	cbz	r3, 80173fe <_lseek_r+0x1e>
 80173fc:	6023      	str	r3, [r4, #0]
 80173fe:	bd38      	pop	{r3, r4, r5, pc}
 8017400:	24005a6c 	.word	0x24005a6c

08017404 <_read_r>:
 8017404:	b538      	push	{r3, r4, r5, lr}
 8017406:	4d07      	ldr	r5, [pc, #28]	; (8017424 <_read_r+0x20>)
 8017408:	4604      	mov	r4, r0
 801740a:	4608      	mov	r0, r1
 801740c:	4611      	mov	r1, r2
 801740e:	2200      	movs	r2, #0
 8017410:	602a      	str	r2, [r5, #0]
 8017412:	461a      	mov	r2, r3
 8017414:	f7ec fb6e 	bl	8003af4 <_read>
 8017418:	1c43      	adds	r3, r0, #1
 801741a:	d102      	bne.n	8017422 <_read_r+0x1e>
 801741c:	682b      	ldr	r3, [r5, #0]
 801741e:	b103      	cbz	r3, 8017422 <_read_r+0x1e>
 8017420:	6023      	str	r3, [r4, #0]
 8017422:	bd38      	pop	{r3, r4, r5, pc}
 8017424:	24005a6c 	.word	0x24005a6c

08017428 <_init>:
 8017428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801742a:	bf00      	nop
 801742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801742e:	bc08      	pop	{r3}
 8017430:	469e      	mov	lr, r3
 8017432:	4770      	bx	lr

08017434 <_fini>:
 8017434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017436:	bf00      	nop
 8017438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801743a:	bc08      	pop	{r3}
 801743c:	469e      	mov	lr, r3
 801743e:	4770      	bx	lr
