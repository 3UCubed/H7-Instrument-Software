
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b20  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08015dc0  08015dc0  00025dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016254  08016254  00026254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801625c  0801625c  0002625c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016260  08016260  00026260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  24000000  08016264  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000054f0  24000120  08016368  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005610  08016368  00035610  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038a06  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006da9  00000000  00000000  00068b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027d0  00000000  00000000  0006f8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000024f8  00000000  00000000  000720b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004457c  00000000  00000000  000745b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b5b6  00000000  00000000  000b8b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194987  00000000  00000000  000f40e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00288a69  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ae1c  00000000  00000000  00288abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015da8 	.word	0x08015da8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08015da8 	.word	0x08015da8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 fb11 	bl	8003c90 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fca4 	bl	8001fc0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f004 fc2c 	bl	8004ee0 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fc97 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f003 fd6f 	bl	8004198 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fc7e 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f003 fd61 	bl	8004198 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fc70 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f003 fd53 	bl	8004198 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fc62 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f003 fd45 	bl	8004198 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fc54 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f003 fd36 	bl	8004198 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fc45 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f003 fd27 	bl	8004198 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fc36 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f003 fd18 	bl	8004198 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fc27 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f003 fd09 	bl	8004198 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fc18 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f003 fcfa 	bl	8004198 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fc09 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f003 fceb 	bl	8004198 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fbfa 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f003 fcdc 	bl	8004198 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fbeb 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400013c 	.word	0x2400013c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 f9f9 	bl	8003c90 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fb8c 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f003 fc64 	bl	8004198 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fb73 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f003 fc56 	bl	8004198 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fb65 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f003 fc48 	bl	8004198 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fb57 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f003 fc3a 	bl	8004198 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fb49 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001a0 	.word	0x240001a0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f007 fe7c 	bl	80086f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f007 fe70 	bl	80086f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f007 fe64 	bl	80086f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f004 fff7 	bl	8005a68 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fa9e 	bl	8001fc0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f002 feb2 	bl	8003848 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f002 feac 	bl	8003848 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f004 ff97 	bl	8005a68 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fa3e 	bl	8001fc0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000204 	.word	0x24000204
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400027c 	.word	0x2400027c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f014 fc05 	bl	801539c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f004 fb5f 	bl	800525c <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fa0c 	bl	8001fc0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f004 fd7a 	bl	80056bc <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 f9f7 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002f4 	.word	0x240002f4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f007 fd4f 	bl	80086f8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f004 fee2 	bl	8005a68 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 f989 	bl	8001fc0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f004 faa4 	bl	800520c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f004 fabb 	bl	8005240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000308 	.word	0x24000308
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f004 fa7b 	bl	800520c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f004 fa92 	bl	8005240 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f004 fa73 	bl	800520c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f004 fa8a 	bl	8005240 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f004 fa6b 	bl	800520c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f004 fa82 	bl	8005240 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f004 fa63 	bl	800520c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f004 fa7a 	bl	8005240 <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	24000834 	.word	0x24000834

08000d74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d78:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <MX_FREERTOS_Init+0xa8>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4828      	ldr	r0, [pc, #160]	; (8000e20 <MX_FREERTOS_Init+0xac>)
 8000d7e:	f010 ffa1 	bl	8011cc4 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <MX_FREERTOS_Init+0xb0>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <MX_FREERTOS_Init+0xb4>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4827      	ldr	r0, [pc, #156]	; (8000e2c <MX_FREERTOS_Init+0xb8>)
 8000d8e:	f010 ff99 	bl	8011cc4 <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <MX_FREERTOS_Init+0xbc>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <MX_FREERTOS_Init+0xc0>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4826      	ldr	r0, [pc, #152]	; (8000e38 <MX_FREERTOS_Init+0xc4>)
 8000d9e:	f010 ff91 	bl	8011cc4 <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <MX_FREERTOS_Init+0xc8>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000da8:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <MX_FREERTOS_Init+0xcc>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4825      	ldr	r0, [pc, #148]	; (8000e44 <MX_FREERTOS_Init+0xd0>)
 8000dae:	f010 ff89 	bl	8011cc4 <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <MX_FREERTOS_Init+0xd4>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000db8:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <MX_FREERTOS_Init+0xd8>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4824      	ldr	r0, [pc, #144]	; (8000e50 <MX_FREERTOS_Init+0xdc>)
 8000dbe:	f010 ff81 	bl	8011cc4 <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_FREERTOS_Init+0xe0>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000dc8:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_FREERTOS_Init+0xe4>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4823      	ldr	r0, [pc, #140]	; (8000e5c <MX_FREERTOS_Init+0xe8>)
 8000dce:	f010 ff79 	bl	8011cc4 <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <MX_FREERTOS_Init+0xec>)
 8000dd6:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000dd8:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <MX_FREERTOS_Init+0xf0>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4822      	ldr	r0, [pc, #136]	; (8000e68 <MX_FREERTOS_Init+0xf4>)
 8000dde:	f010 ff71 	bl	8011cc4 <osThreadNew>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_FREERTOS_Init+0xf8>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <MX_FREERTOS_Init+0xfc>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <MX_FREERTOS_Init+0x100>)
 8000dee:	f010 ff69 	bl	8011cc4 <osThreadNew>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <MX_FREERTOS_Init+0x104>)
 8000df6:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <MX_FREERTOS_Init+0x108>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4820      	ldr	r0, [pc, #128]	; (8000e80 <MX_FREERTOS_Init+0x10c>)
 8000dfe:	f010 ff61 	bl	8011cc4 <osThreadNew>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <MX_FREERTOS_Init+0x110>)
 8000e06:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <MX_FREERTOS_Init+0x114>)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	481f      	ldr	r0, [pc, #124]	; (8000e8c <MX_FREERTOS_Init+0x118>)
 8000e0e:	f010 ff59 	bl	8011cc4 <osThreadNew>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <MX_FREERTOS_Init+0x11c>)
 8000e16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	08016000 	.word	0x08016000
 8000e20:	08000e95 	.word	0x08000e95
 8000e24:	24000380 	.word	0x24000380
 8000e28:	08016024 	.word	0x08016024
 8000e2c:	08000ebd 	.word	0x08000ebd
 8000e30:	24000384 	.word	0x24000384
 8000e34:	08016048 	.word	0x08016048
 8000e38:	08000ee5 	.word	0x08000ee5
 8000e3c:	24000388 	.word	0x24000388
 8000e40:	0801606c 	.word	0x0801606c
 8000e44:	08000ef5 	.word	0x08000ef5
 8000e48:	2400038c 	.word	0x2400038c
 8000e4c:	08016090 	.word	0x08016090
 8000e50:	08000f6d 	.word	0x08000f6d
 8000e54:	24000390 	.word	0x24000390
 8000e58:	080160b4 	.word	0x080160b4
 8000e5c:	08000fe5 	.word	0x08000fe5
 8000e60:	24000394 	.word	0x24000394
 8000e64:	080160d8 	.word	0x080160d8
 8000e68:	0800109d 	.word	0x0800109d
 8000e6c:	24000398 	.word	0x24000398
 8000e70:	080160fc 	.word	0x080160fc
 8000e74:	080010ad 	.word	0x080010ad
 8000e78:	2400039c 	.word	0x2400039c
 8000e7c:	08016120 	.word	0x08016120
 8000e80:	080010bd 	.word	0x080010bd
 8000e84:	240003a0 	.word	0x240003a0
 8000e88:	08016144 	.word	0x08016144
 8000e8c:	080010cd 	.word	0x080010cd
 8000e90:	240003a4 	.word	0x240003a4

08000e94 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <PMT_init+0x24>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f011 f85c 	bl	8011f64 <osEventFlagsWait>

		create_pmt_packet();
 8000eac:	f001 f8ae 	bl	800200c <create_pmt_packet>

		osThreadYield();
 8000eb0:	f010 ff9a 	bl	8011de8 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb4:	e7f2      	b.n	8000e9c <PMT_init+0x8>
 8000eb6:	bf00      	nop
 8000eb8:	240007e4 	.word	0x240007e4

08000ebc <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <ERPA_init+0x24>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2102      	movs	r1, #2
 8000ed0:	f011 f848 	bl	8011f64 <osEventFlagsWait>

		create_erpa_packet();
 8000ed4:	f001 f914 	bl	8002100 <create_erpa_packet>

		osThreadYield();
 8000ed8:	f010 ff86 	bl	8011de8 <osThreadYield>
	for (;;) {
 8000edc:	e7f2      	b.n	8000ec4 <ERPA_init+0x8>
 8000ede:	bf00      	nop
 8000ee0:	240007e4 	.word	0x240007e4

08000ee4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f010 ff9b 	bl	8011e28 <osDelay>
 8000ef2:	e7fb      	b.n	8000eec <HK_init+0x8>

08000ef4 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <AUTOINIT_init+0x70>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f04:	2200      	movs	r2, #0
 8000f06:	2104      	movs	r1, #4
 8000f08:	f011 f82c 	bl	8011f64 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e012      	b.n	8000f38 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <AUTOINIT_init+0x74>)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <AUTOINIT_init+0x74>)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	4413      	add	r3, r2
 8000f22:	889b      	ldrh	r3, [r3, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	4619      	mov	r1, r3
 8000f28:	f007 fdae 	bl	8008a88 <HAL_GPIO_WritePin>
			osDelay(100);
 8000f2c:	2064      	movs	r0, #100	; 0x64
 8000f2e:	f010 ff7b 	bl	8011e28 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3301      	adds	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	dde9      	ble.n	8000f12 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f3e:	2308      	movs	r3, #8
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	e008      	b.n	8000f56 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fbca 	bl	80036e4 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	2b0d      	cmp	r3, #13
 8000f5a:	ddf3      	ble.n	8000f44 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f5c:	f010 ff44 	bl	8011de8 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f60:	e7cc      	b.n	8000efc <AUTOINIT_init+0x8>
 8000f62:	bf00      	nop
 8000f64:	240007e8 	.word	0x240007e8
 8000f68:	08016168 	.word	0x08016168

08000f6c <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <AUTODEINIT_init+0x70>)
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2108      	movs	r1, #8
 8000f80:	f010 fff0 	bl	8011f64 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f84:	230d      	movs	r3, #13
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e008      	b.n	8000f9c <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fba7 	bl	80036e4 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b07      	cmp	r3, #7
 8000fa0:	dcf3      	bgt.n	8000f8a <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	e012      	b.n	8000fce <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <AUTODEINIT_init+0x74>)
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <AUTODEINIT_init+0x74>)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	889b      	ldrh	r3, [r3, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f007 fd63 	bl	8008a88 <HAL_GPIO_WritePin>
			osDelay(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f010 ff30 	bl	8011e28 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	dae9      	bge.n	8000fa8 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000fd4:	f010 ff08 	bl	8011de8 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000fd8:	e7cc      	b.n	8000f74 <AUTODEINIT_init+0x8>
 8000fda:	bf00      	nop
 8000fdc:	240007e8 	.word	0x240007e8
 8000fe0:	08016168 	.word	0x08016168

08000fe4 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
	osStatus_t status;
	packet_t msg;

	while (1) {
		total_size = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <UART_TX_init+0xa8>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0108 	add.w	r1, r7, #8
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001000:	2200      	movs	r2, #0
 8001002:	f011 f8e9 	bl	80121d8 <osMessageQueueGet>
 8001006:	6138      	str	r0, [r7, #16]
			if (status == osOK) {
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d11c      	bne.n	8001048 <UART_TX_init+0x64>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 800100e:	89bb      	ldrh	r3, [r7, #12]
 8001010:	461a      	mov	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	4413      	add	r3, r2
 8001016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800101a:	d215      	bcs.n	8001048 <UART_TX_init+0x64>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <UART_TX_init+0xac>)
 8001020:	4413      	add	r3, r2
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	89ba      	ldrh	r2, [r7, #12]
 8001026:	4618      	mov	r0, r3
 8001028:	f014 f9aa 	bl	8015380 <memcpy>
					free(msg.array);
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4618      	mov	r0, r3
 8001030:	f014 f99e 	bl	8015370 <free>
					total_size += msg.size;
 8001034:	89bb      	ldrh	r3, [r7, #12]
 8001036:	461a      	mov	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	4413      	add	r3, r2
 800103c:	617b      	str	r3, [r7, #20]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f240 32b1 	movw	r2, #945	; 0x3b1
 8001044:	4293      	cmp	r3, r2
 8001046:	d808      	bhi.n	800105a <UART_TX_init+0x76>
						break;
					}
				}
			}
		} while (osMessageQueueGetCount(mid_MsgQueue));
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <UART_TX_init+0xa8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f011 f921 	bl	8012294 <osMessageQueueGetCount>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1cd      	bne.n	8000ff4 <UART_TX_init+0x10>
 8001058:	e000      	b.n	800105c <UART_TX_init+0x78>
						break;
 800105a:	bf00      	nop

		if (total_size > 0) {
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d011      	beq.n	8001086 <UART_TX_init+0xa2>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	b29b      	uxth	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	4909      	ldr	r1, [pc, #36]	; (8001090 <UART_TX_init+0xac>)
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <UART_TX_init+0xb0>)
 800106c:	f00e f888 	bl	800f180 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8001070:	e001      	b.n	8001076 <UART_TX_init+0x92>
				osThreadYield();
 8001072:	f010 feb9 	bl	8011de8 <osThreadYield>
			while (tx_flag == 0) {
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <UART_TX_init+0xb4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f8      	beq.n	8001072 <UART_TX_init+0x8e>
			}

			// Reset the flag
			tx_flag = 0;
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <UART_TX_init+0xb4>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8001086:	f010 feaf 	bl	8011de8 <osThreadYield>
		total_size = 0;
 800108a:	e7b1      	b.n	8000ff0 <UART_TX_init+0xc>
 800108c:	240007ec 	.word	0x240007ec
 8001090:	240003a8 	.word	0x240003a8
 8001094:	24000aec 	.word	0x24000aec
 8001098:	24000088 	.word	0x24000088

0800109c <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	for (;;) {
		osDelay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f010 febf 	bl	8011e28 <osDelay>
 80010aa:	e7fb      	b.n	80010a4 <Voltage_Monitor_init+0x8>

080010ac <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f010 feb7 	bl	8011e28 <osDelay>
 80010ba:	e7fb      	b.n	80010b4 <STOP_init+0x8>

080010bc <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f010 feaf 	bl	8011e28 <osDelay>
 80010ca:	e7fb      	b.n	80010c4 <Science_init+0x8>

080010cc <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f010 fea7 	bl	8011e28 <osDelay>
 80010da:	e7fb      	b.n	80010d4 <Idle_init+0x8>

080010dc <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <MX_GPIO_Init+0xe8>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <MX_GPIO_Init+0xe8>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <MX_GPIO_Init+0xe8>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001110:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <MX_GPIO_Init+0xe8>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	4a2b      	ldr	r2, [pc, #172]	; (80011c4 <MX_GPIO_Init+0xe8>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <MX_GPIO_Init+0xe8>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <MX_GPIO_Init+0xe8>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001134:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <MX_GPIO_Init+0xe8>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_GPIO_Init+0xe8>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_GPIO_Init+0xe8>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <MX_GPIO_Init+0xe8>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_GPIO_Init+0xe8>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001170:	4815      	ldr	r0, [pc, #84]	; (80011c8 <MX_GPIO_Init+0xec>)
 8001172:	f007 fc89 	bl	8008a88 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2164      	movs	r1, #100	; 0x64
 800117a:	4814      	ldr	r0, [pc, #80]	; (80011cc <MX_GPIO_Init+0xf0>)
 800117c:	f007 fc84 	bl	8008a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001180:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001184:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800118a:	2302      	movs	r3, #2
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <MX_GPIO_Init+0xec>)
 800119a:	f007 faad 	bl	80086f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800119e:	2364      	movs	r3, #100	; 0x64
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_GPIO_Init+0xf0>)
 80011b6:	f007 fa9f 	bl	80086f8 <HAL_GPIO_Init>

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	58024400 	.word	0x58024400
 80011c8:	58020800 	.word	0x58020800
 80011cc:	58020400 	.word	0x58020400

080011d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <MX_I2C1_Init+0x78>)
 80011d6:	4a1d      	ldr	r2, [pc, #116]	; (800124c <MX_I2C1_Init+0x7c>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_I2C1_Init+0x78>)
 80011dc:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <MX_I2C1_Init+0x80>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <MX_I2C1_Init+0x78>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_I2C1_Init+0x78>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_I2C1_Init+0x78>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_I2C1_Init+0x78>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_I2C1_Init+0x78>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C1_Init+0x78>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_I2C1_Init+0x78>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <MX_I2C1_Init+0x78>)
 800120c:	f007 fc56 	bl	8008abc <HAL_I2C_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001216:	f000 fed3 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121a:	2100      	movs	r1, #0
 800121c:	480a      	ldr	r0, [pc, #40]	; (8001248 <MX_I2C1_Init+0x78>)
 800121e:	f007 fce9 	bl	8008bf4 <HAL_I2CEx_ConfigAnalogFilter>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001228:	f000 feca 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <MX_I2C1_Init+0x78>)
 8001230:	f007 fd2b 	bl	8008c8a <HAL_I2CEx_ConfigDigitalFilter>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 fec1 	bl	8001fc0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800123e:	2001      	movs	r0, #1
 8001240:	f007 fd70 	bl	8008d24 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	24000790 	.word	0x24000790
 800124c:	40005400 	.word	0x40005400
 8001250:	0020081f 	.word	0x0020081f

08001254 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0ba      	sub	sp, #232	; 0xe8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	22c0      	movs	r2, #192	; 0xc0
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f014 f891 	bl	801539c <memset>
  if(i2cHandle->Instance==I2C1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a27      	ldr	r2, [pc, #156]	; (800131c <HAL_I2C_MspInit+0xc8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d146      	bne.n	8001312 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001284:	f04f 0208 	mov.w	r2, #8
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4618      	mov	r0, r3
 800129c:	f008 fdc8 	bl	8009e30 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80012a6:	f000 fe8b 	bl	8001fc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_I2C_MspInit+0xcc>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <HAL_I2C_MspInit+0xcc>)
 80012b2:	f043 0302 	orr.w	r3, r3, #2
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_I2C_MspInit+0xcc>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d0:	2312      	movs	r3, #18
 80012d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e2:	2304      	movs	r3, #4
 80012e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <HAL_I2C_MspInit+0xd0>)
 80012f0:	f007 fa02 	bl	80086f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_I2C_MspInit+0xcc>)
 80012f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_I2C_MspInit+0xcc>)
 80012fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001300:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_I2C_MspInit+0xcc>)
 8001306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800130a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001312:	bf00      	nop
 8001314:	37e8      	adds	r7, #232	; 0xe8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40005400 	.word	0x40005400
 8001320:	58024400 	.word	0x58024400
 8001324:	58020400 	.word	0x58020400

08001328 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d106      	bne.n	8001346 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2101      	movs	r1, #1
 800133e:	4618      	mov	r0, r3
 8001340:	f010 fdcc 	bl	8011edc <osEventFlagsSet>
	}
	else if (htim == &htim2) {
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
	}
}
 8001344:	e009      	b.n	800135a <HAL_TIM_OC_DelayElapsedCallback+0x32>
	else if (htim == &htim2) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d105      	bne.n	800135a <HAL_TIM_OC_DelayElapsedCallback+0x32>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2102      	movs	r1, #2
 8001354:	4618      	mov	r0, r3
 8001356:	f010 fdc1 	bl	8011edc <osEventFlagsSet>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	24000a08 	.word	0x24000a08
 8001368:	240007e4 	.word	0x240007e4
 800136c:	24000a54 	.word	0x24000a54

08001370 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af02      	add	r7, sp, #8
 8001376:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	49f2      	ldr	r1, [pc, #968]	; (8001744 <HAL_UART_RxCpltCallback+0x3d4>)
 800137c:	48f2      	ldr	r0, [pc, #968]	; (8001748 <HAL_UART_RxCpltCallback+0x3d8>)
 800137e:	f00d feb3 	bl	800f0e8 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8001382:	4bf0      	ldr	r3, [pc, #960]	; (8001744 <HAL_UART_RxCpltCallback+0x3d4>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2be0      	cmp	r3, #224	; 0xe0
 800138c:	f200 840b 	bhi.w	8001ba6 <HAL_UART_RxCpltCallback+0x836>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <HAL_UART_RxCpltCallback+0x28>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	08001731 	.word	0x08001731
 800139c:	08001775 	.word	0x08001775
 80013a0:	080017e5 	.word	0x080017e5
 80013a4:	0800181f 	.word	0x0800181f
 80013a8:	08001857 	.word	0x08001857
 80013ac:	08001891 	.word	0x08001891
 80013b0:	080018cd 	.word	0x080018cd
 80013b4:	08001909 	.word	0x08001909
 80013b8:	08001943 	.word	0x08001943
 80013bc:	08001977 	.word	0x08001977
 80013c0:	080019a3 	.word	0x080019a3
 80013c4:	080019cf 	.word	0x080019cf
 80013c8:	080019f9 	.word	0x080019f9
 80013cc:	08001ad5 	.word	0x08001ad5
 80013d0:	08001b3d 	.word	0x08001b3d
 80013d4:	08001b65 	.word	0x08001b65
 80013d8:	0800171d 	.word	0x0800171d
 80013dc:	08001759 	.word	0x08001759
 80013e0:	080017c7 	.word	0x080017c7
 80013e4:	08001803 	.word	0x08001803
 80013e8:	0800183b 	.word	0x0800183b
 80013ec:	08001873 	.word	0x08001873
 80013f0:	080018af 	.word	0x080018af
 80013f4:	080018eb 	.word	0x080018eb
 80013f8:	08001927 	.word	0x08001927
 80013fc:	0800195f 	.word	0x0800195f
 8001400:	08001987 	.word	0x08001987
 8001404:	080019b3 	.word	0x080019b3
 8001408:	080019df 	.word	0x080019df
 800140c:	08001a07 	.word	0x08001a07
 8001410:	08001b15 	.word	0x08001b15
 8001414:	08001ba7 	.word	0x08001ba7
 8001418:	08001ba7 	.word	0x08001ba7
 800141c:	08001ba7 	.word	0x08001ba7
 8001420:	08001ba7 	.word	0x08001ba7
 8001424:	08001ba7 	.word	0x08001ba7
 8001428:	08001ba7 	.word	0x08001ba7
 800142c:	08001ba7 	.word	0x08001ba7
 8001430:	08001ba7 	.word	0x08001ba7
 8001434:	08001ba7 	.word	0x08001ba7
 8001438:	08001ba7 	.word	0x08001ba7
 800143c:	08001ba7 	.word	0x08001ba7
 8001440:	08001ba7 	.word	0x08001ba7
 8001444:	08001ba7 	.word	0x08001ba7
 8001448:	08001ba7 	.word	0x08001ba7
 800144c:	08001ba7 	.word	0x08001ba7
 8001450:	08001ba7 	.word	0x08001ba7
 8001454:	08001ba7 	.word	0x08001ba7
 8001458:	08001ba7 	.word	0x08001ba7
 800145c:	08001ba7 	.word	0x08001ba7
 8001460:	08001ba7 	.word	0x08001ba7
 8001464:	08001ba7 	.word	0x08001ba7
 8001468:	08001ba7 	.word	0x08001ba7
 800146c:	08001ba7 	.word	0x08001ba7
 8001470:	08001ba7 	.word	0x08001ba7
 8001474:	08001ba7 	.word	0x08001ba7
 8001478:	08001ba7 	.word	0x08001ba7
 800147c:	08001ba7 	.word	0x08001ba7
 8001480:	08001ba7 	.word	0x08001ba7
 8001484:	08001ba7 	.word	0x08001ba7
 8001488:	08001ba7 	.word	0x08001ba7
 800148c:	08001ba7 	.word	0x08001ba7
 8001490:	08001ba7 	.word	0x08001ba7
 8001494:	08001ba7 	.word	0x08001ba7
 8001498:	08001ba7 	.word	0x08001ba7
 800149c:	08001ba7 	.word	0x08001ba7
 80014a0:	08001ba7 	.word	0x08001ba7
 80014a4:	08001ba7 	.word	0x08001ba7
 80014a8:	08001ba7 	.word	0x08001ba7
 80014ac:	08001ba7 	.word	0x08001ba7
 80014b0:	08001ba7 	.word	0x08001ba7
 80014b4:	08001ba7 	.word	0x08001ba7
 80014b8:	08001ba7 	.word	0x08001ba7
 80014bc:	08001ba7 	.word	0x08001ba7
 80014c0:	08001ba7 	.word	0x08001ba7
 80014c4:	08001ba7 	.word	0x08001ba7
 80014c8:	08001ba7 	.word	0x08001ba7
 80014cc:	08001ba7 	.word	0x08001ba7
 80014d0:	08001ba7 	.word	0x08001ba7
 80014d4:	08001ba7 	.word	0x08001ba7
 80014d8:	08001ba7 	.word	0x08001ba7
 80014dc:	08001ba7 	.word	0x08001ba7
 80014e0:	08001ba7 	.word	0x08001ba7
 80014e4:	08001ba7 	.word	0x08001ba7
 80014e8:	08001ba7 	.word	0x08001ba7
 80014ec:	08001ba7 	.word	0x08001ba7
 80014f0:	08001ba7 	.word	0x08001ba7
 80014f4:	08001ba7 	.word	0x08001ba7
 80014f8:	08001ba7 	.word	0x08001ba7
 80014fc:	08001ba7 	.word	0x08001ba7
 8001500:	08001ba7 	.word	0x08001ba7
 8001504:	08001ba7 	.word	0x08001ba7
 8001508:	08001ba7 	.word	0x08001ba7
 800150c:	08001ba7 	.word	0x08001ba7
 8001510:	08001ba7 	.word	0x08001ba7
 8001514:	08001ba7 	.word	0x08001ba7
 8001518:	08001ba7 	.word	0x08001ba7
 800151c:	08001ba7 	.word	0x08001ba7
 8001520:	08001ba7 	.word	0x08001ba7
 8001524:	08001ba7 	.word	0x08001ba7
 8001528:	08001ba7 	.word	0x08001ba7
 800152c:	08001ba7 	.word	0x08001ba7
 8001530:	08001ba7 	.word	0x08001ba7
 8001534:	08001ba7 	.word	0x08001ba7
 8001538:	08001ba7 	.word	0x08001ba7
 800153c:	08001ba7 	.word	0x08001ba7
 8001540:	08001ba7 	.word	0x08001ba7
 8001544:	08001ba7 	.word	0x08001ba7
 8001548:	08001ba7 	.word	0x08001ba7
 800154c:	08001ba7 	.word	0x08001ba7
 8001550:	08001ba7 	.word	0x08001ba7
 8001554:	08001ba7 	.word	0x08001ba7
 8001558:	08001ba7 	.word	0x08001ba7
 800155c:	08001ba7 	.word	0x08001ba7
 8001560:	08001ba7 	.word	0x08001ba7
 8001564:	08001ba7 	.word	0x08001ba7
 8001568:	08001ba7 	.word	0x08001ba7
 800156c:	08001ba7 	.word	0x08001ba7
 8001570:	08001ba7 	.word	0x08001ba7
 8001574:	08001ba7 	.word	0x08001ba7
 8001578:	08001ba7 	.word	0x08001ba7
 800157c:	08001ba7 	.word	0x08001ba7
 8001580:	08001ba7 	.word	0x08001ba7
 8001584:	08001ba7 	.word	0x08001ba7
 8001588:	08001ba7 	.word	0x08001ba7
 800158c:	08001ba7 	.word	0x08001ba7
 8001590:	08001ba7 	.word	0x08001ba7
 8001594:	08001ba7 	.word	0x08001ba7
 8001598:	08001ba7 	.word	0x08001ba7
 800159c:	08001ba7 	.word	0x08001ba7
 80015a0:	08001ba7 	.word	0x08001ba7
 80015a4:	08001ba7 	.word	0x08001ba7
 80015a8:	08001ba7 	.word	0x08001ba7
 80015ac:	08001ba7 	.word	0x08001ba7
 80015b0:	08001ba7 	.word	0x08001ba7
 80015b4:	08001ba7 	.word	0x08001ba7
 80015b8:	08001ba7 	.word	0x08001ba7
 80015bc:	08001ba7 	.word	0x08001ba7
 80015c0:	08001ba7 	.word	0x08001ba7
 80015c4:	08001ba7 	.word	0x08001ba7
 80015c8:	08001ba7 	.word	0x08001ba7
 80015cc:	08001ba7 	.word	0x08001ba7
 80015d0:	08001ba7 	.word	0x08001ba7
 80015d4:	08001ba7 	.word	0x08001ba7
 80015d8:	08001ba7 	.word	0x08001ba7
 80015dc:	08001ba7 	.word	0x08001ba7
 80015e0:	08001ba7 	.word	0x08001ba7
 80015e4:	08001ba7 	.word	0x08001ba7
 80015e8:	08001ba7 	.word	0x08001ba7
 80015ec:	08001ba7 	.word	0x08001ba7
 80015f0:	08001ba7 	.word	0x08001ba7
 80015f4:	08001ba7 	.word	0x08001ba7
 80015f8:	08001ba7 	.word	0x08001ba7
 80015fc:	08001ba7 	.word	0x08001ba7
 8001600:	08001ba7 	.word	0x08001ba7
 8001604:	08001ba7 	.word	0x08001ba7
 8001608:	08001ba7 	.word	0x08001ba7
 800160c:	08001ba7 	.word	0x08001ba7
 8001610:	08001ba7 	.word	0x08001ba7
 8001614:	08001ba7 	.word	0x08001ba7
 8001618:	08001ba7 	.word	0x08001ba7
 800161c:	08001ba7 	.word	0x08001ba7
 8001620:	08001ba7 	.word	0x08001ba7
 8001624:	08001ba7 	.word	0x08001ba7
 8001628:	08001ba7 	.word	0x08001ba7
 800162c:	08001ba7 	.word	0x08001ba7
 8001630:	08001ba7 	.word	0x08001ba7
 8001634:	08001ba7 	.word	0x08001ba7
 8001638:	08001ba7 	.word	0x08001ba7
 800163c:	08001ba7 	.word	0x08001ba7
 8001640:	08001ba7 	.word	0x08001ba7
 8001644:	08001ba7 	.word	0x08001ba7
 8001648:	08001ba7 	.word	0x08001ba7
 800164c:	08001ba7 	.word	0x08001ba7
 8001650:	08001ba7 	.word	0x08001ba7
 8001654:	08001ba1 	.word	0x08001ba1
 8001658:	08001ba7 	.word	0x08001ba7
 800165c:	08001ba7 	.word	0x08001ba7
 8001660:	08001ba7 	.word	0x08001ba7
 8001664:	08001ba7 	.word	0x08001ba7
 8001668:	08001ba7 	.word	0x08001ba7
 800166c:	08001ba7 	.word	0x08001ba7
 8001670:	08001ba7 	.word	0x08001ba7
 8001674:	08001ba7 	.word	0x08001ba7
 8001678:	08001ba7 	.word	0x08001ba7
 800167c:	08001ba7 	.word	0x08001ba7
 8001680:	08001ba7 	.word	0x08001ba7
 8001684:	08001ba7 	.word	0x08001ba7
 8001688:	08001ba7 	.word	0x08001ba7
 800168c:	08001ba7 	.word	0x08001ba7
 8001690:	08001ba7 	.word	0x08001ba7
 8001694:	08001baf 	.word	0x08001baf
 8001698:	08001ba7 	.word	0x08001ba7
 800169c:	08001ba7 	.word	0x08001ba7
 80016a0:	08001ba7 	.word	0x08001ba7
 80016a4:	08001ba7 	.word	0x08001ba7
 80016a8:	08001ba7 	.word	0x08001ba7
 80016ac:	08001ba7 	.word	0x08001ba7
 80016b0:	08001ba7 	.word	0x08001ba7
 80016b4:	08001ba7 	.word	0x08001ba7
 80016b8:	08001ba7 	.word	0x08001ba7
 80016bc:	08001ba7 	.word	0x08001ba7
 80016c0:	08001ba7 	.word	0x08001ba7
 80016c4:	08001ba7 	.word	0x08001ba7
 80016c8:	08001ba7 	.word	0x08001ba7
 80016cc:	08001ba7 	.word	0x08001ba7
 80016d0:	08001ba7 	.word	0x08001ba7
 80016d4:	08001baf 	.word	0x08001baf
 80016d8:	08001b8d 	.word	0x08001b8d
 80016dc:	08001ba7 	.word	0x08001ba7
 80016e0:	08001ba7 	.word	0x08001ba7
 80016e4:	08001ba7 	.word	0x08001ba7
 80016e8:	08001ba7 	.word	0x08001ba7
 80016ec:	08001ba7 	.word	0x08001ba7
 80016f0:	08001ba7 	.word	0x08001ba7
 80016f4:	08001ba7 	.word	0x08001ba7
 80016f8:	08001ba7 	.word	0x08001ba7
 80016fc:	08001ba7 	.word	0x08001ba7
 8001700:	08001ba7 	.word	0x08001ba7
 8001704:	08001ba7 	.word	0x08001ba7
 8001708:	08001ba7 	.word	0x08001ba7
 800170c:	08001ba7 	.word	0x08001ba7
 8001710:	08001ba7 	.word	0x08001ba7
 8001714:	08001ba7 	.word	0x08001ba7
 8001718:	08001b79 	.word	0x08001b79
	case 0x10: {
		printf("SDN1 ON\n");
 800171c:	480b      	ldr	r0, [pc, #44]	; (800174c <HAL_UART_RxCpltCallback+0x3dc>)
 800171e:	f013 ff93 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_UART_RxCpltCallback+0x3e0>)
 8001724:	2104      	movs	r1, #4
 8001726:	2201      	movs	r2, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f007 f9ad 	bl	8008a88 <HAL_GPIO_WritePin>
		break;
 800172e:	e247      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8001730:	4808      	ldr	r0, [pc, #32]	; (8001754 <HAL_UART_RxCpltCallback+0x3e4>)
 8001732:	f013 ff89 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_UART_RxCpltCallback+0x3e0>)
 8001738:	2104      	movs	r1, #4
 800173a:	2200      	movs	r2, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f007 f9a3 	bl	8008a88 <HAL_GPIO_WritePin>
		break;
 8001742:	e23d      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
 8001744:	240007f0 	.word	0x240007f0
 8001748:	24000aec 	.word	0x24000aec
 800174c:	08015e48 	.word	0x08015e48
 8001750:	58020400 	.word	0x58020400
 8001754:	08015e50 	.word	0x08015e50
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8001758:	48bb      	ldr	r0, [pc, #748]	; (8001a48 <HAL_UART_RxCpltCallback+0x6d8>)
 800175a:	f013 ff75 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 800175e:	4bbb      	ldr	r3, [pc, #748]	; (8001a4c <HAL_UART_RxCpltCallback+0x6dc>)
 8001760:	2120      	movs	r1, #32
 8001762:	2201      	movs	r2, #1
 8001764:	4618      	mov	r0, r3
 8001766:	f007 f98f 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 800176a:	2101      	movs	r1, #1
 800176c:	2008      	movs	r0, #8
 800176e:	f001 ffb9 	bl	80036e4 <set_rail_monitor_enable>
		break;
 8001772:	e225      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8001774:	48b6      	ldr	r0, [pc, #728]	; (8001a50 <HAL_UART_RxCpltCallback+0x6e0>)
 8001776:	f013 ff67 	bl	8015648 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 800177a:	2308      	movs	r3, #8
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e00f      	b.n	80017a0 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001780:	4ab4      	ldr	r2, [pc, #720]	; (8001a54 <HAL_UART_RxCpltCallback+0x6e4>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001788:	4ab2      	ldr	r2, [pc, #712]	; (8001a54 <HAL_UART_RxCpltCallback+0x6e4>)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	889b      	ldrh	r3, [r3, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	4619      	mov	r1, r3
 8001796:	f007 f977 	bl	8008a88 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3b01      	subs	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	dcec      	bgt.n	8001780 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80017a6:	2310      	movs	r3, #16
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	e008      	b.n	80017be <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 ff96 	bl	80036e4 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	2b07      	cmp	r3, #7
 80017c2:	dcf3      	bgt.n	80017ac <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 80017c4:	e1fc      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80017c6:	48a4      	ldr	r0, [pc, #656]	; (8001a58 <HAL_UART_RxCpltCallback+0x6e8>)
 80017c8:	f013 ff3e 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80017cc:	4ba3      	ldr	r3, [pc, #652]	; (8001a5c <HAL_UART_RxCpltCallback+0x6ec>)
 80017ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d2:	2201      	movs	r2, #1
 80017d4:	4618      	mov	r0, r3
 80017d6:	f007 f957 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80017da:	2101      	movs	r1, #1
 80017dc:	2009      	movs	r0, #9
 80017de:	f001 ff81 	bl	80036e4 <set_rail_monitor_enable>

		break;
 80017e2:	e1ed      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80017e4:	489e      	ldr	r0, [pc, #632]	; (8001a60 <HAL_UART_RxCpltCallback+0x6f0>)
 80017e6:	f013 ff2f 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80017ea:	4b9c      	ldr	r3, [pc, #624]	; (8001a5c <HAL_UART_RxCpltCallback+0x6ec>)
 80017ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f0:	2200      	movs	r2, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f007 f948 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80017f8:	2100      	movs	r1, #0
 80017fa:	2009      	movs	r0, #9
 80017fc:	f001 ff72 	bl	80036e4 <set_rail_monitor_enable>
		break;
 8001800:	e1de      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8001802:	4898      	ldr	r0, [pc, #608]	; (8001a64 <HAL_UART_RxCpltCallback+0x6f4>)
 8001804:	f013 ff20 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8001808:	4b94      	ldr	r3, [pc, #592]	; (8001a5c <HAL_UART_RxCpltCallback+0x6ec>)
 800180a:	2180      	movs	r1, #128	; 0x80
 800180c:	2201      	movs	r2, #1
 800180e:	4618      	mov	r0, r3
 8001810:	f007 f93a 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8001814:	2101      	movs	r1, #1
 8001816:	200a      	movs	r0, #10
 8001818:	f001 ff64 	bl	80036e4 <set_rail_monitor_enable>

		break;
 800181c:	e1d0      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 800181e:	4892      	ldr	r0, [pc, #584]	; (8001a68 <HAL_UART_RxCpltCallback+0x6f8>)
 8001820:	f013 ff12 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001824:	4b8d      	ldr	r3, [pc, #564]	; (8001a5c <HAL_UART_RxCpltCallback+0x6ec>)
 8001826:	2180      	movs	r1, #128	; 0x80
 8001828:	2200      	movs	r2, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f007 f92c 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001830:	2100      	movs	r1, #0
 8001832:	200a      	movs	r0, #10
 8001834:	f001 ff56 	bl	80036e4 <set_rail_monitor_enable>
		break;
 8001838:	e1c2      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 800183a:	488c      	ldr	r0, [pc, #560]	; (8001a6c <HAL_UART_RxCpltCallback+0x6fc>)
 800183c:	f013 ff04 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001840:	4b86      	ldr	r3, [pc, #536]	; (8001a5c <HAL_UART_RxCpltCallback+0x6ec>)
 8001842:	2140      	movs	r1, #64	; 0x40
 8001844:	2201      	movs	r2, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f007 f91e 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 800184c:	2101      	movs	r1, #1
 800184e:	200b      	movs	r0, #11
 8001850:	f001 ff48 	bl	80036e4 <set_rail_monitor_enable>

		break;
 8001854:	e1b4      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001856:	4886      	ldr	r0, [pc, #536]	; (8001a70 <HAL_UART_RxCpltCallback+0x700>)
 8001858:	f013 fef6 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 800185c:	4b7f      	ldr	r3, [pc, #508]	; (8001a5c <HAL_UART_RxCpltCallback+0x6ec>)
 800185e:	2140      	movs	r1, #64	; 0x40
 8001860:	2200      	movs	r2, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f007 f910 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001868:	2100      	movs	r1, #0
 800186a:	200b      	movs	r0, #11
 800186c:	f001 ff3a 	bl	80036e4 <set_rail_monitor_enable>
		break;
 8001870:	e1a6      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001872:	4880      	ldr	r0, [pc, #512]	; (8001a74 <HAL_UART_RxCpltCallback+0x704>)
 8001874:	f013 fee8 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001878:	4b78      	ldr	r3, [pc, #480]	; (8001a5c <HAL_UART_RxCpltCallback+0x6ec>)
 800187a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800187e:	2201      	movs	r2, #1
 8001880:	4618      	mov	r0, r3
 8001882:	f007 f901 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001886:	2101      	movs	r1, #1
 8001888:	200c      	movs	r0, #12
 800188a:	f001 ff2b 	bl	80036e4 <set_rail_monitor_enable>

		break;
 800188e:	e197      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001890:	4879      	ldr	r0, [pc, #484]	; (8001a78 <HAL_UART_RxCpltCallback+0x708>)
 8001892:	f013 fed9 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001896:	4b71      	ldr	r3, [pc, #452]	; (8001a5c <HAL_UART_RxCpltCallback+0x6ec>)
 8001898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189c:	2200      	movs	r2, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f007 f8f2 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 80018a4:	2100      	movs	r1, #0
 80018a6:	200c      	movs	r0, #12
 80018a8:	f001 ff1c 	bl	80036e4 <set_rail_monitor_enable>
		break;
 80018ac:	e188      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80018ae:	4873      	ldr	r0, [pc, #460]	; (8001a7c <HAL_UART_RxCpltCallback+0x70c>)
 80018b0:	f013 feca 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80018b4:	4b69      	ldr	r3, [pc, #420]	; (8001a5c <HAL_UART_RxCpltCallback+0x6ec>)
 80018b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ba:	2201      	movs	r2, #1
 80018bc:	4618      	mov	r0, r3
 80018be:	f007 f8e3 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 80018c2:	2101      	movs	r1, #1
 80018c4:	200d      	movs	r0, #13
 80018c6:	f001 ff0d 	bl	80036e4 <set_rail_monitor_enable>

		break;
 80018ca:	e179      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 80018cc:	486c      	ldr	r0, [pc, #432]	; (8001a80 <HAL_UART_RxCpltCallback+0x710>)
 80018ce:	f013 febb 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80018d2:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <HAL_UART_RxCpltCallback+0x6ec>)
 80018d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d8:	2200      	movs	r2, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f007 f8d4 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 80018e0:	2100      	movs	r1, #0
 80018e2:	200d      	movs	r0, #13
 80018e4:	f001 fefe 	bl	80036e4 <set_rail_monitor_enable>
		break;
 80018e8:	e16a      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 80018ea:	4866      	ldr	r0, [pc, #408]	; (8001a84 <HAL_UART_RxCpltCallback+0x714>)
 80018ec:	f013 feac 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 80018f0:	4b5a      	ldr	r3, [pc, #360]	; (8001a5c <HAL_UART_RxCpltCallback+0x6ec>)
 80018f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f6:	2201      	movs	r2, #1
 80018f8:	4618      	mov	r0, r3
 80018fa:	f007 f8c5 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 80018fe:	2101      	movs	r1, #1
 8001900:	200f      	movs	r0, #15
 8001902:	f001 feef 	bl	80036e4 <set_rail_monitor_enable>

		break;
 8001906:	e15b      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001908:	485f      	ldr	r0, [pc, #380]	; (8001a88 <HAL_UART_RxCpltCallback+0x718>)
 800190a:	f013 fe9d 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 800190e:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_UART_RxCpltCallback+0x6ec>)
 8001910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001914:	2200      	movs	r2, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f007 f8b6 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 800191c:	2100      	movs	r1, #0
 800191e:	200f      	movs	r0, #15
 8001920:	f001 fee0 	bl	80036e4 <set_rail_monitor_enable>
		break;
 8001924:	e14c      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001926:	4859      	ldr	r0, [pc, #356]	; (8001a8c <HAL_UART_RxCpltCallback+0x71c>)
 8001928:	f013 fe8e 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 800192c:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <HAL_UART_RxCpltCallback+0x6dc>)
 800192e:	2140      	movs	r1, #64	; 0x40
 8001930:	2201      	movs	r2, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f007 f8a8 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001938:	2101      	movs	r1, #1
 800193a:	2010      	movs	r0, #16
 800193c:	f001 fed2 	bl	80036e4 <set_rail_monitor_enable>

		break;
 8001940:	e13e      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001942:	4853      	ldr	r0, [pc, #332]	; (8001a90 <HAL_UART_RxCpltCallback+0x720>)
 8001944:	f013 fe80 	bl	8015648 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001948:	4b40      	ldr	r3, [pc, #256]	; (8001a4c <HAL_UART_RxCpltCallback+0x6dc>)
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	2200      	movs	r2, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f007 f89a 	bl	8008a88 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001954:	2100      	movs	r1, #0
 8001956:	2010      	movs	r0, #16
 8001958:	f001 fec4 	bl	80036e4 <set_rail_monitor_enable>
		break;
 800195c:	e130      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 800195e:	484d      	ldr	r0, [pc, #308]	; (8001a94 <HAL_UART_RxCpltCallback+0x724>)
 8001960:	f013 fe72 	bl	8015648 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001964:	2300      	movs	r3, #0
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2320      	movs	r3, #32
 800196a:	4a4b      	ldr	r2, [pc, #300]	; (8001a98 <HAL_UART_RxCpltCallback+0x728>)
 800196c:	2100      	movs	r1, #0
 800196e:	484b      	ldr	r0, [pc, #300]	; (8001a9c <HAL_UART_RxCpltCallback+0x72c>)
 8001970:	f003 fcee 	bl	8005350 <HAL_DAC_Start_DMA>
		break;
 8001974:	e124      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001976:	484a      	ldr	r0, [pc, #296]	; (8001aa0 <HAL_UART_RxCpltCallback+0x730>)
 8001978:	f013 fe66 	bl	8015648 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800197c:	2100      	movs	r1, #0
 800197e:	4847      	ldr	r0, [pc, #284]	; (8001a9c <HAL_UART_RxCpltCallback+0x72c>)
 8001980:	f003 fda6 	bl	80054d0 <HAL_DAC_Stop_DMA>
		break;
 8001984:	e11c      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001986:	4847      	ldr	r0, [pc, #284]	; (8001aa4 <HAL_UART_RxCpltCallback+0x734>)
 8001988:	f013 fe5e 	bl	8015648 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800198c:	210c      	movs	r1, #12
 800198e:	4846      	ldr	r0, [pc, #280]	; (8001aa8 <HAL_UART_RxCpltCallback+0x738>)
 8001990:	f00b feca 	bl	800d728 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001994:	4b45      	ldr	r3, [pc, #276]	; (8001aac <HAL_UART_RxCpltCallback+0x73c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2102      	movs	r1, #2
 800199a:	4618      	mov	r0, r3
 800199c:	f010 fa9e 	bl	8011edc <osEventFlagsSet>
		break;
 80019a0:	e10e      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 80019a2:	4843      	ldr	r0, [pc, #268]	; (8001ab0 <HAL_UART_RxCpltCallback+0x740>)
 80019a4:	f013 fe50 	bl	8015648 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 80019a8:	210c      	movs	r1, #12
 80019aa:	483f      	ldr	r0, [pc, #252]	; (8001aa8 <HAL_UART_RxCpltCallback+0x738>)
 80019ac:	f00c f816 	bl	800d9dc <HAL_TIM_OC_Stop_IT>
		break;
 80019b0:	e106      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1B: {
		printf("PMT ON\n");
 80019b2:	4840      	ldr	r0, [pc, #256]	; (8001ab4 <HAL_UART_RxCpltCallback+0x744>)
 80019b4:	f013 fe48 	bl	8015648 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80019b8:	2100      	movs	r1, #0
 80019ba:	483f      	ldr	r0, [pc, #252]	; (8001ab8 <HAL_UART_RxCpltCallback+0x748>)
 80019bc:	f00b feb4 	bl	800d728 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80019c0:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <HAL_UART_RxCpltCallback+0x73c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2101      	movs	r1, #1
 80019c6:	4618      	mov	r0, r3
 80019c8:	f010 fa88 	bl	8011edc <osEventFlagsSet>
		break;
 80019cc:	e0f8      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 80019ce:	483b      	ldr	r0, [pc, #236]	; (8001abc <HAL_UART_RxCpltCallback+0x74c>)
 80019d0:	f013 fe3a 	bl	8015648 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80019d4:	2100      	movs	r1, #0
 80019d6:	4838      	ldr	r0, [pc, #224]	; (8001ab8 <HAL_UART_RxCpltCallback+0x748>)
 80019d8:	f00c f800 	bl	800d9dc <HAL_TIM_OC_Stop_IT>
		break;
 80019dc:	e0f0      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1C: {
		printf("HK ON \n");
 80019de:	4838      	ldr	r0, [pc, #224]	; (8001ac0 <HAL_UART_RxCpltCallback+0x750>)
 80019e0:	f013 fe32 	bl	8015648 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80019e4:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_UART_RxCpltCallback+0x73c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2104      	movs	r1, #4
 80019ea:	4618      	mov	r0, r3
 80019ec:	f010 fa76 	bl	8011edc <osEventFlagsSet>
		HK_ENABLED = 1;
 80019f0:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <HAL_UART_RxCpltCallback+0x754>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
		break;
 80019f6:	e0e3      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0C: {
		printf("HK OFF\n");
 80019f8:	4833      	ldr	r0, [pc, #204]	; (8001ac8 <HAL_UART_RxCpltCallback+0x758>)
 80019fa:	f013 fe25 	bl	8015648 <puts>
		HK_ENABLED = 0;
 80019fe:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <HAL_UART_RxCpltCallback+0x754>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
		break;
 8001a04:	e0dc      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001a06:	4831      	ldr	r0, [pc, #196]	; (8001acc <HAL_UART_RxCpltCallback+0x75c>)
 8001a08:	f013 fe1e 	bl	8015648 <puts>
		if (step < 17) {
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_UART_RxCpltCallback+0x760>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	f200 80cd 	bhi.w	8001bb2 <HAL_UART_RxCpltCallback+0x842>
			step += 2;
 8001a18:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_UART_RxCpltCallback+0x760>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	3302      	adds	r3, #2
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_UART_RxCpltCallback+0x760>)
 8001a24:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_UART_RxCpltCallback+0x760>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_UART_RxCpltCallback+0x728>)
 8001a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	4818      	ldr	r0, [pc, #96]	; (8001a9c <HAL_UART_RxCpltCallback+0x72c>)
 8001a3a:	f003 fdec 	bl	8005616 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4816      	ldr	r0, [pc, #88]	; (8001a9c <HAL_UART_RxCpltCallback+0x72c>)
 8001a42:	f003 fc2d 	bl	80052a0 <HAL_DAC_Start>
		}
		break;
 8001a46:	e0b4      	b.n	8001bb2 <HAL_UART_RxCpltCallback+0x842>
 8001a48:	08015e5c 	.word	0x08015e5c
 8001a4c:	58020400 	.word	0x58020400
 8001a50:	08015e68 	.word	0x08015e68
 8001a54:	08016168 	.word	0x08016168
 8001a58:	08015e74 	.word	0x08015e74
 8001a5c:	58020800 	.word	0x58020800
 8001a60:	08015e80 	.word	0x08015e80
 8001a64:	08015e90 	.word	0x08015e90
 8001a68:	08015e9c 	.word	0x08015e9c
 8001a6c:	08015ea8 	.word	0x08015ea8
 8001a70:	08015eb4 	.word	0x08015eb4
 8001a74:	08015ec4 	.word	0x08015ec4
 8001a78:	08015ed0 	.word	0x08015ed0
 8001a7c:	08015edc 	.word	0x08015edc
 8001a80:	08015ee8 	.word	0x08015ee8
 8001a84:	08015ef4 	.word	0x08015ef4
 8001a88:	08015f04 	.word	0x08015f04
 8001a8c:	08015f14 	.word	0x08015f14
 8001a90:	08015f20 	.word	0x08015f20
 8001a94:	08015f30 	.word	0x08015f30
 8001a98:	24000000 	.word	0x24000000
 8001a9c:	240002f4 	.word	0x240002f4
 8001aa0:	08015f40 	.word	0x08015f40
 8001aa4:	08015f50 	.word	0x08015f50
 8001aa8:	24000a54 	.word	0x24000a54
 8001aac:	240007e4 	.word	0x240007e4
 8001ab0:	08015f58 	.word	0x08015f58
 8001ab4:	08015f64 	.word	0x08015f64
 8001ab8:	24000a08 	.word	0x24000a08
 8001abc:	08015f6c 	.word	0x08015f6c
 8001ac0:	08015f74 	.word	0x08015f74
 8001ac4:	24000830 	.word	0x24000830
 8001ac8:	08015f7c 	.word	0x08015f7c
 8001acc:	08015f84 	.word	0x08015f84
 8001ad0:	24000080 	.word	0x24000080
	}
	case 0x0D: {
		printf("Step Down\n");
 8001ad4:	483c      	ldr	r0, [pc, #240]	; (8001bc8 <HAL_UART_RxCpltCallback+0x858>)
 8001ad6:	f013 fdb7 	bl	8015648 <puts>
		if (step > 3) {
 8001ada:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <HAL_UART_RxCpltCallback+0x85c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d968      	bls.n	8001bb6 <HAL_UART_RxCpltCallback+0x846>
			step -= 2;
 8001ae4:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_UART_RxCpltCallback+0x85c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	3b02      	subs	r3, #2
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_UART_RxCpltCallback+0x85c>)
 8001af0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001af2:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <HAL_UART_RxCpltCallback+0x85c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <HAL_UART_RxCpltCallback+0x860>)
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	4833      	ldr	r0, [pc, #204]	; (8001bd4 <HAL_UART_RxCpltCallback+0x864>)
 8001b06:	f003 fd86 	bl	8005616 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4831      	ldr	r0, [pc, #196]	; (8001bd4 <HAL_UART_RxCpltCallback+0x864>)
 8001b0e:	f003 fbc7 	bl	80052a0 <HAL_DAC_Start>
		}
		break;
 8001b12:	e050      	b.n	8001bb6 <HAL_UART_RxCpltCallback+0x846>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001b14:	4830      	ldr	r0, [pc, #192]	; (8001bd8 <HAL_UART_RxCpltCallback+0x868>)
 8001b16:	f013 fd97 	bl	8015648 <puts>
		if (cadence <= 50000) {
 8001b1a:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <HAL_UART_RxCpltCallback+0x86c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d849      	bhi.n	8001bba <HAL_UART_RxCpltCallback+0x84a>
			cadence *= 2;
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_UART_RxCpltCallback+0x86c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4a2b      	ldr	r2, [pc, #172]	; (8001bdc <HAL_UART_RxCpltCallback+0x86c>)
 8001b2e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <HAL_UART_RxCpltCallback+0x86c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001b3a:	e03e      	b.n	8001bba <HAL_UART_RxCpltCallback+0x84a>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001b3c:	4828      	ldr	r0, [pc, #160]	; (8001be0 <HAL_UART_RxCpltCallback+0x870>)
 8001b3e:	f013 fd83 	bl	8015648 <puts>
		if (cadence >= 6250) {
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <HAL_UART_RxCpltCallback+0x86c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f641 0269 	movw	r2, #6249	; 0x1869
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d937      	bls.n	8001bbe <HAL_UART_RxCpltCallback+0x84e>
			cadence /= 2;
 8001b4e:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <HAL_UART_RxCpltCallback+0x86c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <HAL_UART_RxCpltCallback+0x86c>)
 8001b56:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001b58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_UART_RxCpltCallback+0x86c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001b62:	e02c      	b.n	8001bbe <HAL_UART_RxCpltCallback+0x84e>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001b64:	481f      	ldr	r0, [pc, #124]	; (8001be4 <HAL_UART_RxCpltCallback+0x874>)
 8001b66:	f013 fd6f 	bl	8015648 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <HAL_UART_RxCpltCallback+0x878>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2102      	movs	r1, #2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f010 f9b3 	bl	8011edc <osEventFlagsSet>
		break;
 8001b76:	e023      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001b78:	481c      	ldr	r0, [pc, #112]	; (8001bec <HAL_UART_RxCpltCallback+0x87c>)
 8001b7a:	f013 fd65 	bl	8015648 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_UART_RxCpltCallback+0x878>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2104      	movs	r1, #4
 8001b84:	4618      	mov	r0, r3
 8001b86:	f010 f9a9 	bl	8011edc <osEventFlagsSet>
		break;
 8001b8a:	e019      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001b8c:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <HAL_UART_RxCpltCallback+0x880>)
 8001b8e:	f013 fd5b 	bl	8015648 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_UART_RxCpltCallback+0x878>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2108      	movs	r1, #8
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f010 f99f 	bl	8011edc <osEventFlagsSet>
		break;
 8001b9e:	e00f      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xAF: {
		sync();
 8001ba0:	f000 f964 	bl	8001e6c <sync>
		break;
 8001ba4:	e00c      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
	case 0xCF: {
		// TODO: set a flag to start idle mode
		break;
	}
	default: {
		printf("Unknown Command\n");
 8001ba6:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <HAL_UART_RxCpltCallback+0x884>)
 8001ba8:	f013 fd4e 	bl	8015648 <puts>
		break;
 8001bac:	e008      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001bae:	bf00      	nop
 8001bb0:	e006      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001bb2:	bf00      	nop
 8001bb4:	e004      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001bb6:	bf00      	nop
 8001bb8:	e002      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001bba:	bf00      	nop
 8001bbc:	e000      	b.n	8001bc0 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001bbe:	bf00      	nop
	}
	}
}
 8001bc0:	bf00      	nop
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	08015f8c 	.word	0x08015f8c
 8001bcc:	24000080 	.word	0x24000080
 8001bd0:	24000000 	.word	0x24000000
 8001bd4:	240002f4 	.word	0x240002f4
 8001bd8:	08015f98 	.word	0x08015f98
 8001bdc:	24000084 	.word	0x24000084
 8001be0:	08015fa4 	.word	0x08015fa4
 8001be4:	08015fb0 	.word	0x08015fb0
 8001be8:	240007e8 	.word	0x240007e8
 8001bec:	08015fc0 	.word	0x08015fc0
 8001bf0:	08015fcc 	.word	0x08015fcc
 8001bf4:	08015fd8 	.word	0x08015fd8

08001bf8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <HAL_UART_TxCpltCallback+0x1c>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	24000088 	.word	0x24000088

08001c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c1c:	f001 fdac 	bl	8003778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c20:	f000 f826 	bl	8001c70 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c24:	f000 f8a4 	bl	8001d70 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c28:	f7ff fa58 	bl	80010dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001c2c:	f7ff f85c 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001c30:	f001 f934 	bl	8002e9c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001c34:	f001 faaa 	bl	800318c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001c38:	f7ff faca 	bl	80011d0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001c3c:	f000 fc86 	bl	800254c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001c40:	f001 f8b6 	bl	8002db0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001c44:	f001 f806 	bl	8002c54 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001c48:	f7fe fdee 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001c4c:	f7fe fcca 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001c50:	f7fe ff96 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001c54:	f000 fc22 	bl	800249c <MX_SPI1_Init>
  MX_RTC_Init();
 8001c58:	f000 faf4 	bl	8002244 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001c5c:	f000 f8b8 	bl	8001dd0 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c60:	f00f ffe6 	bl	8011c30 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c64:	f7ff f886 	bl	8000d74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c68:	f010 f806 	bl	8011c78 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001c6c:	e7fe      	b.n	8001c6c <main+0x54>
	...

08001c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b09c      	sub	sp, #112	; 0x70
 8001c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7a:	224c      	movs	r2, #76	; 0x4c
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f013 fb8c 	bl	801539c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2220      	movs	r2, #32
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f013 fb86 	bl	801539c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c90:	2002      	movs	r0, #2
 8001c92:	f007 f86b 	bl	8008d6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <SystemClock_Config+0xf8>)
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	4a32      	ldr	r2, [pc, #200]	; (8001d68 <SystemClock_Config+0xf8>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <SystemClock_Config+0xf8>)
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <SystemClock_Config+0xfc>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cb8:	4a2c      	ldr	r2, [pc, #176]	; (8001d6c <SystemClock_Config+0xfc>)
 8001cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbe:	6193      	str	r3, [r2, #24]
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <SystemClock_Config+0xfc>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ccc:	bf00      	nop
 8001cce:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <SystemClock_Config+0xfc>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cda:	d1f8      	bne.n	8001cce <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001ce6:	2309      	movs	r3, #9
 8001ce8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cea:	2340      	movs	r3, #64	; 0x40
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d02:	2304      	movs	r3, #4
 8001d04:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d06:	2302      	movs	r3, #2
 8001d08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f007 f860 	bl	8008de0 <HAL_RCC_OscConfig>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001d26:	f000 f94b 	bl	8001fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2a:	233f      	movs	r3, #63	; 0x3f
 8001d2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f007 fca0 	bl	8009694 <HAL_RCC_ClockConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001d5a:	f000 f931 	bl	8001fc0 <Error_Handler>
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3770      	adds	r7, #112	; 0x70
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	58000400 	.word	0x58000400
 8001d6c:	58024800 	.word	0x58024800

08001d70 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b0b0      	sub	sp, #192	; 0xc0
 8001d74:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d76:	463b      	mov	r3, r7
 8001d78:	22c0      	movs	r2, #192	; 0xc0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f013 fb0d 	bl	801539c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001d92:	2320      	movs	r3, #32
 8001d94:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001d96:	2308      	movs	r3, #8
 8001d98:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	4618      	mov	r0, r3
 8001db8:	f008 f83a 	bl	8009e30 <HAL_RCCEx_PeriphCLKConfig>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001dc2:	f000 f8fd 	bl	8001fc0 <Error_Handler>
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	37c0      	adds	r7, #192	; 0xc0
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f010 f842 	bl	8011e5e <osEventFlagsNew>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	; (8001e54 <system_setup+0x84>)
 8001dde:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <system_setup+0x84>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d100      	bne.n	8001dea <system_setup+0x1a>
        while (1);
 8001de8:	e7fe      	b.n	8001de8 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f010 f837 	bl	8011e5e <osEventFlagsNew>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <system_setup+0x88>)
 8001df4:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <system_setup+0x88>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d100      	bne.n	8001e00 <system_setup+0x30>
        while (1);
 8001dfe:	e7fe      	b.n	8001dfe <system_setup+0x2e>
    }

	// ---- 2 ---- //
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_SIZE, sizeof(packet_t), NULL);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2108      	movs	r1, #8
 8001e04:	2080      	movs	r0, #128	; 0x80
 8001e06:	f010 f913 	bl	8012030 <osMessageQueueNew>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <system_setup+0x8c>)
 8001e0e:	6013      	str	r3, [r2, #0]
	if (mid_MsgQueue == NULL) {
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <system_setup+0x8c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d100      	bne.n	8001e1a <system_setup+0x4a>
		while (1);
 8001e18:	e7fe      	b.n	8001e18 <system_setup+0x48>
	}

	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8001e1a:	f001 faa5 	bl	8003368 <voltage_monitor_init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d100      	bne.n	8001e26 <system_setup+0x56>
		while (1);
 8001e24:	e7fe      	b.n	8001e24 <system_setup+0x54>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001e26:	2100      	movs	r1, #0
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <system_setup+0x90>)
 8001e2a:	f00b fc7d 	bl	800d728 <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8001e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e32:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 8001e38:	f000 fa96 	bl	8002368 <init_adc_dma>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d100      	bne.n	8001e44 <system_setup+0x74>
		while (1);
 8001e42:	e7fe      	b.n	8001e42 <system_setup+0x72>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001e44:	2201      	movs	r2, #1
 8001e46:	4907      	ldr	r1, [pc, #28]	; (8001e64 <system_setup+0x94>)
 8001e48:	4807      	ldr	r0, [pc, #28]	; (8001e68 <system_setup+0x98>)
 8001e4a:	f00d f94d 	bl	800f0e8 <HAL_UART_Receive_IT>

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	240007e4 	.word	0x240007e4
 8001e58:	240007e8 	.word	0x240007e8
 8001e5c:	240007ec 	.word	0x240007ec
 8001e60:	24000aa0 	.word	0x24000aa0
 8001e64:	240007f0 	.word	0x240007f0
 8001e68:	24000aec 	.word	0x24000aec

08001e6c <sync>:

void sync() {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
	send_ACK();
 8001e72:	f000 f81f 	bl	8001eb4 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8001e76:	480d      	ldr	r0, [pc, #52]	; (8001eac <sync+0x40>)
 8001e78:	f00d fa02 	bl	800f280 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8001e7c:	2364      	movs	r3, #100	; 0x64
 8001e7e:	2209      	movs	r2, #9
 8001e80:	490b      	ldr	r1, [pc, #44]	; (8001eb0 <sync+0x44>)
 8001e82:	480a      	ldr	r0, [pc, #40]	; (8001eac <sync+0x40>)
 8001e84:	f00d f868 	bl	800ef58 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <sync+0x44>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2bff      	cmp	r3, #255	; 0xff
 8001e92:	d1f3      	bne.n	8001e7c <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001e94:	2201      	movs	r2, #1
 8001e96:	4906      	ldr	r1, [pc, #24]	; (8001eb0 <sync+0x44>)
 8001e98:	4804      	ldr	r0, [pc, #16]	; (8001eac <sync+0x40>)
 8001e9a:	f00d f925 	bl	800f0e8 <HAL_UART_Receive_IT>

	send_ACK();
 8001e9e:	f000 f809 	bl	8001eb4 <send_ACK>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	24000aec 	.word	0x24000aec
 8001eb0:	240007f0 	.word	0x240007f0

08001eb4 <send_ACK>:

void send_ACK() {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <send_ACK+0x1c>)
 8001eba:	22ff      	movs	r2, #255	; 0xff
 8001ebc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8001ebe:	2364      	movs	r3, #100	; 0x64
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4903      	ldr	r1, [pc, #12]	; (8001ed0 <send_ACK+0x1c>)
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <send_ACK+0x20>)
 8001ec6:	f00c ffb9 	bl	800ee3c <HAL_UART_Transmit>
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	24000838 	.word	0x24000838
 8001ed4:	24000aec 	.word	0x24000aec

08001ed8 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8001ede:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <get_current_step+0xc0>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d04a      	beq.n	8001f84 <get_current_step+0xac>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef4:	da48      	bge.n	8001f88 <get_current_step+0xb0>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f640 628b 	movw	r2, #3723	; 0xe8b
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d03f      	beq.n	8001f80 <get_current_step+0xa8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f640 628b 	movw	r2, #3723	; 0xe8b
 8001f06:	4293      	cmp	r3, r2
 8001f08:	dc3e      	bgt.n	8001f88 <get_current_step+0xb0>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f640 421f 	movw	r2, #3103	; 0xc1f
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d033      	beq.n	8001f7c <get_current_step+0xa4>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8001f1a:	da35      	bge.n	8001f88 <get_current_step+0xb0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d028      	beq.n	8001f78 <get_current_step+0xa0>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	dc2b      	bgt.n	8001f88 <get_current_step+0xb0>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f240 7245 	movw	r2, #1861	; 0x745
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01c      	beq.n	8001f74 <get_current_step+0x9c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f240 7245 	movw	r2, #1861	; 0x745
 8001f40:	4293      	cmp	r3, r2
 8001f42:	dc21      	bgt.n	8001f88 <get_current_step+0xb0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d010      	beq.n	8001f70 <get_current_step+0x98>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8001f54:	4293      	cmp	r3, r2
 8001f56:	dc17      	bgt.n	8001f88 <get_current_step+0xb0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d004      	beq.n	8001f68 <get_current_step+0x90>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8001f64:	d002      	beq.n	8001f6c <get_current_step+0x94>
 8001f66:	e00f      	b.n	8001f88 <get_current_step+0xb0>
	case 0:
		return 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e00e      	b.n	8001f8a <get_current_step+0xb2>
	case 620:
		return 1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e00c      	b.n	8001f8a <get_current_step+0xb2>
	case 1241:
		return 2;
 8001f70:	2302      	movs	r3, #2
 8001f72:	e00a      	b.n	8001f8a <get_current_step+0xb2>
	case 1861:
		return 3;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e008      	b.n	8001f8a <get_current_step+0xb2>
	case 2482:
		return 4;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e006      	b.n	8001f8a <get_current_step+0xb2>
	case 3103:
		return 5;
 8001f7c:	2305      	movs	r3, #5
 8001f7e:	e004      	b.n	8001f8a <get_current_step+0xb2>
	case 3723:
		return 6;
 8001f80:	2306      	movs	r3, #6
 8001f82:	e002      	b.n	8001f8a <get_current_step+0xb2>
	case 4095:
		return 7;
 8001f84:	2307      	movs	r3, #7
 8001f86:	e000      	b.n	8001f8a <get_current_step+0xb2>
	default:
		return -1;
 8001f88:	23ff      	movs	r3, #255	; 0xff
	}
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40007400 	.word	0x40007400

08001f9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fae:	f001 fc1f 	bl	80037f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40001000 	.word	0x40001000

08001fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc4:	b672      	cpsid	i
}
 8001fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001fc8:	e7fe      	b.n	8001fc8 <Error_Handler+0x8>

08001fca <packetize>:

uint16_t pmt_seq = 0;
uint32_t erpa_seq = 0;


packet_t packetize(const uint8_t *data, uint16_t size) {
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f013 f9c0 	bl	8015360 <malloc>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	88fa      	ldrh	r2, [r7, #6]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f013 f9c8 	bl	8015380 <memcpy>
	packet.size = size;
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	82bb      	strh	r3, [r7, #20]
	return packet;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002000:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <create_pmt_packet>:

void create_pmt_packet() {
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002012:	bf00      	nop
 8002014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002018:	4836      	ldr	r0, [pc, #216]	; (80020f4 <create_pmt_packet+0xe8>)
 800201a:	f006 fd1d 	bl	8008a58 <HAL_GPIO_ReadPin>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f7      	bne.n	8002014 <create_pmt_packet+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8002024:	200a      	movs	r0, #10
 8002026:	f013 f99b 	bl	8015360 <malloc>
 800202a:	4603      	mov	r3, r0
 800202c:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800202e:	2002      	movs	r0, #2
 8002030:	f013 f996 	bl	8015360 <malloc>
 8002034:	4603      	mov	r3, r0
 8002036:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002038:	2004      	movs	r0, #4
 800203a:	f013 f991 	bl	8015360 <malloc>
 800203e:	4603      	mov	r3, r0
 8002040:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f001 f858 	bl	80030f8 <get_uptime>

	sample_pmt_spi(pmt_spi);
 8002048:	6938      	ldr	r0, [r7, #16]
 800204a:	f000 f9cd 	bl	80023e8 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	22bb      	movs	r2, #187	; 0xbb
 8002052:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	3301      	adds	r3, #1
 8002058:	22bb      	movs	r2, #187	; 0xbb
 800205a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 800205c:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <create_pmt_packet+0xec>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29a      	uxth	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	3302      	adds	r3, #2
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <create_pmt_packet+0xec>)
 800206e:	881a      	ldrh	r2, [r3, #0]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	3303      	adds	r3, #3
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3304      	adds	r3, #4
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	7812      	ldrb	r2, [r2, #0]
 8002080:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3305      	adds	r3, #5
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	7852      	ldrb	r2, [r2, #1]
 800208a:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3306      	adds	r3, #6
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	7812      	ldrb	r2, [r2, #0]
 8002094:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	3307      	adds	r3, #7
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	7852      	ldrb	r2, [r2, #1]
 800209e:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3308      	adds	r3, #8
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	7892      	ldrb	r2, [r2, #2]
 80020a8:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3309      	adds	r3, #9
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	78d2      	ldrb	r2, [r2, #3]
 80020b2:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = packetize(buffer, PMT_DATA_SIZE);
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	220a      	movs	r2, #10
 80020b8:	6979      	ldr	r1, [r7, #20]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff85 	bl	8001fca <packetize>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <create_pmt_packet+0xf0>)
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	1d39      	adds	r1, r7, #4
 80020c6:	2300      	movs	r3, #0
 80020c8:	2200      	movs	r2, #0
 80020ca:	f010 f825 	bl	8012118 <osMessageQueuePut>
	pmt_seq++;
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <create_pmt_packet+0xec>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <create_pmt_packet+0xec>)
 80020d8:	801a      	strh	r2, [r3, #0]
	free(buffer);
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f013 f948 	bl	8015370 <free>
	free(pmt_spi);
 80020e0:	6938      	ldr	r0, [r7, #16]
 80020e2:	f013 f945 	bl	8015370 <free>
	free(uptime);
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f013 f942 	bl	8015370 <free>
}
 80020ec:	bf00      	nop
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	58020000 	.word	0x58020000
 80020f8:	2400083a 	.word	0x2400083a
 80020fc:	240007ec 	.word	0x240007ec

08002100 <create_erpa_packet>:


void create_erpa_packet() {
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002106:	bf00      	nop
 8002108:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800210c:	484a      	ldr	r0, [pc, #296]	; (8002238 <create_erpa_packet+0x138>)
 800210e:	f006 fca3 	bl	8008a58 <HAL_GPIO_ReadPin>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f7      	bne.n	8002108 <create_erpa_packet+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002118:	200e      	movs	r0, #14
 800211a:	f013 f921 	bl	8015360 <malloc>
 800211e:	4603      	mov	r3, r0
 8002120:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002122:	2002      	movs	r0, #2
 8002124:	f013 f91c 	bl	8015360 <malloc>
 8002128:	4603      	mov	r3, r0
 800212a:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 800212c:	2002      	movs	r0, #2
 800212e:	f013 f917 	bl	8015360 <malloc>
 8002132:	4603      	mov	r3, r0
 8002134:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002136:	2004      	movs	r0, #4
 8002138:	f013 f912 	bl	8015360 <malloc>
 800213c:	4603      	mov	r3, r0
 800213e:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 8002140:	23ff      	movs	r3, #255	; 0xff
 8002142:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8002144:	6938      	ldr	r0, [r7, #16]
 8002146:	f000 ffd7 	bl	80030f8 <get_uptime>
	sweep_step = get_current_step();
 800214a:	f7ff fec5 	bl	8001ed8 <get_current_step>
 800214e:	4603      	mov	r3, r0
 8002150:	73fb      	strb	r3, [r7, #15]

	sample_erpa_spi(erpa_spi);
 8002152:	69b8      	ldr	r0, [r7, #24]
 8002154:	f000 f96c 	bl	8002430 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8002158:	6978      	ldr	r0, [r7, #20]
 800215a:	f000 f98d 	bl	8002478 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	22aa      	movs	r2, #170	; 0xaa
 8002162:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	3301      	adds	r3, #1
 8002168:	22aa      	movs	r2, #170	; 0xaa
 800216a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 800216c:	4b33      	ldr	r3, [pc, #204]	; (800223c <create_erpa_packet+0x13c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0c1a      	lsrs	r2, r3, #16
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3302      	adds	r3, #2
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 800217a:	4b30      	ldr	r3, [pc, #192]	; (800223c <create_erpa_packet+0x13c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0a1a      	lsrs	r2, r3, #8
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	3303      	adds	r3, #3
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 8002188:	4b2c      	ldr	r3, [pc, #176]	; (800223c <create_erpa_packet+0x13c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	3304      	adds	r3, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3305      	adds	r3, #5
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	3306      	adds	r3, #6
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	3307      	adds	r3, #7
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	3308      	adds	r3, #8
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	7812      	ldrb	r2, [r2, #0]
 80021c0:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3309      	adds	r3, #9
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	7852      	ldrb	r2, [r2, #1]
 80021ca:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	330a      	adds	r3, #10
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	7812      	ldrb	r2, [r2, #0]
 80021d4:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	330b      	adds	r3, #11
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	7852      	ldrb	r2, [r2, #1]
 80021de:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	330c      	adds	r3, #12
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	7892      	ldrb	r2, [r2, #2]
 80021e8:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	330d      	adds	r3, #13
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	78d2      	ldrb	r2, [r2, #3]
 80021f2:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = packetize(buffer, ERPA_DATA_SIZE);
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	220e      	movs	r2, #14
 80021f8:	69f9      	ldr	r1, [r7, #28]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fee5 	bl	8001fca <packetize>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <create_erpa_packet+0x140>)
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	1d39      	adds	r1, r7, #4
 8002206:	2300      	movs	r3, #0
 8002208:	2200      	movs	r2, #0
 800220a:	f00f ff85 	bl	8012118 <osMessageQueuePut>
	erpa_seq++;
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <create_erpa_packet+0x13c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	4a09      	ldr	r2, [pc, #36]	; (800223c <create_erpa_packet+0x13c>)
 8002216:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002218:	69f8      	ldr	r0, [r7, #28]
 800221a:	f013 f8a9 	bl	8015370 <free>
	free(erpa_spi);
 800221e:	69b8      	ldr	r0, [r7, #24]
 8002220:	f013 f8a6 	bl	8015370 <free>
	free(erpa_adc);
 8002224:	6978      	ldr	r0, [r7, #20]
 8002226:	f013 f8a3 	bl	8015370 <free>
	free(uptime);
 800222a:	6938      	ldr	r0, [r7, #16]
 800222c:	f013 f8a0 	bl	8015370 <free>
}
 8002230:	bf00      	nop
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	58020400 	.word	0x58020400
 800223c:	2400083c 	.word	0x2400083c
 8002240:	240007ec 	.word	0x240007ec

08002244 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002258:	2300      	movs	r3, #0
 800225a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800225c:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <MX_RTC_Init+0xb4>)
 800225e:	4a27      	ldr	r2, [pc, #156]	; (80022fc <MX_RTC_Init+0xb8>)
 8002260:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002262:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <MX_RTC_Init+0xb4>)
 8002264:	2200      	movs	r2, #0
 8002266:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8002268:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <MX_RTC_Init+0xb4>)
 800226a:	2263      	movs	r2, #99	; 0x63
 800226c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 800226e:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <MX_RTC_Init+0xb4>)
 8002270:	f242 720f 	movw	r2, #9999	; 0x270f
 8002274:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <MX_RTC_Init+0xb4>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <MX_RTC_Init+0xb4>)
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <MX_RTC_Init+0xb4>)
 8002284:	2200      	movs	r2, #0
 8002286:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <MX_RTC_Init+0xb4>)
 800228a:	2200      	movs	r2, #0
 800228c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800228e:	481a      	ldr	r0, [pc, #104]	; (80022f8 <MX_RTC_Init+0xb4>)
 8002290:	f00a facc 	bl	800c82c <HAL_RTC_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800229a:	f7ff fe91 	bl	8001fc0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800229e:	2300      	movs	r3, #0
 80022a0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	2201      	movs	r2, #1
 80022b6:	4619      	mov	r1, r3
 80022b8:	480f      	ldr	r0, [pc, #60]	; (80022f8 <MX_RTC_Init+0xb4>)
 80022ba:	f00a fb39 	bl	800c930 <HAL_RTC_SetTime>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80022c4:	f7ff fe7c 	bl	8001fc0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022c8:	2301      	movs	r3, #1
 80022ca:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80022cc:	2301      	movs	r3, #1
 80022ce:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80022d0:	2301      	movs	r3, #1
 80022d2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80022d8:	463b      	mov	r3, r7
 80022da:	2201      	movs	r2, #1
 80022dc:	4619      	mov	r1, r3
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <MX_RTC_Init+0xb4>)
 80022e0:	f00a fbc4 	bl	800ca6c <HAL_RTC_SetDate>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80022ea:	f7ff fe69 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	24000840 	.word	0x24000840
 80022fc:	58004000 	.word	0x58004000

08002300 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b0b2      	sub	sp, #200	; 0xc8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	22c0      	movs	r2, #192	; 0xc0
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f013 f843 	bl	801539c <memset>
  if(rtcHandle->Instance==RTC)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a10      	ldr	r2, [pc, #64]	; (800235c <HAL_RTC_MspInit+0x5c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d118      	bne.n	8002352 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002320:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_RTC_MspInit+0x60>)
 800232e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	4618      	mov	r0, r3
 8002338:	f007 fd7a 	bl	8009e30 <HAL_RCCEx_PeriphCLKConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8002342:	f7ff fe3d 	bl	8001fc0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <HAL_RTC_MspInit+0x64>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a06      	ldr	r2, [pc, #24]	; (8002364 <HAL_RTC_MspInit+0x64>)
 800234c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002350:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002352:	bf00      	nop
 8002354:	37c8      	adds	r7, #200	; 0xc8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	58004000 	.word	0x58004000
 8002360:	00019300 	.word	0x00019300
 8002364:	58024400 	.word	0x58024400

08002368 <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8002372:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002376:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800237a:	4817      	ldr	r0, [pc, #92]	; (80023d8 <init_adc_dma+0x70>)
 800237c:	f002 fd4c 	bl	8004e18 <HAL_ADCEx_Calibration_Start>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002386:	f7ff fe1b 	bl	8001fc0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800238a:	220b      	movs	r2, #11
 800238c:	4913      	ldr	r1, [pc, #76]	; (80023dc <init_adc_dma+0x74>)
 800238e:	4812      	ldr	r0, [pc, #72]	; (80023d8 <init_adc_dma+0x70>)
 8002390:	f001 fe20 	bl	8003fd4 <HAL_ADC_Start_DMA>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800239a:	f7ff fe11 	bl	8001fc0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800239e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80023a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023a6:	480e      	ldr	r0, [pc, #56]	; (80023e0 <init_adc_dma+0x78>)
 80023a8:	f002 fd36 	bl	8004e18 <HAL_ADCEx_Calibration_Start>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80023b2:	f7ff fe05 	bl	8001fc0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80023b6:	2204      	movs	r2, #4
 80023b8:	490a      	ldr	r1, [pc, #40]	; (80023e4 <init_adc_dma+0x7c>)
 80023ba:	4809      	ldr	r0, [pc, #36]	; (80023e0 <init_adc_dma+0x78>)
 80023bc:	f001 fe0a 	bl	8003fd4 <HAL_ADC_Start_DMA>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80023c6:	f7ff fdfb 	bl	8001fc0 <Error_Handler>
	}
	status = 1;
 80023ca:	2301      	movs	r3, #1
 80023cc:	71fb      	strb	r3, [r7, #7]

	return status;
 80023ce:	79fb      	ldrb	r3, [r7, #7]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	2400013c 	.word	0x2400013c
 80023dc:	24000880 	.word	0x24000880
 80023e0:	240001a0 	.word	0x240001a0
 80023e4:	240008a0 	.word	0x240008a0

080023e8 <sample_pmt_spi>:

void sample_pmt_spi(uint8_t *buffer) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 80023f0:	f107 010c 	add.w	r1, r7, #12
 80023f4:	2301      	movs	r3, #1
 80023f6:	2201      	movs	r2, #1
 80023f8:	480c      	ldr	r0, [pc, #48]	; (800242c <sample_pmt_spi+0x44>)
 80023fa:	f00a fd99 	bl	800cf30 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8002402:	7b7b      	ldrb	r3, [r7, #13]
 8002404:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <sample_pmt_spi+0x44>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <sample_pmt_spi+0x44>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002414:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7bba      	ldrb	r2, [r7, #14]
 800241a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3301      	adds	r3, #1
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	701a      	strb	r2, [r3, #0]
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	240008a8 	.word	0x240008a8

08002430 <sample_erpa_spi>:

void sample_erpa_spi(uint8_t *buffer) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8002438:	f107 010c 	add.w	r1, r7, #12
 800243c:	2364      	movs	r3, #100	; 0x64
 800243e:	2201      	movs	r2, #1
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <sample_erpa_spi+0x44>)
 8002442:	f00a fd75 	bl	800cf30 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 800244a:	7b7b      	ldrb	r3, [r7, #13]
 800244c:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <sample_erpa_spi+0x44>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <sample_erpa_spi+0x44>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800245c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7bba      	ldrb	r2, [r7, #14]
 8002462:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3301      	adds	r3, #1
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	701a      	strb	r2, [r3, #0]
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	24000930 	.word	0x24000930

08002478 <sample_erpa_adc>:

void sample_erpa_adc(uint16_t *buffer) {
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <sample_erpa_adc+0x20>)
 8002482:	885b      	ldrh	r3, [r3, #2]
 8002484:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	89fa      	ldrh	r2, [r7, #14]
 800248a:	801a      	strh	r2, [r3, #0]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	24000880 	.word	0x24000880

0800249c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024a0:	4b28      	ldr	r3, [pc, #160]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024a2:	4a29      	ldr	r2, [pc, #164]	; (8002548 <MX_SPI1_Init+0xac>)
 80024a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024a6:	4b27      	ldr	r3, [pc, #156]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80024ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80024ae:	4b25      	ldr	r3, [pc, #148]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80024b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80024b6:	4b23      	ldr	r3, [pc, #140]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024b8:	220f      	movs	r2, #15
 80024ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024bc:	4b21      	ldr	r3, [pc, #132]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024d2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80024d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024da:	2200      	movs	r2, #0
 80024dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024e4:	4b17      	ldr	r3, [pc, #92]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <MX_SPI1_Init+0xa8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <MX_SPI1_Init+0xa8>)
 8002500:	2200      	movs	r2, #0
 8002502:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <MX_SPI1_Init+0xa8>)
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MX_SPI1_Init+0xa8>)
 800250c:	2200      	movs	r2, #0
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <MX_SPI1_Init+0xa8>)
 8002512:	2200      	movs	r2, #0
 8002514:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <MX_SPI1_Init+0xa8>)
 8002518:	2200      	movs	r2, #0
 800251a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <MX_SPI1_Init+0xa8>)
 800251e:	2200      	movs	r2, #0
 8002520:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <MX_SPI1_Init+0xa8>)
 8002524:	2200      	movs	r2, #0
 8002526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <MX_SPI1_Init+0xa8>)
 800252a:	2200      	movs	r2, #0
 800252c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_SPI1_Init+0xa8>)
 8002530:	f00a fbda 	bl	800cce8 <HAL_SPI_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800253a:	f7ff fd41 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	240008a8 	.word	0x240008a8
 8002548:	40013000 	.word	0x40013000

0800254c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002550:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <MX_SPI2_Init+0xa8>)
 8002552:	4a29      	ldr	r2, [pc, #164]	; (80025f8 <MX_SPI2_Init+0xac>)
 8002554:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002556:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <MX_SPI2_Init+0xa8>)
 8002558:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800255c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <MX_SPI2_Init+0xa8>)
 8002560:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002564:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <MX_SPI2_Init+0xa8>)
 8002568:	220f      	movs	r2, #15
 800256a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <MX_SPI2_Init+0xa8>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <MX_SPI2_Init+0xa8>)
 8002574:	2200      	movs	r2, #0
 8002576:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <MX_SPI2_Init+0xa8>)
 800257a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800257e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <MX_SPI2_Init+0xa8>)
 8002582:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002586:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002588:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <MX_SPI2_Init+0xa8>)
 800258a:	2200      	movs	r2, #0
 800258c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800258e:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <MX_SPI2_Init+0xa8>)
 8002590:	2200      	movs	r2, #0
 8002592:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002594:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <MX_SPI2_Init+0xa8>)
 8002596:	2200      	movs	r2, #0
 8002598:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <MX_SPI2_Init+0xa8>)
 800259c:	2200      	movs	r2, #0
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <MX_SPI2_Init+0xa8>)
 80025a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025a6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <MX_SPI2_Init+0xa8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_SPI2_Init+0xa8>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <MX_SPI2_Init+0xa8>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_SPI2_Init+0xa8>)
 80025bc:	2200      	movs	r2, #0
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <MX_SPI2_Init+0xa8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <MX_SPI2_Init+0xa8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <MX_SPI2_Init+0xa8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MX_SPI2_Init+0xa8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_SPI2_Init+0xa8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025de:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_SPI2_Init+0xa8>)
 80025e0:	f00a fb82 	bl	800cce8 <HAL_SPI_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80025ea:	f7ff fce9 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	24000930 	.word	0x24000930
 80025f8:	40003800 	.word	0x40003800

080025fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b0bc      	sub	sp, #240	; 0xf0
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002614:	f107 0318 	add.w	r3, r7, #24
 8002618:	22c0      	movs	r2, #192	; 0xc0
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f012 febd 	bl	801539c <memset>
  if(spiHandle->Instance==SPI1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a4c      	ldr	r2, [pc, #304]	; (8002758 <HAL_SPI_MspInit+0x15c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d145      	bne.n	80026b8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800262c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002638:	2300      	movs	r3, #0
 800263a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800263c:	f107 0318 	add.w	r3, r7, #24
 8002640:	4618      	mov	r0, r3
 8002642:	f007 fbf5 	bl	8009e30 <HAL_RCCEx_PeriphCLKConfig>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800264c:	f7ff fcb8 	bl	8001fc0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002650:	4b42      	ldr	r3, [pc, #264]	; (800275c <HAL_SPI_MspInit+0x160>)
 8002652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002656:	4a41      	ldr	r2, [pc, #260]	; (800275c <HAL_SPI_MspInit+0x160>)
 8002658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800265c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002660:	4b3e      	ldr	r3, [pc, #248]	; (800275c <HAL_SPI_MspInit+0x160>)
 8002662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_SPI_MspInit+0x160>)
 8002670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002674:	4a39      	ldr	r2, [pc, #228]	; (800275c <HAL_SPI_MspInit+0x160>)
 8002676:	f043 0302 	orr.w	r3, r3, #2
 800267a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800267e:	4b37      	ldr	r3, [pc, #220]	; (800275c <HAL_SPI_MspInit+0x160>)
 8002680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800268c:	2318      	movs	r3, #24
 800268e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026a4:	2305      	movs	r3, #5
 80026a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026ae:	4619      	mov	r1, r3
 80026b0:	482b      	ldr	r0, [pc, #172]	; (8002760 <HAL_SPI_MspInit+0x164>)
 80026b2:	f006 f821 	bl	80086f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80026b6:	e04a      	b.n	800274e <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a29      	ldr	r2, [pc, #164]	; (8002764 <HAL_SPI_MspInit+0x168>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d145      	bne.n	800274e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80026c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d2:	f107 0318 	add.w	r3, r7, #24
 80026d6:	4618      	mov	r0, r3
 80026d8:	f007 fbaa 	bl	8009e30 <HAL_RCCEx_PeriphCLKConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80026e2:	f7ff fc6d 	bl	8001fc0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_SPI_MspInit+0x160>)
 80026e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026ec:	4a1b      	ldr	r2, [pc, #108]	; (800275c <HAL_SPI_MspInit+0x160>)
 80026ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_SPI_MspInit+0x160>)
 80026f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_SPI_MspInit+0x160>)
 8002706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270a:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_SPI_MspInit+0x160>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_SPI_MspInit+0x160>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002722:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800273c:	2305      	movs	r3, #5
 800273e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002742:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002746:	4619      	mov	r1, r3
 8002748:	4805      	ldr	r0, [pc, #20]	; (8002760 <HAL_SPI_MspInit+0x164>)
 800274a:	f005 ffd5 	bl	80086f8 <HAL_GPIO_Init>
}
 800274e:	bf00      	nop
 8002750:	37f0      	adds	r7, #240	; 0xf0
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40013000 	.word	0x40013000
 800275c:	58024400 	.word	0x58024400
 8002760:	58020400 	.word	0x58020400
 8002764:	40003800 	.word	0x40003800

08002768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <HAL_MspInit+0x38>)
 8002770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002774:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <HAL_MspInit+0x38>)
 8002776:	f043 0302 	orr.w	r3, r3, #2
 800277a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_MspInit+0x38>)
 8002780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	210f      	movs	r1, #15
 8002790:	f06f 0001 	mvn.w	r0, #1
 8002794:	f002 fd3a 	bl	800520c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	58024400 	.word	0x58024400

080027a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b090      	sub	sp, #64	; 0x40
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	d827      	bhi.n	8002802 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80027b2:	2200      	movs	r2, #0
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	2036      	movs	r0, #54	; 0x36
 80027b8:	f002 fd28 	bl	800520c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027bc:	2036      	movs	r0, #54	; 0x36
 80027be:	f002 fd3f 	bl	8005240 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80027c2:	4a29      	ldr	r2, [pc, #164]	; (8002868 <HAL_InitTick+0xc4>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <HAL_InitTick+0xc8>)
 80027ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027ce:	4a27      	ldr	r2, [pc, #156]	; (800286c <HAL_InitTick+0xc8>)
 80027d0:	f043 0310 	orr.w	r3, r3, #16
 80027d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027d8:	4b24      	ldr	r3, [pc, #144]	; (800286c <HAL_InitTick+0xc8>)
 80027da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027e6:	f107 0210 	add.w	r2, r7, #16
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f007 fadb 	bl	8009dac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <HAL_InitTick+0x6a>
 8002800:	e001      	b.n	8002806 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e02b      	b.n	800285e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002806:	f007 faa5 	bl	8009d54 <HAL_RCC_GetPCLK1Freq>
 800280a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800280c:	e004      	b.n	8002818 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800280e:	f007 faa1 	bl	8009d54 <HAL_RCC_GetPCLK1Freq>
 8002812:	4603      	mov	r3, r0
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281a:	4a15      	ldr	r2, [pc, #84]	; (8002870 <HAL_InitTick+0xcc>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	0c9b      	lsrs	r3, r3, #18
 8002822:	3b01      	subs	r3, #1
 8002824:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <HAL_InitTick+0xd0>)
 8002828:	4a13      	ldr	r2, [pc, #76]	; (8002878 <HAL_InitTick+0xd4>)
 800282a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <HAL_InitTick+0xd0>)
 800282e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002832:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <HAL_InitTick+0xd0>)
 8002836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002838:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <HAL_InitTick+0xd0>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <HAL_InitTick+0xd0>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002846:	480b      	ldr	r0, [pc, #44]	; (8002874 <HAL_InitTick+0xd0>)
 8002848:	f00a fe9f 	bl	800d58a <HAL_TIM_Base_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d104      	bne.n	800285c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002852:	4808      	ldr	r0, [pc, #32]	; (8002874 <HAL_InitTick+0xd0>)
 8002854:	f00a fef0 	bl	800d638 <HAL_TIM_Base_Start_IT>
 8002858:	4603      	mov	r3, r0
 800285a:	e000      	b.n	800285e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	3740      	adds	r7, #64	; 0x40
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	24000094 	.word	0x24000094
 800286c:	58024400 	.word	0x58024400
 8002870:	431bde83 	.word	0x431bde83
 8002874:	240009b8 	.word	0x240009b8
 8002878:	40001000 	.word	0x40001000

0800287c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002880:	e7fe      	b.n	8002880 <NMI_Handler+0x4>

08002882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002886:	e7fe      	b.n	8002886 <HardFault_Handler+0x4>

08002888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800288c:	e7fe      	b.n	800288c <MemManage_Handler+0x4>

0800288e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002892:	e7fe      	b.n	8002892 <BusFault_Handler+0x4>

08002894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <UsageFault_Handler+0x4>

0800289a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028ac:	4802      	ldr	r0, [pc, #8]	; (80028b8 <DMA1_Stream0_IRQHandler+0x10>)
 80028ae:	f004 fc05 	bl	80070bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	24000204 	.word	0x24000204

080028bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <DMA1_Stream1_IRQHandler+0x10>)
 80028c2:	f004 fbfb 	bl	80070bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2400027c 	.word	0x2400027c

080028d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <DMA1_Stream2_IRQHandler+0x10>)
 80028d6:	f004 fbf1 	bl	80070bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	24000b80 	.word	0x24000b80

080028e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <DMA1_Stream5_IRQHandler+0x10>)
 80028ea:	f004 fbe7 	bl	80070bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	24000308 	.word	0x24000308

080028f8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <TIM1_BRK_IRQHandler+0x10>)
 80028fe:	f00b f9b2 	bl	800dc66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	24000a08 	.word	0x24000a08

0800290c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <TIM1_UP_IRQHandler+0x10>)
 8002912:	f00b f9a8 	bl	800dc66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	24000a08 	.word	0x24000a08

08002920 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002926:	f00b f99e 	bl	800dc66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	24000a08 	.word	0x24000a08

08002934 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <TIM1_CC_IRQHandler+0x10>)
 800293a:	f00b f994 	bl	800dc66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	24000a08 	.word	0x24000a08

08002948 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <TIM2_IRQHandler+0x10>)
 800294e:	f00b f98a 	bl	800dc66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	24000a54 	.word	0x24000a54

0800295c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <TIM3_IRQHandler+0x10>)
 8002962:	f00b f980 	bl	800dc66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	24000aa0 	.word	0x24000aa0

08002970 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <USART1_IRQHandler+0x10>)
 8002976:	f00c fd39 	bl	800f3ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	24000aec 	.word	0x24000aec

08002984 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <TIM6_DAC_IRQHandler+0x20>)
 800298a:	791b      	ldrb	r3, [r3, #4]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002992:	4804      	ldr	r0, [pc, #16]	; (80029a4 <TIM6_DAC_IRQHandler+0x20>)
 8002994:	f002 fde9 	bl	800556a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002998:	4803      	ldr	r0, [pc, #12]	; (80029a8 <TIM6_DAC_IRQHandler+0x24>)
 800299a:	f00b f964 	bl	800dc66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	240002f4 	.word	0x240002f4
 80029a8:	240009b8 	.word	0x240009b8

080029ac <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80029b6:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <ITM_SendChar+0x48>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a0e      	ldr	r2, [pc, #56]	; (80029f4 <ITM_SendChar+0x48>)
 80029bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c0:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <ITM_SendChar+0x4c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <ITM_SendChar+0x4c>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80029ce:	bf00      	nop
 80029d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f8      	beq.n	80029d0 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80029de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	6013      	str	r3, [r2, #0]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000edfc 	.word	0xe000edfc
 80029f8:	e0000e00 	.word	0xe0000e00

080029fc <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e00a      	b.n	8002a24 <_read+0x28>
		*ptr++ = __io_getchar();
 8002a0e:	f3af 8000 	nop.w
 8002a12:	4601      	mov	r1, r0
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	60ba      	str	r2, [r7, #8]
 8002a1a:	b2ca      	uxtb	r2, r1
 8002a1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dbf0      	blt.n	8002a0e <_read+0x12>
	}

	return len;
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e009      	b.n	8002a5c <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	60ba      	str	r2, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ffab 	bl	80029ac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dbf1      	blt.n	8002a48 <_write+0x12>
	}
	return len;
 8002a64:	687b      	ldr	r3, [r7, #4]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_close>:

int _close(int file) {
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a96:	605a      	str	r2, [r3, #4]
	return 0;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_isatty>:

int _isatty(int file) {
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002aec:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <_sbrk+0x64>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <_sbrk+0x68>)
 8002af8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <_sbrk+0x64>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d207      	bcs.n	8002b18 <_sbrk+0x40>
		errno = ENOMEM;
 8002b08:	f012 fc00 	bl	801530c <__errno>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	220c      	movs	r2, #12
 8002b10:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b16:	e009      	b.n	8002b2c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <_sbrk+0x64>)
 8002b28:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	24080000 	.word	0x24080000
 8002b38:	00000400 	.word	0x00000400
 8002b3c:	24000a04 	.word	0x24000a04
 8002b40:	24005610 	.word	0x24005610

08002b44 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002b48:	4b37      	ldr	r3, [pc, #220]	; (8002c28 <SystemInit+0xe4>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	4a36      	ldr	r2, [pc, #216]	; (8002c28 <SystemInit+0xe4>)
 8002b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002b58:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <SystemInit+0xe8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	2b06      	cmp	r3, #6
 8002b62:	d807      	bhi.n	8002b74 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002b64:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <SystemInit+0xe8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 030f 	bic.w	r3, r3, #15
 8002b6c:	4a2f      	ldr	r2, [pc, #188]	; (8002c2c <SystemInit+0xe8>)
 8002b6e:	f043 0307 	orr.w	r3, r3, #7
 8002b72:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002b74:	4b2e      	ldr	r3, [pc, #184]	; (8002c30 <SystemInit+0xec>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2d      	ldr	r2, [pc, #180]	; (8002c30 <SystemInit+0xec>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002b80:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <SystemInit+0xec>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002b86:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <SystemInit+0xec>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4929      	ldr	r1, [pc, #164]	; (8002c30 <SystemInit+0xec>)
 8002b8c:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <SystemInit+0xf0>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002b92:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <SystemInit+0xe8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002b9e:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <SystemInit+0xe8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 030f 	bic.w	r3, r3, #15
 8002ba6:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <SystemInit+0xe8>)
 8002ba8:	f043 0307 	orr.w	r3, r3, #7
 8002bac:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <SystemInit+0xec>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002bb4:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <SystemInit+0xec>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <SystemInit+0xec>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <SystemInit+0xec>)
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <SystemInit+0xf4>)
 8002bc4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002bc6:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <SystemInit+0xec>)
 8002bc8:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <SystemInit+0xf8>)
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002bcc:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <SystemInit+0xec>)
 8002bce:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <SystemInit+0xfc>)
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002bd2:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <SystemInit+0xec>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002bd8:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <SystemInit+0xec>)
 8002bda:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <SystemInit+0xfc>)
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <SystemInit+0xec>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <SystemInit+0xec>)
 8002be6:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <SystemInit+0xfc>)
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <SystemInit+0xec>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <SystemInit+0xec>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <SystemInit+0xec>)
 8002bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfa:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <SystemInit+0xec>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <SystemInit+0x100>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <SystemInit+0x104>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c0e:	d202      	bcs.n	8002c16 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <SystemInit+0x108>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <SystemInit+0x10c>)
 8002c18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002c1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00
 8002c2c:	52002000 	.word	0x52002000
 8002c30:	58024400 	.word	0x58024400
 8002c34:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c38:	02020200 	.word	0x02020200
 8002c3c:	01ff0000 	.word	0x01ff0000
 8002c40:	01010280 	.word	0x01010280
 8002c44:	5c001000 	.word	0x5c001000
 8002c48:	ffff0000 	.word	0xffff0000
 8002c4c:	51008108 	.word	0x51008108
 8002c50:	52004000 	.word	0x52004000

08002c54 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b09a      	sub	sp, #104	; 0x68
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
 8002c84:	615a      	str	r2, [r3, #20]
 8002c86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	222c      	movs	r2, #44	; 0x2c
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f012 fb84 	bl	801539c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c94:	4b44      	ldr	r3, [pc, #272]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002c96:	4a45      	ldr	r2, [pc, #276]	; (8002dac <MX_TIM1_Init+0x158>)
 8002c98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8002c9a:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002c9c:	2231      	movs	r2, #49	; 0x31
 8002c9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca0:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8002ca6:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002ca8:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002cac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cae:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cb4:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cba:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002cc0:	4839      	ldr	r0, [pc, #228]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002cc2:	f00a fc62 	bl	800d58a <HAL_TIM_Base_Init>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002ccc:	f7ff f978 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4832      	ldr	r0, [pc, #200]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002cde:	f00b f9dd 	bl	800e09c <HAL_TIM_ConfigClockSource>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002ce8:	f7ff f96a 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002cec:	482e      	ldr	r0, [pc, #184]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002cee:	f00a ff59 	bl	800dba4 <HAL_TIM_PWM_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002cf8:	f7ff f962 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d00:	2300      	movs	r3, #0
 8002d02:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4826      	ldr	r0, [pc, #152]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002d10:	f00b ff1a 	bl	800eb48 <HAL_TIMEx_MasterConfigSynchronization>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002d1a:	f7ff f951 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d1e:	2360      	movs	r3, #96	; 0x60
 8002d20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8002d22:	f240 13df 	movw	r3, #479	; 0x1df
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d34:	2300      	movs	r3, #0
 8002d36:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d40:	2200      	movs	r2, #0
 8002d42:	4619      	mov	r1, r3
 8002d44:	4818      	ldr	r0, [pc, #96]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002d46:	f00b f895 	bl	800de74 <HAL_TIM_PWM_ConfigChannel>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002d50:	f7ff f936 	bl	8001fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	4619      	mov	r1, r3
 8002d88:	4807      	ldr	r0, [pc, #28]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002d8a:	f00b ff6b 	bl	800ec64 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002d94:	f7ff f914 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d98:	4803      	ldr	r0, [pc, #12]	; (8002da8 <MX_TIM1_Init+0x154>)
 8002d9a:	f000 f949 	bl	8003030 <HAL_TIM_MspPostInit>

}
 8002d9e:	bf00      	nop
 8002da0:	3768      	adds	r7, #104	; 0x68
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	24000a08 	.word	0x24000a08
 8002dac:	40010000 	.word	0x40010000

08002db0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08e      	sub	sp, #56	; 0x38
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc4:	f107 031c 	add.w	r3, r7, #28
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd0:	463b      	mov	r3, r7
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	611a      	str	r2, [r3, #16]
 8002dde:	615a      	str	r2, [r3, #20]
 8002de0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002de2:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <MX_TIM2_Init+0xe8>)
 8002de4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002de8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <MX_TIM2_Init+0xe8>)
 8002dec:	2231      	movs	r2, #49	; 0x31
 8002dee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <MX_TIM2_Init+0xe8>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8002df6:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <MX_TIM2_Init+0xe8>)
 8002df8:	f640 4234 	movw	r2, #3124	; 0xc34
 8002dfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfe:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <MX_TIM2_Init+0xe8>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e04:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <MX_TIM2_Init+0xe8>)
 8002e06:	2280      	movs	r2, #128	; 0x80
 8002e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e0a:	4823      	ldr	r0, [pc, #140]	; (8002e98 <MX_TIM2_Init+0xe8>)
 8002e0c:	f00a fbbd 	bl	800d58a <HAL_TIM_Base_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002e16:	f7ff f8d3 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e24:	4619      	mov	r1, r3
 8002e26:	481c      	ldr	r0, [pc, #112]	; (8002e98 <MX_TIM2_Init+0xe8>)
 8002e28:	f00b f938 	bl	800e09c <HAL_TIM_ConfigClockSource>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002e32:	f7ff f8c5 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e36:	4818      	ldr	r0, [pc, #96]	; (8002e98 <MX_TIM2_Init+0xe8>)
 8002e38:	f00a feb4 	bl	800dba4 <HAL_TIM_PWM_Init>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002e42:	f7ff f8bd 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e46:	2320      	movs	r3, #32
 8002e48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e4e:	f107 031c 	add.w	r3, r7, #28
 8002e52:	4619      	mov	r1, r3
 8002e54:	4810      	ldr	r0, [pc, #64]	; (8002e98 <MX_TIM2_Init+0xe8>)
 8002e56:	f00b fe77 	bl	800eb48 <HAL_TIMEx_MasterConfigSynchronization>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002e60:	f7ff f8ae 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e64:	2360      	movs	r3, #96	; 0x60
 8002e66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e74:	463b      	mov	r3, r7
 8002e76:	220c      	movs	r2, #12
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4807      	ldr	r0, [pc, #28]	; (8002e98 <MX_TIM2_Init+0xe8>)
 8002e7c:	f00a fffa 	bl	800de74 <HAL_TIM_PWM_ConfigChannel>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002e86:	f7ff f89b 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e8a:	4803      	ldr	r0, [pc, #12]	; (8002e98 <MX_TIM2_Init+0xe8>)
 8002e8c:	f000 f8d0 	bl	8003030 <HAL_TIM_MspPostInit>

}
 8002e90:	bf00      	nop
 8002e92:	3738      	adds	r7, #56	; 0x38
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	24000a54 	.word	0x24000a54

08002e9c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ea2:	f107 0310 	add.w	r3, r7, #16
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002ebc:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <MX_TIM3_Init+0x98>)
 8002ebe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002ec2:	2263      	movs	r2, #99	; 0x63
 8002ec4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002ece:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002ed2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed4:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ee0:	4813      	ldr	r0, [pc, #76]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002ee2:	f00a fb52 	bl	800d58a <HAL_TIM_Base_Init>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002eec:	f7ff f868 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ef6:	f107 0310 	add.w	r3, r7, #16
 8002efa:	4619      	mov	r1, r3
 8002efc:	480c      	ldr	r0, [pc, #48]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002efe:	f00b f8cd 	bl	800e09c <HAL_TIM_ConfigClockSource>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002f08:	f7ff f85a 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f14:	1d3b      	adds	r3, r7, #4
 8002f16:	4619      	mov	r1, r3
 8002f18:	4805      	ldr	r0, [pc, #20]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002f1a:	f00b fe15 	bl	800eb48 <HAL_TIMEx_MasterConfigSynchronization>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002f24:	f7ff f84c 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f28:	bf00      	nop
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	24000aa0 	.word	0x24000aa0
 8002f34:	40000400 	.word	0x40000400

08002f38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a37      	ldr	r2, [pc, #220]	; (8003024 <HAL_TIM_Base_MspInit+0xec>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d12f      	bne.n	8002faa <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <HAL_TIM_Base_MspInit+0xf0>)
 8002f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f50:	4a35      	ldr	r2, [pc, #212]	; (8003028 <HAL_TIM_Base_MspInit+0xf0>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f5a:	4b33      	ldr	r3, [pc, #204]	; (8003028 <HAL_TIM_Base_MspInit+0xf0>)
 8002f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2105      	movs	r1, #5
 8002f6c:	2018      	movs	r0, #24
 8002f6e:	f002 f94d 	bl	800520c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002f72:	2018      	movs	r0, #24
 8002f74:	f002 f964 	bl	8005240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2105      	movs	r1, #5
 8002f7c:	2019      	movs	r0, #25
 8002f7e:	f002 f945 	bl	800520c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002f82:	2019      	movs	r0, #25
 8002f84:	f002 f95c 	bl	8005240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2105      	movs	r1, #5
 8002f8c:	201a      	movs	r0, #26
 8002f8e:	f002 f93d 	bl	800520c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002f92:	201a      	movs	r0, #26
 8002f94:	f002 f954 	bl	8005240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2105      	movs	r1, #5
 8002f9c:	201b      	movs	r0, #27
 8002f9e:	f002 f935 	bl	800520c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002fa2:	201b      	movs	r0, #27
 8002fa4:	f002 f94c 	bl	8005240 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002fa8:	e038      	b.n	800301c <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb2:	d117      	bne.n	8002fe4 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <HAL_TIM_Base_MspInit+0xf0>)
 8002fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fba:	4a1b      	ldr	r2, [pc, #108]	; (8003028 <HAL_TIM_Base_MspInit+0xf0>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fc4:	4b18      	ldr	r3, [pc, #96]	; (8003028 <HAL_TIM_Base_MspInit+0xf0>)
 8002fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2105      	movs	r1, #5
 8002fd6:	201c      	movs	r0, #28
 8002fd8:	f002 f918 	bl	800520c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fdc:	201c      	movs	r0, #28
 8002fde:	f002 f92f 	bl	8005240 <HAL_NVIC_EnableIRQ>
}
 8002fe2:	e01b      	b.n	800301c <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a10      	ldr	r2, [pc, #64]	; (800302c <HAL_TIM_Base_MspInit+0xf4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d116      	bne.n	800301c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_TIM_Base_MspInit+0xf0>)
 8002ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <HAL_TIM_Base_MspInit+0xf0>)
 8002ff6:	f043 0302 	orr.w	r3, r3, #2
 8002ffa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_TIM_Base_MspInit+0xf0>)
 8003000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800300c:	2200      	movs	r2, #0
 800300e:	2105      	movs	r1, #5
 8003010:	201d      	movs	r0, #29
 8003012:	f002 f8fb 	bl	800520c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003016:	201d      	movs	r0, #29
 8003018:	f002 f912 	bl	8005240 <HAL_NVIC_EnableIRQ>
}
 800301c:	bf00      	nop
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40010000 	.word	0x40010000
 8003028:	58024400 	.word	0x58024400
 800302c:	40000400 	.word	0x40000400

08003030 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a26      	ldr	r2, [pc, #152]	; (80030e8 <HAL_TIM_MspPostInit+0xb8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d120      	bne.n	8003094 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003052:	4b26      	ldr	r3, [pc, #152]	; (80030ec <HAL_TIM_MspPostInit+0xbc>)
 8003054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003058:	4a24      	ldr	r2, [pc, #144]	; (80030ec <HAL_TIM_MspPostInit+0xbc>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <HAL_TIM_MspPostInit+0xbc>)
 8003064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	2302      	movs	r3, #2
 8003078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003082:	2301      	movs	r3, #1
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4619      	mov	r1, r3
 800308c:	4818      	ldr	r0, [pc, #96]	; (80030f0 <HAL_TIM_MspPostInit+0xc0>)
 800308e:	f005 fb33 	bl	80086f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003092:	e024      	b.n	80030de <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309c:	d11f      	bne.n	80030de <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <HAL_TIM_MspPostInit+0xbc>)
 80030a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a4:	4a11      	ldr	r2, [pc, #68]	; (80030ec <HAL_TIM_MspPostInit+0xbc>)
 80030a6:	f043 0302 	orr.w	r3, r3, #2
 80030aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030ae:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <HAL_TIM_MspPostInit+0xbc>)
 80030b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030ce:	2301      	movs	r3, #1
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d2:	f107 0314 	add.w	r3, r7, #20
 80030d6:	4619      	mov	r1, r3
 80030d8:	4806      	ldr	r0, [pc, #24]	; (80030f4 <HAL_TIM_MspPostInit+0xc4>)
 80030da:	f005 fb0d 	bl	80086f8 <HAL_GPIO_Init>
}
 80030de:	bf00      	nop
 80030e0:	3728      	adds	r7, #40	; 0x28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40010000 	.word	0x40010000
 80030ec:	58024400 	.word	0x58024400
 80030f0:	58020000 	.word	0x58020000
 80030f4:	58020400 	.word	0x58020400

080030f8 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 8003104:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <get_uptime+0x88>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 800310a:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <get_uptime+0x8c>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <get_uptime+0x88>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	429a      	cmp	r2, r3
 8003118:	d005      	beq.n	8003126 <get_uptime+0x2e>
		ms = uptime_millis;
 800311a:	4b19      	ldr	r3, [pc, #100]	; (8003180 <get_uptime+0x88>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8003120:	4b18      	ldr	r3, [pc, #96]	; (8003184 <get_uptime+0x8c>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800312c:	fb03 f202 	mul.w	r2, r3, r2
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <get_uptime+0x8c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	3301      	adds	r3, #1
 8003136:	4914      	ldr	r1, [pc, #80]	; (8003188 <get_uptime+0x90>)
 8003138:	fba1 1303 	umull	r1, r3, r1, r3
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	6939      	ldr	r1, [r7, #16]
 8003140:	fbb1 f3f3 	udiv	r3, r1, r3
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	0e1b      	lsrs	r3, r3, #24
 800314c:	b2da      	uxtb	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0c1a      	lsrs	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3301      	adds	r3, #1
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	0a1a      	lsrs	r2, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3302      	adds	r3, #2
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3303      	adds	r3, #3
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	701a      	strb	r2, [r3, #0]
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	24000834 	.word	0x24000834
 8003184:	e000e010 	.word	0xe000e010
 8003188:	10624dd3 	.word	0x10624dd3

0800318c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003190:	4b22      	ldr	r3, [pc, #136]	; (800321c <MX_USART1_UART_Init+0x90>)
 8003192:	4a23      	ldr	r2, [pc, #140]	; (8003220 <MX_USART1_UART_Init+0x94>)
 8003194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003196:	4b21      	ldr	r3, [pc, #132]	; (800321c <MX_USART1_UART_Init+0x90>)
 8003198:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800319c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800319e:	4b1f      	ldr	r3, [pc, #124]	; (800321c <MX_USART1_UART_Init+0x90>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031a4:	4b1d      	ldr	r3, [pc, #116]	; (800321c <MX_USART1_UART_Init+0x90>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <MX_USART1_UART_Init+0x90>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <MX_USART1_UART_Init+0x90>)
 80031b2:	220c      	movs	r2, #12
 80031b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <MX_USART1_UART_Init+0x90>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031bc:	4b17      	ldr	r3, [pc, #92]	; (800321c <MX_USART1_UART_Init+0x90>)
 80031be:	2200      	movs	r2, #0
 80031c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031c2:	4b16      	ldr	r3, [pc, #88]	; (800321c <MX_USART1_UART_Init+0x90>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031c8:	4b14      	ldr	r3, [pc, #80]	; (800321c <MX_USART1_UART_Init+0x90>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031ce:	4b13      	ldr	r3, [pc, #76]	; (800321c <MX_USART1_UART_Init+0x90>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031d4:	4811      	ldr	r0, [pc, #68]	; (800321c <MX_USART1_UART_Init+0x90>)
 80031d6:	f00b fde1 	bl	800ed9c <HAL_UART_Init>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80031e0:	f7fe feee 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031e4:	2100      	movs	r1, #0
 80031e6:	480d      	ldr	r0, [pc, #52]	; (800321c <MX_USART1_UART_Init+0x90>)
 80031e8:	f00e fc13 	bl	8011a12 <HAL_UARTEx_SetTxFifoThreshold>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80031f2:	f7fe fee5 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031f6:	2100      	movs	r1, #0
 80031f8:	4808      	ldr	r0, [pc, #32]	; (800321c <MX_USART1_UART_Init+0x90>)
 80031fa:	f00e fc48 	bl	8011a8e <HAL_UARTEx_SetRxFifoThreshold>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003204:	f7fe fedc 	bl	8001fc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003208:	4804      	ldr	r0, [pc, #16]	; (800321c <MX_USART1_UART_Init+0x90>)
 800320a:	f00e fbc9 	bl	80119a0 <HAL_UARTEx_DisableFifoMode>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003214:	f7fe fed4 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}
 800321c:	24000aec 	.word	0x24000aec
 8003220:	40011000 	.word	0x40011000

08003224 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b0ba      	sub	sp, #232	; 0xe8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800323c:	f107 0310 	add.w	r3, r7, #16
 8003240:	22c0      	movs	r2, #192	; 0xc0
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f012 f8a9 	bl	801539c <memset>
  if(uartHandle->Instance==USART1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a41      	ldr	r2, [pc, #260]	; (8003354 <HAL_UART_MspInit+0x130>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d17b      	bne.n	800334c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003254:	f04f 0201 	mov.w	r2, #1
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003260:	2318      	movs	r3, #24
 8003262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003266:	f107 0310 	add.w	r3, r7, #16
 800326a:	4618      	mov	r0, r3
 800326c:	f006 fde0 	bl	8009e30 <HAL_RCCEx_PeriphCLKConfig>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003276:	f7fe fea3 	bl	8001fc0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800327a:	4b37      	ldr	r3, [pc, #220]	; (8003358 <HAL_UART_MspInit+0x134>)
 800327c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003280:	4a35      	ldr	r2, [pc, #212]	; (8003358 <HAL_UART_MspInit+0x134>)
 8003282:	f043 0310 	orr.w	r3, r3, #16
 8003286:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800328a:	4b33      	ldr	r3, [pc, #204]	; (8003358 <HAL_UART_MspInit+0x134>)
 800328c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003298:	4b2f      	ldr	r3, [pc, #188]	; (8003358 <HAL_UART_MspInit+0x134>)
 800329a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329e:	4a2e      	ldr	r2, [pc, #184]	; (8003358 <HAL_UART_MspInit+0x134>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032a8:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <HAL_UART_MspInit+0x134>)
 80032aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032d0:	2307      	movs	r3, #7
 80032d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032da:	4619      	mov	r1, r3
 80032dc:	481f      	ldr	r0, [pc, #124]	; (800335c <HAL_UART_MspInit+0x138>)
 80032de:	f005 fa0b 	bl	80086f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80032e2:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <HAL_UART_MspInit+0x13c>)
 80032e4:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <HAL_UART_MspInit+0x140>)
 80032e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80032e8:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <HAL_UART_MspInit+0x13c>)
 80032ea:	222a      	movs	r2, #42	; 0x2a
 80032ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <HAL_UART_MspInit+0x13c>)
 80032f0:	2240      	movs	r2, #64	; 0x40
 80032f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f4:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <HAL_UART_MspInit+0x13c>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_UART_MspInit+0x13c>)
 80032fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003300:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003302:	4b17      	ldr	r3, [pc, #92]	; (8003360 <HAL_UART_MspInit+0x13c>)
 8003304:	2200      	movs	r2, #0
 8003306:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <HAL_UART_MspInit+0x13c>)
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800330e:	4b14      	ldr	r3, [pc, #80]	; (8003360 <HAL_UART_MspInit+0x13c>)
 8003310:	2200      	movs	r2, #0
 8003312:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_UART_MspInit+0x13c>)
 8003316:	2200      	movs	r2, #0
 8003318:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800331a:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_UART_MspInit+0x13c>)
 800331c:	2200      	movs	r2, #0
 800331e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003320:	480f      	ldr	r0, [pc, #60]	; (8003360 <HAL_UART_MspInit+0x13c>)
 8003322:	f002 fba1 	bl	8005a68 <HAL_DMA_Init>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800332c:	f7fe fe48 	bl	8001fc0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a0b      	ldr	r2, [pc, #44]	; (8003360 <HAL_UART_MspInit+0x13c>)
 8003334:	67da      	str	r2, [r3, #124]	; 0x7c
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_UART_MspInit+0x13c>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	2105      	movs	r1, #5
 8003340:	2025      	movs	r0, #37	; 0x25
 8003342:	f001 ff63 	bl	800520c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003346:	2025      	movs	r0, #37	; 0x25
 8003348:	f001 ff7a 	bl	8005240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800334c:	bf00      	nop
 800334e:	37e8      	adds	r7, #232	; 0xe8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40011000 	.word	0x40011000
 8003358:	58024400 	.word	0x58024400
 800335c:	58020000 	.word	0x58020000
 8003360:	24000b80 	.word	0x24000b80
 8003364:	40020040 	.word	0x40020040

08003368 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003372:	4bc2      	ldr	r3, [pc, #776]	; (800367c <voltage_monitor_init+0x314>)
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003378:	4bc0      	ldr	r3, [pc, #768]	; (800367c <voltage_monitor_init+0x314>)
 800337a:	2200      	movs	r2, #0
 800337c:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 800337e:	4bbf      	ldr	r3, [pc, #764]	; (800367c <voltage_monitor_init+0x314>)
 8003380:	2201      	movs	r2, #1
 8003382:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003384:	4bbd      	ldr	r3, [pc, #756]	; (800367c <voltage_monitor_init+0x314>)
 8003386:	2200      	movs	r2, #0
 8003388:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 800338a:	4bbc      	ldr	r3, [pc, #752]	; (800367c <voltage_monitor_init+0x314>)
 800338c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003390:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8003392:	4bba      	ldr	r3, [pc, #744]	; (800367c <voltage_monitor_init+0x314>)
 8003394:	2200      	movs	r2, #0
 8003396:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8003398:	4bb8      	ldr	r3, [pc, #736]	; (800367c <voltage_monitor_init+0x314>)
 800339a:	2201      	movs	r2, #1
 800339c:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 800339e:	4bb7      	ldr	r3, [pc, #732]	; (800367c <voltage_monitor_init+0x314>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 80033a4:	4bb5      	ldr	r3, [pc, #724]	; (800367c <voltage_monitor_init+0x314>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 80033aa:	4bb4      	ldr	r3, [pc, #720]	; (800367c <voltage_monitor_init+0x314>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 80033b0:	4bb2      	ldr	r3, [pc, #712]	; (800367c <voltage_monitor_init+0x314>)
 80033b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80033b6:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 80033b8:	4bb0      	ldr	r3, [pc, #704]	; (800367c <voltage_monitor_init+0x314>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 80033be:	4baf      	ldr	r3, [pc, #700]	; (800367c <voltage_monitor_init+0x314>)
 80033c0:	2202      	movs	r2, #2
 80033c2:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 80033c4:	4bad      	ldr	r3, [pc, #692]	; (800367c <voltage_monitor_init+0x314>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 80033ca:	4bac      	ldr	r3, [pc, #688]	; (800367c <voltage_monitor_init+0x314>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80033d0:	4baa      	ldr	r3, [pc, #680]	; (800367c <voltage_monitor_init+0x314>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80033d6:	4ba9      	ldr	r3, [pc, #676]	; (800367c <voltage_monitor_init+0x314>)
 80033d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80033dc:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 80033de:	4ba7      	ldr	r3, [pc, #668]	; (800367c <voltage_monitor_init+0x314>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 80033e4:	4ba5      	ldr	r3, [pc, #660]	; (800367c <voltage_monitor_init+0x314>)
 80033e6:	2203      	movs	r2, #3
 80033e8:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 80033ea:	4ba4      	ldr	r3, [pc, #656]	; (800367c <voltage_monitor_init+0x314>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 80033f0:	4ba2      	ldr	r3, [pc, #648]	; (800367c <voltage_monitor_init+0x314>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 80033f8:	4ba0      	ldr	r3, [pc, #640]	; (800367c <voltage_monitor_init+0x314>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 80033fe:	4b9f      	ldr	r3, [pc, #636]	; (800367c <voltage_monitor_init+0x314>)
 8003400:	f242 7210 	movw	r2, #10000	; 0x2710
 8003404:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003406:	4b9d      	ldr	r3, [pc, #628]	; (800367c <voltage_monitor_init+0x314>)
 8003408:	2200      	movs	r2, #0
 800340a:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 800340c:	4b9b      	ldr	r3, [pc, #620]	; (800367c <voltage_monitor_init+0x314>)
 800340e:	2204      	movs	r2, #4
 8003410:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003414:	4b99      	ldr	r3, [pc, #612]	; (800367c <voltage_monitor_init+0x314>)
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 800341c:	4b97      	ldr	r3, [pc, #604]	; (800367c <voltage_monitor_init+0x314>)
 800341e:	2201      	movs	r2, #1
 8003420:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003424:	4b95      	ldr	r3, [pc, #596]	; (800367c <voltage_monitor_init+0x314>)
 8003426:	2200      	movs	r2, #0
 8003428:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800342a:	4b94      	ldr	r3, [pc, #592]	; (800367c <voltage_monitor_init+0x314>)
 800342c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003430:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003432:	4b92      	ldr	r3, [pc, #584]	; (800367c <voltage_monitor_init+0x314>)
 8003434:	2200      	movs	r2, #0
 8003436:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003438:	4b90      	ldr	r3, [pc, #576]	; (800367c <voltage_monitor_init+0x314>)
 800343a:	2205      	movs	r2, #5
 800343c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003440:	4b8e      	ldr	r3, [pc, #568]	; (800367c <voltage_monitor_init+0x314>)
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003448:	4b8c      	ldr	r3, [pc, #560]	; (800367c <voltage_monitor_init+0x314>)
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003450:	4b8a      	ldr	r3, [pc, #552]	; (800367c <voltage_monitor_init+0x314>)
 8003452:	2200      	movs	r2, #0
 8003454:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003456:	4b89      	ldr	r3, [pc, #548]	; (800367c <voltage_monitor_init+0x314>)
 8003458:	f242 7210 	movw	r2, #10000	; 0x2710
 800345c:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 800345e:	4b87      	ldr	r3, [pc, #540]	; (800367c <voltage_monitor_init+0x314>)
 8003460:	2200      	movs	r2, #0
 8003462:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003464:	4b85      	ldr	r3, [pc, #532]	; (800367c <voltage_monitor_init+0x314>)
 8003466:	2206      	movs	r2, #6
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 800346c:	4b83      	ldr	r3, [pc, #524]	; (800367c <voltage_monitor_init+0x314>)
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003474:	4b81      	ldr	r3, [pc, #516]	; (800367c <voltage_monitor_init+0x314>)
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 800347c:	4b7f      	ldr	r3, [pc, #508]	; (800367c <voltage_monitor_init+0x314>)
 800347e:	2200      	movs	r2, #0
 8003480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003484:	4b7d      	ldr	r3, [pc, #500]	; (800367c <voltage_monitor_init+0x314>)
 8003486:	f242 7210 	movw	r2, #10000	; 0x2710
 800348a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 800348e:	4b7b      	ldr	r3, [pc, #492]	; (800367c <voltage_monitor_init+0x314>)
 8003490:	2200      	movs	r2, #0
 8003492:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003496:	4b79      	ldr	r3, [pc, #484]	; (800367c <voltage_monitor_init+0x314>)
 8003498:	2207      	movs	r2, #7
 800349a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 800349e:	4b77      	ldr	r3, [pc, #476]	; (800367c <voltage_monitor_init+0x314>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 80034a6:	4b75      	ldr	r3, [pc, #468]	; (800367c <voltage_monitor_init+0x314>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 80034ae:	4b73      	ldr	r3, [pc, #460]	; (800367c <voltage_monitor_init+0x314>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80034b6:	4b71      	ldr	r3, [pc, #452]	; (800367c <voltage_monitor_init+0x314>)
 80034b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80034bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80034c0:	4b6e      	ldr	r3, [pc, #440]	; (800367c <voltage_monitor_init+0x314>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80034c8:	4b6c      	ldr	r3, [pc, #432]	; (800367c <voltage_monitor_init+0x314>)
 80034ca:	2208      	movs	r2, #8
 80034cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80034d0:	4b6a      	ldr	r3, [pc, #424]	; (800367c <voltage_monitor_init+0x314>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80034d8:	4b68      	ldr	r3, [pc, #416]	; (800367c <voltage_monitor_init+0x314>)
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 80034e0:	4b66      	ldr	r3, [pc, #408]	; (800367c <voltage_monitor_init+0x314>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 80034e8:	4b64      	ldr	r3, [pc, #400]	; (800367c <voltage_monitor_init+0x314>)
 80034ea:	f640 42b9 	movw	r2, #3257	; 0xcb9
 80034ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 80034f2:	4b62      	ldr	r3, [pc, #392]	; (800367c <voltage_monitor_init+0x314>)
 80034f4:	f640 3283 	movw	r2, #2947	; 0xb83
 80034f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 80034fc:	4b5f      	ldr	r3, [pc, #380]	; (800367c <voltage_monitor_init+0x314>)
 80034fe:	2209      	movs	r2, #9
 8003500:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003504:	4b5d      	ldr	r3, [pc, #372]	; (800367c <voltage_monitor_init+0x314>)
 8003506:	2200      	movs	r2, #0
 8003508:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 800350c:	4b5b      	ldr	r3, [pc, #364]	; (800367c <voltage_monitor_init+0x314>)
 800350e:	2200      	movs	r2, #0
 8003510:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003514:	4b59      	ldr	r3, [pc, #356]	; (800367c <voltage_monitor_init+0x314>)
 8003516:	2200      	movs	r2, #0
 8003518:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 800351c:	4b57      	ldr	r3, [pc, #348]	; (800367c <voltage_monitor_init+0x314>)
 800351e:	f640 7245 	movw	r2, #3909	; 0xf45
 8003522:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003526:	4b55      	ldr	r3, [pc, #340]	; (800367c <voltage_monitor_init+0x314>)
 8003528:	2200      	movs	r2, #0
 800352a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 800352e:	4b53      	ldr	r3, [pc, #332]	; (800367c <voltage_monitor_init+0x314>)
 8003530:	220a      	movs	r2, #10
 8003532:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003536:	4b51      	ldr	r3, [pc, #324]	; (800367c <voltage_monitor_init+0x314>)
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 800353e:	4b4f      	ldr	r3, [pc, #316]	; (800367c <voltage_monitor_init+0x314>)
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003546:	4b4d      	ldr	r3, [pc, #308]	; (800367c <voltage_monitor_init+0x314>)
 8003548:	2200      	movs	r2, #0
 800354a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 800354e:	4b4b      	ldr	r3, [pc, #300]	; (800367c <voltage_monitor_init+0x314>)
 8003550:	f640 7245 	movw	r2, #3909	; 0xf45
 8003554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003558:	4b48      	ldr	r3, [pc, #288]	; (800367c <voltage_monitor_init+0x314>)
 800355a:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800355e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003562:	4b46      	ldr	r3, [pc, #280]	; (800367c <voltage_monitor_init+0x314>)
 8003564:	220b      	movs	r2, #11
 8003566:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 800356a:	4b44      	ldr	r3, [pc, #272]	; (800367c <voltage_monitor_init+0x314>)
 800356c:	2200      	movs	r2, #0
 800356e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003572:	4b42      	ldr	r3, [pc, #264]	; (800367c <voltage_monitor_init+0x314>)
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 800357a:	4b40      	ldr	r3, [pc, #256]	; (800367c <voltage_monitor_init+0x314>)
 800357c:	2200      	movs	r2, #0
 800357e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8003582:	4b3e      	ldr	r3, [pc, #248]	; (800367c <voltage_monitor_init+0x314>)
 8003584:	f640 72fb 	movw	r2, #4091	; 0xffb
 8003588:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 800358c:	4b3b      	ldr	r3, [pc, #236]	; (800367c <voltage_monitor_init+0x314>)
 800358e:	f640 6276 	movw	r2, #3702	; 0xe76
 8003592:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8003596:	4b39      	ldr	r3, [pc, #228]	; (800367c <voltage_monitor_init+0x314>)
 8003598:	220c      	movs	r2, #12
 800359a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <voltage_monitor_init+0x314>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 80035a6:	4b35      	ldr	r3, [pc, #212]	; (800367c <voltage_monitor_init+0x314>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 80035ae:	4b33      	ldr	r3, [pc, #204]	; (800367c <voltage_monitor_init+0x314>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 80035b6:	4b31      	ldr	r3, [pc, #196]	; (800367c <voltage_monitor_init+0x314>)
 80035b8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80035bc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 80035c0:	4b2e      	ldr	r3, [pc, #184]	; (800367c <voltage_monitor_init+0x314>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 80035c8:	4b2c      	ldr	r3, [pc, #176]	; (800367c <voltage_monitor_init+0x314>)
 80035ca:	220d      	movs	r2, #13
 80035cc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 80035d0:	4b2a      	ldr	r3, [pc, #168]	; (800367c <voltage_monitor_init+0x314>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 80035d8:	4b28      	ldr	r3, [pc, #160]	; (800367c <voltage_monitor_init+0x314>)
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 80035e0:	4b26      	ldr	r3, [pc, #152]	; (800367c <voltage_monitor_init+0x314>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 80035e8:	4b24      	ldr	r3, [pc, #144]	; (800367c <voltage_monitor_init+0x314>)
 80035ea:	f640 7238 	movw	r2, #3896	; 0xf38
 80035ee:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 80035f2:	4b22      	ldr	r3, [pc, #136]	; (800367c <voltage_monitor_init+0x314>)
 80035f4:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80035f8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <voltage_monitor_init+0x314>)
 80035fe:	220e      	movs	r2, #14
 8003600:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <voltage_monitor_init+0x314>)
 8003606:	2200      	movs	r2, #0
 8003608:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <voltage_monitor_init+0x314>)
 800360e:	2200      	movs	r2, #0
 8003610:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <voltage_monitor_init+0x314>)
 8003616:	2200      	movs	r2, #0
 8003618:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <voltage_monitor_init+0x314>)
 800361e:	f640 7245 	movw	r2, #3909	; 0xf45
 8003622:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8003626:	4b15      	ldr	r3, [pc, #84]	; (800367c <voltage_monitor_init+0x314>)
 8003628:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800362c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <voltage_monitor_init+0x314>)
 8003632:	220f      	movs	r2, #15
 8003634:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <voltage_monitor_init+0x314>)
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003640:	4b0e      	ldr	r3, [pc, #56]	; (800367c <voltage_monitor_init+0x314>)
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <voltage_monitor_init+0x314>)
 800364a:	2200      	movs	r2, #0
 800364c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <voltage_monitor_init+0x314>)
 8003652:	f241 0264 	movw	r2, #4196	; 0x1064
 8003656:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <voltage_monitor_init+0x314>)
 800365c:	2200      	movs	r2, #0
 800365e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <voltage_monitor_init+0x314>)
 8003664:	2210      	movs	r2, #16
 8003666:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 800366a:	4b04      	ldr	r3, [pc, #16]	; (800367c <voltage_monitor_init+0x314>)
 800366c:	2200      	movs	r2, #0
 800366e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8003672:	4b02      	ldr	r3, [pc, #8]	; (800367c <voltage_monitor_init+0x314>)
 8003674:	2200      	movs	r2, #0
 8003676:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800367a:	e001      	b.n	8003680 <voltage_monitor_init+0x318>
 800367c:	24000bf8 	.word	0x24000bf8
	rail_monitor[RAIL_n800v].data = 0;
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <voltage_monitor_init+0x378>)
 8003682:	2200      	movs	r2, #0
 8003684:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <voltage_monitor_init+0x378>)
 800368a:	f640 5208 	movw	r2, #3336	; 0xd08
 800368e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <voltage_monitor_init+0x378>)
 8003694:	f640 32ca 	movw	r2, #3018	; 0xbca
 8003698:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <voltage_monitor_init+0x378>)
 800369e:	2211      	movs	r2, #17
 80036a0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <voltage_monitor_init+0x378>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <voltage_monitor_init+0x378>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <voltage_monitor_init+0x378>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <voltage_monitor_init+0x378>)
 80036be:	f242 7210 	movw	r2, #10000	; 0x2710
 80036c2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <voltage_monitor_init+0x378>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	71fb      	strb	r3, [r7, #7]

	return status;
 80036d2:	79fb      	ldrb	r3, [r7, #7]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	24000bf8 	.word	0x24000bf8

080036e4 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	460a      	mov	r2, r1
 80036ee:	71fb      	strb	r3, [r7, #7]
 80036f0:	4613      	mov	r3, r2
 80036f2:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 80036f8:	79fa      	ldrb	r2, [r7, #7]
 80036fa:	4909      	ldr	r1, [pc, #36]	; (8003720 <set_rail_monitor_enable+0x3c>)
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	440b      	add	r3, r1
 8003706:	3302      	adds	r3, #2
 8003708:	79ba      	ldrb	r2, [r7, #6]
 800370a:	701a      	strb	r2, [r3, #0]
	status = 1;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]

	return status;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	24000bf8 	.word	0x24000bf8

08003724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800375c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003728:	f7ff fa0c 	bl	8002b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800372c:	480c      	ldr	r0, [pc, #48]	; (8003760 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800372e:	490d      	ldr	r1, [pc, #52]	; (8003764 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003730:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003734:	e002      	b.n	800373c <LoopCopyDataInit>

08003736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800373a:	3304      	adds	r3, #4

0800373c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800373c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800373e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003740:	d3f9      	bcc.n	8003736 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003744:	4c0a      	ldr	r4, [pc, #40]	; (8003770 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003748:	e001      	b.n	800374e <LoopFillZerobss>

0800374a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800374a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800374c:	3204      	adds	r2, #4

0800374e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800374e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003750:	d3fb      	bcc.n	800374a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003752:	f011 fde1 	bl	8015318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003756:	f7fe fa5f 	bl	8001c18 <main>
  bx  lr
 800375a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800375c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003760:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003764:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8003768:	08016264 	.word	0x08016264
  ldr r2, =_sbss
 800376c:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8003770:	24005610 	.word	0x24005610

08003774 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003774:	e7fe      	b.n	8003774 <ADC3_IRQHandler>
	...

08003778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800377e:	2003      	movs	r0, #3
 8003780:	f001 fd39 	bl	80051f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003784:	f006 f93c 	bl	8009a00 <HAL_RCC_GetSysClockFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_Init+0x68>)
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	4913      	ldr	r1, [pc, #76]	; (80037e4 <HAL_Init+0x6c>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
 80037a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037a2:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_Init+0x68>)
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <HAL_Init+0x6c>)
 80037ac:	5cd3      	ldrb	r3, [r2, r3]
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
 80037b8:	4a0b      	ldr	r2, [pc, #44]	; (80037e8 <HAL_Init+0x70>)
 80037ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037bc:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <HAL_Init+0x74>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037c2:	2005      	movs	r0, #5
 80037c4:	f7fe ffee 	bl	80027a4 <HAL_InitTick>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e002      	b.n	80037d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037d2:	f7fe ffc9 	bl	8002768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	58024400 	.word	0x58024400
 80037e4:	080161b0 	.word	0x080161b0
 80037e8:	24000090 	.word	0x24000090
 80037ec:	2400008c 	.word	0x2400008c

080037f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_IncTick+0x20>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_IncTick+0x24>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4413      	add	r3, r2
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <HAL_IncTick+0x24>)
 8003802:	6013      	str	r3, [r2, #0]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	24000098 	.word	0x24000098
 8003814:	24000cac 	.word	0x24000cac

08003818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return uwTick;
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <HAL_GetTick+0x14>)
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	24000cac 	.word	0x24000cac

08003830 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_GetREVID+0x14>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0c1b      	lsrs	r3, r3, #16
}
 800383a:	4618      	mov	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	5c001000 	.word	0x5c001000

08003848 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	43db      	mvns	r3, r3
 800385a:	401a      	ands	r2, r3
 800385c:	4904      	ldr	r1, [pc, #16]	; (8003870 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	58000400 	.word	0x58000400

08003874 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	609a      	str	r2, [r3, #8]
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	609a      	str	r2, [r3, #8]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3360      	adds	r3, #96	; 0x60
 80038ee:	461a      	mov	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	430b      	orrs	r3, r1
 800390a:	431a      	orrs	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	431a      	orrs	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	611a      	str	r2, [r3, #16]
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800394e:	b480      	push	{r7}
 8003950:	b087      	sub	sp, #28
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3360      	adds	r3, #96	; 0x60
 800395e:	461a      	mov	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	431a      	orrs	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	601a      	str	r2, [r3, #0]
  }
}
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b087      	sub	sp, #28
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3330      	adds	r3, #48	; 0x30
 80039ba:	461a      	mov	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	4413      	add	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	211f      	movs	r1, #31
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	401a      	ands	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0e9b      	lsrs	r3, r3, #26
 80039e2:	f003 011f 	and.w	r1, r3, #31
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	431a      	orrs	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f023 0203 	bic.w	r2, r3, #3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3314      	adds	r3, #20
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	0e5b      	lsrs	r3, r3, #25
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	4413      	add	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	0d1b      	lsrs	r3, r3, #20
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2107      	movs	r1, #7
 8003a56:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	401a      	ands	r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	0d1b      	lsrs	r3, r3, #20
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f003 0318 	and.w	r3, r3, #24
 8003aa2:	4908      	ldr	r1, [pc, #32]	; (8003ac4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003aa4:	40d9      	lsrs	r1, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	400b      	ands	r3, r1
 8003aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	000fffff 	.word	0x000fffff

08003ac8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 031f 	and.w	r3, r3, #31
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6093      	str	r3, [r2, #8]
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	5fffffc0 	.word	0x5fffffc0

08003b08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b1c:	d101      	bne.n	8003b22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <LL_ADC_EnableInternalRegulator+0x24>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	6fffffc0 	.word	0x6fffffc0

08003b58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6c:	d101      	bne.n	8003b72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <LL_ADC_Enable+0x24>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	7fffffc0 	.word	0x7fffffc0

08003ba8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <LL_ADC_Disable+0x24>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	f043 0202 	orr.w	r2, r3, #2
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	7fffffc0 	.word	0x7fffffc0

08003bd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <LL_ADC_IsEnabled+0x18>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <LL_ADC_IsEnabled+0x1a>
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d101      	bne.n	8003c0e <LL_ADC_IsDisableOngoing+0x18>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <LL_ADC_IsDisableOngoing+0x1a>
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <LL_ADC_REG_StartConversion+0x24>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	f043 0204 	orr.w	r2, r3, #4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	7fffffc0 	.word	0x7fffffc0

08003c44 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d101      	bne.n	8003c5c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d101      	bne.n	8003c82 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b089      	sub	sp, #36	; 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e18f      	b.n	8003fca <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fc fe47 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff19 	bl	8003b08 <LL_ADC_IsDeepPowerDownEnabled>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff feff 	bl	8003ae4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ff34 	bl	8003b58 <LL_ADC_IsInternalRegulatorEnabled>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d114      	bne.n	8003d20 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff ff18 	bl	8003b30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d00:	4b87      	ldr	r3, [pc, #540]	; (8003f20 <HAL_ADC_Init+0x290>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	4a87      	ldr	r2, [pc, #540]	; (8003f24 <HAL_ADC_Init+0x294>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	099b      	lsrs	r3, r3, #6
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d12:	e002      	b.n	8003d1a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f9      	bne.n	8003d14 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ff17 	bl	8003b58 <LL_ADC_IsInternalRegulatorEnabled>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10d      	bne.n	8003d4c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0210 	orr.w	r2, r3, #16
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	f043 0201 	orr.w	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ff77 	bl	8003c44 <LL_ADC_REG_IsConversionOngoing>
 8003d56:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f040 8129 	bne.w	8003fb8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f040 8125 	bne.w	8003fb8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d76:	f043 0202 	orr.w	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff ff24 	bl	8003bd0 <LL_ADC_IsEnabled>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d136      	bne.n	8003dfc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a65      	ldr	r2, [pc, #404]	; (8003f28 <HAL_ADC_Init+0x298>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_ADC_Init+0x112>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a63      	ldr	r2, [pc, #396]	; (8003f2c <HAL_ADC_Init+0x29c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d10e      	bne.n	8003dc0 <HAL_ADC_Init+0x130>
 8003da2:	4861      	ldr	r0, [pc, #388]	; (8003f28 <HAL_ADC_Init+0x298>)
 8003da4:	f7ff ff14 	bl	8003bd0 <LL_ADC_IsEnabled>
 8003da8:	4604      	mov	r4, r0
 8003daa:	4860      	ldr	r0, [pc, #384]	; (8003f2c <HAL_ADC_Init+0x29c>)
 8003dac:	f7ff ff10 	bl	8003bd0 <LL_ADC_IsEnabled>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4323      	orrs	r3, r4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e008      	b.n	8003dd2 <HAL_ADC_Init+0x142>
 8003dc0:	485b      	ldr	r0, [pc, #364]	; (8003f30 <HAL_ADC_Init+0x2a0>)
 8003dc2:	f7ff ff05 	bl	8003bd0 <LL_ADC_IsEnabled>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d012      	beq.n	8003dfc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a53      	ldr	r2, [pc, #332]	; (8003f28 <HAL_ADC_Init+0x298>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_ADC_Init+0x15a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a51      	ldr	r2, [pc, #324]	; (8003f2c <HAL_ADC_Init+0x29c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d101      	bne.n	8003dee <HAL_ADC_Init+0x15e>
 8003dea:	4a52      	ldr	r2, [pc, #328]	; (8003f34 <HAL_ADC_Init+0x2a4>)
 8003dec:	e000      	b.n	8003df0 <HAL_ADC_Init+0x160>
 8003dee:	4a52      	ldr	r2, [pc, #328]	; (8003f38 <HAL_ADC_Init+0x2a8>)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f7ff fd3c 	bl	8003874 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003dfc:	f7ff fd18 	bl	8003830 <HAL_GetREVID>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d914      	bls.n	8003e34 <HAL_ADC_Init+0x1a4>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d110      	bne.n	8003e34 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	7d5b      	ldrb	r3, [r3, #21]
 8003e16:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e1c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003e22:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7f1b      	ldrb	r3, [r3, #28]
 8003e28:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003e2a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e2c:	f043 030c 	orr.w	r3, r3, #12
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	e00d      	b.n	8003e50 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7d5b      	ldrb	r3, [r3, #21]
 8003e38:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e3e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003e44:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7f1b      	ldrb	r3, [r3, #28]
 8003e4a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	7f1b      	ldrb	r3, [r3, #28]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d106      	bne.n	8003e66 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	045b      	lsls	r3, r3, #17
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	4b2c      	ldr	r3, [pc, #176]	; (8003f3c <HAL_ADC_Init+0x2ac>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	69b9      	ldr	r1, [r7, #24]
 8003e92:	430b      	orrs	r3, r1
 8003e94:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fed2 	bl	8003c44 <LL_ADC_REG_IsConversionOngoing>
 8003ea0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fedf 	bl	8003c6a <LL_ADC_INJ_IsConversionOngoing>
 8003eac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d15f      	bne.n	8003f74 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d15c      	bne.n	8003f74 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7d1b      	ldrb	r3, [r3, #20]
 8003ebe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	4b1c      	ldr	r3, [pc, #112]	; (8003f40 <HAL_ADC_Init+0x2b0>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	69b9      	ldr	r1, [r7, #24]
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d130      	bne.n	8003f48 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <HAL_ADC_Init+0x2b4>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003efa:	3a01      	subs	r2, #1
 8003efc:	0411      	lsls	r1, r2, #16
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f02:	4311      	orrs	r1, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f08:	4311      	orrs	r1, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	611a      	str	r2, [r3, #16]
 8003f1c:	e01c      	b.n	8003f58 <HAL_ADC_Init+0x2c8>
 8003f1e:	bf00      	nop
 8003f20:	2400008c 	.word	0x2400008c
 8003f24:	053e2d63 	.word	0x053e2d63
 8003f28:	40022000 	.word	0x40022000
 8003f2c:	40022100 	.word	0x40022100
 8003f30:	58026000 	.word	0x58026000
 8003f34:	40022300 	.word	0x40022300
 8003f38:	58026300 	.word	0x58026300
 8003f3c:	fff0c003 	.word	0xfff0c003
 8003f40:	ffffbffc 	.word	0xffffbffc
 8003f44:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fdec 	bl	8004b4c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d10c      	bne.n	8003f96 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f023 010f 	bic.w	r1, r3, #15
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	1e5a      	subs	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
 8003f94:	e007      	b.n	8003fa6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 020f 	bic.w	r2, r2, #15
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	f023 0303 	bic.w	r3, r3, #3
 8003fae:	f043 0201 	orr.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
 8003fb6:	e007      	b.n	8003fc8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	f043 0210 	orr.w	r2, r3, #16
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3724      	adds	r7, #36	; 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd90      	pop	{r4, r7, pc}
 8003fd2:	bf00      	nop

08003fd4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a55      	ldr	r2, [pc, #340]	; (800413c <HAL_ADC_Start_DMA+0x168>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_ADC_Start_DMA+0x20>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a54      	ldr	r2, [pc, #336]	; (8004140 <HAL_ADC_Start_DMA+0x16c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADC_Start_DMA+0x24>
 8003ff4:	4b53      	ldr	r3, [pc, #332]	; (8004144 <HAL_ADC_Start_DMA+0x170>)
 8003ff6:	e000      	b.n	8003ffa <HAL_ADC_Start_DMA+0x26>
 8003ff8:	4b53      	ldr	r3, [pc, #332]	; (8004148 <HAL_ADC_Start_DMA+0x174>)
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fd64 	bl	8003ac8 <LL_ADC_GetMultimode>
 8004000:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fe1c 	bl	8003c44 <LL_ADC_REG_IsConversionOngoing>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	f040 808c 	bne.w	800412c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_ADC_Start_DMA+0x4e>
 800401e:	2302      	movs	r3, #2
 8004020:	e087      	b.n	8004132 <HAL_ADC_Start_DMA+0x15e>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b05      	cmp	r3, #5
 8004034:	d002      	beq.n	800403c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b09      	cmp	r3, #9
 800403a:	d170      	bne.n	800411e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fc07 	bl	8004850 <ADC_Enable>
 8004042:	4603      	mov	r3, r0
 8004044:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d163      	bne.n	8004114 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004050:	4b3e      	ldr	r3, [pc, #248]	; (800414c <HAL_ADC_Start_DMA+0x178>)
 8004052:	4013      	ands	r3, r2
 8004054:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a37      	ldr	r2, [pc, #220]	; (8004140 <HAL_ADC_Start_DMA+0x16c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d002      	beq.n	800406c <HAL_ADC_Start_DMA+0x98>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	e000      	b.n	800406e <HAL_ADC_Start_DMA+0x9a>
 800406c:	4b33      	ldr	r3, [pc, #204]	; (800413c <HAL_ADC_Start_DMA+0x168>)
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	4293      	cmp	r3, r2
 8004074:	d002      	beq.n	800407c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004080:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	f023 0206 	bic.w	r2, r3, #6
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	659a      	str	r2, [r3, #88]	; 0x58
 80040a0:	e002      	b.n	80040a8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ac:	4a28      	ldr	r2, [pc, #160]	; (8004150 <HAL_ADC_Start_DMA+0x17c>)
 80040ae:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b4:	4a27      	ldr	r2, [pc, #156]	; (8004154 <HAL_ADC_Start_DMA+0x180>)
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040bc:	4a26      	ldr	r2, [pc, #152]	; (8004158 <HAL_ADC_Start_DMA+0x184>)
 80040be:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	221c      	movs	r2, #28
 80040c6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0210 	orr.w	r2, r2, #16
 80040de:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f7ff fc89 	bl	8003a02 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3340      	adds	r3, #64	; 0x40
 80040fa:	4619      	mov	r1, r3
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f002 f80e 	bl	8006120 <HAL_DMA_Start_IT>
 8004104:	4603      	mov	r3, r0
 8004106:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff fd85 	bl	8003c1c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004112:	e00d      	b.n	8004130 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800411c:	e008      	b.n	8004130 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800412a:	e001      	b.n	8004130 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800412c:	2302      	movs	r3, #2
 800412e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004130:	7dfb      	ldrb	r3, [r7, #23]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40022000 	.word	0x40022000
 8004140:	40022100 	.word	0x40022100
 8004144:	40022300 	.word	0x40022300
 8004148:	58026300 	.word	0x58026300
 800414c:	fffff0fe 	.word	0xfffff0fe
 8004150:	08004a23 	.word	0x08004a23
 8004154:	08004afb 	.word	0x08004afb
 8004158:	08004b17 	.word	0x08004b17

0800415c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b0a1      	sub	sp, #132	; 0x84
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4a65      	ldr	r2, [pc, #404]	; (8004348 <HAL_ADC_ConfigChannel+0x1b0>)
 80041b2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x2a>
 80041be:	2302      	movs	r3, #2
 80041c0:	e32e      	b.n	8004820 <HAL_ADC_ConfigChannel+0x688>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fd38 	bl	8003c44 <LL_ADC_REG_IsConversionOngoing>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f040 8313 	bne.w	8004802 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	db2c      	blt.n	800423e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d108      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x6a>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	0e9b      	lsrs	r3, r3, #26
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2201      	movs	r2, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	e016      	b.n	8004230 <HAL_ADC_ConfigChannel+0x98>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004212:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800421a:	2320      	movs	r3, #32
 800421c:	e003      	b.n	8004226 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800421e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004220:	fab3 f383 	clz	r3, r3
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2201      	movs	r2, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	69d1      	ldr	r1, [r2, #28]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	430b      	orrs	r3, r1
 800423c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	f7ff fbad 	bl	80039aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fcf5 	bl	8003c44 <LL_ADC_REG_IsConversionOngoing>
 800425a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fd02 	bl	8003c6a <LL_ADC_INJ_IsConversionOngoing>
 8004266:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 80b8 	bne.w	80043e0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 80b4 	bne.w	80043e0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	6819      	ldr	r1, [r3, #0]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	461a      	mov	r2, r3
 8004286:	f7ff fbcf 	bl	8003a28 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800428a:	4b30      	ldr	r3, [pc, #192]	; (800434c <HAL_ADC_ConfigChannel+0x1b4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004296:	d10b      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x118>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	e01d      	b.n	80042ec <HAL_ADC_ConfigChannel+0x154>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x13e>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695a      	ldr	r2, [r3, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	e00a      	b.n	80042ec <HAL_ADC_ConfigChannel+0x154>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d02c      	beq.n	8004350 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6919      	ldr	r1, [r3, #16]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004304:	f7ff faea 	bl	80038dc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6919      	ldr	r1, [r3, #16]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	7e5b      	ldrb	r3, [r3, #25]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d102      	bne.n	800431e <HAL_ADC_ConfigChannel+0x186>
 8004318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800431c:	e000      	b.n	8004320 <HAL_ADC_ConfigChannel+0x188>
 800431e:	2300      	movs	r3, #0
 8004320:	461a      	mov	r2, r3
 8004322:	f7ff fb14 	bl	800394e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6919      	ldr	r1, [r3, #16]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	7e1b      	ldrb	r3, [r3, #24]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d102      	bne.n	800433c <HAL_ADC_ConfigChannel+0x1a4>
 8004336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800433a:	e000      	b.n	800433e <HAL_ADC_ConfigChannel+0x1a6>
 800433c:	2300      	movs	r3, #0
 800433e:	461a      	mov	r2, r3
 8004340:	f7ff faec 	bl	800391c <LL_ADC_SetDataRightShift>
 8004344:	e04c      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x248>
 8004346:	bf00      	nop
 8004348:	47ff0000 	.word	0x47ff0000
 800434c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	069b      	lsls	r3, r3, #26
 8004360:	429a      	cmp	r2, r3
 8004362:	d107      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004372:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800437a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	069b      	lsls	r3, r3, #26
 8004384:	429a      	cmp	r2, r3
 8004386:	d107      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004396:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800439e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	069b      	lsls	r3, r3, #26
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d107      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043ba:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	069b      	lsls	r3, r3, #26
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d107      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043de:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fbf3 	bl	8003bd0 <LL_ADC_IsEnabled>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f040 8211 	bne.w	8004814 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	461a      	mov	r2, r3
 8004400:	f7ff fb3e 	bl	8003a80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4aa1      	ldr	r2, [pc, #644]	; (8004690 <HAL_ADC_ConfigChannel+0x4f8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	f040 812e 	bne.w	800466c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x2a0>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	0e9b      	lsrs	r3, r3, #26
 8004426:	3301      	adds	r3, #1
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	2b09      	cmp	r3, #9
 800442e:	bf94      	ite	ls
 8004430:	2301      	movls	r3, #1
 8004432:	2300      	movhi	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e019      	b.n	800446c <HAL_ADC_ConfigChannel+0x2d4>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004440:	fa93 f3a3 	rbit	r3, r3
 8004444:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004448:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800444a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004450:	2320      	movs	r3, #32
 8004452:	e003      	b.n	800445c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004456:	fab3 f383 	clz	r3, r3
 800445a:	b2db      	uxtb	r3, r3
 800445c:	3301      	adds	r3, #1
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	2b09      	cmp	r3, #9
 8004464:	bf94      	ite	ls
 8004466:	2301      	movls	r3, #1
 8004468:	2300      	movhi	r3, #0
 800446a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800446c:	2b00      	cmp	r3, #0
 800446e:	d079      	beq.n	8004564 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <HAL_ADC_ConfigChannel+0x2f4>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	0e9b      	lsrs	r3, r3, #26
 8004482:	3301      	adds	r3, #1
 8004484:	069b      	lsls	r3, r3, #26
 8004486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800448a:	e015      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x320>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004494:	fa93 f3a3 	rbit	r3, r3
 8004498:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800449a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800449e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80044a4:	2320      	movs	r3, #32
 80044a6:	e003      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80044a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	3301      	adds	r3, #1
 80044b2:	069b      	lsls	r3, r3, #26
 80044b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d109      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x340>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	0e9b      	lsrs	r3, r3, #26
 80044ca:	3301      	adds	r3, #1
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	2101      	movs	r1, #1
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	e017      	b.n	8004508 <HAL_ADC_ConfigChannel+0x370>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e0:	fa93 f3a3 	rbit	r3, r3
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80044e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80044ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80044f0:	2320      	movs	r3, #32
 80044f2:	e003      	b.n	80044fc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80044f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f6:	fab3 f383 	clz	r3, r3
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	3301      	adds	r3, #1
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	2101      	movs	r1, #1
 8004504:	fa01 f303 	lsl.w	r3, r1, r3
 8004508:	ea42 0103 	orr.w	r1, r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <HAL_ADC_ConfigChannel+0x396>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	0e9b      	lsrs	r3, r3, #26
 800451e:	3301      	adds	r3, #1
 8004520:	f003 021f 	and.w	r2, r3, #31
 8004524:	4613      	mov	r3, r2
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	4413      	add	r3, r2
 800452a:	051b      	lsls	r3, r3, #20
 800452c:	e018      	b.n	8004560 <HAL_ADC_ConfigChannel+0x3c8>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004536:	fa93 f3a3 	rbit	r3, r3
 800453a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004546:	2320      	movs	r3, #32
 8004548:	e003      	b.n	8004552 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	fab3 f383 	clz	r3, r3
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3301      	adds	r3, #1
 8004554:	f003 021f 	and.w	r2, r3, #31
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004560:	430b      	orrs	r3, r1
 8004562:	e07e      	b.n	8004662 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800456c:	2b00      	cmp	r3, #0
 800456e:	d107      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x3e8>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	0e9b      	lsrs	r3, r3, #26
 8004576:	3301      	adds	r3, #1
 8004578:	069b      	lsls	r3, r3, #26
 800457a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800457e:	e015      	b.n	80045ac <HAL_ADC_ConfigChannel+0x414>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004598:	2320      	movs	r3, #32
 800459a:	e003      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	fab3 f383 	clz	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	3301      	adds	r3, #1
 80045a6:	069b      	lsls	r3, r3, #26
 80045a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x434>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	0e9b      	lsrs	r3, r3, #26
 80045be:	3301      	adds	r3, #1
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	2101      	movs	r1, #1
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	e017      	b.n	80045fc <HAL_ADC_ConfigChannel+0x464>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	61bb      	str	r3, [r7, #24]
  return result;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80045e4:	2320      	movs	r3, #32
 80045e6:	e003      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	3301      	adds	r3, #1
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2101      	movs	r1, #1
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	ea42 0103 	orr.w	r1, r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10d      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x490>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	0e9b      	lsrs	r3, r3, #26
 8004612:	3301      	adds	r3, #1
 8004614:	f003 021f 	and.w	r2, r3, #31
 8004618:	4613      	mov	r3, r2
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	4413      	add	r3, r2
 800461e:	3b1e      	subs	r3, #30
 8004620:	051b      	lsls	r3, r3, #20
 8004622:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004626:	e01b      	b.n	8004660 <HAL_ADC_ConfigChannel+0x4c8>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	fa93 f3a3 	rbit	r3, r3
 8004634:	60fb      	str	r3, [r7, #12]
  return result;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004640:	2320      	movs	r3, #32
 8004642:	e003      	b.n	800464c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	fab3 f383 	clz	r3, r3
 800464a:	b2db      	uxtb	r3, r3
 800464c:	3301      	adds	r3, #1
 800464e:	f003 021f 	and.w	r2, r3, #31
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	3b1e      	subs	r3, #30
 800465a:	051b      	lsls	r3, r3, #20
 800465c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004660:	430b      	orrs	r3, r1
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	6892      	ldr	r2, [r2, #8]
 8004666:	4619      	mov	r1, r3
 8004668:	f7ff f9de 	bl	8003a28 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	f280 80cf 	bge.w	8004814 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a06      	ldr	r2, [pc, #24]	; (8004694 <HAL_ADC_ConfigChannel+0x4fc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d004      	beq.n	800468a <HAL_ADC_ConfigChannel+0x4f2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a04      	ldr	r2, [pc, #16]	; (8004698 <HAL_ADC_ConfigChannel+0x500>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d10a      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x508>
 800468a:	4b04      	ldr	r3, [pc, #16]	; (800469c <HAL_ADC_ConfigChannel+0x504>)
 800468c:	e009      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x50a>
 800468e:	bf00      	nop
 8004690:	47ff0000 	.word	0x47ff0000
 8004694:	40022000 	.word	0x40022000
 8004698:	40022100 	.word	0x40022100
 800469c:	40022300 	.word	0x40022300
 80046a0:	4b61      	ldr	r3, [pc, #388]	; (8004828 <HAL_ADC_ConfigChannel+0x690>)
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff f90c 	bl	80038c0 <LL_ADC_GetCommonPathInternalCh>
 80046a8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a5f      	ldr	r2, [pc, #380]	; (800482c <HAL_ADC_ConfigChannel+0x694>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <HAL_ADC_ConfigChannel+0x526>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a5d      	ldr	r2, [pc, #372]	; (8004830 <HAL_ADC_ConfigChannel+0x698>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10e      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x544>
 80046be:	485b      	ldr	r0, [pc, #364]	; (800482c <HAL_ADC_ConfigChannel+0x694>)
 80046c0:	f7ff fa86 	bl	8003bd0 <LL_ADC_IsEnabled>
 80046c4:	4604      	mov	r4, r0
 80046c6:	485a      	ldr	r0, [pc, #360]	; (8004830 <HAL_ADC_ConfigChannel+0x698>)
 80046c8:	f7ff fa82 	bl	8003bd0 <LL_ADC_IsEnabled>
 80046cc:	4603      	mov	r3, r0
 80046ce:	4323      	orrs	r3, r4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e008      	b.n	80046ee <HAL_ADC_ConfigChannel+0x556>
 80046dc:	4855      	ldr	r0, [pc, #340]	; (8004834 <HAL_ADC_ConfigChannel+0x69c>)
 80046de:	f7ff fa77 	bl	8003bd0 <LL_ADC_IsEnabled>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d07d      	beq.n	80047ee <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a50      	ldr	r2, [pc, #320]	; (8004838 <HAL_ADC_ConfigChannel+0x6a0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d130      	bne.n	800475e <HAL_ADC_ConfigChannel+0x5c6>
 80046fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d12b      	bne.n	800475e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a4a      	ldr	r2, [pc, #296]	; (8004834 <HAL_ADC_ConfigChannel+0x69c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	f040 8081 	bne.w	8004814 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a45      	ldr	r2, [pc, #276]	; (800482c <HAL_ADC_ConfigChannel+0x694>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_ADC_ConfigChannel+0x58e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a43      	ldr	r2, [pc, #268]	; (8004830 <HAL_ADC_ConfigChannel+0x698>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <HAL_ADC_ConfigChannel+0x592>
 8004726:	4a45      	ldr	r2, [pc, #276]	; (800483c <HAL_ADC_ConfigChannel+0x6a4>)
 8004728:	e000      	b.n	800472c <HAL_ADC_ConfigChannel+0x594>
 800472a:	4a3f      	ldr	r2, [pc, #252]	; (8004828 <HAL_ADC_ConfigChannel+0x690>)
 800472c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f7ff f8b0 	bl	800389a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800473a:	4b41      	ldr	r3, [pc, #260]	; (8004840 <HAL_ADC_ConfigChannel+0x6a8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	099b      	lsrs	r3, r3, #6
 8004740:	4a40      	ldr	r2, [pc, #256]	; (8004844 <HAL_ADC_ConfigChannel+0x6ac>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	099b      	lsrs	r3, r3, #6
 8004748:	3301      	adds	r3, #1
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800474e:	e002      	b.n	8004756 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	3b01      	subs	r3, #1
 8004754:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f9      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800475c:	e05a      	b.n	8004814 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a39      	ldr	r2, [pc, #228]	; (8004848 <HAL_ADC_ConfigChannel+0x6b0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d11e      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x60e>
 8004768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d119      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2f      	ldr	r2, [pc, #188]	; (8004834 <HAL_ADC_ConfigChannel+0x69c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d14b      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a2a      	ldr	r2, [pc, #168]	; (800482c <HAL_ADC_ConfigChannel+0x694>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d004      	beq.n	8004790 <HAL_ADC_ConfigChannel+0x5f8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a29      	ldr	r2, [pc, #164]	; (8004830 <HAL_ADC_ConfigChannel+0x698>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d101      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x5fc>
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <HAL_ADC_ConfigChannel+0x6a4>)
 8004792:	e000      	b.n	8004796 <HAL_ADC_ConfigChannel+0x5fe>
 8004794:	4a24      	ldr	r2, [pc, #144]	; (8004828 <HAL_ADC_ConfigChannel+0x690>)
 8004796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004798:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f7ff f87b 	bl	800389a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047a4:	e036      	b.n	8004814 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a28      	ldr	r2, [pc, #160]	; (800484c <HAL_ADC_ConfigChannel+0x6b4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d131      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x67c>
 80047b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d12c      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_ADC_ConfigChannel+0x69c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d127      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_ADC_ConfigChannel+0x694>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_ADC_ConfigChannel+0x640>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a17      	ldr	r2, [pc, #92]	; (8004830 <HAL_ADC_ConfigChannel+0x698>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <HAL_ADC_ConfigChannel+0x644>
 80047d8:	4a18      	ldr	r2, [pc, #96]	; (800483c <HAL_ADC_ConfigChannel+0x6a4>)
 80047da:	e000      	b.n	80047de <HAL_ADC_ConfigChannel+0x646>
 80047dc:	4a12      	ldr	r2, [pc, #72]	; (8004828 <HAL_ADC_ConfigChannel+0x690>)
 80047de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f7ff f857 	bl	800389a <LL_ADC_SetCommonPathInternalCh>
 80047ec:	e012      	b.n	8004814 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004800:	e008      	b.n	8004814 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800481c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004820:	4618      	mov	r0, r3
 8004822:	3784      	adds	r7, #132	; 0x84
 8004824:	46bd      	mov	sp, r7
 8004826:	bd90      	pop	{r4, r7, pc}
 8004828:	58026300 	.word	0x58026300
 800482c:	40022000 	.word	0x40022000
 8004830:	40022100 	.word	0x40022100
 8004834:	58026000 	.word	0x58026000
 8004838:	cb840000 	.word	0xcb840000
 800483c:	40022300 	.word	0x40022300
 8004840:	2400008c 	.word	0x2400008c
 8004844:	053e2d63 	.word	0x053e2d63
 8004848:	c7520000 	.word	0xc7520000
 800484c:	cfb80000 	.word	0xcfb80000

08004850 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff f9b7 	bl	8003bd0 <LL_ADC_IsEnabled>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d16e      	bne.n	8004946 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	4b38      	ldr	r3, [pc, #224]	; (8004950 <ADC_Enable+0x100>)
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00d      	beq.n	8004892 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	f043 0210 	orr.w	r2, r3, #16
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004886:	f043 0201 	orr.w	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e05a      	b.n	8004948 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff f972 	bl	8003b80 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800489c:	f7fe ffbc 	bl	8003818 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2b      	ldr	r2, [pc, #172]	; (8004954 <ADC_Enable+0x104>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <ADC_Enable+0x66>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a29      	ldr	r2, [pc, #164]	; (8004958 <ADC_Enable+0x108>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d101      	bne.n	80048ba <ADC_Enable+0x6a>
 80048b6:	4b29      	ldr	r3, [pc, #164]	; (800495c <ADC_Enable+0x10c>)
 80048b8:	e000      	b.n	80048bc <ADC_Enable+0x6c>
 80048ba:	4b29      	ldr	r3, [pc, #164]	; (8004960 <ADC_Enable+0x110>)
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff f903 	bl	8003ac8 <LL_ADC_GetMultimode>
 80048c2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a23      	ldr	r2, [pc, #140]	; (8004958 <ADC_Enable+0x108>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d002      	beq.n	80048d4 <ADC_Enable+0x84>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	e000      	b.n	80048d6 <ADC_Enable+0x86>
 80048d4:	4b1f      	ldr	r3, [pc, #124]	; (8004954 <ADC_Enable+0x104>)
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	4293      	cmp	r3, r2
 80048dc:	d02c      	beq.n	8004938 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d130      	bne.n	8004946 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048e4:	e028      	b.n	8004938 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff f970 	bl	8003bd0 <LL_ADC_IsEnabled>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff f940 	bl	8003b80 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004900:	f7fe ff8a 	bl	8003818 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d914      	bls.n	8004938 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b01      	cmp	r3, #1
 800491a:	d00d      	beq.n	8004938 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	f043 0210 	orr.w	r2, r3, #16
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	f043 0201 	orr.w	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e007      	b.n	8004948 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d1cf      	bne.n	80048e6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	8000003f 	.word	0x8000003f
 8004954:	40022000 	.word	0x40022000
 8004958:	40022100 	.word	0x40022100
 800495c:	40022300 	.word	0x40022300
 8004960:	58026300 	.word	0x58026300

08004964 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff f940 	bl	8003bf6 <LL_ADC_IsDisableOngoing>
 8004976:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff f927 	bl	8003bd0 <LL_ADC_IsEnabled>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d047      	beq.n	8004a18 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d144      	bne.n	8004a18 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030d 	and.w	r3, r3, #13
 8004998:	2b01      	cmp	r3, #1
 800499a:	d10c      	bne.n	80049b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff f901 	bl	8003ba8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2203      	movs	r2, #3
 80049ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049ae:	f7fe ff33 	bl	8003818 <HAL_GetTick>
 80049b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049b4:	e029      	b.n	8004a0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	f043 0201 	orr.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e023      	b.n	8004a1a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049d2:	f7fe ff21 	bl	8003818 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d914      	bls.n	8004a0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f2:	f043 0210 	orr.w	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fe:	f043 0201 	orr.w	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e007      	b.n	8004a1a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1dc      	bne.n	80049d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d14b      	bne.n	8004ad4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d021      	beq.n	8004a9a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe ff92 	bl	8003984 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d032      	beq.n	8004acc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d12b      	bne.n	8004acc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d11f      	bne.n	8004acc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a90:	f043 0201 	orr.w	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	655a      	str	r2, [r3, #84]	; 0x54
 8004a98:	e018      	b.n	8004acc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d111      	bne.n	8004acc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff fb45 	bl	800415c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ad2:	e00e      	b.n	8004af2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff fb4f 	bl	8004184 <HAL_ADC_ErrorCallback>
}
 8004ae6:	e004      	b.n	8004af2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff fb31 	bl	8004170 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	f043 0204 	orr.w	r2, r3, #4
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff fb21 	bl	8004184 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a7a      	ldr	r2, [pc, #488]	; (8004d44 <ADC_ConfigureBoostMode+0x1f8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <ADC_ConfigureBoostMode+0x1c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a79      	ldr	r2, [pc, #484]	; (8004d48 <ADC_ConfigureBoostMode+0x1fc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d109      	bne.n	8004b7c <ADC_ConfigureBoostMode+0x30>
 8004b68:	4b78      	ldr	r3, [pc, #480]	; (8004d4c <ADC_ConfigureBoostMode+0x200>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bf14      	ite	ne
 8004b74:	2301      	movne	r3, #1
 8004b76:	2300      	moveq	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	e008      	b.n	8004b8e <ADC_ConfigureBoostMode+0x42>
 8004b7c:	4b74      	ldr	r3, [pc, #464]	; (8004d50 <ADC_ConfigureBoostMode+0x204>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01c      	beq.n	8004bcc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004b92:	f005 f8af 	bl	8009cf4 <HAL_RCC_GetHCLKFreq>
 8004b96:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ba0:	d010      	beq.n	8004bc4 <ADC_ConfigureBoostMode+0x78>
 8004ba2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ba6:	d873      	bhi.n	8004c90 <ADC_ConfigureBoostMode+0x144>
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bac:	d002      	beq.n	8004bb4 <ADC_ConfigureBoostMode+0x68>
 8004bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bb2:	d16d      	bne.n	8004c90 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	60fb      	str	r3, [r7, #12]
        break;
 8004bc2:	e068      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	60fb      	str	r3, [r7, #12]
        break;
 8004bca:	e064      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004bcc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004bd0:	f04f 0100 	mov.w	r1, #0
 8004bd4:	f006 fb36 	bl	800b244 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bd8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004be2:	d051      	beq.n	8004c88 <ADC_ConfigureBoostMode+0x13c>
 8004be4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004be8:	d854      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004bea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004bee:	d047      	beq.n	8004c80 <ADC_ConfigureBoostMode+0x134>
 8004bf0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004bf4:	d84e      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004bf6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004bfa:	d03d      	beq.n	8004c78 <ADC_ConfigureBoostMode+0x12c>
 8004bfc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c00:	d848      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c06:	d033      	beq.n	8004c70 <ADC_ConfigureBoostMode+0x124>
 8004c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c0c:	d842      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c0e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c12:	d029      	beq.n	8004c68 <ADC_ConfigureBoostMode+0x11c>
 8004c14:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c18:	d83c      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c1a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c1e:	d01a      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c20:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c24:	d836      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c26:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c2a:	d014      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c2c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c30:	d830      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c36:	d00e      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c3c:	d82a      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c42:	d008      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c48:	d824      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c4e:	d002      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c54:	d11e      	bne.n	8004c94 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	0c9b      	lsrs	r3, r3, #18
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	60fb      	str	r3, [r7, #12]
        break;
 8004c66:	e016      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	60fb      	str	r3, [r7, #12]
        break;
 8004c6e:	e012      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	60fb      	str	r3, [r7, #12]
        break;
 8004c76:	e00e      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	60fb      	str	r3, [r7, #12]
        break;
 8004c7e:	e00a      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	09db      	lsrs	r3, r3, #7
 8004c84:	60fb      	str	r3, [r7, #12]
        break;
 8004c86:	e006      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	0a1b      	lsrs	r3, r3, #8
 8004c8c:	60fb      	str	r3, [r7, #12]
        break;
 8004c8e:	e002      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004c90:	bf00      	nop
 8004c92:	e000      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004c94:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004c96:	f7fe fdcb 	bl	8003830 <HAL_GetREVID>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d815      	bhi.n	8004cd0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a2b      	ldr	r2, [pc, #172]	; (8004d54 <ADC_ConfigureBoostMode+0x208>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d908      	bls.n	8004cbe <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004cbc:	e03e      	b.n	8004d3c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ccc:	609a      	str	r2, [r3, #8]
}
 8004cce:	e035      	b.n	8004d3c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a1f      	ldr	r2, [pc, #124]	; (8004d58 <ADC_ConfigureBoostMode+0x20c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d808      	bhi.n	8004cf0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cec:	609a      	str	r2, [r3, #8]
}
 8004cee:	e025      	b.n	8004d3c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <ADC_ConfigureBoostMode+0x210>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d80a      	bhi.n	8004d0e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d0a:	609a      	str	r2, [r3, #8]
}
 8004d0c:	e016      	b.n	8004d3c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <ADC_ConfigureBoostMode+0x214>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d80a      	bhi.n	8004d2c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d28:	609a      	str	r2, [r3, #8]
}
 8004d2a:	e007      	b.n	8004d3c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004d3a:	609a      	str	r2, [r3, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40022000 	.word	0x40022000
 8004d48:	40022100 	.word	0x40022100
 8004d4c:	40022300 	.word	0x40022300
 8004d50:	58026300 	.word	0x58026300
 8004d54:	01312d00 	.word	0x01312d00
 8004d58:	005f5e10 	.word	0x005f5e10
 8004d5c:	00bebc20 	.word	0x00bebc20
 8004d60:	017d7840 	.word	0x017d7840

08004d64 <LL_ADC_IsEnabled>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <LL_ADC_IsEnabled+0x18>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <LL_ADC_IsEnabled+0x1a>
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <LL_ADC_StartCalibration>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <LL_ADC_StartCalibration+0x38>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004dac:	430a      	orrs	r2, r1
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	609a      	str	r2, [r3, #8]
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	3ffeffc0 	.word	0x3ffeffc0

08004dc8 <LL_ADC_IsCalibrationOnGoing>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ddc:	d101      	bne.n	8004de2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <LL_ADC_REG_IsConversionOngoing>:
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d101      	bne.n	8004e08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_ADCEx_Calibration_Start+0x1e>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e04c      	b.n	8004ed0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff fd90 	bl	8004964 <ADC_Disable>
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d135      	bne.n	8004eba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e52:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	f043 0202 	orr.w	r2, r3, #2
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff ff90 	bl	8004d8c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e6c:	e014      	b.n	8004e98 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	3301      	adds	r3, #1
 8004e72:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4a19      	ldr	r2, [pc, #100]	; (8004edc <HAL_ADCEx_Calibration_Start+0xc4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d30d      	bcc.n	8004e98 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e80:	f023 0312 	bic.w	r3, r3, #18
 8004e84:	f043 0210 	orr.w	r2, r3, #16
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e01b      	b.n	8004ed0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff ff93 	bl	8004dc8 <LL_ADC_IsCalibrationOnGoing>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e2      	bne.n	8004e6e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	f023 0303 	bic.w	r3, r3, #3
 8004eb0:	f043 0201 	orr.w	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54
 8004eb8:	e005      	b.n	8004ec6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebe:	f043 0210 	orr.w	r2, r3, #16
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	ffffeefd 	.word	0xffffeefd
 8004edc:	25c3f800 	.word	0x25c3f800

08004ee0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b09f      	sub	sp, #124	; 0x7c
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e0be      	b.n	800507c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004f06:	2300      	movs	r3, #0
 8004f08:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5c      	ldr	r2, [pc, #368]	; (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d102      	bne.n	8004f1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f18:	4b5b      	ldr	r3, [pc, #364]	; (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	e001      	b.n	8004f22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e09d      	b.n	800507c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff ff54 	bl	8004df0 <LL_ADC_REG_IsConversionOngoing>
 8004f48:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff ff4e 	bl	8004df0 <LL_ADC_REG_IsConversionOngoing>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d17f      	bne.n	800505a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d17c      	bne.n	800505a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a47      	ldr	r2, [pc, #284]	; (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d004      	beq.n	8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a46      	ldr	r2, [pc, #280]	; (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d101      	bne.n	8004f78 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004f74:	4b45      	ldr	r3, [pc, #276]	; (800508c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f76:	e000      	b.n	8004f7a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004f78:	4b45      	ldr	r3, [pc, #276]	; (8005090 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f7a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d039      	beq.n	8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	431a      	orrs	r2, r3
 8004f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f94:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a3a      	ldr	r2, [pc, #232]	; (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d004      	beq.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a38      	ldr	r2, [pc, #224]	; (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d10e      	bne.n	8004fc8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004faa:	4836      	ldr	r0, [pc, #216]	; (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004fac:	f7ff feda 	bl	8004d64 <LL_ADC_IsEnabled>
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	4835      	ldr	r0, [pc, #212]	; (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004fb4:	f7ff fed6 	bl	8004d64 <LL_ADC_IsEnabled>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4323      	orrs	r3, r4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	e008      	b.n	8004fda <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004fc8:	4832      	ldr	r0, [pc, #200]	; (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004fca:	f7ff fecb 	bl	8004d64 <LL_ADC_IsEnabled>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d047      	beq.n	800506e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	4b2d      	ldr	r3, [pc, #180]	; (8005098 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	6811      	ldr	r1, [r2, #0]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	6892      	ldr	r2, [r2, #8]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ff6:	e03a      	b.n	800506e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005002:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1e      	ldr	r2, [pc, #120]	; (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d004      	beq.n	8005018 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1d      	ldr	r2, [pc, #116]	; (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d10e      	bne.n	8005036 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005018:	481a      	ldr	r0, [pc, #104]	; (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800501a:	f7ff fea3 	bl	8004d64 <LL_ADC_IsEnabled>
 800501e:	4604      	mov	r4, r0
 8005020:	4819      	ldr	r0, [pc, #100]	; (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005022:	f7ff fe9f 	bl	8004d64 <LL_ADC_IsEnabled>
 8005026:	4603      	mov	r3, r0
 8005028:	4323      	orrs	r3, r4
 800502a:	2b00      	cmp	r3, #0
 800502c:	bf0c      	ite	eq
 800502e:	2301      	moveq	r3, #1
 8005030:	2300      	movne	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	e008      	b.n	8005048 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005036:	4817      	ldr	r0, [pc, #92]	; (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005038:	f7ff fe94 	bl	8004d64 <LL_ADC_IsEnabled>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf0c      	ite	eq
 8005042:	2301      	moveq	r3, #1
 8005044:	2300      	movne	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d010      	beq.n	800506e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800504c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	4b11      	ldr	r3, [pc, #68]	; (8005098 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005052:	4013      	ands	r3, r2
 8005054:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005056:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005058:	e009      	b.n	800506e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505e:	f043 0220 	orr.w	r2, r3, #32
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800506c:	e000      	b.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800506e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005078:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800507c:	4618      	mov	r0, r3
 800507e:	377c      	adds	r7, #124	; 0x7c
 8005080:	46bd      	mov	sp, r7
 8005082:	bd90      	pop	{r4, r7, pc}
 8005084:	40022000 	.word	0x40022000
 8005088:	40022100 	.word	0x40022100
 800508c:	40022300 	.word	0x40022300
 8005090:	58026300 	.word	0x58026300
 8005094:	58026000 	.word	0x58026000
 8005098:	fffff0e0 	.word	0xfffff0e0

0800509c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <__NVIC_SetPriorityGrouping+0x40>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050b8:	4013      	ands	r3, r2
 80050ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80050c4:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <__NVIC_SetPriorityGrouping+0x44>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050ca:	4a04      	ldr	r2, [pc, #16]	; (80050dc <__NVIC_SetPriorityGrouping+0x40>)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	60d3      	str	r3, [r2, #12]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	e000ed00 	.word	0xe000ed00
 80050e0:	05fa0000 	.word	0x05fa0000

080050e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <__NVIC_GetPriorityGrouping+0x18>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	0a1b      	lsrs	r3, r3, #8
 80050ee:	f003 0307 	and.w	r3, r3, #7
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	e000ed00 	.word	0xe000ed00

08005100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800510a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800510e:	2b00      	cmp	r3, #0
 8005110:	db0b      	blt.n	800512a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005112:	88fb      	ldrh	r3, [r7, #6]
 8005114:	f003 021f 	and.w	r2, r3, #31
 8005118:	4907      	ldr	r1, [pc, #28]	; (8005138 <__NVIC_EnableIRQ+0x38>)
 800511a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	2001      	movs	r0, #1
 8005122:	fa00 f202 	lsl.w	r2, r0, r2
 8005126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	e000e100 	.word	0xe000e100

0800513c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	6039      	str	r1, [r7, #0]
 8005146:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005148:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800514c:	2b00      	cmp	r3, #0
 800514e:	db0a      	blt.n	8005166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	b2da      	uxtb	r2, r3
 8005154:	490c      	ldr	r1, [pc, #48]	; (8005188 <__NVIC_SetPriority+0x4c>)
 8005156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800515a:	0112      	lsls	r2, r2, #4
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	440b      	add	r3, r1
 8005160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005164:	e00a      	b.n	800517c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	b2da      	uxtb	r2, r3
 800516a:	4908      	ldr	r1, [pc, #32]	; (800518c <__NVIC_SetPriority+0x50>)
 800516c:	88fb      	ldrh	r3, [r7, #6]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	3b04      	subs	r3, #4
 8005174:	0112      	lsls	r2, r2, #4
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	440b      	add	r3, r1
 800517a:	761a      	strb	r2, [r3, #24]
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	e000e100 	.word	0xe000e100
 800518c:	e000ed00 	.word	0xe000ed00

08005190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005190:	b480      	push	{r7}
 8005192:	b089      	sub	sp, #36	; 0x24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f1c3 0307 	rsb	r3, r3, #7
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	bf28      	it	cs
 80051ae:	2304      	movcs	r3, #4
 80051b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	3304      	adds	r3, #4
 80051b6:	2b06      	cmp	r3, #6
 80051b8:	d902      	bls.n	80051c0 <NVIC_EncodePriority+0x30>
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	3b03      	subs	r3, #3
 80051be:	e000      	b.n	80051c2 <NVIC_EncodePriority+0x32>
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	43da      	mvns	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	401a      	ands	r2, r3
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	fa01 f303 	lsl.w	r3, r1, r3
 80051e2:	43d9      	mvns	r1, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e8:	4313      	orrs	r3, r2
         );
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3724      	adds	r7, #36	; 0x24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff ff4c 	bl	800509c <__NVIC_SetPriorityGrouping>
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800521a:	f7ff ff63 	bl	80050e4 <__NVIC_GetPriorityGrouping>
 800521e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	6978      	ldr	r0, [r7, #20]
 8005226:	f7ff ffb3 	bl	8005190 <NVIC_EncodePriority>
 800522a:	4602      	mov	r2, r0
 800522c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005230:	4611      	mov	r1, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff ff82 	bl	800513c <__NVIC_SetPriority>
}
 8005238:	bf00      	nop
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800524a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff ff56 	bl	8005100 <__NVIC_EnableIRQ>
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e014      	b.n	8005298 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	791b      	ldrb	r3, [r3, #4]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fb fcb0 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e046      	b.n	8005342 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	795b      	ldrb	r3, [r3, #5]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_DAC_Start+0x20>
 80052bc:	2302      	movs	r3, #2
 80052be:	e040      	b.n	8005342 <HAL_DAC_Start+0xa2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6819      	ldr	r1, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2201      	movs	r2, #1
 80052da:	409a      	lsls	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10f      	bne.n	800530a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d11d      	bne.n	8005334 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	605a      	str	r2, [r3, #4]
 8005308:	e014      	b.n	8005334 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f003 0310 	and.w	r3, r3, #16
 800531a:	2102      	movs	r1, #2
 800531c:	fa01 f303 	lsl.w	r3, r1, r3
 8005320:	429a      	cmp	r2, r3
 8005322:	d107      	bne.n	8005334 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0202 	orr.w	r2, r2, #2
 8005332:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0a2      	b.n	80054ae <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	795b      	ldrb	r3, [r3, #5]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_DAC_Start_DMA+0x24>
 8005370:	2302      	movs	r3, #2
 8005372:	e09c      	b.n	80054ae <HAL_DAC_Start_DMA+0x15e>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2202      	movs	r2, #2
 800537e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d129      	bne.n	80053da <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	4a4b      	ldr	r2, [pc, #300]	; (80054b8 <HAL_DAC_Start_DMA+0x168>)
 800538c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	4a4a      	ldr	r2, [pc, #296]	; (80054bc <HAL_DAC_Start_DMA+0x16c>)
 8005394:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	4a49      	ldr	r2, [pc, #292]	; (80054c0 <HAL_DAC_Start_DMA+0x170>)
 800539c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053ac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_DAC_Start_DMA+0x6c>
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d005      	beq.n	80053c6 <HAL_DAC_Start_DMA+0x76>
 80053ba:	e009      	b.n	80053d0 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3308      	adds	r3, #8
 80053c2:	613b      	str	r3, [r7, #16]
        break;
 80053c4:	e033      	b.n	800542e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	613b      	str	r3, [r7, #16]
        break;
 80053ce:	e02e      	b.n	800542e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3310      	adds	r3, #16
 80053d6:	613b      	str	r3, [r7, #16]
        break;
 80053d8:	e029      	b.n	800542e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	4a39      	ldr	r2, [pc, #228]	; (80054c4 <HAL_DAC_Start_DMA+0x174>)
 80053e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	4a38      	ldr	r2, [pc, #224]	; (80054c8 <HAL_DAC_Start_DMA+0x178>)
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	4a37      	ldr	r2, [pc, #220]	; (80054cc <HAL_DAC_Start_DMA+0x17c>)
 80053f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005400:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_DAC_Start_DMA+0xc0>
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2b04      	cmp	r3, #4
 800540c:	d005      	beq.n	800541a <HAL_DAC_Start_DMA+0xca>
 800540e:	e009      	b.n	8005424 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3314      	adds	r3, #20
 8005416:	613b      	str	r3, [r7, #16]
        break;
 8005418:	e009      	b.n	800542e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3318      	adds	r3, #24
 8005420:	613b      	str	r3, [r7, #16]
        break;
 8005422:	e004      	b.n	800542e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	331c      	adds	r3, #28
 800542a:	613b      	str	r3, [r7, #16]
        break;
 800542c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d111      	bne.n	8005458 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005442:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6898      	ldr	r0, [r3, #8]
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	f000 fe67 	bl	8006120 <HAL_DMA_Start_IT>
 8005452:	4603      	mov	r3, r0
 8005454:	75fb      	strb	r3, [r7, #23]
 8005456:	e010      	b.n	800547a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005466:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	68d8      	ldr	r0, [r3, #12]
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	f000 fe55 	bl	8006120 <HAL_DMA_Start_IT>
 8005476:	4603      	mov	r3, r0
 8005478:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10c      	bne.n	80054a0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6819      	ldr	r1, [r3, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2201      	movs	r2, #1
 8005494:	409a      	lsls	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e005      	b.n	80054ac <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f043 0204 	orr.w	r2, r3, #4
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	08005941 	.word	0x08005941
 80054bc:	08005963 	.word	0x08005963
 80054c0:	0800597f 	.word	0x0800597f
 80054c4:	080059fd 	.word	0x080059fd
 80054c8:	08005a1f 	.word	0x08005a1f
 80054cc:	08005a3b 	.word	0x08005a3b

080054d0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e03e      	b.n	8005562 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6819      	ldr	r1, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	43da      	mvns	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	400a      	ands	r2, r1
 8005500:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6819      	ldr	r1, [r3, #0]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	2201      	movs	r2, #1
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	43da      	mvns	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	400a      	ands	r2, r1
 800551c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10d      	bne.n	8005540 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4618      	mov	r0, r3
 800552a:	f001 f863 	bl	80065f4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	e00c      	b.n	800555a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	4618      	mov	r0, r3
 8005546:	f001 f855 	bl	80065f4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005558:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005580:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01d      	beq.n	80055c8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d018      	beq.n	80055c8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2204      	movs	r2, #4
 800559a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f043 0201 	orr.w	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055c0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f86f 	bl	80056a6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d01d      	beq.n	800560e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d018      	beq.n	800560e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2204      	movs	r2, #4
 80055e0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f043 0202 	orr.w	r2, r3, #2
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80055f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005606:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f9ed 	bl	80059e8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005616:	b480      	push	{r7}
 8005618:	b087      	sub	sp, #28
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
 8005622:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005624:	2300      	movs	r3, #0
 8005626:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e015      	b.n	800565e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d105      	bne.n	800564a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4413      	add	r3, r2
 8005644:	3308      	adds	r3, #8
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	e004      	b.n	8005654 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4413      	add	r3, r2
 8005650:	3314      	adds	r3, #20
 8005652:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	461a      	mov	r2, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	; 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <HAL_DAC_ConfigChannel+0x1e>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e12a      	b.n	8005934 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	795b      	ldrb	r3, [r3, #5]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_DAC_ConfigChannel+0x2e>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e124      	b.n	8005934 <HAL_DAC_ConfigChannel+0x278>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2202      	movs	r2, #2
 80056f4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d17a      	bne.n	80057f4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80056fe:	f7fe f88b 	bl	8003818 <HAL_GetTick>
 8005702:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d13d      	bne.n	8005786 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800570a:	e018      	b.n	800573e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800570c:	f7fe f884 	bl	8003818 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b01      	cmp	r3, #1
 8005718:	d911      	bls.n	800573e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005720:	4b86      	ldr	r3, [pc, #536]	; (800593c <HAL_DAC_ConfigChannel+0x280>)
 8005722:	4013      	ands	r3, r2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f043 0208 	orr.w	r2, r3, #8
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2203      	movs	r2, #3
 8005738:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e0fa      	b.n	8005934 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005744:	4b7d      	ldr	r3, [pc, #500]	; (800593c <HAL_DAC_ConfigChannel+0x280>)
 8005746:	4013      	ands	r3, r2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1df      	bne.n	800570c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	6992      	ldr	r2, [r2, #24]
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
 8005756:	e020      	b.n	800579a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005758:	f7fe f85e 	bl	8003818 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d90f      	bls.n	8005786 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576c:	2b00      	cmp	r3, #0
 800576e:	da0a      	bge.n	8005786 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f043 0208 	orr.w	r2, r3, #8
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2203      	movs	r2, #3
 8005780:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e0d6      	b.n	8005934 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578c:	2b00      	cmp	r3, #0
 800578e:	dbe3      	blt.n	8005758 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	6992      	ldr	r2, [r2, #24]
 8005798:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80057aa:	fa01 f303 	lsl.w	r3, r1, r3
 80057ae:	43db      	mvns	r3, r3
 80057b0:	ea02 0103 	and.w	r1, r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	409a      	lsls	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	21ff      	movs	r1, #255	; 0xff
 80057d6:	fa01 f303 	lsl.w	r3, r1, r3
 80057da:	43db      	mvns	r3, r3
 80057dc:	ea02 0103 	and.w	r1, r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6a1a      	ldr	r2, [r3, #32]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	409a      	lsls	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d11d      	bne.n	8005838 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	221f      	movs	r2, #31
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	43db      	mvns	r3, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4013      	ands	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4313      	orrs	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f003 0310 	and.w	r3, r3, #16
 8005846:	2207      	movs	r2, #7
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	43db      	mvns	r3, r3
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4013      	ands	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d102      	bne.n	8005862 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800585c:	2300      	movs	r3, #0
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
 8005860:	e00f      	b.n	8005882 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d102      	bne.n	8005870 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800586a:	2301      	movs	r3, #1
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
 800586e:	e008      	b.n	8005882 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d102      	bne.n	800587e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005878:	2301      	movs	r3, #1
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
 800587c:	e001      	b.n	8005882 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800587e:	2300      	movs	r3, #0
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	4313      	orrs	r3, r2
 800588c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6819      	ldr	r1, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	43da      	mvns	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	400a      	ands	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	43db      	mvns	r3, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6819      	ldr	r1, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	22c0      	movs	r2, #192	; 0xc0
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	43da      	mvns	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	400a      	ands	r2, r1
 8005922:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005930:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005934:	4618      	mov	r0, r3
 8005936:	3728      	adds	r7, #40	; 0x28
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20008000 	.word	0x20008000

08005940 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7ff fe8b 	bl	800566a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	711a      	strb	r2, [r3, #4]
}
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff fe84 	bl	800567e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f043 0204 	orr.w	r2, r3, #4
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff fe7a 	bl	8005692 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	711a      	strb	r2, [r3, #4]
}
 80059a4:	bf00      	nop
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7ff ffce 	bl	80059ac <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2201      	movs	r2, #1
 8005a14:	711a      	strb	r2, [r3, #4]
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7ff ffc7 	bl	80059c0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005a32:	bf00      	nop
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f043 0204 	orr.w	r2, r3, #4
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f7ff ffbd 	bl	80059d4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	711a      	strb	r2, [r3, #4]
}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005a70:	f7fd fed2 	bl	8003818 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e316      	b.n	80060ae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a66      	ldr	r2, [pc, #408]	; (8005c20 <HAL_DMA_Init+0x1b8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d04a      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a65      	ldr	r2, [pc, #404]	; (8005c24 <HAL_DMA_Init+0x1bc>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d045      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a63      	ldr	r2, [pc, #396]	; (8005c28 <HAL_DMA_Init+0x1c0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d040      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a62      	ldr	r2, [pc, #392]	; (8005c2c <HAL_DMA_Init+0x1c4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d03b      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a60      	ldr	r2, [pc, #384]	; (8005c30 <HAL_DMA_Init+0x1c8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d036      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a5f      	ldr	r2, [pc, #380]	; (8005c34 <HAL_DMA_Init+0x1cc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d031      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a5d      	ldr	r2, [pc, #372]	; (8005c38 <HAL_DMA_Init+0x1d0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d02c      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a5c      	ldr	r2, [pc, #368]	; (8005c3c <HAL_DMA_Init+0x1d4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d027      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a5a      	ldr	r2, [pc, #360]	; (8005c40 <HAL_DMA_Init+0x1d8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d022      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a59      	ldr	r2, [pc, #356]	; (8005c44 <HAL_DMA_Init+0x1dc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d01d      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a57      	ldr	r2, [pc, #348]	; (8005c48 <HAL_DMA_Init+0x1e0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d018      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a56      	ldr	r2, [pc, #344]	; (8005c4c <HAL_DMA_Init+0x1e4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d013      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a54      	ldr	r2, [pc, #336]	; (8005c50 <HAL_DMA_Init+0x1e8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00e      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a53      	ldr	r2, [pc, #332]	; (8005c54 <HAL_DMA_Init+0x1ec>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d009      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a51      	ldr	r2, [pc, #324]	; (8005c58 <HAL_DMA_Init+0x1f0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d004      	beq.n	8005b20 <HAL_DMA_Init+0xb8>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a50      	ldr	r2, [pc, #320]	; (8005c5c <HAL_DMA_Init+0x1f4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d101      	bne.n	8005b24 <HAL_DMA_Init+0xbc>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <HAL_DMA_Init+0xbe>
 8005b24:	2300      	movs	r3, #0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 813b 	beq.w	8005da2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a37      	ldr	r2, [pc, #220]	; (8005c20 <HAL_DMA_Init+0x1b8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d04a      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a36      	ldr	r2, [pc, #216]	; (8005c24 <HAL_DMA_Init+0x1bc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d045      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a34      	ldr	r2, [pc, #208]	; (8005c28 <HAL_DMA_Init+0x1c0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d040      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a33      	ldr	r2, [pc, #204]	; (8005c2c <HAL_DMA_Init+0x1c4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d03b      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a31      	ldr	r2, [pc, #196]	; (8005c30 <HAL_DMA_Init+0x1c8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d036      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a30      	ldr	r2, [pc, #192]	; (8005c34 <HAL_DMA_Init+0x1cc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d031      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a2e      	ldr	r2, [pc, #184]	; (8005c38 <HAL_DMA_Init+0x1d0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d02c      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a2d      	ldr	r2, [pc, #180]	; (8005c3c <HAL_DMA_Init+0x1d4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d027      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a2b      	ldr	r2, [pc, #172]	; (8005c40 <HAL_DMA_Init+0x1d8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d022      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2a      	ldr	r2, [pc, #168]	; (8005c44 <HAL_DMA_Init+0x1dc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d01d      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a28      	ldr	r2, [pc, #160]	; (8005c48 <HAL_DMA_Init+0x1e0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d018      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a27      	ldr	r2, [pc, #156]	; (8005c4c <HAL_DMA_Init+0x1e4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d013      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a25      	ldr	r2, [pc, #148]	; (8005c50 <HAL_DMA_Init+0x1e8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00e      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a24      	ldr	r2, [pc, #144]	; (8005c54 <HAL_DMA_Init+0x1ec>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d009      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a22      	ldr	r2, [pc, #136]	; (8005c58 <HAL_DMA_Init+0x1f0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_DMA_Init+0x174>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a21      	ldr	r2, [pc, #132]	; (8005c5c <HAL_DMA_Init+0x1f4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d108      	bne.n	8005bee <HAL_DMA_Init+0x186>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0201 	bic.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	e007      	b.n	8005bfe <HAL_DMA_Init+0x196>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bfe:	e02f      	b.n	8005c60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c00:	f7fd fe0a 	bl	8003818 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	d928      	bls.n	8005c60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2220      	movs	r2, #32
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2203      	movs	r2, #3
 8005c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e246      	b.n	80060ae <HAL_DMA_Init+0x646>
 8005c20:	40020010 	.word	0x40020010
 8005c24:	40020028 	.word	0x40020028
 8005c28:	40020040 	.word	0x40020040
 8005c2c:	40020058 	.word	0x40020058
 8005c30:	40020070 	.word	0x40020070
 8005c34:	40020088 	.word	0x40020088
 8005c38:	400200a0 	.word	0x400200a0
 8005c3c:	400200b8 	.word	0x400200b8
 8005c40:	40020410 	.word	0x40020410
 8005c44:	40020428 	.word	0x40020428
 8005c48:	40020440 	.word	0x40020440
 8005c4c:	40020458 	.word	0x40020458
 8005c50:	40020470 	.word	0x40020470
 8005c54:	40020488 	.word	0x40020488
 8005c58:	400204a0 	.word	0x400204a0
 8005c5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1c8      	bne.n	8005c00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4b83      	ldr	r3, [pc, #524]	; (8005e88 <HAL_DMA_Init+0x420>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005c86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d107      	bne.n	8005cc4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005cc4:	4b71      	ldr	r3, [pc, #452]	; (8005e8c <HAL_DMA_Init+0x424>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4b71      	ldr	r3, [pc, #452]	; (8005e90 <HAL_DMA_Init+0x428>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cd0:	d328      	bcc.n	8005d24 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b28      	cmp	r3, #40	; 0x28
 8005cd8:	d903      	bls.n	8005ce2 <HAL_DMA_Init+0x27a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b2e      	cmp	r3, #46	; 0x2e
 8005ce0:	d917      	bls.n	8005d12 <HAL_DMA_Init+0x2aa>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ce8:	d903      	bls.n	8005cf2 <HAL_DMA_Init+0x28a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b42      	cmp	r3, #66	; 0x42
 8005cf0:	d90f      	bls.n	8005d12 <HAL_DMA_Init+0x2aa>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b46      	cmp	r3, #70	; 0x46
 8005cf8:	d903      	bls.n	8005d02 <HAL_DMA_Init+0x29a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b48      	cmp	r3, #72	; 0x48
 8005d00:	d907      	bls.n	8005d12 <HAL_DMA_Init+0x2aa>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b4e      	cmp	r3, #78	; 0x4e
 8005d08:	d905      	bls.n	8005d16 <HAL_DMA_Init+0x2ae>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b52      	cmp	r3, #82	; 0x52
 8005d10:	d801      	bhi.n	8005d16 <HAL_DMA_Init+0x2ae>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <HAL_DMA_Init+0x2b0>
 8005d16:	2300      	movs	r3, #0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d22:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f023 0307 	bic.w	r3, r3, #7
 8005d3a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d117      	bne.n	8005d7e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00e      	beq.n	8005d7e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f002 fb3f 	bl	80083e4 <DMA_CheckFifoParam>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2240      	movs	r2, #64	; 0x40
 8005d70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e197      	b.n	80060ae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f002 fa7a 	bl	8008280 <DMA_CalcBaseAndBitshift>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	223f      	movs	r2, #63	; 0x3f
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	609a      	str	r2, [r3, #8]
 8005da0:	e0cd      	b.n	8005f3e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a3b      	ldr	r2, [pc, #236]	; (8005e94 <HAL_DMA_Init+0x42c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d022      	beq.n	8005df2 <HAL_DMA_Init+0x38a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a39      	ldr	r2, [pc, #228]	; (8005e98 <HAL_DMA_Init+0x430>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d01d      	beq.n	8005df2 <HAL_DMA_Init+0x38a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a38      	ldr	r2, [pc, #224]	; (8005e9c <HAL_DMA_Init+0x434>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d018      	beq.n	8005df2 <HAL_DMA_Init+0x38a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a36      	ldr	r2, [pc, #216]	; (8005ea0 <HAL_DMA_Init+0x438>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <HAL_DMA_Init+0x38a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a35      	ldr	r2, [pc, #212]	; (8005ea4 <HAL_DMA_Init+0x43c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00e      	beq.n	8005df2 <HAL_DMA_Init+0x38a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a33      	ldr	r2, [pc, #204]	; (8005ea8 <HAL_DMA_Init+0x440>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d009      	beq.n	8005df2 <HAL_DMA_Init+0x38a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a32      	ldr	r2, [pc, #200]	; (8005eac <HAL_DMA_Init+0x444>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d004      	beq.n	8005df2 <HAL_DMA_Init+0x38a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a30      	ldr	r2, [pc, #192]	; (8005eb0 <HAL_DMA_Init+0x448>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d101      	bne.n	8005df6 <HAL_DMA_Init+0x38e>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <HAL_DMA_Init+0x390>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 8097 	beq.w	8005f2c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a24      	ldr	r2, [pc, #144]	; (8005e94 <HAL_DMA_Init+0x42c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d021      	beq.n	8005e4c <HAL_DMA_Init+0x3e4>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a22      	ldr	r2, [pc, #136]	; (8005e98 <HAL_DMA_Init+0x430>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01c      	beq.n	8005e4c <HAL_DMA_Init+0x3e4>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a21      	ldr	r2, [pc, #132]	; (8005e9c <HAL_DMA_Init+0x434>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d017      	beq.n	8005e4c <HAL_DMA_Init+0x3e4>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1f      	ldr	r2, [pc, #124]	; (8005ea0 <HAL_DMA_Init+0x438>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d012      	beq.n	8005e4c <HAL_DMA_Init+0x3e4>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ea4 <HAL_DMA_Init+0x43c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00d      	beq.n	8005e4c <HAL_DMA_Init+0x3e4>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1c      	ldr	r2, [pc, #112]	; (8005ea8 <HAL_DMA_Init+0x440>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d008      	beq.n	8005e4c <HAL_DMA_Init+0x3e4>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1b      	ldr	r2, [pc, #108]	; (8005eac <HAL_DMA_Init+0x444>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <HAL_DMA_Init+0x3e4>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a19      	ldr	r2, [pc, #100]	; (8005eb0 <HAL_DMA_Init+0x448>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <HAL_DMA_Init+0x44c>)
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b40      	cmp	r3, #64	; 0x40
 8005e74:	d020      	beq.n	8005eb8 <HAL_DMA_Init+0x450>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b80      	cmp	r3, #128	; 0x80
 8005e7c:	d102      	bne.n	8005e84 <HAL_DMA_Init+0x41c>
 8005e7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e82:	e01a      	b.n	8005eba <HAL_DMA_Init+0x452>
 8005e84:	2300      	movs	r3, #0
 8005e86:	e018      	b.n	8005eba <HAL_DMA_Init+0x452>
 8005e88:	fe10803f 	.word	0xfe10803f
 8005e8c:	5c001000 	.word	0x5c001000
 8005e90:	ffff0000 	.word	0xffff0000
 8005e94:	58025408 	.word	0x58025408
 8005e98:	5802541c 	.word	0x5802541c
 8005e9c:	58025430 	.word	0x58025430
 8005ea0:	58025444 	.word	0x58025444
 8005ea4:	58025458 	.word	0x58025458
 8005ea8:	5802546c 	.word	0x5802546c
 8005eac:	58025480 	.word	0x58025480
 8005eb0:	58025494 	.word	0x58025494
 8005eb4:	fffe000f 	.word	0xfffe000f
 8005eb8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	68d2      	ldr	r2, [r2, #12]
 8005ebe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005ec0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005ec8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ed0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005ee8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	4b6e      	ldr	r3, [pc, #440]	; (80060b8 <HAL_DMA_Init+0x650>)
 8005f00:	4413      	add	r3, r2
 8005f02:	4a6e      	ldr	r2, [pc, #440]	; (80060bc <HAL_DMA_Init+0x654>)
 8005f04:	fba2 2303 	umull	r2, r3, r2, r3
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	009a      	lsls	r2, r3, #2
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f002 f9b5 	bl	8008280 <DMA_CalcBaseAndBitshift>
 8005f16:	4603      	mov	r3, r0
 8005f18:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	2201      	movs	r2, #1
 8005f24:	409a      	lsls	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	e008      	b.n	8005f3e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2240      	movs	r2, #64	; 0x40
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2203      	movs	r2, #3
 8005f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e0b7      	b.n	80060ae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a5f      	ldr	r2, [pc, #380]	; (80060c0 <HAL_DMA_Init+0x658>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d072      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a5d      	ldr	r2, [pc, #372]	; (80060c4 <HAL_DMA_Init+0x65c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d06d      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a5c      	ldr	r2, [pc, #368]	; (80060c8 <HAL_DMA_Init+0x660>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d068      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a5a      	ldr	r2, [pc, #360]	; (80060cc <HAL_DMA_Init+0x664>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d063      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a59      	ldr	r2, [pc, #356]	; (80060d0 <HAL_DMA_Init+0x668>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d05e      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a57      	ldr	r2, [pc, #348]	; (80060d4 <HAL_DMA_Init+0x66c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d059      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a56      	ldr	r2, [pc, #344]	; (80060d8 <HAL_DMA_Init+0x670>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d054      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a54      	ldr	r2, [pc, #336]	; (80060dc <HAL_DMA_Init+0x674>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d04f      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a53      	ldr	r2, [pc, #332]	; (80060e0 <HAL_DMA_Init+0x678>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d04a      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a51      	ldr	r2, [pc, #324]	; (80060e4 <HAL_DMA_Init+0x67c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d045      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a50      	ldr	r2, [pc, #320]	; (80060e8 <HAL_DMA_Init+0x680>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d040      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a4e      	ldr	r2, [pc, #312]	; (80060ec <HAL_DMA_Init+0x684>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d03b      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a4d      	ldr	r2, [pc, #308]	; (80060f0 <HAL_DMA_Init+0x688>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d036      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a4b      	ldr	r2, [pc, #300]	; (80060f4 <HAL_DMA_Init+0x68c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d031      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a4a      	ldr	r2, [pc, #296]	; (80060f8 <HAL_DMA_Init+0x690>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d02c      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a48      	ldr	r2, [pc, #288]	; (80060fc <HAL_DMA_Init+0x694>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d027      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a47      	ldr	r2, [pc, #284]	; (8006100 <HAL_DMA_Init+0x698>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d022      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a45      	ldr	r2, [pc, #276]	; (8006104 <HAL_DMA_Init+0x69c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d01d      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a44      	ldr	r2, [pc, #272]	; (8006108 <HAL_DMA_Init+0x6a0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d018      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a42      	ldr	r2, [pc, #264]	; (800610c <HAL_DMA_Init+0x6a4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a41      	ldr	r2, [pc, #260]	; (8006110 <HAL_DMA_Init+0x6a8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00e      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a3f      	ldr	r2, [pc, #252]	; (8006114 <HAL_DMA_Init+0x6ac>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d009      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a3e      	ldr	r2, [pc, #248]	; (8006118 <HAL_DMA_Init+0x6b0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d004      	beq.n	800602e <HAL_DMA_Init+0x5c6>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a3c      	ldr	r2, [pc, #240]	; (800611c <HAL_DMA_Init+0x6b4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d101      	bne.n	8006032 <HAL_DMA_Init+0x5ca>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <HAL_DMA_Init+0x5cc>
 8006032:	2300      	movs	r3, #0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d032      	beq.n	800609e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f002 fa4f 	bl	80084dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	d102      	bne.n	800604c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006060:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d010      	beq.n	800608c <HAL_DMA_Init+0x624>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b08      	cmp	r3, #8
 8006070:	d80c      	bhi.n	800608c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f002 facc 	bl	8008610 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	e008      	b.n	800609e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	a7fdabf8 	.word	0xa7fdabf8
 80060bc:	cccccccd 	.word	0xcccccccd
 80060c0:	40020010 	.word	0x40020010
 80060c4:	40020028 	.word	0x40020028
 80060c8:	40020040 	.word	0x40020040
 80060cc:	40020058 	.word	0x40020058
 80060d0:	40020070 	.word	0x40020070
 80060d4:	40020088 	.word	0x40020088
 80060d8:	400200a0 	.word	0x400200a0
 80060dc:	400200b8 	.word	0x400200b8
 80060e0:	40020410 	.word	0x40020410
 80060e4:	40020428 	.word	0x40020428
 80060e8:	40020440 	.word	0x40020440
 80060ec:	40020458 	.word	0x40020458
 80060f0:	40020470 	.word	0x40020470
 80060f4:	40020488 	.word	0x40020488
 80060f8:	400204a0 	.word	0x400204a0
 80060fc:	400204b8 	.word	0x400204b8
 8006100:	58025408 	.word	0x58025408
 8006104:	5802541c 	.word	0x5802541c
 8006108:	58025430 	.word	0x58025430
 800610c:	58025444 	.word	0x58025444
 8006110:	58025458 	.word	0x58025458
 8006114:	5802546c 	.word	0x5802546c
 8006118:	58025480 	.word	0x58025480
 800611c:	58025494 	.word	0x58025494

08006120 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e226      	b.n	800658a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_DMA_Start_IT+0x2a>
 8006146:	2302      	movs	r3, #2
 8006148:	e21f      	b.n	800658a <HAL_DMA_Start_IT+0x46a>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b01      	cmp	r3, #1
 800615c:	f040 820a 	bne.w	8006574 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a68      	ldr	r2, [pc, #416]	; (8006314 <HAL_DMA_Start_IT+0x1f4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d04a      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a66      	ldr	r2, [pc, #408]	; (8006318 <HAL_DMA_Start_IT+0x1f8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d045      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a65      	ldr	r2, [pc, #404]	; (800631c <HAL_DMA_Start_IT+0x1fc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d040      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a63      	ldr	r2, [pc, #396]	; (8006320 <HAL_DMA_Start_IT+0x200>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d03b      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a62      	ldr	r2, [pc, #392]	; (8006324 <HAL_DMA_Start_IT+0x204>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d036      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a60      	ldr	r2, [pc, #384]	; (8006328 <HAL_DMA_Start_IT+0x208>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d031      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a5f      	ldr	r2, [pc, #380]	; (800632c <HAL_DMA_Start_IT+0x20c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d02c      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a5d      	ldr	r2, [pc, #372]	; (8006330 <HAL_DMA_Start_IT+0x210>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d027      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a5c      	ldr	r2, [pc, #368]	; (8006334 <HAL_DMA_Start_IT+0x214>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d022      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a5a      	ldr	r2, [pc, #360]	; (8006338 <HAL_DMA_Start_IT+0x218>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01d      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a59      	ldr	r2, [pc, #356]	; (800633c <HAL_DMA_Start_IT+0x21c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d018      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a57      	ldr	r2, [pc, #348]	; (8006340 <HAL_DMA_Start_IT+0x220>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d013      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a56      	ldr	r2, [pc, #344]	; (8006344 <HAL_DMA_Start_IT+0x224>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00e      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a54      	ldr	r2, [pc, #336]	; (8006348 <HAL_DMA_Start_IT+0x228>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d009      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a53      	ldr	r2, [pc, #332]	; (800634c <HAL_DMA_Start_IT+0x22c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d004      	beq.n	800620e <HAL_DMA_Start_IT+0xee>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a51      	ldr	r2, [pc, #324]	; (8006350 <HAL_DMA_Start_IT+0x230>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d108      	bne.n	8006220 <HAL_DMA_Start_IT+0x100>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e007      	b.n	8006230 <HAL_DMA_Start_IT+0x110>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f001 fe76 	bl	8007f28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a34      	ldr	r2, [pc, #208]	; (8006314 <HAL_DMA_Start_IT+0x1f4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d04a      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a33      	ldr	r2, [pc, #204]	; (8006318 <HAL_DMA_Start_IT+0x1f8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d045      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a31      	ldr	r2, [pc, #196]	; (800631c <HAL_DMA_Start_IT+0x1fc>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d040      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a30      	ldr	r2, [pc, #192]	; (8006320 <HAL_DMA_Start_IT+0x200>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d03b      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a2e      	ldr	r2, [pc, #184]	; (8006324 <HAL_DMA_Start_IT+0x204>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d036      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a2d      	ldr	r2, [pc, #180]	; (8006328 <HAL_DMA_Start_IT+0x208>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d031      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a2b      	ldr	r2, [pc, #172]	; (800632c <HAL_DMA_Start_IT+0x20c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d02c      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <HAL_DMA_Start_IT+0x210>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d027      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a28      	ldr	r2, [pc, #160]	; (8006334 <HAL_DMA_Start_IT+0x214>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d022      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a27      	ldr	r2, [pc, #156]	; (8006338 <HAL_DMA_Start_IT+0x218>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d01d      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a25      	ldr	r2, [pc, #148]	; (800633c <HAL_DMA_Start_IT+0x21c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d018      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a24      	ldr	r2, [pc, #144]	; (8006340 <HAL_DMA_Start_IT+0x220>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d013      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a22      	ldr	r2, [pc, #136]	; (8006344 <HAL_DMA_Start_IT+0x224>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00e      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a21      	ldr	r2, [pc, #132]	; (8006348 <HAL_DMA_Start_IT+0x228>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d009      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1f      	ldr	r2, [pc, #124]	; (800634c <HAL_DMA_Start_IT+0x22c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_DMA_Start_IT+0x1bc>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1e      	ldr	r2, [pc, #120]	; (8006350 <HAL_DMA_Start_IT+0x230>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d101      	bne.n	80062e0 <HAL_DMA_Start_IT+0x1c0>
 80062dc:	2301      	movs	r3, #1
 80062de:	e000      	b.n	80062e2 <HAL_DMA_Start_IT+0x1c2>
 80062e0:	2300      	movs	r3, #0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d036      	beq.n	8006354 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f023 021e 	bic.w	r2, r3, #30
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0216 	orr.w	r2, r2, #22
 80062f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d03e      	beq.n	8006380 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0208 	orr.w	r2, r2, #8
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e035      	b.n	8006380 <HAL_DMA_Start_IT+0x260>
 8006314:	40020010 	.word	0x40020010
 8006318:	40020028 	.word	0x40020028
 800631c:	40020040 	.word	0x40020040
 8006320:	40020058 	.word	0x40020058
 8006324:	40020070 	.word	0x40020070
 8006328:	40020088 	.word	0x40020088
 800632c:	400200a0 	.word	0x400200a0
 8006330:	400200b8 	.word	0x400200b8
 8006334:	40020410 	.word	0x40020410
 8006338:	40020428 	.word	0x40020428
 800633c:	40020440 	.word	0x40020440
 8006340:	40020458 	.word	0x40020458
 8006344:	40020470 	.word	0x40020470
 8006348:	40020488 	.word	0x40020488
 800634c:	400204a0 	.word	0x400204a0
 8006350:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f023 020e 	bic.w	r2, r3, #14
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 020a 	orr.w	r2, r2, #10
 8006366:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0204 	orr.w	r2, r2, #4
 800637e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a83      	ldr	r2, [pc, #524]	; (8006594 <HAL_DMA_Start_IT+0x474>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d072      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a82      	ldr	r2, [pc, #520]	; (8006598 <HAL_DMA_Start_IT+0x478>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d06d      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a80      	ldr	r2, [pc, #512]	; (800659c <HAL_DMA_Start_IT+0x47c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d068      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a7f      	ldr	r2, [pc, #508]	; (80065a0 <HAL_DMA_Start_IT+0x480>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d063      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a7d      	ldr	r2, [pc, #500]	; (80065a4 <HAL_DMA_Start_IT+0x484>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d05e      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a7c      	ldr	r2, [pc, #496]	; (80065a8 <HAL_DMA_Start_IT+0x488>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d059      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a7a      	ldr	r2, [pc, #488]	; (80065ac <HAL_DMA_Start_IT+0x48c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d054      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a79      	ldr	r2, [pc, #484]	; (80065b0 <HAL_DMA_Start_IT+0x490>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d04f      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a77      	ldr	r2, [pc, #476]	; (80065b4 <HAL_DMA_Start_IT+0x494>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d04a      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a76      	ldr	r2, [pc, #472]	; (80065b8 <HAL_DMA_Start_IT+0x498>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d045      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a74      	ldr	r2, [pc, #464]	; (80065bc <HAL_DMA_Start_IT+0x49c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d040      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a73      	ldr	r2, [pc, #460]	; (80065c0 <HAL_DMA_Start_IT+0x4a0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d03b      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a71      	ldr	r2, [pc, #452]	; (80065c4 <HAL_DMA_Start_IT+0x4a4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d036      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a70      	ldr	r2, [pc, #448]	; (80065c8 <HAL_DMA_Start_IT+0x4a8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d031      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a6e      	ldr	r2, [pc, #440]	; (80065cc <HAL_DMA_Start_IT+0x4ac>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d02c      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a6d      	ldr	r2, [pc, #436]	; (80065d0 <HAL_DMA_Start_IT+0x4b0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d027      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a6b      	ldr	r2, [pc, #428]	; (80065d4 <HAL_DMA_Start_IT+0x4b4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d022      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a6a      	ldr	r2, [pc, #424]	; (80065d8 <HAL_DMA_Start_IT+0x4b8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d01d      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a68      	ldr	r2, [pc, #416]	; (80065dc <HAL_DMA_Start_IT+0x4bc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d018      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a67      	ldr	r2, [pc, #412]	; (80065e0 <HAL_DMA_Start_IT+0x4c0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d013      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a65      	ldr	r2, [pc, #404]	; (80065e4 <HAL_DMA_Start_IT+0x4c4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00e      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a64      	ldr	r2, [pc, #400]	; (80065e8 <HAL_DMA_Start_IT+0x4c8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d009      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a62      	ldr	r2, [pc, #392]	; (80065ec <HAL_DMA_Start_IT+0x4cc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_DMA_Start_IT+0x350>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a61      	ldr	r2, [pc, #388]	; (80065f0 <HAL_DMA_Start_IT+0x4d0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d101      	bne.n	8006474 <HAL_DMA_Start_IT+0x354>
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <HAL_DMA_Start_IT+0x356>
 8006474:	2300      	movs	r3, #0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01a      	beq.n	80064b0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006496:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a37      	ldr	r2, [pc, #220]	; (8006594 <HAL_DMA_Start_IT+0x474>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d04a      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a36      	ldr	r2, [pc, #216]	; (8006598 <HAL_DMA_Start_IT+0x478>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d045      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a34      	ldr	r2, [pc, #208]	; (800659c <HAL_DMA_Start_IT+0x47c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d040      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a33      	ldr	r2, [pc, #204]	; (80065a0 <HAL_DMA_Start_IT+0x480>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d03b      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a31      	ldr	r2, [pc, #196]	; (80065a4 <HAL_DMA_Start_IT+0x484>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d036      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a30      	ldr	r2, [pc, #192]	; (80065a8 <HAL_DMA_Start_IT+0x488>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d031      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2e      	ldr	r2, [pc, #184]	; (80065ac <HAL_DMA_Start_IT+0x48c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d02c      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2d      	ldr	r2, [pc, #180]	; (80065b0 <HAL_DMA_Start_IT+0x490>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d027      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a2b      	ldr	r2, [pc, #172]	; (80065b4 <HAL_DMA_Start_IT+0x494>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d022      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <HAL_DMA_Start_IT+0x498>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d01d      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a28      	ldr	r2, [pc, #160]	; (80065bc <HAL_DMA_Start_IT+0x49c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d018      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <HAL_DMA_Start_IT+0x4a0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d013      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a25      	ldr	r2, [pc, #148]	; (80065c4 <HAL_DMA_Start_IT+0x4a4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00e      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a24      	ldr	r2, [pc, #144]	; (80065c8 <HAL_DMA_Start_IT+0x4a8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d009      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a22      	ldr	r2, [pc, #136]	; (80065cc <HAL_DMA_Start_IT+0x4ac>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d004      	beq.n	8006550 <HAL_DMA_Start_IT+0x430>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a21      	ldr	r2, [pc, #132]	; (80065d0 <HAL_DMA_Start_IT+0x4b0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d108      	bne.n	8006562 <HAL_DMA_Start_IT+0x442>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e012      	b.n	8006588 <HAL_DMA_Start_IT+0x468>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0201 	orr.w	r2, r2, #1
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	e009      	b.n	8006588 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800657a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006588:	7dfb      	ldrb	r3, [r7, #23]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40020010 	.word	0x40020010
 8006598:	40020028 	.word	0x40020028
 800659c:	40020040 	.word	0x40020040
 80065a0:	40020058 	.word	0x40020058
 80065a4:	40020070 	.word	0x40020070
 80065a8:	40020088 	.word	0x40020088
 80065ac:	400200a0 	.word	0x400200a0
 80065b0:	400200b8 	.word	0x400200b8
 80065b4:	40020410 	.word	0x40020410
 80065b8:	40020428 	.word	0x40020428
 80065bc:	40020440 	.word	0x40020440
 80065c0:	40020458 	.word	0x40020458
 80065c4:	40020470 	.word	0x40020470
 80065c8:	40020488 	.word	0x40020488
 80065cc:	400204a0 	.word	0x400204a0
 80065d0:	400204b8 	.word	0x400204b8
 80065d4:	58025408 	.word	0x58025408
 80065d8:	5802541c 	.word	0x5802541c
 80065dc:	58025430 	.word	0x58025430
 80065e0:	58025444 	.word	0x58025444
 80065e4:	58025458 	.word	0x58025458
 80065e8:	5802546c 	.word	0x5802546c
 80065ec:	58025480 	.word	0x58025480
 80065f0:	58025494 	.word	0x58025494

080065f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80065fc:	f7fd f90c 	bl	8003818 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e2dc      	b.n	8006bc6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d008      	beq.n	800662a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2280      	movs	r2, #128	; 0x80
 800661c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e2cd      	b.n	8006bc6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a76      	ldr	r2, [pc, #472]	; (8006808 <HAL_DMA_Abort+0x214>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d04a      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a74      	ldr	r2, [pc, #464]	; (800680c <HAL_DMA_Abort+0x218>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d045      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a73      	ldr	r2, [pc, #460]	; (8006810 <HAL_DMA_Abort+0x21c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d040      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a71      	ldr	r2, [pc, #452]	; (8006814 <HAL_DMA_Abort+0x220>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d03b      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a70      	ldr	r2, [pc, #448]	; (8006818 <HAL_DMA_Abort+0x224>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d036      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a6e      	ldr	r2, [pc, #440]	; (800681c <HAL_DMA_Abort+0x228>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d031      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a6d      	ldr	r2, [pc, #436]	; (8006820 <HAL_DMA_Abort+0x22c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d02c      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a6b      	ldr	r2, [pc, #428]	; (8006824 <HAL_DMA_Abort+0x230>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d027      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a6a      	ldr	r2, [pc, #424]	; (8006828 <HAL_DMA_Abort+0x234>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d022      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a68      	ldr	r2, [pc, #416]	; (800682c <HAL_DMA_Abort+0x238>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d01d      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a67      	ldr	r2, [pc, #412]	; (8006830 <HAL_DMA_Abort+0x23c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d018      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a65      	ldr	r2, [pc, #404]	; (8006834 <HAL_DMA_Abort+0x240>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d013      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a64      	ldr	r2, [pc, #400]	; (8006838 <HAL_DMA_Abort+0x244>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00e      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a62      	ldr	r2, [pc, #392]	; (800683c <HAL_DMA_Abort+0x248>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a61      	ldr	r2, [pc, #388]	; (8006840 <HAL_DMA_Abort+0x24c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_DMA_Abort+0xd6>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a5f      	ldr	r2, [pc, #380]	; (8006844 <HAL_DMA_Abort+0x250>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d101      	bne.n	80066ce <HAL_DMA_Abort+0xda>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <HAL_DMA_Abort+0xdc>
 80066ce:	2300      	movs	r3, #0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d013      	beq.n	80066fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 021e 	bic.w	r2, r2, #30
 80066e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695a      	ldr	r2, [r3, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	e00a      	b.n	8006712 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 020e 	bic.w	r2, r2, #14
 800670a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a3c      	ldr	r2, [pc, #240]	; (8006808 <HAL_DMA_Abort+0x214>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d072      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a3a      	ldr	r2, [pc, #232]	; (800680c <HAL_DMA_Abort+0x218>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d06d      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a39      	ldr	r2, [pc, #228]	; (8006810 <HAL_DMA_Abort+0x21c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d068      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a37      	ldr	r2, [pc, #220]	; (8006814 <HAL_DMA_Abort+0x220>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d063      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a36      	ldr	r2, [pc, #216]	; (8006818 <HAL_DMA_Abort+0x224>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d05e      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a34      	ldr	r2, [pc, #208]	; (800681c <HAL_DMA_Abort+0x228>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d059      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a33      	ldr	r2, [pc, #204]	; (8006820 <HAL_DMA_Abort+0x22c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d054      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a31      	ldr	r2, [pc, #196]	; (8006824 <HAL_DMA_Abort+0x230>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d04f      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a30      	ldr	r2, [pc, #192]	; (8006828 <HAL_DMA_Abort+0x234>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d04a      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a2e      	ldr	r2, [pc, #184]	; (800682c <HAL_DMA_Abort+0x238>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d045      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a2d      	ldr	r2, [pc, #180]	; (8006830 <HAL_DMA_Abort+0x23c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d040      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a2b      	ldr	r2, [pc, #172]	; (8006834 <HAL_DMA_Abort+0x240>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d03b      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2a      	ldr	r2, [pc, #168]	; (8006838 <HAL_DMA_Abort+0x244>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d036      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a28      	ldr	r2, [pc, #160]	; (800683c <HAL_DMA_Abort+0x248>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d031      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a27      	ldr	r2, [pc, #156]	; (8006840 <HAL_DMA_Abort+0x24c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d02c      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a25      	ldr	r2, [pc, #148]	; (8006844 <HAL_DMA_Abort+0x250>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d027      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a24      	ldr	r2, [pc, #144]	; (8006848 <HAL_DMA_Abort+0x254>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d022      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a22      	ldr	r2, [pc, #136]	; (800684c <HAL_DMA_Abort+0x258>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d01d      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a21      	ldr	r2, [pc, #132]	; (8006850 <HAL_DMA_Abort+0x25c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d018      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a1f      	ldr	r2, [pc, #124]	; (8006854 <HAL_DMA_Abort+0x260>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1e      	ldr	r2, [pc, #120]	; (8006858 <HAL_DMA_Abort+0x264>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00e      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1c      	ldr	r2, [pc, #112]	; (800685c <HAL_DMA_Abort+0x268>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d009      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a1b      	ldr	r2, [pc, #108]	; (8006860 <HAL_DMA_Abort+0x26c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d004      	beq.n	8006802 <HAL_DMA_Abort+0x20e>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a19      	ldr	r2, [pc, #100]	; (8006864 <HAL_DMA_Abort+0x270>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d132      	bne.n	8006868 <HAL_DMA_Abort+0x274>
 8006802:	2301      	movs	r3, #1
 8006804:	e031      	b.n	800686a <HAL_DMA_Abort+0x276>
 8006806:	bf00      	nop
 8006808:	40020010 	.word	0x40020010
 800680c:	40020028 	.word	0x40020028
 8006810:	40020040 	.word	0x40020040
 8006814:	40020058 	.word	0x40020058
 8006818:	40020070 	.word	0x40020070
 800681c:	40020088 	.word	0x40020088
 8006820:	400200a0 	.word	0x400200a0
 8006824:	400200b8 	.word	0x400200b8
 8006828:	40020410 	.word	0x40020410
 800682c:	40020428 	.word	0x40020428
 8006830:	40020440 	.word	0x40020440
 8006834:	40020458 	.word	0x40020458
 8006838:	40020470 	.word	0x40020470
 800683c:	40020488 	.word	0x40020488
 8006840:	400204a0 	.word	0x400204a0
 8006844:	400204b8 	.word	0x400204b8
 8006848:	58025408 	.word	0x58025408
 800684c:	5802541c 	.word	0x5802541c
 8006850:	58025430 	.word	0x58025430
 8006854:	58025444 	.word	0x58025444
 8006858:	58025458 	.word	0x58025458
 800685c:	5802546c 	.word	0x5802546c
 8006860:	58025480 	.word	0x58025480
 8006864:	58025494 	.word	0x58025494
 8006868:	2300      	movs	r3, #0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800687c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a6d      	ldr	r2, [pc, #436]	; (8006a38 <HAL_DMA_Abort+0x444>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d04a      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a6b      	ldr	r2, [pc, #428]	; (8006a3c <HAL_DMA_Abort+0x448>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d045      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a6a      	ldr	r2, [pc, #424]	; (8006a40 <HAL_DMA_Abort+0x44c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d040      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a68      	ldr	r2, [pc, #416]	; (8006a44 <HAL_DMA_Abort+0x450>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d03b      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a67      	ldr	r2, [pc, #412]	; (8006a48 <HAL_DMA_Abort+0x454>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d036      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a65      	ldr	r2, [pc, #404]	; (8006a4c <HAL_DMA_Abort+0x458>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d031      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a64      	ldr	r2, [pc, #400]	; (8006a50 <HAL_DMA_Abort+0x45c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d02c      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a62      	ldr	r2, [pc, #392]	; (8006a54 <HAL_DMA_Abort+0x460>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d027      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a61      	ldr	r2, [pc, #388]	; (8006a58 <HAL_DMA_Abort+0x464>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d022      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a5f      	ldr	r2, [pc, #380]	; (8006a5c <HAL_DMA_Abort+0x468>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d01d      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a5e      	ldr	r2, [pc, #376]	; (8006a60 <HAL_DMA_Abort+0x46c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d018      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a5c      	ldr	r2, [pc, #368]	; (8006a64 <HAL_DMA_Abort+0x470>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d013      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a5b      	ldr	r2, [pc, #364]	; (8006a68 <HAL_DMA_Abort+0x474>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00e      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a59      	ldr	r2, [pc, #356]	; (8006a6c <HAL_DMA_Abort+0x478>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d009      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a58      	ldr	r2, [pc, #352]	; (8006a70 <HAL_DMA_Abort+0x47c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d004      	beq.n	800691e <HAL_DMA_Abort+0x32a>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a56      	ldr	r2, [pc, #344]	; (8006a74 <HAL_DMA_Abort+0x480>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d108      	bne.n	8006930 <HAL_DMA_Abort+0x33c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0201 	bic.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	e007      	b.n	8006940 <HAL_DMA_Abort+0x34c>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0201 	bic.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006940:	e013      	b.n	800696a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006942:	f7fc ff69 	bl	8003818 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b05      	cmp	r3, #5
 800694e:	d90c      	bls.n	800696a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2203      	movs	r2, #3
 800695a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e12d      	b.n	8006bc6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e5      	bne.n	8006942 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a2f      	ldr	r2, [pc, #188]	; (8006a38 <HAL_DMA_Abort+0x444>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d04a      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a2d      	ldr	r2, [pc, #180]	; (8006a3c <HAL_DMA_Abort+0x448>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d045      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a2c      	ldr	r2, [pc, #176]	; (8006a40 <HAL_DMA_Abort+0x44c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d040      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a2a      	ldr	r2, [pc, #168]	; (8006a44 <HAL_DMA_Abort+0x450>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d03b      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a29      	ldr	r2, [pc, #164]	; (8006a48 <HAL_DMA_Abort+0x454>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d036      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a27      	ldr	r2, [pc, #156]	; (8006a4c <HAL_DMA_Abort+0x458>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d031      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a26      	ldr	r2, [pc, #152]	; (8006a50 <HAL_DMA_Abort+0x45c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d02c      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a24      	ldr	r2, [pc, #144]	; (8006a54 <HAL_DMA_Abort+0x460>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d027      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a23      	ldr	r2, [pc, #140]	; (8006a58 <HAL_DMA_Abort+0x464>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d022      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a21      	ldr	r2, [pc, #132]	; (8006a5c <HAL_DMA_Abort+0x468>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d01d      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a20      	ldr	r2, [pc, #128]	; (8006a60 <HAL_DMA_Abort+0x46c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d018      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1e      	ldr	r2, [pc, #120]	; (8006a64 <HAL_DMA_Abort+0x470>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d013      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1d      	ldr	r2, [pc, #116]	; (8006a68 <HAL_DMA_Abort+0x474>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00e      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1b      	ldr	r2, [pc, #108]	; (8006a6c <HAL_DMA_Abort+0x478>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d009      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a1a      	ldr	r2, [pc, #104]	; (8006a70 <HAL_DMA_Abort+0x47c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d004      	beq.n	8006a16 <HAL_DMA_Abort+0x422>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a18      	ldr	r2, [pc, #96]	; (8006a74 <HAL_DMA_Abort+0x480>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d101      	bne.n	8006a1a <HAL_DMA_Abort+0x426>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <HAL_DMA_Abort+0x428>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d02b      	beq.n	8006a78 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a24:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	223f      	movs	r2, #63	; 0x3f
 8006a30:	409a      	lsls	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	609a      	str	r2, [r3, #8]
 8006a36:	e02a      	b.n	8006a8e <HAL_DMA_Abort+0x49a>
 8006a38:	40020010 	.word	0x40020010
 8006a3c:	40020028 	.word	0x40020028
 8006a40:	40020040 	.word	0x40020040
 8006a44:	40020058 	.word	0x40020058
 8006a48:	40020070 	.word	0x40020070
 8006a4c:	40020088 	.word	0x40020088
 8006a50:	400200a0 	.word	0x400200a0
 8006a54:	400200b8 	.word	0x400200b8
 8006a58:	40020410 	.word	0x40020410
 8006a5c:	40020428 	.word	0x40020428
 8006a60:	40020440 	.word	0x40020440
 8006a64:	40020458 	.word	0x40020458
 8006a68:	40020470 	.word	0x40020470
 8006a6c:	40020488 	.word	0x40020488
 8006a70:	400204a0 	.word	0x400204a0
 8006a74:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a82:	f003 031f 	and.w	r3, r3, #31
 8006a86:	2201      	movs	r2, #1
 8006a88:	409a      	lsls	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a4f      	ldr	r2, [pc, #316]	; (8006bd0 <HAL_DMA_Abort+0x5dc>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d072      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a4d      	ldr	r2, [pc, #308]	; (8006bd4 <HAL_DMA_Abort+0x5e0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d06d      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a4c      	ldr	r2, [pc, #304]	; (8006bd8 <HAL_DMA_Abort+0x5e4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d068      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a4a      	ldr	r2, [pc, #296]	; (8006bdc <HAL_DMA_Abort+0x5e8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d063      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a49      	ldr	r2, [pc, #292]	; (8006be0 <HAL_DMA_Abort+0x5ec>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d05e      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a47      	ldr	r2, [pc, #284]	; (8006be4 <HAL_DMA_Abort+0x5f0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d059      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a46      	ldr	r2, [pc, #280]	; (8006be8 <HAL_DMA_Abort+0x5f4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d054      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a44      	ldr	r2, [pc, #272]	; (8006bec <HAL_DMA_Abort+0x5f8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d04f      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a43      	ldr	r2, [pc, #268]	; (8006bf0 <HAL_DMA_Abort+0x5fc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d04a      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a41      	ldr	r2, [pc, #260]	; (8006bf4 <HAL_DMA_Abort+0x600>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d045      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a40      	ldr	r2, [pc, #256]	; (8006bf8 <HAL_DMA_Abort+0x604>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d040      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a3e      	ldr	r2, [pc, #248]	; (8006bfc <HAL_DMA_Abort+0x608>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d03b      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a3d      	ldr	r2, [pc, #244]	; (8006c00 <HAL_DMA_Abort+0x60c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d036      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a3b      	ldr	r2, [pc, #236]	; (8006c04 <HAL_DMA_Abort+0x610>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d031      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a3a      	ldr	r2, [pc, #232]	; (8006c08 <HAL_DMA_Abort+0x614>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d02c      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a38      	ldr	r2, [pc, #224]	; (8006c0c <HAL_DMA_Abort+0x618>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d027      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a37      	ldr	r2, [pc, #220]	; (8006c10 <HAL_DMA_Abort+0x61c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d022      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a35      	ldr	r2, [pc, #212]	; (8006c14 <HAL_DMA_Abort+0x620>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d01d      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a34      	ldr	r2, [pc, #208]	; (8006c18 <HAL_DMA_Abort+0x624>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d018      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a32      	ldr	r2, [pc, #200]	; (8006c1c <HAL_DMA_Abort+0x628>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a31      	ldr	r2, [pc, #196]	; (8006c20 <HAL_DMA_Abort+0x62c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00e      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a2f      	ldr	r2, [pc, #188]	; (8006c24 <HAL_DMA_Abort+0x630>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d009      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a2e      	ldr	r2, [pc, #184]	; (8006c28 <HAL_DMA_Abort+0x634>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d004      	beq.n	8006b7e <HAL_DMA_Abort+0x58a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a2c      	ldr	r2, [pc, #176]	; (8006c2c <HAL_DMA_Abort+0x638>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d101      	bne.n	8006b82 <HAL_DMA_Abort+0x58e>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <HAL_DMA_Abort+0x590>
 8006b82:	2300      	movs	r3, #0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d015      	beq.n	8006bb4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b90:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00c      	beq.n	8006bb4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ba8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006bb2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40020010 	.word	0x40020010
 8006bd4:	40020028 	.word	0x40020028
 8006bd8:	40020040 	.word	0x40020040
 8006bdc:	40020058 	.word	0x40020058
 8006be0:	40020070 	.word	0x40020070
 8006be4:	40020088 	.word	0x40020088
 8006be8:	400200a0 	.word	0x400200a0
 8006bec:	400200b8 	.word	0x400200b8
 8006bf0:	40020410 	.word	0x40020410
 8006bf4:	40020428 	.word	0x40020428
 8006bf8:	40020440 	.word	0x40020440
 8006bfc:	40020458 	.word	0x40020458
 8006c00:	40020470 	.word	0x40020470
 8006c04:	40020488 	.word	0x40020488
 8006c08:	400204a0 	.word	0x400204a0
 8006c0c:	400204b8 	.word	0x400204b8
 8006c10:	58025408 	.word	0x58025408
 8006c14:	5802541c 	.word	0x5802541c
 8006c18:	58025430 	.word	0x58025430
 8006c1c:	58025444 	.word	0x58025444
 8006c20:	58025458 	.word	0x58025458
 8006c24:	5802546c 	.word	0x5802546c
 8006c28:	58025480 	.word	0x58025480
 8006c2c:	58025494 	.word	0x58025494

08006c30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e237      	b.n	80070b2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d004      	beq.n	8006c58 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2280      	movs	r2, #128	; 0x80
 8006c52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e22c      	b.n	80070b2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a5c      	ldr	r2, [pc, #368]	; (8006dd0 <HAL_DMA_Abort_IT+0x1a0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d04a      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a5b      	ldr	r2, [pc, #364]	; (8006dd4 <HAL_DMA_Abort_IT+0x1a4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d045      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a59      	ldr	r2, [pc, #356]	; (8006dd8 <HAL_DMA_Abort_IT+0x1a8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d040      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a58      	ldr	r2, [pc, #352]	; (8006ddc <HAL_DMA_Abort_IT+0x1ac>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d03b      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a56      	ldr	r2, [pc, #344]	; (8006de0 <HAL_DMA_Abort_IT+0x1b0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d036      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a55      	ldr	r2, [pc, #340]	; (8006de4 <HAL_DMA_Abort_IT+0x1b4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d031      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a53      	ldr	r2, [pc, #332]	; (8006de8 <HAL_DMA_Abort_IT+0x1b8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d02c      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a52      	ldr	r2, [pc, #328]	; (8006dec <HAL_DMA_Abort_IT+0x1bc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d027      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a50      	ldr	r2, [pc, #320]	; (8006df0 <HAL_DMA_Abort_IT+0x1c0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d022      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a4f      	ldr	r2, [pc, #316]	; (8006df4 <HAL_DMA_Abort_IT+0x1c4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d01d      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a4d      	ldr	r2, [pc, #308]	; (8006df8 <HAL_DMA_Abort_IT+0x1c8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d018      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a4c      	ldr	r2, [pc, #304]	; (8006dfc <HAL_DMA_Abort_IT+0x1cc>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d013      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a4a      	ldr	r2, [pc, #296]	; (8006e00 <HAL_DMA_Abort_IT+0x1d0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d00e      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a49      	ldr	r2, [pc, #292]	; (8006e04 <HAL_DMA_Abort_IT+0x1d4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d009      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a47      	ldr	r2, [pc, #284]	; (8006e08 <HAL_DMA_Abort_IT+0x1d8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d004      	beq.n	8006cf8 <HAL_DMA_Abort_IT+0xc8>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a46      	ldr	r2, [pc, #280]	; (8006e0c <HAL_DMA_Abort_IT+0x1dc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d101      	bne.n	8006cfc <HAL_DMA_Abort_IT+0xcc>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <HAL_DMA_Abort_IT+0xce>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 8086 	beq.w	8006e10 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2204      	movs	r2, #4
 8006d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2f      	ldr	r2, [pc, #188]	; (8006dd0 <HAL_DMA_Abort_IT+0x1a0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d04a      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2e      	ldr	r2, [pc, #184]	; (8006dd4 <HAL_DMA_Abort_IT+0x1a4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d045      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2c      	ldr	r2, [pc, #176]	; (8006dd8 <HAL_DMA_Abort_IT+0x1a8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d040      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2b      	ldr	r2, [pc, #172]	; (8006ddc <HAL_DMA_Abort_IT+0x1ac>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d03b      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a29      	ldr	r2, [pc, #164]	; (8006de0 <HAL_DMA_Abort_IT+0x1b0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d036      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a28      	ldr	r2, [pc, #160]	; (8006de4 <HAL_DMA_Abort_IT+0x1b4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d031      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a26      	ldr	r2, [pc, #152]	; (8006de8 <HAL_DMA_Abort_IT+0x1b8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d02c      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a25      	ldr	r2, [pc, #148]	; (8006dec <HAL_DMA_Abort_IT+0x1bc>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d027      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a23      	ldr	r2, [pc, #140]	; (8006df0 <HAL_DMA_Abort_IT+0x1c0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d022      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a22      	ldr	r2, [pc, #136]	; (8006df4 <HAL_DMA_Abort_IT+0x1c4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d01d      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <HAL_DMA_Abort_IT+0x1c8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d018      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1f      	ldr	r2, [pc, #124]	; (8006dfc <HAL_DMA_Abort_IT+0x1cc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d013      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a1d      	ldr	r2, [pc, #116]	; (8006e00 <HAL_DMA_Abort_IT+0x1d0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00e      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1c      	ldr	r2, [pc, #112]	; (8006e04 <HAL_DMA_Abort_IT+0x1d4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d009      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1a      	ldr	r2, [pc, #104]	; (8006e08 <HAL_DMA_Abort_IT+0x1d8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <HAL_DMA_Abort_IT+0x17c>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a19      	ldr	r2, [pc, #100]	; (8006e0c <HAL_DMA_Abort_IT+0x1dc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d108      	bne.n	8006dbe <HAL_DMA_Abort_IT+0x18e>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0201 	bic.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e178      	b.n	80070b0 <HAL_DMA_Abort_IT+0x480>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0201 	bic.w	r2, r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e16f      	b.n	80070b0 <HAL_DMA_Abort_IT+0x480>
 8006dd0:	40020010 	.word	0x40020010
 8006dd4:	40020028 	.word	0x40020028
 8006dd8:	40020040 	.word	0x40020040
 8006ddc:	40020058 	.word	0x40020058
 8006de0:	40020070 	.word	0x40020070
 8006de4:	40020088 	.word	0x40020088
 8006de8:	400200a0 	.word	0x400200a0
 8006dec:	400200b8 	.word	0x400200b8
 8006df0:	40020410 	.word	0x40020410
 8006df4:	40020428 	.word	0x40020428
 8006df8:	40020440 	.word	0x40020440
 8006dfc:	40020458 	.word	0x40020458
 8006e00:	40020470 	.word	0x40020470
 8006e04:	40020488 	.word	0x40020488
 8006e08:	400204a0 	.word	0x400204a0
 8006e0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 020e 	bic.w	r2, r2, #14
 8006e1e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a6c      	ldr	r2, [pc, #432]	; (8006fd8 <HAL_DMA_Abort_IT+0x3a8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d04a      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a6b      	ldr	r2, [pc, #428]	; (8006fdc <HAL_DMA_Abort_IT+0x3ac>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d045      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a69      	ldr	r2, [pc, #420]	; (8006fe0 <HAL_DMA_Abort_IT+0x3b0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d040      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a68      	ldr	r2, [pc, #416]	; (8006fe4 <HAL_DMA_Abort_IT+0x3b4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d03b      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a66      	ldr	r2, [pc, #408]	; (8006fe8 <HAL_DMA_Abort_IT+0x3b8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d036      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a65      	ldr	r2, [pc, #404]	; (8006fec <HAL_DMA_Abort_IT+0x3bc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d031      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a63      	ldr	r2, [pc, #396]	; (8006ff0 <HAL_DMA_Abort_IT+0x3c0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d02c      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a62      	ldr	r2, [pc, #392]	; (8006ff4 <HAL_DMA_Abort_IT+0x3c4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d027      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a60      	ldr	r2, [pc, #384]	; (8006ff8 <HAL_DMA_Abort_IT+0x3c8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d022      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a5f      	ldr	r2, [pc, #380]	; (8006ffc <HAL_DMA_Abort_IT+0x3cc>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d01d      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a5d      	ldr	r2, [pc, #372]	; (8007000 <HAL_DMA_Abort_IT+0x3d0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d018      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a5c      	ldr	r2, [pc, #368]	; (8007004 <HAL_DMA_Abort_IT+0x3d4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d013      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a5a      	ldr	r2, [pc, #360]	; (8007008 <HAL_DMA_Abort_IT+0x3d8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a59      	ldr	r2, [pc, #356]	; (800700c <HAL_DMA_Abort_IT+0x3dc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a57      	ldr	r2, [pc, #348]	; (8007010 <HAL_DMA_Abort_IT+0x3e0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <HAL_DMA_Abort_IT+0x290>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a56      	ldr	r2, [pc, #344]	; (8007014 <HAL_DMA_Abort_IT+0x3e4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d108      	bne.n	8006ed2 <HAL_DMA_Abort_IT+0x2a2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0201 	bic.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	e007      	b.n	8006ee2 <HAL_DMA_Abort_IT+0x2b2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0201 	bic.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a3c      	ldr	r2, [pc, #240]	; (8006fd8 <HAL_DMA_Abort_IT+0x3a8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d072      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a3a      	ldr	r2, [pc, #232]	; (8006fdc <HAL_DMA_Abort_IT+0x3ac>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d06d      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a39      	ldr	r2, [pc, #228]	; (8006fe0 <HAL_DMA_Abort_IT+0x3b0>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d068      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a37      	ldr	r2, [pc, #220]	; (8006fe4 <HAL_DMA_Abort_IT+0x3b4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d063      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a36      	ldr	r2, [pc, #216]	; (8006fe8 <HAL_DMA_Abort_IT+0x3b8>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d05e      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a34      	ldr	r2, [pc, #208]	; (8006fec <HAL_DMA_Abort_IT+0x3bc>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d059      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a33      	ldr	r2, [pc, #204]	; (8006ff0 <HAL_DMA_Abort_IT+0x3c0>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d054      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a31      	ldr	r2, [pc, #196]	; (8006ff4 <HAL_DMA_Abort_IT+0x3c4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d04f      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a30      	ldr	r2, [pc, #192]	; (8006ff8 <HAL_DMA_Abort_IT+0x3c8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d04a      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a2e      	ldr	r2, [pc, #184]	; (8006ffc <HAL_DMA_Abort_IT+0x3cc>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d045      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a2d      	ldr	r2, [pc, #180]	; (8007000 <HAL_DMA_Abort_IT+0x3d0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d040      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a2b      	ldr	r2, [pc, #172]	; (8007004 <HAL_DMA_Abort_IT+0x3d4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d03b      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a2a      	ldr	r2, [pc, #168]	; (8007008 <HAL_DMA_Abort_IT+0x3d8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d036      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a28      	ldr	r2, [pc, #160]	; (800700c <HAL_DMA_Abort_IT+0x3dc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d031      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a27      	ldr	r2, [pc, #156]	; (8007010 <HAL_DMA_Abort_IT+0x3e0>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d02c      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a25      	ldr	r2, [pc, #148]	; (8007014 <HAL_DMA_Abort_IT+0x3e4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d027      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a24      	ldr	r2, [pc, #144]	; (8007018 <HAL_DMA_Abort_IT+0x3e8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d022      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a22      	ldr	r2, [pc, #136]	; (800701c <HAL_DMA_Abort_IT+0x3ec>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01d      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a21      	ldr	r2, [pc, #132]	; (8007020 <HAL_DMA_Abort_IT+0x3f0>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d018      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1f      	ldr	r2, [pc, #124]	; (8007024 <HAL_DMA_Abort_IT+0x3f4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1e      	ldr	r2, [pc, #120]	; (8007028 <HAL_DMA_Abort_IT+0x3f8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00e      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1c      	ldr	r2, [pc, #112]	; (800702c <HAL_DMA_Abort_IT+0x3fc>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d009      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1b      	ldr	r2, [pc, #108]	; (8007030 <HAL_DMA_Abort_IT+0x400>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <HAL_DMA_Abort_IT+0x3a2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a19      	ldr	r2, [pc, #100]	; (8007034 <HAL_DMA_Abort_IT+0x404>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d132      	bne.n	8007038 <HAL_DMA_Abort_IT+0x408>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e031      	b.n	800703a <HAL_DMA_Abort_IT+0x40a>
 8006fd6:	bf00      	nop
 8006fd8:	40020010 	.word	0x40020010
 8006fdc:	40020028 	.word	0x40020028
 8006fe0:	40020040 	.word	0x40020040
 8006fe4:	40020058 	.word	0x40020058
 8006fe8:	40020070 	.word	0x40020070
 8006fec:	40020088 	.word	0x40020088
 8006ff0:	400200a0 	.word	0x400200a0
 8006ff4:	400200b8 	.word	0x400200b8
 8006ff8:	40020410 	.word	0x40020410
 8006ffc:	40020428 	.word	0x40020428
 8007000:	40020440 	.word	0x40020440
 8007004:	40020458 	.word	0x40020458
 8007008:	40020470 	.word	0x40020470
 800700c:	40020488 	.word	0x40020488
 8007010:	400204a0 	.word	0x400204a0
 8007014:	400204b8 	.word	0x400204b8
 8007018:	58025408 	.word	0x58025408
 800701c:	5802541c 	.word	0x5802541c
 8007020:	58025430 	.word	0x58025430
 8007024:	58025444 	.word	0x58025444
 8007028:	58025458 	.word	0x58025458
 800702c:	5802546c 	.word	0x5802546c
 8007030:	58025480 	.word	0x58025480
 8007034:	58025494 	.word	0x58025494
 8007038:	2300      	movs	r3, #0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d028      	beq.n	8007090 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800704c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007052:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007058:	f003 031f 	and.w	r3, r3, #31
 800705c:	2201      	movs	r2, #1
 800705e:	409a      	lsls	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800706c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00c      	beq.n	8007090 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007084:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800708e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop

080070bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08a      	sub	sp, #40	; 0x28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80070c8:	4b67      	ldr	r3, [pc, #412]	; (8007268 <HAL_DMA_IRQHandler+0x1ac>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a67      	ldr	r2, [pc, #412]	; (800726c <HAL_DMA_IRQHandler+0x1b0>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	0a9b      	lsrs	r3, r3, #10
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070da:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a5f      	ldr	r2, [pc, #380]	; (8007270 <HAL_DMA_IRQHandler+0x1b4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d04a      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a5d      	ldr	r2, [pc, #372]	; (8007274 <HAL_DMA_IRQHandler+0x1b8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d045      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a5c      	ldr	r2, [pc, #368]	; (8007278 <HAL_DMA_IRQHandler+0x1bc>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d040      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a5a      	ldr	r2, [pc, #360]	; (800727c <HAL_DMA_IRQHandler+0x1c0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d03b      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a59      	ldr	r2, [pc, #356]	; (8007280 <HAL_DMA_IRQHandler+0x1c4>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d036      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a57      	ldr	r2, [pc, #348]	; (8007284 <HAL_DMA_IRQHandler+0x1c8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d031      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a56      	ldr	r2, [pc, #344]	; (8007288 <HAL_DMA_IRQHandler+0x1cc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d02c      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a54      	ldr	r2, [pc, #336]	; (800728c <HAL_DMA_IRQHandler+0x1d0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d027      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a53      	ldr	r2, [pc, #332]	; (8007290 <HAL_DMA_IRQHandler+0x1d4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d022      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a51      	ldr	r2, [pc, #324]	; (8007294 <HAL_DMA_IRQHandler+0x1d8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01d      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a50      	ldr	r2, [pc, #320]	; (8007298 <HAL_DMA_IRQHandler+0x1dc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d018      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a4e      	ldr	r2, [pc, #312]	; (800729c <HAL_DMA_IRQHandler+0x1e0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d013      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a4d      	ldr	r2, [pc, #308]	; (80072a0 <HAL_DMA_IRQHandler+0x1e4>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00e      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a4b      	ldr	r2, [pc, #300]	; (80072a4 <HAL_DMA_IRQHandler+0x1e8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d009      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a4a      	ldr	r2, [pc, #296]	; (80072a8 <HAL_DMA_IRQHandler+0x1ec>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d004      	beq.n	800718e <HAL_DMA_IRQHandler+0xd2>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a48      	ldr	r2, [pc, #288]	; (80072ac <HAL_DMA_IRQHandler+0x1f0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d101      	bne.n	8007192 <HAL_DMA_IRQHandler+0xd6>
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <HAL_DMA_IRQHandler+0xd8>
 8007192:	2300      	movs	r3, #0
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 842b 	beq.w	80079f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	2208      	movs	r2, #8
 80071a4:	409a      	lsls	r2, r3
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	4013      	ands	r3, r2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 80a2 	beq.w	80072f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a2e      	ldr	r2, [pc, #184]	; (8007270 <HAL_DMA_IRQHandler+0x1b4>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d04a      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a2d      	ldr	r2, [pc, #180]	; (8007274 <HAL_DMA_IRQHandler+0x1b8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d045      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a2b      	ldr	r2, [pc, #172]	; (8007278 <HAL_DMA_IRQHandler+0x1bc>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d040      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a2a      	ldr	r2, [pc, #168]	; (800727c <HAL_DMA_IRQHandler+0x1c0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d03b      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a28      	ldr	r2, [pc, #160]	; (8007280 <HAL_DMA_IRQHandler+0x1c4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d036      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a27      	ldr	r2, [pc, #156]	; (8007284 <HAL_DMA_IRQHandler+0x1c8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d031      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a25      	ldr	r2, [pc, #148]	; (8007288 <HAL_DMA_IRQHandler+0x1cc>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d02c      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a24      	ldr	r2, [pc, #144]	; (800728c <HAL_DMA_IRQHandler+0x1d0>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d027      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a22      	ldr	r2, [pc, #136]	; (8007290 <HAL_DMA_IRQHandler+0x1d4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d022      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a21      	ldr	r2, [pc, #132]	; (8007294 <HAL_DMA_IRQHandler+0x1d8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d01d      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1f      	ldr	r2, [pc, #124]	; (8007298 <HAL_DMA_IRQHandler+0x1dc>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d018      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a1e      	ldr	r2, [pc, #120]	; (800729c <HAL_DMA_IRQHandler+0x1e0>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d013      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1c      	ldr	r2, [pc, #112]	; (80072a0 <HAL_DMA_IRQHandler+0x1e4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00e      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1b      	ldr	r2, [pc, #108]	; (80072a4 <HAL_DMA_IRQHandler+0x1e8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d009      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a19      	ldr	r2, [pc, #100]	; (80072a8 <HAL_DMA_IRQHandler+0x1ec>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <HAL_DMA_IRQHandler+0x194>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a18      	ldr	r2, [pc, #96]	; (80072ac <HAL_DMA_IRQHandler+0x1f0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d12f      	bne.n	80072b0 <HAL_DMA_IRQHandler+0x1f4>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0304 	and.w	r3, r3, #4
 800725a:	2b00      	cmp	r3, #0
 800725c:	bf14      	ite	ne
 800725e:	2301      	movne	r3, #1
 8007260:	2300      	moveq	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	e02e      	b.n	80072c4 <HAL_DMA_IRQHandler+0x208>
 8007266:	bf00      	nop
 8007268:	2400008c 	.word	0x2400008c
 800726c:	1b4e81b5 	.word	0x1b4e81b5
 8007270:	40020010 	.word	0x40020010
 8007274:	40020028 	.word	0x40020028
 8007278:	40020040 	.word	0x40020040
 800727c:	40020058 	.word	0x40020058
 8007280:	40020070 	.word	0x40020070
 8007284:	40020088 	.word	0x40020088
 8007288:	400200a0 	.word	0x400200a0
 800728c:	400200b8 	.word	0x400200b8
 8007290:	40020410 	.word	0x40020410
 8007294:	40020428 	.word	0x40020428
 8007298:	40020440 	.word	0x40020440
 800729c:	40020458 	.word	0x40020458
 80072a0:	40020470 	.word	0x40020470
 80072a4:	40020488 	.word	0x40020488
 80072a8:	400204a0 	.word	0x400204a0
 80072ac:	400204b8 	.word	0x400204b8
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bf14      	ite	ne
 80072be:	2301      	movne	r3, #1
 80072c0:	2300      	moveq	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d015      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0204 	bic.w	r2, r2, #4
 80072d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	2208      	movs	r2, #8
 80072e2:	409a      	lsls	r2, r3
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ec:	f043 0201 	orr.w	r2, r3, #1
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d06e      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a69      	ldr	r2, [pc, #420]	; (80074b4 <HAL_DMA_IRQHandler+0x3f8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d04a      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a67      	ldr	r2, [pc, #412]	; (80074b8 <HAL_DMA_IRQHandler+0x3fc>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d045      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a66      	ldr	r2, [pc, #408]	; (80074bc <HAL_DMA_IRQHandler+0x400>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d040      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a64      	ldr	r2, [pc, #400]	; (80074c0 <HAL_DMA_IRQHandler+0x404>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d03b      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a63      	ldr	r2, [pc, #396]	; (80074c4 <HAL_DMA_IRQHandler+0x408>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d036      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a61      	ldr	r2, [pc, #388]	; (80074c8 <HAL_DMA_IRQHandler+0x40c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d031      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a60      	ldr	r2, [pc, #384]	; (80074cc <HAL_DMA_IRQHandler+0x410>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d02c      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a5e      	ldr	r2, [pc, #376]	; (80074d0 <HAL_DMA_IRQHandler+0x414>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d027      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a5d      	ldr	r2, [pc, #372]	; (80074d4 <HAL_DMA_IRQHandler+0x418>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d022      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a5b      	ldr	r2, [pc, #364]	; (80074d8 <HAL_DMA_IRQHandler+0x41c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d01d      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a5a      	ldr	r2, [pc, #360]	; (80074dc <HAL_DMA_IRQHandler+0x420>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d018      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a58      	ldr	r2, [pc, #352]	; (80074e0 <HAL_DMA_IRQHandler+0x424>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a57      	ldr	r2, [pc, #348]	; (80074e4 <HAL_DMA_IRQHandler+0x428>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00e      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a55      	ldr	r2, [pc, #340]	; (80074e8 <HAL_DMA_IRQHandler+0x42c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d009      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a54      	ldr	r2, [pc, #336]	; (80074ec <HAL_DMA_IRQHandler+0x430>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d004      	beq.n	80073aa <HAL_DMA_IRQHandler+0x2ee>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a52      	ldr	r2, [pc, #328]	; (80074f0 <HAL_DMA_IRQHandler+0x434>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d10a      	bne.n	80073c0 <HAL_DMA_IRQHandler+0x304>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bf14      	ite	ne
 80073b8:	2301      	movne	r3, #1
 80073ba:	2300      	moveq	r3, #0
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	e003      	b.n	80073c8 <HAL_DMA_IRQHandler+0x30c>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2300      	movs	r3, #0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00d      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	2201      	movs	r2, #1
 80073d6:	409a      	lsls	r2, r3
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e0:	f043 0202 	orr.w	r2, r3, #2
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ec:	f003 031f 	and.w	r3, r3, #31
 80073f0:	2204      	movs	r2, #4
 80073f2:	409a      	lsls	r2, r3
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	4013      	ands	r3, r2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 808f 	beq.w	800751c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a2c      	ldr	r2, [pc, #176]	; (80074b4 <HAL_DMA_IRQHandler+0x3f8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d04a      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a2a      	ldr	r2, [pc, #168]	; (80074b8 <HAL_DMA_IRQHandler+0x3fc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d045      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a29      	ldr	r2, [pc, #164]	; (80074bc <HAL_DMA_IRQHandler+0x400>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d040      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a27      	ldr	r2, [pc, #156]	; (80074c0 <HAL_DMA_IRQHandler+0x404>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d03b      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a26      	ldr	r2, [pc, #152]	; (80074c4 <HAL_DMA_IRQHandler+0x408>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d036      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a24      	ldr	r2, [pc, #144]	; (80074c8 <HAL_DMA_IRQHandler+0x40c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d031      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a23      	ldr	r2, [pc, #140]	; (80074cc <HAL_DMA_IRQHandler+0x410>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d02c      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a21      	ldr	r2, [pc, #132]	; (80074d0 <HAL_DMA_IRQHandler+0x414>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d027      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a20      	ldr	r2, [pc, #128]	; (80074d4 <HAL_DMA_IRQHandler+0x418>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d022      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1e      	ldr	r2, [pc, #120]	; (80074d8 <HAL_DMA_IRQHandler+0x41c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d01d      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1d      	ldr	r2, [pc, #116]	; (80074dc <HAL_DMA_IRQHandler+0x420>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d018      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <HAL_DMA_IRQHandler+0x424>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d013      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <HAL_DMA_IRQHandler+0x428>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00e      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <HAL_DMA_IRQHandler+0x42c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a17      	ldr	r2, [pc, #92]	; (80074ec <HAL_DMA_IRQHandler+0x430>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d004      	beq.n	800749e <HAL_DMA_IRQHandler+0x3e2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a15      	ldr	r2, [pc, #84]	; (80074f0 <HAL_DMA_IRQHandler+0x434>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d12a      	bne.n	80074f4 <HAL_DMA_IRQHandler+0x438>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	bf14      	ite	ne
 80074ac:	2301      	movne	r3, #1
 80074ae:	2300      	moveq	r3, #0
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	e023      	b.n	80074fc <HAL_DMA_IRQHandler+0x440>
 80074b4:	40020010 	.word	0x40020010
 80074b8:	40020028 	.word	0x40020028
 80074bc:	40020040 	.word	0x40020040
 80074c0:	40020058 	.word	0x40020058
 80074c4:	40020070 	.word	0x40020070
 80074c8:	40020088 	.word	0x40020088
 80074cc:	400200a0 	.word	0x400200a0
 80074d0:	400200b8 	.word	0x400200b8
 80074d4:	40020410 	.word	0x40020410
 80074d8:	40020428 	.word	0x40020428
 80074dc:	40020440 	.word	0x40020440
 80074e0:	40020458 	.word	0x40020458
 80074e4:	40020470 	.word	0x40020470
 80074e8:	40020488 	.word	0x40020488
 80074ec:	400204a0 	.word	0x400204a0
 80074f0:	400204b8 	.word	0x400204b8
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2300      	movs	r3, #0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00d      	beq.n	800751c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007504:	f003 031f 	and.w	r3, r3, #31
 8007508:	2204      	movs	r2, #4
 800750a:	409a      	lsls	r2, r3
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007514:	f043 0204 	orr.w	r2, r3, #4
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	2210      	movs	r2, #16
 8007526:	409a      	lsls	r2, r3
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	4013      	ands	r3, r2
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 80a6 	beq.w	800767e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a85      	ldr	r2, [pc, #532]	; (800774c <HAL_DMA_IRQHandler+0x690>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d04a      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a83      	ldr	r2, [pc, #524]	; (8007750 <HAL_DMA_IRQHandler+0x694>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d045      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a82      	ldr	r2, [pc, #520]	; (8007754 <HAL_DMA_IRQHandler+0x698>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d040      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a80      	ldr	r2, [pc, #512]	; (8007758 <HAL_DMA_IRQHandler+0x69c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d03b      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a7f      	ldr	r2, [pc, #508]	; (800775c <HAL_DMA_IRQHandler+0x6a0>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d036      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a7d      	ldr	r2, [pc, #500]	; (8007760 <HAL_DMA_IRQHandler+0x6a4>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d031      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a7c      	ldr	r2, [pc, #496]	; (8007764 <HAL_DMA_IRQHandler+0x6a8>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d02c      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a7a      	ldr	r2, [pc, #488]	; (8007768 <HAL_DMA_IRQHandler+0x6ac>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d027      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a79      	ldr	r2, [pc, #484]	; (800776c <HAL_DMA_IRQHandler+0x6b0>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d022      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a77      	ldr	r2, [pc, #476]	; (8007770 <HAL_DMA_IRQHandler+0x6b4>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d01d      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a76      	ldr	r2, [pc, #472]	; (8007774 <HAL_DMA_IRQHandler+0x6b8>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d018      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a74      	ldr	r2, [pc, #464]	; (8007778 <HAL_DMA_IRQHandler+0x6bc>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a73      	ldr	r2, [pc, #460]	; (800777c <HAL_DMA_IRQHandler+0x6c0>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00e      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a71      	ldr	r2, [pc, #452]	; (8007780 <HAL_DMA_IRQHandler+0x6c4>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d009      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a70      	ldr	r2, [pc, #448]	; (8007784 <HAL_DMA_IRQHandler+0x6c8>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d004      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x516>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a6e      	ldr	r2, [pc, #440]	; (8007788 <HAL_DMA_IRQHandler+0x6cc>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d10a      	bne.n	80075e8 <HAL_DMA_IRQHandler+0x52c>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0308 	and.w	r3, r3, #8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	bf14      	ite	ne
 80075e0:	2301      	movne	r3, #1
 80075e2:	2300      	moveq	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	e009      	b.n	80075fc <HAL_DMA_IRQHandler+0x540>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bf14      	ite	ne
 80075f6:	2301      	movne	r3, #1
 80075f8:	2300      	moveq	r3, #0
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d03e      	beq.n	800767e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007604:	f003 031f 	and.w	r3, r3, #31
 8007608:	2210      	movs	r2, #16
 800760a:	409a      	lsls	r2, r3
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d018      	beq.n	8007650 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d108      	bne.n	800763e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	2b00      	cmp	r3, #0
 8007632:	d024      	beq.n	800767e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	4798      	blx	r3
 800763c:	e01f      	b.n	800767e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007642:	2b00      	cmp	r3, #0
 8007644:	d01b      	beq.n	800767e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	4798      	blx	r3
 800764e:	e016      	b.n	800767e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800765a:	2b00      	cmp	r3, #0
 800765c:	d107      	bne.n	800766e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0208 	bic.w	r2, r2, #8
 800766c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007682:	f003 031f 	and.w	r3, r3, #31
 8007686:	2220      	movs	r2, #32
 8007688:	409a      	lsls	r2, r3
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	4013      	ands	r3, r2
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 8110 	beq.w	80078b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a2c      	ldr	r2, [pc, #176]	; (800774c <HAL_DMA_IRQHandler+0x690>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d04a      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a2b      	ldr	r2, [pc, #172]	; (8007750 <HAL_DMA_IRQHandler+0x694>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d045      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a29      	ldr	r2, [pc, #164]	; (8007754 <HAL_DMA_IRQHandler+0x698>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d040      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a28      	ldr	r2, [pc, #160]	; (8007758 <HAL_DMA_IRQHandler+0x69c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d03b      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a26      	ldr	r2, [pc, #152]	; (800775c <HAL_DMA_IRQHandler+0x6a0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d036      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a25      	ldr	r2, [pc, #148]	; (8007760 <HAL_DMA_IRQHandler+0x6a4>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d031      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a23      	ldr	r2, [pc, #140]	; (8007764 <HAL_DMA_IRQHandler+0x6a8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d02c      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a22      	ldr	r2, [pc, #136]	; (8007768 <HAL_DMA_IRQHandler+0x6ac>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d027      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a20      	ldr	r2, [pc, #128]	; (800776c <HAL_DMA_IRQHandler+0x6b0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d022      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a1f      	ldr	r2, [pc, #124]	; (8007770 <HAL_DMA_IRQHandler+0x6b4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d01d      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <HAL_DMA_IRQHandler+0x6b8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d018      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1c      	ldr	r2, [pc, #112]	; (8007778 <HAL_DMA_IRQHandler+0x6bc>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d013      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1a      	ldr	r2, [pc, #104]	; (800777c <HAL_DMA_IRQHandler+0x6c0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d00e      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a19      	ldr	r2, [pc, #100]	; (8007780 <HAL_DMA_IRQHandler+0x6c4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d009      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a17      	ldr	r2, [pc, #92]	; (8007784 <HAL_DMA_IRQHandler+0x6c8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d004      	beq.n	8007734 <HAL_DMA_IRQHandler+0x678>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a16      	ldr	r2, [pc, #88]	; (8007788 <HAL_DMA_IRQHandler+0x6cc>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d12b      	bne.n	800778c <HAL_DMA_IRQHandler+0x6d0>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0310 	and.w	r3, r3, #16
 800773e:	2b00      	cmp	r3, #0
 8007740:	bf14      	ite	ne
 8007742:	2301      	movne	r3, #1
 8007744:	2300      	moveq	r3, #0
 8007746:	b2db      	uxtb	r3, r3
 8007748:	e02a      	b.n	80077a0 <HAL_DMA_IRQHandler+0x6e4>
 800774a:	bf00      	nop
 800774c:	40020010 	.word	0x40020010
 8007750:	40020028 	.word	0x40020028
 8007754:	40020040 	.word	0x40020040
 8007758:	40020058 	.word	0x40020058
 800775c:	40020070 	.word	0x40020070
 8007760:	40020088 	.word	0x40020088
 8007764:	400200a0 	.word	0x400200a0
 8007768:	400200b8 	.word	0x400200b8
 800776c:	40020410 	.word	0x40020410
 8007770:	40020428 	.word	0x40020428
 8007774:	40020440 	.word	0x40020440
 8007778:	40020458 	.word	0x40020458
 800777c:	40020470 	.word	0x40020470
 8007780:	40020488 	.word	0x40020488
 8007784:	400204a0 	.word	0x400204a0
 8007788:	400204b8 	.word	0x400204b8
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	bf14      	ite	ne
 800779a:	2301      	movne	r3, #1
 800779c:	2300      	moveq	r3, #0
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 8087 	beq.w	80078b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077aa:	f003 031f 	and.w	r3, r3, #31
 80077ae:	2220      	movs	r2, #32
 80077b0:	409a      	lsls	r2, r3
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d139      	bne.n	8007836 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0216 	bic.w	r2, r2, #22
 80077d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	695a      	ldr	r2, [r3, #20]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d103      	bne.n	80077f2 <HAL_DMA_IRQHandler+0x736>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d007      	beq.n	8007802 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0208 	bic.w	r2, r2, #8
 8007800:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007806:	f003 031f 	and.w	r3, r3, #31
 800780a:	223f      	movs	r2, #63	; 0x3f
 800780c:	409a      	lsls	r2, r3
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 834a 	beq.w	8007ec0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	4798      	blx	r3
          }
          return;
 8007834:	e344      	b.n	8007ec0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d018      	beq.n	8007876 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d108      	bne.n	8007864 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007856:	2b00      	cmp	r3, #0
 8007858:	d02c      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4798      	blx	r3
 8007862:	e027      	b.n	80078b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007868:	2b00      	cmp	r3, #0
 800786a:	d023      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	4798      	blx	r3
 8007874:	e01e      	b.n	80078b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10f      	bne.n	80078a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0210 	bic.w	r2, r2, #16
 8007892:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 8306 	beq.w	8007eca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 8088 	beq.w	80079dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2204      	movs	r2, #4
 80078d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a7a      	ldr	r2, [pc, #488]	; (8007ac4 <HAL_DMA_IRQHandler+0xa08>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d04a      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a79      	ldr	r2, [pc, #484]	; (8007ac8 <HAL_DMA_IRQHandler+0xa0c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d045      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a77      	ldr	r2, [pc, #476]	; (8007acc <HAL_DMA_IRQHandler+0xa10>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d040      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a76      	ldr	r2, [pc, #472]	; (8007ad0 <HAL_DMA_IRQHandler+0xa14>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d03b      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a74      	ldr	r2, [pc, #464]	; (8007ad4 <HAL_DMA_IRQHandler+0xa18>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d036      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a73      	ldr	r2, [pc, #460]	; (8007ad8 <HAL_DMA_IRQHandler+0xa1c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d031      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a71      	ldr	r2, [pc, #452]	; (8007adc <HAL_DMA_IRQHandler+0xa20>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d02c      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a70      	ldr	r2, [pc, #448]	; (8007ae0 <HAL_DMA_IRQHandler+0xa24>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d027      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a6e      	ldr	r2, [pc, #440]	; (8007ae4 <HAL_DMA_IRQHandler+0xa28>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d022      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a6d      	ldr	r2, [pc, #436]	; (8007ae8 <HAL_DMA_IRQHandler+0xa2c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d01d      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a6b      	ldr	r2, [pc, #428]	; (8007aec <HAL_DMA_IRQHandler+0xa30>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d018      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a6a      	ldr	r2, [pc, #424]	; (8007af0 <HAL_DMA_IRQHandler+0xa34>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d013      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a68      	ldr	r2, [pc, #416]	; (8007af4 <HAL_DMA_IRQHandler+0xa38>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00e      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a67      	ldr	r2, [pc, #412]	; (8007af8 <HAL_DMA_IRQHandler+0xa3c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d009      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a65      	ldr	r2, [pc, #404]	; (8007afc <HAL_DMA_IRQHandler+0xa40>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d004      	beq.n	8007974 <HAL_DMA_IRQHandler+0x8b8>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a64      	ldr	r2, [pc, #400]	; (8007b00 <HAL_DMA_IRQHandler+0xa44>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d108      	bne.n	8007986 <HAL_DMA_IRQHandler+0x8ca>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0201 	bic.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	e007      	b.n	8007996 <HAL_DMA_IRQHandler+0x8da>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0201 	bic.w	r2, r2, #1
 8007994:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800799e:	429a      	cmp	r2, r3
 80079a0:	d307      	bcc.n	80079b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1f2      	bne.n	8007996 <HAL_DMA_IRQHandler+0x8da>
 80079b0:	e000      	b.n	80079b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80079b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2203      	movs	r2, #3
 80079c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80079ca:	e003      	b.n	80079d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 8272 	beq.w	8007eca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	4798      	blx	r3
 80079ee:	e26c      	b.n	8007eca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a43      	ldr	r2, [pc, #268]	; (8007b04 <HAL_DMA_IRQHandler+0xa48>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d022      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x984>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a42      	ldr	r2, [pc, #264]	; (8007b08 <HAL_DMA_IRQHandler+0xa4c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d01d      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x984>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a40      	ldr	r2, [pc, #256]	; (8007b0c <HAL_DMA_IRQHandler+0xa50>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d018      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x984>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a3f      	ldr	r2, [pc, #252]	; (8007b10 <HAL_DMA_IRQHandler+0xa54>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d013      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x984>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a3d      	ldr	r2, [pc, #244]	; (8007b14 <HAL_DMA_IRQHandler+0xa58>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d00e      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x984>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a3c      	ldr	r2, [pc, #240]	; (8007b18 <HAL_DMA_IRQHandler+0xa5c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d009      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x984>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a3a      	ldr	r2, [pc, #232]	; (8007b1c <HAL_DMA_IRQHandler+0xa60>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d004      	beq.n	8007a40 <HAL_DMA_IRQHandler+0x984>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a39      	ldr	r2, [pc, #228]	; (8007b20 <HAL_DMA_IRQHandler+0xa64>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d101      	bne.n	8007a44 <HAL_DMA_IRQHandler+0x988>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <HAL_DMA_IRQHandler+0x98a>
 8007a44:	2300      	movs	r3, #0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 823f 	beq.w	8007eca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a58:	f003 031f 	and.w	r3, r3, #31
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	409a      	lsls	r2, r3
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	4013      	ands	r3, r2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 80cd 	beq.w	8007c04 <HAL_DMA_IRQHandler+0xb48>
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 80c7 	beq.w	8007c04 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a7a:	f003 031f 	and.w	r3, r3, #31
 8007a7e:	2204      	movs	r2, #4
 8007a80:	409a      	lsls	r2, r3
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d049      	beq.n	8007b24 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d109      	bne.n	8007aae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 8210 	beq.w	8007ec4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007aac:	e20a      	b.n	8007ec4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 8206 	beq.w	8007ec4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ac0:	e200      	b.n	8007ec4 <HAL_DMA_IRQHandler+0xe08>
 8007ac2:	bf00      	nop
 8007ac4:	40020010 	.word	0x40020010
 8007ac8:	40020028 	.word	0x40020028
 8007acc:	40020040 	.word	0x40020040
 8007ad0:	40020058 	.word	0x40020058
 8007ad4:	40020070 	.word	0x40020070
 8007ad8:	40020088 	.word	0x40020088
 8007adc:	400200a0 	.word	0x400200a0
 8007ae0:	400200b8 	.word	0x400200b8
 8007ae4:	40020410 	.word	0x40020410
 8007ae8:	40020428 	.word	0x40020428
 8007aec:	40020440 	.word	0x40020440
 8007af0:	40020458 	.word	0x40020458
 8007af4:	40020470 	.word	0x40020470
 8007af8:	40020488 	.word	0x40020488
 8007afc:	400204a0 	.word	0x400204a0
 8007b00:	400204b8 	.word	0x400204b8
 8007b04:	58025408 	.word	0x58025408
 8007b08:	5802541c 	.word	0x5802541c
 8007b0c:	58025430 	.word	0x58025430
 8007b10:	58025444 	.word	0x58025444
 8007b14:	58025458 	.word	0x58025458
 8007b18:	5802546c 	.word	0x5802546c
 8007b1c:	58025480 	.word	0x58025480
 8007b20:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f003 0320 	and.w	r3, r3, #32
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d160      	bne.n	8007bf0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a7f      	ldr	r2, [pc, #508]	; (8007d30 <HAL_DMA_IRQHandler+0xc74>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d04a      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a7d      	ldr	r2, [pc, #500]	; (8007d34 <HAL_DMA_IRQHandler+0xc78>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d045      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a7c      	ldr	r2, [pc, #496]	; (8007d38 <HAL_DMA_IRQHandler+0xc7c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d040      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a7a      	ldr	r2, [pc, #488]	; (8007d3c <HAL_DMA_IRQHandler+0xc80>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d03b      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a79      	ldr	r2, [pc, #484]	; (8007d40 <HAL_DMA_IRQHandler+0xc84>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d036      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a77      	ldr	r2, [pc, #476]	; (8007d44 <HAL_DMA_IRQHandler+0xc88>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d031      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a76      	ldr	r2, [pc, #472]	; (8007d48 <HAL_DMA_IRQHandler+0xc8c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d02c      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a74      	ldr	r2, [pc, #464]	; (8007d4c <HAL_DMA_IRQHandler+0xc90>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d027      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a73      	ldr	r2, [pc, #460]	; (8007d50 <HAL_DMA_IRQHandler+0xc94>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d022      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a71      	ldr	r2, [pc, #452]	; (8007d54 <HAL_DMA_IRQHandler+0xc98>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d01d      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a70      	ldr	r2, [pc, #448]	; (8007d58 <HAL_DMA_IRQHandler+0xc9c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d018      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a6e      	ldr	r2, [pc, #440]	; (8007d5c <HAL_DMA_IRQHandler+0xca0>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d013      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a6d      	ldr	r2, [pc, #436]	; (8007d60 <HAL_DMA_IRQHandler+0xca4>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d00e      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a6b      	ldr	r2, [pc, #428]	; (8007d64 <HAL_DMA_IRQHandler+0xca8>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d009      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a6a      	ldr	r2, [pc, #424]	; (8007d68 <HAL_DMA_IRQHandler+0xcac>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d004      	beq.n	8007bce <HAL_DMA_IRQHandler+0xb12>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a68      	ldr	r2, [pc, #416]	; (8007d6c <HAL_DMA_IRQHandler+0xcb0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d108      	bne.n	8007be0 <HAL_DMA_IRQHandler+0xb24>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0208 	bic.w	r2, r2, #8
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	e007      	b.n	8007bf0 <HAL_DMA_IRQHandler+0xb34>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0204 	bic.w	r2, r2, #4
 8007bee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 8165 	beq.w	8007ec4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c02:	e15f      	b.n	8007ec4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c08:	f003 031f 	and.w	r3, r3, #31
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	409a      	lsls	r2, r3
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	4013      	ands	r3, r2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80c5 	beq.w	8007da4 <HAL_DMA_IRQHandler+0xce8>
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 80bf 	beq.w	8007da4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2a:	f003 031f 	and.w	r3, r3, #31
 8007c2e:	2202      	movs	r2, #2
 8007c30:	409a      	lsls	r2, r3
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d018      	beq.n	8007c72 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d109      	bne.n	8007c5e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 813a 	beq.w	8007ec8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c5c:	e134      	b.n	8007ec8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 8130 	beq.w	8007ec8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c70:	e12a      	b.n	8007ec8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f003 0320 	and.w	r3, r3, #32
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f040 8089 	bne.w	8007d90 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a2b      	ldr	r2, [pc, #172]	; (8007d30 <HAL_DMA_IRQHandler+0xc74>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d04a      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a29      	ldr	r2, [pc, #164]	; (8007d34 <HAL_DMA_IRQHandler+0xc78>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d045      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a28      	ldr	r2, [pc, #160]	; (8007d38 <HAL_DMA_IRQHandler+0xc7c>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d040      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a26      	ldr	r2, [pc, #152]	; (8007d3c <HAL_DMA_IRQHandler+0xc80>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d03b      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a25      	ldr	r2, [pc, #148]	; (8007d40 <HAL_DMA_IRQHandler+0xc84>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d036      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a23      	ldr	r2, [pc, #140]	; (8007d44 <HAL_DMA_IRQHandler+0xc88>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d031      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a22      	ldr	r2, [pc, #136]	; (8007d48 <HAL_DMA_IRQHandler+0xc8c>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d02c      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <HAL_DMA_IRQHandler+0xc90>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d027      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <HAL_DMA_IRQHandler+0xc94>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d022      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <HAL_DMA_IRQHandler+0xc98>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d01d      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a1c      	ldr	r2, [pc, #112]	; (8007d58 <HAL_DMA_IRQHandler+0xc9c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d018      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1a      	ldr	r2, [pc, #104]	; (8007d5c <HAL_DMA_IRQHandler+0xca0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d013      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a19      	ldr	r2, [pc, #100]	; (8007d60 <HAL_DMA_IRQHandler+0xca4>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00e      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a17      	ldr	r2, [pc, #92]	; (8007d64 <HAL_DMA_IRQHandler+0xca8>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d009      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a16      	ldr	r2, [pc, #88]	; (8007d68 <HAL_DMA_IRQHandler+0xcac>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d004      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xc62>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a14      	ldr	r2, [pc, #80]	; (8007d6c <HAL_DMA_IRQHandler+0xcb0>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d128      	bne.n	8007d70 <HAL_DMA_IRQHandler+0xcb4>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 0214 	bic.w	r2, r2, #20
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	e027      	b.n	8007d80 <HAL_DMA_IRQHandler+0xcc4>
 8007d30:	40020010 	.word	0x40020010
 8007d34:	40020028 	.word	0x40020028
 8007d38:	40020040 	.word	0x40020040
 8007d3c:	40020058 	.word	0x40020058
 8007d40:	40020070 	.word	0x40020070
 8007d44:	40020088 	.word	0x40020088
 8007d48:	400200a0 	.word	0x400200a0
 8007d4c:	400200b8 	.word	0x400200b8
 8007d50:	40020410 	.word	0x40020410
 8007d54:	40020428 	.word	0x40020428
 8007d58:	40020440 	.word	0x40020440
 8007d5c:	40020458 	.word	0x40020458
 8007d60:	40020470 	.word	0x40020470
 8007d64:	40020488 	.word	0x40020488
 8007d68:	400204a0 	.word	0x400204a0
 8007d6c:	400204b8 	.word	0x400204b8
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 020a 	bic.w	r2, r2, #10
 8007d7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 8097 	beq.w	8007ec8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007da2:	e091      	b.n	8007ec8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da8:	f003 031f 	and.w	r3, r3, #31
 8007dac:	2208      	movs	r2, #8
 8007dae:	409a      	lsls	r2, r3
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	4013      	ands	r3, r2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8088 	beq.w	8007eca <HAL_DMA_IRQHandler+0xe0e>
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f003 0308 	and.w	r3, r3, #8
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 8082 	beq.w	8007eca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a41      	ldr	r2, [pc, #260]	; (8007ed0 <HAL_DMA_IRQHandler+0xe14>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d04a      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a3f      	ldr	r2, [pc, #252]	; (8007ed4 <HAL_DMA_IRQHandler+0xe18>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d045      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a3e      	ldr	r2, [pc, #248]	; (8007ed8 <HAL_DMA_IRQHandler+0xe1c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d040      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a3c      	ldr	r2, [pc, #240]	; (8007edc <HAL_DMA_IRQHandler+0xe20>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d03b      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a3b      	ldr	r2, [pc, #236]	; (8007ee0 <HAL_DMA_IRQHandler+0xe24>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d036      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a39      	ldr	r2, [pc, #228]	; (8007ee4 <HAL_DMA_IRQHandler+0xe28>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d031      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a38      	ldr	r2, [pc, #224]	; (8007ee8 <HAL_DMA_IRQHandler+0xe2c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d02c      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a36      	ldr	r2, [pc, #216]	; (8007eec <HAL_DMA_IRQHandler+0xe30>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d027      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a35      	ldr	r2, [pc, #212]	; (8007ef0 <HAL_DMA_IRQHandler+0xe34>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d022      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a33      	ldr	r2, [pc, #204]	; (8007ef4 <HAL_DMA_IRQHandler+0xe38>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d01d      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a32      	ldr	r2, [pc, #200]	; (8007ef8 <HAL_DMA_IRQHandler+0xe3c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d018      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a30      	ldr	r2, [pc, #192]	; (8007efc <HAL_DMA_IRQHandler+0xe40>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d013      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a2f      	ldr	r2, [pc, #188]	; (8007f00 <HAL_DMA_IRQHandler+0xe44>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d00e      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a2d      	ldr	r2, [pc, #180]	; (8007f04 <HAL_DMA_IRQHandler+0xe48>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d009      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a2c      	ldr	r2, [pc, #176]	; (8007f08 <HAL_DMA_IRQHandler+0xe4c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d004      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xdaa>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a2a      	ldr	r2, [pc, #168]	; (8007f0c <HAL_DMA_IRQHandler+0xe50>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d108      	bne.n	8007e78 <HAL_DMA_IRQHandler+0xdbc>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f022 021c 	bic.w	r2, r2, #28
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	e007      	b.n	8007e88 <HAL_DMA_IRQHandler+0xdcc>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 020e 	bic.w	r2, r2, #14
 8007e86:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8c:	f003 031f 	and.w	r3, r3, #31
 8007e90:	2201      	movs	r2, #1
 8007e92:	409a      	lsls	r2, r3
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d009      	beq.n	8007eca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	4798      	blx	r3
 8007ebe:	e004      	b.n	8007eca <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007ec0:	bf00      	nop
 8007ec2:	e002      	b.n	8007eca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ec4:	bf00      	nop
 8007ec6:	e000      	b.n	8007eca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ec8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007eca:	3728      	adds	r7, #40	; 0x28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40020010 	.word	0x40020010
 8007ed4:	40020028 	.word	0x40020028
 8007ed8:	40020040 	.word	0x40020040
 8007edc:	40020058 	.word	0x40020058
 8007ee0:	40020070 	.word	0x40020070
 8007ee4:	40020088 	.word	0x40020088
 8007ee8:	400200a0 	.word	0x400200a0
 8007eec:	400200b8 	.word	0x400200b8
 8007ef0:	40020410 	.word	0x40020410
 8007ef4:	40020428 	.word	0x40020428
 8007ef8:	40020440 	.word	0x40020440
 8007efc:	40020458 	.word	0x40020458
 8007f00:	40020470 	.word	0x40020470
 8007f04:	40020488 	.word	0x40020488
 8007f08:	400204a0 	.word	0x400204a0
 8007f0c:	400204b8 	.word	0x400204b8

08007f10 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a7f      	ldr	r2, [pc, #508]	; (8008144 <DMA_SetConfig+0x21c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d072      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a7d      	ldr	r2, [pc, #500]	; (8008148 <DMA_SetConfig+0x220>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d06d      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a7c      	ldr	r2, [pc, #496]	; (800814c <DMA_SetConfig+0x224>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d068      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a7a      	ldr	r2, [pc, #488]	; (8008150 <DMA_SetConfig+0x228>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d063      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a79      	ldr	r2, [pc, #484]	; (8008154 <DMA_SetConfig+0x22c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d05e      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a77      	ldr	r2, [pc, #476]	; (8008158 <DMA_SetConfig+0x230>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d059      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a76      	ldr	r2, [pc, #472]	; (800815c <DMA_SetConfig+0x234>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d054      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a74      	ldr	r2, [pc, #464]	; (8008160 <DMA_SetConfig+0x238>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d04f      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a73      	ldr	r2, [pc, #460]	; (8008164 <DMA_SetConfig+0x23c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d04a      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a71      	ldr	r2, [pc, #452]	; (8008168 <DMA_SetConfig+0x240>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d045      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a70      	ldr	r2, [pc, #448]	; (800816c <DMA_SetConfig+0x244>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d040      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a6e      	ldr	r2, [pc, #440]	; (8008170 <DMA_SetConfig+0x248>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d03b      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a6d      	ldr	r2, [pc, #436]	; (8008174 <DMA_SetConfig+0x24c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d036      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a6b      	ldr	r2, [pc, #428]	; (8008178 <DMA_SetConfig+0x250>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d031      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a6a      	ldr	r2, [pc, #424]	; (800817c <DMA_SetConfig+0x254>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d02c      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a68      	ldr	r2, [pc, #416]	; (8008180 <DMA_SetConfig+0x258>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d027      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a67      	ldr	r2, [pc, #412]	; (8008184 <DMA_SetConfig+0x25c>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d022      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a65      	ldr	r2, [pc, #404]	; (8008188 <DMA_SetConfig+0x260>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d01d      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a64      	ldr	r2, [pc, #400]	; (800818c <DMA_SetConfig+0x264>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d018      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a62      	ldr	r2, [pc, #392]	; (8008190 <DMA_SetConfig+0x268>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d013      	beq.n	8008032 <DMA_SetConfig+0x10a>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a61      	ldr	r2, [pc, #388]	; (8008194 <DMA_SetConfig+0x26c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00e      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a5f      	ldr	r2, [pc, #380]	; (8008198 <DMA_SetConfig+0x270>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d009      	beq.n	8008032 <DMA_SetConfig+0x10a>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a5e      	ldr	r2, [pc, #376]	; (800819c <DMA_SetConfig+0x274>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d004      	beq.n	8008032 <DMA_SetConfig+0x10a>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a5c      	ldr	r2, [pc, #368]	; (80081a0 <DMA_SetConfig+0x278>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d101      	bne.n	8008036 <DMA_SetConfig+0x10e>
 8008032:	2301      	movs	r3, #1
 8008034:	e000      	b.n	8008038 <DMA_SetConfig+0x110>
 8008036:	2300      	movs	r3, #0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00d      	beq.n	8008058 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008044:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008056:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a39      	ldr	r2, [pc, #228]	; (8008144 <DMA_SetConfig+0x21c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d04a      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a38      	ldr	r2, [pc, #224]	; (8008148 <DMA_SetConfig+0x220>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d045      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a36      	ldr	r2, [pc, #216]	; (800814c <DMA_SetConfig+0x224>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d040      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a35      	ldr	r2, [pc, #212]	; (8008150 <DMA_SetConfig+0x228>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d03b      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a33      	ldr	r2, [pc, #204]	; (8008154 <DMA_SetConfig+0x22c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d036      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a32      	ldr	r2, [pc, #200]	; (8008158 <DMA_SetConfig+0x230>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d031      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a30      	ldr	r2, [pc, #192]	; (800815c <DMA_SetConfig+0x234>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d02c      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a2f      	ldr	r2, [pc, #188]	; (8008160 <DMA_SetConfig+0x238>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d027      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a2d      	ldr	r2, [pc, #180]	; (8008164 <DMA_SetConfig+0x23c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d022      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a2c      	ldr	r2, [pc, #176]	; (8008168 <DMA_SetConfig+0x240>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d01d      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a2a      	ldr	r2, [pc, #168]	; (800816c <DMA_SetConfig+0x244>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d018      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a29      	ldr	r2, [pc, #164]	; (8008170 <DMA_SetConfig+0x248>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d013      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a27      	ldr	r2, [pc, #156]	; (8008174 <DMA_SetConfig+0x24c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d00e      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a26      	ldr	r2, [pc, #152]	; (8008178 <DMA_SetConfig+0x250>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d009      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a24      	ldr	r2, [pc, #144]	; (800817c <DMA_SetConfig+0x254>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d004      	beq.n	80080f8 <DMA_SetConfig+0x1d0>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a23      	ldr	r2, [pc, #140]	; (8008180 <DMA_SetConfig+0x258>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d101      	bne.n	80080fc <DMA_SetConfig+0x1d4>
 80080f8:	2301      	movs	r3, #1
 80080fa:	e000      	b.n	80080fe <DMA_SetConfig+0x1d6>
 80080fc:	2300      	movs	r3, #0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d059      	beq.n	80081b6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008106:	f003 031f 	and.w	r3, r3, #31
 800810a:	223f      	movs	r2, #63	; 0x3f
 800810c:	409a      	lsls	r2, r3
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008120:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	2b40      	cmp	r3, #64	; 0x40
 8008130:	d138      	bne.n	80081a4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008142:	e086      	b.n	8008252 <DMA_SetConfig+0x32a>
 8008144:	40020010 	.word	0x40020010
 8008148:	40020028 	.word	0x40020028
 800814c:	40020040 	.word	0x40020040
 8008150:	40020058 	.word	0x40020058
 8008154:	40020070 	.word	0x40020070
 8008158:	40020088 	.word	0x40020088
 800815c:	400200a0 	.word	0x400200a0
 8008160:	400200b8 	.word	0x400200b8
 8008164:	40020410 	.word	0x40020410
 8008168:	40020428 	.word	0x40020428
 800816c:	40020440 	.word	0x40020440
 8008170:	40020458 	.word	0x40020458
 8008174:	40020470 	.word	0x40020470
 8008178:	40020488 	.word	0x40020488
 800817c:	400204a0 	.word	0x400204a0
 8008180:	400204b8 	.word	0x400204b8
 8008184:	58025408 	.word	0x58025408
 8008188:	5802541c 	.word	0x5802541c
 800818c:	58025430 	.word	0x58025430
 8008190:	58025444 	.word	0x58025444
 8008194:	58025458 	.word	0x58025458
 8008198:	5802546c 	.word	0x5802546c
 800819c:	58025480 	.word	0x58025480
 80081a0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	60da      	str	r2, [r3, #12]
}
 80081b4:	e04d      	b.n	8008252 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a29      	ldr	r2, [pc, #164]	; (8008260 <DMA_SetConfig+0x338>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d022      	beq.n	8008206 <DMA_SetConfig+0x2de>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a27      	ldr	r2, [pc, #156]	; (8008264 <DMA_SetConfig+0x33c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d01d      	beq.n	8008206 <DMA_SetConfig+0x2de>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a26      	ldr	r2, [pc, #152]	; (8008268 <DMA_SetConfig+0x340>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d018      	beq.n	8008206 <DMA_SetConfig+0x2de>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a24      	ldr	r2, [pc, #144]	; (800826c <DMA_SetConfig+0x344>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <DMA_SetConfig+0x2de>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a23      	ldr	r2, [pc, #140]	; (8008270 <DMA_SetConfig+0x348>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00e      	beq.n	8008206 <DMA_SetConfig+0x2de>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a21      	ldr	r2, [pc, #132]	; (8008274 <DMA_SetConfig+0x34c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d009      	beq.n	8008206 <DMA_SetConfig+0x2de>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a20      	ldr	r2, [pc, #128]	; (8008278 <DMA_SetConfig+0x350>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <DMA_SetConfig+0x2de>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a1e      	ldr	r2, [pc, #120]	; (800827c <DMA_SetConfig+0x354>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d101      	bne.n	800820a <DMA_SetConfig+0x2e2>
 8008206:	2301      	movs	r3, #1
 8008208:	e000      	b.n	800820c <DMA_SetConfig+0x2e4>
 800820a:	2300      	movs	r3, #0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d020      	beq.n	8008252 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008214:	f003 031f 	and.w	r3, r3, #31
 8008218:	2201      	movs	r2, #1
 800821a:	409a      	lsls	r2, r3
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b40      	cmp	r3, #64	; 0x40
 800822e:	d108      	bne.n	8008242 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	60da      	str	r2, [r3, #12]
}
 8008240:	e007      	b.n	8008252 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	60da      	str	r2, [r3, #12]
}
 8008252:	bf00      	nop
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	58025408 	.word	0x58025408
 8008264:	5802541c 	.word	0x5802541c
 8008268:	58025430 	.word	0x58025430
 800826c:	58025444 	.word	0x58025444
 8008270:	58025458 	.word	0x58025458
 8008274:	5802546c 	.word	0x5802546c
 8008278:	58025480 	.word	0x58025480
 800827c:	58025494 	.word	0x58025494

08008280 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a42      	ldr	r2, [pc, #264]	; (8008398 <DMA_CalcBaseAndBitshift+0x118>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d04a      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a41      	ldr	r2, [pc, #260]	; (800839c <DMA_CalcBaseAndBitshift+0x11c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d045      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a3f      	ldr	r2, [pc, #252]	; (80083a0 <DMA_CalcBaseAndBitshift+0x120>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d040      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a3e      	ldr	r2, [pc, #248]	; (80083a4 <DMA_CalcBaseAndBitshift+0x124>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d03b      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a3c      	ldr	r2, [pc, #240]	; (80083a8 <DMA_CalcBaseAndBitshift+0x128>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d036      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a3b      	ldr	r2, [pc, #236]	; (80083ac <DMA_CalcBaseAndBitshift+0x12c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d031      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a39      	ldr	r2, [pc, #228]	; (80083b0 <DMA_CalcBaseAndBitshift+0x130>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d02c      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a38      	ldr	r2, [pc, #224]	; (80083b4 <DMA_CalcBaseAndBitshift+0x134>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d027      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a36      	ldr	r2, [pc, #216]	; (80083b8 <DMA_CalcBaseAndBitshift+0x138>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d022      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a35      	ldr	r2, [pc, #212]	; (80083bc <DMA_CalcBaseAndBitshift+0x13c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d01d      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a33      	ldr	r2, [pc, #204]	; (80083c0 <DMA_CalcBaseAndBitshift+0x140>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d018      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a32      	ldr	r2, [pc, #200]	; (80083c4 <DMA_CalcBaseAndBitshift+0x144>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d013      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a30      	ldr	r2, [pc, #192]	; (80083c8 <DMA_CalcBaseAndBitshift+0x148>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00e      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a2f      	ldr	r2, [pc, #188]	; (80083cc <DMA_CalcBaseAndBitshift+0x14c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d009      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a2d      	ldr	r2, [pc, #180]	; (80083d0 <DMA_CalcBaseAndBitshift+0x150>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d004      	beq.n	8008328 <DMA_CalcBaseAndBitshift+0xa8>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a2c      	ldr	r2, [pc, #176]	; (80083d4 <DMA_CalcBaseAndBitshift+0x154>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d101      	bne.n	800832c <DMA_CalcBaseAndBitshift+0xac>
 8008328:	2301      	movs	r3, #1
 800832a:	e000      	b.n	800832e <DMA_CalcBaseAndBitshift+0xae>
 800832c:	2300      	movs	r3, #0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d024      	beq.n	800837c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	b2db      	uxtb	r3, r3
 8008338:	3b10      	subs	r3, #16
 800833a:	4a27      	ldr	r2, [pc, #156]	; (80083d8 <DMA_CalcBaseAndBitshift+0x158>)
 800833c:	fba2 2303 	umull	r2, r3, r2, r3
 8008340:	091b      	lsrs	r3, r3, #4
 8008342:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	4a24      	ldr	r2, [pc, #144]	; (80083dc <DMA_CalcBaseAndBitshift+0x15c>)
 800834c:	5cd3      	ldrb	r3, [r2, r3]
 800834e:	461a      	mov	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b03      	cmp	r3, #3
 8008358:	d908      	bls.n	800836c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	4b1f      	ldr	r3, [pc, #124]	; (80083e0 <DMA_CalcBaseAndBitshift+0x160>)
 8008362:	4013      	ands	r3, r2
 8008364:	1d1a      	adds	r2, r3, #4
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	659a      	str	r2, [r3, #88]	; 0x58
 800836a:	e00d      	b.n	8008388 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	4b1b      	ldr	r3, [pc, #108]	; (80083e0 <DMA_CalcBaseAndBitshift+0x160>)
 8008374:	4013      	ands	r3, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6593      	str	r3, [r2, #88]	; 0x58
 800837a:	e005      	b.n	8008388 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	40020010 	.word	0x40020010
 800839c:	40020028 	.word	0x40020028
 80083a0:	40020040 	.word	0x40020040
 80083a4:	40020058 	.word	0x40020058
 80083a8:	40020070 	.word	0x40020070
 80083ac:	40020088 	.word	0x40020088
 80083b0:	400200a0 	.word	0x400200a0
 80083b4:	400200b8 	.word	0x400200b8
 80083b8:	40020410 	.word	0x40020410
 80083bc:	40020428 	.word	0x40020428
 80083c0:	40020440 	.word	0x40020440
 80083c4:	40020458 	.word	0x40020458
 80083c8:	40020470 	.word	0x40020470
 80083cc:	40020488 	.word	0x40020488
 80083d0:	400204a0 	.word	0x400204a0
 80083d4:	400204b8 	.word	0x400204b8
 80083d8:	aaaaaaab 	.word	0xaaaaaaab
 80083dc:	080161c0 	.word	0x080161c0
 80083e0:	fffffc00 	.word	0xfffffc00

080083e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d120      	bne.n	800843a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d858      	bhi.n	80084b2 <DMA_CheckFifoParam+0xce>
 8008400:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <DMA_CheckFifoParam+0x24>)
 8008402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008406:	bf00      	nop
 8008408:	08008419 	.word	0x08008419
 800840c:	0800842b 	.word	0x0800842b
 8008410:	08008419 	.word	0x08008419
 8008414:	080084b3 	.word	0x080084b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d048      	beq.n	80084b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008428:	e045      	b.n	80084b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008432:	d142      	bne.n	80084ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008438:	e03f      	b.n	80084ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008442:	d123      	bne.n	800848c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	2b03      	cmp	r3, #3
 800844a:	d838      	bhi.n	80084be <DMA_CheckFifoParam+0xda>
 800844c:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <DMA_CheckFifoParam+0x70>)
 800844e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008452:	bf00      	nop
 8008454:	08008465 	.word	0x08008465
 8008458:	0800846b 	.word	0x0800846b
 800845c:	08008465 	.word	0x08008465
 8008460:	0800847d 	.word	0x0800847d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	73fb      	strb	r3, [r7, #15]
        break;
 8008468:	e030      	b.n	80084cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d025      	beq.n	80084c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800847a:	e022      	b.n	80084c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008484:	d11f      	bne.n	80084c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800848a:	e01c      	b.n	80084c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008490:	2b02      	cmp	r3, #2
 8008492:	d902      	bls.n	800849a <DMA_CheckFifoParam+0xb6>
 8008494:	2b03      	cmp	r3, #3
 8008496:	d003      	beq.n	80084a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008498:	e018      	b.n	80084cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	73fb      	strb	r3, [r7, #15]
        break;
 800849e:	e015      	b.n	80084cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00e      	beq.n	80084ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	73fb      	strb	r3, [r7, #15]
    break;
 80084b0:	e00b      	b.n	80084ca <DMA_CheckFifoParam+0xe6>
        break;
 80084b2:	bf00      	nop
 80084b4:	e00a      	b.n	80084cc <DMA_CheckFifoParam+0xe8>
        break;
 80084b6:	bf00      	nop
 80084b8:	e008      	b.n	80084cc <DMA_CheckFifoParam+0xe8>
        break;
 80084ba:	bf00      	nop
 80084bc:	e006      	b.n	80084cc <DMA_CheckFifoParam+0xe8>
        break;
 80084be:	bf00      	nop
 80084c0:	e004      	b.n	80084cc <DMA_CheckFifoParam+0xe8>
        break;
 80084c2:	bf00      	nop
 80084c4:	e002      	b.n	80084cc <DMA_CheckFifoParam+0xe8>
        break;
 80084c6:	bf00      	nop
 80084c8:	e000      	b.n	80084cc <DMA_CheckFifoParam+0xe8>
    break;
 80084ca:	bf00      	nop
    }
  }

  return status;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop

080084dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a38      	ldr	r2, [pc, #224]	; (80085d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d022      	beq.n	800853a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a36      	ldr	r2, [pc, #216]	; (80085d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d01d      	beq.n	800853a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a35      	ldr	r2, [pc, #212]	; (80085d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d018      	beq.n	800853a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a33      	ldr	r2, [pc, #204]	; (80085dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a32      	ldr	r2, [pc, #200]	; (80085e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00e      	beq.n	800853a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a30      	ldr	r2, [pc, #192]	; (80085e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d009      	beq.n	800853a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a2f      	ldr	r2, [pc, #188]	; (80085e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d004      	beq.n	800853a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a2d      	ldr	r2, [pc, #180]	; (80085ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d101      	bne.n	800853e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800853e:	2300      	movs	r3, #0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d01a      	beq.n	800857a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	b2db      	uxtb	r3, r3
 800854a:	3b08      	subs	r3, #8
 800854c:	4a28      	ldr	r2, [pc, #160]	; (80085f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800854e:	fba2 2303 	umull	r2, r3, r2, r3
 8008552:	091b      	lsrs	r3, r3, #4
 8008554:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	4b26      	ldr	r3, [pc, #152]	; (80085f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	461a      	mov	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a24      	ldr	r2, [pc, #144]	; (80085f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008568:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f003 031f 	and.w	r3, r3, #31
 8008570:	2201      	movs	r2, #1
 8008572:	409a      	lsls	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008578:	e024      	b.n	80085c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	3b10      	subs	r3, #16
 8008582:	4a1e      	ldr	r2, [pc, #120]	; (80085fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008584:	fba2 2303 	umull	r2, r3, r2, r3
 8008588:	091b      	lsrs	r3, r3, #4
 800858a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	4a1c      	ldr	r2, [pc, #112]	; (8008600 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d806      	bhi.n	80085a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	4a1b      	ldr	r2, [pc, #108]	; (8008604 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d902      	bls.n	80085a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3308      	adds	r3, #8
 80085a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4b18      	ldr	r3, [pc, #96]	; (8008608 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	461a      	mov	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a16      	ldr	r2, [pc, #88]	; (800860c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80085b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f003 031f 	and.w	r3, r3, #31
 80085bc:	2201      	movs	r2, #1
 80085be:	409a      	lsls	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80085c4:	bf00      	nop
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	58025408 	.word	0x58025408
 80085d4:	5802541c 	.word	0x5802541c
 80085d8:	58025430 	.word	0x58025430
 80085dc:	58025444 	.word	0x58025444
 80085e0:	58025458 	.word	0x58025458
 80085e4:	5802546c 	.word	0x5802546c
 80085e8:	58025480 	.word	0x58025480
 80085ec:	58025494 	.word	0x58025494
 80085f0:	cccccccd 	.word	0xcccccccd
 80085f4:	16009600 	.word	0x16009600
 80085f8:	58025880 	.word	0x58025880
 80085fc:	aaaaaaab 	.word	0xaaaaaaab
 8008600:	400204b8 	.word	0x400204b8
 8008604:	4002040f 	.word	0x4002040f
 8008608:	10008200 	.word	0x10008200
 800860c:	40020880 	.word	0x40020880

08008610 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d04a      	beq.n	80086bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b08      	cmp	r3, #8
 800862a:	d847      	bhi.n	80086bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a25      	ldr	r2, [pc, #148]	; (80086c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d022      	beq.n	800867c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a24      	ldr	r2, [pc, #144]	; (80086cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d01d      	beq.n	800867c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a22      	ldr	r2, [pc, #136]	; (80086d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d018      	beq.n	800867c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a21      	ldr	r2, [pc, #132]	; (80086d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d013      	beq.n	800867c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a1f      	ldr	r2, [pc, #124]	; (80086d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d00e      	beq.n	800867c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a1e      	ldr	r2, [pc, #120]	; (80086dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d009      	beq.n	800867c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a1c      	ldr	r2, [pc, #112]	; (80086e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d004      	beq.n	800867c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a1b      	ldr	r2, [pc, #108]	; (80086e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d101      	bne.n	8008680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800867c:	2301      	movs	r3, #1
 800867e:	e000      	b.n	8008682 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008680:	2300      	movs	r3, #0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4b17      	ldr	r3, [pc, #92]	; (80086e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	461a      	mov	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a15      	ldr	r2, [pc, #84]	; (80086ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008698:	671a      	str	r2, [r3, #112]	; 0x70
 800869a:	e009      	b.n	80086b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	4b14      	ldr	r3, [pc, #80]	; (80086f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	461a      	mov	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a11      	ldr	r2, [pc, #68]	; (80086f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80086ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	2201      	movs	r2, #1
 80086b6:	409a      	lsls	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80086bc:	bf00      	nop
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	58025408 	.word	0x58025408
 80086cc:	5802541c 	.word	0x5802541c
 80086d0:	58025430 	.word	0x58025430
 80086d4:	58025444 	.word	0x58025444
 80086d8:	58025458 	.word	0x58025458
 80086dc:	5802546c 	.word	0x5802546c
 80086e0:	58025480 	.word	0x58025480
 80086e4:	58025494 	.word	0x58025494
 80086e8:	1600963f 	.word	0x1600963f
 80086ec:	58025940 	.word	0x58025940
 80086f0:	1000823f 	.word	0x1000823f
 80086f4:	40020940 	.word	0x40020940

080086f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b089      	sub	sp, #36	; 0x24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008706:	4b89      	ldr	r3, [pc, #548]	; (800892c <HAL_GPIO_Init+0x234>)
 8008708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800870a:	e194      	b.n	8008a36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	2101      	movs	r1, #1
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	fa01 f303 	lsl.w	r3, r1, r3
 8008718:	4013      	ands	r3, r2
 800871a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 8186 	beq.w	8008a30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f003 0303 	and.w	r3, r3, #3
 800872c:	2b01      	cmp	r3, #1
 800872e:	d005      	beq.n	800873c <HAL_GPIO_Init+0x44>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f003 0303 	and.w	r3, r3, #3
 8008738:	2b02      	cmp	r3, #2
 800873a:	d130      	bne.n	800879e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	005b      	lsls	r3, r3, #1
 8008746:	2203      	movs	r2, #3
 8008748:	fa02 f303 	lsl.w	r3, r2, r3
 800874c:	43db      	mvns	r3, r3
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	4013      	ands	r3, r2
 8008752:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	68da      	ldr	r2, [r3, #12]
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	005b      	lsls	r3, r3, #1
 800875c:	fa02 f303 	lsl.w	r3, r2, r3
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	4313      	orrs	r3, r2
 8008764:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008772:	2201      	movs	r2, #1
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	fa02 f303 	lsl.w	r3, r2, r3
 800877a:	43db      	mvns	r3, r3
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	4013      	ands	r3, r2
 8008780:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	091b      	lsrs	r3, r3, #4
 8008788:	f003 0201 	and.w	r2, r3, #1
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	fa02 f303 	lsl.w	r3, r2, r3
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	4313      	orrs	r3, r2
 8008796:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d017      	beq.n	80087da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	2203      	movs	r2, #3
 80087b6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ba:	43db      	mvns	r3, r3
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	4013      	ands	r3, r2
 80087c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	fa02 f303 	lsl.w	r3, r2, r3
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d123      	bne.n	800882e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	08da      	lsrs	r2, r3, #3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	3208      	adds	r2, #8
 80087ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	220f      	movs	r2, #15
 80087fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008802:	43db      	mvns	r3, r3
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	4013      	ands	r3, r2
 8008808:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	691a      	ldr	r2, [r3, #16]
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	f003 0307 	and.w	r3, r3, #7
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	fa02 f303 	lsl.w	r3, r2, r3
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	4313      	orrs	r3, r2
 800881e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	08da      	lsrs	r2, r3, #3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3208      	adds	r2, #8
 8008828:	69b9      	ldr	r1, [r7, #24]
 800882a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	2203      	movs	r2, #3
 800883a:	fa02 f303 	lsl.w	r3, r2, r3
 800883e:	43db      	mvns	r3, r3
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	4013      	ands	r3, r2
 8008844:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f003 0203 	and.w	r2, r3, #3
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	fa02 f303 	lsl.w	r3, r2, r3
 8008856:	69ba      	ldr	r2, [r7, #24]
 8008858:	4313      	orrs	r3, r2
 800885a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 80e0 	beq.w	8008a30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008870:	4b2f      	ldr	r3, [pc, #188]	; (8008930 <HAL_GPIO_Init+0x238>)
 8008872:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008876:	4a2e      	ldr	r2, [pc, #184]	; (8008930 <HAL_GPIO_Init+0x238>)
 8008878:	f043 0302 	orr.w	r3, r3, #2
 800887c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008880:	4b2b      	ldr	r3, [pc, #172]	; (8008930 <HAL_GPIO_Init+0x238>)
 8008882:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800888e:	4a29      	ldr	r2, [pc, #164]	; (8008934 <HAL_GPIO_Init+0x23c>)
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	089b      	lsrs	r3, r3, #2
 8008894:	3302      	adds	r3, #2
 8008896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800889a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	220f      	movs	r2, #15
 80088a6:	fa02 f303 	lsl.w	r3, r2, r3
 80088aa:	43db      	mvns	r3, r3
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	4013      	ands	r3, r2
 80088b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a20      	ldr	r2, [pc, #128]	; (8008938 <HAL_GPIO_Init+0x240>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d052      	beq.n	8008960 <HAL_GPIO_Init+0x268>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a1f      	ldr	r2, [pc, #124]	; (800893c <HAL_GPIO_Init+0x244>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d031      	beq.n	8008926 <HAL_GPIO_Init+0x22e>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a1e      	ldr	r2, [pc, #120]	; (8008940 <HAL_GPIO_Init+0x248>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d02b      	beq.n	8008922 <HAL_GPIO_Init+0x22a>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a1d      	ldr	r2, [pc, #116]	; (8008944 <HAL_GPIO_Init+0x24c>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d025      	beq.n	800891e <HAL_GPIO_Init+0x226>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a1c      	ldr	r2, [pc, #112]	; (8008948 <HAL_GPIO_Init+0x250>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d01f      	beq.n	800891a <HAL_GPIO_Init+0x222>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a1b      	ldr	r2, [pc, #108]	; (800894c <HAL_GPIO_Init+0x254>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d019      	beq.n	8008916 <HAL_GPIO_Init+0x21e>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a1a      	ldr	r2, [pc, #104]	; (8008950 <HAL_GPIO_Init+0x258>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d013      	beq.n	8008912 <HAL_GPIO_Init+0x21a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a19      	ldr	r2, [pc, #100]	; (8008954 <HAL_GPIO_Init+0x25c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d00d      	beq.n	800890e <HAL_GPIO_Init+0x216>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a18      	ldr	r2, [pc, #96]	; (8008958 <HAL_GPIO_Init+0x260>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d007      	beq.n	800890a <HAL_GPIO_Init+0x212>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a17      	ldr	r2, [pc, #92]	; (800895c <HAL_GPIO_Init+0x264>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d101      	bne.n	8008906 <HAL_GPIO_Init+0x20e>
 8008902:	2309      	movs	r3, #9
 8008904:	e02d      	b.n	8008962 <HAL_GPIO_Init+0x26a>
 8008906:	230a      	movs	r3, #10
 8008908:	e02b      	b.n	8008962 <HAL_GPIO_Init+0x26a>
 800890a:	2308      	movs	r3, #8
 800890c:	e029      	b.n	8008962 <HAL_GPIO_Init+0x26a>
 800890e:	2307      	movs	r3, #7
 8008910:	e027      	b.n	8008962 <HAL_GPIO_Init+0x26a>
 8008912:	2306      	movs	r3, #6
 8008914:	e025      	b.n	8008962 <HAL_GPIO_Init+0x26a>
 8008916:	2305      	movs	r3, #5
 8008918:	e023      	b.n	8008962 <HAL_GPIO_Init+0x26a>
 800891a:	2304      	movs	r3, #4
 800891c:	e021      	b.n	8008962 <HAL_GPIO_Init+0x26a>
 800891e:	2303      	movs	r3, #3
 8008920:	e01f      	b.n	8008962 <HAL_GPIO_Init+0x26a>
 8008922:	2302      	movs	r3, #2
 8008924:	e01d      	b.n	8008962 <HAL_GPIO_Init+0x26a>
 8008926:	2301      	movs	r3, #1
 8008928:	e01b      	b.n	8008962 <HAL_GPIO_Init+0x26a>
 800892a:	bf00      	nop
 800892c:	58000080 	.word	0x58000080
 8008930:	58024400 	.word	0x58024400
 8008934:	58000400 	.word	0x58000400
 8008938:	58020000 	.word	0x58020000
 800893c:	58020400 	.word	0x58020400
 8008940:	58020800 	.word	0x58020800
 8008944:	58020c00 	.word	0x58020c00
 8008948:	58021000 	.word	0x58021000
 800894c:	58021400 	.word	0x58021400
 8008950:	58021800 	.word	0x58021800
 8008954:	58021c00 	.word	0x58021c00
 8008958:	58022000 	.word	0x58022000
 800895c:	58022400 	.word	0x58022400
 8008960:	2300      	movs	r3, #0
 8008962:	69fa      	ldr	r2, [r7, #28]
 8008964:	f002 0203 	and.w	r2, r2, #3
 8008968:	0092      	lsls	r2, r2, #2
 800896a:	4093      	lsls	r3, r2
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	4313      	orrs	r3, r2
 8008970:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008972:	4938      	ldr	r1, [pc, #224]	; (8008a54 <HAL_GPIO_Init+0x35c>)
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	089b      	lsrs	r3, r3, #2
 8008978:	3302      	adds	r3, #2
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	43db      	mvns	r3, r3
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	4013      	ands	r3, r2
 8008990:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80089a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80089ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	43db      	mvns	r3, r3
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	4013      	ands	r3, r2
 80089be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80089cc:	69ba      	ldr	r2, [r7, #24]
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80089d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	43db      	mvns	r3, r3
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	4013      	ands	r3, r2
 80089ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d003      	beq.n	8008a00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	43db      	mvns	r3, r3
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	4013      	ands	r3, r2
 8008a14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	3301      	adds	r3, #1
 8008a34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f47f ae63 	bne.w	800870c <HAL_GPIO_Init+0x14>
  }
}
 8008a46:	bf00      	nop
 8008a48:	bf00      	nop
 8008a4a:	3724      	adds	r7, #36	; 0x24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	58000400 	.word	0x58000400

08008a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	887b      	ldrh	r3, [r7, #2]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a70:	2301      	movs	r3, #1
 8008a72:	73fb      	strb	r3, [r7, #15]
 8008a74:	e001      	b.n	8008a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	807b      	strh	r3, [r7, #2]
 8008a94:	4613      	mov	r3, r2
 8008a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a98:	787b      	ldrb	r3, [r7, #1]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d003      	beq.n	8008aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a9e:	887a      	ldrh	r2, [r7, #2]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008aa4:	e003      	b.n	8008aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008aa6:	887b      	ldrh	r3, [r7, #2]
 8008aa8:	041a      	lsls	r2, r3, #16
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	619a      	str	r2, [r3, #24]
}
 8008aae:	bf00      	nop
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
	...

08008abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e08b      	b.n	8008be6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d106      	bne.n	8008ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7f8 fbb6 	bl	8001254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2224      	movs	r2, #36	; 0x24
 8008aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0201 	bic.w	r2, r2, #1
 8008afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008b0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d107      	bne.n	8008b36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b32:	609a      	str	r2, [r3, #8]
 8008b34:	e006      	b.n	8008b44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008b42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d108      	bne.n	8008b5e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b5a:	605a      	str	r2, [r3, #4]
 8008b5c:	e007      	b.n	8008b6e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6859      	ldr	r1, [r3, #4]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	4b1d      	ldr	r3, [pc, #116]	; (8008bf0 <HAL_I2C_Init+0x134>)
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68da      	ldr	r2, [r3, #12]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	691a      	ldr	r2, [r3, #16]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	69d9      	ldr	r1, [r3, #28]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a1a      	ldr	r2, [r3, #32]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0201 	orr.w	r2, r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	02008000 	.word	0x02008000

08008bf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b20      	cmp	r3, #32
 8008c08:	d138      	bne.n	8008c7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d101      	bne.n	8008c18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e032      	b.n	8008c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2224      	movs	r2, #36	; 0x24
 8008c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 0201 	bic.w	r2, r2, #1
 8008c36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6819      	ldr	r1, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0201 	orr.w	r2, r2, #1
 8008c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e000      	b.n	8008c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c7c:	2302      	movs	r3, #2
  }
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b085      	sub	sp, #20
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b20      	cmp	r3, #32
 8008c9e:	d139      	bne.n	8008d14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d101      	bne.n	8008cae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008caa:	2302      	movs	r3, #2
 8008cac:	e033      	b.n	8008d16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2224      	movs	r2, #36	; 0x24
 8008cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 0201 	bic.w	r2, r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008cdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	021b      	lsls	r3, r3, #8
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f042 0201 	orr.w	r2, r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	e000      	b.n	8008d16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d14:	2302      	movs	r3, #2
  }
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
	...

08008d24 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d2c:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d32:	4a0c      	ldr	r2, [pc, #48]	; (8008d64 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008d34:	f043 0302 	orr.w	r3, r3, #2
 8008d38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d3c:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008d3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d42:	f003 0302 	and.w	r3, r3, #2
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8008d4a:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	4906      	ldr	r1, [pc, #24]	; (8008d68 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	604b      	str	r3, [r1, #4]
}
 8008d56:	bf00      	nop
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	58024400 	.word	0x58024400
 8008d68:	58000400 	.word	0x58000400

08008d6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d74:	4b19      	ldr	r3, [pc, #100]	; (8008ddc <HAL_PWREx_ConfigSupply+0x70>)
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	d00a      	beq.n	8008d96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d80:	4b16      	ldr	r3, [pc, #88]	; (8008ddc <HAL_PWREx_ConfigSupply+0x70>)
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f003 0307 	and.w	r3, r3, #7
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d001      	beq.n	8008d92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e01f      	b.n	8008dd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e01d      	b.n	8008dd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d96:	4b11      	ldr	r3, [pc, #68]	; (8008ddc <HAL_PWREx_ConfigSupply+0x70>)
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f023 0207 	bic.w	r2, r3, #7
 8008d9e:	490f      	ldr	r1, [pc, #60]	; (8008ddc <HAL_PWREx_ConfigSupply+0x70>)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008da6:	f7fa fd37 	bl	8003818 <HAL_GetTick>
 8008daa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dac:	e009      	b.n	8008dc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008dae:	f7fa fd33 	bl	8003818 <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dbc:	d901      	bls.n	8008dc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e007      	b.n	8008dd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dc2:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <HAL_PWREx_ConfigSupply+0x70>)
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dce:	d1ee      	bne.n	8008dae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	58024800 	.word	0x58024800

08008de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08c      	sub	sp, #48	; 0x30
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d102      	bne.n	8008df4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	f000 bc48 	b.w	8009684 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0301 	and.w	r3, r3, #1
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 8088 	beq.w	8008f12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e02:	4b99      	ldr	r3, [pc, #612]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e0c:	4b96      	ldr	r3, [pc, #600]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	2b10      	cmp	r3, #16
 8008e16:	d007      	beq.n	8008e28 <HAL_RCC_OscConfig+0x48>
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	2b18      	cmp	r3, #24
 8008e1c:	d111      	bne.n	8008e42 <HAL_RCC_OscConfig+0x62>
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	f003 0303 	and.w	r3, r3, #3
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d10c      	bne.n	8008e42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e28:	4b8f      	ldr	r3, [pc, #572]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d06d      	beq.n	8008f10 <HAL_RCC_OscConfig+0x130>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d169      	bne.n	8008f10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	f000 bc21 	b.w	8009684 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e4a:	d106      	bne.n	8008e5a <HAL_RCC_OscConfig+0x7a>
 8008e4c:	4b86      	ldr	r3, [pc, #536]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a85      	ldr	r2, [pc, #532]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	e02e      	b.n	8008eb8 <HAL_RCC_OscConfig+0xd8>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10c      	bne.n	8008e7c <HAL_RCC_OscConfig+0x9c>
 8008e62:	4b81      	ldr	r3, [pc, #516]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a80      	ldr	r2, [pc, #512]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	4b7e      	ldr	r3, [pc, #504]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a7d      	ldr	r2, [pc, #500]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	e01d      	b.n	8008eb8 <HAL_RCC_OscConfig+0xd8>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e84:	d10c      	bne.n	8008ea0 <HAL_RCC_OscConfig+0xc0>
 8008e86:	4b78      	ldr	r3, [pc, #480]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a77      	ldr	r2, [pc, #476]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	4b75      	ldr	r3, [pc, #468]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a74      	ldr	r2, [pc, #464]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	e00b      	b.n	8008eb8 <HAL_RCC_OscConfig+0xd8>
 8008ea0:	4b71      	ldr	r3, [pc, #452]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a70      	ldr	r2, [pc, #448]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	4b6e      	ldr	r3, [pc, #440]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a6d      	ldr	r2, [pc, #436]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d013      	beq.n	8008ee8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec0:	f7fa fcaa 	bl	8003818 <HAL_GetTick>
 8008ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ec6:	e008      	b.n	8008eda <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ec8:	f7fa fca6 	bl	8003818 <HAL_GetTick>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	2b64      	cmp	r3, #100	; 0x64
 8008ed4:	d901      	bls.n	8008eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e3d4      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008eda:	4b63      	ldr	r3, [pc, #396]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0f0      	beq.n	8008ec8 <HAL_RCC_OscConfig+0xe8>
 8008ee6:	e014      	b.n	8008f12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee8:	f7fa fc96 	bl	8003818 <HAL_GetTick>
 8008eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008eee:	e008      	b.n	8008f02 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ef0:	f7fa fc92 	bl	8003818 <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	2b64      	cmp	r3, #100	; 0x64
 8008efc:	d901      	bls.n	8008f02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e3c0      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f02:	4b59      	ldr	r3, [pc, #356]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1f0      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x110>
 8008f0e:	e000      	b.n	8008f12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 80ca 	beq.w	80090b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f20:	4b51      	ldr	r3, [pc, #324]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f2a:	4b4f      	ldr	r3, [pc, #316]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d007      	beq.n	8008f46 <HAL_RCC_OscConfig+0x166>
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	2b18      	cmp	r3, #24
 8008f3a:	d156      	bne.n	8008fea <HAL_RCC_OscConfig+0x20a>
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	f003 0303 	and.w	r3, r3, #3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d151      	bne.n	8008fea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f46:	4b48      	ldr	r3, [pc, #288]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d005      	beq.n	8008f5e <HAL_RCC_OscConfig+0x17e>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e392      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f5e:	4b42      	ldr	r3, [pc, #264]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f023 0219 	bic.w	r2, r3, #25
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	493f      	ldr	r1, [pc, #252]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f70:	f7fa fc52 	bl	8003818 <HAL_GetTick>
 8008f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f76:	e008      	b.n	8008f8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f78:	f7fa fc4e 	bl	8003818 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d901      	bls.n	8008f8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e37c      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f8a:	4b37      	ldr	r3, [pc, #220]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0304 	and.w	r3, r3, #4
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0f0      	beq.n	8008f78 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f96:	f7fa fc4b 	bl	8003830 <HAL_GetREVID>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d817      	bhi.n	8008fd4 <HAL_RCC_OscConfig+0x1f4>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	2b40      	cmp	r3, #64	; 0x40
 8008faa:	d108      	bne.n	8008fbe <HAL_RCC_OscConfig+0x1de>
 8008fac:	4b2e      	ldr	r3, [pc, #184]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008fb4:	4a2c      	ldr	r2, [pc, #176]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fbc:	e07a      	b.n	80090b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fbe:	4b2a      	ldr	r3, [pc, #168]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	031b      	lsls	r3, r3, #12
 8008fcc:	4926      	ldr	r1, [pc, #152]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fd2:	e06f      	b.n	80090b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fd4:	4b24      	ldr	r3, [pc, #144]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	061b      	lsls	r3, r3, #24
 8008fe2:	4921      	ldr	r1, [pc, #132]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fe8:	e064      	b.n	80090b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d047      	beq.n	8009082 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ff2:	4b1d      	ldr	r3, [pc, #116]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f023 0219 	bic.w	r2, r3, #25
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	491a      	ldr	r1, [pc, #104]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8009000:	4313      	orrs	r3, r2
 8009002:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009004:	f7fa fc08 	bl	8003818 <HAL_GetTick>
 8009008:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800900a:	e008      	b.n	800901e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800900c:	f7fa fc04 	bl	8003818 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	2b02      	cmp	r3, #2
 8009018:	d901      	bls.n	800901e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e332      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800901e:	4b12      	ldr	r3, [pc, #72]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0f0      	beq.n	800900c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800902a:	f7fa fc01 	bl	8003830 <HAL_GetREVID>
 800902e:	4603      	mov	r3, r0
 8009030:	f241 0203 	movw	r2, #4099	; 0x1003
 8009034:	4293      	cmp	r3, r2
 8009036:	d819      	bhi.n	800906c <HAL_RCC_OscConfig+0x28c>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	2b40      	cmp	r3, #64	; 0x40
 800903e:	d108      	bne.n	8009052 <HAL_RCC_OscConfig+0x272>
 8009040:	4b09      	ldr	r3, [pc, #36]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009048:	4a07      	ldr	r2, [pc, #28]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 800904a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800904e:	6053      	str	r3, [r2, #4]
 8009050:	e030      	b.n	80090b4 <HAL_RCC_OscConfig+0x2d4>
 8009052:	4b05      	ldr	r3, [pc, #20]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	031b      	lsls	r3, r3, #12
 8009060:	4901      	ldr	r1, [pc, #4]	; (8009068 <HAL_RCC_OscConfig+0x288>)
 8009062:	4313      	orrs	r3, r2
 8009064:	604b      	str	r3, [r1, #4]
 8009066:	e025      	b.n	80090b4 <HAL_RCC_OscConfig+0x2d4>
 8009068:	58024400 	.word	0x58024400
 800906c:	4b9a      	ldr	r3, [pc, #616]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	061b      	lsls	r3, r3, #24
 800907a:	4997      	ldr	r1, [pc, #604]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 800907c:	4313      	orrs	r3, r2
 800907e:	604b      	str	r3, [r1, #4]
 8009080:	e018      	b.n	80090b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009082:	4b95      	ldr	r3, [pc, #596]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a94      	ldr	r2, [pc, #592]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 8009088:	f023 0301 	bic.w	r3, r3, #1
 800908c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800908e:	f7fa fbc3 	bl	8003818 <HAL_GetTick>
 8009092:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009094:	e008      	b.n	80090a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009096:	f7fa fbbf 	bl	8003818 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d901      	bls.n	80090a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e2ed      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090a8:	4b8b      	ldr	r3, [pc, #556]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1f0      	bne.n	8009096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0310 	and.w	r3, r3, #16
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 80a9 	beq.w	8009214 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090c2:	4b85      	ldr	r3, [pc, #532]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80090cc:	4b82      	ldr	r3, [pc, #520]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80090ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	2b08      	cmp	r3, #8
 80090d6:	d007      	beq.n	80090e8 <HAL_RCC_OscConfig+0x308>
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	2b18      	cmp	r3, #24
 80090dc:	d13a      	bne.n	8009154 <HAL_RCC_OscConfig+0x374>
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f003 0303 	and.w	r3, r3, #3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d135      	bne.n	8009154 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090e8:	4b7b      	ldr	r3, [pc, #492]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <HAL_RCC_OscConfig+0x320>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	2b80      	cmp	r3, #128	; 0x80
 80090fa:	d001      	beq.n	8009100 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e2c1      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009100:	f7fa fb96 	bl	8003830 <HAL_GetREVID>
 8009104:	4603      	mov	r3, r0
 8009106:	f241 0203 	movw	r2, #4099	; 0x1003
 800910a:	4293      	cmp	r3, r2
 800910c:	d817      	bhi.n	800913e <HAL_RCC_OscConfig+0x35e>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	2b20      	cmp	r3, #32
 8009114:	d108      	bne.n	8009128 <HAL_RCC_OscConfig+0x348>
 8009116:	4b70      	ldr	r3, [pc, #448]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800911e:	4a6e      	ldr	r2, [pc, #440]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 8009120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009124:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009126:	e075      	b.n	8009214 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009128:	4b6b      	ldr	r3, [pc, #428]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a1b      	ldr	r3, [r3, #32]
 8009134:	069b      	lsls	r3, r3, #26
 8009136:	4968      	ldr	r1, [pc, #416]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 8009138:	4313      	orrs	r3, r2
 800913a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800913c:	e06a      	b.n	8009214 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800913e:	4b66      	ldr	r3, [pc, #408]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	061b      	lsls	r3, r3, #24
 800914c:	4962      	ldr	r1, [pc, #392]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 800914e:	4313      	orrs	r3, r2
 8009150:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009152:	e05f      	b.n	8009214 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d042      	beq.n	80091e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800915c:	4b5e      	ldr	r3, [pc, #376]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a5d      	ldr	r2, [pc, #372]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 8009162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009168:	f7fa fb56 	bl	8003818 <HAL_GetTick>
 800916c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800916e:	e008      	b.n	8009182 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009170:	f7fa fb52 	bl	8003818 <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	2b02      	cmp	r3, #2
 800917c:	d901      	bls.n	8009182 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e280      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009182:	4b55      	ldr	r3, [pc, #340]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0f0      	beq.n	8009170 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800918e:	f7fa fb4f 	bl	8003830 <HAL_GetREVID>
 8009192:	4603      	mov	r3, r0
 8009194:	f241 0203 	movw	r2, #4099	; 0x1003
 8009198:	4293      	cmp	r3, r2
 800919a:	d817      	bhi.n	80091cc <HAL_RCC_OscConfig+0x3ec>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	2b20      	cmp	r3, #32
 80091a2:	d108      	bne.n	80091b6 <HAL_RCC_OscConfig+0x3d6>
 80091a4:	4b4c      	ldr	r3, [pc, #304]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80091ac:	4a4a      	ldr	r2, [pc, #296]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80091ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091b2:	6053      	str	r3, [r2, #4]
 80091b4:	e02e      	b.n	8009214 <HAL_RCC_OscConfig+0x434>
 80091b6:	4b48      	ldr	r3, [pc, #288]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	069b      	lsls	r3, r3, #26
 80091c4:	4944      	ldr	r1, [pc, #272]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	604b      	str	r3, [r1, #4]
 80091ca:	e023      	b.n	8009214 <HAL_RCC_OscConfig+0x434>
 80091cc:	4b42      	ldr	r3, [pc, #264]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a1b      	ldr	r3, [r3, #32]
 80091d8:	061b      	lsls	r3, r3, #24
 80091da:	493f      	ldr	r1, [pc, #252]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80091dc:	4313      	orrs	r3, r2
 80091de:	60cb      	str	r3, [r1, #12]
 80091e0:	e018      	b.n	8009214 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80091e2:	4b3d      	ldr	r3, [pc, #244]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a3c      	ldr	r2, [pc, #240]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80091e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ee:	f7fa fb13 	bl	8003818 <HAL_GetTick>
 80091f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091f4:	e008      	b.n	8009208 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80091f6:	f7fa fb0f 	bl	8003818 <HAL_GetTick>
 80091fa:	4602      	mov	r2, r0
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	2b02      	cmp	r3, #2
 8009202:	d901      	bls.n	8009208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e23d      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009208:	4b33      	ldr	r3, [pc, #204]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1f0      	bne.n	80091f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0308 	and.w	r3, r3, #8
 800921c:	2b00      	cmp	r3, #0
 800921e:	d036      	beq.n	800928e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d019      	beq.n	800925c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009228:	4b2b      	ldr	r3, [pc, #172]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 800922a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800922c:	4a2a      	ldr	r2, [pc, #168]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 800922e:	f043 0301 	orr.w	r3, r3, #1
 8009232:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009234:	f7fa faf0 	bl	8003818 <HAL_GetTick>
 8009238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800923a:	e008      	b.n	800924e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800923c:	f7fa faec 	bl	8003818 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b02      	cmp	r3, #2
 8009248:	d901      	bls.n	800924e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e21a      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800924e:	4b22      	ldr	r3, [pc, #136]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 8009250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0f0      	beq.n	800923c <HAL_RCC_OscConfig+0x45c>
 800925a:	e018      	b.n	800928e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800925c:	4b1e      	ldr	r3, [pc, #120]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 800925e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009260:	4a1d      	ldr	r2, [pc, #116]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 8009262:	f023 0301 	bic.w	r3, r3, #1
 8009266:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009268:	f7fa fad6 	bl	8003818 <HAL_GetTick>
 800926c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800926e:	e008      	b.n	8009282 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009270:	f7fa fad2 	bl	8003818 <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	2b02      	cmp	r3, #2
 800927c:	d901      	bls.n	8009282 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e200      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009282:	4b15      	ldr	r3, [pc, #84]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 8009284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1f0      	bne.n	8009270 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b00      	cmp	r3, #0
 8009298:	d039      	beq.n	800930e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d01c      	beq.n	80092dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80092a2:	4b0d      	ldr	r3, [pc, #52]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a0c      	ldr	r2, [pc, #48]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80092a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80092ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092ae:	f7fa fab3 	bl	8003818 <HAL_GetTick>
 80092b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092b4:	e008      	b.n	80092c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092b6:	f7fa faaf 	bl	8003818 <HAL_GetTick>
 80092ba:	4602      	mov	r2, r0
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d901      	bls.n	80092c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e1dd      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092c8:	4b03      	ldr	r3, [pc, #12]	; (80092d8 <HAL_RCC_OscConfig+0x4f8>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d0f0      	beq.n	80092b6 <HAL_RCC_OscConfig+0x4d6>
 80092d4:	e01b      	b.n	800930e <HAL_RCC_OscConfig+0x52e>
 80092d6:	bf00      	nop
 80092d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092dc:	4b9b      	ldr	r3, [pc, #620]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a9a      	ldr	r2, [pc, #616]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80092e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092e8:	f7fa fa96 	bl	8003818 <HAL_GetTick>
 80092ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092ee:	e008      	b.n	8009302 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092f0:	f7fa fa92 	bl	8003818 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d901      	bls.n	8009302 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e1c0      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009302:	4b92      	ldr	r3, [pc, #584]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1f0      	bne.n	80092f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0304 	and.w	r3, r3, #4
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 8081 	beq.w	800941e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800931c:	4b8c      	ldr	r3, [pc, #560]	; (8009550 <HAL_RCC_OscConfig+0x770>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a8b      	ldr	r2, [pc, #556]	; (8009550 <HAL_RCC_OscConfig+0x770>)
 8009322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009326:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009328:	f7fa fa76 	bl	8003818 <HAL_GetTick>
 800932c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800932e:	e008      	b.n	8009342 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009330:	f7fa fa72 	bl	8003818 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b64      	cmp	r3, #100	; 0x64
 800933c:	d901      	bls.n	8009342 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e1a0      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009342:	4b83      	ldr	r3, [pc, #524]	; (8009550 <HAL_RCC_OscConfig+0x770>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0f0      	beq.n	8009330 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d106      	bne.n	8009364 <HAL_RCC_OscConfig+0x584>
 8009356:	4b7d      	ldr	r3, [pc, #500]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935a:	4a7c      	ldr	r2, [pc, #496]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 800935c:	f043 0301 	orr.w	r3, r3, #1
 8009360:	6713      	str	r3, [r2, #112]	; 0x70
 8009362:	e02d      	b.n	80093c0 <HAL_RCC_OscConfig+0x5e0>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10c      	bne.n	8009386 <HAL_RCC_OscConfig+0x5a6>
 800936c:	4b77      	ldr	r3, [pc, #476]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 800936e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009370:	4a76      	ldr	r2, [pc, #472]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009372:	f023 0301 	bic.w	r3, r3, #1
 8009376:	6713      	str	r3, [r2, #112]	; 0x70
 8009378:	4b74      	ldr	r3, [pc, #464]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 800937a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937c:	4a73      	ldr	r2, [pc, #460]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 800937e:	f023 0304 	bic.w	r3, r3, #4
 8009382:	6713      	str	r3, [r2, #112]	; 0x70
 8009384:	e01c      	b.n	80093c0 <HAL_RCC_OscConfig+0x5e0>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	2b05      	cmp	r3, #5
 800938c:	d10c      	bne.n	80093a8 <HAL_RCC_OscConfig+0x5c8>
 800938e:	4b6f      	ldr	r3, [pc, #444]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009392:	4a6e      	ldr	r2, [pc, #440]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009394:	f043 0304 	orr.w	r3, r3, #4
 8009398:	6713      	str	r3, [r2, #112]	; 0x70
 800939a:	4b6c      	ldr	r3, [pc, #432]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 800939c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800939e:	4a6b      	ldr	r2, [pc, #428]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80093a0:	f043 0301 	orr.w	r3, r3, #1
 80093a4:	6713      	str	r3, [r2, #112]	; 0x70
 80093a6:	e00b      	b.n	80093c0 <HAL_RCC_OscConfig+0x5e0>
 80093a8:	4b68      	ldr	r3, [pc, #416]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80093aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ac:	4a67      	ldr	r2, [pc, #412]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80093ae:	f023 0301 	bic.w	r3, r3, #1
 80093b2:	6713      	str	r3, [r2, #112]	; 0x70
 80093b4:	4b65      	ldr	r3, [pc, #404]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80093b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b8:	4a64      	ldr	r2, [pc, #400]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80093ba:	f023 0304 	bic.w	r3, r3, #4
 80093be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d015      	beq.n	80093f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093c8:	f7fa fa26 	bl	8003818 <HAL_GetTick>
 80093cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093ce:	e00a      	b.n	80093e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093d0:	f7fa fa22 	bl	8003818 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	f241 3288 	movw	r2, #5000	; 0x1388
 80093de:	4293      	cmp	r3, r2
 80093e0:	d901      	bls.n	80093e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e14e      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093e6:	4b59      	ldr	r3, [pc, #356]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80093e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0ee      	beq.n	80093d0 <HAL_RCC_OscConfig+0x5f0>
 80093f2:	e014      	b.n	800941e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093f4:	f7fa fa10 	bl	8003818 <HAL_GetTick>
 80093f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093fa:	e00a      	b.n	8009412 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093fc:	f7fa fa0c 	bl	8003818 <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	f241 3288 	movw	r2, #5000	; 0x1388
 800940a:	4293      	cmp	r3, r2
 800940c:	d901      	bls.n	8009412 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e138      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009412:	4b4e      	ldr	r3, [pc, #312]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1ee      	bne.n	80093fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 812d 	beq.w	8009682 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009428:	4b48      	ldr	r3, [pc, #288]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009430:	2b18      	cmp	r3, #24
 8009432:	f000 80bd 	beq.w	80095b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	2b02      	cmp	r3, #2
 800943c:	f040 809e 	bne.w	800957c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009440:	4b42      	ldr	r3, [pc, #264]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a41      	ldr	r2, [pc, #260]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800944a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800944c:	f7fa f9e4 	bl	8003818 <HAL_GetTick>
 8009450:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009452:	e008      	b.n	8009466 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009454:	f7fa f9e0 	bl	8003818 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b02      	cmp	r3, #2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e10e      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009466:	4b39      	ldr	r3, [pc, #228]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f0      	bne.n	8009454 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009472:	4b36      	ldr	r3, [pc, #216]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009476:	4b37      	ldr	r3, [pc, #220]	; (8009554 <HAL_RCC_OscConfig+0x774>)
 8009478:	4013      	ands	r3, r2
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009482:	0112      	lsls	r2, r2, #4
 8009484:	430a      	orrs	r2, r1
 8009486:	4931      	ldr	r1, [pc, #196]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009488:	4313      	orrs	r3, r2
 800948a:	628b      	str	r3, [r1, #40]	; 0x28
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009490:	3b01      	subs	r3, #1
 8009492:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949a:	3b01      	subs	r3, #1
 800949c:	025b      	lsls	r3, r3, #9
 800949e:	b29b      	uxth	r3, r3
 80094a0:	431a      	orrs	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a6:	3b01      	subs	r3, #1
 80094a8:	041b      	lsls	r3, r3, #16
 80094aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b4:	3b01      	subs	r3, #1
 80094b6:	061b      	lsls	r3, r3, #24
 80094b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094bc:	4923      	ldr	r1, [pc, #140]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80094c2:	4b22      	ldr	r3, [pc, #136]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80094c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c6:	4a21      	ldr	r2, [pc, #132]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80094c8:	f023 0301 	bic.w	r3, r3, #1
 80094cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094ce:	4b1f      	ldr	r3, [pc, #124]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80094d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094d2:	4b21      	ldr	r3, [pc, #132]	; (8009558 <HAL_RCC_OscConfig+0x778>)
 80094d4:	4013      	ands	r3, r2
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094da:	00d2      	lsls	r2, r2, #3
 80094dc:	491b      	ldr	r1, [pc, #108]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80094e2:	4b1a      	ldr	r3, [pc, #104]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	f023 020c 	bic.w	r2, r3, #12
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	4917      	ldr	r1, [pc, #92]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80094f4:	4b15      	ldr	r3, [pc, #84]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	f023 0202 	bic.w	r2, r3, #2
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009500:	4912      	ldr	r1, [pc, #72]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009502:	4313      	orrs	r3, r2
 8009504:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009506:	4b11      	ldr	r3, [pc, #68]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950a:	4a10      	ldr	r2, [pc, #64]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 800950c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009510:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009512:	4b0e      	ldr	r3, [pc, #56]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009516:	4a0d      	ldr	r2, [pc, #52]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800951c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800951e:	4b0b      	ldr	r3, [pc, #44]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	4a0a      	ldr	r2, [pc, #40]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800952a:	4b08      	ldr	r3, [pc, #32]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 800952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952e:	4a07      	ldr	r2, [pc, #28]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009530:	f043 0301 	orr.w	r3, r3, #1
 8009534:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009536:	4b05      	ldr	r3, [pc, #20]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a04      	ldr	r2, [pc, #16]	; (800954c <HAL_RCC_OscConfig+0x76c>)
 800953c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009542:	f7fa f969 	bl	8003818 <HAL_GetTick>
 8009546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009548:	e011      	b.n	800956e <HAL_RCC_OscConfig+0x78e>
 800954a:	bf00      	nop
 800954c:	58024400 	.word	0x58024400
 8009550:	58024800 	.word	0x58024800
 8009554:	fffffc0c 	.word	0xfffffc0c
 8009558:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800955c:	f7fa f95c 	bl	8003818 <HAL_GetTick>
 8009560:	4602      	mov	r2, r0
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	2b02      	cmp	r3, #2
 8009568:	d901      	bls.n	800956e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e08a      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800956e:	4b47      	ldr	r3, [pc, #284]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d0f0      	beq.n	800955c <HAL_RCC_OscConfig+0x77c>
 800957a:	e082      	b.n	8009682 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800957c:	4b43      	ldr	r3, [pc, #268]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a42      	ldr	r2, [pc, #264]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 8009582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009588:	f7fa f946 	bl	8003818 <HAL_GetTick>
 800958c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800958e:	e008      	b.n	80095a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009590:	f7fa f942 	bl	8003818 <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	2b02      	cmp	r3, #2
 800959c:	d901      	bls.n	80095a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e070      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095a2:	4b3a      	ldr	r3, [pc, #232]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1f0      	bne.n	8009590 <HAL_RCC_OscConfig+0x7b0>
 80095ae:	e068      	b.n	8009682 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80095b0:	4b36      	ldr	r3, [pc, #216]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 80095b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80095b6:	4b35      	ldr	r3, [pc, #212]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 80095b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d031      	beq.n	8009628 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	f003 0203 	and.w	r2, r3, #3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d12a      	bne.n	8009628 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	091b      	lsrs	r3, r3, #4
 80095d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095de:	429a      	cmp	r2, r3
 80095e0:	d122      	bne.n	8009628 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d11a      	bne.n	8009628 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	0a5b      	lsrs	r3, r3, #9
 80095f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009600:	429a      	cmp	r2, r3
 8009602:	d111      	bne.n	8009628 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	0c1b      	lsrs	r3, r3, #16
 8009608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009612:	429a      	cmp	r2, r3
 8009614:	d108      	bne.n	8009628 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	0e1b      	lsrs	r3, r3, #24
 800961a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009622:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009624:	429a      	cmp	r2, r3
 8009626:	d001      	beq.n	800962c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e02b      	b.n	8009684 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800962c:	4b17      	ldr	r3, [pc, #92]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 800962e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009630:	08db      	lsrs	r3, r3, #3
 8009632:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009636:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	429a      	cmp	r2, r3
 8009640:	d01f      	beq.n	8009682 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009642:	4b12      	ldr	r3, [pc, #72]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 8009644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009646:	4a11      	ldr	r2, [pc, #68]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 8009648:	f023 0301 	bic.w	r3, r3, #1
 800964c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800964e:	f7fa f8e3 	bl	8003818 <HAL_GetTick>
 8009652:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009654:	bf00      	nop
 8009656:	f7fa f8df 	bl	8003818 <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	4293      	cmp	r3, r2
 8009660:	d0f9      	beq.n	8009656 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009662:	4b0a      	ldr	r3, [pc, #40]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 8009664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009666:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <HAL_RCC_OscConfig+0x8b0>)
 8009668:	4013      	ands	r3, r2
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800966e:	00d2      	lsls	r2, r2, #3
 8009670:	4906      	ldr	r1, [pc, #24]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 8009672:	4313      	orrs	r3, r2
 8009674:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009676:	4b05      	ldr	r3, [pc, #20]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 8009678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967a:	4a04      	ldr	r2, [pc, #16]	; (800968c <HAL_RCC_OscConfig+0x8ac>)
 800967c:	f043 0301 	orr.w	r3, r3, #1
 8009680:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3730      	adds	r7, #48	; 0x30
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	58024400 	.word	0x58024400
 8009690:	ffff0007 	.word	0xffff0007

08009694 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e19c      	b.n	80099e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096a8:	4b8a      	ldr	r3, [pc, #552]	; (80098d4 <HAL_RCC_ClockConfig+0x240>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 030f 	and.w	r3, r3, #15
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d910      	bls.n	80096d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096b6:	4b87      	ldr	r3, [pc, #540]	; (80098d4 <HAL_RCC_ClockConfig+0x240>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f023 020f 	bic.w	r2, r3, #15
 80096be:	4985      	ldr	r1, [pc, #532]	; (80098d4 <HAL_RCC_ClockConfig+0x240>)
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096c6:	4b83      	ldr	r3, [pc, #524]	; (80098d4 <HAL_RCC_ClockConfig+0x240>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 030f 	and.w	r3, r3, #15
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d001      	beq.n	80096d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e184      	b.n	80099e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0304 	and.w	r3, r3, #4
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d010      	beq.n	8009706 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	691a      	ldr	r2, [r3, #16]
 80096e8:	4b7b      	ldr	r3, [pc, #492]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d908      	bls.n	8009706 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096f4:	4b78      	ldr	r3, [pc, #480]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	4975      	ldr	r1, [pc, #468]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009702:	4313      	orrs	r3, r2
 8009704:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0308 	and.w	r3, r3, #8
 800970e:	2b00      	cmp	r3, #0
 8009710:	d010      	beq.n	8009734 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	695a      	ldr	r2, [r3, #20]
 8009716:	4b70      	ldr	r3, [pc, #448]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800971e:	429a      	cmp	r2, r3
 8009720:	d908      	bls.n	8009734 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009722:	4b6d      	ldr	r3, [pc, #436]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009724:	69db      	ldr	r3, [r3, #28]
 8009726:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	496a      	ldr	r1, [pc, #424]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009730:	4313      	orrs	r3, r2
 8009732:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0310 	and.w	r3, r3, #16
 800973c:	2b00      	cmp	r3, #0
 800973e:	d010      	beq.n	8009762 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	699a      	ldr	r2, [r3, #24]
 8009744:	4b64      	ldr	r3, [pc, #400]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800974c:	429a      	cmp	r2, r3
 800974e:	d908      	bls.n	8009762 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009750:	4b61      	ldr	r3, [pc, #388]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	495e      	ldr	r1, [pc, #376]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 800975e:	4313      	orrs	r3, r2
 8009760:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b00      	cmp	r3, #0
 800976c:	d010      	beq.n	8009790 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	69da      	ldr	r2, [r3, #28]
 8009772:	4b59      	ldr	r3, [pc, #356]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800977a:	429a      	cmp	r2, r3
 800977c:	d908      	bls.n	8009790 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800977e:	4b56      	ldr	r3, [pc, #344]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	4953      	ldr	r1, [pc, #332]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 800978c:	4313      	orrs	r3, r2
 800978e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 0302 	and.w	r3, r3, #2
 8009798:	2b00      	cmp	r3, #0
 800979a:	d010      	beq.n	80097be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	4b4d      	ldr	r3, [pc, #308]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	f003 030f 	and.w	r3, r3, #15
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d908      	bls.n	80097be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097ac:	4b4a      	ldr	r3, [pc, #296]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	f023 020f 	bic.w	r2, r3, #15
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	4947      	ldr	r1, [pc, #284]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d055      	beq.n	8009876 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80097ca:	4b43      	ldr	r3, [pc, #268]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	4940      	ldr	r1, [pc, #256]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d107      	bne.n	80097f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097e4:	4b3c      	ldr	r3, [pc, #240]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d121      	bne.n	8009834 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e0f6      	b.n	80099e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	d107      	bne.n	800980c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097fc:	4b36      	ldr	r3, [pc, #216]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d115      	bne.n	8009834 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e0ea      	b.n	80099e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d107      	bne.n	8009824 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009814:	4b30      	ldr	r3, [pc, #192]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800981c:	2b00      	cmp	r3, #0
 800981e:	d109      	bne.n	8009834 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e0de      	b.n	80099e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009824:	4b2c      	ldr	r3, [pc, #176]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0304 	and.w	r3, r3, #4
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e0d6      	b.n	80099e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009834:	4b28      	ldr	r3, [pc, #160]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	f023 0207 	bic.w	r2, r3, #7
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	4925      	ldr	r1, [pc, #148]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009842:	4313      	orrs	r3, r2
 8009844:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009846:	f7f9 ffe7 	bl	8003818 <HAL_GetTick>
 800984a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800984c:	e00a      	b.n	8009864 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800984e:	f7f9 ffe3 	bl	8003818 <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	f241 3288 	movw	r2, #5000	; 0x1388
 800985c:	4293      	cmp	r3, r2
 800985e:	d901      	bls.n	8009864 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e0be      	b.n	80099e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009864:	4b1c      	ldr	r3, [pc, #112]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	429a      	cmp	r2, r3
 8009874:	d1eb      	bne.n	800984e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b00      	cmp	r3, #0
 8009880:	d010      	beq.n	80098a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68da      	ldr	r2, [r3, #12]
 8009886:	4b14      	ldr	r3, [pc, #80]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	f003 030f 	and.w	r3, r3, #15
 800988e:	429a      	cmp	r2, r3
 8009890:	d208      	bcs.n	80098a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009892:	4b11      	ldr	r3, [pc, #68]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	f023 020f 	bic.w	r2, r3, #15
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	490e      	ldr	r1, [pc, #56]	; (80098d8 <HAL_RCC_ClockConfig+0x244>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80098a4:	4b0b      	ldr	r3, [pc, #44]	; (80098d4 <HAL_RCC_ClockConfig+0x240>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 030f 	and.w	r3, r3, #15
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d214      	bcs.n	80098dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098b2:	4b08      	ldr	r3, [pc, #32]	; (80098d4 <HAL_RCC_ClockConfig+0x240>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f023 020f 	bic.w	r2, r3, #15
 80098ba:	4906      	ldr	r1, [pc, #24]	; (80098d4 <HAL_RCC_ClockConfig+0x240>)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	4313      	orrs	r3, r2
 80098c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098c2:	4b04      	ldr	r3, [pc, #16]	; (80098d4 <HAL_RCC_ClockConfig+0x240>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 030f 	and.w	r3, r3, #15
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d005      	beq.n	80098dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e086      	b.n	80099e2 <HAL_RCC_ClockConfig+0x34e>
 80098d4:	52002000 	.word	0x52002000
 80098d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0304 	and.w	r3, r3, #4
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d010      	beq.n	800990a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691a      	ldr	r2, [r3, #16]
 80098ec:	4b3f      	ldr	r3, [pc, #252]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d208      	bcs.n	800990a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098f8:	4b3c      	ldr	r3, [pc, #240]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	4939      	ldr	r1, [pc, #228]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 8009906:	4313      	orrs	r3, r2
 8009908:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0308 	and.w	r3, r3, #8
 8009912:	2b00      	cmp	r3, #0
 8009914:	d010      	beq.n	8009938 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695a      	ldr	r2, [r3, #20]
 800991a:	4b34      	ldr	r3, [pc, #208]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009922:	429a      	cmp	r2, r3
 8009924:	d208      	bcs.n	8009938 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009926:	4b31      	ldr	r3, [pc, #196]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	492e      	ldr	r1, [pc, #184]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 8009934:	4313      	orrs	r3, r2
 8009936:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 0310 	and.w	r3, r3, #16
 8009940:	2b00      	cmp	r3, #0
 8009942:	d010      	beq.n	8009966 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	699a      	ldr	r2, [r3, #24]
 8009948:	4b28      	ldr	r3, [pc, #160]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009950:	429a      	cmp	r2, r3
 8009952:	d208      	bcs.n	8009966 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009954:	4b25      	ldr	r3, [pc, #148]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	4922      	ldr	r1, [pc, #136]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 8009962:	4313      	orrs	r3, r2
 8009964:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b00      	cmp	r3, #0
 8009970:	d010      	beq.n	8009994 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	69da      	ldr	r2, [r3, #28]
 8009976:	4b1d      	ldr	r3, [pc, #116]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800997e:	429a      	cmp	r2, r3
 8009980:	d208      	bcs.n	8009994 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009982:	4b1a      	ldr	r3, [pc, #104]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	69db      	ldr	r3, [r3, #28]
 800998e:	4917      	ldr	r1, [pc, #92]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 8009990:	4313      	orrs	r3, r2
 8009992:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009994:	f000 f834 	bl	8009a00 <HAL_RCC_GetSysClockFreq>
 8009998:	4602      	mov	r2, r0
 800999a:	4b14      	ldr	r3, [pc, #80]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	0a1b      	lsrs	r3, r3, #8
 80099a0:	f003 030f 	and.w	r3, r3, #15
 80099a4:	4912      	ldr	r1, [pc, #72]	; (80099f0 <HAL_RCC_ClockConfig+0x35c>)
 80099a6:	5ccb      	ldrb	r3, [r1, r3]
 80099a8:	f003 031f 	and.w	r3, r3, #31
 80099ac:	fa22 f303 	lsr.w	r3, r2, r3
 80099b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099b2:	4b0e      	ldr	r3, [pc, #56]	; (80099ec <HAL_RCC_ClockConfig+0x358>)
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	f003 030f 	and.w	r3, r3, #15
 80099ba:	4a0d      	ldr	r2, [pc, #52]	; (80099f0 <HAL_RCC_ClockConfig+0x35c>)
 80099bc:	5cd3      	ldrb	r3, [r2, r3]
 80099be:	f003 031f 	and.w	r3, r3, #31
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	fa22 f303 	lsr.w	r3, r2, r3
 80099c8:	4a0a      	ldr	r2, [pc, #40]	; (80099f4 <HAL_RCC_ClockConfig+0x360>)
 80099ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099cc:	4a0a      	ldr	r2, [pc, #40]	; (80099f8 <HAL_RCC_ClockConfig+0x364>)
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80099d2:	4b0a      	ldr	r3, [pc, #40]	; (80099fc <HAL_RCC_ClockConfig+0x368>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7f8 fee4 	bl	80027a4 <HAL_InitTick>
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	58024400 	.word	0x58024400
 80099f0:	080161b0 	.word	0x080161b0
 80099f4:	24000090 	.word	0x24000090
 80099f8:	2400008c 	.word	0x2400008c
 80099fc:	24000094 	.word	0x24000094

08009a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b089      	sub	sp, #36	; 0x24
 8009a04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a06:	4bb3      	ldr	r3, [pc, #716]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a0e:	2b18      	cmp	r3, #24
 8009a10:	f200 8155 	bhi.w	8009cbe <HAL_RCC_GetSysClockFreq+0x2be>
 8009a14:	a201      	add	r2, pc, #4	; (adr r2, 8009a1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1a:	bf00      	nop
 8009a1c:	08009a81 	.word	0x08009a81
 8009a20:	08009cbf 	.word	0x08009cbf
 8009a24:	08009cbf 	.word	0x08009cbf
 8009a28:	08009cbf 	.word	0x08009cbf
 8009a2c:	08009cbf 	.word	0x08009cbf
 8009a30:	08009cbf 	.word	0x08009cbf
 8009a34:	08009cbf 	.word	0x08009cbf
 8009a38:	08009cbf 	.word	0x08009cbf
 8009a3c:	08009aa7 	.word	0x08009aa7
 8009a40:	08009cbf 	.word	0x08009cbf
 8009a44:	08009cbf 	.word	0x08009cbf
 8009a48:	08009cbf 	.word	0x08009cbf
 8009a4c:	08009cbf 	.word	0x08009cbf
 8009a50:	08009cbf 	.word	0x08009cbf
 8009a54:	08009cbf 	.word	0x08009cbf
 8009a58:	08009cbf 	.word	0x08009cbf
 8009a5c:	08009aad 	.word	0x08009aad
 8009a60:	08009cbf 	.word	0x08009cbf
 8009a64:	08009cbf 	.word	0x08009cbf
 8009a68:	08009cbf 	.word	0x08009cbf
 8009a6c:	08009cbf 	.word	0x08009cbf
 8009a70:	08009cbf 	.word	0x08009cbf
 8009a74:	08009cbf 	.word	0x08009cbf
 8009a78:	08009cbf 	.word	0x08009cbf
 8009a7c:	08009ab3 	.word	0x08009ab3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a80:	4b94      	ldr	r3, [pc, #592]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0320 	and.w	r3, r3, #32
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d009      	beq.n	8009aa0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a8c:	4b91      	ldr	r3, [pc, #580]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	08db      	lsrs	r3, r3, #3
 8009a92:	f003 0303 	and.w	r3, r3, #3
 8009a96:	4a90      	ldr	r2, [pc, #576]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a98:	fa22 f303 	lsr.w	r3, r2, r3
 8009a9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009a9e:	e111      	b.n	8009cc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009aa0:	4b8d      	ldr	r3, [pc, #564]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009aa2:	61bb      	str	r3, [r7, #24]
      break;
 8009aa4:	e10e      	b.n	8009cc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009aa6:	4b8d      	ldr	r3, [pc, #564]	; (8009cdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009aa8:	61bb      	str	r3, [r7, #24]
      break;
 8009aaa:	e10b      	b.n	8009cc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009aac:	4b8c      	ldr	r3, [pc, #560]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009aae:	61bb      	str	r3, [r7, #24]
      break;
 8009ab0:	e108      	b.n	8009cc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ab2:	4b88      	ldr	r3, [pc, #544]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab6:	f003 0303 	and.w	r3, r3, #3
 8009aba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009abc:	4b85      	ldr	r3, [pc, #532]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac0:	091b      	lsrs	r3, r3, #4
 8009ac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ac6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009ac8:	4b82      	ldr	r3, [pc, #520]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009ad2:	4b80      	ldr	r3, [pc, #512]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad6:	08db      	lsrs	r3, r3, #3
 8009ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	fb02 f303 	mul.w	r3, r2, r3
 8009ae2:	ee07 3a90 	vmov	s15, r3
 8009ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 80e1 	beq.w	8009cb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	f000 8083 	beq.w	8009c04 <HAL_RCC_GetSysClockFreq+0x204>
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	f200 80a1 	bhi.w	8009c48 <HAL_RCC_GetSysClockFreq+0x248>
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <HAL_RCC_GetSysClockFreq+0x114>
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d056      	beq.n	8009bc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009b12:	e099      	b.n	8009c48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b14:	4b6f      	ldr	r3, [pc, #444]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0320 	and.w	r3, r3, #32
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d02d      	beq.n	8009b7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b20:	4b6c      	ldr	r3, [pc, #432]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	08db      	lsrs	r3, r3, #3
 8009b26:	f003 0303 	and.w	r3, r3, #3
 8009b2a:	4a6b      	ldr	r2, [pc, #428]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	ee07 3a90 	vmov	s15, r3
 8009b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	ee07 3a90 	vmov	s15, r3
 8009b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b4a:	4b62      	ldr	r3, [pc, #392]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b52:	ee07 3a90 	vmov	s15, r3
 8009b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009b7a:	e087      	b.n	8009c8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b86:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009ce8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b8e:	4b51      	ldr	r3, [pc, #324]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b96:	ee07 3a90 	vmov	s15, r3
 8009b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ba2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bbe:	e065      	b.n	8009c8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009cec <HAL_RCC_GetSysClockFreq+0x2ec>
 8009bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd2:	4b40      	ldr	r3, [pc, #256]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009be6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c02:	e043      	b.n	8009c8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009cf0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c16:	4b2f      	ldr	r3, [pc, #188]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1e:	ee07 3a90 	vmov	s15, r3
 8009c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c46:	e021      	b.n	8009c8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009cec <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c5a:	4b1e      	ldr	r3, [pc, #120]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c62:	ee07 3a90 	vmov	s15, r3
 8009c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009ce4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009c8c:	4b11      	ldr	r3, [pc, #68]	; (8009cd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c90:	0a5b      	lsrs	r3, r3, #9
 8009c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c96:	3301      	adds	r3, #1
 8009c98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	ee07 3a90 	vmov	s15, r3
 8009ca0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009ca4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cb0:	ee17 3a90 	vmov	r3, s15
 8009cb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009cb6:	e005      	b.n	8009cc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61bb      	str	r3, [r7, #24]
      break;
 8009cbc:	e002      	b.n	8009cc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009cbe:	4b07      	ldr	r3, [pc, #28]	; (8009cdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009cc0:	61bb      	str	r3, [r7, #24]
      break;
 8009cc2:	bf00      	nop
  }

  return sysclockfreq;
 8009cc4:	69bb      	ldr	r3, [r7, #24]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3724      	adds	r7, #36	; 0x24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	03d09000 	.word	0x03d09000
 8009cdc:	003d0900 	.word	0x003d0900
 8009ce0:	017d7840 	.word	0x017d7840
 8009ce4:	46000000 	.word	0x46000000
 8009ce8:	4c742400 	.word	0x4c742400
 8009cec:	4a742400 	.word	0x4a742400
 8009cf0:	4bbebc20 	.word	0x4bbebc20

08009cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009cfa:	f7ff fe81 	bl	8009a00 <HAL_RCC_GetSysClockFreq>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	4b10      	ldr	r3, [pc, #64]	; (8009d44 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	0a1b      	lsrs	r3, r3, #8
 8009d06:	f003 030f 	and.w	r3, r3, #15
 8009d0a:	490f      	ldr	r1, [pc, #60]	; (8009d48 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d0c:	5ccb      	ldrb	r3, [r1, r3]
 8009d0e:	f003 031f 	and.w	r3, r3, #31
 8009d12:	fa22 f303 	lsr.w	r3, r2, r3
 8009d16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d18:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	f003 030f 	and.w	r3, r3, #15
 8009d20:	4a09      	ldr	r2, [pc, #36]	; (8009d48 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d22:	5cd3      	ldrb	r3, [r2, r3]
 8009d24:	f003 031f 	and.w	r3, r3, #31
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d2e:	4a07      	ldr	r2, [pc, #28]	; (8009d4c <HAL_RCC_GetHCLKFreq+0x58>)
 8009d30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009d32:	4a07      	ldr	r2, [pc, #28]	; (8009d50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009d38:	4b04      	ldr	r3, [pc, #16]	; (8009d4c <HAL_RCC_GetHCLKFreq+0x58>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	58024400 	.word	0x58024400
 8009d48:	080161b0 	.word	0x080161b0
 8009d4c:	24000090 	.word	0x24000090
 8009d50:	2400008c 	.word	0x2400008c

08009d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d58:	f7ff ffcc 	bl	8009cf4 <HAL_RCC_GetHCLKFreq>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	4b06      	ldr	r3, [pc, #24]	; (8009d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	091b      	lsrs	r3, r3, #4
 8009d64:	f003 0307 	and.w	r3, r3, #7
 8009d68:	4904      	ldr	r1, [pc, #16]	; (8009d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d6a:	5ccb      	ldrb	r3, [r1, r3]
 8009d6c:	f003 031f 	and.w	r3, r3, #31
 8009d70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	58024400 	.word	0x58024400
 8009d7c:	080161b0 	.word	0x080161b0

08009d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d84:	f7ff ffb6 	bl	8009cf4 <HAL_RCC_GetHCLKFreq>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	4b06      	ldr	r3, [pc, #24]	; (8009da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	0a1b      	lsrs	r3, r3, #8
 8009d90:	f003 0307 	and.w	r3, r3, #7
 8009d94:	4904      	ldr	r1, [pc, #16]	; (8009da8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d96:	5ccb      	ldrb	r3, [r1, r3]
 8009d98:	f003 031f 	and.w	r3, r3, #31
 8009d9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	58024400 	.word	0x58024400
 8009da8:	080161b0 	.word	0x080161b0

08009dac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	223f      	movs	r2, #63	; 0x3f
 8009dba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009dbc:	4b1a      	ldr	r3, [pc, #104]	; (8009e28 <HAL_RCC_GetClockConfig+0x7c>)
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	f003 0207 	and.w	r2, r3, #7
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009dc8:	4b17      	ldr	r3, [pc, #92]	; (8009e28 <HAL_RCC_GetClockConfig+0x7c>)
 8009dca:	699b      	ldr	r3, [r3, #24]
 8009dcc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009dd4:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <HAL_RCC_GetClockConfig+0x7c>)
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	f003 020f 	and.w	r2, r3, #15
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009de0:	4b11      	ldr	r3, [pc, #68]	; (8009e28 <HAL_RCC_GetClockConfig+0x7c>)
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009dec:	4b0e      	ldr	r3, [pc, #56]	; (8009e28 <HAL_RCC_GetClockConfig+0x7c>)
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009df8:	4b0b      	ldr	r3, [pc, #44]	; (8009e28 <HAL_RCC_GetClockConfig+0x7c>)
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009e04:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <HAL_RCC_GetClockConfig+0x7c>)
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009e10:	4b06      	ldr	r3, [pc, #24]	; (8009e2c <HAL_RCC_GetClockConfig+0x80>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 020f 	and.w	r2, r3, #15
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	601a      	str	r2, [r3, #0]
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	58024400 	.word	0x58024400
 8009e2c:	52002000 	.word	0x52002000

08009e30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e34:	b0ca      	sub	sp, #296	; 0x128
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e42:	2300      	movs	r3, #0
 8009e44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e50:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009e54:	2500      	movs	r5, #0
 8009e56:	ea54 0305 	orrs.w	r3, r4, r5
 8009e5a:	d049      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e66:	d02f      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009e68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e6c:	d828      	bhi.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e72:	d01a      	beq.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e78:	d822      	bhi.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e82:	d007      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009e84:	e01c      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e86:	4bb8      	ldr	r3, [pc, #736]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8a:	4ab7      	ldr	r2, [pc, #732]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e92:	e01a      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e98:	3308      	adds	r3, #8
 8009e9a:	2102      	movs	r1, #2
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f002 fb61 	bl	800c564 <RCCEx_PLL2_Config>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ea8:	e00f      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eae:	3328      	adds	r3, #40	; 0x28
 8009eb0:	2102      	movs	r1, #2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f002 fc08 	bl	800c6c8 <RCCEx_PLL3_Config>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ebe:	e004      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ec6:	e000      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009ed2:	4ba5      	ldr	r3, [pc, #660]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ee0:	4aa1      	ldr	r2, [pc, #644]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ee2:	430b      	orrs	r3, r1
 8009ee4:	6513      	str	r3, [r2, #80]	; 0x50
 8009ee6:	e003      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009efc:	f04f 0900 	mov.w	r9, #0
 8009f00:	ea58 0309 	orrs.w	r3, r8, r9
 8009f04:	d047      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0c:	2b04      	cmp	r3, #4
 8009f0e:	d82a      	bhi.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009f10:	a201      	add	r2, pc, #4	; (adr r2, 8009f18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f16:	bf00      	nop
 8009f18:	08009f2d 	.word	0x08009f2d
 8009f1c:	08009f3b 	.word	0x08009f3b
 8009f20:	08009f51 	.word	0x08009f51
 8009f24:	08009f6f 	.word	0x08009f6f
 8009f28:	08009f6f 	.word	0x08009f6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f2c:	4b8e      	ldr	r3, [pc, #568]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f30:	4a8d      	ldr	r2, [pc, #564]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f38:	e01a      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f3e:	3308      	adds	r3, #8
 8009f40:	2100      	movs	r1, #0
 8009f42:	4618      	mov	r0, r3
 8009f44:	f002 fb0e 	bl	800c564 <RCCEx_PLL2_Config>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f4e:	e00f      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f54:	3328      	adds	r3, #40	; 0x28
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f002 fbb5 	bl	800c6c8 <RCCEx_PLL3_Config>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f64:	e004      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f6c:	e000      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10a      	bne.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f78:	4b7b      	ldr	r3, [pc, #492]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f7c:	f023 0107 	bic.w	r1, r3, #7
 8009f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f86:	4a78      	ldr	r2, [pc, #480]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f88:	430b      	orrs	r3, r1
 8009f8a:	6513      	str	r3, [r2, #80]	; 0x50
 8009f8c:	e003      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009fa2:	f04f 0b00 	mov.w	fp, #0
 8009fa6:	ea5a 030b 	orrs.w	r3, sl, fp
 8009faa:	d04c      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb6:	d030      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fbc:	d829      	bhi.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8009fc0:	d02d      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8009fc4:	d825      	bhi.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009fc6:	2b80      	cmp	r3, #128	; 0x80
 8009fc8:	d018      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009fca:	2b80      	cmp	r3, #128	; 0x80
 8009fcc:	d821      	bhi.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d002      	beq.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009fd2:	2b40      	cmp	r3, #64	; 0x40
 8009fd4:	d007      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009fd6:	e01c      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fd8:	4b63      	ldr	r3, [pc, #396]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	4a62      	ldr	r2, [pc, #392]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009fe4:	e01c      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fea:	3308      	adds	r3, #8
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f002 fab8 	bl	800c564 <RCCEx_PLL2_Config>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009ffa:	e011      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a000:	3328      	adds	r3, #40	; 0x28
 800a002:	2100      	movs	r1, #0
 800a004:	4618      	mov	r0, r3
 800a006:	f002 fb5f 	bl	800c6c8 <RCCEx_PLL3_Config>
 800a00a:	4603      	mov	r3, r0
 800a00c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a010:	e006      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a018:	e002      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a01a:	bf00      	nop
 800a01c:	e000      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a01e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a028:	4b4f      	ldr	r3, [pc, #316]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a02c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a036:	4a4c      	ldr	r2, [pc, #304]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a038:	430b      	orrs	r3, r1
 800a03a:	6513      	str	r3, [r2, #80]	; 0x50
 800a03c:	e003      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a03e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a042:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a052:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a056:	2300      	movs	r3, #0
 800a058:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a05c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a060:	460b      	mov	r3, r1
 800a062:	4313      	orrs	r3, r2
 800a064:	d053      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a06e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a072:	d035      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a074:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a078:	d82e      	bhi.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a07a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a07e:	d031      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a080:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a084:	d828      	bhi.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a08a:	d01a      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a08c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a090:	d822      	bhi.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a092:	2b00      	cmp	r3, #0
 800a094:	d003      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a09a:	d007      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a09c:	e01c      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a09e:	4b32      	ldr	r3, [pc, #200]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a2:	4a31      	ldr	r2, [pc, #196]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0aa:	e01c      	b.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b0:	3308      	adds	r3, #8
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f002 fa55 	bl	800c564 <RCCEx_PLL2_Config>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a0c0:	e011      	b.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c6:	3328      	adds	r3, #40	; 0x28
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f002 fafc 	bl	800c6c8 <RCCEx_PLL3_Config>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0d6:	e006      	b.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0de:	e002      	b.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a0e0:	bf00      	nop
 800a0e2:	e000      	b.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a0e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10b      	bne.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a0ee:	4b1e      	ldr	r3, [pc, #120]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0fe:	4a1a      	ldr	r2, [pc, #104]	; (800a168 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a100:	430b      	orrs	r3, r1
 800a102:	6593      	str	r3, [r2, #88]	; 0x58
 800a104:	e003      	b.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a10a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a11a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a11e:	2300      	movs	r3, #0
 800a120:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a124:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800a128:	460b      	mov	r3, r1
 800a12a:	4313      	orrs	r3, r2
 800a12c:	d056      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a132:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a136:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a13a:	d038      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a13c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a140:	d831      	bhi.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a142:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a146:	d034      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a148:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a14c:	d82b      	bhi.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a14e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a152:	d01d      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a158:	d825      	bhi.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d006      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a15e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a162:	d00a      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a164:	e01f      	b.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a166:	bf00      	nop
 800a168:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a16c:	4ba2      	ldr	r3, [pc, #648]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	4aa1      	ldr	r2, [pc, #644]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a176:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a178:	e01c      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a17e:	3308      	adds	r3, #8
 800a180:	2100      	movs	r1, #0
 800a182:	4618      	mov	r0, r3
 800a184:	f002 f9ee 	bl	800c564 <RCCEx_PLL2_Config>
 800a188:	4603      	mov	r3, r0
 800a18a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a18e:	e011      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a194:	3328      	adds	r3, #40	; 0x28
 800a196:	2100      	movs	r1, #0
 800a198:	4618      	mov	r0, r3
 800a19a:	f002 fa95 	bl	800c6c8 <RCCEx_PLL3_Config>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1a4:	e006      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1ac:	e002      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a1ae:	bf00      	nop
 800a1b0:	e000      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a1b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10b      	bne.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a1bc:	4b8e      	ldr	r3, [pc, #568]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1cc:	4a8a      	ldr	r2, [pc, #552]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1ce:	430b      	orrs	r3, r1
 800a1d0:	6593      	str	r3, [r2, #88]	; 0x58
 800a1d2:	e003      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a1e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a1f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	d03a      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a202:	2b30      	cmp	r3, #48	; 0x30
 800a204:	d01f      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a206:	2b30      	cmp	r3, #48	; 0x30
 800a208:	d819      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a20a:	2b20      	cmp	r3, #32
 800a20c:	d00c      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a20e:	2b20      	cmp	r3, #32
 800a210:	d815      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a212:	2b00      	cmp	r3, #0
 800a214:	d019      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a216:	2b10      	cmp	r3, #16
 800a218:	d111      	bne.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a21a:	4b77      	ldr	r3, [pc, #476]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21e:	4a76      	ldr	r2, [pc, #472]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a224:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a226:	e011      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22c:	3308      	adds	r3, #8
 800a22e:	2102      	movs	r1, #2
 800a230:	4618      	mov	r0, r3
 800a232:	f002 f997 	bl	800c564 <RCCEx_PLL2_Config>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a23c:	e006      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a244:	e002      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a246:	bf00      	nop
 800a248:	e000      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a24a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a24c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10a      	bne.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a254:	4b68      	ldr	r3, [pc, #416]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a258:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a262:	4a65      	ldr	r2, [pc, #404]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a264:	430b      	orrs	r3, r1
 800a266:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a268:	e003      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a26e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a27e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a282:	2300      	movs	r3, #0
 800a284:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a288:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a28c:	460b      	mov	r3, r1
 800a28e:	4313      	orrs	r3, r2
 800a290:	d051      	beq.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a29c:	d035      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a29e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2a2:	d82e      	bhi.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a2a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2a8:	d031      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a2aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2ae:	d828      	bhi.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a2b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2b4:	d01a      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a2b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ba:	d822      	bhi.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a2c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2c4:	d007      	beq.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a2c6:	e01c      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2c8:	4b4b      	ldr	r3, [pc, #300]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2cc:	4a4a      	ldr	r2, [pc, #296]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2d4:	e01c      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2da:	3308      	adds	r3, #8
 800a2dc:	2100      	movs	r1, #0
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f002 f940 	bl	800c564 <RCCEx_PLL2_Config>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2ea:	e011      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f0:	3328      	adds	r3, #40	; 0x28
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f002 f9e7 	bl	800c6c8 <RCCEx_PLL3_Config>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a300:	e006      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a308:	e002      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a30a:	bf00      	nop
 800a30c:	e000      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a30e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a310:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10a      	bne.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a318:	4b37      	ldr	r3, [pc, #220]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a31a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a31c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a326:	4a34      	ldr	r2, [pc, #208]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a328:	430b      	orrs	r3, r1
 800a32a:	6513      	str	r3, [r2, #80]	; 0x50
 800a32c:	e003      	b.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a32e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a342:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a346:	2300      	movs	r3, #0
 800a348:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a34c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a350:	460b      	mov	r3, r1
 800a352:	4313      	orrs	r3, r2
 800a354:	d056      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a35a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a35c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a360:	d033      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a362:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a366:	d82c      	bhi.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a368:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a36c:	d02f      	beq.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a36e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a372:	d826      	bhi.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a374:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a378:	d02b      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a37a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a37e:	d820      	bhi.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a384:	d012      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a38a:	d81a      	bhi.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d022      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a394:	d115      	bne.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a39a:	3308      	adds	r3, #8
 800a39c:	2101      	movs	r1, #1
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f002 f8e0 	bl	800c564 <RCCEx_PLL2_Config>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a3aa:	e015      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b0:	3328      	adds	r3, #40	; 0x28
 800a3b2:	2101      	movs	r1, #1
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f002 f987 	bl	800c6c8 <RCCEx_PLL3_Config>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a3c0:	e00a      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3c8:	e006      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a3ca:	bf00      	nop
 800a3cc:	e004      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a3ce:	bf00      	nop
 800a3d0:	e002      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a3d2:	bf00      	nop
 800a3d4:	e000      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a3d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10d      	bne.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a3e0:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3ee:	4a02      	ldr	r2, [pc, #8]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a3f0:	430b      	orrs	r3, r1
 800a3f2:	6513      	str	r3, [r2, #80]	; 0x50
 800a3f4:	e006      	b.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a3f6:	bf00      	nop
 800a3f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a400:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a414:	2300      	movs	r3, #0
 800a416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a41a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a41e:	460b      	mov	r3, r1
 800a420:	4313      	orrs	r3, r2
 800a422:	d055      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a42c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a430:	d033      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a436:	d82c      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a43c:	d02f      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a43e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a442:	d826      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a444:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a448:	d02b      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a44a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a44e:	d820      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a454:	d012      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a45a:	d81a      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d022      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a464:	d115      	bne.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a46a:	3308      	adds	r3, #8
 800a46c:	2101      	movs	r1, #1
 800a46e:	4618      	mov	r0, r3
 800a470:	f002 f878 	bl	800c564 <RCCEx_PLL2_Config>
 800a474:	4603      	mov	r3, r0
 800a476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a47a:	e015      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a480:	3328      	adds	r3, #40	; 0x28
 800a482:	2101      	movs	r1, #1
 800a484:	4618      	mov	r0, r3
 800a486:	f002 f91f 	bl	800c6c8 <RCCEx_PLL3_Config>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a490:	e00a      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a498:	e006      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a49a:	bf00      	nop
 800a49c:	e004      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a49e:	bf00      	nop
 800a4a0:	e002      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4a2:	bf00      	nop
 800a4a4:	e000      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10b      	bne.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a4b0:	4ba3      	ldr	r3, [pc, #652]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4b4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4c0:	4a9f      	ldr	r2, [pc, #636]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4c2:	430b      	orrs	r3, r1
 800a4c4:	6593      	str	r3, [r2, #88]	; 0x58
 800a4c6:	e003      	b.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a4dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a4e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	d037      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4fa:	d00e      	beq.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a4fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a500:	d816      	bhi.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a502:	2b00      	cmp	r3, #0
 800a504:	d018      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a50a:	d111      	bne.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a50c:	4b8c      	ldr	r3, [pc, #560]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a510:	4a8b      	ldr	r2, [pc, #556]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a518:	e00f      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a51e:	3308      	adds	r3, #8
 800a520:	2101      	movs	r1, #1
 800a522:	4618      	mov	r0, r3
 800a524:	f002 f81e 	bl	800c564 <RCCEx_PLL2_Config>
 800a528:	4603      	mov	r3, r0
 800a52a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a52e:	e004      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a536:	e000      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a53a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10a      	bne.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a542:	4b7f      	ldr	r3, [pc, #508]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a546:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a550:	4a7b      	ldr	r2, [pc, #492]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a552:	430b      	orrs	r3, r1
 800a554:	6513      	str	r3, [r2, #80]	; 0x50
 800a556:	e003      	b.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a55c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a56c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a570:	2300      	movs	r3, #0
 800a572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a576:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a57a:	460b      	mov	r3, r1
 800a57c:	4313      	orrs	r3, r2
 800a57e:	d039      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a586:	2b03      	cmp	r3, #3
 800a588:	d81c      	bhi.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a58a:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a590:	0800a5cd 	.word	0x0800a5cd
 800a594:	0800a5a1 	.word	0x0800a5a1
 800a598:	0800a5af 	.word	0x0800a5af
 800a59c:	0800a5cd 	.word	0x0800a5cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5a0:	4b67      	ldr	r3, [pc, #412]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	4a66      	ldr	r2, [pc, #408]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a5ac:	e00f      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	2102      	movs	r1, #2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f001 ffd4 	bl	800c564 <RCCEx_PLL2_Config>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a5c2:	e004      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5ca:	e000      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a5cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10a      	bne.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a5d6:	4b5a      	ldr	r3, [pc, #360]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5da:	f023 0103 	bic.w	r1, r3, #3
 800a5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5e4:	4a56      	ldr	r2, [pc, #344]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5e6:	430b      	orrs	r3, r1
 800a5e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5ea:	e003      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a600:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a604:	2300      	movs	r3, #0
 800a606:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a60a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a60e:	460b      	mov	r3, r1
 800a610:	4313      	orrs	r3, r2
 800a612:	f000 809f 	beq.w	800a754 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a616:	4b4b      	ldr	r3, [pc, #300]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a4a      	ldr	r2, [pc, #296]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a61c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a620:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a622:	f7f9 f8f9 	bl	8003818 <HAL_GetTick>
 800a626:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a62a:	e00b      	b.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a62c:	f7f9 f8f4 	bl	8003818 <HAL_GetTick>
 800a630:	4602      	mov	r2, r0
 800a632:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a636:	1ad3      	subs	r3, r2, r3
 800a638:	2b64      	cmp	r3, #100	; 0x64
 800a63a:	d903      	bls.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a642:	e005      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a644:	4b3f      	ldr	r3, [pc, #252]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d0ed      	beq.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a654:	2b00      	cmp	r3, #0
 800a656:	d179      	bne.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a658:	4b39      	ldr	r3, [pc, #228]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a65a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a660:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a664:	4053      	eors	r3, r2
 800a666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d015      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a66e:	4b34      	ldr	r3, [pc, #208]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a676:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a67a:	4b31      	ldr	r3, [pc, #196]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a67e:	4a30      	ldr	r2, [pc, #192]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a684:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a686:	4b2e      	ldr	r3, [pc, #184]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a68a:	4a2d      	ldr	r2, [pc, #180]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a68c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a690:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a692:	4a2b      	ldr	r2, [pc, #172]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a694:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a698:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a69e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a6a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6a6:	d118      	bne.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6a8:	f7f9 f8b6 	bl	8003818 <HAL_GetTick>
 800a6ac:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6b0:	e00d      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6b2:	f7f9 f8b1 	bl	8003818 <HAL_GetTick>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a6bc:	1ad2      	subs	r2, r2, r3
 800a6be:	f241 3388 	movw	r3, #5000	; 0x1388
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d903      	bls.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a6cc:	e005      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6ce:	4b1c      	ldr	r3, [pc, #112]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d2:	f003 0302 	and.w	r3, r3, #2
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0eb      	beq.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a6da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d129      	bne.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a6ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6f2:	d10e      	bne.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a6f4:	4b12      	ldr	r3, [pc, #72]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a700:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a704:	091a      	lsrs	r2, r3, #4
 800a706:	4b10      	ldr	r3, [pc, #64]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a708:	4013      	ands	r3, r2
 800a70a:	4a0d      	ldr	r2, [pc, #52]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a70c:	430b      	orrs	r3, r1
 800a70e:	6113      	str	r3, [r2, #16]
 800a710:	e005      	b.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a712:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	4a0a      	ldr	r2, [pc, #40]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a718:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a71c:	6113      	str	r3, [r2, #16]
 800a71e:	4b08      	ldr	r3, [pc, #32]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a720:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a726:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a72a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a72e:	4a04      	ldr	r2, [pc, #16]	; (800a740 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a730:	430b      	orrs	r3, r1
 800a732:	6713      	str	r3, [r2, #112]	; 0x70
 800a734:	e00e      	b.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a73a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a73e:	e009      	b.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a740:	58024400 	.word	0x58024400
 800a744:	58024800 	.word	0x58024800
 800a748:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a74c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a750:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	f002 0301 	and.w	r3, r2, #1
 800a760:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a764:	2300      	movs	r3, #0
 800a766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a76a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a76e:	460b      	mov	r3, r1
 800a770:	4313      	orrs	r3, r2
 800a772:	f000 8089 	beq.w	800a888 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a77c:	2b28      	cmp	r3, #40	; 0x28
 800a77e:	d86b      	bhi.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a780:	a201      	add	r2, pc, #4	; (adr r2, 800a788 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a786:	bf00      	nop
 800a788:	0800a861 	.word	0x0800a861
 800a78c:	0800a859 	.word	0x0800a859
 800a790:	0800a859 	.word	0x0800a859
 800a794:	0800a859 	.word	0x0800a859
 800a798:	0800a859 	.word	0x0800a859
 800a79c:	0800a859 	.word	0x0800a859
 800a7a0:	0800a859 	.word	0x0800a859
 800a7a4:	0800a859 	.word	0x0800a859
 800a7a8:	0800a82d 	.word	0x0800a82d
 800a7ac:	0800a859 	.word	0x0800a859
 800a7b0:	0800a859 	.word	0x0800a859
 800a7b4:	0800a859 	.word	0x0800a859
 800a7b8:	0800a859 	.word	0x0800a859
 800a7bc:	0800a859 	.word	0x0800a859
 800a7c0:	0800a859 	.word	0x0800a859
 800a7c4:	0800a859 	.word	0x0800a859
 800a7c8:	0800a843 	.word	0x0800a843
 800a7cc:	0800a859 	.word	0x0800a859
 800a7d0:	0800a859 	.word	0x0800a859
 800a7d4:	0800a859 	.word	0x0800a859
 800a7d8:	0800a859 	.word	0x0800a859
 800a7dc:	0800a859 	.word	0x0800a859
 800a7e0:	0800a859 	.word	0x0800a859
 800a7e4:	0800a859 	.word	0x0800a859
 800a7e8:	0800a861 	.word	0x0800a861
 800a7ec:	0800a859 	.word	0x0800a859
 800a7f0:	0800a859 	.word	0x0800a859
 800a7f4:	0800a859 	.word	0x0800a859
 800a7f8:	0800a859 	.word	0x0800a859
 800a7fc:	0800a859 	.word	0x0800a859
 800a800:	0800a859 	.word	0x0800a859
 800a804:	0800a859 	.word	0x0800a859
 800a808:	0800a861 	.word	0x0800a861
 800a80c:	0800a859 	.word	0x0800a859
 800a810:	0800a859 	.word	0x0800a859
 800a814:	0800a859 	.word	0x0800a859
 800a818:	0800a859 	.word	0x0800a859
 800a81c:	0800a859 	.word	0x0800a859
 800a820:	0800a859 	.word	0x0800a859
 800a824:	0800a859 	.word	0x0800a859
 800a828:	0800a861 	.word	0x0800a861
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a82c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a830:	3308      	adds	r3, #8
 800a832:	2101      	movs	r1, #1
 800a834:	4618      	mov	r0, r3
 800a836:	f001 fe95 	bl	800c564 <RCCEx_PLL2_Config>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a840:	e00f      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a846:	3328      	adds	r3, #40	; 0x28
 800a848:	2101      	movs	r1, #1
 800a84a:	4618      	mov	r0, r3
 800a84c:	f001 ff3c 	bl	800c6c8 <RCCEx_PLL3_Config>
 800a850:	4603      	mov	r3, r0
 800a852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a856:	e004      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a85e:	e000      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a860:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10a      	bne.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a86a:	4bbf      	ldr	r3, [pc, #764]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a86e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a878:	4abb      	ldr	r2, [pc, #748]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a87a:	430b      	orrs	r3, r1
 800a87c:	6553      	str	r3, [r2, #84]	; 0x54
 800a87e:	e003      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a884:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	f002 0302 	and.w	r3, r2, #2
 800a894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a898:	2300      	movs	r3, #0
 800a89a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a89e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	d041      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a8a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8ae:	2b05      	cmp	r3, #5
 800a8b0:	d824      	bhi.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a8b2:	a201      	add	r2, pc, #4	; (adr r2, 800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b8:	0800a905 	.word	0x0800a905
 800a8bc:	0800a8d1 	.word	0x0800a8d1
 800a8c0:	0800a8e7 	.word	0x0800a8e7
 800a8c4:	0800a905 	.word	0x0800a905
 800a8c8:	0800a905 	.word	0x0800a905
 800a8cc:	0800a905 	.word	0x0800a905
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d4:	3308      	adds	r3, #8
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f001 fe43 	bl	800c564 <RCCEx_PLL2_Config>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a8e4:	e00f      	b.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ea:	3328      	adds	r3, #40	; 0x28
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f001 feea 	bl	800c6c8 <RCCEx_PLL3_Config>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a8fa:	e004      	b.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a902:	e000      	b.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a904:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d10a      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a90e:	4b96      	ldr	r3, [pc, #600]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a912:	f023 0107 	bic.w	r1, r3, #7
 800a916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a91a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a91c:	4a92      	ldr	r2, [pc, #584]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a91e:	430b      	orrs	r3, r1
 800a920:	6553      	str	r3, [r2, #84]	; 0x54
 800a922:	e003      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a928:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a934:	f002 0304 	and.w	r3, r2, #4
 800a938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a93c:	2300      	movs	r3, #0
 800a93e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a942:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a946:	460b      	mov	r3, r1
 800a948:	4313      	orrs	r3, r2
 800a94a:	d044      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a954:	2b05      	cmp	r3, #5
 800a956:	d825      	bhi.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a958:	a201      	add	r2, pc, #4	; (adr r2, 800a960 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95e:	bf00      	nop
 800a960:	0800a9ad 	.word	0x0800a9ad
 800a964:	0800a979 	.word	0x0800a979
 800a968:	0800a98f 	.word	0x0800a98f
 800a96c:	0800a9ad 	.word	0x0800a9ad
 800a970:	0800a9ad 	.word	0x0800a9ad
 800a974:	0800a9ad 	.word	0x0800a9ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a97c:	3308      	adds	r3, #8
 800a97e:	2101      	movs	r1, #1
 800a980:	4618      	mov	r0, r3
 800a982:	f001 fdef 	bl	800c564 <RCCEx_PLL2_Config>
 800a986:	4603      	mov	r3, r0
 800a988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a98c:	e00f      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a992:	3328      	adds	r3, #40	; 0x28
 800a994:	2101      	movs	r1, #1
 800a996:	4618      	mov	r0, r3
 800a998:	f001 fe96 	bl	800c6c8 <RCCEx_PLL3_Config>
 800a99c:	4603      	mov	r3, r0
 800a99e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a9a2:	e004      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a9aa:	e000      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a9ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10b      	bne.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a9b6:	4b6c      	ldr	r3, [pc, #432]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ba:	f023 0107 	bic.w	r1, r3, #7
 800a9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9c6:	4a68      	ldr	r2, [pc, #416]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9c8:	430b      	orrs	r3, r1
 800a9ca:	6593      	str	r3, [r2, #88]	; 0x58
 800a9cc:	e003      	b.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	f002 0320 	and.w	r3, r2, #32
 800a9e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	d055      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa02:	d033      	beq.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800aa04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa08:	d82c      	bhi.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa0e:	d02f      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800aa10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa14:	d826      	bhi.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa1a:	d02b      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800aa1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa20:	d820      	bhi.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa26:	d012      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800aa28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa2c:	d81a      	bhi.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d022      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800aa32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa36:	d115      	bne.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	2100      	movs	r1, #0
 800aa40:	4618      	mov	r0, r3
 800aa42:	f001 fd8f 	bl	800c564 <RCCEx_PLL2_Config>
 800aa46:	4603      	mov	r3, r0
 800aa48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa4c:	e015      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa52:	3328      	adds	r3, #40	; 0x28
 800aa54:	2102      	movs	r1, #2
 800aa56:	4618      	mov	r0, r3
 800aa58:	f001 fe36 	bl	800c6c8 <RCCEx_PLL3_Config>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa62:	e00a      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa6a:	e006      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa6c:	bf00      	nop
 800aa6e:	e004      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa70:	bf00      	nop
 800aa72:	e002      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa74:	bf00      	nop
 800aa76:	e000      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10b      	bne.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa82:	4b39      	ldr	r3, [pc, #228]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa86:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800aa8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa92:	4a35      	ldr	r2, [pc, #212]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa94:	430b      	orrs	r3, r1
 800aa96:	6553      	str	r3, [r2, #84]	; 0x54
 800aa98:	e003      	b.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aaa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800aaae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aab2:	2300      	movs	r3, #0
 800aab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aab8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800aabc:	460b      	mov	r3, r1
 800aabe:	4313      	orrs	r3, r2
 800aac0:	d058      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aaca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aace:	d033      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aad0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aad4:	d82c      	bhi.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aada:	d02f      	beq.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800aadc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aae0:	d826      	bhi.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aae2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aae6:	d02b      	beq.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800aae8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aaec:	d820      	bhi.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aaee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaf2:	d012      	beq.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800aaf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaf8:	d81a      	bhi.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d022      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800aafe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab02:	d115      	bne.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab08:	3308      	adds	r3, #8
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f001 fd29 	bl	800c564 <RCCEx_PLL2_Config>
 800ab12:	4603      	mov	r3, r0
 800ab14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab18:	e015      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab1e:	3328      	adds	r3, #40	; 0x28
 800ab20:	2102      	movs	r1, #2
 800ab22:	4618      	mov	r0, r3
 800ab24:	f001 fdd0 	bl	800c6c8 <RCCEx_PLL3_Config>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab2e:	e00a      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab36:	e006      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab38:	bf00      	nop
 800ab3a:	e004      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab3c:	bf00      	nop
 800ab3e:	e002      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab40:	bf00      	nop
 800ab42:	e000      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10e      	bne.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab4e:	4b06      	ldr	r3, [pc, #24]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ab50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab52:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ab56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab5e:	4a02      	ldr	r2, [pc, #8]	; (800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ab60:	430b      	orrs	r3, r1
 800ab62:	6593      	str	r3, [r2, #88]	; 0x58
 800ab64:	e006      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ab66:	bf00      	nop
 800ab68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ab80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ab84:	2300      	movs	r3, #0
 800ab86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4313      	orrs	r3, r2
 800ab92:	d055      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ab94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aba0:	d033      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800aba2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aba6:	d82c      	bhi.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abac:	d02f      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800abae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abb2:	d826      	bhi.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800abb4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800abb8:	d02b      	beq.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800abba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800abbe:	d820      	bhi.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800abc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abc4:	d012      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800abc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abca:	d81a      	bhi.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d022      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800abd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abd4:	d115      	bne.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abda:	3308      	adds	r3, #8
 800abdc:	2100      	movs	r1, #0
 800abde:	4618      	mov	r0, r3
 800abe0:	f001 fcc0 	bl	800c564 <RCCEx_PLL2_Config>
 800abe4:	4603      	mov	r3, r0
 800abe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800abea:	e015      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf0:	3328      	adds	r3, #40	; 0x28
 800abf2:	2102      	movs	r1, #2
 800abf4:	4618      	mov	r0, r3
 800abf6:	f001 fd67 	bl	800c6c8 <RCCEx_PLL3_Config>
 800abfa:	4603      	mov	r3, r0
 800abfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ac00:	e00a      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac08:	e006      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac0a:	bf00      	nop
 800ac0c:	e004      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac0e:	bf00      	nop
 800ac10:	e002      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac12:	bf00      	nop
 800ac14:	e000      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10b      	bne.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ac20:	4ba1      	ldr	r3, [pc, #644]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac24:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800ac28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ac30:	4a9d      	ldr	r2, [pc, #628]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac32:	430b      	orrs	r3, r1
 800ac34:	6593      	str	r3, [r2, #88]	; 0x58
 800ac36:	e003      	b.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ac40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	f002 0308 	and.w	r3, r2, #8
 800ac4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac50:	2300      	movs	r3, #0
 800ac52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ac56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	d01e      	beq.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ac60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac6c:	d10c      	bne.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac72:	3328      	adds	r3, #40	; 0x28
 800ac74:	2102      	movs	r1, #2
 800ac76:	4618      	mov	r0, r3
 800ac78:	f001 fd26 	bl	800c6c8 <RCCEx_PLL3_Config>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d002      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ac88:	4b87      	ldr	r3, [pc, #540]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac98:	4a83      	ldr	r2, [pc, #524]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac9a:	430b      	orrs	r3, r1
 800ac9c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	f002 0310 	and.w	r3, r2, #16
 800acaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800acae:	2300      	movs	r3, #0
 800acb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800acb4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800acb8:	460b      	mov	r3, r1
 800acba:	4313      	orrs	r3, r2
 800acbc:	d01e      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800acbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800acc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acca:	d10c      	bne.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800accc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acd0:	3328      	adds	r3, #40	; 0x28
 800acd2:	2102      	movs	r1, #2
 800acd4:	4618      	mov	r0, r3
 800acd6:	f001 fcf7 	bl	800c6c8 <RCCEx_PLL3_Config>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ace6:	4b70      	ldr	r3, [pc, #448]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ace8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800acee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800acf6:	4a6c      	ldr	r2, [pc, #432]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acf8:	430b      	orrs	r3, r1
 800acfa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800acfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad04:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ad08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ad16:	460b      	mov	r3, r1
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	d03e      	beq.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ad1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad28:	d022      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ad2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad2e:	d81b      	bhi.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d003      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ad34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad38:	d00b      	beq.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ad3a:	e015      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad40:	3308      	adds	r3, #8
 800ad42:	2100      	movs	r1, #0
 800ad44:	4618      	mov	r0, r3
 800ad46:	f001 fc0d 	bl	800c564 <RCCEx_PLL2_Config>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad50:	e00f      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad56:	3328      	adds	r3, #40	; 0x28
 800ad58:	2102      	movs	r1, #2
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f001 fcb4 	bl	800c6c8 <RCCEx_PLL3_Config>
 800ad60:	4603      	mov	r3, r0
 800ad62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad66:	e004      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad6e:	e000      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ad70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10b      	bne.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad7a:	4b4b      	ldr	r3, [pc, #300]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad7e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ad82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad8a:	4a47      	ldr	r2, [pc, #284]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad8c:	430b      	orrs	r3, r1
 800ad8e:	6593      	str	r3, [r2, #88]	; 0x58
 800ad90:	e003      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ada6:	67bb      	str	r3, [r7, #120]	; 0x78
 800ada8:	2300      	movs	r3, #0
 800adaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800adac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800adb0:	460b      	mov	r3, r1
 800adb2:	4313      	orrs	r3, r2
 800adb4:	d03b      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800adb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adc2:	d01f      	beq.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800adc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adc8:	d818      	bhi.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800adca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adce:	d003      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800add0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800add4:	d007      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800add6:	e011      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800add8:	4b33      	ldr	r3, [pc, #204]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800addc:	4a32      	ldr	r2, [pc, #200]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ade2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ade4:	e00f      	b.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ade6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adea:	3328      	adds	r3, #40	; 0x28
 800adec:	2101      	movs	r1, #1
 800adee:	4618      	mov	r0, r3
 800adf0:	f001 fc6a 	bl	800c6c8 <RCCEx_PLL3_Config>
 800adf4:	4603      	mov	r3, r0
 800adf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800adfa:	e004      	b.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae02:	e000      	b.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ae04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10b      	bne.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ae0e:	4b26      	ldr	r3, [pc, #152]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae12:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ae16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae1e:	4a22      	ldr	r2, [pc, #136]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae20:	430b      	orrs	r3, r1
 800ae22:	6553      	str	r3, [r2, #84]	; 0x54
 800ae24:	e003      	b.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ae2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ae3a:	673b      	str	r3, [r7, #112]	; 0x70
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	677b      	str	r3, [r7, #116]	; 0x74
 800ae40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ae44:	460b      	mov	r3, r1
 800ae46:	4313      	orrs	r3, r2
 800ae48:	d034      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ae4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d003      	beq.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ae54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae58:	d007      	beq.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ae5a:	e011      	b.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae5c:	4b12      	ldr	r3, [pc, #72]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae60:	4a11      	ldr	r2, [pc, #68]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae68:	e00e      	b.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6e:	3308      	adds	r3, #8
 800ae70:	2102      	movs	r1, #2
 800ae72:	4618      	mov	r0, r3
 800ae74:	f001 fb76 	bl	800c564 <RCCEx_PLL2_Config>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae7e:	e003      	b.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10d      	bne.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ae90:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae9e:	4a02      	ldr	r2, [pc, #8]	; (800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aea0:	430b      	orrs	r3, r1
 800aea2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aea4:	e006      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800aea6:	bf00      	nop
 800aea8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aeb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800aec0:	66bb      	str	r3, [r7, #104]	; 0x68
 800aec2:	2300      	movs	r3, #0
 800aec4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aec6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800aeca:	460b      	mov	r3, r1
 800aecc:	4313      	orrs	r3, r2
 800aece:	d00c      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed4:	3328      	adds	r3, #40	; 0x28
 800aed6:	2102      	movs	r1, #2
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 fbf5 	bl	800c6c8 <RCCEx_PLL3_Config>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aeea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800aef6:	663b      	str	r3, [r7, #96]	; 0x60
 800aef8:	2300      	movs	r3, #0
 800aefa:	667b      	str	r3, [r7, #100]	; 0x64
 800aefc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800af00:	460b      	mov	r3, r1
 800af02:	4313      	orrs	r3, r2
 800af04:	d038      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800af06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af12:	d018      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800af14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af18:	d811      	bhi.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800af1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af1e:	d014      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800af20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af24:	d80b      	bhi.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800af26:	2b00      	cmp	r3, #0
 800af28:	d011      	beq.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800af2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af2e:	d106      	bne.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af30:	4bc3      	ldr	r3, [pc, #780]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af34:	4ac2      	ldr	r2, [pc, #776]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800af3c:	e008      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af44:	e004      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800af46:	bf00      	nop
 800af48:	e002      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800af4a:	bf00      	nop
 800af4c:	e000      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800af4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10b      	bne.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800af58:	4bb9      	ldr	r3, [pc, #740]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af5c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800af60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af68:	4ab5      	ldr	r2, [pc, #724]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af6a:	430b      	orrs	r3, r1
 800af6c:	6553      	str	r3, [r2, #84]	; 0x54
 800af6e:	e003      	b.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800af78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800af84:	65bb      	str	r3, [r7, #88]	; 0x58
 800af86:	2300      	movs	r3, #0
 800af88:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800af8e:	460b      	mov	r3, r1
 800af90:	4313      	orrs	r3, r2
 800af92:	d009      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800af94:	4baa      	ldr	r3, [pc, #680]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800af9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afa2:	4aa7      	ldr	r2, [pc, #668]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afa4:	430b      	orrs	r3, r1
 800afa6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800afa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800afb4:	653b      	str	r3, [r7, #80]	; 0x50
 800afb6:	2300      	movs	r3, #0
 800afb8:	657b      	str	r3, [r7, #84]	; 0x54
 800afba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800afbe:	460b      	mov	r3, r1
 800afc0:	4313      	orrs	r3, r2
 800afc2:	d00a      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800afc4:	4b9e      	ldr	r3, [pc, #632]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800afcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800afd4:	4a9a      	ldr	r2, [pc, #616]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afd6:	430b      	orrs	r3, r1
 800afd8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800afda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800afe6:	64bb      	str	r3, [r7, #72]	; 0x48
 800afe8:	2300      	movs	r3, #0
 800afea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800aff0:	460b      	mov	r3, r1
 800aff2:	4313      	orrs	r3, r2
 800aff4:	d009      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aff6:	4b92      	ldr	r3, [pc, #584]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800affa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800affe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b004:	4a8e      	ldr	r2, [pc, #568]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b006:	430b      	orrs	r3, r1
 800b008:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b012:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b016:	643b      	str	r3, [r7, #64]	; 0x40
 800b018:	2300      	movs	r3, #0
 800b01a:	647b      	str	r3, [r7, #68]	; 0x44
 800b01c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b020:	460b      	mov	r3, r1
 800b022:	4313      	orrs	r3, r2
 800b024:	d00e      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b026:	4b86      	ldr	r3, [pc, #536]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	4a85      	ldr	r2, [pc, #532]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b02c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b030:	6113      	str	r3, [r2, #16]
 800b032:	4b83      	ldr	r3, [pc, #524]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b034:	6919      	ldr	r1, [r3, #16]
 800b036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b03a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b03e:	4a80      	ldr	r2, [pc, #512]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b040:	430b      	orrs	r3, r1
 800b042:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b050:	63bb      	str	r3, [r7, #56]	; 0x38
 800b052:	2300      	movs	r3, #0
 800b054:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b056:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b05a:	460b      	mov	r3, r1
 800b05c:	4313      	orrs	r3, r2
 800b05e:	d009      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b060:	4b77      	ldr	r3, [pc, #476]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b064:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b06e:	4a74      	ldr	r2, [pc, #464]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b070:	430b      	orrs	r3, r1
 800b072:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b080:	633b      	str	r3, [r7, #48]	; 0x30
 800b082:	2300      	movs	r3, #0
 800b084:	637b      	str	r3, [r7, #52]	; 0x34
 800b086:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b08a:	460b      	mov	r3, r1
 800b08c:	4313      	orrs	r3, r2
 800b08e:	d00a      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b090:	4b6b      	ldr	r3, [pc, #428]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b094:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b09c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0a0:	4a67      	ldr	r2, [pc, #412]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0a2:	430b      	orrs	r3, r1
 800b0a4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	62b9      	str	r1, [r7, #40]	; 0x28
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b0bc:	460b      	mov	r3, r1
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	d011      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f001 fa4a 	bl	800c564 <RCCEx_PLL2_Config>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d003      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	6239      	str	r1, [r7, #32]
 800b0f2:	f003 0302 	and.w	r3, r3, #2
 800b0f6:	627b      	str	r3, [r7, #36]	; 0x24
 800b0f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	4313      	orrs	r3, r2
 800b100:	d011      	beq.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b106:	3308      	adds	r3, #8
 800b108:	2101      	movs	r1, #1
 800b10a:	4618      	mov	r0, r3
 800b10c:	f001 fa2a 	bl	800c564 <RCCEx_PLL2_Config>
 800b110:	4603      	mov	r3, r0
 800b112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b116:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b11e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b122:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	2100      	movs	r1, #0
 800b130:	61b9      	str	r1, [r7, #24]
 800b132:	f003 0304 	and.w	r3, r3, #4
 800b136:	61fb      	str	r3, [r7, #28]
 800b138:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b13c:	460b      	mov	r3, r1
 800b13e:	4313      	orrs	r3, r2
 800b140:	d011      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b146:	3308      	adds	r3, #8
 800b148:	2102      	movs	r1, #2
 800b14a:	4618      	mov	r0, r3
 800b14c:	f001 fa0a 	bl	800c564 <RCCEx_PLL2_Config>
 800b150:	4603      	mov	r3, r0
 800b152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b15e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b162:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16e:	2100      	movs	r1, #0
 800b170:	6139      	str	r1, [r7, #16]
 800b172:	f003 0308 	and.w	r3, r3, #8
 800b176:	617b      	str	r3, [r7, #20]
 800b178:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b17c:	460b      	mov	r3, r1
 800b17e:	4313      	orrs	r3, r2
 800b180:	d011      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b186:	3328      	adds	r3, #40	; 0x28
 800b188:	2100      	movs	r1, #0
 800b18a:	4618      	mov	r0, r3
 800b18c:	f001 fa9c 	bl	800c6c8 <RCCEx_PLL3_Config>
 800b190:	4603      	mov	r3, r0
 800b192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800b196:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b19e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	f003 0310 	and.w	r3, r3, #16
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	d011      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c6:	3328      	adds	r3, #40	; 0x28
 800b1c8:	2101      	movs	r1, #1
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f001 fa7c 	bl	800c6c8 <RCCEx_PLL3_Config>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b1d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	6039      	str	r1, [r7, #0]
 800b1f2:	f003 0320 	and.w	r3, r3, #32
 800b1f6:	607b      	str	r3, [r7, #4]
 800b1f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4313      	orrs	r3, r2
 800b200:	d011      	beq.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b206:	3328      	adds	r3, #40	; 0x28
 800b208:	2102      	movs	r1, #2
 800b20a:	4618      	mov	r0, r3
 800b20c:	f001 fa5c 	bl	800c6c8 <RCCEx_PLL3_Config>
 800b210:	4603      	mov	r3, r0
 800b212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b21e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b222:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800b226:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	e000      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b232:	2301      	movs	r3, #1
}
 800b234:	4618      	mov	r0, r3
 800b236:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800b23a:	46bd      	mov	sp, r7
 800b23c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b240:	58024400 	.word	0x58024400

0800b244 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b090      	sub	sp, #64	; 0x40
 800b248:	af00      	add	r7, sp, #0
 800b24a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b24e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b252:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b256:	430b      	orrs	r3, r1
 800b258:	f040 8094 	bne.w	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b25c:	4b9e      	ldr	r3, [pc, #632]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b25e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b260:	f003 0307 	and.w	r3, r3, #7
 800b264:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b268:	2b04      	cmp	r3, #4
 800b26a:	f200 8087 	bhi.w	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b26e:	a201      	add	r2, pc, #4	; (adr r2, 800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b274:	0800b289 	.word	0x0800b289
 800b278:	0800b2b1 	.word	0x0800b2b1
 800b27c:	0800b2d9 	.word	0x0800b2d9
 800b280:	0800b375 	.word	0x0800b375
 800b284:	0800b301 	.word	0x0800b301
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b288:	4b93      	ldr	r3, [pc, #588]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b294:	d108      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b29a:	4618      	mov	r0, r3
 800b29c:	f001 f810 	bl	800c2c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a4:	f000 bd45 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ac:	f000 bd41 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2b0:	4b89      	ldr	r3, [pc, #548]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2bc:	d108      	bne.n	800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2be:	f107 0318 	add.w	r3, r7, #24
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 fd54 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2cc:	f000 bd31 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2d4:	f000 bd2d 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2d8:	4b7f      	ldr	r3, [pc, #508]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2e4:	d108      	bne.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2e6:	f107 030c 	add.w	r3, r7, #12
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 fe94 	bl	800c018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2f4:	f000 bd1d 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2fc:	f000 bd19 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b300:	4b75      	ldr	r3, [pc, #468]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b304:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b308:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b30a:	4b73      	ldr	r3, [pc, #460]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 0304 	and.w	r3, r3, #4
 800b312:	2b04      	cmp	r3, #4
 800b314:	d10c      	bne.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d109      	bne.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b31c:	4b6e      	ldr	r3, [pc, #440]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	08db      	lsrs	r3, r3, #3
 800b322:	f003 0303 	and.w	r3, r3, #3
 800b326:	4a6d      	ldr	r2, [pc, #436]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b328:	fa22 f303 	lsr.w	r3, r2, r3
 800b32c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b32e:	e01f      	b.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b330:	4b69      	ldr	r3, [pc, #420]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b33c:	d106      	bne.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b344:	d102      	bne.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b346:	4b66      	ldr	r3, [pc, #408]	; (800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b34a:	e011      	b.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b34c:	4b62      	ldr	r3, [pc, #392]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b358:	d106      	bne.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b360:	d102      	bne.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b362:	4b60      	ldr	r3, [pc, #384]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b364:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b366:	e003      	b.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b368:	2300      	movs	r3, #0
 800b36a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b36c:	f000 bce1 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b370:	f000 bcdf 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b374:	4b5c      	ldr	r3, [pc, #368]	; (800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b378:	f000 bcdb 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b37c:	2300      	movs	r3, #0
 800b37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b380:	f000 bcd7 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b384:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b388:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b38c:	430b      	orrs	r3, r1
 800b38e:	f040 80ad 	bne.w	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b392:	4b51      	ldr	r3, [pc, #324]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b396:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b39a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a2:	d056      	beq.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3aa:	f200 8090 	bhi.w	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b0:	2bc0      	cmp	r3, #192	; 0xc0
 800b3b2:	f000 8088 	beq.w	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	2bc0      	cmp	r3, #192	; 0xc0
 800b3ba:	f200 8088 	bhi.w	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c0:	2b80      	cmp	r3, #128	; 0x80
 800b3c2:	d032      	beq.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	2b80      	cmp	r3, #128	; 0x80
 800b3c8:	f200 8081 	bhi.w	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d003      	beq.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d4:	2b40      	cmp	r3, #64	; 0x40
 800b3d6:	d014      	beq.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b3d8:	e079      	b.n	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3da:	4b3f      	ldr	r3, [pc, #252]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3e6:	d108      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f000 ff67 	bl	800c2c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3f6:	f000 bc9c 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3fe:	f000 bc98 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b402:	4b35      	ldr	r3, [pc, #212]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b40a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b40e:	d108      	bne.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b410:	f107 0318 	add.w	r3, r7, #24
 800b414:	4618      	mov	r0, r3
 800b416:	f000 fcab 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b41e:	f000 bc88 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b426:	f000 bc84 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b42a:	4b2b      	ldr	r3, [pc, #172]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b436:	d108      	bne.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b438:	f107 030c 	add.w	r3, r7, #12
 800b43c:	4618      	mov	r0, r3
 800b43e:	f000 fdeb 	bl	800c018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b446:	f000 bc74 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b44e:	f000 bc70 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b452:	4b21      	ldr	r3, [pc, #132]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b456:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b45a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b45c:	4b1e      	ldr	r3, [pc, #120]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 0304 	and.w	r3, r3, #4
 800b464:	2b04      	cmp	r3, #4
 800b466:	d10c      	bne.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d109      	bne.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b46e:	4b1a      	ldr	r3, [pc, #104]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	08db      	lsrs	r3, r3, #3
 800b474:	f003 0303 	and.w	r3, r3, #3
 800b478:	4a18      	ldr	r2, [pc, #96]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b47a:	fa22 f303 	lsr.w	r3, r2, r3
 800b47e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b480:	e01f      	b.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b482:	4b15      	ldr	r3, [pc, #84]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b48e:	d106      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b496:	d102      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b498:	4b11      	ldr	r3, [pc, #68]	; (800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b49a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b49c:	e011      	b.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b49e:	4b0e      	ldr	r3, [pc, #56]	; (800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4aa:	d106      	bne.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4b2:	d102      	bne.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4b4:	4b0b      	ldr	r3, [pc, #44]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4b8:	e003      	b.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4be:	f000 bc38 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4c2:	f000 bc36 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4c6:	4b08      	ldr	r3, [pc, #32]	; (800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4ca:	f000 bc32 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4d2:	f000 bc2e 	b.w	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4d6:	bf00      	nop
 800b4d8:	58024400 	.word	0x58024400
 800b4dc:	03d09000 	.word	0x03d09000
 800b4e0:	003d0900 	.word	0x003d0900
 800b4e4:	017d7840 	.word	0x017d7840
 800b4e8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b4ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4f0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b4f4:	430b      	orrs	r3, r1
 800b4f6:	f040 809c 	bne.w	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b4fa:	4b9e      	ldr	r3, [pc, #632]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4fe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b502:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b506:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b50a:	d054      	beq.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b512:	f200 808b 	bhi.w	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b51c:	f000 8083 	beq.w	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b526:	f200 8081 	bhi.w	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b530:	d02f      	beq.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b538:	d878      	bhi.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d004      	beq.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b546:	d012      	beq.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b548:	e070      	b.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b54a:	4b8a      	ldr	r3, [pc, #552]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b556:	d107      	bne.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b55c:	4618      	mov	r0, r3
 800b55e:	f000 feaf 	bl	800c2c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b564:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b566:	e3e4      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b56c:	e3e1      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b56e:	4b81      	ldr	r3, [pc, #516]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b57a:	d107      	bne.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b57c:	f107 0318 	add.w	r3, r7, #24
 800b580:	4618      	mov	r0, r3
 800b582:	f000 fbf5 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b58a:	e3d2      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b58c:	2300      	movs	r3, #0
 800b58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b590:	e3cf      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b592:	4b78      	ldr	r3, [pc, #480]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b59a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b59e:	d107      	bne.n	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5a0:	f107 030c 	add.w	r3, r7, #12
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 fd37 	bl	800c018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5ae:	e3c0      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5b4:	e3bd      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5b6:	4b6f      	ldr	r3, [pc, #444]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5c0:	4b6c      	ldr	r3, [pc, #432]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f003 0304 	and.w	r3, r3, #4
 800b5c8:	2b04      	cmp	r3, #4
 800b5ca:	d10c      	bne.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d109      	bne.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5d2:	4b68      	ldr	r3, [pc, #416]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	08db      	lsrs	r3, r3, #3
 800b5d8:	f003 0303 	and.w	r3, r3, #3
 800b5dc:	4a66      	ldr	r2, [pc, #408]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b5de:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5e4:	e01e      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5e6:	4b63      	ldr	r3, [pc, #396]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5f2:	d106      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5fa:	d102      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b5fc:	4b5f      	ldr	r3, [pc, #380]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b600:	e010      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b602:	4b5c      	ldr	r3, [pc, #368]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b60a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b60e:	d106      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b616:	d102      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b618:	4b59      	ldr	r3, [pc, #356]	; (800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b61a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b61c:	e002      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b61e:	2300      	movs	r3, #0
 800b620:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b622:	e386      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b624:	e385      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b626:	4b57      	ldr	r3, [pc, #348]	; (800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b62a:	e382      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b630:	e37f      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b632:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b636:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b63a:	430b      	orrs	r3, r1
 800b63c:	f040 80a7 	bne.w	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b640:	4b4c      	ldr	r3, [pc, #304]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b644:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b648:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b650:	d055      	beq.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b658:	f200 8096 	bhi.w	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b662:	f000 8084 	beq.w	800b76e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b66c:	f200 808c 	bhi.w	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b676:	d030      	beq.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b67e:	f200 8083 	bhi.w	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	2b00      	cmp	r3, #0
 800b686:	d004      	beq.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b68e:	d012      	beq.n	800b6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b690:	e07a      	b.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b692:	4b38      	ldr	r3, [pc, #224]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b69a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b69e:	d107      	bne.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 fe0b 	bl	800c2c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6ae:	e340      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6b4:	e33d      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6b6:	4b2f      	ldr	r3, [pc, #188]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6c2:	d107      	bne.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6c4:	f107 0318 	add.w	r3, r7, #24
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f000 fb51 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6d2:	e32e      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6d8:	e32b      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6da:	4b26      	ldr	r3, [pc, #152]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6e6:	d107      	bne.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6e8:	f107 030c 	add.w	r3, r7, #12
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 fc93 	bl	800c018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6f6:	e31c      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6fc:	e319      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6fe:	4b1d      	ldr	r3, [pc, #116]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b702:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b706:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b708:	4b1a      	ldr	r3, [pc, #104]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 0304 	and.w	r3, r3, #4
 800b710:	2b04      	cmp	r3, #4
 800b712:	d10c      	bne.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b716:	2b00      	cmp	r3, #0
 800b718:	d109      	bne.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b71a:	4b16      	ldr	r3, [pc, #88]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	08db      	lsrs	r3, r3, #3
 800b720:	f003 0303 	and.w	r3, r3, #3
 800b724:	4a14      	ldr	r2, [pc, #80]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b726:	fa22 f303 	lsr.w	r3, r2, r3
 800b72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b72c:	e01e      	b.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b72e:	4b11      	ldr	r3, [pc, #68]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b73a:	d106      	bne.n	800b74a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b742:	d102      	bne.n	800b74a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b744:	4b0d      	ldr	r3, [pc, #52]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b746:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b748:	e010      	b.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b74a:	4b0a      	ldr	r3, [pc, #40]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b756:	d106      	bne.n	800b766 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b75a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b75e:	d102      	bne.n	800b766 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b760:	4b07      	ldr	r3, [pc, #28]	; (800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b762:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b764:	e002      	b.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b766:	2300      	movs	r3, #0
 800b768:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b76a:	e2e2      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b76c:	e2e1      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b76e:	4b05      	ldr	r3, [pc, #20]	; (800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b772:	e2de      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b774:	58024400 	.word	0x58024400
 800b778:	03d09000 	.word	0x03d09000
 800b77c:	003d0900 	.word	0x003d0900
 800b780:	017d7840 	.word	0x017d7840
 800b784:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b788:	2300      	movs	r3, #0
 800b78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b78c:	e2d1      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b78e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b792:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b796:	430b      	orrs	r3, r1
 800b798:	f040 809c 	bne.w	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b79c:	4b93      	ldr	r3, [pc, #588]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b79e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b7a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7ac:	d054      	beq.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7b4:	f200 808b 	bhi.w	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7be:	f000 8083 	beq.w	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7c8:	f200 8081 	bhi.w	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7d2:	d02f      	beq.n	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7da:	d878      	bhi.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d004      	beq.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7e8:	d012      	beq.n	800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b7ea:	e070      	b.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b7ec:	4b7f      	ldr	r3, [pc, #508]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7f8:	d107      	bne.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7fe:	4618      	mov	r0, r3
 800b800:	f000 fd5e 	bl	800c2c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b808:	e293      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b80e:	e290      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b810:	4b76      	ldr	r3, [pc, #472]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b81c:	d107      	bne.n	800b82e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b81e:	f107 0318 	add.w	r3, r7, #24
 800b822:	4618      	mov	r0, r3
 800b824:	f000 faa4 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b82c:	e281      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b832:	e27e      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b834:	4b6d      	ldr	r3, [pc, #436]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b83c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b840:	d107      	bne.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b842:	f107 030c 	add.w	r3, r7, #12
 800b846:	4618      	mov	r0, r3
 800b848:	f000 fbe6 	bl	800c018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b850:	e26f      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b856:	e26c      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b858:	4b64      	ldr	r3, [pc, #400]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b85c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b860:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b862:	4b62      	ldr	r3, [pc, #392]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 0304 	and.w	r3, r3, #4
 800b86a:	2b04      	cmp	r3, #4
 800b86c:	d10c      	bne.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b870:	2b00      	cmp	r3, #0
 800b872:	d109      	bne.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b874:	4b5d      	ldr	r3, [pc, #372]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	08db      	lsrs	r3, r3, #3
 800b87a:	f003 0303 	and.w	r3, r3, #3
 800b87e:	4a5c      	ldr	r2, [pc, #368]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b880:	fa22 f303 	lsr.w	r3, r2, r3
 800b884:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b886:	e01e      	b.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b888:	4b58      	ldr	r3, [pc, #352]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b894:	d106      	bne.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b89c:	d102      	bne.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b89e:	4b55      	ldr	r3, [pc, #340]	; (800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8a2:	e010      	b.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8a4:	4b51      	ldr	r3, [pc, #324]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8b0:	d106      	bne.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8b8:	d102      	bne.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b8ba:	4b4f      	ldr	r3, [pc, #316]	; (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8be:	e002      	b.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b8c4:	e235      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b8c6:	e234      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b8c8:	4b4c      	ldr	r3, [pc, #304]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8cc:	e231      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8d2:	e22e      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b8d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8d8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b8dc:	430b      	orrs	r3, r1
 800b8de:	f040 808f 	bne.w	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b8e2:	4b42      	ldr	r3, [pc, #264]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b8ea:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8f2:	d06b      	beq.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8fa:	d874      	bhi.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b902:	d056      	beq.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b906:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b90a:	d86c      	bhi.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b912:	d03b      	beq.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b916:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b91a:	d864      	bhi.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b922:	d021      	beq.n	800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b92a:	d85c      	bhi.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d004      	beq.n	800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b938:	d004      	beq.n	800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b93a:	e054      	b.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b93c:	f7fe fa0a 	bl	8009d54 <HAL_RCC_GetPCLK1Freq>
 800b940:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b942:	e1f6      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b944:	4b29      	ldr	r3, [pc, #164]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b94c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b950:	d107      	bne.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b952:	f107 0318 	add.w	r3, r7, #24
 800b956:	4618      	mov	r0, r3
 800b958:	f000 fa0a 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b960:	e1e7      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b962:	2300      	movs	r3, #0
 800b964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b966:	e1e4      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b968:	4b20      	ldr	r3, [pc, #128]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b974:	d107      	bne.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b976:	f107 030c 	add.w	r3, r7, #12
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 fb4c 	bl	800c018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b984:	e1d5      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b986:	2300      	movs	r3, #0
 800b988:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b98a:	e1d2      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b98c:	4b17      	ldr	r3, [pc, #92]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 0304 	and.w	r3, r3, #4
 800b994:	2b04      	cmp	r3, #4
 800b996:	d109      	bne.n	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b998:	4b14      	ldr	r3, [pc, #80]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	08db      	lsrs	r3, r3, #3
 800b99e:	f003 0303 	and.w	r3, r3, #3
 800b9a2:	4a13      	ldr	r2, [pc, #76]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b9a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9aa:	e1c2      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9b0:	e1bf      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b9b2:	4b0e      	ldr	r3, [pc, #56]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9be:	d102      	bne.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b9c0:	4b0c      	ldr	r3, [pc, #48]	; (800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9c4:	e1b5      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9ca:	e1b2      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9cc:	4b07      	ldr	r3, [pc, #28]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9d8:	d102      	bne.n	800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b9da:	4b07      	ldr	r3, [pc, #28]	; (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9de:	e1a8      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9e4:	e1a5      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9ea:	e1a2      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b9ec:	58024400 	.word	0x58024400
 800b9f0:	03d09000 	.word	0x03d09000
 800b9f4:	003d0900 	.word	0x003d0900
 800b9f8:	017d7840 	.word	0x017d7840
 800b9fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ba00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba04:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ba08:	430b      	orrs	r3, r1
 800ba0a:	d173      	bne.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ba0c:	4b9c      	ldr	r3, [pc, #624]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba14:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ba16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba1c:	d02f      	beq.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ba1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba24:	d863      	bhi.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ba26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d004      	beq.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba32:	d012      	beq.n	800ba5a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ba34:	e05b      	b.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba36:	4b92      	ldr	r3, [pc, #584]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba42:	d107      	bne.n	800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba44:	f107 0318 	add.w	r3, r7, #24
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f000 f991 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba52:	e16e      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba54:	2300      	movs	r3, #0
 800ba56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba58:	e16b      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba5a:	4b89      	ldr	r3, [pc, #548]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba66:	d107      	bne.n	800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba68:	f107 030c 	add.w	r3, r7, #12
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f000 fad3 	bl	800c018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba76:	e15c      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba7c:	e159      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ba7e:	4b80      	ldr	r3, [pc, #512]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba86:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba88:	4b7d      	ldr	r3, [pc, #500]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 0304 	and.w	r3, r3, #4
 800ba90:	2b04      	cmp	r3, #4
 800ba92:	d10c      	bne.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ba94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d109      	bne.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba9a:	4b79      	ldr	r3, [pc, #484]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	08db      	lsrs	r3, r3, #3
 800baa0:	f003 0303 	and.w	r3, r3, #3
 800baa4:	4a77      	ldr	r2, [pc, #476]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800baa6:	fa22 f303 	lsr.w	r3, r2, r3
 800baaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baac:	e01e      	b.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800baae:	4b74      	ldr	r3, [pc, #464]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baba:	d106      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800babc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800babe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bac2:	d102      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bac4:	4b70      	ldr	r3, [pc, #448]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bac8:	e010      	b.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800baca:	4b6d      	ldr	r3, [pc, #436]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bad6:	d106      	bne.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800bad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bade:	d102      	bne.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bae0:	4b6a      	ldr	r3, [pc, #424]	; (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bae4:	e002      	b.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bae6:	2300      	movs	r3, #0
 800bae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800baea:	e122      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800baec:	e121      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baf2:	e11e      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800baf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baf8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800bafc:	430b      	orrs	r3, r1
 800bafe:	d133      	bne.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bb00:	4b5f      	ldr	r3, [pc, #380]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb08:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d004      	beq.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800bb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb16:	d012      	beq.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800bb18:	e023      	b.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb1a:	4b59      	ldr	r3, [pc, #356]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb26:	d107      	bne.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f000 fbc7 	bl	800c2c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb36:	e0fc      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb3c:	e0f9      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb3e:	4b50      	ldr	r3, [pc, #320]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb4a:	d107      	bne.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb4c:	f107 0318 	add.w	r3, r7, #24
 800bb50:	4618      	mov	r0, r3
 800bb52:	f000 f90d 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bb56:	6a3b      	ldr	r3, [r7, #32]
 800bb58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb5a:	e0ea      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb60:	e0e7      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bb62:	2300      	movs	r3, #0
 800bb64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb66:	e0e4      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bb68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb6c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800bb70:	430b      	orrs	r3, r1
 800bb72:	f040 808d 	bne.w	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bb76:	4b42      	ldr	r3, [pc, #264]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb7a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bb7e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb86:	d06b      	beq.n	800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800bb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb8e:	d874      	bhi.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb96:	d056      	beq.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb9e:	d86c      	bhi.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bba6:	d03b      	beq.n	800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800bba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbae:	d864      	bhi.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbb6:	d021      	beq.n	800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800bbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbbe:	d85c      	bhi.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d004      	beq.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbcc:	d004      	beq.n	800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bbce:	e054      	b.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bbd0:	f000 f8b8 	bl	800bd44 <HAL_RCCEx_GetD3PCLK1Freq>
 800bbd4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bbd6:	e0ac      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbd8:	4b29      	ldr	r3, [pc, #164]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbe4:	d107      	bne.n	800bbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbe6:	f107 0318 	add.w	r3, r7, #24
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 f8c0 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbf4:	e09d      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbfa:	e09a      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbfc:	4b20      	ldr	r3, [pc, #128]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc08:	d107      	bne.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc0a:	f107 030c 	add.w	r3, r7, #12
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f000 fa02 	bl	800c018 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc18:	e08b      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc1e:	e088      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc20:	4b17      	ldr	r3, [pc, #92]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f003 0304 	and.w	r3, r3, #4
 800bc28:	2b04      	cmp	r3, #4
 800bc2a:	d109      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc2c:	4b14      	ldr	r3, [pc, #80]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	08db      	lsrs	r3, r3, #3
 800bc32:	f003 0303 	and.w	r3, r3, #3
 800bc36:	4a13      	ldr	r2, [pc, #76]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bc38:	fa22 f303 	lsr.w	r3, r2, r3
 800bc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc3e:	e078      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc44:	e075      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bc46:	4b0e      	ldr	r3, [pc, #56]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc52:	d102      	bne.n	800bc5a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bc54:	4b0c      	ldr	r3, [pc, #48]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bc56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc58:	e06b      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc5e:	e068      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc60:	4b07      	ldr	r3, [pc, #28]	; (800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc6c:	d102      	bne.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bc6e:	4b07      	ldr	r3, [pc, #28]	; (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bc70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc72:	e05e      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc78:	e05b      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc7e:	e058      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc80:	58024400 	.word	0x58024400
 800bc84:	03d09000 	.word	0x03d09000
 800bc88:	003d0900 	.word	0x003d0900
 800bc8c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bc90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc94:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800bc98:	430b      	orrs	r3, r1
 800bc9a:	d148      	bne.n	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bc9c:	4b27      	ldr	r3, [pc, #156]	; (800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bca4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcac:	d02a      	beq.n	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb4:	d838      	bhi.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d004      	beq.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcc2:	d00d      	beq.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bcc4:	e030      	b.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bcc6:	4b1d      	ldr	r3, [pc, #116]	; (800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcd2:	d102      	bne.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bcd4:	4b1a      	ldr	r3, [pc, #104]	; (800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcd8:	e02b      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcde:	e028      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bce0:	4b16      	ldr	r3, [pc, #88]	; (800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcec:	d107      	bne.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 fae4 	bl	800c2c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcfc:	e019      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd02:	e016      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd04:	4b0d      	ldr	r3, [pc, #52]	; (800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd10:	d107      	bne.n	800bd22 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd12:	f107 0318 	add.w	r3, r7, #24
 800bd16:	4618      	mov	r0, r3
 800bd18:	f000 f82a 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd20:	e007      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd26:	e004      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd2c:	e001      	b.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3740      	adds	r7, #64	; 0x40
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	58024400 	.word	0x58024400
 800bd40:	017d7840 	.word	0x017d7840

0800bd44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bd48:	f7fd ffd4 	bl	8009cf4 <HAL_RCC_GetHCLKFreq>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	091b      	lsrs	r3, r3, #4
 800bd54:	f003 0307 	and.w	r3, r3, #7
 800bd58:	4904      	ldr	r1, [pc, #16]	; (800bd6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bd5a:	5ccb      	ldrb	r3, [r1, r3]
 800bd5c:	f003 031f 	and.w	r3, r3, #31
 800bd60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	58024400 	.word	0x58024400
 800bd6c:	080161b0 	.word	0x080161b0

0800bd70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b089      	sub	sp, #36	; 0x24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd78:	4ba1      	ldr	r3, [pc, #644]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd7c:	f003 0303 	and.w	r3, r3, #3
 800bd80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bd82:	4b9f      	ldr	r3, [pc, #636]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd86:	0b1b      	lsrs	r3, r3, #12
 800bd88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bd8e:	4b9c      	ldr	r3, [pc, #624]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd92:	091b      	lsrs	r3, r3, #4
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bd9a:	4b99      	ldr	r3, [pc, #612]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd9e:	08db      	lsrs	r3, r3, #3
 800bda0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bda4:	693a      	ldr	r2, [r7, #16]
 800bda6:	fb02 f303 	mul.w	r3, r2, r3
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 8111 	beq.w	800bfe0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	f000 8083 	beq.w	800becc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	f200 80a1 	bhi.w	800bf10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d003      	beq.n	800bddc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d056      	beq.n	800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bdda:	e099      	b.n	800bf10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bddc:	4b88      	ldr	r3, [pc, #544]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 0320 	and.w	r3, r3, #32
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d02d      	beq.n	800be44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bde8:	4b85      	ldr	r3, [pc, #532]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	08db      	lsrs	r3, r3, #3
 800bdee:	f003 0303 	and.w	r3, r3, #3
 800bdf2:	4a84      	ldr	r2, [pc, #528]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bdf4:	fa22 f303 	lsr.w	r3, r2, r3
 800bdf8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	ee07 3a90 	vmov	s15, r3
 800be00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	ee07 3a90 	vmov	s15, r3
 800be0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be12:	4b7b      	ldr	r3, [pc, #492]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be22:	ed97 6a03 	vldr	s12, [r7, #12]
 800be26:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be42:	e087      	b.n	800bf54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	ee07 3a90 	vmov	s15, r3
 800be4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c00c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800be52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be56:	4b6a      	ldr	r3, [pc, #424]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be5e:	ee07 3a90 	vmov	s15, r3
 800be62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be66:	ed97 6a03 	vldr	s12, [r7, #12]
 800be6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be86:	e065      	b.n	800bf54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	ee07 3a90 	vmov	s15, r3
 800be8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c010 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be9a:	4b59      	ldr	r3, [pc, #356]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea2:	ee07 3a90 	vmov	s15, r3
 800bea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800beae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800beb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800beca:	e043      	b.n	800bf54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	ee07 3a90 	vmov	s15, r3
 800bed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c014 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800beda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bede:	4b48      	ldr	r3, [pc, #288]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bee6:	ee07 3a90 	vmov	s15, r3
 800beea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beee:	ed97 6a03 	vldr	s12, [r7, #12]
 800bef2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800befa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800befe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf0e:	e021      	b.n	800bf54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	ee07 3a90 	vmov	s15, r3
 800bf16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c010 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf22:	4b37      	ldr	r3, [pc, #220]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf2a:	ee07 3a90 	vmov	s15, r3
 800bf2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf32:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf36:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c008 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bf54:	4b2a      	ldr	r3, [pc, #168]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf58:	0a5b      	lsrs	r3, r3, #9
 800bf5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf7a:	ee17 2a90 	vmov	r2, s15
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bf82:	4b1f      	ldr	r3, [pc, #124]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf86:	0c1b      	lsrs	r3, r3, #16
 800bf88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf8c:	ee07 3a90 	vmov	s15, r3
 800bf90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfa8:	ee17 2a90 	vmov	r2, s15
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bfb0:	4b13      	ldr	r3, [pc, #76]	; (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb4:	0e1b      	lsrs	r3, r3, #24
 800bfb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfba:	ee07 3a90 	vmov	s15, r3
 800bfbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfca:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfd6:	ee17 2a90 	vmov	r2, s15
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bfde:	e008      	b.n	800bff2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	609a      	str	r2, [r3, #8]
}
 800bff2:	bf00      	nop
 800bff4:	3724      	adds	r7, #36	; 0x24
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	58024400 	.word	0x58024400
 800c004:	03d09000 	.word	0x03d09000
 800c008:	46000000 	.word	0x46000000
 800c00c:	4c742400 	.word	0x4c742400
 800c010:	4a742400 	.word	0x4a742400
 800c014:	4bbebc20 	.word	0x4bbebc20

0800c018 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c018:	b480      	push	{r7}
 800c01a:	b089      	sub	sp, #36	; 0x24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c020:	4ba1      	ldr	r3, [pc, #644]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c024:	f003 0303 	and.w	r3, r3, #3
 800c028:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c02a:	4b9f      	ldr	r3, [pc, #636]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c02e:	0d1b      	lsrs	r3, r3, #20
 800c030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c034:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c036:	4b9c      	ldr	r3, [pc, #624]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03a:	0a1b      	lsrs	r3, r3, #8
 800c03c:	f003 0301 	and.w	r3, r3, #1
 800c040:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c042:	4b99      	ldr	r3, [pc, #612]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c046:	08db      	lsrs	r3, r3, #3
 800c048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c04c:	693a      	ldr	r2, [r7, #16]
 800c04e:	fb02 f303 	mul.w	r3, r2, r3
 800c052:	ee07 3a90 	vmov	s15, r3
 800c056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c05a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 8111 	beq.w	800c288 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	2b02      	cmp	r3, #2
 800c06a:	f000 8083 	beq.w	800c174 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	2b02      	cmp	r3, #2
 800c072:	f200 80a1 	bhi.w	800c1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d003      	beq.n	800c084 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d056      	beq.n	800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c082:	e099      	b.n	800c1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c084:	4b88      	ldr	r3, [pc, #544]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 0320 	and.w	r3, r3, #32
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d02d      	beq.n	800c0ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c090:	4b85      	ldr	r3, [pc, #532]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	08db      	lsrs	r3, r3, #3
 800c096:	f003 0303 	and.w	r3, r3, #3
 800c09a:	4a84      	ldr	r2, [pc, #528]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c09c:	fa22 f303 	lsr.w	r3, r2, r3
 800c0a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	ee07 3a90 	vmov	s15, r3
 800c0a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	ee07 3a90 	vmov	s15, r3
 800c0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ba:	4b7b      	ldr	r3, [pc, #492]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c2:	ee07 3a90 	vmov	s15, r3
 800c0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c0ea:	e087      	b.n	800c1fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	ee07 3a90 	vmov	s15, r3
 800c0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0fe:	4b6a      	ldr	r3, [pc, #424]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c106:	ee07 3a90 	vmov	s15, r3
 800c10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c112:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c11e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c12a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c12e:	e065      	b.n	800c1fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	ee07 3a90 	vmov	s15, r3
 800c136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c13a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c142:	4b59      	ldr	r3, [pc, #356]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c14a:	ee07 3a90 	vmov	s15, r3
 800c14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c152:	ed97 6a03 	vldr	s12, [r7, #12]
 800c156:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c16e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c172:	e043      	b.n	800c1fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	ee07 3a90 	vmov	s15, r3
 800c17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c17e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c2bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c186:	4b48      	ldr	r3, [pc, #288]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18e:	ee07 3a90 	vmov	s15, r3
 800c192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c196:	ed97 6a03 	vldr	s12, [r7, #12]
 800c19a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1b6:	e021      	b.n	800c1fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	ee07 3a90 	vmov	s15, r3
 800c1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ca:	4b37      	ldr	r3, [pc, #220]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d2:	ee07 3a90 	vmov	s15, r3
 800c1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c1fc:	4b2a      	ldr	r3, [pc, #168]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c200:	0a5b      	lsrs	r3, r3, #9
 800c202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c206:	ee07 3a90 	vmov	s15, r3
 800c20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c20e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c212:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c216:	edd7 6a07 	vldr	s13, [r7, #28]
 800c21a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c21e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c222:	ee17 2a90 	vmov	r2, s15
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c22a:	4b1f      	ldr	r3, [pc, #124]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c22e:	0c1b      	lsrs	r3, r3, #16
 800c230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c234:	ee07 3a90 	vmov	s15, r3
 800c238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c23c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c240:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c244:	edd7 6a07 	vldr	s13, [r7, #28]
 800c248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c24c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c250:	ee17 2a90 	vmov	r2, s15
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c258:	4b13      	ldr	r3, [pc, #76]	; (800c2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c25c:	0e1b      	lsrs	r3, r3, #24
 800c25e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c262:	ee07 3a90 	vmov	s15, r3
 800c266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c26e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c272:	edd7 6a07 	vldr	s13, [r7, #28]
 800c276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c27a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c27e:	ee17 2a90 	vmov	r2, s15
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c286:	e008      	b.n	800c29a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	609a      	str	r2, [r3, #8]
}
 800c29a:	bf00      	nop
 800c29c:	3724      	adds	r7, #36	; 0x24
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	58024400 	.word	0x58024400
 800c2ac:	03d09000 	.word	0x03d09000
 800c2b0:	46000000 	.word	0x46000000
 800c2b4:	4c742400 	.word	0x4c742400
 800c2b8:	4a742400 	.word	0x4a742400
 800c2bc:	4bbebc20 	.word	0x4bbebc20

0800c2c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b089      	sub	sp, #36	; 0x24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2c8:	4ba0      	ldr	r3, [pc, #640]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2cc:	f003 0303 	and.w	r3, r3, #3
 800c2d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c2d2:	4b9e      	ldr	r3, [pc, #632]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d6:	091b      	lsrs	r3, r3, #4
 800c2d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c2de:	4b9b      	ldr	r3, [pc, #620]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e2:	f003 0301 	and.w	r3, r3, #1
 800c2e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c2e8:	4b98      	ldr	r3, [pc, #608]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ec:	08db      	lsrs	r3, r3, #3
 800c2ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2f2:	693a      	ldr	r2, [r7, #16]
 800c2f4:	fb02 f303 	mul.w	r3, r2, r3
 800c2f8:	ee07 3a90 	vmov	s15, r3
 800c2fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c300:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	2b00      	cmp	r3, #0
 800c308:	f000 8111 	beq.w	800c52e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	2b02      	cmp	r3, #2
 800c310:	f000 8083 	beq.w	800c41a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	2b02      	cmp	r3, #2
 800c318:	f200 80a1 	bhi.w	800c45e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d003      	beq.n	800c32a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d056      	beq.n	800c3d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c328:	e099      	b.n	800c45e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c32a:	4b88      	ldr	r3, [pc, #544]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f003 0320 	and.w	r3, r3, #32
 800c332:	2b00      	cmp	r3, #0
 800c334:	d02d      	beq.n	800c392 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c336:	4b85      	ldr	r3, [pc, #532]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	08db      	lsrs	r3, r3, #3
 800c33c:	f003 0303 	and.w	r3, r3, #3
 800c340:	4a83      	ldr	r2, [pc, #524]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c342:	fa22 f303 	lsr.w	r3, r2, r3
 800c346:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	ee07 3a90 	vmov	s15, r3
 800c34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	ee07 3a90 	vmov	s15, r3
 800c358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c35c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c360:	4b7a      	ldr	r3, [pc, #488]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c368:	ee07 3a90 	vmov	s15, r3
 800c36c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c370:	ed97 6a03 	vldr	s12, [r7, #12]
 800c374:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c554 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c37c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c38c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c390:	e087      	b.n	800c4a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	ee07 3a90 	vmov	s15, r3
 800c398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c39c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c558 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3a4:	4b69      	ldr	r3, [pc, #420]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ac:	ee07 3a90 	vmov	s15, r3
 800c3b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c554 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3d4:	e065      	b.n	800c4a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	ee07 3a90 	vmov	s15, r3
 800c3dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c55c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c3e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3e8:	4b58      	ldr	r3, [pc, #352]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3f0:	ee07 3a90 	vmov	s15, r3
 800c3f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c554 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c408:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c40c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c410:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c414:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c418:	e043      	b.n	800c4a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	ee07 3a90 	vmov	s15, r3
 800c420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c424:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c560 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c42c:	4b47      	ldr	r3, [pc, #284]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c434:	ee07 3a90 	vmov	s15, r3
 800c438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c43c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c440:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c554 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c44c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c454:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c458:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c45c:	e021      	b.n	800c4a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	ee07 3a90 	vmov	s15, r3
 800c464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c468:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c558 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c46c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c470:	4b36      	ldr	r3, [pc, #216]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c478:	ee07 3a90 	vmov	s15, r3
 800c47c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c480:	ed97 6a03 	vldr	s12, [r7, #12]
 800c484:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c554 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c48c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c49c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c4a2:	4b2a      	ldr	r3, [pc, #168]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a6:	0a5b      	lsrs	r3, r3, #9
 800c4a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ac:	ee07 3a90 	vmov	s15, r3
 800c4b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4c8:	ee17 2a90 	vmov	r2, s15
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c4d0:	4b1e      	ldr	r3, [pc, #120]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d4:	0c1b      	lsrs	r3, r3, #16
 800c4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4da:	ee07 3a90 	vmov	s15, r3
 800c4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4f6:	ee17 2a90 	vmov	r2, s15
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c4fe:	4b13      	ldr	r3, [pc, #76]	; (800c54c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c502:	0e1b      	lsrs	r3, r3, #24
 800c504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c508:	ee07 3a90 	vmov	s15, r3
 800c50c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c510:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c514:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c518:	edd7 6a07 	vldr	s13, [r7, #28]
 800c51c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c524:	ee17 2a90 	vmov	r2, s15
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c52c:	e008      	b.n	800c540 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2200      	movs	r2, #0
 800c53e:	609a      	str	r2, [r3, #8]
}
 800c540:	bf00      	nop
 800c542:	3724      	adds	r7, #36	; 0x24
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr
 800c54c:	58024400 	.word	0x58024400
 800c550:	03d09000 	.word	0x03d09000
 800c554:	46000000 	.word	0x46000000
 800c558:	4c742400 	.word	0x4c742400
 800c55c:	4a742400 	.word	0x4a742400
 800c560:	4bbebc20 	.word	0x4bbebc20

0800c564 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c56e:	2300      	movs	r3, #0
 800c570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c572:	4b53      	ldr	r3, [pc, #332]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c576:	f003 0303 	and.w	r3, r3, #3
 800c57a:	2b03      	cmp	r3, #3
 800c57c:	d101      	bne.n	800c582 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e099      	b.n	800c6b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c582:	4b4f      	ldr	r3, [pc, #316]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a4e      	ldr	r2, [pc, #312]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c588:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c58c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c58e:	f7f7 f943 	bl	8003818 <HAL_GetTick>
 800c592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c594:	e008      	b.n	800c5a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c596:	f7f7 f93f 	bl	8003818 <HAL_GetTick>
 800c59a:	4602      	mov	r2, r0
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d901      	bls.n	800c5a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e086      	b.n	800c6b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5a8:	4b45      	ldr	r3, [pc, #276]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1f0      	bne.n	800c596 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c5b4:	4b42      	ldr	r3, [pc, #264]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	031b      	lsls	r3, r3, #12
 800c5c2:	493f      	ldr	r1, [pc, #252]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	628b      	str	r3, [r1, #40]	; 0x28
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	025b      	lsls	r3, r3, #9
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	431a      	orrs	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	041b      	lsls	r3, r3, #16
 800c5e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c5ea:	431a      	orrs	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	061b      	lsls	r3, r3, #24
 800c5f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c5f8:	4931      	ldr	r1, [pc, #196]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c5fe:	4b30      	ldr	r3, [pc, #192]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c602:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	492d      	ldr	r1, [pc, #180]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c60c:	4313      	orrs	r3, r2
 800c60e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c610:	4b2b      	ldr	r3, [pc, #172]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c614:	f023 0220 	bic.w	r2, r3, #32
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	699b      	ldr	r3, [r3, #24]
 800c61c:	4928      	ldr	r1, [pc, #160]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c61e:	4313      	orrs	r3, r2
 800c620:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c622:	4b27      	ldr	r3, [pc, #156]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c626:	4a26      	ldr	r2, [pc, #152]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c628:	f023 0310 	bic.w	r3, r3, #16
 800c62c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c62e:	4b24      	ldr	r3, [pc, #144]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c632:	4b24      	ldr	r3, [pc, #144]	; (800c6c4 <RCCEx_PLL2_Config+0x160>)
 800c634:	4013      	ands	r3, r2
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	69d2      	ldr	r2, [r2, #28]
 800c63a:	00d2      	lsls	r2, r2, #3
 800c63c:	4920      	ldr	r1, [pc, #128]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c63e:	4313      	orrs	r3, r2
 800c640:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c642:	4b1f      	ldr	r3, [pc, #124]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c646:	4a1e      	ldr	r2, [pc, #120]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c648:	f043 0310 	orr.w	r3, r3, #16
 800c64c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d106      	bne.n	800c662 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c654:	4b1a      	ldr	r3, [pc, #104]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c658:	4a19      	ldr	r2, [pc, #100]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c65a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c65e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c660:	e00f      	b.n	800c682 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d106      	bne.n	800c676 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c668:	4b15      	ldr	r3, [pc, #84]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66c:	4a14      	ldr	r2, [pc, #80]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c66e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c672:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c674:	e005      	b.n	800c682 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c676:	4b12      	ldr	r3, [pc, #72]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67a:	4a11      	ldr	r2, [pc, #68]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c67c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c680:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c682:	4b0f      	ldr	r3, [pc, #60]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a0e      	ldr	r2, [pc, #56]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c68c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c68e:	f7f7 f8c3 	bl	8003818 <HAL_GetTick>
 800c692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c694:	e008      	b.n	800c6a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c696:	f7f7 f8bf 	bl	8003818 <HAL_GetTick>
 800c69a:	4602      	mov	r2, r0
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	1ad3      	subs	r3, r2, r3
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	d901      	bls.n	800c6a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	e006      	b.n	800c6b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6a8:	4b05      	ldr	r3, [pc, #20]	; (800c6c0 <RCCEx_PLL2_Config+0x15c>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d0f0      	beq.n	800c696 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	58024400 	.word	0x58024400
 800c6c4:	ffff0007 	.word	0xffff0007

0800c6c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c6d6:	4b53      	ldr	r3, [pc, #332]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6da:	f003 0303 	and.w	r3, r3, #3
 800c6de:	2b03      	cmp	r3, #3
 800c6e0:	d101      	bne.n	800c6e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e099      	b.n	800c81a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c6e6:	4b4f      	ldr	r3, [pc, #316]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a4e      	ldr	r2, [pc, #312]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c6ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6f2:	f7f7 f891 	bl	8003818 <HAL_GetTick>
 800c6f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c6f8:	e008      	b.n	800c70c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c6fa:	f7f7 f88d 	bl	8003818 <HAL_GetTick>
 800c6fe:	4602      	mov	r2, r0
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	1ad3      	subs	r3, r2, r3
 800c704:	2b02      	cmp	r3, #2
 800c706:	d901      	bls.n	800c70c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c708:	2303      	movs	r3, #3
 800c70a:	e086      	b.n	800c81a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c70c:	4b45      	ldr	r3, [pc, #276]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1f0      	bne.n	800c6fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c718:	4b42      	ldr	r3, [pc, #264]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	051b      	lsls	r3, r3, #20
 800c726:	493f      	ldr	r1, [pc, #252]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c728:	4313      	orrs	r3, r2
 800c72a:	628b      	str	r3, [r1, #40]	; 0x28
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	3b01      	subs	r3, #1
 800c732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	3b01      	subs	r3, #1
 800c73c:	025b      	lsls	r3, r3, #9
 800c73e:	b29b      	uxth	r3, r3
 800c740:	431a      	orrs	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	3b01      	subs	r3, #1
 800c748:	041b      	lsls	r3, r3, #16
 800c74a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c74e:	431a      	orrs	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	691b      	ldr	r3, [r3, #16]
 800c754:	3b01      	subs	r3, #1
 800c756:	061b      	lsls	r3, r3, #24
 800c758:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c75c:	4931      	ldr	r1, [pc, #196]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c75e:	4313      	orrs	r3, r2
 800c760:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c762:	4b30      	ldr	r3, [pc, #192]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c766:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	492d      	ldr	r1, [pc, #180]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c770:	4313      	orrs	r3, r2
 800c772:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c774:	4b2b      	ldr	r3, [pc, #172]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c778:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	699b      	ldr	r3, [r3, #24]
 800c780:	4928      	ldr	r1, [pc, #160]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c782:	4313      	orrs	r3, r2
 800c784:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c786:	4b27      	ldr	r3, [pc, #156]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78a:	4a26      	ldr	r2, [pc, #152]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c78c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c792:	4b24      	ldr	r3, [pc, #144]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c796:	4b24      	ldr	r3, [pc, #144]	; (800c828 <RCCEx_PLL3_Config+0x160>)
 800c798:	4013      	ands	r3, r2
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	69d2      	ldr	r2, [r2, #28]
 800c79e:	00d2      	lsls	r2, r2, #3
 800c7a0:	4920      	ldr	r1, [pc, #128]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c7a6:	4b1f      	ldr	r3, [pc, #124]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7aa:	4a1e      	ldr	r2, [pc, #120]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c7ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d106      	bne.n	800c7c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c7b8:	4b1a      	ldr	r3, [pc, #104]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7bc:	4a19      	ldr	r2, [pc, #100]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c7be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c7c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7c4:	e00f      	b.n	800c7e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d106      	bne.n	800c7da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c7cc:	4b15      	ldr	r3, [pc, #84]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d0:	4a14      	ldr	r2, [pc, #80]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c7d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c7d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7d8:	e005      	b.n	800c7e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c7da:	4b12      	ldr	r3, [pc, #72]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7de:	4a11      	ldr	r2, [pc, #68]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c7e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c7e6:	4b0f      	ldr	r3, [pc, #60]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a0e      	ldr	r2, [pc, #56]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c7ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7f2:	f7f7 f811 	bl	8003818 <HAL_GetTick>
 800c7f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c7f8:	e008      	b.n	800c80c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c7fa:	f7f7 f80d 	bl	8003818 <HAL_GetTick>
 800c7fe:	4602      	mov	r2, r0
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	1ad3      	subs	r3, r2, r3
 800c804:	2b02      	cmp	r3, #2
 800c806:	d901      	bls.n	800c80c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c808:	2303      	movs	r3, #3
 800c80a:	e006      	b.n	800c81a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c80c:	4b05      	ldr	r3, [pc, #20]	; (800c824 <RCCEx_PLL3_Config+0x15c>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c814:	2b00      	cmp	r3, #0
 800c816:	d0f0      	beq.n	800c7fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c818:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	58024400 	.word	0x58024400
 800c828:	ffff0007 	.word	0xffff0007

0800c82c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c834:	2301      	movs	r3, #1
 800c836:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d071      	beq.n	800c922 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c844:	b2db      	uxtb	r3, r3
 800c846:	2b00      	cmp	r3, #0
 800c848:	d106      	bne.n	800c858 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7f5 fd54 	bl	8002300 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2202      	movs	r2, #2
 800c85c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	f003 0310 	and.w	r3, r3, #16
 800c86a:	2b10      	cmp	r3, #16
 800c86c:	d050      	beq.n	800c910 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	22ca      	movs	r2, #202	; 0xca
 800c874:	625a      	str	r2, [r3, #36]	; 0x24
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2253      	movs	r2, #83	; 0x53
 800c87c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f9a0 	bl	800cbc4 <RTC_EnterInitMode>
 800c884:	4603      	mov	r3, r0
 800c886:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c888:	7bfb      	ldrb	r3, [r7, #15]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d124      	bne.n	800c8d8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6899      	ldr	r1, [r3, #8]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	4b24      	ldr	r3, [pc, #144]	; (800c92c <HAL_RTC_Init+0x100>)
 800c89a:	400b      	ands	r3, r1
 800c89c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	6899      	ldr	r1, [r3, #8]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	685a      	ldr	r2, [r3, #4]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	691b      	ldr	r3, [r3, #16]
 800c8ac:	431a      	orrs	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	699b      	ldr	r3, [r3, #24]
 800c8b2:	431a      	orrs	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	430a      	orrs	r2, r1
 800c8ba:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	0419      	lsls	r1, r3, #16
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	68da      	ldr	r2, [r3, #12]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	430a      	orrs	r2, r1
 800c8cc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 f9ac 	bl	800cc2c <RTC_ExitInitMode>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d113      	bne.n	800c906 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f022 0203 	bic.w	r2, r2, #3
 800c8ec:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	69da      	ldr	r2, [r3, #28]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	695b      	ldr	r3, [r3, #20]
 800c8fc:	431a      	orrs	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	430a      	orrs	r2, r1
 800c904:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	22ff      	movs	r2, #255	; 0xff
 800c90c:	625a      	str	r2, [r3, #36]	; 0x24
 800c90e:	e001      	b.n	800c914 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c910:	2300      	movs	r3, #0
 800c912:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c914:	7bfb      	ldrb	r3, [r7, #15]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d103      	bne.n	800c922 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c922:	7bfb      	ldrb	r3, [r7, #15]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3710      	adds	r7, #16
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	ff8fffbf 	.word	0xff8fffbf

0800c930 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c930:	b590      	push	{r4, r7, lr}
 800c932:	b087      	sub	sp, #28
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d101      	bne.n	800c94a <HAL_RTC_SetTime+0x1a>
 800c946:	2302      	movs	r3, #2
 800c948:	e089      	b.n	800ca5e <HAL_RTC_SetTime+0x12e>
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2201      	movs	r2, #1
 800c94e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2202      	movs	r2, #2
 800c956:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	22ca      	movs	r2, #202	; 0xca
 800c960:	625a      	str	r2, [r3, #36]	; 0x24
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2253      	movs	r2, #83	; 0x53
 800c968:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f000 f92a 	bl	800cbc4 <RTC_EnterInitMode>
 800c970:	4603      	mov	r3, r0
 800c972:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c974:	7cfb      	ldrb	r3, [r7, #19]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d161      	bne.n	800ca3e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d126      	bne.n	800c9ce <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d102      	bne.n	800c994 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	2200      	movs	r2, #0
 800c992:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	4618      	mov	r0, r3
 800c99a:	f000 f985 	bl	800cca8 <RTC_ByteToBcd2>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	785b      	ldrb	r3, [r3, #1]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 f97e 	bl	800cca8 <RTC_ByteToBcd2>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c9b0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	789b      	ldrb	r3, [r3, #2]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f000 f976 	bl	800cca8 <RTC_ByteToBcd2>
 800c9bc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9be:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	78db      	ldrb	r3, [r3, #3]
 800c9c6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	617b      	str	r3, [r7, #20]
 800c9cc:	e018      	b.n	800ca00 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d102      	bne.n	800c9e2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	785b      	ldrb	r3, [r3, #1]
 800c9ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c9ee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9f4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	78db      	ldrb	r3, [r3, #3]
 800c9fa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	6979      	ldr	r1, [r7, #20]
 800ca06:	4b18      	ldr	r3, [pc, #96]	; (800ca68 <HAL_RTC_SetTime+0x138>)
 800ca08:	400b      	ands	r3, r1
 800ca0a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	689a      	ldr	r2, [r3, #8]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ca1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	6899      	ldr	r1, [r3, #8]
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	68da      	ldr	r2, [r3, #12]
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	431a      	orrs	r2, r3
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	430a      	orrs	r2, r1
 800ca32:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f000 f8f9 	bl	800cc2c <RTC_ExitInitMode>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	22ff      	movs	r2, #255	; 0xff
 800ca44:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ca46:	7cfb      	ldrb	r3, [r7, #19]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d103      	bne.n	800ca54 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2200      	movs	r2, #0
 800ca58:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ca5c:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	371c      	adds	r7, #28
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd90      	pop	{r4, r7, pc}
 800ca66:	bf00      	nop
 800ca68:	007f7f7f 	.word	0x007f7f7f

0800ca6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca6c:	b590      	push	{r4, r7, lr}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d101      	bne.n	800ca86 <HAL_RTC_SetDate+0x1a>
 800ca82:	2302      	movs	r3, #2
 800ca84:	e073      	b.n	800cb6e <HAL_RTC_SetDate+0x102>
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2202      	movs	r2, #2
 800ca92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d10e      	bne.n	800caba <HAL_RTC_SetDate+0x4e>
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	785b      	ldrb	r3, [r3, #1]
 800caa0:	f003 0310 	and.w	r3, r3, #16
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d008      	beq.n	800caba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	785b      	ldrb	r3, [r3, #1]
 800caac:	f023 0310 	bic.w	r3, r3, #16
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	330a      	adds	r3, #10
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d11c      	bne.n	800cafa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	78db      	ldrb	r3, [r3, #3]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f000 f8ef 	bl	800cca8 <RTC_ByteToBcd2>
 800caca:	4603      	mov	r3, r0
 800cacc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	785b      	ldrb	r3, [r3, #1]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 f8e8 	bl	800cca8 <RTC_ByteToBcd2>
 800cad8:	4603      	mov	r3, r0
 800cada:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cadc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	789b      	ldrb	r3, [r3, #2]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 f8e0 	bl	800cca8 <RTC_ByteToBcd2>
 800cae8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800caea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800caf4:	4313      	orrs	r3, r2
 800caf6:	617b      	str	r3, [r7, #20]
 800caf8:	e00e      	b.n	800cb18 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	78db      	ldrb	r3, [r3, #3]
 800cafe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	785b      	ldrb	r3, [r3, #1]
 800cb04:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cb06:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cb0c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cb14:	4313      	orrs	r3, r2
 800cb16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	22ca      	movs	r2, #202	; 0xca
 800cb1e:	625a      	str	r2, [r3, #36]	; 0x24
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2253      	movs	r2, #83	; 0x53
 800cb26:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f000 f84b 	bl	800cbc4 <RTC_EnterInitMode>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cb32:	7cfb      	ldrb	r3, [r7, #19]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10a      	bne.n	800cb4e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	6979      	ldr	r1, [r7, #20]
 800cb3e:	4b0e      	ldr	r3, [pc, #56]	; (800cb78 <HAL_RTC_SetDate+0x10c>)
 800cb40:	400b      	ands	r3, r1
 800cb42:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	f000 f871 	bl	800cc2c <RTC_ExitInitMode>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	22ff      	movs	r2, #255	; 0xff
 800cb54:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800cb56:	7cfb      	ldrb	r3, [r7, #19]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d103      	bne.n	800cb64 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800cb6c:	7cfb      	ldrb	r3, [r7, #19]


}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	371c      	adds	r7, #28
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd90      	pop	{r4, r7, pc}
 800cb76:	bf00      	nop
 800cb78:	00ffff3f 	.word	0x00ffff3f

0800cb7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a0d      	ldr	r2, [pc, #52]	; (800cbc0 <HAL_RTC_WaitForSynchro+0x44>)
 800cb8a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800cb8c:	f7f6 fe44 	bl	8003818 <HAL_GetTick>
 800cb90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb92:	e009      	b.n	800cba8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb94:	f7f6 fe40 	bl	8003818 <HAL_GetTick>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cba2:	d901      	bls.n	800cba8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800cba4:	2303      	movs	r3, #3
 800cba6:	e007      	b.n	800cbb8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	f003 0320 	and.w	r3, r3, #32
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d0ee      	beq.n	800cb94 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	0003ff5f 	.word	0x0003ff5f

0800cbc4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d120      	bne.n	800cc20 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbe6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cbe8:	f7f6 fe16 	bl	8003818 <HAL_GetTick>
 800cbec:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cbee:	e00d      	b.n	800cc0c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cbf0:	f7f6 fe12 	bl	8003818 <HAL_GetTick>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbfe:	d905      	bls.n	800cc0c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800cc00:	2303      	movs	r3, #3
 800cc02:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2203      	movs	r2, #3
 800cc08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d102      	bne.n	800cc20 <RTC_EnterInitMode+0x5c>
 800cc1a:	7bfb      	ldrb	r3, [r7, #15]
 800cc1c:	2b03      	cmp	r3, #3
 800cc1e:	d1e7      	bne.n	800cbf0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800cc38:	4b1a      	ldr	r3, [pc, #104]	; (800cca4 <RTC_ExitInitMode+0x78>)
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	4a19      	ldr	r2, [pc, #100]	; (800cca4 <RTC_ExitInitMode+0x78>)
 800cc3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc42:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cc44:	4b17      	ldr	r3, [pc, #92]	; (800cca4 <RTC_ExitInitMode+0x78>)
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	f003 0320 	and.w	r3, r3, #32
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10c      	bne.n	800cc6a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff ff93 	bl	800cb7c <HAL_RTC_WaitForSynchro>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d01e      	beq.n	800cc9a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2203      	movs	r2, #3
 800cc60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cc64:	2303      	movs	r3, #3
 800cc66:	73fb      	strb	r3, [r7, #15]
 800cc68:	e017      	b.n	800cc9a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cc6a:	4b0e      	ldr	r3, [pc, #56]	; (800cca4 <RTC_ExitInitMode+0x78>)
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	4a0d      	ldr	r2, [pc, #52]	; (800cca4 <RTC_ExitInitMode+0x78>)
 800cc70:	f023 0320 	bic.w	r3, r3, #32
 800cc74:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f7ff ff80 	bl	800cb7c <HAL_RTC_WaitForSynchro>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d005      	beq.n	800cc8e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2203      	movs	r2, #3
 800cc86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cc8a:	2303      	movs	r3, #3
 800cc8c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cc8e:	4b05      	ldr	r3, [pc, #20]	; (800cca4 <RTC_ExitInitMode+0x78>)
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	4a04      	ldr	r2, [pc, #16]	; (800cca4 <RTC_ExitInitMode+0x78>)
 800cc94:	f043 0320 	orr.w	r3, r3, #32
 800cc98:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cc9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	58004000 	.word	0x58004000

0800cca8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	4603      	mov	r3, r0
 800ccb0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800ccb6:	79fb      	ldrb	r3, [r7, #7]
 800ccb8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800ccba:	e005      	b.n	800ccc8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800ccc2:	7afb      	ldrb	r3, [r7, #11]
 800ccc4:	3b0a      	subs	r3, #10
 800ccc6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800ccc8:	7afb      	ldrb	r3, [r7, #11]
 800ccca:	2b09      	cmp	r3, #9
 800cccc:	d8f6      	bhi.n	800ccbc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	011b      	lsls	r3, r3, #4
 800ccd4:	b2da      	uxtb	r2, r3
 800ccd6:	7afb      	ldrb	r3, [r7, #11]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	b2db      	uxtb	r3, r3
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3714      	adds	r7, #20
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	e10f      	b.n	800cf1a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a87      	ldr	r2, [pc, #540]	; (800cf24 <HAL_SPI_Init+0x23c>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d00f      	beq.n	800cd2a <HAL_SPI_Init+0x42>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a86      	ldr	r2, [pc, #536]	; (800cf28 <HAL_SPI_Init+0x240>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d00a      	beq.n	800cd2a <HAL_SPI_Init+0x42>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a84      	ldr	r2, [pc, #528]	; (800cf2c <HAL_SPI_Init+0x244>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d005      	beq.n	800cd2a <HAL_SPI_Init+0x42>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	2b0f      	cmp	r3, #15
 800cd24:	d901      	bls.n	800cd2a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cd26:	2301      	movs	r3, #1
 800cd28:	e0f7      	b.n	800cf1a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 fc12 	bl	800d554 <SPI_GetPacketSize>
 800cd30:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a7b      	ldr	r2, [pc, #492]	; (800cf24 <HAL_SPI_Init+0x23c>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d00c      	beq.n	800cd56 <HAL_SPI_Init+0x6e>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a79      	ldr	r2, [pc, #484]	; (800cf28 <HAL_SPI_Init+0x240>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d007      	beq.n	800cd56 <HAL_SPI_Init+0x6e>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a78      	ldr	r2, [pc, #480]	; (800cf2c <HAL_SPI_Init+0x244>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d002      	beq.n	800cd56 <HAL_SPI_Init+0x6e>
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2b08      	cmp	r3, #8
 800cd54:	d811      	bhi.n	800cd7a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd5a:	4a72      	ldr	r2, [pc, #456]	; (800cf24 <HAL_SPI_Init+0x23c>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d009      	beq.n	800cd74 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a70      	ldr	r2, [pc, #448]	; (800cf28 <HAL_SPI_Init+0x240>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d004      	beq.n	800cd74 <HAL_SPI_Init+0x8c>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a6f      	ldr	r2, [pc, #444]	; (800cf2c <HAL_SPI_Init+0x244>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d104      	bne.n	800cd7e <HAL_SPI_Init+0x96>
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2b10      	cmp	r3, #16
 800cd78:	d901      	bls.n	800cd7e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e0cd      	b.n	800cf1a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d106      	bne.n	800cd98 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7f5 fc32 	bl	80025fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2202      	movs	r2, #2
 800cd9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f022 0201 	bic.w	r2, r2, #1
 800cdae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cdba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	699b      	ldr	r3, [r3, #24]
 800cdc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cdc4:	d119      	bne.n	800cdfa <HAL_SPI_Init+0x112>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cdce:	d103      	bne.n	800cdd8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d008      	beq.n	800cdea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10c      	bne.n	800cdfa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cde4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cde8:	d107      	bne.n	800cdfa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cdf8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00f      	beq.n	800ce26 <HAL_SPI_Init+0x13e>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	2b06      	cmp	r3, #6
 800ce0c:	d90b      	bls.n	800ce26 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	430a      	orrs	r2, r1
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	e007      	b.n	800ce36 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ce34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	69da      	ldr	r2, [r3, #28]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3e:	431a      	orrs	r2, r3
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	431a      	orrs	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce48:	ea42 0103 	orr.w	r1, r2, r3
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	68da      	ldr	r2, [r3, #12]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	430a      	orrs	r2, r1
 800ce56:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce60:	431a      	orrs	r2, r3
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce66:	431a      	orrs	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	431a      	orrs	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	431a      	orrs	r2, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	695b      	ldr	r3, [r3, #20]
 800ce78:	431a      	orrs	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a1b      	ldr	r3, [r3, #32]
 800ce7e:	431a      	orrs	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	431a      	orrs	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce8a:	431a      	orrs	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	431a      	orrs	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce96:	ea42 0103 	orr.w	r1, r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	430a      	orrs	r2, r1
 800cea4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d113      	bne.n	800ced6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cec0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ced4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f022 0201 	bic.w	r2, r2, #1
 800cee4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00a      	beq.n	800cf08 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	430a      	orrs	r2, r1
 800cf06:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	40013000 	.word	0x40013000
 800cf28:	40003800 	.word	0x40003800
 800cf2c:	40003c00 	.word	0x40003c00

0800cf30 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b088      	sub	sp, #32
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	603b      	str	r3, [r7, #0]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf44:	095b      	lsrs	r3, r3, #5
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	3301      	adds	r3, #1
 800cf4a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	3330      	adds	r3, #48	; 0x30
 800cf52:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf54:	f7f6 fc60 	bl	8003818 <HAL_GetTick>
 800cf58:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d001      	beq.n	800cf6a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800cf66:	2302      	movs	r3, #2
 800cf68:	e250      	b.n	800d40c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d002      	beq.n	800cf76 <HAL_SPI_Receive+0x46>
 800cf70:	88fb      	ldrh	r3, [r7, #6]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d101      	bne.n	800cf7a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800cf76:	2301      	movs	r3, #1
 800cf78:	e248      	b.n	800d40c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d101      	bne.n	800cf88 <HAL_SPI_Receive+0x58>
 800cf84:	2302      	movs	r3, #2
 800cf86:	e241      	b.n	800d40c <HAL_SPI_Receive+0x4dc>
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2204      	movs	r2, #4
 800cf94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	88fa      	ldrh	r2, [r7, #6]
 800cfaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	88fa      	ldrh	r2, [r7, #6]
 800cfb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cfe0:	d108      	bne.n	800cff4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cff0:	601a      	str	r2, [r3, #0]
 800cff2:	e009      	b.n	800d008 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800d006:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	685a      	ldr	r2, [r3, #4]
 800d00e:	4b95      	ldr	r3, [pc, #596]	; (800d264 <HAL_SPI_Receive+0x334>)
 800d010:	4013      	ands	r3, r2
 800d012:	88f9      	ldrh	r1, [r7, #6]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	6812      	ldr	r2, [r2, #0]
 800d018:	430b      	orrs	r3, r1
 800d01a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f042 0201 	orr.w	r2, r2, #1
 800d02a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d034:	d107      	bne.n	800d046 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d044:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	2b0f      	cmp	r3, #15
 800d04c:	d96c      	bls.n	800d128 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d04e:	e064      	b.n	800d11a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	695b      	ldr	r3, [r3, #20]
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	2b01      	cmp	r3, #1
 800d064:	d114      	bne.n	800d090 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d06e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d070:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d076:	1d1a      	adds	r2, r3, #4
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d082:	b29b      	uxth	r3, r3
 800d084:	3b01      	subs	r3, #1
 800d086:	b29a      	uxth	r2, r3
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d08e:	e044      	b.n	800d11a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d096:	b29b      	uxth	r3, r3
 800d098:	8bfa      	ldrh	r2, [r7, #30]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d919      	bls.n	800d0d2 <HAL_SPI_Receive+0x1a2>
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d014      	beq.n	800d0d2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d0b2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0b8:	1d1a      	adds	r2, r3, #4
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d0d0:	e023      	b.n	800d11a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0d2:	f7f6 fba1 	bl	8003818 <HAL_GetTick>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	1ad3      	subs	r3, r2, r3
 800d0dc:	683a      	ldr	r2, [r7, #0]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d803      	bhi.n	800d0ea <HAL_SPI_Receive+0x1ba>
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0e8:	d102      	bne.n	800d0f0 <HAL_SPI_Receive+0x1c0>
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d114      	bne.n	800d11a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f000 f98f 	bl	800d414 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2201      	movs	r2, #1
 800d10a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d116:	2303      	movs	r3, #3
 800d118:	e178      	b.n	800d40c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d120:	b29b      	uxth	r3, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d194      	bne.n	800d050 <HAL_SPI_Receive+0x120>
 800d126:	e15e      	b.n	800d3e6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	2b07      	cmp	r3, #7
 800d12e:	f240 8153 	bls.w	800d3d8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d132:	e08f      	b.n	800d254 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	695b      	ldr	r3, [r3, #20]
 800d142:	f003 0301 	and.w	r3, r3, #1
 800d146:	2b01      	cmp	r3, #1
 800d148:	d114      	bne.n	800d174 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d14e:	69ba      	ldr	r2, [r7, #24]
 800d150:	8812      	ldrh	r2, [r2, #0]
 800d152:	b292      	uxth	r2, r2
 800d154:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d15a:	1c9a      	adds	r2, r3, #2
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d166:	b29b      	uxth	r3, r3
 800d168:	3b01      	subs	r3, #1
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d172:	e06f      	b.n	800d254 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	8bfa      	ldrh	r2, [r7, #30]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d924      	bls.n	800d1cc <HAL_SPI_Receive+0x29c>
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d01f      	beq.n	800d1cc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d190:	69ba      	ldr	r2, [r7, #24]
 800d192:	8812      	ldrh	r2, [r2, #0]
 800d194:	b292      	uxth	r2, r2
 800d196:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d19c:	1c9a      	adds	r2, r3, #2
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1a6:	69ba      	ldr	r2, [r7, #24]
 800d1a8:	8812      	ldrh	r2, [r2, #0]
 800d1aa:	b292      	uxth	r2, r2
 800d1ac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1b2:	1c9a      	adds	r2, r3, #2
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	3b02      	subs	r3, #2
 800d1c2:	b29a      	uxth	r2, r3
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d1ca:	e043      	b.n	800d254 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d119      	bne.n	800d20c <HAL_SPI_Receive+0x2dc>
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d014      	beq.n	800d20c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1e6:	69ba      	ldr	r2, [r7, #24]
 800d1e8:	8812      	ldrh	r2, [r2, #0]
 800d1ea:	b292      	uxth	r2, r2
 800d1ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1f2:	1c9a      	adds	r2, r3, #2
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	3b01      	subs	r3, #1
 800d202:	b29a      	uxth	r2, r3
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d20a:	e023      	b.n	800d254 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d20c:	f7f6 fb04 	bl	8003818 <HAL_GetTick>
 800d210:	4602      	mov	r2, r0
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	1ad3      	subs	r3, r2, r3
 800d216:	683a      	ldr	r2, [r7, #0]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d803      	bhi.n	800d224 <HAL_SPI_Receive+0x2f4>
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d222:	d102      	bne.n	800d22a <HAL_SPI_Receive+0x2fa>
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d114      	bne.n	800d254 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f000 f8f2 	bl	800d414 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d236:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2200      	movs	r2, #0
 800d24c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d250:	2303      	movs	r3, #3
 800d252:	e0db      	b.n	800d40c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f47f af69 	bne.w	800d134 <HAL_SPI_Receive+0x204>
 800d262:	e0c0      	b.n	800d3e6 <HAL_SPI_Receive+0x4b6>
 800d264:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	695b      	ldr	r3, [r3, #20]
 800d26e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	695b      	ldr	r3, [r3, #20]
 800d276:	f003 0301 	and.w	r3, r3, #1
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d117      	bne.n	800d2ae <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d28a:	7812      	ldrb	r2, [r2, #0]
 800d28c:	b2d2      	uxtb	r2, r2
 800d28e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d294:	1c5a      	adds	r2, r3, #1
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d2ac:	e094      	b.n	800d3d8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	8bfa      	ldrh	r2, [r7, #30]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d946      	bls.n	800d34a <HAL_SPI_Receive+0x41a>
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d041      	beq.n	800d34a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2d2:	7812      	ldrb	r2, [r2, #0]
 800d2d4:	b2d2      	uxtb	r2, r2
 800d2d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2dc:	1c5a      	adds	r2, r3, #1
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2ee:	7812      	ldrb	r2, [r2, #0]
 800d2f0:	b2d2      	uxtb	r2, r2
 800d2f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2f8:	1c5a      	adds	r2, r3, #1
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d30a:	7812      	ldrb	r2, [r2, #0]
 800d30c:	b2d2      	uxtb	r2, r2
 800d30e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d314:	1c5a      	adds	r2, r3, #1
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d326:	7812      	ldrb	r2, [r2, #0]
 800d328:	b2d2      	uxtb	r2, r2
 800d32a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d330:	1c5a      	adds	r2, r3, #1
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	3b04      	subs	r3, #4
 800d340:	b29a      	uxth	r2, r3
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d348:	e046      	b.n	800d3d8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d350:	b29b      	uxth	r3, r3
 800d352:	2b03      	cmp	r3, #3
 800d354:	d81c      	bhi.n	800d390 <HAL_SPI_Receive+0x460>
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d017      	beq.n	800d390 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d36c:	7812      	ldrb	r2, [r2, #0]
 800d36e:	b2d2      	uxtb	r2, r2
 800d370:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d382:	b29b      	uxth	r3, r3
 800d384:	3b01      	subs	r3, #1
 800d386:	b29a      	uxth	r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d38e:	e023      	b.n	800d3d8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d390:	f7f6 fa42 	bl	8003818 <HAL_GetTick>
 800d394:	4602      	mov	r2, r0
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	1ad3      	subs	r3, r2, r3
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d803      	bhi.n	800d3a8 <HAL_SPI_Receive+0x478>
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3a6:	d102      	bne.n	800d3ae <HAL_SPI_Receive+0x47e>
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d114      	bne.n	800d3d8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f000 f830 	bl	800d414 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e019      	b.n	800d40c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	f47f af41 	bne.w	800d268 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	f000 f814 	bl	800d414 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d402:	2b00      	cmp	r3, #0
 800d404:	d001      	beq.n	800d40a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	e000      	b.n	800d40c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800d40a:	2300      	movs	r3, #0
  }
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3720      	adds	r7, #32
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d414:	b480      	push	{r7}
 800d416:	b085      	sub	sp, #20
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	695b      	ldr	r3, [r3, #20]
 800d422:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	699a      	ldr	r2, [r3, #24]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f042 0208 	orr.w	r2, r2, #8
 800d432:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	699a      	ldr	r2, [r3, #24]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f042 0210 	orr.w	r2, r2, #16
 800d442:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f022 0201 	bic.w	r2, r2, #1
 800d452:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6919      	ldr	r1, [r3, #16]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	4b3c      	ldr	r3, [pc, #240]	; (800d550 <SPI_CloseTransfer+0x13c>)
 800d460:	400b      	ands	r3, r1
 800d462:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	689a      	ldr	r2, [r3, #8]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d472:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	2b04      	cmp	r3, #4
 800d47e:	d014      	beq.n	800d4aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f003 0320 	and.w	r3, r3, #32
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00f      	beq.n	800d4aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d490:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	699a      	ldr	r2, [r3, #24]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f042 0220 	orr.w	r2, r2, #32
 800d4a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	2b03      	cmp	r3, #3
 800d4b4:	d014      	beq.n	800d4e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00f      	beq.n	800d4e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4c6:	f043 0204 	orr.w	r2, r3, #4
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	699a      	ldr	r2, [r3, #24]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00f      	beq.n	800d50a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4f0:	f043 0201 	orr.w	r2, r3, #1
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	699a      	ldr	r2, [r3, #24]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d508:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00f      	beq.n	800d534 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d51a:	f043 0208 	orr.w	r2, r3, #8
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	699a      	ldr	r2, [r3, #24]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d532:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d544:	bf00      	nop
 800d546:	3714      	adds	r7, #20
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr
 800d550:	fffffc90 	.word	0xfffffc90

0800d554 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d560:	095b      	lsrs	r3, r3, #5
 800d562:	3301      	adds	r3, #1
 800d564:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	3301      	adds	r3, #1
 800d56c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	3307      	adds	r3, #7
 800d572:	08db      	lsrs	r3, r3, #3
 800d574:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	fb02 f303 	mul.w	r3, r2, r3
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3714      	adds	r7, #20
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr

0800d58a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b082      	sub	sp, #8
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d101      	bne.n	800d59c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d598:	2301      	movs	r3, #1
 800d59a:	e049      	b.n	800d630 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d106      	bne.n	800d5b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7f5 fcc1 	bl	8002f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2202      	movs	r2, #2
 800d5ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	f000 fe7d 	bl	800e2c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2201      	movs	r2, #1
 800d602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2201      	movs	r2, #1
 800d60a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2201      	movs	r2, #1
 800d612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2201      	movs	r2, #1
 800d61a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2201      	movs	r2, #1
 800d622:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2201      	movs	r2, #1
 800d62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d62e:	2300      	movs	r3, #0
}
 800d630:	4618      	mov	r0, r3
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d638:	b480      	push	{r7}
 800d63a:	b085      	sub	sp, #20
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d646:	b2db      	uxtb	r3, r3
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d001      	beq.n	800d650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d64c:	2301      	movs	r3, #1
 800d64e:	e054      	b.n	800d6fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2202      	movs	r2, #2
 800d654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	68da      	ldr	r2, [r3, #12]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f042 0201 	orr.w	r2, r2, #1
 800d666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a26      	ldr	r2, [pc, #152]	; (800d708 <HAL_TIM_Base_Start_IT+0xd0>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d022      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x80>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d67a:	d01d      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x80>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a22      	ldr	r2, [pc, #136]	; (800d70c <HAL_TIM_Base_Start_IT+0xd4>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d018      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x80>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a21      	ldr	r2, [pc, #132]	; (800d710 <HAL_TIM_Base_Start_IT+0xd8>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d013      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x80>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a1f      	ldr	r2, [pc, #124]	; (800d714 <HAL_TIM_Base_Start_IT+0xdc>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d00e      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x80>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a1e      	ldr	r2, [pc, #120]	; (800d718 <HAL_TIM_Base_Start_IT+0xe0>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d009      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x80>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a1c      	ldr	r2, [pc, #112]	; (800d71c <HAL_TIM_Base_Start_IT+0xe4>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d004      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x80>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a1b      	ldr	r2, [pc, #108]	; (800d720 <HAL_TIM_Base_Start_IT+0xe8>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d115      	bne.n	800d6e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	689a      	ldr	r2, [r3, #8]
 800d6be:	4b19      	ldr	r3, [pc, #100]	; (800d724 <HAL_TIM_Base_Start_IT+0xec>)
 800d6c0:	4013      	ands	r3, r2
 800d6c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2b06      	cmp	r3, #6
 800d6c8:	d015      	beq.n	800d6f6 <HAL_TIM_Base_Start_IT+0xbe>
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6d0:	d011      	beq.n	800d6f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f042 0201 	orr.w	r2, r2, #1
 800d6e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6e2:	e008      	b.n	800d6f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f042 0201 	orr.w	r2, r2, #1
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	e000      	b.n	800d6f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3714      	adds	r7, #20
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	40010000 	.word	0x40010000
 800d70c:	40000400 	.word	0x40000400
 800d710:	40000800 	.word	0x40000800
 800d714:	40000c00 	.word	0x40000c00
 800d718:	40010400 	.word	0x40010400
 800d71c:	40001800 	.word	0x40001800
 800d720:	40014000 	.word	0x40014000
 800d724:	00010007 	.word	0x00010007

0800d728 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d732:	2300      	movs	r3, #0
 800d734:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d109      	bne.n	800d750 <HAL_TIM_OC_Start_IT+0x28>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d742:	b2db      	uxtb	r3, r3
 800d744:	2b01      	cmp	r3, #1
 800d746:	bf14      	ite	ne
 800d748:	2301      	movne	r3, #1
 800d74a:	2300      	moveq	r3, #0
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	e03c      	b.n	800d7ca <HAL_TIM_OC_Start_IT+0xa2>
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	2b04      	cmp	r3, #4
 800d754:	d109      	bne.n	800d76a <HAL_TIM_OC_Start_IT+0x42>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	2b01      	cmp	r3, #1
 800d760:	bf14      	ite	ne
 800d762:	2301      	movne	r3, #1
 800d764:	2300      	moveq	r3, #0
 800d766:	b2db      	uxtb	r3, r3
 800d768:	e02f      	b.n	800d7ca <HAL_TIM_OC_Start_IT+0xa2>
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	2b08      	cmp	r3, #8
 800d76e:	d109      	bne.n	800d784 <HAL_TIM_OC_Start_IT+0x5c>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d776:	b2db      	uxtb	r3, r3
 800d778:	2b01      	cmp	r3, #1
 800d77a:	bf14      	ite	ne
 800d77c:	2301      	movne	r3, #1
 800d77e:	2300      	moveq	r3, #0
 800d780:	b2db      	uxtb	r3, r3
 800d782:	e022      	b.n	800d7ca <HAL_TIM_OC_Start_IT+0xa2>
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	2b0c      	cmp	r3, #12
 800d788:	d109      	bne.n	800d79e <HAL_TIM_OC_Start_IT+0x76>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d790:	b2db      	uxtb	r3, r3
 800d792:	2b01      	cmp	r3, #1
 800d794:	bf14      	ite	ne
 800d796:	2301      	movne	r3, #1
 800d798:	2300      	moveq	r3, #0
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	e015      	b.n	800d7ca <HAL_TIM_OC_Start_IT+0xa2>
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	2b10      	cmp	r3, #16
 800d7a2:	d109      	bne.n	800d7b8 <HAL_TIM_OC_Start_IT+0x90>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	bf14      	ite	ne
 800d7b0:	2301      	movne	r3, #1
 800d7b2:	2300      	moveq	r3, #0
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	e008      	b.n	800d7ca <HAL_TIM_OC_Start_IT+0xa2>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	bf14      	ite	ne
 800d7c4:	2301      	movne	r3, #1
 800d7c6:	2300      	moveq	r3, #0
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e0ec      	b.n	800d9ac <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d104      	bne.n	800d7e2 <HAL_TIM_OC_Start_IT+0xba>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2202      	movs	r2, #2
 800d7dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d7e0:	e023      	b.n	800d82a <HAL_TIM_OC_Start_IT+0x102>
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	2b04      	cmp	r3, #4
 800d7e6:	d104      	bne.n	800d7f2 <HAL_TIM_OC_Start_IT+0xca>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2202      	movs	r2, #2
 800d7ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d7f0:	e01b      	b.n	800d82a <HAL_TIM_OC_Start_IT+0x102>
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	2b08      	cmp	r3, #8
 800d7f6:	d104      	bne.n	800d802 <HAL_TIM_OC_Start_IT+0xda>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2202      	movs	r2, #2
 800d7fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d800:	e013      	b.n	800d82a <HAL_TIM_OC_Start_IT+0x102>
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	2b0c      	cmp	r3, #12
 800d806:	d104      	bne.n	800d812 <HAL_TIM_OC_Start_IT+0xea>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2202      	movs	r2, #2
 800d80c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d810:	e00b      	b.n	800d82a <HAL_TIM_OC_Start_IT+0x102>
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	2b10      	cmp	r3, #16
 800d816:	d104      	bne.n	800d822 <HAL_TIM_OC_Start_IT+0xfa>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2202      	movs	r2, #2
 800d81c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d820:	e003      	b.n	800d82a <HAL_TIM_OC_Start_IT+0x102>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2202      	movs	r2, #2
 800d826:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	2b0c      	cmp	r3, #12
 800d82e:	d841      	bhi.n	800d8b4 <HAL_TIM_OC_Start_IT+0x18c>
 800d830:	a201      	add	r2, pc, #4	; (adr r2, 800d838 <HAL_TIM_OC_Start_IT+0x110>)
 800d832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d836:	bf00      	nop
 800d838:	0800d86d 	.word	0x0800d86d
 800d83c:	0800d8b5 	.word	0x0800d8b5
 800d840:	0800d8b5 	.word	0x0800d8b5
 800d844:	0800d8b5 	.word	0x0800d8b5
 800d848:	0800d87f 	.word	0x0800d87f
 800d84c:	0800d8b5 	.word	0x0800d8b5
 800d850:	0800d8b5 	.word	0x0800d8b5
 800d854:	0800d8b5 	.word	0x0800d8b5
 800d858:	0800d891 	.word	0x0800d891
 800d85c:	0800d8b5 	.word	0x0800d8b5
 800d860:	0800d8b5 	.word	0x0800d8b5
 800d864:	0800d8b5 	.word	0x0800d8b5
 800d868:	0800d8a3 	.word	0x0800d8a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	68da      	ldr	r2, [r3, #12]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f042 0202 	orr.w	r2, r2, #2
 800d87a:	60da      	str	r2, [r3, #12]
      break;
 800d87c:	e01d      	b.n	800d8ba <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	68da      	ldr	r2, [r3, #12]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f042 0204 	orr.w	r2, r2, #4
 800d88c:	60da      	str	r2, [r3, #12]
      break;
 800d88e:	e014      	b.n	800d8ba <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68da      	ldr	r2, [r3, #12]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f042 0208 	orr.w	r2, r2, #8
 800d89e:	60da      	str	r2, [r3, #12]
      break;
 800d8a0:	e00b      	b.n	800d8ba <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68da      	ldr	r2, [r3, #12]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f042 0210 	orr.w	r2, r2, #16
 800d8b0:	60da      	str	r2, [r3, #12]
      break;
 800d8b2:	e002      	b.n	800d8ba <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	73fb      	strb	r3, [r7, #15]
      break;
 800d8b8:	bf00      	nop
  }

  if (status == HAL_OK)
 800d8ba:	7bfb      	ldrb	r3, [r7, #15]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d174      	bne.n	800d9aa <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	6839      	ldr	r1, [r7, #0]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f001 f917 	bl	800eafc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a38      	ldr	r2, [pc, #224]	; (800d9b4 <HAL_TIM_OC_Start_IT+0x28c>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d013      	beq.n	800d900 <HAL_TIM_OC_Start_IT+0x1d8>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a36      	ldr	r2, [pc, #216]	; (800d9b8 <HAL_TIM_OC_Start_IT+0x290>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d00e      	beq.n	800d900 <HAL_TIM_OC_Start_IT+0x1d8>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a35      	ldr	r2, [pc, #212]	; (800d9bc <HAL_TIM_OC_Start_IT+0x294>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d009      	beq.n	800d900 <HAL_TIM_OC_Start_IT+0x1d8>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a33      	ldr	r2, [pc, #204]	; (800d9c0 <HAL_TIM_OC_Start_IT+0x298>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d004      	beq.n	800d900 <HAL_TIM_OC_Start_IT+0x1d8>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a32      	ldr	r2, [pc, #200]	; (800d9c4 <HAL_TIM_OC_Start_IT+0x29c>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d101      	bne.n	800d904 <HAL_TIM_OC_Start_IT+0x1dc>
 800d900:	2301      	movs	r3, #1
 800d902:	e000      	b.n	800d906 <HAL_TIM_OC_Start_IT+0x1de>
 800d904:	2300      	movs	r3, #0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d007      	beq.n	800d91a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d918:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4a25      	ldr	r2, [pc, #148]	; (800d9b4 <HAL_TIM_OC_Start_IT+0x28c>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d022      	beq.n	800d96a <HAL_TIM_OC_Start_IT+0x242>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d92c:	d01d      	beq.n	800d96a <HAL_TIM_OC_Start_IT+0x242>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a25      	ldr	r2, [pc, #148]	; (800d9c8 <HAL_TIM_OC_Start_IT+0x2a0>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d018      	beq.n	800d96a <HAL_TIM_OC_Start_IT+0x242>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a23      	ldr	r2, [pc, #140]	; (800d9cc <HAL_TIM_OC_Start_IT+0x2a4>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d013      	beq.n	800d96a <HAL_TIM_OC_Start_IT+0x242>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a22      	ldr	r2, [pc, #136]	; (800d9d0 <HAL_TIM_OC_Start_IT+0x2a8>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d00e      	beq.n	800d96a <HAL_TIM_OC_Start_IT+0x242>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a19      	ldr	r2, [pc, #100]	; (800d9b8 <HAL_TIM_OC_Start_IT+0x290>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d009      	beq.n	800d96a <HAL_TIM_OC_Start_IT+0x242>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a1e      	ldr	r2, [pc, #120]	; (800d9d4 <HAL_TIM_OC_Start_IT+0x2ac>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d004      	beq.n	800d96a <HAL_TIM_OC_Start_IT+0x242>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a15      	ldr	r2, [pc, #84]	; (800d9bc <HAL_TIM_OC_Start_IT+0x294>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d115      	bne.n	800d996 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	689a      	ldr	r2, [r3, #8]
 800d970:	4b19      	ldr	r3, [pc, #100]	; (800d9d8 <HAL_TIM_OC_Start_IT+0x2b0>)
 800d972:	4013      	ands	r3, r2
 800d974:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	2b06      	cmp	r3, #6
 800d97a:	d015      	beq.n	800d9a8 <HAL_TIM_OC_Start_IT+0x280>
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d982:	d011      	beq.n	800d9a8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f042 0201 	orr.w	r2, r2, #1
 800d992:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d994:	e008      	b.n	800d9a8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f042 0201 	orr.w	r2, r2, #1
 800d9a4:	601a      	str	r2, [r3, #0]
 800d9a6:	e000      	b.n	800d9aa <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9a8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	40010000 	.word	0x40010000
 800d9b8:	40010400 	.word	0x40010400
 800d9bc:	40014000 	.word	0x40014000
 800d9c0:	40014400 	.word	0x40014400
 800d9c4:	40014800 	.word	0x40014800
 800d9c8:	40000400 	.word	0x40000400
 800d9cc:	40000800 	.word	0x40000800
 800d9d0:	40000c00 	.word	0x40000c00
 800d9d4:	40001800 	.word	0x40001800
 800d9d8:	00010007 	.word	0x00010007

0800d9dc <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	2b0c      	cmp	r3, #12
 800d9ee:	d841      	bhi.n	800da74 <HAL_TIM_OC_Stop_IT+0x98>
 800d9f0:	a201      	add	r2, pc, #4	; (adr r2, 800d9f8 <HAL_TIM_OC_Stop_IT+0x1c>)
 800d9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f6:	bf00      	nop
 800d9f8:	0800da2d 	.word	0x0800da2d
 800d9fc:	0800da75 	.word	0x0800da75
 800da00:	0800da75 	.word	0x0800da75
 800da04:	0800da75 	.word	0x0800da75
 800da08:	0800da3f 	.word	0x0800da3f
 800da0c:	0800da75 	.word	0x0800da75
 800da10:	0800da75 	.word	0x0800da75
 800da14:	0800da75 	.word	0x0800da75
 800da18:	0800da51 	.word	0x0800da51
 800da1c:	0800da75 	.word	0x0800da75
 800da20:	0800da75 	.word	0x0800da75
 800da24:	0800da75 	.word	0x0800da75
 800da28:	0800da63 	.word	0x0800da63
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	68da      	ldr	r2, [r3, #12]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f022 0202 	bic.w	r2, r2, #2
 800da3a:	60da      	str	r2, [r3, #12]
      break;
 800da3c:	e01d      	b.n	800da7a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	68da      	ldr	r2, [r3, #12]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f022 0204 	bic.w	r2, r2, #4
 800da4c:	60da      	str	r2, [r3, #12]
      break;
 800da4e:	e014      	b.n	800da7a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	68da      	ldr	r2, [r3, #12]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f022 0208 	bic.w	r2, r2, #8
 800da5e:	60da      	str	r2, [r3, #12]
      break;
 800da60:	e00b      	b.n	800da7a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68da      	ldr	r2, [r3, #12]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f022 0210 	bic.w	r2, r2, #16
 800da70:	60da      	str	r2, [r3, #12]
      break;
 800da72:	e002      	b.n	800da7a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800da74:	2301      	movs	r3, #1
 800da76:	73fb      	strb	r3, [r7, #15]
      break;
 800da78:	bf00      	nop
  }

  if (status == HAL_OK)
 800da7a:	7bfb      	ldrb	r3, [r7, #15]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f040 8081 	bne.w	800db84 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2200      	movs	r2, #0
 800da88:	6839      	ldr	r1, [r7, #0]
 800da8a:	4618      	mov	r0, r3
 800da8c:	f001 f836 	bl	800eafc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a3e      	ldr	r2, [pc, #248]	; (800db90 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d013      	beq.n	800dac2 <HAL_TIM_OC_Stop_IT+0xe6>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a3d      	ldr	r2, [pc, #244]	; (800db94 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d00e      	beq.n	800dac2 <HAL_TIM_OC_Stop_IT+0xe6>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a3b      	ldr	r2, [pc, #236]	; (800db98 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d009      	beq.n	800dac2 <HAL_TIM_OC_Stop_IT+0xe6>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a3a      	ldr	r2, [pc, #232]	; (800db9c <HAL_TIM_OC_Stop_IT+0x1c0>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d004      	beq.n	800dac2 <HAL_TIM_OC_Stop_IT+0xe6>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a38      	ldr	r2, [pc, #224]	; (800dba0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d101      	bne.n	800dac6 <HAL_TIM_OC_Stop_IT+0xea>
 800dac2:	2301      	movs	r3, #1
 800dac4:	e000      	b.n	800dac8 <HAL_TIM_OC_Stop_IT+0xec>
 800dac6:	2300      	movs	r3, #0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d017      	beq.n	800dafc <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6a1a      	ldr	r2, [r3, #32]
 800dad2:	f241 1311 	movw	r3, #4369	; 0x1111
 800dad6:	4013      	ands	r3, r2
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d10f      	bne.n	800dafc <HAL_TIM_OC_Stop_IT+0x120>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	6a1a      	ldr	r2, [r3, #32]
 800dae2:	f240 4344 	movw	r3, #1092	; 0x444
 800dae6:	4013      	ands	r3, r2
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d107      	bne.n	800dafc <HAL_TIM_OC_Stop_IT+0x120>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dafa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	6a1a      	ldr	r2, [r3, #32]
 800db02:	f241 1311 	movw	r3, #4369	; 0x1111
 800db06:	4013      	ands	r3, r2
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10f      	bne.n	800db2c <HAL_TIM_OC_Stop_IT+0x150>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	6a1a      	ldr	r2, [r3, #32]
 800db12:	f240 4344 	movw	r3, #1092	; 0x444
 800db16:	4013      	ands	r3, r2
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d107      	bne.n	800db2c <HAL_TIM_OC_Stop_IT+0x150>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f022 0201 	bic.w	r2, r2, #1
 800db2a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d104      	bne.n	800db3c <HAL_TIM_OC_Stop_IT+0x160>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2201      	movs	r2, #1
 800db36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db3a:	e023      	b.n	800db84 <HAL_TIM_OC_Stop_IT+0x1a8>
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	2b04      	cmp	r3, #4
 800db40:	d104      	bne.n	800db4c <HAL_TIM_OC_Stop_IT+0x170>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2201      	movs	r2, #1
 800db46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db4a:	e01b      	b.n	800db84 <HAL_TIM_OC_Stop_IT+0x1a8>
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	2b08      	cmp	r3, #8
 800db50:	d104      	bne.n	800db5c <HAL_TIM_OC_Stop_IT+0x180>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db5a:	e013      	b.n	800db84 <HAL_TIM_OC_Stop_IT+0x1a8>
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	2b0c      	cmp	r3, #12
 800db60:	d104      	bne.n	800db6c <HAL_TIM_OC_Stop_IT+0x190>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2201      	movs	r2, #1
 800db66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db6a:	e00b      	b.n	800db84 <HAL_TIM_OC_Stop_IT+0x1a8>
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	2b10      	cmp	r3, #16
 800db70:	d104      	bne.n	800db7c <HAL_TIM_OC_Stop_IT+0x1a0>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2201      	movs	r2, #1
 800db76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db7a:	e003      	b.n	800db84 <HAL_TIM_OC_Stop_IT+0x1a8>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800db84:	7bfb      	ldrb	r3, [r7, #15]
}
 800db86:	4618      	mov	r0, r3
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	40010000 	.word	0x40010000
 800db94:	40010400 	.word	0x40010400
 800db98:	40014000 	.word	0x40014000
 800db9c:	40014400 	.word	0x40014400
 800dba0:	40014800 	.word	0x40014800

0800dba4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d101      	bne.n	800dbb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e049      	b.n	800dc4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d106      	bne.n	800dbd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 f841 	bl	800dc52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2202      	movs	r2, #2
 800dbd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	3304      	adds	r3, #4
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	4610      	mov	r0, r2
 800dbe4:	f000 fb70 	bl	800e2c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2201      	movs	r2, #1
 800dc14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2201      	movs	r2, #1
 800dc24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2201      	movs	r2, #1
 800dc34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2201      	movs	r2, #1
 800dc44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc48:	2300      	movs	r3, #0
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3708      	adds	r7, #8
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dc52:	b480      	push	{r7}
 800dc54:	b083      	sub	sp, #12
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dc5a:	bf00      	nop
 800dc5c:	370c      	adds	r7, #12
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b084      	sub	sp, #16
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	691b      	ldr	r3, [r3, #16]
 800dc7c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	f003 0302 	and.w	r3, r3, #2
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d020      	beq.n	800dcca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f003 0302 	and.w	r3, r3, #2
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d01b      	beq.n	800dcca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f06f 0202 	mvn.w	r2, #2
 800dc9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	f003 0303 	and.w	r3, r3, #3
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d003      	beq.n	800dcb8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 faeb 	bl	800e28c <HAL_TIM_IC_CaptureCallback>
 800dcb6:	e005      	b.n	800dcc4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7f3 fb35 	bl	8001328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 faee 	bl	800e2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	f003 0304 	and.w	r3, r3, #4
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d020      	beq.n	800dd16 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f003 0304 	and.w	r3, r3, #4
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d01b      	beq.n	800dd16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f06f 0204 	mvn.w	r2, #4
 800dce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2202      	movs	r2, #2
 800dcec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	699b      	ldr	r3, [r3, #24]
 800dcf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d003      	beq.n	800dd04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 fac5 	bl	800e28c <HAL_TIM_IC_CaptureCallback>
 800dd02:	e005      	b.n	800dd10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f7f3 fb0f 	bl	8001328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fac8 	bl	800e2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2200      	movs	r2, #0
 800dd14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	f003 0308 	and.w	r3, r3, #8
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d020      	beq.n	800dd62 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f003 0308 	and.w	r3, r3, #8
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d01b      	beq.n	800dd62 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f06f 0208 	mvn.w	r2, #8
 800dd32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2204      	movs	r2, #4
 800dd38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	69db      	ldr	r3, [r3, #28]
 800dd40:	f003 0303 	and.w	r3, r3, #3
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d003      	beq.n	800dd50 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 fa9f 	bl	800e28c <HAL_TIM_IC_CaptureCallback>
 800dd4e:	e005      	b.n	800dd5c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7f3 fae9 	bl	8001328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 faa2 	bl	800e2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	f003 0310 	and.w	r3, r3, #16
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d020      	beq.n	800ddae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f003 0310 	and.w	r3, r3, #16
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d01b      	beq.n	800ddae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f06f 0210 	mvn.w	r2, #16
 800dd7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2208      	movs	r2, #8
 800dd84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	69db      	ldr	r3, [r3, #28]
 800dd8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d003      	beq.n	800dd9c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 fa79 	bl	800e28c <HAL_TIM_IC_CaptureCallback>
 800dd9a:	e005      	b.n	800dda8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7f3 fac3 	bl	8001328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 fa7c 	bl	800e2a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	f003 0301 	and.w	r3, r3, #1
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00c      	beq.n	800ddd2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f003 0301 	and.w	r3, r3, #1
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d007      	beq.n	800ddd2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f06f 0201 	mvn.w	r2, #1
 800ddca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f7f4 f8e5 	bl	8001f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d104      	bne.n	800dde6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00c      	beq.n	800de00 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d007      	beq.n	800de00 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ddf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 ffba 	bl	800ed74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00c      	beq.n	800de24 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de10:	2b00      	cmp	r3, #0
 800de12:	d007      	beq.n	800de24 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800de1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 ffb2 	bl	800ed88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00c      	beq.n	800de48 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de34:	2b00      	cmp	r3, #0
 800de36:	d007      	beq.n	800de48 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800de40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fa36 	bl	800e2b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	f003 0320 	and.w	r3, r3, #32
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d00c      	beq.n	800de6c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f003 0320 	and.w	r3, r3, #32
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d007      	beq.n	800de6c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f06f 0220 	mvn.w	r2, #32
 800de64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 ff7a 	bl	800ed60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800de6c:	bf00      	nop
 800de6e:	3710      	adds	r7, #16
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b086      	sub	sp, #24
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de80:	2300      	movs	r3, #0
 800de82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d101      	bne.n	800de92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800de8e:	2302      	movs	r3, #2
 800de90:	e0ff      	b.n	800e092 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2201      	movs	r2, #1
 800de96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2b14      	cmp	r3, #20
 800de9e:	f200 80f0 	bhi.w	800e082 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dea2:	a201      	add	r2, pc, #4	; (adr r2, 800dea8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea8:	0800defd 	.word	0x0800defd
 800deac:	0800e083 	.word	0x0800e083
 800deb0:	0800e083 	.word	0x0800e083
 800deb4:	0800e083 	.word	0x0800e083
 800deb8:	0800df3d 	.word	0x0800df3d
 800debc:	0800e083 	.word	0x0800e083
 800dec0:	0800e083 	.word	0x0800e083
 800dec4:	0800e083 	.word	0x0800e083
 800dec8:	0800df7f 	.word	0x0800df7f
 800decc:	0800e083 	.word	0x0800e083
 800ded0:	0800e083 	.word	0x0800e083
 800ded4:	0800e083 	.word	0x0800e083
 800ded8:	0800dfbf 	.word	0x0800dfbf
 800dedc:	0800e083 	.word	0x0800e083
 800dee0:	0800e083 	.word	0x0800e083
 800dee4:	0800e083 	.word	0x0800e083
 800dee8:	0800e001 	.word	0x0800e001
 800deec:	0800e083 	.word	0x0800e083
 800def0:	0800e083 	.word	0x0800e083
 800def4:	0800e083 	.word	0x0800e083
 800def8:	0800e041 	.word	0x0800e041
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	68b9      	ldr	r1, [r7, #8]
 800df02:	4618      	mov	r0, r3
 800df04:	f000 fa86 	bl	800e414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	699a      	ldr	r2, [r3, #24]
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f042 0208 	orr.w	r2, r2, #8
 800df16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	699a      	ldr	r2, [r3, #24]
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f022 0204 	bic.w	r2, r2, #4
 800df26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	6999      	ldr	r1, [r3, #24]
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	691a      	ldr	r2, [r3, #16]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	430a      	orrs	r2, r1
 800df38:	619a      	str	r2, [r3, #24]
      break;
 800df3a:	e0a5      	b.n	800e088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	68b9      	ldr	r1, [r7, #8]
 800df42:	4618      	mov	r0, r3
 800df44:	f000 faf6 	bl	800e534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	699a      	ldr	r2, [r3, #24]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	699a      	ldr	r2, [r3, #24]
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	6999      	ldr	r1, [r3, #24]
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	021a      	lsls	r2, r3, #8
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	430a      	orrs	r2, r1
 800df7a:	619a      	str	r2, [r3, #24]
      break;
 800df7c:	e084      	b.n	800e088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	68b9      	ldr	r1, [r7, #8]
 800df84:	4618      	mov	r0, r3
 800df86:	f000 fb5f 	bl	800e648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	69da      	ldr	r2, [r3, #28]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f042 0208 	orr.w	r2, r2, #8
 800df98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	69da      	ldr	r2, [r3, #28]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f022 0204 	bic.w	r2, r2, #4
 800dfa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	69d9      	ldr	r1, [r3, #28]
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	691a      	ldr	r2, [r3, #16]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	430a      	orrs	r2, r1
 800dfba:	61da      	str	r2, [r3, #28]
      break;
 800dfbc:	e064      	b.n	800e088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	68b9      	ldr	r1, [r7, #8]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f000 fbc7 	bl	800e758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	69da      	ldr	r2, [r3, #28]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dfd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	69da      	ldr	r2, [r3, #28]
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	69d9      	ldr	r1, [r3, #28]
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	691b      	ldr	r3, [r3, #16]
 800dff4:	021a      	lsls	r2, r3, #8
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	430a      	orrs	r2, r1
 800dffc:	61da      	str	r2, [r3, #28]
      break;
 800dffe:	e043      	b.n	800e088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68b9      	ldr	r1, [r7, #8]
 800e006:	4618      	mov	r0, r3
 800e008:	f000 fc10 	bl	800e82c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f042 0208 	orr.w	r2, r2, #8
 800e01a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f022 0204 	bic.w	r2, r2, #4
 800e02a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	691a      	ldr	r2, [r3, #16]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	430a      	orrs	r2, r1
 800e03c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e03e:	e023      	b.n	800e088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68b9      	ldr	r1, [r7, #8]
 800e046:	4618      	mov	r0, r3
 800e048:	f000 fc54 	bl	800e8f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e05a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e06a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	691b      	ldr	r3, [r3, #16]
 800e076:	021a      	lsls	r2, r3, #8
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	430a      	orrs	r2, r1
 800e07e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e080:	e002      	b.n	800e088 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e082:	2301      	movs	r3, #1
 800e084:	75fb      	strb	r3, [r7, #23]
      break;
 800e086:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2200      	movs	r2, #0
 800e08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e090:	7dfb      	ldrb	r3, [r7, #23]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3718      	adds	r7, #24
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop

0800e09c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d101      	bne.n	800e0b8 <HAL_TIM_ConfigClockSource+0x1c>
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	e0dc      	b.n	800e272 <HAL_TIM_ConfigClockSource+0x1d6>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2202      	movs	r2, #2
 800e0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e0d0:	68ba      	ldr	r2, [r7, #8]
 800e0d2:	4b6a      	ldr	r3, [pc, #424]	; (800e27c <HAL_TIM_ConfigClockSource+0x1e0>)
 800e0d4:	4013      	ands	r3, r2
 800e0d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e0de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	68ba      	ldr	r2, [r7, #8]
 800e0e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a64      	ldr	r2, [pc, #400]	; (800e280 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	f000 80a9 	beq.w	800e246 <HAL_TIM_ConfigClockSource+0x1aa>
 800e0f4:	4a62      	ldr	r2, [pc, #392]	; (800e280 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	f200 80ae 	bhi.w	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e0fc:	4a61      	ldr	r2, [pc, #388]	; (800e284 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	f000 80a1 	beq.w	800e246 <HAL_TIM_ConfigClockSource+0x1aa>
 800e104:	4a5f      	ldr	r2, [pc, #380]	; (800e284 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e106:	4293      	cmp	r3, r2
 800e108:	f200 80a6 	bhi.w	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e10c:	4a5e      	ldr	r2, [pc, #376]	; (800e288 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	f000 8099 	beq.w	800e246 <HAL_TIM_ConfigClockSource+0x1aa>
 800e114:	4a5c      	ldr	r2, [pc, #368]	; (800e288 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e116:	4293      	cmp	r3, r2
 800e118:	f200 809e 	bhi.w	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e11c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e120:	f000 8091 	beq.w	800e246 <HAL_TIM_ConfigClockSource+0x1aa>
 800e124:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e128:	f200 8096 	bhi.w	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e12c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e130:	f000 8089 	beq.w	800e246 <HAL_TIM_ConfigClockSource+0x1aa>
 800e134:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e138:	f200 808e 	bhi.w	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e13c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e140:	d03e      	beq.n	800e1c0 <HAL_TIM_ConfigClockSource+0x124>
 800e142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e146:	f200 8087 	bhi.w	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e14a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e14e:	f000 8086 	beq.w	800e25e <HAL_TIM_ConfigClockSource+0x1c2>
 800e152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e156:	d87f      	bhi.n	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e158:	2b70      	cmp	r3, #112	; 0x70
 800e15a:	d01a      	beq.n	800e192 <HAL_TIM_ConfigClockSource+0xf6>
 800e15c:	2b70      	cmp	r3, #112	; 0x70
 800e15e:	d87b      	bhi.n	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e160:	2b60      	cmp	r3, #96	; 0x60
 800e162:	d050      	beq.n	800e206 <HAL_TIM_ConfigClockSource+0x16a>
 800e164:	2b60      	cmp	r3, #96	; 0x60
 800e166:	d877      	bhi.n	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e168:	2b50      	cmp	r3, #80	; 0x50
 800e16a:	d03c      	beq.n	800e1e6 <HAL_TIM_ConfigClockSource+0x14a>
 800e16c:	2b50      	cmp	r3, #80	; 0x50
 800e16e:	d873      	bhi.n	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e170:	2b40      	cmp	r3, #64	; 0x40
 800e172:	d058      	beq.n	800e226 <HAL_TIM_ConfigClockSource+0x18a>
 800e174:	2b40      	cmp	r3, #64	; 0x40
 800e176:	d86f      	bhi.n	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e178:	2b30      	cmp	r3, #48	; 0x30
 800e17a:	d064      	beq.n	800e246 <HAL_TIM_ConfigClockSource+0x1aa>
 800e17c:	2b30      	cmp	r3, #48	; 0x30
 800e17e:	d86b      	bhi.n	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e180:	2b20      	cmp	r3, #32
 800e182:	d060      	beq.n	800e246 <HAL_TIM_ConfigClockSource+0x1aa>
 800e184:	2b20      	cmp	r3, #32
 800e186:	d867      	bhi.n	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d05c      	beq.n	800e246 <HAL_TIM_ConfigClockSource+0x1aa>
 800e18c:	2b10      	cmp	r3, #16
 800e18e:	d05a      	beq.n	800e246 <HAL_TIM_ConfigClockSource+0x1aa>
 800e190:	e062      	b.n	800e258 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6818      	ldr	r0, [r3, #0]
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	6899      	ldr	r1, [r3, #8]
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	685a      	ldr	r2, [r3, #4]
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	f000 fc8b 	bl	800eabc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e1b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	68ba      	ldr	r2, [r7, #8]
 800e1bc:	609a      	str	r2, [r3, #8]
      break;
 800e1be:	e04f      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6818      	ldr	r0, [r3, #0]
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	6899      	ldr	r1, [r3, #8]
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	f000 fc74 	bl	800eabc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	689a      	ldr	r2, [r3, #8]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e1e2:	609a      	str	r2, [r3, #8]
      break;
 800e1e4:	e03c      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6818      	ldr	r0, [r3, #0]
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	6859      	ldr	r1, [r3, #4]
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	f000 fbe4 	bl	800e9c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2150      	movs	r1, #80	; 0x50
 800e1fe:	4618      	mov	r0, r3
 800e200:	f000 fc3e 	bl	800ea80 <TIM_ITRx_SetConfig>
      break;
 800e204:	e02c      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6818      	ldr	r0, [r3, #0]
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	6859      	ldr	r1, [r3, #4]
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	68db      	ldr	r3, [r3, #12]
 800e212:	461a      	mov	r2, r3
 800e214:	f000 fc03 	bl	800ea1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2160      	movs	r1, #96	; 0x60
 800e21e:	4618      	mov	r0, r3
 800e220:	f000 fc2e 	bl	800ea80 <TIM_ITRx_SetConfig>
      break;
 800e224:	e01c      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6818      	ldr	r0, [r3, #0]
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	6859      	ldr	r1, [r3, #4]
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	461a      	mov	r2, r3
 800e234:	f000 fbc4 	bl	800e9c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2140      	movs	r1, #64	; 0x40
 800e23e:	4618      	mov	r0, r3
 800e240:	f000 fc1e 	bl	800ea80 <TIM_ITRx_SetConfig>
      break;
 800e244:	e00c      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4619      	mov	r1, r3
 800e250:	4610      	mov	r0, r2
 800e252:	f000 fc15 	bl	800ea80 <TIM_ITRx_SetConfig>
      break;
 800e256:	e003      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e258:	2301      	movs	r3, #1
 800e25a:	73fb      	strb	r3, [r7, #15]
      break;
 800e25c:	e000      	b.n	800e260 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e25e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2201      	movs	r2, #1
 800e264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e270:	7bfb      	ldrb	r3, [r7, #15]
}
 800e272:	4618      	mov	r0, r3
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	ffceff88 	.word	0xffceff88
 800e280:	00100040 	.word	0x00100040
 800e284:	00100030 	.word	0x00100030
 800e288:	00100020 	.word	0x00100020

0800e28c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e294:	bf00      	nop
 800e296:	370c      	adds	r7, #12
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e2a8:	bf00      	nop
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e2bc:	bf00      	nop
 800e2be:	370c      	adds	r7, #12
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4a46      	ldr	r2, [pc, #280]	; (800e3f4 <TIM_Base_SetConfig+0x12c>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d013      	beq.n	800e308 <TIM_Base_SetConfig+0x40>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2e6:	d00f      	beq.n	800e308 <TIM_Base_SetConfig+0x40>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	4a43      	ldr	r2, [pc, #268]	; (800e3f8 <TIM_Base_SetConfig+0x130>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d00b      	beq.n	800e308 <TIM_Base_SetConfig+0x40>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	4a42      	ldr	r2, [pc, #264]	; (800e3fc <TIM_Base_SetConfig+0x134>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d007      	beq.n	800e308 <TIM_Base_SetConfig+0x40>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	4a41      	ldr	r2, [pc, #260]	; (800e400 <TIM_Base_SetConfig+0x138>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d003      	beq.n	800e308 <TIM_Base_SetConfig+0x40>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	4a40      	ldr	r2, [pc, #256]	; (800e404 <TIM_Base_SetConfig+0x13c>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d108      	bne.n	800e31a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e30e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	685b      	ldr	r3, [r3, #4]
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	4313      	orrs	r3, r2
 800e318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	4a35      	ldr	r2, [pc, #212]	; (800e3f4 <TIM_Base_SetConfig+0x12c>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d01f      	beq.n	800e362 <TIM_Base_SetConfig+0x9a>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e328:	d01b      	beq.n	800e362 <TIM_Base_SetConfig+0x9a>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	4a32      	ldr	r2, [pc, #200]	; (800e3f8 <TIM_Base_SetConfig+0x130>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d017      	beq.n	800e362 <TIM_Base_SetConfig+0x9a>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	4a31      	ldr	r2, [pc, #196]	; (800e3fc <TIM_Base_SetConfig+0x134>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d013      	beq.n	800e362 <TIM_Base_SetConfig+0x9a>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4a30      	ldr	r2, [pc, #192]	; (800e400 <TIM_Base_SetConfig+0x138>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d00f      	beq.n	800e362 <TIM_Base_SetConfig+0x9a>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	4a2f      	ldr	r2, [pc, #188]	; (800e404 <TIM_Base_SetConfig+0x13c>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d00b      	beq.n	800e362 <TIM_Base_SetConfig+0x9a>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4a2e      	ldr	r2, [pc, #184]	; (800e408 <TIM_Base_SetConfig+0x140>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d007      	beq.n	800e362 <TIM_Base_SetConfig+0x9a>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4a2d      	ldr	r2, [pc, #180]	; (800e40c <TIM_Base_SetConfig+0x144>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d003      	beq.n	800e362 <TIM_Base_SetConfig+0x9a>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4a2c      	ldr	r2, [pc, #176]	; (800e410 <TIM_Base_SetConfig+0x148>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d108      	bne.n	800e374 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	4313      	orrs	r3, r2
 800e372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	695b      	ldr	r3, [r3, #20]
 800e37e:	4313      	orrs	r3, r2
 800e380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	689a      	ldr	r2, [r3, #8]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4a16      	ldr	r2, [pc, #88]	; (800e3f4 <TIM_Base_SetConfig+0x12c>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d00f      	beq.n	800e3c0 <TIM_Base_SetConfig+0xf8>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	4a18      	ldr	r2, [pc, #96]	; (800e404 <TIM_Base_SetConfig+0x13c>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d00b      	beq.n	800e3c0 <TIM_Base_SetConfig+0xf8>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	4a17      	ldr	r2, [pc, #92]	; (800e408 <TIM_Base_SetConfig+0x140>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d007      	beq.n	800e3c0 <TIM_Base_SetConfig+0xf8>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	4a16      	ldr	r2, [pc, #88]	; (800e40c <TIM_Base_SetConfig+0x144>)
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d003      	beq.n	800e3c0 <TIM_Base_SetConfig+0xf8>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	4a15      	ldr	r2, [pc, #84]	; (800e410 <TIM_Base_SetConfig+0x148>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d103      	bne.n	800e3c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	691a      	ldr	r2, [r3, #16]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	691b      	ldr	r3, [r3, #16]
 800e3d2:	f003 0301 	and.w	r3, r3, #1
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d105      	bne.n	800e3e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	691b      	ldr	r3, [r3, #16]
 800e3de:	f023 0201 	bic.w	r2, r3, #1
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	611a      	str	r2, [r3, #16]
  }
}
 800e3e6:	bf00      	nop
 800e3e8:	3714      	adds	r7, #20
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	40010000 	.word	0x40010000
 800e3f8:	40000400 	.word	0x40000400
 800e3fc:	40000800 	.word	0x40000800
 800e400:	40000c00 	.word	0x40000c00
 800e404:	40010400 	.word	0x40010400
 800e408:	40014000 	.word	0x40014000
 800e40c:	40014400 	.word	0x40014400
 800e410:	40014800 	.word	0x40014800

0800e414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e414:	b480      	push	{r7}
 800e416:	b087      	sub	sp, #28
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6a1b      	ldr	r3, [r3, #32]
 800e422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6a1b      	ldr	r3, [r3, #32]
 800e428:	f023 0201 	bic.w	r2, r3, #1
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	699b      	ldr	r3, [r3, #24]
 800e43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	4b37      	ldr	r3, [pc, #220]	; (800e51c <TIM_OC1_SetConfig+0x108>)
 800e440:	4013      	ands	r3, r2
 800e442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f023 0303 	bic.w	r3, r3, #3
 800e44a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	68fa      	ldr	r2, [r7, #12]
 800e452:	4313      	orrs	r3, r2
 800e454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	f023 0302 	bic.w	r3, r3, #2
 800e45c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	689b      	ldr	r3, [r3, #8]
 800e462:	697a      	ldr	r2, [r7, #20]
 800e464:	4313      	orrs	r3, r2
 800e466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4a2d      	ldr	r2, [pc, #180]	; (800e520 <TIM_OC1_SetConfig+0x10c>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d00f      	beq.n	800e490 <TIM_OC1_SetConfig+0x7c>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4a2c      	ldr	r2, [pc, #176]	; (800e524 <TIM_OC1_SetConfig+0x110>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d00b      	beq.n	800e490 <TIM_OC1_SetConfig+0x7c>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4a2b      	ldr	r2, [pc, #172]	; (800e528 <TIM_OC1_SetConfig+0x114>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d007      	beq.n	800e490 <TIM_OC1_SetConfig+0x7c>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4a2a      	ldr	r2, [pc, #168]	; (800e52c <TIM_OC1_SetConfig+0x118>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d003      	beq.n	800e490 <TIM_OC1_SetConfig+0x7c>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	4a29      	ldr	r2, [pc, #164]	; (800e530 <TIM_OC1_SetConfig+0x11c>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d10c      	bne.n	800e4aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	f023 0308 	bic.w	r3, r3, #8
 800e496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	697a      	ldr	r2, [r7, #20]
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	f023 0304 	bic.w	r3, r3, #4
 800e4a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4a1c      	ldr	r2, [pc, #112]	; (800e520 <TIM_OC1_SetConfig+0x10c>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d00f      	beq.n	800e4d2 <TIM_OC1_SetConfig+0xbe>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	4a1b      	ldr	r2, [pc, #108]	; (800e524 <TIM_OC1_SetConfig+0x110>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d00b      	beq.n	800e4d2 <TIM_OC1_SetConfig+0xbe>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4a1a      	ldr	r2, [pc, #104]	; (800e528 <TIM_OC1_SetConfig+0x114>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d007      	beq.n	800e4d2 <TIM_OC1_SetConfig+0xbe>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	4a19      	ldr	r2, [pc, #100]	; (800e52c <TIM_OC1_SetConfig+0x118>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d003      	beq.n	800e4d2 <TIM_OC1_SetConfig+0xbe>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4a18      	ldr	r2, [pc, #96]	; (800e530 <TIM_OC1_SetConfig+0x11c>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d111      	bne.n	800e4f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e4e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	695b      	ldr	r3, [r3, #20]
 800e4e6:	693a      	ldr	r2, [r7, #16]
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	699b      	ldr	r3, [r3, #24]
 800e4f0:	693a      	ldr	r2, [r7, #16]
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	693a      	ldr	r2, [r7, #16]
 800e4fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	68fa      	ldr	r2, [r7, #12]
 800e500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	685a      	ldr	r2, [r3, #4]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	697a      	ldr	r2, [r7, #20]
 800e50e:	621a      	str	r2, [r3, #32]
}
 800e510:	bf00      	nop
 800e512:	371c      	adds	r7, #28
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr
 800e51c:	fffeff8f 	.word	0xfffeff8f
 800e520:	40010000 	.word	0x40010000
 800e524:	40010400 	.word	0x40010400
 800e528:	40014000 	.word	0x40014000
 800e52c:	40014400 	.word	0x40014400
 800e530:	40014800 	.word	0x40014800

0800e534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e534:	b480      	push	{r7}
 800e536:	b087      	sub	sp, #28
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a1b      	ldr	r3, [r3, #32]
 800e542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6a1b      	ldr	r3, [r3, #32]
 800e548:	f023 0210 	bic.w	r2, r3, #16
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	699b      	ldr	r3, [r3, #24]
 800e55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	4b34      	ldr	r3, [pc, #208]	; (800e630 <TIM_OC2_SetConfig+0xfc>)
 800e560:	4013      	ands	r3, r2
 800e562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e56a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	021b      	lsls	r3, r3, #8
 800e572:	68fa      	ldr	r2, [r7, #12]
 800e574:	4313      	orrs	r3, r2
 800e576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	f023 0320 	bic.w	r3, r3, #32
 800e57e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	011b      	lsls	r3, r3, #4
 800e586:	697a      	ldr	r2, [r7, #20]
 800e588:	4313      	orrs	r3, r2
 800e58a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	4a29      	ldr	r2, [pc, #164]	; (800e634 <TIM_OC2_SetConfig+0x100>)
 800e590:	4293      	cmp	r3, r2
 800e592:	d003      	beq.n	800e59c <TIM_OC2_SetConfig+0x68>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4a28      	ldr	r2, [pc, #160]	; (800e638 <TIM_OC2_SetConfig+0x104>)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d10d      	bne.n	800e5b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	011b      	lsls	r3, r3, #4
 800e5aa:	697a      	ldr	r2, [r7, #20]
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	4a1e      	ldr	r2, [pc, #120]	; (800e634 <TIM_OC2_SetConfig+0x100>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d00f      	beq.n	800e5e0 <TIM_OC2_SetConfig+0xac>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	4a1d      	ldr	r2, [pc, #116]	; (800e638 <TIM_OC2_SetConfig+0x104>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d00b      	beq.n	800e5e0 <TIM_OC2_SetConfig+0xac>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	4a1c      	ldr	r2, [pc, #112]	; (800e63c <TIM_OC2_SetConfig+0x108>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d007      	beq.n	800e5e0 <TIM_OC2_SetConfig+0xac>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	4a1b      	ldr	r2, [pc, #108]	; (800e640 <TIM_OC2_SetConfig+0x10c>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d003      	beq.n	800e5e0 <TIM_OC2_SetConfig+0xac>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	4a1a      	ldr	r2, [pc, #104]	; (800e644 <TIM_OC2_SetConfig+0x110>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d113      	bne.n	800e608 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e5e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e5ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	695b      	ldr	r3, [r3, #20]
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	693a      	ldr	r2, [r7, #16]
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	699b      	ldr	r3, [r3, #24]
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	693a      	ldr	r2, [r7, #16]
 800e604:	4313      	orrs	r3, r2
 800e606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	693a      	ldr	r2, [r7, #16]
 800e60c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	685a      	ldr	r2, [r3, #4]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	697a      	ldr	r2, [r7, #20]
 800e620:	621a      	str	r2, [r3, #32]
}
 800e622:	bf00      	nop
 800e624:	371c      	adds	r7, #28
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	feff8fff 	.word	0xfeff8fff
 800e634:	40010000 	.word	0x40010000
 800e638:	40010400 	.word	0x40010400
 800e63c:	40014000 	.word	0x40014000
 800e640:	40014400 	.word	0x40014400
 800e644:	40014800 	.word	0x40014800

0800e648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e648:	b480      	push	{r7}
 800e64a:	b087      	sub	sp, #28
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6a1b      	ldr	r3, [r3, #32]
 800e656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a1b      	ldr	r3, [r3, #32]
 800e65c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	69db      	ldr	r3, [r3, #28]
 800e66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	4b33      	ldr	r3, [pc, #204]	; (800e740 <TIM_OC3_SetConfig+0xf8>)
 800e674:	4013      	ands	r3, r2
 800e676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f023 0303 	bic.w	r3, r3, #3
 800e67e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	4313      	orrs	r3, r2
 800e688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	689b      	ldr	r3, [r3, #8]
 800e696:	021b      	lsls	r3, r3, #8
 800e698:	697a      	ldr	r2, [r7, #20]
 800e69a:	4313      	orrs	r3, r2
 800e69c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4a28      	ldr	r2, [pc, #160]	; (800e744 <TIM_OC3_SetConfig+0xfc>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d003      	beq.n	800e6ae <TIM_OC3_SetConfig+0x66>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4a27      	ldr	r2, [pc, #156]	; (800e748 <TIM_OC3_SetConfig+0x100>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d10d      	bne.n	800e6ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e6b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	021b      	lsls	r3, r3, #8
 800e6bc:	697a      	ldr	r2, [r7, #20]
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e6c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	4a1d      	ldr	r2, [pc, #116]	; (800e744 <TIM_OC3_SetConfig+0xfc>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d00f      	beq.n	800e6f2 <TIM_OC3_SetConfig+0xaa>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	4a1c      	ldr	r2, [pc, #112]	; (800e748 <TIM_OC3_SetConfig+0x100>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d00b      	beq.n	800e6f2 <TIM_OC3_SetConfig+0xaa>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	4a1b      	ldr	r2, [pc, #108]	; (800e74c <TIM_OC3_SetConfig+0x104>)
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d007      	beq.n	800e6f2 <TIM_OC3_SetConfig+0xaa>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	4a1a      	ldr	r2, [pc, #104]	; (800e750 <TIM_OC3_SetConfig+0x108>)
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d003      	beq.n	800e6f2 <TIM_OC3_SetConfig+0xaa>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	4a19      	ldr	r2, [pc, #100]	; (800e754 <TIM_OC3_SetConfig+0x10c>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d113      	bne.n	800e71a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e6f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	695b      	ldr	r3, [r3, #20]
 800e706:	011b      	lsls	r3, r3, #4
 800e708:	693a      	ldr	r2, [r7, #16]
 800e70a:	4313      	orrs	r3, r2
 800e70c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	699b      	ldr	r3, [r3, #24]
 800e712:	011b      	lsls	r3, r3, #4
 800e714:	693a      	ldr	r2, [r7, #16]
 800e716:	4313      	orrs	r3, r2
 800e718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	693a      	ldr	r2, [r7, #16]
 800e71e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	685a      	ldr	r2, [r3, #4]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	697a      	ldr	r2, [r7, #20]
 800e732:	621a      	str	r2, [r3, #32]
}
 800e734:	bf00      	nop
 800e736:	371c      	adds	r7, #28
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr
 800e740:	fffeff8f 	.word	0xfffeff8f
 800e744:	40010000 	.word	0x40010000
 800e748:	40010400 	.word	0x40010400
 800e74c:	40014000 	.word	0x40014000
 800e750:	40014400 	.word	0x40014400
 800e754:	40014800 	.word	0x40014800

0800e758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e758:	b480      	push	{r7}
 800e75a:	b087      	sub	sp, #28
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6a1b      	ldr	r3, [r3, #32]
 800e766:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6a1b      	ldr	r3, [r3, #32]
 800e76c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	69db      	ldr	r3, [r3, #28]
 800e77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e780:	68fa      	ldr	r2, [r7, #12]
 800e782:	4b24      	ldr	r3, [pc, #144]	; (800e814 <TIM_OC4_SetConfig+0xbc>)
 800e784:	4013      	ands	r3, r2
 800e786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e78e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	021b      	lsls	r3, r3, #8
 800e796:	68fa      	ldr	r2, [r7, #12]
 800e798:	4313      	orrs	r3, r2
 800e79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e7a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	689b      	ldr	r3, [r3, #8]
 800e7a8:	031b      	lsls	r3, r3, #12
 800e7aa:	693a      	ldr	r2, [r7, #16]
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	4a19      	ldr	r2, [pc, #100]	; (800e818 <TIM_OC4_SetConfig+0xc0>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d00f      	beq.n	800e7d8 <TIM_OC4_SetConfig+0x80>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4a18      	ldr	r2, [pc, #96]	; (800e81c <TIM_OC4_SetConfig+0xc4>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d00b      	beq.n	800e7d8 <TIM_OC4_SetConfig+0x80>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	4a17      	ldr	r2, [pc, #92]	; (800e820 <TIM_OC4_SetConfig+0xc8>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d007      	beq.n	800e7d8 <TIM_OC4_SetConfig+0x80>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	4a16      	ldr	r2, [pc, #88]	; (800e824 <TIM_OC4_SetConfig+0xcc>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d003      	beq.n	800e7d8 <TIM_OC4_SetConfig+0x80>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	4a15      	ldr	r2, [pc, #84]	; (800e828 <TIM_OC4_SetConfig+0xd0>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d109      	bne.n	800e7ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e7de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	695b      	ldr	r3, [r3, #20]
 800e7e4:	019b      	lsls	r3, r3, #6
 800e7e6:	697a      	ldr	r2, [r7, #20]
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	697a      	ldr	r2, [r7, #20]
 800e7f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	68fa      	ldr	r2, [r7, #12]
 800e7f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	685a      	ldr	r2, [r3, #4]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	693a      	ldr	r2, [r7, #16]
 800e804:	621a      	str	r2, [r3, #32]
}
 800e806:	bf00      	nop
 800e808:	371c      	adds	r7, #28
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr
 800e812:	bf00      	nop
 800e814:	feff8fff 	.word	0xfeff8fff
 800e818:	40010000 	.word	0x40010000
 800e81c:	40010400 	.word	0x40010400
 800e820:	40014000 	.word	0x40014000
 800e824:	40014400 	.word	0x40014400
 800e828:	40014800 	.word	0x40014800

0800e82c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b087      	sub	sp, #28
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6a1b      	ldr	r3, [r3, #32]
 800e83a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6a1b      	ldr	r3, [r3, #32]
 800e840:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e854:	68fa      	ldr	r2, [r7, #12]
 800e856:	4b21      	ldr	r3, [pc, #132]	; (800e8dc <TIM_OC5_SetConfig+0xb0>)
 800e858:	4013      	ands	r3, r2
 800e85a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	4313      	orrs	r3, r2
 800e864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e86c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	041b      	lsls	r3, r3, #16
 800e874:	693a      	ldr	r2, [r7, #16]
 800e876:	4313      	orrs	r3, r2
 800e878:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4a18      	ldr	r2, [pc, #96]	; (800e8e0 <TIM_OC5_SetConfig+0xb4>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d00f      	beq.n	800e8a2 <TIM_OC5_SetConfig+0x76>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4a17      	ldr	r2, [pc, #92]	; (800e8e4 <TIM_OC5_SetConfig+0xb8>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d00b      	beq.n	800e8a2 <TIM_OC5_SetConfig+0x76>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4a16      	ldr	r2, [pc, #88]	; (800e8e8 <TIM_OC5_SetConfig+0xbc>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d007      	beq.n	800e8a2 <TIM_OC5_SetConfig+0x76>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	4a15      	ldr	r2, [pc, #84]	; (800e8ec <TIM_OC5_SetConfig+0xc0>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d003      	beq.n	800e8a2 <TIM_OC5_SetConfig+0x76>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4a14      	ldr	r2, [pc, #80]	; (800e8f0 <TIM_OC5_SetConfig+0xc4>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d109      	bne.n	800e8b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e8a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	695b      	ldr	r3, [r3, #20]
 800e8ae:	021b      	lsls	r3, r3, #8
 800e8b0:	697a      	ldr	r2, [r7, #20]
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	697a      	ldr	r2, [r7, #20]
 800e8ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	68fa      	ldr	r2, [r7, #12]
 800e8c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	685a      	ldr	r2, [r3, #4]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	693a      	ldr	r2, [r7, #16]
 800e8ce:	621a      	str	r2, [r3, #32]
}
 800e8d0:	bf00      	nop
 800e8d2:	371c      	adds	r7, #28
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr
 800e8dc:	fffeff8f 	.word	0xfffeff8f
 800e8e0:	40010000 	.word	0x40010000
 800e8e4:	40010400 	.word	0x40010400
 800e8e8:	40014000 	.word	0x40014000
 800e8ec:	40014400 	.word	0x40014400
 800e8f0:	40014800 	.word	0x40014800

0800e8f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b087      	sub	sp, #28
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6a1b      	ldr	r3, [r3, #32]
 800e902:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6a1b      	ldr	r3, [r3, #32]
 800e908:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e91c:	68fa      	ldr	r2, [r7, #12]
 800e91e:	4b22      	ldr	r3, [pc, #136]	; (800e9a8 <TIM_OC6_SetConfig+0xb4>)
 800e920:	4013      	ands	r3, r2
 800e922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	021b      	lsls	r3, r3, #8
 800e92a:	68fa      	ldr	r2, [r7, #12]
 800e92c:	4313      	orrs	r3, r2
 800e92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	689b      	ldr	r3, [r3, #8]
 800e93c:	051b      	lsls	r3, r3, #20
 800e93e:	693a      	ldr	r2, [r7, #16]
 800e940:	4313      	orrs	r3, r2
 800e942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4a19      	ldr	r2, [pc, #100]	; (800e9ac <TIM_OC6_SetConfig+0xb8>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d00f      	beq.n	800e96c <TIM_OC6_SetConfig+0x78>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	4a18      	ldr	r2, [pc, #96]	; (800e9b0 <TIM_OC6_SetConfig+0xbc>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d00b      	beq.n	800e96c <TIM_OC6_SetConfig+0x78>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	4a17      	ldr	r2, [pc, #92]	; (800e9b4 <TIM_OC6_SetConfig+0xc0>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d007      	beq.n	800e96c <TIM_OC6_SetConfig+0x78>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4a16      	ldr	r2, [pc, #88]	; (800e9b8 <TIM_OC6_SetConfig+0xc4>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d003      	beq.n	800e96c <TIM_OC6_SetConfig+0x78>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	4a15      	ldr	r2, [pc, #84]	; (800e9bc <TIM_OC6_SetConfig+0xc8>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d109      	bne.n	800e980 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e972:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	695b      	ldr	r3, [r3, #20]
 800e978:	029b      	lsls	r3, r3, #10
 800e97a:	697a      	ldr	r2, [r7, #20]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	697a      	ldr	r2, [r7, #20]
 800e984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68fa      	ldr	r2, [r7, #12]
 800e98a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	685a      	ldr	r2, [r3, #4]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	693a      	ldr	r2, [r7, #16]
 800e998:	621a      	str	r2, [r3, #32]
}
 800e99a:	bf00      	nop
 800e99c:	371c      	adds	r7, #28
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr
 800e9a6:	bf00      	nop
 800e9a8:	feff8fff 	.word	0xfeff8fff
 800e9ac:	40010000 	.word	0x40010000
 800e9b0:	40010400 	.word	0x40010400
 800e9b4:	40014000 	.word	0x40014000
 800e9b8:	40014400 	.word	0x40014400
 800e9bc:	40014800 	.word	0x40014800

0800e9c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b087      	sub	sp, #28
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	6a1b      	ldr	r3, [r3, #32]
 800e9d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	6a1b      	ldr	r3, [r3, #32]
 800e9d6:	f023 0201 	bic.w	r2, r3, #1
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	699b      	ldr	r3, [r3, #24]
 800e9e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e9ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	011b      	lsls	r3, r3, #4
 800e9f0:	693a      	ldr	r2, [r7, #16]
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	f023 030a 	bic.w	r3, r3, #10
 800e9fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e9fe:	697a      	ldr	r2, [r7, #20]
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	4313      	orrs	r3, r2
 800ea04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	693a      	ldr	r2, [r7, #16]
 800ea0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	697a      	ldr	r2, [r7, #20]
 800ea10:	621a      	str	r2, [r3, #32]
}
 800ea12:	bf00      	nop
 800ea14:	371c      	adds	r7, #28
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ea1e:	b480      	push	{r7}
 800ea20:	b087      	sub	sp, #28
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	60f8      	str	r0, [r7, #12]
 800ea26:	60b9      	str	r1, [r7, #8]
 800ea28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6a1b      	ldr	r3, [r3, #32]
 800ea2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	6a1b      	ldr	r3, [r3, #32]
 800ea34:	f023 0210 	bic.w	r2, r3, #16
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	699b      	ldr	r3, [r3, #24]
 800ea40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ea48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	031b      	lsls	r3, r3, #12
 800ea4e:	693a      	ldr	r2, [r7, #16]
 800ea50:	4313      	orrs	r3, r2
 800ea52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ea5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	011b      	lsls	r3, r3, #4
 800ea60:	697a      	ldr	r2, [r7, #20]
 800ea62:	4313      	orrs	r3, r2
 800ea64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	693a      	ldr	r2, [r7, #16]
 800ea6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	697a      	ldr	r2, [r7, #20]
 800ea70:	621a      	str	r2, [r3, #32]
}
 800ea72:	bf00      	nop
 800ea74:	371c      	adds	r7, #28
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr
	...

0800ea80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b085      	sub	sp, #20
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	4b09      	ldr	r3, [pc, #36]	; (800eab8 <TIM_ITRx_SetConfig+0x38>)
 800ea94:	4013      	ands	r3, r2
 800ea96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ea98:	683a      	ldr	r2, [r7, #0]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	f043 0307 	orr.w	r3, r3, #7
 800eaa2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	68fa      	ldr	r2, [r7, #12]
 800eaa8:	609a      	str	r2, [r3, #8]
}
 800eaaa:	bf00      	nop
 800eaac:	3714      	adds	r7, #20
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr
 800eab6:	bf00      	nop
 800eab8:	ffcfff8f 	.word	0xffcfff8f

0800eabc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b087      	sub	sp, #28
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	607a      	str	r2, [r7, #4]
 800eac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	689b      	ldr	r3, [r3, #8]
 800eace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ead6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	021a      	lsls	r2, r3, #8
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	431a      	orrs	r2, r3
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	4313      	orrs	r3, r2
 800eae4:	697a      	ldr	r2, [r7, #20]
 800eae6:	4313      	orrs	r3, r2
 800eae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	697a      	ldr	r2, [r7, #20]
 800eaee:	609a      	str	r2, [r3, #8]
}
 800eaf0:	bf00      	nop
 800eaf2:	371c      	adds	r7, #28
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b087      	sub	sp, #28
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	60b9      	str	r1, [r7, #8]
 800eb06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	f003 031f 	and.w	r3, r3, #31
 800eb0e:	2201      	movs	r2, #1
 800eb10:	fa02 f303 	lsl.w	r3, r2, r3
 800eb14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6a1a      	ldr	r2, [r3, #32]
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	43db      	mvns	r3, r3
 800eb1e:	401a      	ands	r2, r3
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	6a1a      	ldr	r2, [r3, #32]
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	f003 031f 	and.w	r3, r3, #31
 800eb2e:	6879      	ldr	r1, [r7, #4]
 800eb30:	fa01 f303 	lsl.w	r3, r1, r3
 800eb34:	431a      	orrs	r2, r3
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	621a      	str	r2, [r3, #32]
}
 800eb3a:	bf00      	nop
 800eb3c:	371c      	adds	r7, #28
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
	...

0800eb48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d101      	bne.n	800eb60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eb5c:	2302      	movs	r3, #2
 800eb5e:	e06d      	b.n	800ec3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2202      	movs	r2, #2
 800eb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	685b      	ldr	r3, [r3, #4]
 800eb76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	4a30      	ldr	r2, [pc, #192]	; (800ec48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d004      	beq.n	800eb94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	4a2f      	ldr	r2, [pc, #188]	; (800ec4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d108      	bne.n	800eba6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eb9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	4313      	orrs	r3, r2
 800eba4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	68fa      	ldr	r2, [r7, #12]
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a20      	ldr	r2, [pc, #128]	; (800ec48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d022      	beq.n	800ec10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebd2:	d01d      	beq.n	800ec10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	4a1d      	ldr	r2, [pc, #116]	; (800ec50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d018      	beq.n	800ec10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4a1c      	ldr	r2, [pc, #112]	; (800ec54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d013      	beq.n	800ec10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4a1a      	ldr	r2, [pc, #104]	; (800ec58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d00e      	beq.n	800ec10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	4a15      	ldr	r2, [pc, #84]	; (800ec4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d009      	beq.n	800ec10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4a16      	ldr	r2, [pc, #88]	; (800ec5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d004      	beq.n	800ec10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4a15      	ldr	r2, [pc, #84]	; (800ec60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d10c      	bne.n	800ec2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	68ba      	ldr	r2, [r7, #8]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68ba      	ldr	r2, [r7, #8]
 800ec28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec3a:	2300      	movs	r3, #0
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3714      	adds	r7, #20
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	40010000 	.word	0x40010000
 800ec4c:	40010400 	.word	0x40010400
 800ec50:	40000400 	.word	0x40000400
 800ec54:	40000800 	.word	0x40000800
 800ec58:	40000c00 	.word	0x40000c00
 800ec5c:	40001800 	.word	0x40001800
 800ec60:	40014000 	.word	0x40014000

0800ec64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b085      	sub	sp, #20
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d101      	bne.n	800ec80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ec7c:	2302      	movs	r3, #2
 800ec7e:	e065      	b.n	800ed4c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2201      	movs	r2, #1
 800ec84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	68db      	ldr	r3, [r3, #12]
 800ec92:	4313      	orrs	r3, r2
 800ec94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	4313      	orrs	r3, r2
 800eca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4313      	orrs	r3, r2
 800ecbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	691b      	ldr	r3, [r3, #16]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	695b      	ldr	r3, [r3, #20]
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece6:	4313      	orrs	r3, r2
 800ece8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	699b      	ldr	r3, [r3, #24]
 800ecf4:	041b      	lsls	r3, r3, #16
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4a16      	ldr	r2, [pc, #88]	; (800ed58 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d004      	beq.n	800ed0e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4a14      	ldr	r2, [pc, #80]	; (800ed5c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d115      	bne.n	800ed3a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed18:	051b      	lsls	r3, r3, #20
 800ed1a:	4313      	orrs	r3, r2
 800ed1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	69db      	ldr	r3, [r3, #28]
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	6a1b      	ldr	r3, [r3, #32]
 800ed36:	4313      	orrs	r3, r2
 800ed38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	68fa      	ldr	r2, [r7, #12]
 800ed40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2200      	movs	r2, #0
 800ed46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed4a:	2300      	movs	r3, #0
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3714      	adds	r7, #20
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr
 800ed58:	40010000 	.word	0x40010000
 800ed5c:	40010400 	.word	0x40010400

0800ed60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ed68:	bf00      	nop
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ed7c:	bf00      	nop
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr

0800ed88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ed90:	bf00      	nop
 800ed92:	370c      	adds	r7, #12
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr

0800ed9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d101      	bne.n	800edae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800edaa:	2301      	movs	r3, #1
 800edac:	e042      	b.n	800ee34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d106      	bne.n	800edc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f7f4 fa2f 	bl	8003224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2224      	movs	r2, #36	; 0x24
 800edca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f022 0201 	bic.w	r2, r2, #1
 800eddc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d002      	beq.n	800edec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f001 fc42 	bl	8010670 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 fed7 	bl	800fba0 <UART_SetConfig>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d101      	bne.n	800edfc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800edf8:	2301      	movs	r3, #1
 800edfa:	e01b      	b.n	800ee34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	685a      	ldr	r2, [r3, #4]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ee0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	689a      	ldr	r2, [r3, #8]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ee1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f042 0201 	orr.w	r2, r2, #1
 800ee2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f001 fcc1 	bl	80107b4 <UART_CheckIdleState>
 800ee32:	4603      	mov	r3, r0
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3708      	adds	r7, #8
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b08a      	sub	sp, #40	; 0x28
 800ee40:	af02      	add	r7, sp, #8
 800ee42:	60f8      	str	r0, [r7, #12]
 800ee44:	60b9      	str	r1, [r7, #8]
 800ee46:	603b      	str	r3, [r7, #0]
 800ee48:	4613      	mov	r3, r2
 800ee4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee52:	2b20      	cmp	r3, #32
 800ee54:	d17b      	bne.n	800ef4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d002      	beq.n	800ee62 <HAL_UART_Transmit+0x26>
 800ee5c:	88fb      	ldrh	r3, [r7, #6]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d101      	bne.n	800ee66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ee62:	2301      	movs	r3, #1
 800ee64:	e074      	b.n	800ef50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2221      	movs	r2, #33	; 0x21
 800ee72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ee76:	f7f4 fccf 	bl	8003818 <HAL_GetTick>
 800ee7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	88fa      	ldrh	r2, [r7, #6]
 800ee80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	88fa      	ldrh	r2, [r7, #6]
 800ee88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee94:	d108      	bne.n	800eea8 <HAL_UART_Transmit+0x6c>
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	691b      	ldr	r3, [r3, #16]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d104      	bne.n	800eea8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	61bb      	str	r3, [r7, #24]
 800eea6:	e003      	b.n	800eeb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eeac:	2300      	movs	r3, #0
 800eeae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800eeb0:	e030      	b.n	800ef14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	9300      	str	r3, [sp, #0]
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	2180      	movs	r1, #128	; 0x80
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f001 fd23 	bl	8010908 <UART_WaitOnFlagUntilTimeout>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d005      	beq.n	800eed4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2220      	movs	r2, #32
 800eecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800eed0:	2303      	movs	r3, #3
 800eed2:	e03d      	b.n	800ef50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d10b      	bne.n	800eef2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	881b      	ldrh	r3, [r3, #0]
 800eede:	461a      	mov	r2, r3
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eee8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	3302      	adds	r3, #2
 800eeee:	61bb      	str	r3, [r7, #24]
 800eef0:	e007      	b.n	800ef02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	781a      	ldrb	r2, [r3, #0]
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	3301      	adds	r3, #1
 800ef00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d1c8      	bne.n	800eeb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	9300      	str	r3, [sp, #0]
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	2200      	movs	r2, #0
 800ef28:	2140      	movs	r1, #64	; 0x40
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f001 fcec 	bl	8010908 <UART_WaitOnFlagUntilTimeout>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d005      	beq.n	800ef42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2220      	movs	r2, #32
 800ef3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ef3e:	2303      	movs	r3, #3
 800ef40:	e006      	b.n	800ef50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2220      	movs	r2, #32
 800ef46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	e000      	b.n	800ef50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ef4e:	2302      	movs	r3, #2
  }
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3720      	adds	r7, #32
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b08a      	sub	sp, #40	; 0x28
 800ef5c:	af02      	add	r7, sp, #8
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	603b      	str	r3, [r7, #0]
 800ef64:	4613      	mov	r3, r2
 800ef66:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef6e:	2b20      	cmp	r3, #32
 800ef70:	f040 80b5 	bne.w	800f0de <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d002      	beq.n	800ef80 <HAL_UART_Receive+0x28>
 800ef7a:	88fb      	ldrh	r3, [r7, #6]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d101      	bne.n	800ef84 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ef80:	2301      	movs	r3, #1
 800ef82:	e0ad      	b.n	800f0e0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2200      	movs	r2, #0
 800ef88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2222      	movs	r2, #34	; 0x22
 800ef90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2200      	movs	r2, #0
 800ef98:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ef9a:	f7f4 fc3d 	bl	8003818 <HAL_GetTick>
 800ef9e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	88fa      	ldrh	r2, [r7, #6]
 800efa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	88fa      	ldrh	r2, [r7, #6]
 800efac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efb8:	d10e      	bne.n	800efd8 <HAL_UART_Receive+0x80>
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	691b      	ldr	r3, [r3, #16]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d105      	bne.n	800efce <HAL_UART_Receive+0x76>
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800efc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efcc:	e02d      	b.n	800f02a <HAL_UART_Receive+0xd2>
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	22ff      	movs	r2, #255	; 0xff
 800efd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efd6:	e028      	b.n	800f02a <HAL_UART_Receive+0xd2>
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d10d      	bne.n	800effc <HAL_UART_Receive+0xa4>
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	691b      	ldr	r3, [r3, #16]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d104      	bne.n	800eff2 <HAL_UART_Receive+0x9a>
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	22ff      	movs	r2, #255	; 0xff
 800efec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eff0:	e01b      	b.n	800f02a <HAL_UART_Receive+0xd2>
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	227f      	movs	r2, #127	; 0x7f
 800eff6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800effa:	e016      	b.n	800f02a <HAL_UART_Receive+0xd2>
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	689b      	ldr	r3, [r3, #8]
 800f000:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f004:	d10d      	bne.n	800f022 <HAL_UART_Receive+0xca>
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	691b      	ldr	r3, [r3, #16]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d104      	bne.n	800f018 <HAL_UART_Receive+0xc0>
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	227f      	movs	r2, #127	; 0x7f
 800f012:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f016:	e008      	b.n	800f02a <HAL_UART_Receive+0xd2>
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	223f      	movs	r2, #63	; 0x3f
 800f01c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f020:	e003      	b.n	800f02a <HAL_UART_Receive+0xd2>
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2200      	movs	r2, #0
 800f026:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f030:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	689b      	ldr	r3, [r3, #8]
 800f036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f03a:	d108      	bne.n	800f04e <HAL_UART_Receive+0xf6>
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d104      	bne.n	800f04e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f044:	2300      	movs	r3, #0
 800f046:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	61bb      	str	r3, [r7, #24]
 800f04c:	e003      	b.n	800f056 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f052:	2300      	movs	r3, #0
 800f054:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f056:	e036      	b.n	800f0c6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	9300      	str	r3, [sp, #0]
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	2200      	movs	r2, #0
 800f060:	2120      	movs	r1, #32
 800f062:	68f8      	ldr	r0, [r7, #12]
 800f064:	f001 fc50 	bl	8010908 <UART_WaitOnFlagUntilTimeout>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d005      	beq.n	800f07a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2220      	movs	r2, #32
 800f072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800f076:	2303      	movs	r3, #3
 800f078:	e032      	b.n	800f0e0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d10c      	bne.n	800f09a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f086:	b29a      	uxth	r2, r3
 800f088:	8a7b      	ldrh	r3, [r7, #18]
 800f08a:	4013      	ands	r3, r2
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	3302      	adds	r3, #2
 800f096:	61bb      	str	r3, [r7, #24]
 800f098:	e00c      	b.n	800f0b4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a0:	b2da      	uxtb	r2, r3
 800f0a2:	8a7b      	ldrh	r3, [r7, #18]
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	4013      	ands	r3, r2
 800f0a8:	b2da      	uxtb	r2, r3
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	3b01      	subs	r3, #1
 800f0be:	b29a      	uxth	r2, r3
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d1c2      	bne.n	800f058 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	2220      	movs	r2, #32
 800f0d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	e000      	b.n	800f0e0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f0de:	2302      	movs	r3, #2
  }
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3720      	adds	r7, #32
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b08a      	sub	sp, #40	; 0x28
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	60b9      	str	r1, [r7, #8]
 800f0f2:	4613      	mov	r3, r2
 800f0f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0fc:	2b20      	cmp	r3, #32
 800f0fe:	d137      	bne.n	800f170 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d002      	beq.n	800f10c <HAL_UART_Receive_IT+0x24>
 800f106:	88fb      	ldrh	r3, [r7, #6]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d101      	bne.n	800f110 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f10c:	2301      	movs	r3, #1
 800f10e:	e030      	b.n	800f172 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2200      	movs	r2, #0
 800f114:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4a18      	ldr	r2, [pc, #96]	; (800f17c <HAL_UART_Receive_IT+0x94>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d01f      	beq.n	800f160 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d018      	beq.n	800f160 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	e853 3f00 	ldrex	r3, [r3]
 800f13a:	613b      	str	r3, [r7, #16]
   return(result);
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f142:	627b      	str	r3, [r7, #36]	; 0x24
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	461a      	mov	r2, r3
 800f14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14c:	623b      	str	r3, [r7, #32]
 800f14e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f150:	69f9      	ldr	r1, [r7, #28]
 800f152:	6a3a      	ldr	r2, [r7, #32]
 800f154:	e841 2300 	strex	r3, r2, [r1]
 800f158:	61bb      	str	r3, [r7, #24]
   return(result);
 800f15a:	69bb      	ldr	r3, [r7, #24]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d1e6      	bne.n	800f12e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f160:	88fb      	ldrh	r3, [r7, #6]
 800f162:	461a      	mov	r2, r3
 800f164:	68b9      	ldr	r1, [r7, #8]
 800f166:	68f8      	ldr	r0, [r7, #12]
 800f168:	f001 fc3c 	bl	80109e4 <UART_Start_Receive_IT>
 800f16c:	4603      	mov	r3, r0
 800f16e:	e000      	b.n	800f172 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f170:	2302      	movs	r3, #2
  }
}
 800f172:	4618      	mov	r0, r3
 800f174:	3728      	adds	r7, #40	; 0x28
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	58000c00 	.word	0x58000c00

0800f180 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b08a      	sub	sp, #40	; 0x28
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	4613      	mov	r3, r2
 800f18c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f194:	2b20      	cmp	r3, #32
 800f196:	d167      	bne.n	800f268 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d002      	beq.n	800f1a4 <HAL_UART_Transmit_DMA+0x24>
 800f19e:	88fb      	ldrh	r3, [r7, #6]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d101      	bne.n	800f1a8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	e060      	b.n	800f26a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	68ba      	ldr	r2, [r7, #8]
 800f1ac:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	88fa      	ldrh	r2, [r7, #6]
 800f1b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	88fa      	ldrh	r2, [r7, #6]
 800f1ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2221      	movs	r2, #33	; 0x21
 800f1ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d028      	beq.n	800f228 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1da:	4a26      	ldr	r2, [pc, #152]	; (800f274 <HAL_UART_Transmit_DMA+0xf4>)
 800f1dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1e2:	4a25      	ldr	r2, [pc, #148]	; (800f278 <HAL_UART_Transmit_DMA+0xf8>)
 800f1e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ea:	4a24      	ldr	r2, [pc, #144]	; (800f27c <HAL_UART_Transmit_DMA+0xfc>)
 800f1ec:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1fe:	4619      	mov	r1, r3
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	3328      	adds	r3, #40	; 0x28
 800f206:	461a      	mov	r2, r3
 800f208:	88fb      	ldrh	r3, [r7, #6]
 800f20a:	f7f6 ff89 	bl	8006120 <HAL_DMA_Start_IT>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d009      	beq.n	800f228 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2210      	movs	r2, #16
 800f218:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2220      	movs	r2, #32
 800f220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800f224:	2301      	movs	r3, #1
 800f226:	e020      	b.n	800f26a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2240      	movs	r2, #64	; 0x40
 800f22e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	3308      	adds	r3, #8
 800f236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	e853 3f00 	ldrex	r3, [r3]
 800f23e:	613b      	str	r3, [r7, #16]
   return(result);
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f246:	627b      	str	r3, [r7, #36]	; 0x24
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	3308      	adds	r3, #8
 800f24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f250:	623a      	str	r2, [r7, #32]
 800f252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f254:	69f9      	ldr	r1, [r7, #28]
 800f256:	6a3a      	ldr	r2, [r7, #32]
 800f258:	e841 2300 	strex	r3, r2, [r1]
 800f25c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d1e5      	bne.n	800f230 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800f264:	2300      	movs	r3, #0
 800f266:	e000      	b.n	800f26a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800f268:	2302      	movs	r3, #2
  }
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3728      	adds	r7, #40	; 0x28
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
 800f272:	bf00      	nop
 800f274:	08010d79 	.word	0x08010d79
 800f278:	08010e0f 	.word	0x08010e0f
 800f27c:	08010e2b 	.word	0x08010e2b

0800f280 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b09a      	sub	sp, #104	; 0x68
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f28e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f290:	e853 3f00 	ldrex	r3, [r3]
 800f294:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f29c:	667b      	str	r3, [r7, #100]	; 0x64
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2a6:	657b      	str	r3, [r7, #84]	; 0x54
 800f2a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f2ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f2ae:	e841 2300 	strex	r3, r2, [r1]
 800f2b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f2b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1e6      	bne.n	800f288 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	3308      	adds	r3, #8
 800f2c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2c4:	e853 3f00 	ldrex	r3, [r3]
 800f2c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f2ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2cc:	4b46      	ldr	r3, [pc, #280]	; (800f3e8 <HAL_UART_AbortReceive+0x168>)
 800f2ce:	4013      	ands	r3, r2
 800f2d0:	663b      	str	r3, [r7, #96]	; 0x60
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	3308      	adds	r3, #8
 800f2d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f2da:	643a      	str	r2, [r7, #64]	; 0x40
 800f2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f2e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f2e2:	e841 2300 	strex	r3, r2, [r1]
 800f2e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1e5      	bne.n	800f2ba <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d118      	bne.n	800f328 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2fc:	6a3b      	ldr	r3, [r7, #32]
 800f2fe:	e853 3f00 	ldrex	r3, [r3]
 800f302:	61fb      	str	r3, [r7, #28]
   return(result);
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	f023 0310 	bic.w	r3, r3, #16
 800f30a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	461a      	mov	r2, r3
 800f312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f314:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f316:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f31a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f31c:	e841 2300 	strex	r3, r2, [r1]
 800f320:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f324:	2b00      	cmp	r3, #0
 800f326:	d1e6      	bne.n	800f2f6 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	689b      	ldr	r3, [r3, #8]
 800f32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f332:	2b40      	cmp	r3, #64	; 0x40
 800f334:	d13b      	bne.n	800f3ae <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	3308      	adds	r3, #8
 800f33c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	e853 3f00 	ldrex	r3, [r3]
 800f344:	60bb      	str	r3, [r7, #8]
   return(result);
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f34c:	65bb      	str	r3, [r7, #88]	; 0x58
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	3308      	adds	r3, #8
 800f354:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f356:	61ba      	str	r2, [r7, #24]
 800f358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f35a:	6979      	ldr	r1, [r7, #20]
 800f35c:	69ba      	ldr	r2, [r7, #24]
 800f35e:	e841 2300 	strex	r3, r2, [r1]
 800f362:	613b      	str	r3, [r7, #16]
   return(result);
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1e5      	bne.n	800f336 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f370:	2b00      	cmp	r3, #0
 800f372:	d01c      	beq.n	800f3ae <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f37a:	2200      	movs	r2, #0
 800f37c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f384:	4618      	mov	r0, r3
 800f386:	f7f7 f935 	bl	80065f4 <HAL_DMA_Abort>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d00e      	beq.n	800f3ae <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f396:	4618      	mov	r0, r3
 800f398:	f7f8 fdba 	bl	8007f10 <HAL_DMA_GetError>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b20      	cmp	r3, #32
 800f3a0:	d105      	bne.n	800f3ae <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2210      	movs	r2, #16
 800f3a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800f3aa:	2303      	movs	r3, #3
 800f3ac:	e017      	b.n	800f3de <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	220f      	movs	r2, #15
 800f3bc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	699a      	ldr	r2, [r3, #24]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f042 0208 	orr.w	r2, r2, #8
 800f3cc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2220      	movs	r2, #32
 800f3d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800f3dc:	2300      	movs	r3, #0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3768      	adds	r7, #104	; 0x68
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	effffffe 	.word	0xeffffffe

0800f3ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b0ba      	sub	sp, #232	; 0xe8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	69db      	ldr	r3, [r3, #28]
 800f3fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	689b      	ldr	r3, [r3, #8]
 800f40e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f412:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f416:	f640 030f 	movw	r3, #2063	; 0x80f
 800f41a:	4013      	ands	r3, r2
 800f41c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f424:	2b00      	cmp	r3, #0
 800f426:	d11b      	bne.n	800f460 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f42c:	f003 0320 	and.w	r3, r3, #32
 800f430:	2b00      	cmp	r3, #0
 800f432:	d015      	beq.n	800f460 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f438:	f003 0320 	and.w	r3, r3, #32
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d105      	bne.n	800f44c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d009      	beq.n	800f460 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f450:	2b00      	cmp	r3, #0
 800f452:	f000 8377 	beq.w	800fb44 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	4798      	blx	r3
      }
      return;
 800f45e:	e371      	b.n	800fb44 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f464:	2b00      	cmp	r3, #0
 800f466:	f000 8123 	beq.w	800f6b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f46a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f46e:	4b8d      	ldr	r3, [pc, #564]	; (800f6a4 <HAL_UART_IRQHandler+0x2b8>)
 800f470:	4013      	ands	r3, r2
 800f472:	2b00      	cmp	r3, #0
 800f474:	d106      	bne.n	800f484 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f476:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f47a:	4b8b      	ldr	r3, [pc, #556]	; (800f6a8 <HAL_UART_IRQHandler+0x2bc>)
 800f47c:	4013      	ands	r3, r2
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f000 8116 	beq.w	800f6b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f488:	f003 0301 	and.w	r3, r3, #1
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d011      	beq.n	800f4b4 <HAL_UART_IRQHandler+0xc8>
 800f490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d00b      	beq.n	800f4b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4aa:	f043 0201 	orr.w	r2, r3, #1
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4b8:	f003 0302 	and.w	r3, r3, #2
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d011      	beq.n	800f4e4 <HAL_UART_IRQHandler+0xf8>
 800f4c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4c4:	f003 0301 	and.w	r3, r3, #1
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d00b      	beq.n	800f4e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2202      	movs	r2, #2
 800f4d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4da:	f043 0204 	orr.w	r2, r3, #4
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4e8:	f003 0304 	and.w	r3, r3, #4
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d011      	beq.n	800f514 <HAL_UART_IRQHandler+0x128>
 800f4f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4f4:	f003 0301 	and.w	r3, r3, #1
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d00b      	beq.n	800f514 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2204      	movs	r2, #4
 800f502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f50a:	f043 0202 	orr.w	r2, r3, #2
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f518:	f003 0308 	and.w	r3, r3, #8
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d017      	beq.n	800f550 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f524:	f003 0320 	and.w	r3, r3, #32
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d105      	bne.n	800f538 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f52c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f530:	4b5c      	ldr	r3, [pc, #368]	; (800f6a4 <HAL_UART_IRQHandler+0x2b8>)
 800f532:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f534:	2b00      	cmp	r3, #0
 800f536:	d00b      	beq.n	800f550 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2208      	movs	r2, #8
 800f53e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f546:	f043 0208 	orr.w	r2, r3, #8
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d012      	beq.n	800f582 <HAL_UART_IRQHandler+0x196>
 800f55c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f564:	2b00      	cmp	r3, #0
 800f566:	d00c      	beq.n	800f582 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f578:	f043 0220 	orr.w	r2, r3, #32
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f000 82dd 	beq.w	800fb48 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f592:	f003 0320 	and.w	r3, r3, #32
 800f596:	2b00      	cmp	r3, #0
 800f598:	d013      	beq.n	800f5c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f59a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f59e:	f003 0320 	and.w	r3, r3, #32
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d105      	bne.n	800f5b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f5a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f5aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d007      	beq.n	800f5c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d003      	beq.n	800f5c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	689b      	ldr	r3, [r3, #8]
 800f5d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5d6:	2b40      	cmp	r3, #64	; 0x40
 800f5d8:	d005      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f5da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f5de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d054      	beq.n	800f690 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f001 fb60 	bl	8010cac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	689b      	ldr	r3, [r3, #8]
 800f5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5f6:	2b40      	cmp	r3, #64	; 0x40
 800f5f8:	d146      	bne.n	800f688 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3308      	adds	r3, #8
 800f600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f608:	e853 3f00 	ldrex	r3, [r3]
 800f60c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	3308      	adds	r3, #8
 800f622:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f626:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f62a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f62e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f632:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f636:	e841 2300 	strex	r3, r2, [r1]
 800f63a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f63e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f642:	2b00      	cmp	r3, #0
 800f644:	d1d9      	bne.n	800f5fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d017      	beq.n	800f680 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f656:	4a15      	ldr	r2, [pc, #84]	; (800f6ac <HAL_UART_IRQHandler+0x2c0>)
 800f658:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f660:	4618      	mov	r0, r3
 800f662:	f7f7 fae5 	bl	8006c30 <HAL_DMA_Abort_IT>
 800f666:	4603      	mov	r3, r0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d019      	beq.n	800f6a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800f67a:	4610      	mov	r0, r2
 800f67c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f67e:	e00f      	b.n	800f6a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f000 fa77 	bl	800fb74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f686:	e00b      	b.n	800f6a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 fa73 	bl	800fb74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f68e:	e007      	b.n	800f6a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 fa6f 	bl	800fb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2200      	movs	r2, #0
 800f69a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800f69e:	e253      	b.n	800fb48 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6a0:	bf00      	nop
    return;
 800f6a2:	e251      	b.n	800fb48 <HAL_UART_IRQHandler+0x75c>
 800f6a4:	10000001 	.word	0x10000001
 800f6a8:	04000120 	.word	0x04000120
 800f6ac:	08010eab 	.word	0x08010eab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	f040 81e7 	bne.w	800fa88 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f6ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6be:	f003 0310 	and.w	r3, r3, #16
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	f000 81e0 	beq.w	800fa88 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f6cc:	f003 0310 	and.w	r3, r3, #16
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f000 81d9 	beq.w	800fa88 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	2210      	movs	r2, #16
 800f6dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6e8:	2b40      	cmp	r3, #64	; 0x40
 800f6ea:	f040 8151 	bne.w	800f990 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	4a96      	ldr	r2, [pc, #600]	; (800f950 <HAL_UART_IRQHandler+0x564>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d068      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4a93      	ldr	r2, [pc, #588]	; (800f954 <HAL_UART_IRQHandler+0x568>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d061      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4a91      	ldr	r2, [pc, #580]	; (800f958 <HAL_UART_IRQHandler+0x56c>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d05a      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a8e      	ldr	r2, [pc, #568]	; (800f95c <HAL_UART_IRQHandler+0x570>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d053      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4a8c      	ldr	r2, [pc, #560]	; (800f960 <HAL_UART_IRQHandler+0x574>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d04c      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a89      	ldr	r2, [pc, #548]	; (800f964 <HAL_UART_IRQHandler+0x578>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d045      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4a87      	ldr	r2, [pc, #540]	; (800f968 <HAL_UART_IRQHandler+0x57c>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d03e      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	4a84      	ldr	r2, [pc, #528]	; (800f96c <HAL_UART_IRQHandler+0x580>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d037      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	4a82      	ldr	r2, [pc, #520]	; (800f970 <HAL_UART_IRQHandler+0x584>)
 800f768:	4293      	cmp	r3, r2
 800f76a:	d030      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a7f      	ldr	r2, [pc, #508]	; (800f974 <HAL_UART_IRQHandler+0x588>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d029      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	4a7d      	ldr	r2, [pc, #500]	; (800f978 <HAL_UART_IRQHandler+0x58c>)
 800f784:	4293      	cmp	r3, r2
 800f786:	d022      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	4a7a      	ldr	r2, [pc, #488]	; (800f97c <HAL_UART_IRQHandler+0x590>)
 800f792:	4293      	cmp	r3, r2
 800f794:	d01b      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4a78      	ldr	r2, [pc, #480]	; (800f980 <HAL_UART_IRQHandler+0x594>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d014      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4a75      	ldr	r2, [pc, #468]	; (800f984 <HAL_UART_IRQHandler+0x598>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d00d      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4a73      	ldr	r2, [pc, #460]	; (800f988 <HAL_UART_IRQHandler+0x59c>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d006      	beq.n	800f7ce <HAL_UART_IRQHandler+0x3e2>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	4a70      	ldr	r2, [pc, #448]	; (800f98c <HAL_UART_IRQHandler+0x5a0>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d106      	bne.n	800f7dc <HAL_UART_IRQHandler+0x3f0>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	e005      	b.n	800f7e8 <HAL_UART_IRQHandler+0x3fc>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f7ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f000 81ab 	beq.w	800fb4c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f7fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f800:	429a      	cmp	r2, r3
 800f802:	f080 81a3 	bcs.w	800fb4c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f80c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f816:	69db      	ldr	r3, [r3, #28]
 800f818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f81c:	f000 8087 	beq.w	800f92e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f82c:	e853 3f00 	ldrex	r3, [r3]
 800f830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f83c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	461a      	mov	r2, r3
 800f846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f84a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f84e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f852:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f856:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f85a:	e841 2300 	strex	r3, r2, [r1]
 800f85e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f866:	2b00      	cmp	r3, #0
 800f868:	d1da      	bne.n	800f820 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	3308      	adds	r3, #8
 800f870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f874:	e853 3f00 	ldrex	r3, [r3]
 800f878:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f87a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f87c:	f023 0301 	bic.w	r3, r3, #1
 800f880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	3308      	adds	r3, #8
 800f88a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f88e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f892:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f894:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f896:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f89a:	e841 2300 	strex	r3, r2, [r1]
 800f89e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f8a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d1e1      	bne.n	800f86a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	3308      	adds	r3, #8
 800f8ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8b0:	e853 3f00 	ldrex	r3, [r3]
 800f8b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f8b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	3308      	adds	r3, #8
 800f8c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f8ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f8cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f8d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f8d2:	e841 2300 	strex	r3, r2, [r1]
 800f8d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f8d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1e3      	bne.n	800f8a6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2220      	movs	r2, #32
 800f8e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8f4:	e853 3f00 	ldrex	r3, [r3]
 800f8f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f8fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8fc:	f023 0310 	bic.w	r3, r3, #16
 800f900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	461a      	mov	r2, r3
 800f90a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f90e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f910:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f912:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f916:	e841 2300 	strex	r3, r2, [r1]
 800f91a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f91c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d1e4      	bne.n	800f8ec <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f928:	4618      	mov	r0, r3
 800f92a:	f7f6 fe63 	bl	80065f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2202      	movs	r2, #2
 800f932:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f940:	b29b      	uxth	r3, r3
 800f942:	1ad3      	subs	r3, r2, r3
 800f944:	b29b      	uxth	r3, r3
 800f946:	4619      	mov	r1, r3
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f000 f91d 	bl	800fb88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f94e:	e0fd      	b.n	800fb4c <HAL_UART_IRQHandler+0x760>
 800f950:	40020010 	.word	0x40020010
 800f954:	40020028 	.word	0x40020028
 800f958:	40020040 	.word	0x40020040
 800f95c:	40020058 	.word	0x40020058
 800f960:	40020070 	.word	0x40020070
 800f964:	40020088 	.word	0x40020088
 800f968:	400200a0 	.word	0x400200a0
 800f96c:	400200b8 	.word	0x400200b8
 800f970:	40020410 	.word	0x40020410
 800f974:	40020428 	.word	0x40020428
 800f978:	40020440 	.word	0x40020440
 800f97c:	40020458 	.word	0x40020458
 800f980:	40020470 	.word	0x40020470
 800f984:	40020488 	.word	0x40020488
 800f988:	400204a0 	.word	0x400204a0
 800f98c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	1ad3      	subs	r3, r2, r3
 800f9a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9aa:	b29b      	uxth	r3, r3
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	f000 80cf 	beq.w	800fb50 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f9b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	f000 80ca 	beq.w	800fb50 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c4:	e853 3f00 	ldrex	r3, [r3]
 800f9c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f9d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	461a      	mov	r2, r3
 800f9da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f9de:	647b      	str	r3, [r7, #68]	; 0x44
 800f9e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f9e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f9e6:	e841 2300 	strex	r3, r2, [r1]
 800f9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1e4      	bne.n	800f9bc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	3308      	adds	r3, #8
 800f9f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fc:	e853 3f00 	ldrex	r3, [r3]
 800fa00:	623b      	str	r3, [r7, #32]
   return(result);
 800fa02:	6a3a      	ldr	r2, [r7, #32]
 800fa04:	4b55      	ldr	r3, [pc, #340]	; (800fb5c <HAL_UART_IRQHandler+0x770>)
 800fa06:	4013      	ands	r3, r2
 800fa08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	3308      	adds	r3, #8
 800fa12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fa16:	633a      	str	r2, [r7, #48]	; 0x30
 800fa18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa1e:	e841 2300 	strex	r3, r2, [r1]
 800fa22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d1e3      	bne.n	800f9f2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2220      	movs	r2, #32
 800fa2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	e853 3f00 	ldrex	r3, [r3]
 800fa4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f023 0310 	bic.w	r3, r3, #16
 800fa52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fa60:	61fb      	str	r3, [r7, #28]
 800fa62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa64:	69b9      	ldr	r1, [r7, #24]
 800fa66:	69fa      	ldr	r2, [r7, #28]
 800fa68:	e841 2300 	strex	r3, r2, [r1]
 800fa6c:	617b      	str	r3, [r7, #20]
   return(result);
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d1e4      	bne.n	800fa3e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2202      	movs	r2, #2
 800fa78:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fa7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fa7e:	4619      	mov	r1, r3
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f000 f881 	bl	800fb88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fa86:	e063      	b.n	800fb50 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fa88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d00e      	beq.n	800fab2 <HAL_UART_IRQHandler+0x6c6>
 800fa94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d008      	beq.n	800fab2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800faa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f001 ff5a 	bl	8011964 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fab0:	e051      	b.n	800fb56 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d014      	beq.n	800fae8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fabe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d105      	bne.n	800fad6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800faca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800face:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d008      	beq.n	800fae8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d03a      	beq.n	800fb54 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	4798      	blx	r3
    }
    return;
 800fae6:	e035      	b.n	800fb54 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d009      	beq.n	800fb08 <HAL_UART_IRQHandler+0x71c>
 800faf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800faf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d003      	beq.n	800fb08 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f001 f9e8 	bl	8010ed6 <UART_EndTransmit_IT>
    return;
 800fb06:	e026      	b.n	800fb56 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fb08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d009      	beq.n	800fb28 <HAL_UART_IRQHandler+0x73c>
 800fb14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d003      	beq.n	800fb28 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f001 ff33 	bl	801198c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fb26:	e016      	b.n	800fb56 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fb28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d010      	beq.n	800fb56 <HAL_UART_IRQHandler+0x76a>
 800fb34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	da0c      	bge.n	800fb56 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f001 ff1b 	bl	8011978 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fb42:	e008      	b.n	800fb56 <HAL_UART_IRQHandler+0x76a>
      return;
 800fb44:	bf00      	nop
 800fb46:	e006      	b.n	800fb56 <HAL_UART_IRQHandler+0x76a>
    return;
 800fb48:	bf00      	nop
 800fb4a:	e004      	b.n	800fb56 <HAL_UART_IRQHandler+0x76a>
      return;
 800fb4c:	bf00      	nop
 800fb4e:	e002      	b.n	800fb56 <HAL_UART_IRQHandler+0x76a>
      return;
 800fb50:	bf00      	nop
 800fb52:	e000      	b.n	800fb56 <HAL_UART_IRQHandler+0x76a>
    return;
 800fb54:	bf00      	nop
  }
}
 800fb56:	37e8      	adds	r7, #232	; 0xe8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	effffffe 	.word	0xeffffffe

0800fb60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b083      	sub	sp, #12
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fb68:	bf00      	nop
 800fb6a:	370c      	adds	r7, #12
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr

0800fb74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fb7c:	bf00      	nop
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	460b      	mov	r3, r1
 800fb92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fb94:	bf00      	nop
 800fb96:	370c      	adds	r7, #12
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr

0800fba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fba4:	b092      	sub	sp, #72	; 0x48
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	689a      	ldr	r2, [r3, #8]
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	691b      	ldr	r3, [r3, #16]
 800fbb8:	431a      	orrs	r2, r3
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	695b      	ldr	r3, [r3, #20]
 800fbbe:	431a      	orrs	r2, r3
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	69db      	ldr	r3, [r3, #28]
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	4bbe      	ldr	r3, [pc, #760]	; (800fec8 <UART_SetConfig+0x328>)
 800fbd0:	4013      	ands	r3, r2
 800fbd2:	697a      	ldr	r2, [r7, #20]
 800fbd4:	6812      	ldr	r2, [r2, #0]
 800fbd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbd8:	430b      	orrs	r3, r1
 800fbda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	68da      	ldr	r2, [r3, #12]
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	430a      	orrs	r2, r1
 800fbf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	699b      	ldr	r3, [r3, #24]
 800fbf6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4ab3      	ldr	r2, [pc, #716]	; (800fecc <UART_SetConfig+0x32c>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d004      	beq.n	800fc0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	6a1b      	ldr	r3, [r3, #32]
 800fc06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	689a      	ldr	r2, [r3, #8]
 800fc12:	4baf      	ldr	r3, [pc, #700]	; (800fed0 <UART_SetConfig+0x330>)
 800fc14:	4013      	ands	r3, r2
 800fc16:	697a      	ldr	r2, [r7, #20]
 800fc18:	6812      	ldr	r2, [r2, #0]
 800fc1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc1c:	430b      	orrs	r3, r1
 800fc1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc26:	f023 010f 	bic.w	r1, r3, #15
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	430a      	orrs	r2, r1
 800fc34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4aa6      	ldr	r2, [pc, #664]	; (800fed4 <UART_SetConfig+0x334>)
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d177      	bne.n	800fd30 <UART_SetConfig+0x190>
 800fc40:	4ba5      	ldr	r3, [pc, #660]	; (800fed8 <UART_SetConfig+0x338>)
 800fc42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc48:	2b28      	cmp	r3, #40	; 0x28
 800fc4a:	d86d      	bhi.n	800fd28 <UART_SetConfig+0x188>
 800fc4c:	a201      	add	r2, pc, #4	; (adr r2, 800fc54 <UART_SetConfig+0xb4>)
 800fc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc52:	bf00      	nop
 800fc54:	0800fcf9 	.word	0x0800fcf9
 800fc58:	0800fd29 	.word	0x0800fd29
 800fc5c:	0800fd29 	.word	0x0800fd29
 800fc60:	0800fd29 	.word	0x0800fd29
 800fc64:	0800fd29 	.word	0x0800fd29
 800fc68:	0800fd29 	.word	0x0800fd29
 800fc6c:	0800fd29 	.word	0x0800fd29
 800fc70:	0800fd29 	.word	0x0800fd29
 800fc74:	0800fd01 	.word	0x0800fd01
 800fc78:	0800fd29 	.word	0x0800fd29
 800fc7c:	0800fd29 	.word	0x0800fd29
 800fc80:	0800fd29 	.word	0x0800fd29
 800fc84:	0800fd29 	.word	0x0800fd29
 800fc88:	0800fd29 	.word	0x0800fd29
 800fc8c:	0800fd29 	.word	0x0800fd29
 800fc90:	0800fd29 	.word	0x0800fd29
 800fc94:	0800fd09 	.word	0x0800fd09
 800fc98:	0800fd29 	.word	0x0800fd29
 800fc9c:	0800fd29 	.word	0x0800fd29
 800fca0:	0800fd29 	.word	0x0800fd29
 800fca4:	0800fd29 	.word	0x0800fd29
 800fca8:	0800fd29 	.word	0x0800fd29
 800fcac:	0800fd29 	.word	0x0800fd29
 800fcb0:	0800fd29 	.word	0x0800fd29
 800fcb4:	0800fd11 	.word	0x0800fd11
 800fcb8:	0800fd29 	.word	0x0800fd29
 800fcbc:	0800fd29 	.word	0x0800fd29
 800fcc0:	0800fd29 	.word	0x0800fd29
 800fcc4:	0800fd29 	.word	0x0800fd29
 800fcc8:	0800fd29 	.word	0x0800fd29
 800fccc:	0800fd29 	.word	0x0800fd29
 800fcd0:	0800fd29 	.word	0x0800fd29
 800fcd4:	0800fd19 	.word	0x0800fd19
 800fcd8:	0800fd29 	.word	0x0800fd29
 800fcdc:	0800fd29 	.word	0x0800fd29
 800fce0:	0800fd29 	.word	0x0800fd29
 800fce4:	0800fd29 	.word	0x0800fd29
 800fce8:	0800fd29 	.word	0x0800fd29
 800fcec:	0800fd29 	.word	0x0800fd29
 800fcf0:	0800fd29 	.word	0x0800fd29
 800fcf4:	0800fd21 	.word	0x0800fd21
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcfe:	e222      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd00:	2304      	movs	r3, #4
 800fd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd06:	e21e      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd08:	2308      	movs	r3, #8
 800fd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd0e:	e21a      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd10:	2310      	movs	r3, #16
 800fd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd16:	e216      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd18:	2320      	movs	r3, #32
 800fd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd1e:	e212      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd20:	2340      	movs	r3, #64	; 0x40
 800fd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd26:	e20e      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd28:	2380      	movs	r3, #128	; 0x80
 800fd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd2e:	e20a      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	4a69      	ldr	r2, [pc, #420]	; (800fedc <UART_SetConfig+0x33c>)
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d130      	bne.n	800fd9c <UART_SetConfig+0x1fc>
 800fd3a:	4b67      	ldr	r3, [pc, #412]	; (800fed8 <UART_SetConfig+0x338>)
 800fd3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd3e:	f003 0307 	and.w	r3, r3, #7
 800fd42:	2b05      	cmp	r3, #5
 800fd44:	d826      	bhi.n	800fd94 <UART_SetConfig+0x1f4>
 800fd46:	a201      	add	r2, pc, #4	; (adr r2, 800fd4c <UART_SetConfig+0x1ac>)
 800fd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd4c:	0800fd65 	.word	0x0800fd65
 800fd50:	0800fd6d 	.word	0x0800fd6d
 800fd54:	0800fd75 	.word	0x0800fd75
 800fd58:	0800fd7d 	.word	0x0800fd7d
 800fd5c:	0800fd85 	.word	0x0800fd85
 800fd60:	0800fd8d 	.word	0x0800fd8d
 800fd64:	2300      	movs	r3, #0
 800fd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd6a:	e1ec      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd6c:	2304      	movs	r3, #4
 800fd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd72:	e1e8      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd74:	2308      	movs	r3, #8
 800fd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd7a:	e1e4      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd7c:	2310      	movs	r3, #16
 800fd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd82:	e1e0      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd84:	2320      	movs	r3, #32
 800fd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd8a:	e1dc      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd8c:	2340      	movs	r3, #64	; 0x40
 800fd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd92:	e1d8      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd94:	2380      	movs	r3, #128	; 0x80
 800fd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd9a:	e1d4      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4a4f      	ldr	r2, [pc, #316]	; (800fee0 <UART_SetConfig+0x340>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d130      	bne.n	800fe08 <UART_SetConfig+0x268>
 800fda6:	4b4c      	ldr	r3, [pc, #304]	; (800fed8 <UART_SetConfig+0x338>)
 800fda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdaa:	f003 0307 	and.w	r3, r3, #7
 800fdae:	2b05      	cmp	r3, #5
 800fdb0:	d826      	bhi.n	800fe00 <UART_SetConfig+0x260>
 800fdb2:	a201      	add	r2, pc, #4	; (adr r2, 800fdb8 <UART_SetConfig+0x218>)
 800fdb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdb8:	0800fdd1 	.word	0x0800fdd1
 800fdbc:	0800fdd9 	.word	0x0800fdd9
 800fdc0:	0800fde1 	.word	0x0800fde1
 800fdc4:	0800fde9 	.word	0x0800fde9
 800fdc8:	0800fdf1 	.word	0x0800fdf1
 800fdcc:	0800fdf9 	.word	0x0800fdf9
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdd6:	e1b6      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fdd8:	2304      	movs	r3, #4
 800fdda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdde:	e1b2      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fde0:	2308      	movs	r3, #8
 800fde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fde6:	e1ae      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fde8:	2310      	movs	r3, #16
 800fdea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdee:	e1aa      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fdf0:	2320      	movs	r3, #32
 800fdf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdf6:	e1a6      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fdf8:	2340      	movs	r3, #64	; 0x40
 800fdfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdfe:	e1a2      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fe00:	2380      	movs	r3, #128	; 0x80
 800fe02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe06:	e19e      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	4a35      	ldr	r2, [pc, #212]	; (800fee4 <UART_SetConfig+0x344>)
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d130      	bne.n	800fe74 <UART_SetConfig+0x2d4>
 800fe12:	4b31      	ldr	r3, [pc, #196]	; (800fed8 <UART_SetConfig+0x338>)
 800fe14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe16:	f003 0307 	and.w	r3, r3, #7
 800fe1a:	2b05      	cmp	r3, #5
 800fe1c:	d826      	bhi.n	800fe6c <UART_SetConfig+0x2cc>
 800fe1e:	a201      	add	r2, pc, #4	; (adr r2, 800fe24 <UART_SetConfig+0x284>)
 800fe20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe24:	0800fe3d 	.word	0x0800fe3d
 800fe28:	0800fe45 	.word	0x0800fe45
 800fe2c:	0800fe4d 	.word	0x0800fe4d
 800fe30:	0800fe55 	.word	0x0800fe55
 800fe34:	0800fe5d 	.word	0x0800fe5d
 800fe38:	0800fe65 	.word	0x0800fe65
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe42:	e180      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fe44:	2304      	movs	r3, #4
 800fe46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe4a:	e17c      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fe4c:	2308      	movs	r3, #8
 800fe4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe52:	e178      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fe54:	2310      	movs	r3, #16
 800fe56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe5a:	e174      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fe5c:	2320      	movs	r3, #32
 800fe5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe62:	e170      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fe64:	2340      	movs	r3, #64	; 0x40
 800fe66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe6a:	e16c      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fe6c:	2380      	movs	r3, #128	; 0x80
 800fe6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe72:	e168      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4a1b      	ldr	r2, [pc, #108]	; (800fee8 <UART_SetConfig+0x348>)
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	d142      	bne.n	800ff04 <UART_SetConfig+0x364>
 800fe7e:	4b16      	ldr	r3, [pc, #88]	; (800fed8 <UART_SetConfig+0x338>)
 800fe80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe82:	f003 0307 	and.w	r3, r3, #7
 800fe86:	2b05      	cmp	r3, #5
 800fe88:	d838      	bhi.n	800fefc <UART_SetConfig+0x35c>
 800fe8a:	a201      	add	r2, pc, #4	; (adr r2, 800fe90 <UART_SetConfig+0x2f0>)
 800fe8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe90:	0800fea9 	.word	0x0800fea9
 800fe94:	0800feb1 	.word	0x0800feb1
 800fe98:	0800feb9 	.word	0x0800feb9
 800fe9c:	0800fec1 	.word	0x0800fec1
 800fea0:	0800feed 	.word	0x0800feed
 800fea4:	0800fef5 	.word	0x0800fef5
 800fea8:	2300      	movs	r3, #0
 800feaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feae:	e14a      	b.n	8010146 <UART_SetConfig+0x5a6>
 800feb0:	2304      	movs	r3, #4
 800feb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feb6:	e146      	b.n	8010146 <UART_SetConfig+0x5a6>
 800feb8:	2308      	movs	r3, #8
 800feba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800febe:	e142      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fec0:	2310      	movs	r3, #16
 800fec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fec6:	e13e      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fec8:	cfff69f3 	.word	0xcfff69f3
 800fecc:	58000c00 	.word	0x58000c00
 800fed0:	11fff4ff 	.word	0x11fff4ff
 800fed4:	40011000 	.word	0x40011000
 800fed8:	58024400 	.word	0x58024400
 800fedc:	40004400 	.word	0x40004400
 800fee0:	40004800 	.word	0x40004800
 800fee4:	40004c00 	.word	0x40004c00
 800fee8:	40005000 	.word	0x40005000
 800feec:	2320      	movs	r3, #32
 800feee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fef2:	e128      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fef4:	2340      	movs	r3, #64	; 0x40
 800fef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fefa:	e124      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fefc:	2380      	movs	r3, #128	; 0x80
 800fefe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff02:	e120      	b.n	8010146 <UART_SetConfig+0x5a6>
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	4acb      	ldr	r2, [pc, #812]	; (8010238 <UART_SetConfig+0x698>)
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d176      	bne.n	800fffc <UART_SetConfig+0x45c>
 800ff0e:	4bcb      	ldr	r3, [pc, #812]	; (801023c <UART_SetConfig+0x69c>)
 800ff10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ff16:	2b28      	cmp	r3, #40	; 0x28
 800ff18:	d86c      	bhi.n	800fff4 <UART_SetConfig+0x454>
 800ff1a:	a201      	add	r2, pc, #4	; (adr r2, 800ff20 <UART_SetConfig+0x380>)
 800ff1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff20:	0800ffc5 	.word	0x0800ffc5
 800ff24:	0800fff5 	.word	0x0800fff5
 800ff28:	0800fff5 	.word	0x0800fff5
 800ff2c:	0800fff5 	.word	0x0800fff5
 800ff30:	0800fff5 	.word	0x0800fff5
 800ff34:	0800fff5 	.word	0x0800fff5
 800ff38:	0800fff5 	.word	0x0800fff5
 800ff3c:	0800fff5 	.word	0x0800fff5
 800ff40:	0800ffcd 	.word	0x0800ffcd
 800ff44:	0800fff5 	.word	0x0800fff5
 800ff48:	0800fff5 	.word	0x0800fff5
 800ff4c:	0800fff5 	.word	0x0800fff5
 800ff50:	0800fff5 	.word	0x0800fff5
 800ff54:	0800fff5 	.word	0x0800fff5
 800ff58:	0800fff5 	.word	0x0800fff5
 800ff5c:	0800fff5 	.word	0x0800fff5
 800ff60:	0800ffd5 	.word	0x0800ffd5
 800ff64:	0800fff5 	.word	0x0800fff5
 800ff68:	0800fff5 	.word	0x0800fff5
 800ff6c:	0800fff5 	.word	0x0800fff5
 800ff70:	0800fff5 	.word	0x0800fff5
 800ff74:	0800fff5 	.word	0x0800fff5
 800ff78:	0800fff5 	.word	0x0800fff5
 800ff7c:	0800fff5 	.word	0x0800fff5
 800ff80:	0800ffdd 	.word	0x0800ffdd
 800ff84:	0800fff5 	.word	0x0800fff5
 800ff88:	0800fff5 	.word	0x0800fff5
 800ff8c:	0800fff5 	.word	0x0800fff5
 800ff90:	0800fff5 	.word	0x0800fff5
 800ff94:	0800fff5 	.word	0x0800fff5
 800ff98:	0800fff5 	.word	0x0800fff5
 800ff9c:	0800fff5 	.word	0x0800fff5
 800ffa0:	0800ffe5 	.word	0x0800ffe5
 800ffa4:	0800fff5 	.word	0x0800fff5
 800ffa8:	0800fff5 	.word	0x0800fff5
 800ffac:	0800fff5 	.word	0x0800fff5
 800ffb0:	0800fff5 	.word	0x0800fff5
 800ffb4:	0800fff5 	.word	0x0800fff5
 800ffb8:	0800fff5 	.word	0x0800fff5
 800ffbc:	0800fff5 	.word	0x0800fff5
 800ffc0:	0800ffed 	.word	0x0800ffed
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffca:	e0bc      	b.n	8010146 <UART_SetConfig+0x5a6>
 800ffcc:	2304      	movs	r3, #4
 800ffce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffd2:	e0b8      	b.n	8010146 <UART_SetConfig+0x5a6>
 800ffd4:	2308      	movs	r3, #8
 800ffd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffda:	e0b4      	b.n	8010146 <UART_SetConfig+0x5a6>
 800ffdc:	2310      	movs	r3, #16
 800ffde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffe2:	e0b0      	b.n	8010146 <UART_SetConfig+0x5a6>
 800ffe4:	2320      	movs	r3, #32
 800ffe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffea:	e0ac      	b.n	8010146 <UART_SetConfig+0x5a6>
 800ffec:	2340      	movs	r3, #64	; 0x40
 800ffee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fff2:	e0a8      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fff4:	2380      	movs	r3, #128	; 0x80
 800fff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fffa:	e0a4      	b.n	8010146 <UART_SetConfig+0x5a6>
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4a8f      	ldr	r2, [pc, #572]	; (8010240 <UART_SetConfig+0x6a0>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d130      	bne.n	8010068 <UART_SetConfig+0x4c8>
 8010006:	4b8d      	ldr	r3, [pc, #564]	; (801023c <UART_SetConfig+0x69c>)
 8010008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801000a:	f003 0307 	and.w	r3, r3, #7
 801000e:	2b05      	cmp	r3, #5
 8010010:	d826      	bhi.n	8010060 <UART_SetConfig+0x4c0>
 8010012:	a201      	add	r2, pc, #4	; (adr r2, 8010018 <UART_SetConfig+0x478>)
 8010014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010018:	08010031 	.word	0x08010031
 801001c:	08010039 	.word	0x08010039
 8010020:	08010041 	.word	0x08010041
 8010024:	08010049 	.word	0x08010049
 8010028:	08010051 	.word	0x08010051
 801002c:	08010059 	.word	0x08010059
 8010030:	2300      	movs	r3, #0
 8010032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010036:	e086      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010038:	2304      	movs	r3, #4
 801003a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801003e:	e082      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010040:	2308      	movs	r3, #8
 8010042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010046:	e07e      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010048:	2310      	movs	r3, #16
 801004a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801004e:	e07a      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010050:	2320      	movs	r3, #32
 8010052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010056:	e076      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010058:	2340      	movs	r3, #64	; 0x40
 801005a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801005e:	e072      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010060:	2380      	movs	r3, #128	; 0x80
 8010062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010066:	e06e      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4a75      	ldr	r2, [pc, #468]	; (8010244 <UART_SetConfig+0x6a4>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d130      	bne.n	80100d4 <UART_SetConfig+0x534>
 8010072:	4b72      	ldr	r3, [pc, #456]	; (801023c <UART_SetConfig+0x69c>)
 8010074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010076:	f003 0307 	and.w	r3, r3, #7
 801007a:	2b05      	cmp	r3, #5
 801007c:	d826      	bhi.n	80100cc <UART_SetConfig+0x52c>
 801007e:	a201      	add	r2, pc, #4	; (adr r2, 8010084 <UART_SetConfig+0x4e4>)
 8010080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010084:	0801009d 	.word	0x0801009d
 8010088:	080100a5 	.word	0x080100a5
 801008c:	080100ad 	.word	0x080100ad
 8010090:	080100b5 	.word	0x080100b5
 8010094:	080100bd 	.word	0x080100bd
 8010098:	080100c5 	.word	0x080100c5
 801009c:	2300      	movs	r3, #0
 801009e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100a2:	e050      	b.n	8010146 <UART_SetConfig+0x5a6>
 80100a4:	2304      	movs	r3, #4
 80100a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100aa:	e04c      	b.n	8010146 <UART_SetConfig+0x5a6>
 80100ac:	2308      	movs	r3, #8
 80100ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100b2:	e048      	b.n	8010146 <UART_SetConfig+0x5a6>
 80100b4:	2310      	movs	r3, #16
 80100b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100ba:	e044      	b.n	8010146 <UART_SetConfig+0x5a6>
 80100bc:	2320      	movs	r3, #32
 80100be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100c2:	e040      	b.n	8010146 <UART_SetConfig+0x5a6>
 80100c4:	2340      	movs	r3, #64	; 0x40
 80100c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100ca:	e03c      	b.n	8010146 <UART_SetConfig+0x5a6>
 80100cc:	2380      	movs	r3, #128	; 0x80
 80100ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100d2:	e038      	b.n	8010146 <UART_SetConfig+0x5a6>
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	4a5b      	ldr	r2, [pc, #364]	; (8010248 <UART_SetConfig+0x6a8>)
 80100da:	4293      	cmp	r3, r2
 80100dc:	d130      	bne.n	8010140 <UART_SetConfig+0x5a0>
 80100de:	4b57      	ldr	r3, [pc, #348]	; (801023c <UART_SetConfig+0x69c>)
 80100e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100e2:	f003 0307 	and.w	r3, r3, #7
 80100e6:	2b05      	cmp	r3, #5
 80100e8:	d826      	bhi.n	8010138 <UART_SetConfig+0x598>
 80100ea:	a201      	add	r2, pc, #4	; (adr r2, 80100f0 <UART_SetConfig+0x550>)
 80100ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f0:	08010109 	.word	0x08010109
 80100f4:	08010111 	.word	0x08010111
 80100f8:	08010119 	.word	0x08010119
 80100fc:	08010121 	.word	0x08010121
 8010100:	08010129 	.word	0x08010129
 8010104:	08010131 	.word	0x08010131
 8010108:	2302      	movs	r3, #2
 801010a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801010e:	e01a      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010110:	2304      	movs	r3, #4
 8010112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010116:	e016      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010118:	2308      	movs	r3, #8
 801011a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801011e:	e012      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010120:	2310      	movs	r3, #16
 8010122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010126:	e00e      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010128:	2320      	movs	r3, #32
 801012a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801012e:	e00a      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010130:	2340      	movs	r3, #64	; 0x40
 8010132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010136:	e006      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010138:	2380      	movs	r3, #128	; 0x80
 801013a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801013e:	e002      	b.n	8010146 <UART_SetConfig+0x5a6>
 8010140:	2380      	movs	r3, #128	; 0x80
 8010142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a3f      	ldr	r2, [pc, #252]	; (8010248 <UART_SetConfig+0x6a8>)
 801014c:	4293      	cmp	r3, r2
 801014e:	f040 80f8 	bne.w	8010342 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010152:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010156:	2b20      	cmp	r3, #32
 8010158:	dc46      	bgt.n	80101e8 <UART_SetConfig+0x648>
 801015a:	2b02      	cmp	r3, #2
 801015c:	f2c0 8082 	blt.w	8010264 <UART_SetConfig+0x6c4>
 8010160:	3b02      	subs	r3, #2
 8010162:	2b1e      	cmp	r3, #30
 8010164:	d87e      	bhi.n	8010264 <UART_SetConfig+0x6c4>
 8010166:	a201      	add	r2, pc, #4	; (adr r2, 801016c <UART_SetConfig+0x5cc>)
 8010168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801016c:	080101ef 	.word	0x080101ef
 8010170:	08010265 	.word	0x08010265
 8010174:	080101f7 	.word	0x080101f7
 8010178:	08010265 	.word	0x08010265
 801017c:	08010265 	.word	0x08010265
 8010180:	08010265 	.word	0x08010265
 8010184:	08010207 	.word	0x08010207
 8010188:	08010265 	.word	0x08010265
 801018c:	08010265 	.word	0x08010265
 8010190:	08010265 	.word	0x08010265
 8010194:	08010265 	.word	0x08010265
 8010198:	08010265 	.word	0x08010265
 801019c:	08010265 	.word	0x08010265
 80101a0:	08010265 	.word	0x08010265
 80101a4:	08010217 	.word	0x08010217
 80101a8:	08010265 	.word	0x08010265
 80101ac:	08010265 	.word	0x08010265
 80101b0:	08010265 	.word	0x08010265
 80101b4:	08010265 	.word	0x08010265
 80101b8:	08010265 	.word	0x08010265
 80101bc:	08010265 	.word	0x08010265
 80101c0:	08010265 	.word	0x08010265
 80101c4:	08010265 	.word	0x08010265
 80101c8:	08010265 	.word	0x08010265
 80101cc:	08010265 	.word	0x08010265
 80101d0:	08010265 	.word	0x08010265
 80101d4:	08010265 	.word	0x08010265
 80101d8:	08010265 	.word	0x08010265
 80101dc:	08010265 	.word	0x08010265
 80101e0:	08010265 	.word	0x08010265
 80101e4:	08010257 	.word	0x08010257
 80101e8:	2b40      	cmp	r3, #64	; 0x40
 80101ea:	d037      	beq.n	801025c <UART_SetConfig+0x6bc>
 80101ec:	e03a      	b.n	8010264 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80101ee:	f7fb fda9 	bl	800bd44 <HAL_RCCEx_GetD3PCLK1Freq>
 80101f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80101f4:	e03c      	b.n	8010270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fb fdb8 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010204:	e034      	b.n	8010270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010206:	f107 0318 	add.w	r3, r7, #24
 801020a:	4618      	mov	r0, r3
 801020c:	f7fb ff04 	bl	800c018 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010214:	e02c      	b.n	8010270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010216:	4b09      	ldr	r3, [pc, #36]	; (801023c <UART_SetConfig+0x69c>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f003 0320 	and.w	r3, r3, #32
 801021e:	2b00      	cmp	r3, #0
 8010220:	d016      	beq.n	8010250 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010222:	4b06      	ldr	r3, [pc, #24]	; (801023c <UART_SetConfig+0x69c>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	08db      	lsrs	r3, r3, #3
 8010228:	f003 0303 	and.w	r3, r3, #3
 801022c:	4a07      	ldr	r2, [pc, #28]	; (801024c <UART_SetConfig+0x6ac>)
 801022e:	fa22 f303 	lsr.w	r3, r2, r3
 8010232:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010234:	e01c      	b.n	8010270 <UART_SetConfig+0x6d0>
 8010236:	bf00      	nop
 8010238:	40011400 	.word	0x40011400
 801023c:	58024400 	.word	0x58024400
 8010240:	40007800 	.word	0x40007800
 8010244:	40007c00 	.word	0x40007c00
 8010248:	58000c00 	.word	0x58000c00
 801024c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010250:	4b9d      	ldr	r3, [pc, #628]	; (80104c8 <UART_SetConfig+0x928>)
 8010252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010254:	e00c      	b.n	8010270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010256:	4b9d      	ldr	r3, [pc, #628]	; (80104cc <UART_SetConfig+0x92c>)
 8010258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801025a:	e009      	b.n	8010270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801025c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010262:	e005      	b.n	8010270 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010264:	2300      	movs	r3, #0
 8010266:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010268:	2301      	movs	r3, #1
 801026a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801026e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010272:	2b00      	cmp	r3, #0
 8010274:	f000 81de 	beq.w	8010634 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801027c:	4a94      	ldr	r2, [pc, #592]	; (80104d0 <UART_SetConfig+0x930>)
 801027e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010282:	461a      	mov	r2, r3
 8010284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010286:	fbb3 f3f2 	udiv	r3, r3, r2
 801028a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	685a      	ldr	r2, [r3, #4]
 8010290:	4613      	mov	r3, r2
 8010292:	005b      	lsls	r3, r3, #1
 8010294:	4413      	add	r3, r2
 8010296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010298:	429a      	cmp	r2, r3
 801029a:	d305      	bcc.n	80102a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80102a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d903      	bls.n	80102b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80102a8:	2301      	movs	r3, #1
 80102aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80102ae:	e1c1      	b.n	8010634 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102b2:	2200      	movs	r2, #0
 80102b4:	60bb      	str	r3, [r7, #8]
 80102b6:	60fa      	str	r2, [r7, #12]
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102bc:	4a84      	ldr	r2, [pc, #528]	; (80104d0 <UART_SetConfig+0x930>)
 80102be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	2200      	movs	r2, #0
 80102c6:	603b      	str	r3, [r7, #0]
 80102c8:	607a      	str	r2, [r7, #4]
 80102ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80102d2:	f7f0 f805 	bl	80002e0 <__aeabi_uldivmod>
 80102d6:	4602      	mov	r2, r0
 80102d8:	460b      	mov	r3, r1
 80102da:	4610      	mov	r0, r2
 80102dc:	4619      	mov	r1, r3
 80102de:	f04f 0200 	mov.w	r2, #0
 80102e2:	f04f 0300 	mov.w	r3, #0
 80102e6:	020b      	lsls	r3, r1, #8
 80102e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80102ec:	0202      	lsls	r2, r0, #8
 80102ee:	6979      	ldr	r1, [r7, #20]
 80102f0:	6849      	ldr	r1, [r1, #4]
 80102f2:	0849      	lsrs	r1, r1, #1
 80102f4:	2000      	movs	r0, #0
 80102f6:	460c      	mov	r4, r1
 80102f8:	4605      	mov	r5, r0
 80102fa:	eb12 0804 	adds.w	r8, r2, r4
 80102fe:	eb43 0905 	adc.w	r9, r3, r5
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	2200      	movs	r2, #0
 8010308:	469a      	mov	sl, r3
 801030a:	4693      	mov	fp, r2
 801030c:	4652      	mov	r2, sl
 801030e:	465b      	mov	r3, fp
 8010310:	4640      	mov	r0, r8
 8010312:	4649      	mov	r1, r9
 8010314:	f7ef ffe4 	bl	80002e0 <__aeabi_uldivmod>
 8010318:	4602      	mov	r2, r0
 801031a:	460b      	mov	r3, r1
 801031c:	4613      	mov	r3, r2
 801031e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010326:	d308      	bcc.n	801033a <UART_SetConfig+0x79a>
 8010328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801032e:	d204      	bcs.n	801033a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010336:	60da      	str	r2, [r3, #12]
 8010338:	e17c      	b.n	8010634 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801033a:	2301      	movs	r3, #1
 801033c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010340:	e178      	b.n	8010634 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	69db      	ldr	r3, [r3, #28]
 8010346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801034a:	f040 80c5 	bne.w	80104d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801034e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010352:	2b20      	cmp	r3, #32
 8010354:	dc48      	bgt.n	80103e8 <UART_SetConfig+0x848>
 8010356:	2b00      	cmp	r3, #0
 8010358:	db7b      	blt.n	8010452 <UART_SetConfig+0x8b2>
 801035a:	2b20      	cmp	r3, #32
 801035c:	d879      	bhi.n	8010452 <UART_SetConfig+0x8b2>
 801035e:	a201      	add	r2, pc, #4	; (adr r2, 8010364 <UART_SetConfig+0x7c4>)
 8010360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010364:	080103ef 	.word	0x080103ef
 8010368:	080103f7 	.word	0x080103f7
 801036c:	08010453 	.word	0x08010453
 8010370:	08010453 	.word	0x08010453
 8010374:	080103ff 	.word	0x080103ff
 8010378:	08010453 	.word	0x08010453
 801037c:	08010453 	.word	0x08010453
 8010380:	08010453 	.word	0x08010453
 8010384:	0801040f 	.word	0x0801040f
 8010388:	08010453 	.word	0x08010453
 801038c:	08010453 	.word	0x08010453
 8010390:	08010453 	.word	0x08010453
 8010394:	08010453 	.word	0x08010453
 8010398:	08010453 	.word	0x08010453
 801039c:	08010453 	.word	0x08010453
 80103a0:	08010453 	.word	0x08010453
 80103a4:	0801041f 	.word	0x0801041f
 80103a8:	08010453 	.word	0x08010453
 80103ac:	08010453 	.word	0x08010453
 80103b0:	08010453 	.word	0x08010453
 80103b4:	08010453 	.word	0x08010453
 80103b8:	08010453 	.word	0x08010453
 80103bc:	08010453 	.word	0x08010453
 80103c0:	08010453 	.word	0x08010453
 80103c4:	08010453 	.word	0x08010453
 80103c8:	08010453 	.word	0x08010453
 80103cc:	08010453 	.word	0x08010453
 80103d0:	08010453 	.word	0x08010453
 80103d4:	08010453 	.word	0x08010453
 80103d8:	08010453 	.word	0x08010453
 80103dc:	08010453 	.word	0x08010453
 80103e0:	08010453 	.word	0x08010453
 80103e4:	08010445 	.word	0x08010445
 80103e8:	2b40      	cmp	r3, #64	; 0x40
 80103ea:	d02e      	beq.n	801044a <UART_SetConfig+0x8aa>
 80103ec:	e031      	b.n	8010452 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103ee:	f7f9 fcb1 	bl	8009d54 <HAL_RCC_GetPCLK1Freq>
 80103f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80103f4:	e033      	b.n	801045e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80103f6:	f7f9 fcc3 	bl	8009d80 <HAL_RCC_GetPCLK2Freq>
 80103fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80103fc:	e02f      	b.n	801045e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80103fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010402:	4618      	mov	r0, r3
 8010404:	f7fb fcb4 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801040a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801040c:	e027      	b.n	801045e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801040e:	f107 0318 	add.w	r3, r7, #24
 8010412:	4618      	mov	r0, r3
 8010414:	f7fb fe00 	bl	800c018 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010418:	69fb      	ldr	r3, [r7, #28]
 801041a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801041c:	e01f      	b.n	801045e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801041e:	4b2d      	ldr	r3, [pc, #180]	; (80104d4 <UART_SetConfig+0x934>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	f003 0320 	and.w	r3, r3, #32
 8010426:	2b00      	cmp	r3, #0
 8010428:	d009      	beq.n	801043e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801042a:	4b2a      	ldr	r3, [pc, #168]	; (80104d4 <UART_SetConfig+0x934>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	08db      	lsrs	r3, r3, #3
 8010430:	f003 0303 	and.w	r3, r3, #3
 8010434:	4a24      	ldr	r2, [pc, #144]	; (80104c8 <UART_SetConfig+0x928>)
 8010436:	fa22 f303 	lsr.w	r3, r2, r3
 801043a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801043c:	e00f      	b.n	801045e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801043e:	4b22      	ldr	r3, [pc, #136]	; (80104c8 <UART_SetConfig+0x928>)
 8010440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010442:	e00c      	b.n	801045e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010444:	4b21      	ldr	r3, [pc, #132]	; (80104cc <UART_SetConfig+0x92c>)
 8010446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010448:	e009      	b.n	801045e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801044a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801044e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010450:	e005      	b.n	801045e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010452:	2300      	movs	r3, #0
 8010454:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010456:	2301      	movs	r3, #1
 8010458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801045c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801045e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010460:	2b00      	cmp	r3, #0
 8010462:	f000 80e7 	beq.w	8010634 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801046a:	4a19      	ldr	r2, [pc, #100]	; (80104d0 <UART_SetConfig+0x930>)
 801046c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010470:	461a      	mov	r2, r3
 8010472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010474:	fbb3 f3f2 	udiv	r3, r3, r2
 8010478:	005a      	lsls	r2, r3, #1
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	085b      	lsrs	r3, r3, #1
 8010480:	441a      	add	r2, r3
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	fbb2 f3f3 	udiv	r3, r2, r3
 801048a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801048c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048e:	2b0f      	cmp	r3, #15
 8010490:	d916      	bls.n	80104c0 <UART_SetConfig+0x920>
 8010492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010498:	d212      	bcs.n	80104c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801049a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049c:	b29b      	uxth	r3, r3
 801049e:	f023 030f 	bic.w	r3, r3, #15
 80104a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80104a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a6:	085b      	lsrs	r3, r3, #1
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	f003 0307 	and.w	r3, r3, #7
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80104b2:	4313      	orrs	r3, r2
 80104b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80104bc:	60da      	str	r2, [r3, #12]
 80104be:	e0b9      	b.n	8010634 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80104c0:	2301      	movs	r3, #1
 80104c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80104c6:	e0b5      	b.n	8010634 <UART_SetConfig+0xa94>
 80104c8:	03d09000 	.word	0x03d09000
 80104cc:	003d0900 	.word	0x003d0900
 80104d0:	080161c8 	.word	0x080161c8
 80104d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80104d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80104dc:	2b20      	cmp	r3, #32
 80104de:	dc49      	bgt.n	8010574 <UART_SetConfig+0x9d4>
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	db7c      	blt.n	80105de <UART_SetConfig+0xa3e>
 80104e4:	2b20      	cmp	r3, #32
 80104e6:	d87a      	bhi.n	80105de <UART_SetConfig+0xa3e>
 80104e8:	a201      	add	r2, pc, #4	; (adr r2, 80104f0 <UART_SetConfig+0x950>)
 80104ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104ee:	bf00      	nop
 80104f0:	0801057b 	.word	0x0801057b
 80104f4:	08010583 	.word	0x08010583
 80104f8:	080105df 	.word	0x080105df
 80104fc:	080105df 	.word	0x080105df
 8010500:	0801058b 	.word	0x0801058b
 8010504:	080105df 	.word	0x080105df
 8010508:	080105df 	.word	0x080105df
 801050c:	080105df 	.word	0x080105df
 8010510:	0801059b 	.word	0x0801059b
 8010514:	080105df 	.word	0x080105df
 8010518:	080105df 	.word	0x080105df
 801051c:	080105df 	.word	0x080105df
 8010520:	080105df 	.word	0x080105df
 8010524:	080105df 	.word	0x080105df
 8010528:	080105df 	.word	0x080105df
 801052c:	080105df 	.word	0x080105df
 8010530:	080105ab 	.word	0x080105ab
 8010534:	080105df 	.word	0x080105df
 8010538:	080105df 	.word	0x080105df
 801053c:	080105df 	.word	0x080105df
 8010540:	080105df 	.word	0x080105df
 8010544:	080105df 	.word	0x080105df
 8010548:	080105df 	.word	0x080105df
 801054c:	080105df 	.word	0x080105df
 8010550:	080105df 	.word	0x080105df
 8010554:	080105df 	.word	0x080105df
 8010558:	080105df 	.word	0x080105df
 801055c:	080105df 	.word	0x080105df
 8010560:	080105df 	.word	0x080105df
 8010564:	080105df 	.word	0x080105df
 8010568:	080105df 	.word	0x080105df
 801056c:	080105df 	.word	0x080105df
 8010570:	080105d1 	.word	0x080105d1
 8010574:	2b40      	cmp	r3, #64	; 0x40
 8010576:	d02e      	beq.n	80105d6 <UART_SetConfig+0xa36>
 8010578:	e031      	b.n	80105de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801057a:	f7f9 fbeb 	bl	8009d54 <HAL_RCC_GetPCLK1Freq>
 801057e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010580:	e033      	b.n	80105ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010582:	f7f9 fbfd 	bl	8009d80 <HAL_RCC_GetPCLK2Freq>
 8010586:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010588:	e02f      	b.n	80105ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801058a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801058e:	4618      	mov	r0, r3
 8010590:	f7fb fbee 	bl	800bd70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010598:	e027      	b.n	80105ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801059a:	f107 0318 	add.w	r3, r7, #24
 801059e:	4618      	mov	r0, r3
 80105a0:	f7fb fd3a 	bl	800c018 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105a8:	e01f      	b.n	80105ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80105aa:	4b2d      	ldr	r3, [pc, #180]	; (8010660 <UART_SetConfig+0xac0>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	f003 0320 	and.w	r3, r3, #32
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d009      	beq.n	80105ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80105b6:	4b2a      	ldr	r3, [pc, #168]	; (8010660 <UART_SetConfig+0xac0>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	08db      	lsrs	r3, r3, #3
 80105bc:	f003 0303 	and.w	r3, r3, #3
 80105c0:	4a28      	ldr	r2, [pc, #160]	; (8010664 <UART_SetConfig+0xac4>)
 80105c2:	fa22 f303 	lsr.w	r3, r2, r3
 80105c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80105c8:	e00f      	b.n	80105ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80105ca:	4b26      	ldr	r3, [pc, #152]	; (8010664 <UART_SetConfig+0xac4>)
 80105cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105ce:	e00c      	b.n	80105ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80105d0:	4b25      	ldr	r3, [pc, #148]	; (8010668 <UART_SetConfig+0xac8>)
 80105d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105d4:	e009      	b.n	80105ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80105d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80105da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105dc:	e005      	b.n	80105ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80105de:	2300      	movs	r3, #0
 80105e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80105e2:	2301      	movs	r3, #1
 80105e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80105e8:	bf00      	nop
    }

    if (pclk != 0U)
 80105ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d021      	beq.n	8010634 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f4:	4a1d      	ldr	r2, [pc, #116]	; (801066c <UART_SetConfig+0xacc>)
 80105f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105fa:	461a      	mov	r2, r3
 80105fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	085b      	lsrs	r3, r3, #1
 8010608:	441a      	add	r2, r3
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010612:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010616:	2b0f      	cmp	r3, #15
 8010618:	d909      	bls.n	801062e <UART_SetConfig+0xa8e>
 801061a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010620:	d205      	bcs.n	801062e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010624:	b29a      	uxth	r2, r3
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	60da      	str	r2, [r3, #12]
 801062c:	e002      	b.n	8010634 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801062e:	2301      	movs	r3, #1
 8010630:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	2201      	movs	r2, #1
 8010638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	2201      	movs	r2, #1
 8010640:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	2200      	movs	r2, #0
 8010648:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	2200      	movs	r2, #0
 801064e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010650:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010654:	4618      	mov	r0, r3
 8010656:	3748      	adds	r7, #72	; 0x48
 8010658:	46bd      	mov	sp, r7
 801065a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801065e:	bf00      	nop
 8010660:	58024400 	.word	0x58024400
 8010664:	03d09000 	.word	0x03d09000
 8010668:	003d0900 	.word	0x003d0900
 801066c:	080161c8 	.word	0x080161c8

08010670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801067c:	f003 0308 	and.w	r3, r3, #8
 8010680:	2b00      	cmp	r3, #0
 8010682:	d00a      	beq.n	801069a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	430a      	orrs	r2, r1
 8010698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801069e:	f003 0301 	and.w	r3, r3, #1
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d00a      	beq.n	80106bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	430a      	orrs	r2, r1
 80106ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106c0:	f003 0302 	and.w	r3, r3, #2
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d00a      	beq.n	80106de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	685b      	ldr	r3, [r3, #4]
 80106ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	430a      	orrs	r2, r1
 80106dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106e2:	f003 0304 	and.w	r3, r3, #4
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d00a      	beq.n	8010700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	430a      	orrs	r2, r1
 80106fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010704:	f003 0310 	and.w	r3, r3, #16
 8010708:	2b00      	cmp	r3, #0
 801070a:	d00a      	beq.n	8010722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	430a      	orrs	r2, r1
 8010720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010726:	f003 0320 	and.w	r3, r3, #32
 801072a:	2b00      	cmp	r3, #0
 801072c:	d00a      	beq.n	8010744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	689b      	ldr	r3, [r3, #8]
 8010734:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	430a      	orrs	r2, r1
 8010742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801074c:	2b00      	cmp	r3, #0
 801074e:	d01a      	beq.n	8010786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	430a      	orrs	r2, r1
 8010764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801076a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801076e:	d10a      	bne.n	8010786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	430a      	orrs	r2, r1
 8010784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00a      	beq.n	80107a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	430a      	orrs	r2, r1
 80107a6:	605a      	str	r2, [r3, #4]
  }
}
 80107a8:	bf00      	nop
 80107aa:	370c      	adds	r7, #12
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr

080107b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b098      	sub	sp, #96	; 0x60
 80107b8:	af02      	add	r7, sp, #8
 80107ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2200      	movs	r2, #0
 80107c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80107c4:	f7f3 f828 	bl	8003818 <HAL_GetTick>
 80107c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	f003 0308 	and.w	r3, r3, #8
 80107d4:	2b08      	cmp	r3, #8
 80107d6:	d12f      	bne.n	8010838 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80107d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80107dc:	9300      	str	r3, [sp, #0]
 80107de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107e0:	2200      	movs	r2, #0
 80107e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 f88e 	bl	8010908 <UART_WaitOnFlagUntilTimeout>
 80107ec:	4603      	mov	r3, r0
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d022      	beq.n	8010838 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fa:	e853 3f00 	ldrex	r3, [r3]
 80107fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010806:	653b      	str	r3, [r7, #80]	; 0x50
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	461a      	mov	r2, r3
 801080e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010810:	647b      	str	r3, [r7, #68]	; 0x44
 8010812:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010814:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010818:	e841 2300 	strex	r3, r2, [r1]
 801081c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801081e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010820:	2b00      	cmp	r3, #0
 8010822:	d1e6      	bne.n	80107f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2220      	movs	r2, #32
 8010828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2200      	movs	r2, #0
 8010830:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010834:	2303      	movs	r3, #3
 8010836:	e063      	b.n	8010900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f003 0304 	and.w	r3, r3, #4
 8010842:	2b04      	cmp	r3, #4
 8010844:	d149      	bne.n	80108da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010846:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801084a:	9300      	str	r3, [sp, #0]
 801084c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801084e:	2200      	movs	r2, #0
 8010850:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f000 f857 	bl	8010908 <UART_WaitOnFlagUntilTimeout>
 801085a:	4603      	mov	r3, r0
 801085c:	2b00      	cmp	r3, #0
 801085e:	d03c      	beq.n	80108da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010868:	e853 3f00 	ldrex	r3, [r3]
 801086c:	623b      	str	r3, [r7, #32]
   return(result);
 801086e:	6a3b      	ldr	r3, [r7, #32]
 8010870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010874:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	461a      	mov	r2, r3
 801087c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801087e:	633b      	str	r3, [r7, #48]	; 0x30
 8010880:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010886:	e841 2300 	strex	r3, r2, [r1]
 801088a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088e:	2b00      	cmp	r3, #0
 8010890:	d1e6      	bne.n	8010860 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	3308      	adds	r3, #8
 8010898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	e853 3f00 	ldrex	r3, [r3]
 80108a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	f023 0301 	bic.w	r3, r3, #1
 80108a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	3308      	adds	r3, #8
 80108b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108b2:	61fa      	str	r2, [r7, #28]
 80108b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b6:	69b9      	ldr	r1, [r7, #24]
 80108b8:	69fa      	ldr	r2, [r7, #28]
 80108ba:	e841 2300 	strex	r3, r2, [r1]
 80108be:	617b      	str	r3, [r7, #20]
   return(result);
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d1e5      	bne.n	8010892 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2220      	movs	r2, #32
 80108ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2200      	movs	r2, #0
 80108d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80108d6:	2303      	movs	r3, #3
 80108d8:	e012      	b.n	8010900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2220      	movs	r2, #32
 80108de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2220      	movs	r2, #32
 80108e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2200      	movs	r2, #0
 80108f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80108fe:	2300      	movs	r3, #0
}
 8010900:	4618      	mov	r0, r3
 8010902:	3758      	adds	r7, #88	; 0x58
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}

08010908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b084      	sub	sp, #16
 801090c:	af00      	add	r7, sp, #0
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	60b9      	str	r1, [r7, #8]
 8010912:	603b      	str	r3, [r7, #0]
 8010914:	4613      	mov	r3, r2
 8010916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010918:	e04f      	b.n	80109ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801091a:	69bb      	ldr	r3, [r7, #24]
 801091c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010920:	d04b      	beq.n	80109ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010922:	f7f2 ff79 	bl	8003818 <HAL_GetTick>
 8010926:	4602      	mov	r2, r0
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	69ba      	ldr	r2, [r7, #24]
 801092e:	429a      	cmp	r2, r3
 8010930:	d302      	bcc.n	8010938 <UART_WaitOnFlagUntilTimeout+0x30>
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d101      	bne.n	801093c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010938:	2303      	movs	r3, #3
 801093a:	e04e      	b.n	80109da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f003 0304 	and.w	r3, r3, #4
 8010946:	2b00      	cmp	r3, #0
 8010948:	d037      	beq.n	80109ba <UART_WaitOnFlagUntilTimeout+0xb2>
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	2b80      	cmp	r3, #128	; 0x80
 801094e:	d034      	beq.n	80109ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	2b40      	cmp	r3, #64	; 0x40
 8010954:	d031      	beq.n	80109ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	69db      	ldr	r3, [r3, #28]
 801095c:	f003 0308 	and.w	r3, r3, #8
 8010960:	2b08      	cmp	r3, #8
 8010962:	d110      	bne.n	8010986 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2208      	movs	r2, #8
 801096a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801096c:	68f8      	ldr	r0, [r7, #12]
 801096e:	f000 f99d 	bl	8010cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2208      	movs	r2, #8
 8010976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2200      	movs	r2, #0
 801097e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8010982:	2301      	movs	r3, #1
 8010984:	e029      	b.n	80109da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	69db      	ldr	r3, [r3, #28]
 801098c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010994:	d111      	bne.n	80109ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801099e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80109a0:	68f8      	ldr	r0, [r7, #12]
 80109a2:	f000 f983 	bl	8010cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2220      	movs	r2, #32
 80109aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	2200      	movs	r2, #0
 80109b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80109b6:	2303      	movs	r3, #3
 80109b8:	e00f      	b.n	80109da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	69da      	ldr	r2, [r3, #28]
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	4013      	ands	r3, r2
 80109c4:	68ba      	ldr	r2, [r7, #8]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	bf0c      	ite	eq
 80109ca:	2301      	moveq	r3, #1
 80109cc:	2300      	movne	r3, #0
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	461a      	mov	r2, r3
 80109d2:	79fb      	ldrb	r3, [r7, #7]
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d0a0      	beq.n	801091a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80109d8:	2300      	movs	r3, #0
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
	...

080109e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b0a3      	sub	sp, #140	; 0x8c
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	4613      	mov	r3, r2
 80109f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	68ba      	ldr	r2, [r7, #8]
 80109f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	88fa      	ldrh	r2, [r7, #6]
 80109fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	88fa      	ldrh	r2, [r7, #6]
 8010a04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	689b      	ldr	r3, [r3, #8]
 8010a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a16:	d10e      	bne.n	8010a36 <UART_Start_Receive_IT+0x52>
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	691b      	ldr	r3, [r3, #16]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d105      	bne.n	8010a2c <UART_Start_Receive_IT+0x48>
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010a26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010a2a:	e02d      	b.n	8010a88 <UART_Start_Receive_IT+0xa4>
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	22ff      	movs	r2, #255	; 0xff
 8010a30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010a34:	e028      	b.n	8010a88 <UART_Start_Receive_IT+0xa4>
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	689b      	ldr	r3, [r3, #8]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d10d      	bne.n	8010a5a <UART_Start_Receive_IT+0x76>
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	691b      	ldr	r3, [r3, #16]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d104      	bne.n	8010a50 <UART_Start_Receive_IT+0x6c>
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	22ff      	movs	r2, #255	; 0xff
 8010a4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010a4e:	e01b      	b.n	8010a88 <UART_Start_Receive_IT+0xa4>
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	227f      	movs	r2, #127	; 0x7f
 8010a54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010a58:	e016      	b.n	8010a88 <UART_Start_Receive_IT+0xa4>
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	689b      	ldr	r3, [r3, #8]
 8010a5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010a62:	d10d      	bne.n	8010a80 <UART_Start_Receive_IT+0x9c>
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	691b      	ldr	r3, [r3, #16]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d104      	bne.n	8010a76 <UART_Start_Receive_IT+0x92>
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	227f      	movs	r2, #127	; 0x7f
 8010a70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010a74:	e008      	b.n	8010a88 <UART_Start_Receive_IT+0xa4>
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	223f      	movs	r2, #63	; 0x3f
 8010a7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010a7e:	e003      	b.n	8010a88 <UART_Start_Receive_IT+0xa4>
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	2200      	movs	r2, #0
 8010a84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2222      	movs	r2, #34	; 0x22
 8010a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	3308      	adds	r3, #8
 8010a9e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010aa2:	e853 3f00 	ldrex	r3, [r3]
 8010aa6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010aa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010aaa:	f043 0301 	orr.w	r3, r3, #1
 8010aae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	3308      	adds	r3, #8
 8010ab8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010abc:	673a      	str	r2, [r7, #112]	; 0x70
 8010abe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010ac2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010ac4:	e841 2300 	strex	r3, r2, [r1]
 8010ac8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8010aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d1e3      	bne.n	8010a98 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ad8:	d14f      	bne.n	8010b7a <UART_Start_Receive_IT+0x196>
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010ae0:	88fa      	ldrh	r2, [r7, #6]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d349      	bcc.n	8010b7a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010aee:	d107      	bne.n	8010b00 <UART_Start_Receive_IT+0x11c>
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	691b      	ldr	r3, [r3, #16]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d103      	bne.n	8010b00 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	4a47      	ldr	r2, [pc, #284]	; (8010c18 <UART_Start_Receive_IT+0x234>)
 8010afc:	675a      	str	r2, [r3, #116]	; 0x74
 8010afe:	e002      	b.n	8010b06 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	4a46      	ldr	r2, [pc, #280]	; (8010c1c <UART_Start_Receive_IT+0x238>)
 8010b04:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	691b      	ldr	r3, [r3, #16]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d01a      	beq.n	8010b44 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b16:	e853 3f00 	ldrex	r3, [r3]
 8010b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	461a      	mov	r2, r3
 8010b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010b30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010b32:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010b36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010b38:	e841 2300 	strex	r3, r2, [r1]
 8010b3c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d1e4      	bne.n	8010b0e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	3308      	adds	r3, #8
 8010b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b4e:	e853 3f00 	ldrex	r3, [r3]
 8010b52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	3308      	adds	r3, #8
 8010b62:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010b64:	64ba      	str	r2, [r7, #72]	; 0x48
 8010b66:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b6c:	e841 2300 	strex	r3, r2, [r1]
 8010b70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d1e5      	bne.n	8010b44 <UART_Start_Receive_IT+0x160>
 8010b78:	e046      	b.n	8010c08 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	689b      	ldr	r3, [r3, #8]
 8010b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b82:	d107      	bne.n	8010b94 <UART_Start_Receive_IT+0x1b0>
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	691b      	ldr	r3, [r3, #16]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d103      	bne.n	8010b94 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	4a24      	ldr	r2, [pc, #144]	; (8010c20 <UART_Start_Receive_IT+0x23c>)
 8010b90:	675a      	str	r2, [r3, #116]	; 0x74
 8010b92:	e002      	b.n	8010b9a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	4a23      	ldr	r2, [pc, #140]	; (8010c24 <UART_Start_Receive_IT+0x240>)
 8010b98:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	691b      	ldr	r3, [r3, #16]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d019      	beq.n	8010bd6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010baa:	e853 3f00 	ldrex	r3, [r3]
 8010bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010bb6:	677b      	str	r3, [r7, #116]	; 0x74
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8010bc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bc8:	e841 2300 	strex	r3, r2, [r1]
 8010bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d1e6      	bne.n	8010ba2 <UART_Start_Receive_IT+0x1be>
 8010bd4:	e018      	b.n	8010c08 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	e853 3f00 	ldrex	r3, [r3]
 8010be2:	613b      	str	r3, [r7, #16]
   return(result);
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	f043 0320 	orr.w	r3, r3, #32
 8010bea:	67bb      	str	r3, [r7, #120]	; 0x78
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010bf4:	623b      	str	r3, [r7, #32]
 8010bf6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf8:	69f9      	ldr	r1, [r7, #28]
 8010bfa:	6a3a      	ldr	r2, [r7, #32]
 8010bfc:	e841 2300 	strex	r3, r2, [r1]
 8010c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d1e6      	bne.n	8010bd6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010c08:	2300      	movs	r3, #0
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	378c      	adds	r7, #140	; 0x8c
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr
 8010c16:	bf00      	nop
 8010c18:	080115fd 	.word	0x080115fd
 8010c1c:	0801129d 	.word	0x0801129d
 8010c20:	080110e5 	.word	0x080110e5
 8010c24:	08010f2d 	.word	0x08010f2d

08010c28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b08f      	sub	sp, #60	; 0x3c
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c36:	6a3b      	ldr	r3, [r7, #32]
 8010c38:	e853 3f00 	ldrex	r3, [r3]
 8010c3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010c44:	637b      	str	r3, [r7, #52]	; 0x34
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c50:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c56:	e841 2300 	strex	r3, r2, [r1]
 8010c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d1e6      	bne.n	8010c30 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	3308      	adds	r3, #8
 8010c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	e853 3f00 	ldrex	r3, [r3]
 8010c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010c78:	633b      	str	r3, [r7, #48]	; 0x30
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	3308      	adds	r3, #8
 8010c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c82:	61ba      	str	r2, [r7, #24]
 8010c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c86:	6979      	ldr	r1, [r7, #20]
 8010c88:	69ba      	ldr	r2, [r7, #24]
 8010c8a:	e841 2300 	strex	r3, r2, [r1]
 8010c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d1e5      	bne.n	8010c62 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2220      	movs	r2, #32
 8010c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8010c9e:	bf00      	nop
 8010ca0:	373c      	adds	r7, #60	; 0x3c
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr
	...

08010cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b095      	sub	sp, #84	; 0x54
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cbc:	e853 3f00 	ldrex	r3, [r3]
 8010cc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	461a      	mov	r2, r3
 8010cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cd2:	643b      	str	r3, [r7, #64]	; 0x40
 8010cd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010cd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010cda:	e841 2300 	strex	r3, r2, [r1]
 8010cde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d1e6      	bne.n	8010cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	3308      	adds	r3, #8
 8010cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cee:	6a3b      	ldr	r3, [r7, #32]
 8010cf0:	e853 3f00 	ldrex	r3, [r3]
 8010cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8010cf6:	69fa      	ldr	r2, [r7, #28]
 8010cf8:	4b1e      	ldr	r3, [pc, #120]	; (8010d74 <UART_EndRxTransfer+0xc8>)
 8010cfa:	4013      	ands	r3, r2
 8010cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	3308      	adds	r3, #8
 8010d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d0e:	e841 2300 	strex	r3, r2, [r1]
 8010d12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d1e5      	bne.n	8010ce6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	d118      	bne.n	8010d54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	e853 3f00 	ldrex	r3, [r3]
 8010d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	f023 0310 	bic.w	r3, r3, #16
 8010d36:	647b      	str	r3, [r7, #68]	; 0x44
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d40:	61bb      	str	r3, [r7, #24]
 8010d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d44:	6979      	ldr	r1, [r7, #20]
 8010d46:	69ba      	ldr	r2, [r7, #24]
 8010d48:	e841 2300 	strex	r3, r2, [r1]
 8010d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d1e6      	bne.n	8010d22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2220      	movs	r2, #32
 8010d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2200      	movs	r2, #0
 8010d66:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010d68:	bf00      	nop
 8010d6a:	3754      	adds	r7, #84	; 0x54
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d72:	4770      	bx	lr
 8010d74:	effffffe 	.word	0xeffffffe

08010d78 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b090      	sub	sp, #64	; 0x40
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d84:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	69db      	ldr	r3, [r3, #28]
 8010d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d8e:	d037      	beq.n	8010e00 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d92:	2200      	movs	r2, #0
 8010d94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	3308      	adds	r3, #8
 8010d9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da2:	e853 3f00 	ldrex	r3, [r3]
 8010da6:	623b      	str	r3, [r7, #32]
   return(result);
 8010da8:	6a3b      	ldr	r3, [r7, #32]
 8010daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8010db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	3308      	adds	r3, #8
 8010db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010db8:	633a      	str	r2, [r7, #48]	; 0x30
 8010dba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dc0:	e841 2300 	strex	r3, r2, [r1]
 8010dc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d1e5      	bne.n	8010d98 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	e853 3f00 	ldrex	r3, [r3]
 8010dd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010de0:	637b      	str	r3, [r7, #52]	; 0x34
 8010de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	461a      	mov	r2, r3
 8010de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dea:	61fb      	str	r3, [r7, #28]
 8010dec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dee:	69b9      	ldr	r1, [r7, #24]
 8010df0:	69fa      	ldr	r2, [r7, #28]
 8010df2:	e841 2300 	strex	r3, r2, [r1]
 8010df6:	617b      	str	r3, [r7, #20]
   return(result);
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d1e6      	bne.n	8010dcc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010dfe:	e002      	b.n	8010e06 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010e00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e02:	f7f0 fef9 	bl	8001bf8 <HAL_UART_TxCpltCallback>
}
 8010e06:	bf00      	nop
 8010e08:	3740      	adds	r7, #64	; 0x40
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}

08010e0e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b084      	sub	sp, #16
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e1a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010e1c:	68f8      	ldr	r0, [r7, #12]
 8010e1e:	f7fe fe9f 	bl	800fb60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e22:	bf00      	nop
 8010e24:	3710      	adds	r7, #16
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}

08010e2a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	b086      	sub	sp, #24
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e36:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e46:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	689b      	ldr	r3, [r3, #8]
 8010e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e52:	2b80      	cmp	r3, #128	; 0x80
 8010e54:	d109      	bne.n	8010e6a <UART_DMAError+0x40>
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	2b21      	cmp	r3, #33	; 0x21
 8010e5a:	d106      	bne.n	8010e6a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010e64:	6978      	ldr	r0, [r7, #20]
 8010e66:	f7ff fedf 	bl	8010c28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	689b      	ldr	r3, [r3, #8]
 8010e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e74:	2b40      	cmp	r3, #64	; 0x40
 8010e76:	d109      	bne.n	8010e8c <UART_DMAError+0x62>
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2b22      	cmp	r3, #34	; 0x22
 8010e7c:	d106      	bne.n	8010e8c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	2200      	movs	r2, #0
 8010e82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010e86:	6978      	ldr	r0, [r7, #20]
 8010e88:	f7ff ff10 	bl	8010cac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e92:	f043 0210 	orr.w	r2, r3, #16
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e9c:	6978      	ldr	r0, [r7, #20]
 8010e9e:	f7fe fe69 	bl	800fb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ea2:	bf00      	nop
 8010ea4:	3718      	adds	r7, #24
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010eaa:	b580      	push	{r7, lr}
 8010eac:	b084      	sub	sp, #16
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2200      	movs	r2, #0
 8010ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010ec8:	68f8      	ldr	r0, [r7, #12]
 8010eca:	f7fe fe53 	bl	800fb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ece:	bf00      	nop
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b088      	sub	sp, #32
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	e853 3f00 	ldrex	r3, [r3]
 8010eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ef2:	61fb      	str	r3, [r7, #28]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	461a      	mov	r2, r3
 8010efa:	69fb      	ldr	r3, [r7, #28]
 8010efc:	61bb      	str	r3, [r7, #24]
 8010efe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f00:	6979      	ldr	r1, [r7, #20]
 8010f02:	69ba      	ldr	r2, [r7, #24]
 8010f04:	e841 2300 	strex	r3, r2, [r1]
 8010f08:	613b      	str	r3, [r7, #16]
   return(result);
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d1e6      	bne.n	8010ede <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2220      	movs	r2, #32
 8010f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f7f0 fe6a 	bl	8001bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f24:	bf00      	nop
 8010f26:	3720      	adds	r7, #32
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b09c      	sub	sp, #112	; 0x70
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f3a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f44:	2b22      	cmp	r3, #34	; 0x22
 8010f46:	f040 80be 	bne.w	80110c6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010f54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010f58:	b2d9      	uxtb	r1, r3
 8010f5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010f5e:	b2da      	uxtb	r2, r3
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f64:	400a      	ands	r2, r1
 8010f66:	b2d2      	uxtb	r2, r2
 8010f68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f6e:	1c5a      	adds	r2, r3, #1
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	3b01      	subs	r3, #1
 8010f7e:	b29a      	uxth	r2, r3
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	f040 80a1 	bne.w	80110d6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f9c:	e853 3f00 	ldrex	r3, [r3]
 8010fa0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010fa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	461a      	mov	r2, r3
 8010fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010fb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8010fb4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010fb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010fba:	e841 2300 	strex	r3, r2, [r1]
 8010fbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d1e6      	bne.n	8010f94 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	3308      	adds	r3, #8
 8010fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd0:	e853 3f00 	ldrex	r3, [r3]
 8010fd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd8:	f023 0301 	bic.w	r3, r3, #1
 8010fdc:	667b      	str	r3, [r7, #100]	; 0x64
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	3308      	adds	r3, #8
 8010fe4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010fe6:	647a      	str	r2, [r7, #68]	; 0x44
 8010fe8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fee:	e841 2300 	strex	r3, r2, [r1]
 8010ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d1e5      	bne.n	8010fc6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2220      	movs	r2, #32
 8010ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2200      	movs	r2, #0
 8011006:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2200      	movs	r2, #0
 801100c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	4a33      	ldr	r2, [pc, #204]	; (80110e0 <UART_RxISR_8BIT+0x1b4>)
 8011014:	4293      	cmp	r3, r2
 8011016:	d01f      	beq.n	8011058 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011022:	2b00      	cmp	r3, #0
 8011024:	d018      	beq.n	8011058 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102e:	e853 3f00 	ldrex	r3, [r3]
 8011032:	623b      	str	r3, [r7, #32]
   return(result);
 8011034:	6a3b      	ldr	r3, [r7, #32]
 8011036:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801103a:	663b      	str	r3, [r7, #96]	; 0x60
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	461a      	mov	r2, r3
 8011042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011044:	633b      	str	r3, [r7, #48]	; 0x30
 8011046:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801104a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801104c:	e841 2300 	strex	r3, r2, [r1]
 8011050:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011054:	2b00      	cmp	r3, #0
 8011056:	d1e6      	bne.n	8011026 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801105c:	2b01      	cmp	r3, #1
 801105e:	d12e      	bne.n	80110be <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2200      	movs	r2, #0
 8011064:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	e853 3f00 	ldrex	r3, [r3]
 8011072:	60fb      	str	r3, [r7, #12]
   return(result);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f023 0310 	bic.w	r3, r3, #16
 801107a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	461a      	mov	r2, r3
 8011082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011084:	61fb      	str	r3, [r7, #28]
 8011086:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011088:	69b9      	ldr	r1, [r7, #24]
 801108a:	69fa      	ldr	r2, [r7, #28]
 801108c:	e841 2300 	strex	r3, r2, [r1]
 8011090:	617b      	str	r3, [r7, #20]
   return(result);
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d1e6      	bne.n	8011066 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	69db      	ldr	r3, [r3, #28]
 801109e:	f003 0310 	and.w	r3, r3, #16
 80110a2:	2b10      	cmp	r3, #16
 80110a4:	d103      	bne.n	80110ae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	2210      	movs	r2, #16
 80110ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80110b4:	4619      	mov	r1, r3
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f7fe fd66 	bl	800fb88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80110bc:	e00b      	b.n	80110d6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f7f0 f956 	bl	8001370 <HAL_UART_RxCpltCallback>
}
 80110c4:	e007      	b.n	80110d6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	699a      	ldr	r2, [r3, #24]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	f042 0208 	orr.w	r2, r2, #8
 80110d4:	619a      	str	r2, [r3, #24]
}
 80110d6:	bf00      	nop
 80110d8:	3770      	adds	r7, #112	; 0x70
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	58000c00 	.word	0x58000c00

080110e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b09c      	sub	sp, #112	; 0x70
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110fc:	2b22      	cmp	r3, #34	; 0x22
 80110fe:	f040 80be 	bne.w	801127e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011108:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011110:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011112:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011116:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801111a:	4013      	ands	r3, r2
 801111c:	b29a      	uxth	r2, r3
 801111e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011120:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011126:	1c9a      	adds	r2, r3, #2
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011132:	b29b      	uxth	r3, r3
 8011134:	3b01      	subs	r3, #1
 8011136:	b29a      	uxth	r2, r3
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011144:	b29b      	uxth	r3, r3
 8011146:	2b00      	cmp	r3, #0
 8011148:	f040 80a1 	bne.w	801128e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011154:	e853 3f00 	ldrex	r3, [r3]
 8011158:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801115a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801115c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011160:	667b      	str	r3, [r7, #100]	; 0x64
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	461a      	mov	r2, r3
 8011168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801116a:	657b      	str	r3, [r7, #84]	; 0x54
 801116c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801116e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011170:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011172:	e841 2300 	strex	r3, r2, [r1]
 8011176:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801117a:	2b00      	cmp	r3, #0
 801117c:	d1e6      	bne.n	801114c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	3308      	adds	r3, #8
 8011184:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011188:	e853 3f00 	ldrex	r3, [r3]
 801118c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801118e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011190:	f023 0301 	bic.w	r3, r3, #1
 8011194:	663b      	str	r3, [r7, #96]	; 0x60
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	3308      	adds	r3, #8
 801119c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801119e:	643a      	str	r2, [r7, #64]	; 0x40
 80111a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80111a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80111a6:	e841 2300 	strex	r3, r2, [r1]
 80111aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80111ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d1e5      	bne.n	801117e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2220      	movs	r2, #32
 80111b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2200      	movs	r2, #0
 80111be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2200      	movs	r2, #0
 80111c4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	4a33      	ldr	r2, [pc, #204]	; (8011298 <UART_RxISR_16BIT+0x1b4>)
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d01f      	beq.n	8011210 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d018      	beq.n	8011210 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111e4:	6a3b      	ldr	r3, [r7, #32]
 80111e6:	e853 3f00 	ldrex	r3, [r3]
 80111ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80111f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	461a      	mov	r2, r3
 80111fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011204:	e841 2300 	strex	r3, r2, [r1]
 8011208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120c:	2b00      	cmp	r3, #0
 801120e:	d1e6      	bne.n	80111de <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011214:	2b01      	cmp	r3, #1
 8011216:	d12e      	bne.n	8011276 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2200      	movs	r2, #0
 801121c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	e853 3f00 	ldrex	r3, [r3]
 801122a:	60bb      	str	r3, [r7, #8]
   return(result);
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	f023 0310 	bic.w	r3, r3, #16
 8011232:	65bb      	str	r3, [r7, #88]	; 0x58
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	461a      	mov	r2, r3
 801123a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801123c:	61bb      	str	r3, [r7, #24]
 801123e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011240:	6979      	ldr	r1, [r7, #20]
 8011242:	69ba      	ldr	r2, [r7, #24]
 8011244:	e841 2300 	strex	r3, r2, [r1]
 8011248:	613b      	str	r3, [r7, #16]
   return(result);
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d1e6      	bne.n	801121e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	69db      	ldr	r3, [r3, #28]
 8011256:	f003 0310 	and.w	r3, r3, #16
 801125a:	2b10      	cmp	r3, #16
 801125c:	d103      	bne.n	8011266 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	2210      	movs	r2, #16
 8011264:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801126c:	4619      	mov	r1, r3
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f7fe fc8a 	bl	800fb88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011274:	e00b      	b.n	801128e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f7f0 f87a 	bl	8001370 <HAL_UART_RxCpltCallback>
}
 801127c:	e007      	b.n	801128e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	699a      	ldr	r2, [r3, #24]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	f042 0208 	orr.w	r2, r2, #8
 801128c:	619a      	str	r2, [r3, #24]
}
 801128e:	bf00      	nop
 8011290:	3770      	adds	r7, #112	; 0x70
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}
 8011296:	bf00      	nop
 8011298:	58000c00 	.word	0x58000c00

0801129c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b0ac      	sub	sp, #176	; 0xb0
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	69db      	ldr	r3, [r3, #28]
 80112b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	689b      	ldr	r3, [r3, #8]
 80112c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112d2:	2b22      	cmp	r3, #34	; 0x22
 80112d4:	f040 8180 	bne.w	80115d8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80112de:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80112e2:	e123      	b.n	801152c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112ea:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80112ee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80112f2:	b2d9      	uxtb	r1, r3
 80112f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80112f8:	b2da      	uxtb	r2, r3
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112fe:	400a      	ands	r2, r1
 8011300:	b2d2      	uxtb	r2, r2
 8011302:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011308:	1c5a      	adds	r2, r3, #1
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011314:	b29b      	uxth	r3, r3
 8011316:	3b01      	subs	r3, #1
 8011318:	b29a      	uxth	r2, r3
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	69db      	ldr	r3, [r3, #28]
 8011326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801132a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801132e:	f003 0307 	and.w	r3, r3, #7
 8011332:	2b00      	cmp	r3, #0
 8011334:	d053      	beq.n	80113de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801133a:	f003 0301 	and.w	r3, r3, #1
 801133e:	2b00      	cmp	r3, #0
 8011340:	d011      	beq.n	8011366 <UART_RxISR_8BIT_FIFOEN+0xca>
 8011342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801134a:	2b00      	cmp	r3, #0
 801134c:	d00b      	beq.n	8011366 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	2201      	movs	r2, #1
 8011354:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801135c:	f043 0201 	orr.w	r2, r3, #1
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801136a:	f003 0302 	and.w	r3, r3, #2
 801136e:	2b00      	cmp	r3, #0
 8011370:	d011      	beq.n	8011396 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011376:	f003 0301 	and.w	r3, r3, #1
 801137a:	2b00      	cmp	r3, #0
 801137c:	d00b      	beq.n	8011396 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	2202      	movs	r2, #2
 8011384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801138c:	f043 0204 	orr.w	r2, r3, #4
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801139a:	f003 0304 	and.w	r3, r3, #4
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d011      	beq.n	80113c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80113a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80113a6:	f003 0301 	and.w	r3, r3, #1
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d00b      	beq.n	80113c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2204      	movs	r2, #4
 80113b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113bc:	f043 0202 	orr.w	r2, r3, #2
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d006      	beq.n	80113de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f7fe fbcf 	bl	800fb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2200      	movs	r2, #0
 80113da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80113e4:	b29b      	uxth	r3, r3
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	f040 80a0 	bne.w	801152c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80113f4:	e853 3f00 	ldrex	r3, [r3]
 80113f8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80113fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	461a      	mov	r2, r3
 801140a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801140e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011410:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011412:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011414:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011416:	e841 2300 	strex	r3, r2, [r1]
 801141a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801141c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801141e:	2b00      	cmp	r3, #0
 8011420:	d1e4      	bne.n	80113ec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	3308      	adds	r3, #8
 8011428:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801142a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801142c:	e853 3f00 	ldrex	r3, [r3]
 8011430:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011432:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011434:	4b6e      	ldr	r3, [pc, #440]	; (80115f0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011436:	4013      	ands	r3, r2
 8011438:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	3308      	adds	r3, #8
 8011442:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011446:	66ba      	str	r2, [r7, #104]	; 0x68
 8011448:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801144a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801144c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801144e:	e841 2300 	strex	r3, r2, [r1]
 8011452:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011456:	2b00      	cmp	r3, #0
 8011458:	d1e3      	bne.n	8011422 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2220      	movs	r2, #32
 801145e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2200      	movs	r2, #0
 8011466:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2200      	movs	r2, #0
 801146c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	4a60      	ldr	r2, [pc, #384]	; (80115f4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011474:	4293      	cmp	r3, r2
 8011476:	d021      	beq.n	80114bc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011482:	2b00      	cmp	r3, #0
 8011484:	d01a      	beq.n	80114bc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801148c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801148e:	e853 3f00 	ldrex	r3, [r3]
 8011492:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011496:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801149a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	461a      	mov	r2, r3
 80114a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80114a8:	657b      	str	r3, [r7, #84]	; 0x54
 80114aa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80114ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80114b0:	e841 2300 	strex	r3, r2, [r1]
 80114b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80114b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d1e4      	bne.n	8011486 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d130      	bne.n	8011526 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2200      	movs	r2, #0
 80114c8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114d2:	e853 3f00 	ldrex	r3, [r3]
 80114d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80114d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114da:	f023 0310 	bic.w	r3, r3, #16
 80114de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	461a      	mov	r2, r3
 80114e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80114ec:	643b      	str	r3, [r7, #64]	; 0x40
 80114ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80114f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80114f4:	e841 2300 	strex	r3, r2, [r1]
 80114f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80114fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d1e4      	bne.n	80114ca <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	69db      	ldr	r3, [r3, #28]
 8011506:	f003 0310 	and.w	r3, r3, #16
 801150a:	2b10      	cmp	r3, #16
 801150c:	d103      	bne.n	8011516 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	2210      	movs	r2, #16
 8011514:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801151c:	4619      	mov	r1, r3
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f7fe fb32 	bl	800fb88 <HAL_UARTEx_RxEventCallback>
 8011524:	e002      	b.n	801152c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f7ef ff22 	bl	8001370 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801152c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011530:	2b00      	cmp	r3, #0
 8011532:	d006      	beq.n	8011542 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011538:	f003 0320 	and.w	r3, r3, #32
 801153c:	2b00      	cmp	r3, #0
 801153e:	f47f aed1 	bne.w	80112e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011548:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801154c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011550:	2b00      	cmp	r3, #0
 8011552:	d049      	beq.n	80115e8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801155a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801155e:	429a      	cmp	r2, r3
 8011560:	d242      	bcs.n	80115e8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	3308      	adds	r3, #8
 8011568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801156a:	6a3b      	ldr	r3, [r7, #32]
 801156c:	e853 3f00 	ldrex	r3, [r3]
 8011570:	61fb      	str	r3, [r7, #28]
   return(result);
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	3308      	adds	r3, #8
 8011582:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011586:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011588:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801158a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801158c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801158e:	e841 2300 	strex	r3, r2, [r1]
 8011592:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011596:	2b00      	cmp	r3, #0
 8011598:	d1e3      	bne.n	8011562 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	4a16      	ldr	r2, [pc, #88]	; (80115f8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801159e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	e853 3f00 	ldrex	r3, [r3]
 80115ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	f043 0320 	orr.w	r3, r3, #32
 80115b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	461a      	mov	r2, r3
 80115be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80115c2:	61bb      	str	r3, [r7, #24]
 80115c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115c6:	6979      	ldr	r1, [r7, #20]
 80115c8:	69ba      	ldr	r2, [r7, #24]
 80115ca:	e841 2300 	strex	r3, r2, [r1]
 80115ce:	613b      	str	r3, [r7, #16]
   return(result);
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d1e4      	bne.n	80115a0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80115d6:	e007      	b.n	80115e8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	699a      	ldr	r2, [r3, #24]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	f042 0208 	orr.w	r2, r2, #8
 80115e6:	619a      	str	r2, [r3, #24]
}
 80115e8:	bf00      	nop
 80115ea:	37b0      	adds	r7, #176	; 0xb0
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}
 80115f0:	effffffe 	.word	0xeffffffe
 80115f4:	58000c00 	.word	0x58000c00
 80115f8:	08010f2d 	.word	0x08010f2d

080115fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b0ae      	sub	sp, #184	; 0xb8
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801160a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	69db      	ldr	r3, [r3, #28]
 8011614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	689b      	ldr	r3, [r3, #8]
 8011628:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011632:	2b22      	cmp	r3, #34	; 0x22
 8011634:	f040 8184 	bne.w	8011940 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801163e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011642:	e127      	b.n	8011894 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801164a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011656:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801165a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801165e:	4013      	ands	r3, r2
 8011660:	b29a      	uxth	r2, r3
 8011662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011666:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801166c:	1c9a      	adds	r2, r3, #2
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011678:	b29b      	uxth	r3, r3
 801167a:	3b01      	subs	r3, #1
 801167c:	b29a      	uxth	r2, r3
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	69db      	ldr	r3, [r3, #28]
 801168a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801168e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011692:	f003 0307 	and.w	r3, r3, #7
 8011696:	2b00      	cmp	r3, #0
 8011698:	d053      	beq.n	8011742 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801169a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801169e:	f003 0301 	and.w	r3, r3, #1
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d011      	beq.n	80116ca <UART_RxISR_16BIT_FIFOEN+0xce>
 80116a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80116aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d00b      	beq.n	80116ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	2201      	movs	r2, #1
 80116b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116c0:	f043 0201 	orr.w	r2, r3, #1
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80116ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80116ce:	f003 0302 	and.w	r3, r3, #2
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d011      	beq.n	80116fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 80116d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80116da:	f003 0301 	and.w	r3, r3, #1
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d00b      	beq.n	80116fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	2202      	movs	r2, #2
 80116e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116f0:	f043 0204 	orr.w	r2, r3, #4
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80116fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80116fe:	f003 0304 	and.w	r3, r3, #4
 8011702:	2b00      	cmp	r3, #0
 8011704:	d011      	beq.n	801172a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011706:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801170a:	f003 0301 	and.w	r3, r3, #1
 801170e:	2b00      	cmp	r3, #0
 8011710:	d00b      	beq.n	801172a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	2204      	movs	r2, #4
 8011718:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011720:	f043 0202 	orr.w	r2, r3, #2
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011730:	2b00      	cmp	r3, #0
 8011732:	d006      	beq.n	8011742 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f7fe fa1d 	bl	800fb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2200      	movs	r2, #0
 801173e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011748:	b29b      	uxth	r3, r3
 801174a:	2b00      	cmp	r3, #0
 801174c:	f040 80a2 	bne.w	8011894 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011758:	e853 3f00 	ldrex	r3, [r3]
 801175c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801175e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	461a      	mov	r2, r3
 801176e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011772:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011776:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011778:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801177a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801177e:	e841 2300 	strex	r3, r2, [r1]
 8011782:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011786:	2b00      	cmp	r3, #0
 8011788:	d1e2      	bne.n	8011750 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	3308      	adds	r3, #8
 8011790:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011794:	e853 3f00 	ldrex	r3, [r3]
 8011798:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801179a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801179c:	4b6e      	ldr	r3, [pc, #440]	; (8011958 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801179e:	4013      	ands	r3, r2
 80117a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	3308      	adds	r3, #8
 80117aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80117ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80117b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80117b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80117b6:	e841 2300 	strex	r3, r2, [r1]
 80117ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80117bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d1e3      	bne.n	801178a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	2220      	movs	r2, #32
 80117c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2200      	movs	r2, #0
 80117ce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2200      	movs	r2, #0
 80117d4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	4a60      	ldr	r2, [pc, #384]	; (801195c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d021      	beq.n	8011824 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d01a      	beq.n	8011824 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117f6:	e853 3f00 	ldrex	r3, [r3]
 80117fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80117fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	461a      	mov	r2, r3
 801180c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011810:	65bb      	str	r3, [r7, #88]	; 0x58
 8011812:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011814:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011816:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011818:	e841 2300 	strex	r3, r2, [r1]
 801181c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801181e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011820:	2b00      	cmp	r3, #0
 8011822:	d1e4      	bne.n	80117ee <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011828:	2b01      	cmp	r3, #1
 801182a:	d130      	bne.n	801188e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2200      	movs	r2, #0
 8011830:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183a:	e853 3f00 	ldrex	r3, [r3]
 801183e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011842:	f023 0310 	bic.w	r3, r3, #16
 8011846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	461a      	mov	r2, r3
 8011850:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011854:	647b      	str	r3, [r7, #68]	; 0x44
 8011856:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011858:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801185a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801185c:	e841 2300 	strex	r3, r2, [r1]
 8011860:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011864:	2b00      	cmp	r3, #0
 8011866:	d1e4      	bne.n	8011832 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	69db      	ldr	r3, [r3, #28]
 801186e:	f003 0310 	and.w	r3, r3, #16
 8011872:	2b10      	cmp	r3, #16
 8011874:	d103      	bne.n	801187e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	2210      	movs	r2, #16
 801187c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011884:	4619      	mov	r1, r3
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f7fe f97e 	bl	800fb88 <HAL_UARTEx_RxEventCallback>
 801188c:	e002      	b.n	8011894 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f7ef fd6e 	bl	8001370 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011894:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8011898:	2b00      	cmp	r3, #0
 801189a:	d006      	beq.n	80118aa <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801189c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80118a0:	f003 0320 	and.w	r3, r3, #32
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f47f aecd 	bne.w	8011644 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80118b0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80118b4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d049      	beq.n	8011950 <UART_RxISR_16BIT_FIFOEN+0x354>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80118c2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d242      	bcs.n	8011950 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	3308      	adds	r3, #8
 80118d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d4:	e853 3f00 	ldrex	r3, [r3]
 80118d8:	623b      	str	r3, [r7, #32]
   return(result);
 80118da:	6a3b      	ldr	r3, [r7, #32]
 80118dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80118e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	3308      	adds	r3, #8
 80118ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80118ee:	633a      	str	r2, [r7, #48]	; 0x30
 80118f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118f6:	e841 2300 	strex	r3, r2, [r1]
 80118fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80118fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d1e3      	bne.n	80118ca <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	4a16      	ldr	r2, [pc, #88]	; (8011960 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011906:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	e853 3f00 	ldrex	r3, [r3]
 8011914:	60fb      	str	r3, [r7, #12]
   return(result);
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	f043 0320 	orr.w	r3, r3, #32
 801191c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	461a      	mov	r2, r3
 8011926:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801192a:	61fb      	str	r3, [r7, #28]
 801192c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801192e:	69b9      	ldr	r1, [r7, #24]
 8011930:	69fa      	ldr	r2, [r7, #28]
 8011932:	e841 2300 	strex	r3, r2, [r1]
 8011936:	617b      	str	r3, [r7, #20]
   return(result);
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d1e4      	bne.n	8011908 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801193e:	e007      	b.n	8011950 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	699a      	ldr	r2, [r3, #24]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	f042 0208 	orr.w	r2, r2, #8
 801194e:	619a      	str	r2, [r3, #24]
}
 8011950:	bf00      	nop
 8011952:	37b8      	adds	r7, #184	; 0xb8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}
 8011958:	effffffe 	.word	0xeffffffe
 801195c:	58000c00 	.word	0x58000c00
 8011960:	080110e5 	.word	0x080110e5

08011964 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011964:	b480      	push	{r7}
 8011966:	b083      	sub	sp, #12
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801196c:	bf00      	nop
 801196e:	370c      	adds	r7, #12
 8011970:	46bd      	mov	sp, r7
 8011972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011976:	4770      	bx	lr

08011978 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011978:	b480      	push	{r7}
 801197a:	b083      	sub	sp, #12
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011980:	bf00      	nop
 8011982:	370c      	adds	r7, #12
 8011984:	46bd      	mov	sp, r7
 8011986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198a:	4770      	bx	lr

0801198c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801198c:	b480      	push	{r7}
 801198e:	b083      	sub	sp, #12
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011994:	bf00      	nop
 8011996:	370c      	adds	r7, #12
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr

080119a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b085      	sub	sp, #20
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80119ae:	2b01      	cmp	r3, #1
 80119b0:	d101      	bne.n	80119b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80119b2:	2302      	movs	r3, #2
 80119b4:	e027      	b.n	8011a06 <HAL_UARTEx_DisableFifoMode+0x66>
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2201      	movs	r2, #1
 80119ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2224      	movs	r2, #36	; 0x24
 80119c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f022 0201 	bic.w	r2, r2, #1
 80119dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80119e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2200      	movs	r2, #0
 80119ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	68fa      	ldr	r2, [r7, #12]
 80119f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2220      	movs	r2, #32
 80119f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2200      	movs	r2, #0
 8011a00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a04:	2300      	movs	r3, #0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3714      	adds	r7, #20
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a10:	4770      	bx	lr

08011a12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011a12:	b580      	push	{r7, lr}
 8011a14:	b084      	sub	sp, #16
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
 8011a1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011a22:	2b01      	cmp	r3, #1
 8011a24:	d101      	bne.n	8011a2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011a26:	2302      	movs	r3, #2
 8011a28:	e02d      	b.n	8011a86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2201      	movs	r2, #1
 8011a2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2224      	movs	r2, #36	; 0x24
 8011a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	681a      	ldr	r2, [r3, #0]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	f022 0201 	bic.w	r2, r2, #1
 8011a50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	689b      	ldr	r3, [r3, #8]
 8011a58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	683a      	ldr	r2, [r7, #0]
 8011a62:	430a      	orrs	r2, r1
 8011a64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f000 f850 	bl	8011b0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	68fa      	ldr	r2, [r7, #12]
 8011a72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2220      	movs	r2, #32
 8011a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a84:	2300      	movs	r3, #0
}
 8011a86:	4618      	mov	r0, r3
 8011a88:	3710      	adds	r7, #16
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}

08011a8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011a8e:	b580      	push	{r7, lr}
 8011a90:	b084      	sub	sp, #16
 8011a92:	af00      	add	r7, sp, #0
 8011a94:	6078      	str	r0, [r7, #4]
 8011a96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011a9e:	2b01      	cmp	r3, #1
 8011aa0:	d101      	bne.n	8011aa6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011aa2:	2302      	movs	r3, #2
 8011aa4:	e02d      	b.n	8011b02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2201      	movs	r2, #1
 8011aaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2224      	movs	r2, #36	; 0x24
 8011ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	681a      	ldr	r2, [r3, #0]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	f022 0201 	bic.w	r2, r2, #1
 8011acc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	689b      	ldr	r3, [r3, #8]
 8011ad4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	683a      	ldr	r2, [r7, #0]
 8011ade:	430a      	orrs	r2, r1
 8011ae0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f000 f812 	bl	8011b0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	68fa      	ldr	r2, [r7, #12]
 8011aee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2220      	movs	r2, #32
 8011af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2200      	movs	r2, #0
 8011afc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b00:	2300      	movs	r3, #0
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3710      	adds	r7, #16
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
	...

08011b0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b085      	sub	sp, #20
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d108      	bne.n	8011b2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2201      	movs	r2, #1
 8011b20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2201      	movs	r2, #1
 8011b28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011b2c:	e031      	b.n	8011b92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011b2e:	2310      	movs	r3, #16
 8011b30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011b32:	2310      	movs	r3, #16
 8011b34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	689b      	ldr	r3, [r3, #8]
 8011b3c:	0e5b      	lsrs	r3, r3, #25
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	f003 0307 	and.w	r3, r3, #7
 8011b44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	689b      	ldr	r3, [r3, #8]
 8011b4c:	0f5b      	lsrs	r3, r3, #29
 8011b4e:	b2db      	uxtb	r3, r3
 8011b50:	f003 0307 	and.w	r3, r3, #7
 8011b54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b56:	7bbb      	ldrb	r3, [r7, #14]
 8011b58:	7b3a      	ldrb	r2, [r7, #12]
 8011b5a:	4911      	ldr	r1, [pc, #68]	; (8011ba0 <UARTEx_SetNbDataToProcess+0x94>)
 8011b5c:	5c8a      	ldrb	r2, [r1, r2]
 8011b5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011b62:	7b3a      	ldrb	r2, [r7, #12]
 8011b64:	490f      	ldr	r1, [pc, #60]	; (8011ba4 <UARTEx_SetNbDataToProcess+0x98>)
 8011b66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011b68:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b74:	7bfb      	ldrb	r3, [r7, #15]
 8011b76:	7b7a      	ldrb	r2, [r7, #13]
 8011b78:	4909      	ldr	r1, [pc, #36]	; (8011ba0 <UARTEx_SetNbDataToProcess+0x94>)
 8011b7a:	5c8a      	ldrb	r2, [r1, r2]
 8011b7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011b80:	7b7a      	ldrb	r2, [r7, #13]
 8011b82:	4908      	ldr	r1, [pc, #32]	; (8011ba4 <UARTEx_SetNbDataToProcess+0x98>)
 8011b84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011b86:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b8a:	b29a      	uxth	r2, r3
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011b92:	bf00      	nop
 8011b94:	3714      	adds	r7, #20
 8011b96:	46bd      	mov	sp, r7
 8011b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9c:	4770      	bx	lr
 8011b9e:	bf00      	nop
 8011ba0:	080161e0 	.word	0x080161e0
 8011ba4:	080161e8 	.word	0x080161e8

08011ba8 <__NVIC_SetPriority>:
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b083      	sub	sp, #12
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	4603      	mov	r3, r0
 8011bb0:	6039      	str	r1, [r7, #0]
 8011bb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	db0a      	blt.n	8011bd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	b2da      	uxtb	r2, r3
 8011bc0:	490c      	ldr	r1, [pc, #48]	; (8011bf4 <__NVIC_SetPriority+0x4c>)
 8011bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bc6:	0112      	lsls	r2, r2, #4
 8011bc8:	b2d2      	uxtb	r2, r2
 8011bca:	440b      	add	r3, r1
 8011bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011bd0:	e00a      	b.n	8011be8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	b2da      	uxtb	r2, r3
 8011bd6:	4908      	ldr	r1, [pc, #32]	; (8011bf8 <__NVIC_SetPriority+0x50>)
 8011bd8:	88fb      	ldrh	r3, [r7, #6]
 8011bda:	f003 030f 	and.w	r3, r3, #15
 8011bde:	3b04      	subs	r3, #4
 8011be0:	0112      	lsls	r2, r2, #4
 8011be2:	b2d2      	uxtb	r2, r2
 8011be4:	440b      	add	r3, r1
 8011be6:	761a      	strb	r2, [r3, #24]
}
 8011be8:	bf00      	nop
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr
 8011bf4:	e000e100 	.word	0xe000e100
 8011bf8:	e000ed00 	.word	0xe000ed00

08011bfc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011c00:	4b05      	ldr	r3, [pc, #20]	; (8011c18 <SysTick_Handler+0x1c>)
 8011c02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011c04:	f002 fae2 	bl	80141cc <xTaskGetSchedulerState>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	2b01      	cmp	r3, #1
 8011c0c:	d001      	beq.n	8011c12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011c0e:	f003 f903 	bl	8014e18 <xPortSysTickHandler>
  }
}
 8011c12:	bf00      	nop
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	e000e010 	.word	0xe000e010

08011c1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011c20:	2100      	movs	r1, #0
 8011c22:	f06f 0004 	mvn.w	r0, #4
 8011c26:	f7ff ffbf 	bl	8011ba8 <__NVIC_SetPriority>
#endif
}
 8011c2a:	bf00      	nop
 8011c2c:	bd80      	pop	{r7, pc}
	...

08011c30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011c30:	b480      	push	{r7}
 8011c32:	b083      	sub	sp, #12
 8011c34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c36:	f3ef 8305 	mrs	r3, IPSR
 8011c3a:	603b      	str	r3, [r7, #0]
  return(result);
 8011c3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d003      	beq.n	8011c4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011c42:	f06f 0305 	mvn.w	r3, #5
 8011c46:	607b      	str	r3, [r7, #4]
 8011c48:	e00c      	b.n	8011c64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011c4a:	4b0a      	ldr	r3, [pc, #40]	; (8011c74 <osKernelInitialize+0x44>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d105      	bne.n	8011c5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011c52:	4b08      	ldr	r3, [pc, #32]	; (8011c74 <osKernelInitialize+0x44>)
 8011c54:	2201      	movs	r2, #1
 8011c56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	607b      	str	r3, [r7, #4]
 8011c5c:	e002      	b.n	8011c64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011c64:	687b      	ldr	r3, [r7, #4]
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	370c      	adds	r7, #12
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c70:	4770      	bx	lr
 8011c72:	bf00      	nop
 8011c74:	24000cb0 	.word	0x24000cb0

08011c78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c7e:	f3ef 8305 	mrs	r3, IPSR
 8011c82:	603b      	str	r3, [r7, #0]
  return(result);
 8011c84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d003      	beq.n	8011c92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8011c8a:	f06f 0305 	mvn.w	r3, #5
 8011c8e:	607b      	str	r3, [r7, #4]
 8011c90:	e010      	b.n	8011cb4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011c92:	4b0b      	ldr	r3, [pc, #44]	; (8011cc0 <osKernelStart+0x48>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d109      	bne.n	8011cae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011c9a:	f7ff ffbf 	bl	8011c1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011c9e:	4b08      	ldr	r3, [pc, #32]	; (8011cc0 <osKernelStart+0x48>)
 8011ca0:	2202      	movs	r2, #2
 8011ca2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011ca4:	f001 fda4 	bl	80137f0 <vTaskStartScheduler>
      stat = osOK;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	607b      	str	r3, [r7, #4]
 8011cac:	e002      	b.n	8011cb4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011cb4:	687b      	ldr	r3, [r7, #4]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3708      	adds	r7, #8
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	24000cb0 	.word	0x24000cb0

08011cc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b08e      	sub	sp, #56	; 0x38
 8011cc8:	af04      	add	r7, sp, #16
 8011cca:	60f8      	str	r0, [r7, #12]
 8011ccc:	60b9      	str	r1, [r7, #8]
 8011cce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cd4:	f3ef 8305 	mrs	r3, IPSR
 8011cd8:	617b      	str	r3, [r7, #20]
  return(result);
 8011cda:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d17e      	bne.n	8011dde <osThreadNew+0x11a>
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d07b      	beq.n	8011dde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011ce6:	2380      	movs	r3, #128	; 0x80
 8011ce8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011cea:	2318      	movs	r3, #24
 8011cec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cf6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d045      	beq.n	8011d8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d002      	beq.n	8011d0c <osThreadNew+0x48>
        name = attr->name;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	699b      	ldr	r3, [r3, #24]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d002      	beq.n	8011d1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	699b      	ldr	r3, [r3, #24]
 8011d18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011d1a:	69fb      	ldr	r3, [r7, #28]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d008      	beq.n	8011d32 <osThreadNew+0x6e>
 8011d20:	69fb      	ldr	r3, [r7, #28]
 8011d22:	2b38      	cmp	r3, #56	; 0x38
 8011d24:	d805      	bhi.n	8011d32 <osThreadNew+0x6e>
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	f003 0301 	and.w	r3, r3, #1
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d001      	beq.n	8011d36 <osThreadNew+0x72>
        return (NULL);
 8011d32:	2300      	movs	r3, #0
 8011d34:	e054      	b.n	8011de0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	695b      	ldr	r3, [r3, #20]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d003      	beq.n	8011d46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	695b      	ldr	r3, [r3, #20]
 8011d42:	089b      	lsrs	r3, r3, #2
 8011d44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	689b      	ldr	r3, [r3, #8]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d00e      	beq.n	8011d6c <osThreadNew+0xa8>
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	68db      	ldr	r3, [r3, #12]
 8011d52:	2b5b      	cmp	r3, #91	; 0x5b
 8011d54:	d90a      	bls.n	8011d6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d006      	beq.n	8011d6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	695b      	ldr	r3, [r3, #20]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d002      	beq.n	8011d6c <osThreadNew+0xa8>
        mem = 1;
 8011d66:	2301      	movs	r3, #1
 8011d68:	61bb      	str	r3, [r7, #24]
 8011d6a:	e010      	b.n	8011d8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	689b      	ldr	r3, [r3, #8]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d10c      	bne.n	8011d8e <osThreadNew+0xca>
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	68db      	ldr	r3, [r3, #12]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d108      	bne.n	8011d8e <osThreadNew+0xca>
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	691b      	ldr	r3, [r3, #16]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d104      	bne.n	8011d8e <osThreadNew+0xca>
          mem = 0;
 8011d84:	2300      	movs	r3, #0
 8011d86:	61bb      	str	r3, [r7, #24]
 8011d88:	e001      	b.n	8011d8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011d8e:	69bb      	ldr	r3, [r7, #24]
 8011d90:	2b01      	cmp	r3, #1
 8011d92:	d110      	bne.n	8011db6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011d9c:	9202      	str	r2, [sp, #8]
 8011d9e:	9301      	str	r3, [sp, #4]
 8011da0:	69fb      	ldr	r3, [r7, #28]
 8011da2:	9300      	str	r3, [sp, #0]
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	6a3a      	ldr	r2, [r7, #32]
 8011da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011daa:	68f8      	ldr	r0, [r7, #12]
 8011dac:	f001 fb4a 	bl	8013444 <xTaskCreateStatic>
 8011db0:	4603      	mov	r3, r0
 8011db2:	613b      	str	r3, [r7, #16]
 8011db4:	e013      	b.n	8011dde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011db6:	69bb      	ldr	r3, [r7, #24]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d110      	bne.n	8011dde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011dbc:	6a3b      	ldr	r3, [r7, #32]
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	f107 0310 	add.w	r3, r7, #16
 8011dc4:	9301      	str	r3, [sp, #4]
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	9300      	str	r3, [sp, #0]
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011dce:	68f8      	ldr	r0, [r7, #12]
 8011dd0:	f001 fb95 	bl	80134fe <xTaskCreate>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d001      	beq.n	8011dde <osThreadNew+0x11a>
            hTask = NULL;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011dde:	693b      	ldr	r3, [r7, #16]
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	3728      	adds	r7, #40	; 0x28
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}

08011de8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8011de8:	b480      	push	{r7}
 8011dea:	b083      	sub	sp, #12
 8011dec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011dee:	f3ef 8305 	mrs	r3, IPSR
 8011df2:	603b      	str	r3, [r7, #0]
  return(result);
 8011df4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d003      	beq.n	8011e02 <osThreadYield+0x1a>
    stat = osErrorISR;
 8011dfa:	f06f 0305 	mvn.w	r3, #5
 8011dfe:	607b      	str	r3, [r7, #4]
 8011e00:	e009      	b.n	8011e16 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8011e02:	2300      	movs	r3, #0
 8011e04:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8011e06:	4b07      	ldr	r3, [pc, #28]	; (8011e24 <osThreadYield+0x3c>)
 8011e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e0c:	601a      	str	r2, [r3, #0]
 8011e0e:	f3bf 8f4f 	dsb	sy
 8011e12:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8011e16:	687b      	ldr	r3, [r7, #4]
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	370c      	adds	r7, #12
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr
 8011e24:	e000ed04 	.word	0xe000ed04

08011e28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b084      	sub	sp, #16
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e30:	f3ef 8305 	mrs	r3, IPSR
 8011e34:	60bb      	str	r3, [r7, #8]
  return(result);
 8011e36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d003      	beq.n	8011e44 <osDelay+0x1c>
    stat = osErrorISR;
 8011e3c:	f06f 0305 	mvn.w	r3, #5
 8011e40:	60fb      	str	r3, [r7, #12]
 8011e42:	e007      	b.n	8011e54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011e44:	2300      	movs	r3, #0
 8011e46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d002      	beq.n	8011e54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f001 fc9a 	bl	8013788 <vTaskDelay>
    }
  }

  return (stat);
 8011e54:	68fb      	ldr	r3, [r7, #12]
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3710      	adds	r7, #16
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8011e5e:	b580      	push	{r7, lr}
 8011e60:	b086      	sub	sp, #24
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8011e66:	2300      	movs	r3, #0
 8011e68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e6a:	f3ef 8305 	mrs	r3, IPSR
 8011e6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e70:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d12d      	bne.n	8011ed2 <osEventFlagsNew+0x74>
    mem = -1;
 8011e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e7a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d015      	beq.n	8011eae <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	689b      	ldr	r3, [r3, #8]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d006      	beq.n	8011e98 <osEventFlagsNew+0x3a>
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	68db      	ldr	r3, [r3, #12]
 8011e8e:	2b1f      	cmp	r3, #31
 8011e90:	d902      	bls.n	8011e98 <osEventFlagsNew+0x3a>
        mem = 1;
 8011e92:	2301      	movs	r3, #1
 8011e94:	613b      	str	r3, [r7, #16]
 8011e96:	e00c      	b.n	8011eb2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	689b      	ldr	r3, [r3, #8]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d108      	bne.n	8011eb2 <osEventFlagsNew+0x54>
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	68db      	ldr	r3, [r3, #12]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d104      	bne.n	8011eb2 <osEventFlagsNew+0x54>
          mem = 0;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	613b      	str	r3, [r7, #16]
 8011eac:	e001      	b.n	8011eb2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d106      	bne.n	8011ec6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	689b      	ldr	r3, [r3, #8]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f000 fa3d 	bl	801233c <xEventGroupCreateStatic>
 8011ec2:	6178      	str	r0, [r7, #20]
 8011ec4:	e005      	b.n	8011ed2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d102      	bne.n	8011ed2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8011ecc:	f000 fa6d 	bl	80123aa <xEventGroupCreate>
 8011ed0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8011ed2:	697b      	ldr	r3, [r7, #20]
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3718      	adds	r7, #24
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}

08011edc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b086      	sub	sp, #24
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d004      	beq.n	8011efa <osEventFlagsSet+0x1e>
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d003      	beq.n	8011f02 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8011efa:	f06f 0303 	mvn.w	r3, #3
 8011efe:	617b      	str	r3, [r7, #20]
 8011f00:	e028      	b.n	8011f54 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f02:	f3ef 8305 	mrs	r3, IPSR
 8011f06:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f08:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d01d      	beq.n	8011f4a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8011f12:	f107 0308 	add.w	r3, r7, #8
 8011f16:	461a      	mov	r2, r3
 8011f18:	6839      	ldr	r1, [r7, #0]
 8011f1a:	6938      	ldr	r0, [r7, #16]
 8011f1c:	f000 fbe8 	bl	80126f0 <xEventGroupSetBitsFromISR>
 8011f20:	4603      	mov	r3, r0
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d103      	bne.n	8011f2e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8011f26:	f06f 0302 	mvn.w	r3, #2
 8011f2a:	617b      	str	r3, [r7, #20]
 8011f2c:	e012      	b.n	8011f54 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00d      	beq.n	8011f54 <osEventFlagsSet+0x78>
 8011f38:	4b09      	ldr	r3, [pc, #36]	; (8011f60 <osEventFlagsSet+0x84>)
 8011f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f3e:	601a      	str	r2, [r3, #0]
 8011f40:	f3bf 8f4f 	dsb	sy
 8011f44:	f3bf 8f6f 	isb	sy
 8011f48:	e004      	b.n	8011f54 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8011f4a:	6839      	ldr	r1, [r7, #0]
 8011f4c:	6938      	ldr	r0, [r7, #16]
 8011f4e:	f000 fb15 	bl	801257c <xEventGroupSetBits>
 8011f52:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8011f54:	697b      	ldr	r3, [r7, #20]
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3718      	adds	r7, #24
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	e000ed04 	.word	0xe000ed04

08011f64 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b08c      	sub	sp, #48	; 0x30
 8011f68:	af02      	add	r7, sp, #8
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	607a      	str	r2, [r7, #4]
 8011f70:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8011f76:	69bb      	ldr	r3, [r7, #24]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d004      	beq.n	8011f86 <osEventFlagsWait+0x22>
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d003      	beq.n	8011f8e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8011f86:	f06f 0303 	mvn.w	r3, #3
 8011f8a:	61fb      	str	r3, [r7, #28]
 8011f8c:	e04b      	b.n	8012026 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f8e:	f3ef 8305 	mrs	r3, IPSR
 8011f92:	617b      	str	r3, [r7, #20]
  return(result);
 8011f94:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d003      	beq.n	8011fa2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8011f9a:	f06f 0305 	mvn.w	r3, #5
 8011f9e:	61fb      	str	r3, [r7, #28]
 8011fa0:	e041      	b.n	8012026 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f003 0301 	and.w	r3, r3, #1
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d002      	beq.n	8011fb2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8011fac:	2301      	movs	r3, #1
 8011fae:	627b      	str	r3, [r7, #36]	; 0x24
 8011fb0:	e001      	b.n	8011fb6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	f003 0302 	and.w	r3, r3, #2
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d002      	beq.n	8011fc6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	623b      	str	r3, [r7, #32]
 8011fc4:	e001      	b.n	8011fca <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	9300      	str	r3, [sp, #0]
 8011fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd0:	6a3a      	ldr	r2, [r7, #32]
 8011fd2:	68b9      	ldr	r1, [r7, #8]
 8011fd4:	69b8      	ldr	r0, [r7, #24]
 8011fd6:	f000 fa03 	bl	80123e0 <xEventGroupWaitBits>
 8011fda:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f003 0301 	and.w	r3, r3, #1
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d010      	beq.n	8012008 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8011fe6:	68ba      	ldr	r2, [r7, #8]
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	4013      	ands	r3, r2
 8011fec:	68ba      	ldr	r2, [r7, #8]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d019      	beq.n	8012026 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d003      	beq.n	8012000 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8011ff8:	f06f 0301 	mvn.w	r3, #1
 8011ffc:	61fb      	str	r3, [r7, #28]
 8011ffe:	e012      	b.n	8012026 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012000:	f06f 0302 	mvn.w	r3, #2
 8012004:	61fb      	str	r3, [r7, #28]
 8012006:	e00e      	b.n	8012026 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012008:	68ba      	ldr	r2, [r7, #8]
 801200a:	69fb      	ldr	r3, [r7, #28]
 801200c:	4013      	ands	r3, r2
 801200e:	2b00      	cmp	r3, #0
 8012010:	d109      	bne.n	8012026 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d003      	beq.n	8012020 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012018:	f06f 0301 	mvn.w	r3, #1
 801201c:	61fb      	str	r3, [r7, #28]
 801201e:	e002      	b.n	8012026 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012020:	f06f 0302 	mvn.w	r3, #2
 8012024:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012026:	69fb      	ldr	r3, [r7, #28]
}
 8012028:	4618      	mov	r0, r3
 801202a:	3728      	adds	r7, #40	; 0x28
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}

08012030 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012030:	b580      	push	{r7, lr}
 8012032:	b08a      	sub	sp, #40	; 0x28
 8012034:	af02      	add	r7, sp, #8
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801203c:	2300      	movs	r3, #0
 801203e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012040:	f3ef 8305 	mrs	r3, IPSR
 8012044:	613b      	str	r3, [r7, #16]
  return(result);
 8012046:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012048:	2b00      	cmp	r3, #0
 801204a:	d15f      	bne.n	801210c <osMessageQueueNew+0xdc>
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d05c      	beq.n	801210c <osMessageQueueNew+0xdc>
 8012052:	68bb      	ldr	r3, [r7, #8]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d059      	beq.n	801210c <osMessageQueueNew+0xdc>
    mem = -1;
 8012058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801205c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d029      	beq.n	80120b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	689b      	ldr	r3, [r3, #8]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d012      	beq.n	8012092 <osMessageQueueNew+0x62>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	68db      	ldr	r3, [r3, #12]
 8012070:	2b4f      	cmp	r3, #79	; 0x4f
 8012072:	d90e      	bls.n	8012092 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012078:	2b00      	cmp	r3, #0
 801207a:	d00a      	beq.n	8012092 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	695a      	ldr	r2, [r3, #20]
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	68b9      	ldr	r1, [r7, #8]
 8012084:	fb01 f303 	mul.w	r3, r1, r3
 8012088:	429a      	cmp	r2, r3
 801208a:	d302      	bcc.n	8012092 <osMessageQueueNew+0x62>
        mem = 1;
 801208c:	2301      	movs	r3, #1
 801208e:	61bb      	str	r3, [r7, #24]
 8012090:	e014      	b.n	80120bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	689b      	ldr	r3, [r3, #8]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d110      	bne.n	80120bc <osMessageQueueNew+0x8c>
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	68db      	ldr	r3, [r3, #12]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d10c      	bne.n	80120bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d108      	bne.n	80120bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	695b      	ldr	r3, [r3, #20]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d104      	bne.n	80120bc <osMessageQueueNew+0x8c>
          mem = 0;
 80120b2:	2300      	movs	r3, #0
 80120b4:	61bb      	str	r3, [r7, #24]
 80120b6:	e001      	b.n	80120bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80120b8:	2300      	movs	r3, #0
 80120ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80120bc:	69bb      	ldr	r3, [r7, #24]
 80120be:	2b01      	cmp	r3, #1
 80120c0:	d10b      	bne.n	80120da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	691a      	ldr	r2, [r3, #16]
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	689b      	ldr	r3, [r3, #8]
 80120ca:	2100      	movs	r1, #0
 80120cc:	9100      	str	r1, [sp, #0]
 80120ce:	68b9      	ldr	r1, [r7, #8]
 80120d0:	68f8      	ldr	r0, [r7, #12]
 80120d2:	f000 fc3d 	bl	8012950 <xQueueGenericCreateStatic>
 80120d6:	61f8      	str	r0, [r7, #28]
 80120d8:	e008      	b.n	80120ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80120da:	69bb      	ldr	r3, [r7, #24]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d105      	bne.n	80120ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80120e0:	2200      	movs	r2, #0
 80120e2:	68b9      	ldr	r1, [r7, #8]
 80120e4:	68f8      	ldr	r0, [r7, #12]
 80120e6:	f000 fcab 	bl	8012a40 <xQueueGenericCreate>
 80120ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80120ec:	69fb      	ldr	r3, [r7, #28]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d00c      	beq.n	801210c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d003      	beq.n	8012100 <osMessageQueueNew+0xd0>
        name = attr->name;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	617b      	str	r3, [r7, #20]
 80120fe:	e001      	b.n	8012104 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012100:	2300      	movs	r3, #0
 8012102:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012104:	6979      	ldr	r1, [r7, #20]
 8012106:	69f8      	ldr	r0, [r7, #28]
 8012108:	f001 f93e 	bl	8013388 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801210c:	69fb      	ldr	r3, [r7, #28]
}
 801210e:	4618      	mov	r0, r3
 8012110:	3720      	adds	r7, #32
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}
	...

08012118 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012118:	b580      	push	{r7, lr}
 801211a:	b088      	sub	sp, #32
 801211c:	af00      	add	r7, sp, #0
 801211e:	60f8      	str	r0, [r7, #12]
 8012120:	60b9      	str	r1, [r7, #8]
 8012122:	603b      	str	r3, [r7, #0]
 8012124:	4613      	mov	r3, r2
 8012126:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801212c:	2300      	movs	r3, #0
 801212e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012130:	f3ef 8305 	mrs	r3, IPSR
 8012134:	617b      	str	r3, [r7, #20]
  return(result);
 8012136:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012138:	2b00      	cmp	r3, #0
 801213a:	d028      	beq.n	801218e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801213c:	69bb      	ldr	r3, [r7, #24]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d005      	beq.n	801214e <osMessageQueuePut+0x36>
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d002      	beq.n	801214e <osMessageQueuePut+0x36>
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d003      	beq.n	8012156 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801214e:	f06f 0303 	mvn.w	r3, #3
 8012152:	61fb      	str	r3, [r7, #28]
 8012154:	e038      	b.n	80121c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012156:	2300      	movs	r3, #0
 8012158:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801215a:	f107 0210 	add.w	r2, r7, #16
 801215e:	2300      	movs	r3, #0
 8012160:	68b9      	ldr	r1, [r7, #8]
 8012162:	69b8      	ldr	r0, [r7, #24]
 8012164:	f000 fdc8 	bl	8012cf8 <xQueueGenericSendFromISR>
 8012168:	4603      	mov	r3, r0
 801216a:	2b01      	cmp	r3, #1
 801216c:	d003      	beq.n	8012176 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801216e:	f06f 0302 	mvn.w	r3, #2
 8012172:	61fb      	str	r3, [r7, #28]
 8012174:	e028      	b.n	80121c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d025      	beq.n	80121c8 <osMessageQueuePut+0xb0>
 801217c:	4b15      	ldr	r3, [pc, #84]	; (80121d4 <osMessageQueuePut+0xbc>)
 801217e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012182:	601a      	str	r2, [r3, #0]
 8012184:	f3bf 8f4f 	dsb	sy
 8012188:	f3bf 8f6f 	isb	sy
 801218c:	e01c      	b.n	80121c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801218e:	69bb      	ldr	r3, [r7, #24]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d002      	beq.n	801219a <osMessageQueuePut+0x82>
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d103      	bne.n	80121a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801219a:	f06f 0303 	mvn.w	r3, #3
 801219e:	61fb      	str	r3, [r7, #28]
 80121a0:	e012      	b.n	80121c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80121a2:	2300      	movs	r3, #0
 80121a4:	683a      	ldr	r2, [r7, #0]
 80121a6:	68b9      	ldr	r1, [r7, #8]
 80121a8:	69b8      	ldr	r0, [r7, #24]
 80121aa:	f000 fca7 	bl	8012afc <xQueueGenericSend>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b01      	cmp	r3, #1
 80121b2:	d009      	beq.n	80121c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d003      	beq.n	80121c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80121ba:	f06f 0301 	mvn.w	r3, #1
 80121be:	61fb      	str	r3, [r7, #28]
 80121c0:	e002      	b.n	80121c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80121c2:	f06f 0302 	mvn.w	r3, #2
 80121c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80121c8:	69fb      	ldr	r3, [r7, #28]
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3720      	adds	r7, #32
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}
 80121d2:	bf00      	nop
 80121d4:	e000ed04 	.word	0xe000ed04

080121d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80121d8:	b580      	push	{r7, lr}
 80121da:	b088      	sub	sp, #32
 80121dc:	af00      	add	r7, sp, #0
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	607a      	str	r2, [r7, #4]
 80121e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80121ea:	2300      	movs	r3, #0
 80121ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80121ee:	f3ef 8305 	mrs	r3, IPSR
 80121f2:	617b      	str	r3, [r7, #20]
  return(result);
 80121f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d028      	beq.n	801224c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121fa:	69bb      	ldr	r3, [r7, #24]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d005      	beq.n	801220c <osMessageQueueGet+0x34>
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d002      	beq.n	801220c <osMessageQueueGet+0x34>
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d003      	beq.n	8012214 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801220c:	f06f 0303 	mvn.w	r3, #3
 8012210:	61fb      	str	r3, [r7, #28]
 8012212:	e037      	b.n	8012284 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012214:	2300      	movs	r3, #0
 8012216:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012218:	f107 0310 	add.w	r3, r7, #16
 801221c:	461a      	mov	r2, r3
 801221e:	68b9      	ldr	r1, [r7, #8]
 8012220:	69b8      	ldr	r0, [r7, #24]
 8012222:	f000 fee5 	bl	8012ff0 <xQueueReceiveFromISR>
 8012226:	4603      	mov	r3, r0
 8012228:	2b01      	cmp	r3, #1
 801222a:	d003      	beq.n	8012234 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801222c:	f06f 0302 	mvn.w	r3, #2
 8012230:	61fb      	str	r3, [r7, #28]
 8012232:	e027      	b.n	8012284 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d024      	beq.n	8012284 <osMessageQueueGet+0xac>
 801223a:	4b15      	ldr	r3, [pc, #84]	; (8012290 <osMessageQueueGet+0xb8>)
 801223c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012240:	601a      	str	r2, [r3, #0]
 8012242:	f3bf 8f4f 	dsb	sy
 8012246:	f3bf 8f6f 	isb	sy
 801224a:	e01b      	b.n	8012284 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801224c:	69bb      	ldr	r3, [r7, #24]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d002      	beq.n	8012258 <osMessageQueueGet+0x80>
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d103      	bne.n	8012260 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012258:	f06f 0303 	mvn.w	r3, #3
 801225c:	61fb      	str	r3, [r7, #28]
 801225e:	e011      	b.n	8012284 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012260:	683a      	ldr	r2, [r7, #0]
 8012262:	68b9      	ldr	r1, [r7, #8]
 8012264:	69b8      	ldr	r0, [r7, #24]
 8012266:	f000 fde3 	bl	8012e30 <xQueueReceive>
 801226a:	4603      	mov	r3, r0
 801226c:	2b01      	cmp	r3, #1
 801226e:	d009      	beq.n	8012284 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d003      	beq.n	801227e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012276:	f06f 0301 	mvn.w	r3, #1
 801227a:	61fb      	str	r3, [r7, #28]
 801227c:	e002      	b.n	8012284 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801227e:	f06f 0302 	mvn.w	r3, #2
 8012282:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012284:	69fb      	ldr	r3, [r7, #28]
}
 8012286:	4618      	mov	r0, r3
 8012288:	3720      	adds	r7, #32
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	e000ed04 	.word	0xe000ed04

08012294 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8012294:	b580      	push	{r7, lr}
 8012296:	b086      	sub	sp, #24
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d102      	bne.n	80122ac <osMessageQueueGetCount+0x18>
    count = 0U;
 80122a6:	2300      	movs	r3, #0
 80122a8:	617b      	str	r3, [r7, #20]
 80122aa:	e00e      	b.n	80122ca <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80122ac:	f3ef 8305 	mrs	r3, IPSR
 80122b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80122b2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d004      	beq.n	80122c2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80122b8:	6938      	ldr	r0, [r7, #16]
 80122ba:	f000 ff37 	bl	801312c <uxQueueMessagesWaitingFromISR>
 80122be:	6178      	str	r0, [r7, #20]
 80122c0:	e003      	b.n	80122ca <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80122c2:	6938      	ldr	r0, [r7, #16]
 80122c4:	f000 ff14 	bl	80130f0 <uxQueueMessagesWaiting>
 80122c8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80122ca:	697b      	ldr	r3, [r7, #20]
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3718      	adds	r7, #24
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}

080122d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80122d4:	b480      	push	{r7}
 80122d6:	b085      	sub	sp, #20
 80122d8:	af00      	add	r7, sp, #0
 80122da:	60f8      	str	r0, [r7, #12]
 80122dc:	60b9      	str	r1, [r7, #8]
 80122de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	4a07      	ldr	r2, [pc, #28]	; (8012300 <vApplicationGetIdleTaskMemory+0x2c>)
 80122e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	4a06      	ldr	r2, [pc, #24]	; (8012304 <vApplicationGetIdleTaskMemory+0x30>)
 80122ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2280      	movs	r2, #128	; 0x80
 80122f0:	601a      	str	r2, [r3, #0]
}
 80122f2:	bf00      	nop
 80122f4:	3714      	adds	r7, #20
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop
 8012300:	24000cb4 	.word	0x24000cb4
 8012304:	24000d10 	.word	0x24000d10

08012308 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012308:	b480      	push	{r7}
 801230a:	b085      	sub	sp, #20
 801230c:	af00      	add	r7, sp, #0
 801230e:	60f8      	str	r0, [r7, #12]
 8012310:	60b9      	str	r1, [r7, #8]
 8012312:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	4a07      	ldr	r2, [pc, #28]	; (8012334 <vApplicationGetTimerTaskMemory+0x2c>)
 8012318:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	4a06      	ldr	r2, [pc, #24]	; (8012338 <vApplicationGetTimerTaskMemory+0x30>)
 801231e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012326:	601a      	str	r2, [r3, #0]
}
 8012328:	bf00      	nop
 801232a:	3714      	adds	r7, #20
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr
 8012334:	24000f10 	.word	0x24000f10
 8012338:	24000f6c 	.word	0x24000f6c

0801233c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 801233c:	b580      	push	{r7, lr}
 801233e:	b086      	sub	sp, #24
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d10a      	bne.n	8012360 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234e:	f383 8811 	msr	BASEPRI, r3
 8012352:	f3bf 8f6f 	isb	sy
 8012356:	f3bf 8f4f 	dsb	sy
 801235a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801235c:	bf00      	nop
 801235e:	e7fe      	b.n	801235e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8012360:	2320      	movs	r3, #32
 8012362:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	2b20      	cmp	r3, #32
 8012368:	d00a      	beq.n	8012380 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801236a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801236e:	f383 8811 	msr	BASEPRI, r3
 8012372:	f3bf 8f6f 	isb	sy
 8012376:	f3bf 8f4f 	dsb	sy
 801237a:	60fb      	str	r3, [r7, #12]
}
 801237c:	bf00      	nop
 801237e:	e7fe      	b.n	801237e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d00a      	beq.n	80123a0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	2200      	movs	r2, #0
 801238e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	3304      	adds	r3, #4
 8012394:	4618      	mov	r0, r3
 8012396:	f000 f9bf 	bl	8012718 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	2201      	movs	r2, #1
 801239e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80123a0:	697b      	ldr	r3, [r7, #20]
	}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3718      	adds	r7, #24
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}

080123aa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b082      	sub	sp, #8
 80123ae:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80123b0:	2020      	movs	r0, #32
 80123b2:	f002 fdc1 	bl	8014f38 <pvPortMalloc>
 80123b6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d00a      	beq.n	80123d4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2200      	movs	r2, #0
 80123c2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	3304      	adds	r3, #4
 80123c8:	4618      	mov	r0, r3
 80123ca:	f000 f9a5 	bl	8012718 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2200      	movs	r2, #0
 80123d2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80123d4:	687b      	ldr	r3, [r7, #4]
	}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3708      	adds	r7, #8
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
	...

080123e0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b090      	sub	sp, #64	; 0x40
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	60f8      	str	r0, [r7, #12]
 80123e8:	60b9      	str	r1, [r7, #8]
 80123ea:	607a      	str	r2, [r7, #4]
 80123ec:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80123f2:	2300      	movs	r3, #0
 80123f4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80123f6:	2300      	movs	r3, #0
 80123f8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d10a      	bne.n	8012416 <xEventGroupWaitBits+0x36>
	__asm volatile
 8012400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012404:	f383 8811 	msr	BASEPRI, r3
 8012408:	f3bf 8f6f 	isb	sy
 801240c:	f3bf 8f4f 	dsb	sy
 8012410:	623b      	str	r3, [r7, #32]
}
 8012412:	bf00      	nop
 8012414:	e7fe      	b.n	8012414 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012416:	68bb      	ldr	r3, [r7, #8]
 8012418:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801241c:	2b00      	cmp	r3, #0
 801241e:	d00a      	beq.n	8012436 <xEventGroupWaitBits+0x56>
	__asm volatile
 8012420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012424:	f383 8811 	msr	BASEPRI, r3
 8012428:	f3bf 8f6f 	isb	sy
 801242c:	f3bf 8f4f 	dsb	sy
 8012430:	61fb      	str	r3, [r7, #28]
}
 8012432:	bf00      	nop
 8012434:	e7fe      	b.n	8012434 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d10a      	bne.n	8012452 <xEventGroupWaitBits+0x72>
	__asm volatile
 801243c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012440:	f383 8811 	msr	BASEPRI, r3
 8012444:	f3bf 8f6f 	isb	sy
 8012448:	f3bf 8f4f 	dsb	sy
 801244c:	61bb      	str	r3, [r7, #24]
}
 801244e:	bf00      	nop
 8012450:	e7fe      	b.n	8012450 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012452:	f001 febb 	bl	80141cc <xTaskGetSchedulerState>
 8012456:	4603      	mov	r3, r0
 8012458:	2b00      	cmp	r3, #0
 801245a:	d102      	bne.n	8012462 <xEventGroupWaitBits+0x82>
 801245c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801245e:	2b00      	cmp	r3, #0
 8012460:	d101      	bne.n	8012466 <xEventGroupWaitBits+0x86>
 8012462:	2301      	movs	r3, #1
 8012464:	e000      	b.n	8012468 <xEventGroupWaitBits+0x88>
 8012466:	2300      	movs	r3, #0
 8012468:	2b00      	cmp	r3, #0
 801246a:	d10a      	bne.n	8012482 <xEventGroupWaitBits+0xa2>
	__asm volatile
 801246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012470:	f383 8811 	msr	BASEPRI, r3
 8012474:	f3bf 8f6f 	isb	sy
 8012478:	f3bf 8f4f 	dsb	sy
 801247c:	617b      	str	r3, [r7, #20]
}
 801247e:	bf00      	nop
 8012480:	e7fe      	b.n	8012480 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8012482:	f001 fa1b 	bl	80138bc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8012486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801248c:	683a      	ldr	r2, [r7, #0]
 801248e:	68b9      	ldr	r1, [r7, #8]
 8012490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012492:	f000 f90b 	bl	80126ac <prvTestWaitCondition>
 8012496:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8012498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249a:	2b00      	cmp	r3, #0
 801249c:	d00e      	beq.n	80124bc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80124a2:	2300      	movs	r3, #0
 80124a4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d028      	beq.n	80124fe <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80124ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ae:	681a      	ldr	r2, [r3, #0]
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	43db      	mvns	r3, r3
 80124b4:	401a      	ands	r2, r3
 80124b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124b8:	601a      	str	r2, [r3, #0]
 80124ba:	e020      	b.n	80124fe <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80124bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d104      	bne.n	80124cc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80124c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80124c6:	2301      	movs	r3, #1
 80124c8:	633b      	str	r3, [r7, #48]	; 0x30
 80124ca:	e018      	b.n	80124fe <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d003      	beq.n	80124da <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80124d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80124d8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d003      	beq.n	80124e8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80124e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80124e6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80124e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ea:	1d18      	adds	r0, r3, #4
 80124ec:	68ba      	ldr	r2, [r7, #8]
 80124ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f0:	4313      	orrs	r3, r2
 80124f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80124f4:	4619      	mov	r1, r3
 80124f6:	f001 fbe1 	bl	8013cbc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80124fa:	2300      	movs	r3, #0
 80124fc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80124fe:	f001 f9eb 	bl	80138d8 <xTaskResumeAll>
 8012502:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012506:	2b00      	cmp	r3, #0
 8012508:	d031      	beq.n	801256e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250c:	2b00      	cmp	r3, #0
 801250e:	d107      	bne.n	8012520 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8012510:	4b19      	ldr	r3, [pc, #100]	; (8012578 <xEventGroupWaitBits+0x198>)
 8012512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012516:	601a      	str	r2, [r3, #0]
 8012518:	f3bf 8f4f 	dsb	sy
 801251c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012520:	f001 fee0 	bl	80142e4 <uxTaskResetEventItemValue>
 8012524:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801252c:	2b00      	cmp	r3, #0
 801252e:	d11a      	bne.n	8012566 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8012530:	f002 fbe0 	bl	8014cf4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801253a:	683a      	ldr	r2, [r7, #0]
 801253c:	68b9      	ldr	r1, [r7, #8]
 801253e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012540:	f000 f8b4 	bl	80126ac <prvTestWaitCondition>
 8012544:	4603      	mov	r3, r0
 8012546:	2b00      	cmp	r3, #0
 8012548:	d009      	beq.n	801255e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d006      	beq.n	801255e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012552:	681a      	ldr	r2, [r3, #0]
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	43db      	mvns	r3, r3
 8012558:	401a      	ands	r2, r3
 801255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801255c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801255e:	2301      	movs	r3, #1
 8012560:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8012562:	f002 fbf7 	bl	8014d54 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012568:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801256c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801256e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012570:	4618      	mov	r0, r3
 8012572:	3740      	adds	r7, #64	; 0x40
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}
 8012578:	e000ed04 	.word	0xe000ed04

0801257c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b08e      	sub	sp, #56	; 0x38
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8012586:	2300      	movs	r3, #0
 8012588:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801258e:	2300      	movs	r3, #0
 8012590:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d10a      	bne.n	80125ae <xEventGroupSetBits+0x32>
	__asm volatile
 8012598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801259c:	f383 8811 	msr	BASEPRI, r3
 80125a0:	f3bf 8f6f 	isb	sy
 80125a4:	f3bf 8f4f 	dsb	sy
 80125a8:	613b      	str	r3, [r7, #16]
}
 80125aa:	bf00      	nop
 80125ac:	e7fe      	b.n	80125ac <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d00a      	beq.n	80125ce <xEventGroupSetBits+0x52>
	__asm volatile
 80125b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125bc:	f383 8811 	msr	BASEPRI, r3
 80125c0:	f3bf 8f6f 	isb	sy
 80125c4:	f3bf 8f4f 	dsb	sy
 80125c8:	60fb      	str	r3, [r7, #12]
}
 80125ca:	bf00      	nop
 80125cc:	e7fe      	b.n	80125cc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80125ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d0:	3304      	adds	r3, #4
 80125d2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80125d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d6:	3308      	adds	r3, #8
 80125d8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80125da:	f001 f96f 	bl	80138bc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80125de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e0:	68db      	ldr	r3, [r3, #12]
 80125e2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80125e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	431a      	orrs	r2, r3
 80125ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ee:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80125f0:	e03c      	b.n	801266c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80125f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80125f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80125fe:	2300      	movs	r3, #0
 8012600:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012602:	69bb      	ldr	r3, [r7, #24]
 8012604:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012608:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801260a:	69bb      	ldr	r3, [r7, #24]
 801260c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012610:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012618:	2b00      	cmp	r3, #0
 801261a:	d108      	bne.n	801262e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801261e:	681a      	ldr	r2, [r3, #0]
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	4013      	ands	r3, r2
 8012624:	2b00      	cmp	r3, #0
 8012626:	d00b      	beq.n	8012640 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8012628:	2301      	movs	r3, #1
 801262a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801262c:	e008      	b.n	8012640 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012630:	681a      	ldr	r2, [r3, #0]
 8012632:	69bb      	ldr	r3, [r7, #24]
 8012634:	4013      	ands	r3, r2
 8012636:	69ba      	ldr	r2, [r7, #24]
 8012638:	429a      	cmp	r2, r3
 801263a:	d101      	bne.n	8012640 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801263c:	2301      	movs	r3, #1
 801263e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012642:	2b00      	cmp	r3, #0
 8012644:	d010      	beq.n	8012668 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801264c:	2b00      	cmp	r3, #0
 801264e:	d003      	beq.n	8012658 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012652:	69bb      	ldr	r3, [r7, #24]
 8012654:	4313      	orrs	r3, r2
 8012656:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012660:	4619      	mov	r1, r3
 8012662:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012664:	f001 fbf6 	bl	8013e54 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8012668:	69fb      	ldr	r3, [r7, #28]
 801266a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 801266c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801266e:	6a3b      	ldr	r3, [r7, #32]
 8012670:	429a      	cmp	r2, r3
 8012672:	d1be      	bne.n	80125f2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267a:	43db      	mvns	r3, r3
 801267c:	401a      	ands	r2, r3
 801267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012680:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012682:	f001 f929 	bl	80138d8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012688:	681b      	ldr	r3, [r3, #0]
}
 801268a:	4618      	mov	r0, r3
 801268c:	3738      	adds	r7, #56	; 0x38
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}

08012692 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8012692:	b580      	push	{r7, lr}
 8012694:	b082      	sub	sp, #8
 8012696:	af00      	add	r7, sp, #0
 8012698:	6078      	str	r0, [r7, #4]
 801269a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801269c:	6839      	ldr	r1, [r7, #0]
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f7ff ff6c 	bl	801257c <xEventGroupSetBits>
}
 80126a4:	bf00      	nop
 80126a6:	3708      	adds	r7, #8
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80126ac:	b480      	push	{r7}
 80126ae:	b087      	sub	sp, #28
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	60f8      	str	r0, [r7, #12]
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80126b8:	2300      	movs	r3, #0
 80126ba:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d107      	bne.n	80126d2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80126c2:	68fa      	ldr	r2, [r7, #12]
 80126c4:	68bb      	ldr	r3, [r7, #8]
 80126c6:	4013      	ands	r3, r2
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d00a      	beq.n	80126e2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80126cc:	2301      	movs	r3, #1
 80126ce:	617b      	str	r3, [r7, #20]
 80126d0:	e007      	b.n	80126e2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80126d2:	68fa      	ldr	r2, [r7, #12]
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	4013      	ands	r3, r2
 80126d8:	68ba      	ldr	r2, [r7, #8]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d101      	bne.n	80126e2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80126de:	2301      	movs	r3, #1
 80126e0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80126e2:	697b      	ldr	r3, [r7, #20]
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	371c      	adds	r7, #28
 80126e8:	46bd      	mov	sp, r7
 80126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ee:	4770      	bx	lr

080126f0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b086      	sub	sp, #24
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	68ba      	ldr	r2, [r7, #8]
 8012700:	68f9      	ldr	r1, [r7, #12]
 8012702:	4804      	ldr	r0, [pc, #16]	; (8012714 <xEventGroupSetBitsFromISR+0x24>)
 8012704:	f002 f9a8 	bl	8014a58 <xTimerPendFunctionCallFromISR>
 8012708:	6178      	str	r0, [r7, #20]

		return xReturn;
 801270a:	697b      	ldr	r3, [r7, #20]
	}
 801270c:	4618      	mov	r0, r3
 801270e:	3718      	adds	r7, #24
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}
 8012714:	08012693 	.word	0x08012693

08012718 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012718:	b480      	push	{r7}
 801271a:	b083      	sub	sp, #12
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f103 0208 	add.w	r2, r3, #8
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012730:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f103 0208 	add.w	r2, r3, #8
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f103 0208 	add.w	r2, r3, #8
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2200      	movs	r2, #0
 801274a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801274c:	bf00      	nop
 801274e:	370c      	adds	r7, #12
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr

08012758 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012758:	b480      	push	{r7}
 801275a:	b083      	sub	sp, #12
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2200      	movs	r2, #0
 8012764:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012766:	bf00      	nop
 8012768:	370c      	adds	r7, #12
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr

08012772 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012772:	b480      	push	{r7}
 8012774:	b085      	sub	sp, #20
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
 801277a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	68fa      	ldr	r2, [r7, #12]
 8012786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	689a      	ldr	r2, [r3, #8]
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	689b      	ldr	r3, [r3, #8]
 8012794:	683a      	ldr	r2, [r7, #0]
 8012796:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	683a      	ldr	r2, [r7, #0]
 801279c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	687a      	ldr	r2, [r7, #4]
 80127a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	1c5a      	adds	r2, r3, #1
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	601a      	str	r2, [r3, #0]
}
 80127ae:	bf00      	nop
 80127b0:	3714      	adds	r7, #20
 80127b2:	46bd      	mov	sp, r7
 80127b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b8:	4770      	bx	lr

080127ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80127ba:	b480      	push	{r7}
 80127bc:	b085      	sub	sp, #20
 80127be:	af00      	add	r7, sp, #0
 80127c0:	6078      	str	r0, [r7, #4]
 80127c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80127d0:	d103      	bne.n	80127da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	691b      	ldr	r3, [r3, #16]
 80127d6:	60fb      	str	r3, [r7, #12]
 80127d8:	e00c      	b.n	80127f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	3308      	adds	r3, #8
 80127de:	60fb      	str	r3, [r7, #12]
 80127e0:	e002      	b.n	80127e8 <vListInsert+0x2e>
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	60fb      	str	r3, [r7, #12]
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	68ba      	ldr	r2, [r7, #8]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d2f6      	bcs.n	80127e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	685a      	ldr	r2, [r3, #4]
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	685b      	ldr	r3, [r3, #4]
 8012800:	683a      	ldr	r2, [r7, #0]
 8012802:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	68fa      	ldr	r2, [r7, #12]
 8012808:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	683a      	ldr	r2, [r7, #0]
 801280e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	687a      	ldr	r2, [r7, #4]
 8012814:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	1c5a      	adds	r2, r3, #1
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	601a      	str	r2, [r3, #0]
}
 8012820:	bf00      	nop
 8012822:	3714      	adds	r7, #20
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr

0801282c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801282c:	b480      	push	{r7}
 801282e:	b085      	sub	sp, #20
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	691b      	ldr	r3, [r3, #16]
 8012838:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	687a      	ldr	r2, [r7, #4]
 8012840:	6892      	ldr	r2, [r2, #8]
 8012842:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	689b      	ldr	r3, [r3, #8]
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	6852      	ldr	r2, [r2, #4]
 801284c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	685b      	ldr	r3, [r3, #4]
 8012852:	687a      	ldr	r2, [r7, #4]
 8012854:	429a      	cmp	r2, r3
 8012856:	d103      	bne.n	8012860 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	689a      	ldr	r2, [r3, #8]
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	1e5a      	subs	r2, r3, #1
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	681b      	ldr	r3, [r3, #0]
}
 8012874:	4618      	mov	r0, r3
 8012876:	3714      	adds	r7, #20
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr

08012880 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b084      	sub	sp, #16
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d10a      	bne.n	80128aa <xQueueGenericReset+0x2a>
	__asm volatile
 8012894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012898:	f383 8811 	msr	BASEPRI, r3
 801289c:	f3bf 8f6f 	isb	sy
 80128a0:	f3bf 8f4f 	dsb	sy
 80128a4:	60bb      	str	r3, [r7, #8]
}
 80128a6:	bf00      	nop
 80128a8:	e7fe      	b.n	80128a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80128aa:	f002 fa23 	bl	8014cf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	681a      	ldr	r2, [r3, #0]
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128b6:	68f9      	ldr	r1, [r7, #12]
 80128b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80128ba:	fb01 f303 	mul.w	r3, r1, r3
 80128be:	441a      	add	r2, r3
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	2200      	movs	r2, #0
 80128c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	681a      	ldr	r2, [r3, #0]
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	681a      	ldr	r2, [r3, #0]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128da:	3b01      	subs	r3, #1
 80128dc:	68f9      	ldr	r1, [r7, #12]
 80128de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80128e0:	fb01 f303 	mul.w	r3, r1, r3
 80128e4:	441a      	add	r2, r3
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	22ff      	movs	r2, #255	; 0xff
 80128ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	22ff      	movs	r2, #255	; 0xff
 80128f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d114      	bne.n	801292a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	691b      	ldr	r3, [r3, #16]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d01a      	beq.n	801293e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	3310      	adds	r3, #16
 801290c:	4618      	mov	r0, r3
 801290e:	f001 fa3d 	bl	8013d8c <xTaskRemoveFromEventList>
 8012912:	4603      	mov	r3, r0
 8012914:	2b00      	cmp	r3, #0
 8012916:	d012      	beq.n	801293e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012918:	4b0c      	ldr	r3, [pc, #48]	; (801294c <xQueueGenericReset+0xcc>)
 801291a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801291e:	601a      	str	r2, [r3, #0]
 8012920:	f3bf 8f4f 	dsb	sy
 8012924:	f3bf 8f6f 	isb	sy
 8012928:	e009      	b.n	801293e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	3310      	adds	r3, #16
 801292e:	4618      	mov	r0, r3
 8012930:	f7ff fef2 	bl	8012718 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	3324      	adds	r3, #36	; 0x24
 8012938:	4618      	mov	r0, r3
 801293a:	f7ff feed 	bl	8012718 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801293e:	f002 fa09 	bl	8014d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012942:	2301      	movs	r3, #1
}
 8012944:	4618      	mov	r0, r3
 8012946:	3710      	adds	r7, #16
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	e000ed04 	.word	0xe000ed04

08012950 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012950:	b580      	push	{r7, lr}
 8012952:	b08e      	sub	sp, #56	; 0x38
 8012954:	af02      	add	r7, sp, #8
 8012956:	60f8      	str	r0, [r7, #12]
 8012958:	60b9      	str	r1, [r7, #8]
 801295a:	607a      	str	r2, [r7, #4]
 801295c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d10a      	bne.n	801297a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012968:	f383 8811 	msr	BASEPRI, r3
 801296c:	f3bf 8f6f 	isb	sy
 8012970:	f3bf 8f4f 	dsb	sy
 8012974:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012976:	bf00      	nop
 8012978:	e7fe      	b.n	8012978 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d10a      	bne.n	8012996 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012984:	f383 8811 	msr	BASEPRI, r3
 8012988:	f3bf 8f6f 	isb	sy
 801298c:	f3bf 8f4f 	dsb	sy
 8012990:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012992:	bf00      	nop
 8012994:	e7fe      	b.n	8012994 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d002      	beq.n	80129a2 <xQueueGenericCreateStatic+0x52>
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d001      	beq.n	80129a6 <xQueueGenericCreateStatic+0x56>
 80129a2:	2301      	movs	r3, #1
 80129a4:	e000      	b.n	80129a8 <xQueueGenericCreateStatic+0x58>
 80129a6:	2300      	movs	r3, #0
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d10a      	bne.n	80129c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80129ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b0:	f383 8811 	msr	BASEPRI, r3
 80129b4:	f3bf 8f6f 	isb	sy
 80129b8:	f3bf 8f4f 	dsb	sy
 80129bc:	623b      	str	r3, [r7, #32]
}
 80129be:	bf00      	nop
 80129c0:	e7fe      	b.n	80129c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d102      	bne.n	80129ce <xQueueGenericCreateStatic+0x7e>
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d101      	bne.n	80129d2 <xQueueGenericCreateStatic+0x82>
 80129ce:	2301      	movs	r3, #1
 80129d0:	e000      	b.n	80129d4 <xQueueGenericCreateStatic+0x84>
 80129d2:	2300      	movs	r3, #0
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d10a      	bne.n	80129ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80129d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129dc:	f383 8811 	msr	BASEPRI, r3
 80129e0:	f3bf 8f6f 	isb	sy
 80129e4:	f3bf 8f4f 	dsb	sy
 80129e8:	61fb      	str	r3, [r7, #28]
}
 80129ea:	bf00      	nop
 80129ec:	e7fe      	b.n	80129ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80129ee:	2350      	movs	r3, #80	; 0x50
 80129f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	2b50      	cmp	r3, #80	; 0x50
 80129f6:	d00a      	beq.n	8012a0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80129f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129fc:	f383 8811 	msr	BASEPRI, r3
 8012a00:	f3bf 8f6f 	isb	sy
 8012a04:	f3bf 8f4f 	dsb	sy
 8012a08:	61bb      	str	r3, [r7, #24]
}
 8012a0a:	bf00      	nop
 8012a0c:	e7fe      	b.n	8012a0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012a0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d00d      	beq.n	8012a36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1c:	2201      	movs	r2, #1
 8012a1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012a22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a28:	9300      	str	r3, [sp, #0]
 8012a2a:	4613      	mov	r3, r2
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	68b9      	ldr	r1, [r7, #8]
 8012a30:	68f8      	ldr	r0, [r7, #12]
 8012a32:	f000 f83f 	bl	8012ab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3730      	adds	r7, #48	; 0x30
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b08a      	sub	sp, #40	; 0x28
 8012a44:	af02      	add	r7, sp, #8
 8012a46:	60f8      	str	r0, [r7, #12]
 8012a48:	60b9      	str	r1, [r7, #8]
 8012a4a:	4613      	mov	r3, r2
 8012a4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d10a      	bne.n	8012a6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8012a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a58:	f383 8811 	msr	BASEPRI, r3
 8012a5c:	f3bf 8f6f 	isb	sy
 8012a60:	f3bf 8f4f 	dsb	sy
 8012a64:	613b      	str	r3, [r7, #16]
}
 8012a66:	bf00      	nop
 8012a68:	e7fe      	b.n	8012a68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	68ba      	ldr	r2, [r7, #8]
 8012a6e:	fb02 f303 	mul.w	r3, r2, r3
 8012a72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	3350      	adds	r3, #80	; 0x50
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f002 fa5d 	bl	8014f38 <pvPortMalloc>
 8012a7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012a80:	69bb      	ldr	r3, [r7, #24]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d011      	beq.n	8012aaa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	3350      	adds	r3, #80	; 0x50
 8012a8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012a90:	69bb      	ldr	r3, [r7, #24]
 8012a92:	2200      	movs	r2, #0
 8012a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012a98:	79fa      	ldrb	r2, [r7, #7]
 8012a9a:	69bb      	ldr	r3, [r7, #24]
 8012a9c:	9300      	str	r3, [sp, #0]
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	697a      	ldr	r2, [r7, #20]
 8012aa2:	68b9      	ldr	r1, [r7, #8]
 8012aa4:	68f8      	ldr	r0, [r7, #12]
 8012aa6:	f000 f805 	bl	8012ab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012aaa:	69bb      	ldr	r3, [r7, #24]
	}
 8012aac:	4618      	mov	r0, r3
 8012aae:	3720      	adds	r7, #32
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b084      	sub	sp, #16
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	60b9      	str	r1, [r7, #8]
 8012abe:	607a      	str	r2, [r7, #4]
 8012ac0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d103      	bne.n	8012ad0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012ac8:	69bb      	ldr	r3, [r7, #24]
 8012aca:	69ba      	ldr	r2, [r7, #24]
 8012acc:	601a      	str	r2, [r3, #0]
 8012ace:	e002      	b.n	8012ad6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012ad0:	69bb      	ldr	r3, [r7, #24]
 8012ad2:	687a      	ldr	r2, [r7, #4]
 8012ad4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012ad6:	69bb      	ldr	r3, [r7, #24]
 8012ad8:	68fa      	ldr	r2, [r7, #12]
 8012ada:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012adc:	69bb      	ldr	r3, [r7, #24]
 8012ade:	68ba      	ldr	r2, [r7, #8]
 8012ae0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012ae2:	2101      	movs	r1, #1
 8012ae4:	69b8      	ldr	r0, [r7, #24]
 8012ae6:	f7ff fecb 	bl	8012880 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	78fa      	ldrb	r2, [r7, #3]
 8012aee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012af2:	bf00      	nop
 8012af4:	3710      	adds	r7, #16
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}
	...

08012afc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b08e      	sub	sp, #56	; 0x38
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	60f8      	str	r0, [r7, #12]
 8012b04:	60b9      	str	r1, [r7, #8]
 8012b06:	607a      	str	r2, [r7, #4]
 8012b08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d10a      	bne.n	8012b2e <xQueueGenericSend+0x32>
	__asm volatile
 8012b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b1c:	f383 8811 	msr	BASEPRI, r3
 8012b20:	f3bf 8f6f 	isb	sy
 8012b24:	f3bf 8f4f 	dsb	sy
 8012b28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012b2a:	bf00      	nop
 8012b2c:	e7fe      	b.n	8012b2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d103      	bne.n	8012b3c <xQueueGenericSend+0x40>
 8012b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d101      	bne.n	8012b40 <xQueueGenericSend+0x44>
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	e000      	b.n	8012b42 <xQueueGenericSend+0x46>
 8012b40:	2300      	movs	r3, #0
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d10a      	bne.n	8012b5c <xQueueGenericSend+0x60>
	__asm volatile
 8012b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b4a:	f383 8811 	msr	BASEPRI, r3
 8012b4e:	f3bf 8f6f 	isb	sy
 8012b52:	f3bf 8f4f 	dsb	sy
 8012b56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012b58:	bf00      	nop
 8012b5a:	e7fe      	b.n	8012b5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	2b02      	cmp	r3, #2
 8012b60:	d103      	bne.n	8012b6a <xQueueGenericSend+0x6e>
 8012b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b66:	2b01      	cmp	r3, #1
 8012b68:	d101      	bne.n	8012b6e <xQueueGenericSend+0x72>
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	e000      	b.n	8012b70 <xQueueGenericSend+0x74>
 8012b6e:	2300      	movs	r3, #0
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d10a      	bne.n	8012b8a <xQueueGenericSend+0x8e>
	__asm volatile
 8012b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b78:	f383 8811 	msr	BASEPRI, r3
 8012b7c:	f3bf 8f6f 	isb	sy
 8012b80:	f3bf 8f4f 	dsb	sy
 8012b84:	623b      	str	r3, [r7, #32]
}
 8012b86:	bf00      	nop
 8012b88:	e7fe      	b.n	8012b88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b8a:	f001 fb1f 	bl	80141cc <xTaskGetSchedulerState>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d102      	bne.n	8012b9a <xQueueGenericSend+0x9e>
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d101      	bne.n	8012b9e <xQueueGenericSend+0xa2>
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	e000      	b.n	8012ba0 <xQueueGenericSend+0xa4>
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d10a      	bne.n	8012bba <xQueueGenericSend+0xbe>
	__asm volatile
 8012ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba8:	f383 8811 	msr	BASEPRI, r3
 8012bac:	f3bf 8f6f 	isb	sy
 8012bb0:	f3bf 8f4f 	dsb	sy
 8012bb4:	61fb      	str	r3, [r7, #28]
}
 8012bb6:	bf00      	nop
 8012bb8:	e7fe      	b.n	8012bb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012bba:	f002 f89b 	bl	8014cf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	d302      	bcc.n	8012bd0 <xQueueGenericSend+0xd4>
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	2b02      	cmp	r3, #2
 8012bce:	d129      	bne.n	8012c24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012bd0:	683a      	ldr	r2, [r7, #0]
 8012bd2:	68b9      	ldr	r1, [r7, #8]
 8012bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bd6:	f000 fac7 	bl	8013168 <prvCopyDataToQueue>
 8012bda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d010      	beq.n	8012c06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be6:	3324      	adds	r3, #36	; 0x24
 8012be8:	4618      	mov	r0, r3
 8012bea:	f001 f8cf 	bl	8013d8c <xTaskRemoveFromEventList>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d013      	beq.n	8012c1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012bf4:	4b3f      	ldr	r3, [pc, #252]	; (8012cf4 <xQueueGenericSend+0x1f8>)
 8012bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bfa:	601a      	str	r2, [r3, #0]
 8012bfc:	f3bf 8f4f 	dsb	sy
 8012c00:	f3bf 8f6f 	isb	sy
 8012c04:	e00a      	b.n	8012c1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d007      	beq.n	8012c1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012c0c:	4b39      	ldr	r3, [pc, #228]	; (8012cf4 <xQueueGenericSend+0x1f8>)
 8012c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c12:	601a      	str	r2, [r3, #0]
 8012c14:	f3bf 8f4f 	dsb	sy
 8012c18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012c1c:	f002 f89a 	bl	8014d54 <vPortExitCritical>
				return pdPASS;
 8012c20:	2301      	movs	r3, #1
 8012c22:	e063      	b.n	8012cec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d103      	bne.n	8012c32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012c2a:	f002 f893 	bl	8014d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	e05c      	b.n	8012cec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d106      	bne.n	8012c46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c38:	f107 0314 	add.w	r3, r7, #20
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f001 f96b 	bl	8013f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012c42:	2301      	movs	r3, #1
 8012c44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012c46:	f002 f885 	bl	8014d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012c4a:	f000 fe37 	bl	80138bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c4e:	f002 f851 	bl	8014cf4 <vPortEnterCritical>
 8012c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c58:	b25b      	sxtb	r3, r3
 8012c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c5e:	d103      	bne.n	8012c68 <xQueueGenericSend+0x16c>
 8012c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c62:	2200      	movs	r2, #0
 8012c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c6e:	b25b      	sxtb	r3, r3
 8012c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c74:	d103      	bne.n	8012c7e <xQueueGenericSend+0x182>
 8012c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c78:	2200      	movs	r2, #0
 8012c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c7e:	f002 f869 	bl	8014d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c82:	1d3a      	adds	r2, r7, #4
 8012c84:	f107 0314 	add.w	r3, r7, #20
 8012c88:	4611      	mov	r1, r2
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f001 f95a 	bl	8013f44 <xTaskCheckForTimeOut>
 8012c90:	4603      	mov	r3, r0
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d124      	bne.n	8012ce0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012c96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c98:	f000 fb5e 	bl	8013358 <prvIsQueueFull>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d018      	beq.n	8012cd4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca4:	3310      	adds	r3, #16
 8012ca6:	687a      	ldr	r2, [r7, #4]
 8012ca8:	4611      	mov	r1, r2
 8012caa:	4618      	mov	r0, r3
 8012cac:	f000 ffe2 	bl	8013c74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cb2:	f000 fae9 	bl	8013288 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012cb6:	f000 fe0f 	bl	80138d8 <xTaskResumeAll>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	f47f af7c 	bne.w	8012bba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012cc2:	4b0c      	ldr	r3, [pc, #48]	; (8012cf4 <xQueueGenericSend+0x1f8>)
 8012cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cc8:	601a      	str	r2, [r3, #0]
 8012cca:	f3bf 8f4f 	dsb	sy
 8012cce:	f3bf 8f6f 	isb	sy
 8012cd2:	e772      	b.n	8012bba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cd6:	f000 fad7 	bl	8013288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012cda:	f000 fdfd 	bl	80138d8 <xTaskResumeAll>
 8012cde:	e76c      	b.n	8012bba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ce2:	f000 fad1 	bl	8013288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012ce6:	f000 fdf7 	bl	80138d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012cea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	3738      	adds	r7, #56	; 0x38
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}
 8012cf4:	e000ed04 	.word	0xe000ed04

08012cf8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b090      	sub	sp, #64	; 0x40
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	60f8      	str	r0, [r7, #12]
 8012d00:	60b9      	str	r1, [r7, #8]
 8012d02:	607a      	str	r2, [r7, #4]
 8012d04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d10a      	bne.n	8012d26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d14:	f383 8811 	msr	BASEPRI, r3
 8012d18:	f3bf 8f6f 	isb	sy
 8012d1c:	f3bf 8f4f 	dsb	sy
 8012d20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012d22:	bf00      	nop
 8012d24:	e7fe      	b.n	8012d24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d103      	bne.n	8012d34 <xQueueGenericSendFromISR+0x3c>
 8012d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d101      	bne.n	8012d38 <xQueueGenericSendFromISR+0x40>
 8012d34:	2301      	movs	r3, #1
 8012d36:	e000      	b.n	8012d3a <xQueueGenericSendFromISR+0x42>
 8012d38:	2300      	movs	r3, #0
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d10a      	bne.n	8012d54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d42:	f383 8811 	msr	BASEPRI, r3
 8012d46:	f3bf 8f6f 	isb	sy
 8012d4a:	f3bf 8f4f 	dsb	sy
 8012d4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012d50:	bf00      	nop
 8012d52:	e7fe      	b.n	8012d52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012d54:	683b      	ldr	r3, [r7, #0]
 8012d56:	2b02      	cmp	r3, #2
 8012d58:	d103      	bne.n	8012d62 <xQueueGenericSendFromISR+0x6a>
 8012d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d5e:	2b01      	cmp	r3, #1
 8012d60:	d101      	bne.n	8012d66 <xQueueGenericSendFromISR+0x6e>
 8012d62:	2301      	movs	r3, #1
 8012d64:	e000      	b.n	8012d68 <xQueueGenericSendFromISR+0x70>
 8012d66:	2300      	movs	r3, #0
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d10a      	bne.n	8012d82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d70:	f383 8811 	msr	BASEPRI, r3
 8012d74:	f3bf 8f6f 	isb	sy
 8012d78:	f3bf 8f4f 	dsb	sy
 8012d7c:	623b      	str	r3, [r7, #32]
}
 8012d7e:	bf00      	nop
 8012d80:	e7fe      	b.n	8012d80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d82:	f002 f899 	bl	8014eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012d86:	f3ef 8211 	mrs	r2, BASEPRI
 8012d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d8e:	f383 8811 	msr	BASEPRI, r3
 8012d92:	f3bf 8f6f 	isb	sy
 8012d96:	f3bf 8f4f 	dsb	sy
 8012d9a:	61fa      	str	r2, [r7, #28]
 8012d9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012d9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012da0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d302      	bcc.n	8012db4 <xQueueGenericSendFromISR+0xbc>
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	2b02      	cmp	r3, #2
 8012db2:	d12f      	bne.n	8012e14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012dc4:	683a      	ldr	r2, [r7, #0]
 8012dc6:	68b9      	ldr	r1, [r7, #8]
 8012dc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012dca:	f000 f9cd 	bl	8013168 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012dce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012dd6:	d112      	bne.n	8012dfe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d016      	beq.n	8012e0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de2:	3324      	adds	r3, #36	; 0x24
 8012de4:	4618      	mov	r0, r3
 8012de6:	f000 ffd1 	bl	8013d8c <xTaskRemoveFromEventList>
 8012dea:	4603      	mov	r3, r0
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d00e      	beq.n	8012e0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d00b      	beq.n	8012e0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2201      	movs	r2, #1
 8012dfa:	601a      	str	r2, [r3, #0]
 8012dfc:	e007      	b.n	8012e0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012dfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e02:	3301      	adds	r3, #1
 8012e04:	b2db      	uxtb	r3, r3
 8012e06:	b25a      	sxtb	r2, r3
 8012e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012e0e:	2301      	movs	r3, #1
 8012e10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012e12:	e001      	b.n	8012e18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012e14:	2300      	movs	r3, #0
 8012e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e1a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012e1c:	697b      	ldr	r3, [r7, #20]
 8012e1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012e22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3740      	adds	r7, #64	; 0x40
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
	...

08012e30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b08c      	sub	sp, #48	; 0x30
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	60b9      	str	r1, [r7, #8]
 8012e3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d10a      	bne.n	8012e60 <xQueueReceive+0x30>
	__asm volatile
 8012e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e4e:	f383 8811 	msr	BASEPRI, r3
 8012e52:	f3bf 8f6f 	isb	sy
 8012e56:	f3bf 8f4f 	dsb	sy
 8012e5a:	623b      	str	r3, [r7, #32]
}
 8012e5c:	bf00      	nop
 8012e5e:	e7fe      	b.n	8012e5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d103      	bne.n	8012e6e <xQueueReceive+0x3e>
 8012e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d101      	bne.n	8012e72 <xQueueReceive+0x42>
 8012e6e:	2301      	movs	r3, #1
 8012e70:	e000      	b.n	8012e74 <xQueueReceive+0x44>
 8012e72:	2300      	movs	r3, #0
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d10a      	bne.n	8012e8e <xQueueReceive+0x5e>
	__asm volatile
 8012e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e7c:	f383 8811 	msr	BASEPRI, r3
 8012e80:	f3bf 8f6f 	isb	sy
 8012e84:	f3bf 8f4f 	dsb	sy
 8012e88:	61fb      	str	r3, [r7, #28]
}
 8012e8a:	bf00      	nop
 8012e8c:	e7fe      	b.n	8012e8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012e8e:	f001 f99d 	bl	80141cc <xTaskGetSchedulerState>
 8012e92:	4603      	mov	r3, r0
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d102      	bne.n	8012e9e <xQueueReceive+0x6e>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d101      	bne.n	8012ea2 <xQueueReceive+0x72>
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	e000      	b.n	8012ea4 <xQueueReceive+0x74>
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d10a      	bne.n	8012ebe <xQueueReceive+0x8e>
	__asm volatile
 8012ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eac:	f383 8811 	msr	BASEPRI, r3
 8012eb0:	f3bf 8f6f 	isb	sy
 8012eb4:	f3bf 8f4f 	dsb	sy
 8012eb8:	61bb      	str	r3, [r7, #24]
}
 8012eba:	bf00      	nop
 8012ebc:	e7fe      	b.n	8012ebc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012ebe:	f001 ff19 	bl	8014cf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ec6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d01f      	beq.n	8012f0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012ece:	68b9      	ldr	r1, [r7, #8]
 8012ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ed2:	f000 f9b3 	bl	801323c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed8:	1e5a      	subs	r2, r3, #1
 8012eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012edc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee0:	691b      	ldr	r3, [r3, #16]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d00f      	beq.n	8012f06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee8:	3310      	adds	r3, #16
 8012eea:	4618      	mov	r0, r3
 8012eec:	f000 ff4e 	bl	8013d8c <xTaskRemoveFromEventList>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d007      	beq.n	8012f06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012ef6:	4b3d      	ldr	r3, [pc, #244]	; (8012fec <xQueueReceive+0x1bc>)
 8012ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012efc:	601a      	str	r2, [r3, #0]
 8012efe:	f3bf 8f4f 	dsb	sy
 8012f02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012f06:	f001 ff25 	bl	8014d54 <vPortExitCritical>
				return pdPASS;
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	e069      	b.n	8012fe2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d103      	bne.n	8012f1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012f14:	f001 ff1e 	bl	8014d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012f18:	2300      	movs	r3, #0
 8012f1a:	e062      	b.n	8012fe2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d106      	bne.n	8012f30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012f22:	f107 0310 	add.w	r3, r7, #16
 8012f26:	4618      	mov	r0, r3
 8012f28:	f000 fff6 	bl	8013f18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012f30:	f001 ff10 	bl	8014d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012f34:	f000 fcc2 	bl	80138bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012f38:	f001 fedc 	bl	8014cf4 <vPortEnterCritical>
 8012f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f42:	b25b      	sxtb	r3, r3
 8012f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f48:	d103      	bne.n	8012f52 <xQueueReceive+0x122>
 8012f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f58:	b25b      	sxtb	r3, r3
 8012f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f5e:	d103      	bne.n	8012f68 <xQueueReceive+0x138>
 8012f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f62:	2200      	movs	r2, #0
 8012f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012f68:	f001 fef4 	bl	8014d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012f6c:	1d3a      	adds	r2, r7, #4
 8012f6e:	f107 0310 	add.w	r3, r7, #16
 8012f72:	4611      	mov	r1, r2
 8012f74:	4618      	mov	r0, r3
 8012f76:	f000 ffe5 	bl	8013f44 <xTaskCheckForTimeOut>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d123      	bne.n	8012fc8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f82:	f000 f9d3 	bl	801332c <prvIsQueueEmpty>
 8012f86:	4603      	mov	r3, r0
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d017      	beq.n	8012fbc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f8e:	3324      	adds	r3, #36	; 0x24
 8012f90:	687a      	ldr	r2, [r7, #4]
 8012f92:	4611      	mov	r1, r2
 8012f94:	4618      	mov	r0, r3
 8012f96:	f000 fe6d 	bl	8013c74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f9c:	f000 f974 	bl	8013288 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012fa0:	f000 fc9a 	bl	80138d8 <xTaskResumeAll>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d189      	bne.n	8012ebe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012faa:	4b10      	ldr	r3, [pc, #64]	; (8012fec <xQueueReceive+0x1bc>)
 8012fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fb0:	601a      	str	r2, [r3, #0]
 8012fb2:	f3bf 8f4f 	dsb	sy
 8012fb6:	f3bf 8f6f 	isb	sy
 8012fba:	e780      	b.n	8012ebe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012fbe:	f000 f963 	bl	8013288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012fc2:	f000 fc89 	bl	80138d8 <xTaskResumeAll>
 8012fc6:	e77a      	b.n	8012ebe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012fca:	f000 f95d 	bl	8013288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012fce:	f000 fc83 	bl	80138d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012fd4:	f000 f9aa 	bl	801332c <prvIsQueueEmpty>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	f43f af6f 	beq.w	8012ebe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012fe0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	3730      	adds	r7, #48	; 0x30
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}
 8012fea:	bf00      	nop
 8012fec:	e000ed04 	.word	0xe000ed04

08012ff0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b08e      	sub	sp, #56	; 0x38
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	60f8      	str	r0, [r7, #12]
 8012ff8:	60b9      	str	r1, [r7, #8]
 8012ffa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013002:	2b00      	cmp	r3, #0
 8013004:	d10a      	bne.n	801301c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801300a:	f383 8811 	msr	BASEPRI, r3
 801300e:	f3bf 8f6f 	isb	sy
 8013012:	f3bf 8f4f 	dsb	sy
 8013016:	623b      	str	r3, [r7, #32]
}
 8013018:	bf00      	nop
 801301a:	e7fe      	b.n	801301a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801301c:	68bb      	ldr	r3, [r7, #8]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d103      	bne.n	801302a <xQueueReceiveFromISR+0x3a>
 8013022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013026:	2b00      	cmp	r3, #0
 8013028:	d101      	bne.n	801302e <xQueueReceiveFromISR+0x3e>
 801302a:	2301      	movs	r3, #1
 801302c:	e000      	b.n	8013030 <xQueueReceiveFromISR+0x40>
 801302e:	2300      	movs	r3, #0
 8013030:	2b00      	cmp	r3, #0
 8013032:	d10a      	bne.n	801304a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013038:	f383 8811 	msr	BASEPRI, r3
 801303c:	f3bf 8f6f 	isb	sy
 8013040:	f3bf 8f4f 	dsb	sy
 8013044:	61fb      	str	r3, [r7, #28]
}
 8013046:	bf00      	nop
 8013048:	e7fe      	b.n	8013048 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801304a:	f001 ff35 	bl	8014eb8 <vPortValidateInterruptPriority>
	__asm volatile
 801304e:	f3ef 8211 	mrs	r2, BASEPRI
 8013052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013056:	f383 8811 	msr	BASEPRI, r3
 801305a:	f3bf 8f6f 	isb	sy
 801305e:	f3bf 8f4f 	dsb	sy
 8013062:	61ba      	str	r2, [r7, #24]
 8013064:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013066:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013068:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801306e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013072:	2b00      	cmp	r3, #0
 8013074:	d02f      	beq.n	80130d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801307c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013080:	68b9      	ldr	r1, [r7, #8]
 8013082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013084:	f000 f8da 	bl	801323c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801308a:	1e5a      	subs	r2, r3, #1
 801308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801308e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013090:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013098:	d112      	bne.n	80130c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801309c:	691b      	ldr	r3, [r3, #16]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d016      	beq.n	80130d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80130a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a4:	3310      	adds	r3, #16
 80130a6:	4618      	mov	r0, r3
 80130a8:	f000 fe70 	bl	8013d8c <xTaskRemoveFromEventList>
 80130ac:	4603      	mov	r3, r0
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d00e      	beq.n	80130d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d00b      	beq.n	80130d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2201      	movs	r2, #1
 80130bc:	601a      	str	r2, [r3, #0]
 80130be:	e007      	b.n	80130d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80130c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130c4:	3301      	adds	r3, #1
 80130c6:	b2db      	uxtb	r3, r3
 80130c8:	b25a      	sxtb	r2, r3
 80130ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80130d0:	2301      	movs	r3, #1
 80130d2:	637b      	str	r3, [r7, #52]	; 0x34
 80130d4:	e001      	b.n	80130da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80130d6:	2300      	movs	r3, #0
 80130d8:	637b      	str	r3, [r7, #52]	; 0x34
 80130da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	f383 8811 	msr	BASEPRI, r3
}
 80130e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80130e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80130e8:	4618      	mov	r0, r3
 80130ea:	3738      	adds	r7, #56	; 0x38
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}

080130f0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b084      	sub	sp, #16
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d10a      	bne.n	8013114 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80130fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013102:	f383 8811 	msr	BASEPRI, r3
 8013106:	f3bf 8f6f 	isb	sy
 801310a:	f3bf 8f4f 	dsb	sy
 801310e:	60bb      	str	r3, [r7, #8]
}
 8013110:	bf00      	nop
 8013112:	e7fe      	b.n	8013112 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8013114:	f001 fdee 	bl	8014cf4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801311c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801311e:	f001 fe19 	bl	8014d54 <vPortExitCritical>

	return uxReturn;
 8013122:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013124:	4618      	mov	r0, r3
 8013126:	3710      	adds	r7, #16
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}

0801312c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801312c:	b480      	push	{r7}
 801312e:	b087      	sub	sp, #28
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d10a      	bne.n	8013154 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013142:	f383 8811 	msr	BASEPRI, r3
 8013146:	f3bf 8f6f 	isb	sy
 801314a:	f3bf 8f4f 	dsb	sy
 801314e:	60fb      	str	r3, [r7, #12]
}
 8013150:	bf00      	nop
 8013152:	e7fe      	b.n	8013152 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013158:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801315a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801315c:	4618      	mov	r0, r3
 801315e:	371c      	adds	r7, #28
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr

08013168 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b086      	sub	sp, #24
 801316c:	af00      	add	r7, sp, #0
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013174:	2300      	movs	r3, #0
 8013176:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801317c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013182:	2b00      	cmp	r3, #0
 8013184:	d10d      	bne.n	80131a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d14d      	bne.n	801322a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	689b      	ldr	r3, [r3, #8]
 8013192:	4618      	mov	r0, r3
 8013194:	f001 f838 	bl	8014208 <xTaskPriorityDisinherit>
 8013198:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2200      	movs	r2, #0
 801319e:	609a      	str	r2, [r3, #8]
 80131a0:	e043      	b.n	801322a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d119      	bne.n	80131dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	6858      	ldr	r0, [r3, #4]
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131b0:	461a      	mov	r2, r3
 80131b2:	68b9      	ldr	r1, [r7, #8]
 80131b4:	f002 f8e4 	bl	8015380 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	685a      	ldr	r2, [r3, #4]
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131c0:	441a      	add	r2, r3
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	685a      	ldr	r2, [r3, #4]
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	689b      	ldr	r3, [r3, #8]
 80131ce:	429a      	cmp	r2, r3
 80131d0:	d32b      	bcc.n	801322a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	681a      	ldr	r2, [r3, #0]
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	605a      	str	r2, [r3, #4]
 80131da:	e026      	b.n	801322a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	68d8      	ldr	r0, [r3, #12]
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131e4:	461a      	mov	r2, r3
 80131e6:	68b9      	ldr	r1, [r7, #8]
 80131e8:	f002 f8ca 	bl	8015380 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	68da      	ldr	r2, [r3, #12]
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131f4:	425b      	negs	r3, r3
 80131f6:	441a      	add	r2, r3
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	68da      	ldr	r2, [r3, #12]
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	429a      	cmp	r2, r3
 8013206:	d207      	bcs.n	8013218 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	689a      	ldr	r2, [r3, #8]
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013210:	425b      	negs	r3, r3
 8013212:	441a      	add	r2, r3
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2b02      	cmp	r3, #2
 801321c:	d105      	bne.n	801322a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801321e:	693b      	ldr	r3, [r7, #16]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d002      	beq.n	801322a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	3b01      	subs	r3, #1
 8013228:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	1c5a      	adds	r2, r3, #1
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013232:	697b      	ldr	r3, [r7, #20]
}
 8013234:	4618      	mov	r0, r3
 8013236:	3718      	adds	r7, #24
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}

0801323c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801324a:	2b00      	cmp	r3, #0
 801324c:	d018      	beq.n	8013280 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	68da      	ldr	r2, [r3, #12]
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013256:	441a      	add	r2, r3
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	68da      	ldr	r2, [r3, #12]
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	689b      	ldr	r3, [r3, #8]
 8013264:	429a      	cmp	r2, r3
 8013266:	d303      	bcc.n	8013270 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	68d9      	ldr	r1, [r3, #12]
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013278:	461a      	mov	r2, r3
 801327a:	6838      	ldr	r0, [r7, #0]
 801327c:	f002 f880 	bl	8015380 <memcpy>
	}
}
 8013280:	bf00      	nop
 8013282:	3708      	adds	r7, #8
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}

08013288 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b084      	sub	sp, #16
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013290:	f001 fd30 	bl	8014cf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801329a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801329c:	e011      	b.n	80132c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d012      	beq.n	80132cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	3324      	adds	r3, #36	; 0x24
 80132aa:	4618      	mov	r0, r3
 80132ac:	f000 fd6e 	bl	8013d8c <xTaskRemoveFromEventList>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d001      	beq.n	80132ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80132b6:	f000 fea7 	bl	8014008 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80132ba:	7bfb      	ldrb	r3, [r7, #15]
 80132bc:	3b01      	subs	r3, #1
 80132be:	b2db      	uxtb	r3, r3
 80132c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80132c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	dce9      	bgt.n	801329e <prvUnlockQueue+0x16>
 80132ca:	e000      	b.n	80132ce <prvUnlockQueue+0x46>
					break;
 80132cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	22ff      	movs	r2, #255	; 0xff
 80132d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80132d6:	f001 fd3d 	bl	8014d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80132da:	f001 fd0b 	bl	8014cf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80132e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80132e6:	e011      	b.n	801330c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	691b      	ldr	r3, [r3, #16]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d012      	beq.n	8013316 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	3310      	adds	r3, #16
 80132f4:	4618      	mov	r0, r3
 80132f6:	f000 fd49 	bl	8013d8c <xTaskRemoveFromEventList>
 80132fa:	4603      	mov	r3, r0
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d001      	beq.n	8013304 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013300:	f000 fe82 	bl	8014008 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013304:	7bbb      	ldrb	r3, [r7, #14]
 8013306:	3b01      	subs	r3, #1
 8013308:	b2db      	uxtb	r3, r3
 801330a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801330c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013310:	2b00      	cmp	r3, #0
 8013312:	dce9      	bgt.n	80132e8 <prvUnlockQueue+0x60>
 8013314:	e000      	b.n	8013318 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013316:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	22ff      	movs	r2, #255	; 0xff
 801331c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013320:	f001 fd18 	bl	8014d54 <vPortExitCritical>
}
 8013324:	bf00      	nop
 8013326:	3710      	adds	r7, #16
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013334:	f001 fcde 	bl	8014cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801333c:	2b00      	cmp	r3, #0
 801333e:	d102      	bne.n	8013346 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013340:	2301      	movs	r3, #1
 8013342:	60fb      	str	r3, [r7, #12]
 8013344:	e001      	b.n	801334a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013346:	2300      	movs	r3, #0
 8013348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801334a:	f001 fd03 	bl	8014d54 <vPortExitCritical>

	return xReturn;
 801334e:	68fb      	ldr	r3, [r7, #12]
}
 8013350:	4618      	mov	r0, r3
 8013352:	3710      	adds	r7, #16
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013360:	f001 fcc8 	bl	8014cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801336c:	429a      	cmp	r2, r3
 801336e:	d102      	bne.n	8013376 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013370:	2301      	movs	r3, #1
 8013372:	60fb      	str	r3, [r7, #12]
 8013374:	e001      	b.n	801337a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013376:	2300      	movs	r3, #0
 8013378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801337a:	f001 fceb 	bl	8014d54 <vPortExitCritical>

	return xReturn;
 801337e:	68fb      	ldr	r3, [r7, #12]
}
 8013380:	4618      	mov	r0, r3
 8013382:	3710      	adds	r7, #16
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}

08013388 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013388:	b480      	push	{r7}
 801338a:	b085      	sub	sp, #20
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013392:	2300      	movs	r3, #0
 8013394:	60fb      	str	r3, [r7, #12]
 8013396:	e014      	b.n	80133c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013398:	4a0f      	ldr	r2, [pc, #60]	; (80133d8 <vQueueAddToRegistry+0x50>)
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10b      	bne.n	80133bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80133a4:	490c      	ldr	r1, [pc, #48]	; (80133d8 <vQueueAddToRegistry+0x50>)
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	683a      	ldr	r2, [r7, #0]
 80133aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80133ae:	4a0a      	ldr	r2, [pc, #40]	; (80133d8 <vQueueAddToRegistry+0x50>)
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	00db      	lsls	r3, r3, #3
 80133b4:	4413      	add	r3, r2
 80133b6:	687a      	ldr	r2, [r7, #4]
 80133b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80133ba:	e006      	b.n	80133ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	3301      	adds	r3, #1
 80133c0:	60fb      	str	r3, [r7, #12]
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2b07      	cmp	r3, #7
 80133c6:	d9e7      	bls.n	8013398 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80133c8:	bf00      	nop
 80133ca:	bf00      	nop
 80133cc:	3714      	adds	r7, #20
 80133ce:	46bd      	mov	sp, r7
 80133d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d4:	4770      	bx	lr
 80133d6:	bf00      	nop
 80133d8:	2400136c 	.word	0x2400136c

080133dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b086      	sub	sp, #24
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	60f8      	str	r0, [r7, #12]
 80133e4:	60b9      	str	r1, [r7, #8]
 80133e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80133ec:	f001 fc82 	bl	8014cf4 <vPortEnterCritical>
 80133f0:	697b      	ldr	r3, [r7, #20]
 80133f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133f6:	b25b      	sxtb	r3, r3
 80133f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133fc:	d103      	bne.n	8013406 <vQueueWaitForMessageRestricted+0x2a>
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	2200      	movs	r2, #0
 8013402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801340c:	b25b      	sxtb	r3, r3
 801340e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013412:	d103      	bne.n	801341c <vQueueWaitForMessageRestricted+0x40>
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	2200      	movs	r2, #0
 8013418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801341c:	f001 fc9a 	bl	8014d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013424:	2b00      	cmp	r3, #0
 8013426:	d106      	bne.n	8013436 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	3324      	adds	r3, #36	; 0x24
 801342c:	687a      	ldr	r2, [r7, #4]
 801342e:	68b9      	ldr	r1, [r7, #8]
 8013430:	4618      	mov	r0, r3
 8013432:	f000 fc7f 	bl	8013d34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013436:	6978      	ldr	r0, [r7, #20]
 8013438:	f7ff ff26 	bl	8013288 <prvUnlockQueue>
	}
 801343c:	bf00      	nop
 801343e:	3718      	adds	r7, #24
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}

08013444 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013444:	b580      	push	{r7, lr}
 8013446:	b08e      	sub	sp, #56	; 0x38
 8013448:	af04      	add	r7, sp, #16
 801344a:	60f8      	str	r0, [r7, #12]
 801344c:	60b9      	str	r1, [r7, #8]
 801344e:	607a      	str	r2, [r7, #4]
 8013450:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013454:	2b00      	cmp	r3, #0
 8013456:	d10a      	bne.n	801346e <xTaskCreateStatic+0x2a>
	__asm volatile
 8013458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801345c:	f383 8811 	msr	BASEPRI, r3
 8013460:	f3bf 8f6f 	isb	sy
 8013464:	f3bf 8f4f 	dsb	sy
 8013468:	623b      	str	r3, [r7, #32]
}
 801346a:	bf00      	nop
 801346c:	e7fe      	b.n	801346c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013470:	2b00      	cmp	r3, #0
 8013472:	d10a      	bne.n	801348a <xTaskCreateStatic+0x46>
	__asm volatile
 8013474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013478:	f383 8811 	msr	BASEPRI, r3
 801347c:	f3bf 8f6f 	isb	sy
 8013480:	f3bf 8f4f 	dsb	sy
 8013484:	61fb      	str	r3, [r7, #28]
}
 8013486:	bf00      	nop
 8013488:	e7fe      	b.n	8013488 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801348a:	235c      	movs	r3, #92	; 0x5c
 801348c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	2b5c      	cmp	r3, #92	; 0x5c
 8013492:	d00a      	beq.n	80134aa <xTaskCreateStatic+0x66>
	__asm volatile
 8013494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013498:	f383 8811 	msr	BASEPRI, r3
 801349c:	f3bf 8f6f 	isb	sy
 80134a0:	f3bf 8f4f 	dsb	sy
 80134a4:	61bb      	str	r3, [r7, #24]
}
 80134a6:	bf00      	nop
 80134a8:	e7fe      	b.n	80134a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80134aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80134ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d01e      	beq.n	80134f0 <xTaskCreateStatic+0xac>
 80134b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d01b      	beq.n	80134f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80134b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80134bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80134c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c4:	2202      	movs	r2, #2
 80134c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80134ca:	2300      	movs	r3, #0
 80134cc:	9303      	str	r3, [sp, #12]
 80134ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d0:	9302      	str	r3, [sp, #8]
 80134d2:	f107 0314 	add.w	r3, r7, #20
 80134d6:	9301      	str	r3, [sp, #4]
 80134d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134da:	9300      	str	r3, [sp, #0]
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	68b9      	ldr	r1, [r7, #8]
 80134e2:	68f8      	ldr	r0, [r7, #12]
 80134e4:	f000 f850 	bl	8013588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80134e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134ea:	f000 f8dd 	bl	80136a8 <prvAddNewTaskToReadyList>
 80134ee:	e001      	b.n	80134f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80134f0:	2300      	movs	r3, #0
 80134f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80134f4:	697b      	ldr	r3, [r7, #20]
	}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3728      	adds	r7, #40	; 0x28
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}

080134fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80134fe:	b580      	push	{r7, lr}
 8013500:	b08c      	sub	sp, #48	; 0x30
 8013502:	af04      	add	r7, sp, #16
 8013504:	60f8      	str	r0, [r7, #12]
 8013506:	60b9      	str	r1, [r7, #8]
 8013508:	603b      	str	r3, [r7, #0]
 801350a:	4613      	mov	r3, r2
 801350c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801350e:	88fb      	ldrh	r3, [r7, #6]
 8013510:	009b      	lsls	r3, r3, #2
 8013512:	4618      	mov	r0, r3
 8013514:	f001 fd10 	bl	8014f38 <pvPortMalloc>
 8013518:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d00e      	beq.n	801353e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013520:	205c      	movs	r0, #92	; 0x5c
 8013522:	f001 fd09 	bl	8014f38 <pvPortMalloc>
 8013526:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d003      	beq.n	8013536 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	697a      	ldr	r2, [r7, #20]
 8013532:	631a      	str	r2, [r3, #48]	; 0x30
 8013534:	e005      	b.n	8013542 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013536:	6978      	ldr	r0, [r7, #20]
 8013538:	f001 fdca 	bl	80150d0 <vPortFree>
 801353c:	e001      	b.n	8013542 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801353e:	2300      	movs	r3, #0
 8013540:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013542:	69fb      	ldr	r3, [r7, #28]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d017      	beq.n	8013578 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013548:	69fb      	ldr	r3, [r7, #28]
 801354a:	2200      	movs	r2, #0
 801354c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013550:	88fa      	ldrh	r2, [r7, #6]
 8013552:	2300      	movs	r3, #0
 8013554:	9303      	str	r3, [sp, #12]
 8013556:	69fb      	ldr	r3, [r7, #28]
 8013558:	9302      	str	r3, [sp, #8]
 801355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801355c:	9301      	str	r3, [sp, #4]
 801355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013560:	9300      	str	r3, [sp, #0]
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	68b9      	ldr	r1, [r7, #8]
 8013566:	68f8      	ldr	r0, [r7, #12]
 8013568:	f000 f80e 	bl	8013588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801356c:	69f8      	ldr	r0, [r7, #28]
 801356e:	f000 f89b 	bl	80136a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013572:	2301      	movs	r3, #1
 8013574:	61bb      	str	r3, [r7, #24]
 8013576:	e002      	b.n	801357e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801357c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801357e:	69bb      	ldr	r3, [r7, #24]
	}
 8013580:	4618      	mov	r0, r3
 8013582:	3720      	adds	r7, #32
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b088      	sub	sp, #32
 801358c:	af00      	add	r7, sp, #0
 801358e:	60f8      	str	r0, [r7, #12]
 8013590:	60b9      	str	r1, [r7, #8]
 8013592:	607a      	str	r2, [r7, #4]
 8013594:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013598:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	009b      	lsls	r3, r3, #2
 801359e:	461a      	mov	r2, r3
 80135a0:	21a5      	movs	r1, #165	; 0xa5
 80135a2:	f001 fefb 	bl	801539c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80135a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135aa:	6879      	ldr	r1, [r7, #4]
 80135ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80135b0:	440b      	add	r3, r1
 80135b2:	009b      	lsls	r3, r3, #2
 80135b4:	4413      	add	r3, r2
 80135b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80135b8:	69bb      	ldr	r3, [r7, #24]
 80135ba:	f023 0307 	bic.w	r3, r3, #7
 80135be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80135c0:	69bb      	ldr	r3, [r7, #24]
 80135c2:	f003 0307 	and.w	r3, r3, #7
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d00a      	beq.n	80135e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80135ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ce:	f383 8811 	msr	BASEPRI, r3
 80135d2:	f3bf 8f6f 	isb	sy
 80135d6:	f3bf 8f4f 	dsb	sy
 80135da:	617b      	str	r3, [r7, #20]
}
 80135dc:	bf00      	nop
 80135de:	e7fe      	b.n	80135de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d01f      	beq.n	8013626 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80135e6:	2300      	movs	r3, #0
 80135e8:	61fb      	str	r3, [r7, #28]
 80135ea:	e012      	b.n	8013612 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80135ec:	68ba      	ldr	r2, [r7, #8]
 80135ee:	69fb      	ldr	r3, [r7, #28]
 80135f0:	4413      	add	r3, r2
 80135f2:	7819      	ldrb	r1, [r3, #0]
 80135f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135f6:	69fb      	ldr	r3, [r7, #28]
 80135f8:	4413      	add	r3, r2
 80135fa:	3334      	adds	r3, #52	; 0x34
 80135fc:	460a      	mov	r2, r1
 80135fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013600:	68ba      	ldr	r2, [r7, #8]
 8013602:	69fb      	ldr	r3, [r7, #28]
 8013604:	4413      	add	r3, r2
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d006      	beq.n	801361a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801360c:	69fb      	ldr	r3, [r7, #28]
 801360e:	3301      	adds	r3, #1
 8013610:	61fb      	str	r3, [r7, #28]
 8013612:	69fb      	ldr	r3, [r7, #28]
 8013614:	2b0f      	cmp	r3, #15
 8013616:	d9e9      	bls.n	80135ec <prvInitialiseNewTask+0x64>
 8013618:	e000      	b.n	801361c <prvInitialiseNewTask+0x94>
			{
				break;
 801361a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801361e:	2200      	movs	r2, #0
 8013620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013624:	e003      	b.n	801362e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013628:	2200      	movs	r2, #0
 801362a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013630:	2b37      	cmp	r3, #55	; 0x37
 8013632:	d901      	bls.n	8013638 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013634:	2337      	movs	r3, #55	; 0x37
 8013636:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801363a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801363c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013642:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013646:	2200      	movs	r2, #0
 8013648:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364c:	3304      	adds	r3, #4
 801364e:	4618      	mov	r0, r3
 8013650:	f7ff f882 	bl	8012758 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013656:	3318      	adds	r3, #24
 8013658:	4618      	mov	r0, r3
 801365a:	f7ff f87d 	bl	8012758 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013662:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013666:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801366c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013672:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013676:	2200      	movs	r2, #0
 8013678:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367c:	2200      	movs	r2, #0
 801367e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013682:	683a      	ldr	r2, [r7, #0]
 8013684:	68f9      	ldr	r1, [r7, #12]
 8013686:	69b8      	ldr	r0, [r7, #24]
 8013688:	f001 fa06 	bl	8014a98 <pxPortInitialiseStack>
 801368c:	4602      	mov	r2, r0
 801368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013690:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013694:	2b00      	cmp	r3, #0
 8013696:	d002      	beq.n	801369e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801369c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801369e:	bf00      	nop
 80136a0:	3720      	adds	r7, #32
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
	...

080136a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80136b0:	f001 fb20 	bl	8014cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80136b4:	4b2d      	ldr	r3, [pc, #180]	; (801376c <prvAddNewTaskToReadyList+0xc4>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	3301      	adds	r3, #1
 80136ba:	4a2c      	ldr	r2, [pc, #176]	; (801376c <prvAddNewTaskToReadyList+0xc4>)
 80136bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80136be:	4b2c      	ldr	r3, [pc, #176]	; (8013770 <prvAddNewTaskToReadyList+0xc8>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d109      	bne.n	80136da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80136c6:	4a2a      	ldr	r2, [pc, #168]	; (8013770 <prvAddNewTaskToReadyList+0xc8>)
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80136cc:	4b27      	ldr	r3, [pc, #156]	; (801376c <prvAddNewTaskToReadyList+0xc4>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	2b01      	cmp	r3, #1
 80136d2:	d110      	bne.n	80136f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80136d4:	f000 fcbc 	bl	8014050 <prvInitialiseTaskLists>
 80136d8:	e00d      	b.n	80136f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80136da:	4b26      	ldr	r3, [pc, #152]	; (8013774 <prvAddNewTaskToReadyList+0xcc>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d109      	bne.n	80136f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80136e2:	4b23      	ldr	r3, [pc, #140]	; (8013770 <prvAddNewTaskToReadyList+0xc8>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d802      	bhi.n	80136f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80136f0:	4a1f      	ldr	r2, [pc, #124]	; (8013770 <prvAddNewTaskToReadyList+0xc8>)
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80136f6:	4b20      	ldr	r3, [pc, #128]	; (8013778 <prvAddNewTaskToReadyList+0xd0>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	3301      	adds	r3, #1
 80136fc:	4a1e      	ldr	r2, [pc, #120]	; (8013778 <prvAddNewTaskToReadyList+0xd0>)
 80136fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013700:	4b1d      	ldr	r3, [pc, #116]	; (8013778 <prvAddNewTaskToReadyList+0xd0>)
 8013702:	681a      	ldr	r2, [r3, #0]
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801370c:	4b1b      	ldr	r3, [pc, #108]	; (801377c <prvAddNewTaskToReadyList+0xd4>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	429a      	cmp	r2, r3
 8013712:	d903      	bls.n	801371c <prvAddNewTaskToReadyList+0x74>
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013718:	4a18      	ldr	r2, [pc, #96]	; (801377c <prvAddNewTaskToReadyList+0xd4>)
 801371a:	6013      	str	r3, [r2, #0]
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013720:	4613      	mov	r3, r2
 8013722:	009b      	lsls	r3, r3, #2
 8013724:	4413      	add	r3, r2
 8013726:	009b      	lsls	r3, r3, #2
 8013728:	4a15      	ldr	r2, [pc, #84]	; (8013780 <prvAddNewTaskToReadyList+0xd8>)
 801372a:	441a      	add	r2, r3
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	3304      	adds	r3, #4
 8013730:	4619      	mov	r1, r3
 8013732:	4610      	mov	r0, r2
 8013734:	f7ff f81d 	bl	8012772 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013738:	f001 fb0c 	bl	8014d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801373c:	4b0d      	ldr	r3, [pc, #52]	; (8013774 <prvAddNewTaskToReadyList+0xcc>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d00e      	beq.n	8013762 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013744:	4b0a      	ldr	r3, [pc, #40]	; (8013770 <prvAddNewTaskToReadyList+0xc8>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801374e:	429a      	cmp	r2, r3
 8013750:	d207      	bcs.n	8013762 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013752:	4b0c      	ldr	r3, [pc, #48]	; (8013784 <prvAddNewTaskToReadyList+0xdc>)
 8013754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013758:	601a      	str	r2, [r3, #0]
 801375a:	f3bf 8f4f 	dsb	sy
 801375e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013762:	bf00      	nop
 8013764:	3708      	adds	r7, #8
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}
 801376a:	bf00      	nop
 801376c:	24001880 	.word	0x24001880
 8013770:	240013ac 	.word	0x240013ac
 8013774:	2400188c 	.word	0x2400188c
 8013778:	2400189c 	.word	0x2400189c
 801377c:	24001888 	.word	0x24001888
 8013780:	240013b0 	.word	0x240013b0
 8013784:	e000ed04 	.word	0xe000ed04

08013788 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013788:	b580      	push	{r7, lr}
 801378a:	b084      	sub	sp, #16
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013790:	2300      	movs	r3, #0
 8013792:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d017      	beq.n	80137ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801379a:	4b13      	ldr	r3, [pc, #76]	; (80137e8 <vTaskDelay+0x60>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d00a      	beq.n	80137b8 <vTaskDelay+0x30>
	__asm volatile
 80137a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137a6:	f383 8811 	msr	BASEPRI, r3
 80137aa:	f3bf 8f6f 	isb	sy
 80137ae:	f3bf 8f4f 	dsb	sy
 80137b2:	60bb      	str	r3, [r7, #8]
}
 80137b4:	bf00      	nop
 80137b6:	e7fe      	b.n	80137b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80137b8:	f000 f880 	bl	80138bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80137bc:	2100      	movs	r1, #0
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	f000 fda8 	bl	8014314 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80137c4:	f000 f888 	bl	80138d8 <xTaskResumeAll>
 80137c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d107      	bne.n	80137e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80137d0:	4b06      	ldr	r3, [pc, #24]	; (80137ec <vTaskDelay+0x64>)
 80137d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137d6:	601a      	str	r2, [r3, #0]
 80137d8:	f3bf 8f4f 	dsb	sy
 80137dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80137e0:	bf00      	nop
 80137e2:	3710      	adds	r7, #16
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}
 80137e8:	240018a8 	.word	0x240018a8
 80137ec:	e000ed04 	.word	0xe000ed04

080137f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b08a      	sub	sp, #40	; 0x28
 80137f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80137f6:	2300      	movs	r3, #0
 80137f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80137fa:	2300      	movs	r3, #0
 80137fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80137fe:	463a      	mov	r2, r7
 8013800:	1d39      	adds	r1, r7, #4
 8013802:	f107 0308 	add.w	r3, r7, #8
 8013806:	4618      	mov	r0, r3
 8013808:	f7fe fd64 	bl	80122d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801380c:	6839      	ldr	r1, [r7, #0]
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	68ba      	ldr	r2, [r7, #8]
 8013812:	9202      	str	r2, [sp, #8]
 8013814:	9301      	str	r3, [sp, #4]
 8013816:	2300      	movs	r3, #0
 8013818:	9300      	str	r3, [sp, #0]
 801381a:	2300      	movs	r3, #0
 801381c:	460a      	mov	r2, r1
 801381e:	4921      	ldr	r1, [pc, #132]	; (80138a4 <vTaskStartScheduler+0xb4>)
 8013820:	4821      	ldr	r0, [pc, #132]	; (80138a8 <vTaskStartScheduler+0xb8>)
 8013822:	f7ff fe0f 	bl	8013444 <xTaskCreateStatic>
 8013826:	4603      	mov	r3, r0
 8013828:	4a20      	ldr	r2, [pc, #128]	; (80138ac <vTaskStartScheduler+0xbc>)
 801382a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801382c:	4b1f      	ldr	r3, [pc, #124]	; (80138ac <vTaskStartScheduler+0xbc>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d002      	beq.n	801383a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013834:	2301      	movs	r3, #1
 8013836:	617b      	str	r3, [r7, #20]
 8013838:	e001      	b.n	801383e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801383a:	2300      	movs	r3, #0
 801383c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	2b01      	cmp	r3, #1
 8013842:	d102      	bne.n	801384a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013844:	f000 fdba 	bl	80143bc <xTimerCreateTimerTask>
 8013848:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	2b01      	cmp	r3, #1
 801384e:	d116      	bne.n	801387e <vTaskStartScheduler+0x8e>
	__asm volatile
 8013850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013854:	f383 8811 	msr	BASEPRI, r3
 8013858:	f3bf 8f6f 	isb	sy
 801385c:	f3bf 8f4f 	dsb	sy
 8013860:	613b      	str	r3, [r7, #16]
}
 8013862:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013864:	4b12      	ldr	r3, [pc, #72]	; (80138b0 <vTaskStartScheduler+0xc0>)
 8013866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801386a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801386c:	4b11      	ldr	r3, [pc, #68]	; (80138b4 <vTaskStartScheduler+0xc4>)
 801386e:	2201      	movs	r2, #1
 8013870:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013872:	4b11      	ldr	r3, [pc, #68]	; (80138b8 <vTaskStartScheduler+0xc8>)
 8013874:	2200      	movs	r2, #0
 8013876:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013878:	f001 f99a 	bl	8014bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801387c:	e00e      	b.n	801389c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013884:	d10a      	bne.n	801389c <vTaskStartScheduler+0xac>
	__asm volatile
 8013886:	f04f 0350 	mov.w	r3, #80	; 0x50
 801388a:	f383 8811 	msr	BASEPRI, r3
 801388e:	f3bf 8f6f 	isb	sy
 8013892:	f3bf 8f4f 	dsb	sy
 8013896:	60fb      	str	r3, [r7, #12]
}
 8013898:	bf00      	nop
 801389a:	e7fe      	b.n	801389a <vTaskStartScheduler+0xaa>
}
 801389c:	bf00      	nop
 801389e:	3718      	adds	r7, #24
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}
 80138a4:	08015fe8 	.word	0x08015fe8
 80138a8:	08014021 	.word	0x08014021
 80138ac:	240018a4 	.word	0x240018a4
 80138b0:	240018a0 	.word	0x240018a0
 80138b4:	2400188c 	.word	0x2400188c
 80138b8:	24001884 	.word	0x24001884

080138bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80138bc:	b480      	push	{r7}
 80138be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80138c0:	4b04      	ldr	r3, [pc, #16]	; (80138d4 <vTaskSuspendAll+0x18>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	3301      	adds	r3, #1
 80138c6:	4a03      	ldr	r2, [pc, #12]	; (80138d4 <vTaskSuspendAll+0x18>)
 80138c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80138ca:	bf00      	nop
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr
 80138d4:	240018a8 	.word	0x240018a8

080138d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b084      	sub	sp, #16
 80138dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80138de:	2300      	movs	r3, #0
 80138e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80138e2:	2300      	movs	r3, #0
 80138e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80138e6:	4b42      	ldr	r3, [pc, #264]	; (80139f0 <xTaskResumeAll+0x118>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d10a      	bne.n	8013904 <xTaskResumeAll+0x2c>
	__asm volatile
 80138ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f2:	f383 8811 	msr	BASEPRI, r3
 80138f6:	f3bf 8f6f 	isb	sy
 80138fa:	f3bf 8f4f 	dsb	sy
 80138fe:	603b      	str	r3, [r7, #0]
}
 8013900:	bf00      	nop
 8013902:	e7fe      	b.n	8013902 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013904:	f001 f9f6 	bl	8014cf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013908:	4b39      	ldr	r3, [pc, #228]	; (80139f0 <xTaskResumeAll+0x118>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	3b01      	subs	r3, #1
 801390e:	4a38      	ldr	r2, [pc, #224]	; (80139f0 <xTaskResumeAll+0x118>)
 8013910:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013912:	4b37      	ldr	r3, [pc, #220]	; (80139f0 <xTaskResumeAll+0x118>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d162      	bne.n	80139e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801391a:	4b36      	ldr	r3, [pc, #216]	; (80139f4 <xTaskResumeAll+0x11c>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d05e      	beq.n	80139e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013922:	e02f      	b.n	8013984 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013924:	4b34      	ldr	r3, [pc, #208]	; (80139f8 <xTaskResumeAll+0x120>)
 8013926:	68db      	ldr	r3, [r3, #12]
 8013928:	68db      	ldr	r3, [r3, #12]
 801392a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	3318      	adds	r3, #24
 8013930:	4618      	mov	r0, r3
 8013932:	f7fe ff7b 	bl	801282c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	3304      	adds	r3, #4
 801393a:	4618      	mov	r0, r3
 801393c:	f7fe ff76 	bl	801282c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013944:	4b2d      	ldr	r3, [pc, #180]	; (80139fc <xTaskResumeAll+0x124>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	429a      	cmp	r2, r3
 801394a:	d903      	bls.n	8013954 <xTaskResumeAll+0x7c>
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013950:	4a2a      	ldr	r2, [pc, #168]	; (80139fc <xTaskResumeAll+0x124>)
 8013952:	6013      	str	r3, [r2, #0]
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013958:	4613      	mov	r3, r2
 801395a:	009b      	lsls	r3, r3, #2
 801395c:	4413      	add	r3, r2
 801395e:	009b      	lsls	r3, r3, #2
 8013960:	4a27      	ldr	r2, [pc, #156]	; (8013a00 <xTaskResumeAll+0x128>)
 8013962:	441a      	add	r2, r3
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	3304      	adds	r3, #4
 8013968:	4619      	mov	r1, r3
 801396a:	4610      	mov	r0, r2
 801396c:	f7fe ff01 	bl	8012772 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013974:	4b23      	ldr	r3, [pc, #140]	; (8013a04 <xTaskResumeAll+0x12c>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801397a:	429a      	cmp	r2, r3
 801397c:	d302      	bcc.n	8013984 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801397e:	4b22      	ldr	r3, [pc, #136]	; (8013a08 <xTaskResumeAll+0x130>)
 8013980:	2201      	movs	r2, #1
 8013982:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013984:	4b1c      	ldr	r3, [pc, #112]	; (80139f8 <xTaskResumeAll+0x120>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d1cb      	bne.n	8013924 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d001      	beq.n	8013996 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013992:	f000 fbfb 	bl	801418c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013996:	4b1d      	ldr	r3, [pc, #116]	; (8013a0c <xTaskResumeAll+0x134>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d010      	beq.n	80139c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80139a2:	f000 f847 	bl	8013a34 <xTaskIncrementTick>
 80139a6:	4603      	mov	r3, r0
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d002      	beq.n	80139b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80139ac:	4b16      	ldr	r3, [pc, #88]	; (8013a08 <xTaskResumeAll+0x130>)
 80139ae:	2201      	movs	r2, #1
 80139b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	3b01      	subs	r3, #1
 80139b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d1f1      	bne.n	80139a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80139be:	4b13      	ldr	r3, [pc, #76]	; (8013a0c <xTaskResumeAll+0x134>)
 80139c0:	2200      	movs	r2, #0
 80139c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80139c4:	4b10      	ldr	r3, [pc, #64]	; (8013a08 <xTaskResumeAll+0x130>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d009      	beq.n	80139e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80139cc:	2301      	movs	r3, #1
 80139ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80139d0:	4b0f      	ldr	r3, [pc, #60]	; (8013a10 <xTaskResumeAll+0x138>)
 80139d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139d6:	601a      	str	r2, [r3, #0]
 80139d8:	f3bf 8f4f 	dsb	sy
 80139dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80139e0:	f001 f9b8 	bl	8014d54 <vPortExitCritical>

	return xAlreadyYielded;
 80139e4:	68bb      	ldr	r3, [r7, #8]
}
 80139e6:	4618      	mov	r0, r3
 80139e8:	3710      	adds	r7, #16
 80139ea:	46bd      	mov	sp, r7
 80139ec:	bd80      	pop	{r7, pc}
 80139ee:	bf00      	nop
 80139f0:	240018a8 	.word	0x240018a8
 80139f4:	24001880 	.word	0x24001880
 80139f8:	24001840 	.word	0x24001840
 80139fc:	24001888 	.word	0x24001888
 8013a00:	240013b0 	.word	0x240013b0
 8013a04:	240013ac 	.word	0x240013ac
 8013a08:	24001894 	.word	0x24001894
 8013a0c:	24001890 	.word	0x24001890
 8013a10:	e000ed04 	.word	0xe000ed04

08013a14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013a14:	b480      	push	{r7}
 8013a16:	b083      	sub	sp, #12
 8013a18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013a1a:	4b05      	ldr	r3, [pc, #20]	; (8013a30 <xTaskGetTickCount+0x1c>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013a20:	687b      	ldr	r3, [r7, #4]
}
 8013a22:	4618      	mov	r0, r3
 8013a24:	370c      	adds	r7, #12
 8013a26:	46bd      	mov	sp, r7
 8013a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2c:	4770      	bx	lr
 8013a2e:	bf00      	nop
 8013a30:	24001884 	.word	0x24001884

08013a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b086      	sub	sp, #24
 8013a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a3e:	4b53      	ldr	r3, [pc, #332]	; (8013b8c <xTaskIncrementTick+0x158>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	f040 8095 	bne.w	8013b72 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013a48:	4b51      	ldr	r3, [pc, #324]	; (8013b90 <xTaskIncrementTick+0x15c>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	3301      	adds	r3, #1
 8013a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013a50:	4a4f      	ldr	r2, [pc, #316]	; (8013b90 <xTaskIncrementTick+0x15c>)
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013a56:	693b      	ldr	r3, [r7, #16]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d120      	bne.n	8013a9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013a5c:	4b4d      	ldr	r3, [pc, #308]	; (8013b94 <xTaskIncrementTick+0x160>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d00a      	beq.n	8013a7c <xTaskIncrementTick+0x48>
	__asm volatile
 8013a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a6a:	f383 8811 	msr	BASEPRI, r3
 8013a6e:	f3bf 8f6f 	isb	sy
 8013a72:	f3bf 8f4f 	dsb	sy
 8013a76:	603b      	str	r3, [r7, #0]
}
 8013a78:	bf00      	nop
 8013a7a:	e7fe      	b.n	8013a7a <xTaskIncrementTick+0x46>
 8013a7c:	4b45      	ldr	r3, [pc, #276]	; (8013b94 <xTaskIncrementTick+0x160>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	60fb      	str	r3, [r7, #12]
 8013a82:	4b45      	ldr	r3, [pc, #276]	; (8013b98 <xTaskIncrementTick+0x164>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	4a43      	ldr	r2, [pc, #268]	; (8013b94 <xTaskIncrementTick+0x160>)
 8013a88:	6013      	str	r3, [r2, #0]
 8013a8a:	4a43      	ldr	r2, [pc, #268]	; (8013b98 <xTaskIncrementTick+0x164>)
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	6013      	str	r3, [r2, #0]
 8013a90:	4b42      	ldr	r3, [pc, #264]	; (8013b9c <xTaskIncrementTick+0x168>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	3301      	adds	r3, #1
 8013a96:	4a41      	ldr	r2, [pc, #260]	; (8013b9c <xTaskIncrementTick+0x168>)
 8013a98:	6013      	str	r3, [r2, #0]
 8013a9a:	f000 fb77 	bl	801418c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013a9e:	4b40      	ldr	r3, [pc, #256]	; (8013ba0 <xTaskIncrementTick+0x16c>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	693a      	ldr	r2, [r7, #16]
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d349      	bcc.n	8013b3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013aa8:	4b3a      	ldr	r3, [pc, #232]	; (8013b94 <xTaskIncrementTick+0x160>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d104      	bne.n	8013abc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ab2:	4b3b      	ldr	r3, [pc, #236]	; (8013ba0 <xTaskIncrementTick+0x16c>)
 8013ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013ab8:	601a      	str	r2, [r3, #0]
					break;
 8013aba:	e03f      	b.n	8013b3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013abc:	4b35      	ldr	r3, [pc, #212]	; (8013b94 <xTaskIncrementTick+0x160>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	68db      	ldr	r3, [r3, #12]
 8013ac2:	68db      	ldr	r3, [r3, #12]
 8013ac4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	685b      	ldr	r3, [r3, #4]
 8013aca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013acc:	693a      	ldr	r2, [r7, #16]
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d203      	bcs.n	8013adc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013ad4:	4a32      	ldr	r2, [pc, #200]	; (8013ba0 <xTaskIncrementTick+0x16c>)
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013ada:	e02f      	b.n	8013b3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	3304      	adds	r3, #4
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7fe fea3 	bl	801282c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d004      	beq.n	8013af8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	3318      	adds	r3, #24
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7fe fe9a 	bl	801282c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013afc:	4b29      	ldr	r3, [pc, #164]	; (8013ba4 <xTaskIncrementTick+0x170>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d903      	bls.n	8013b0c <xTaskIncrementTick+0xd8>
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b08:	4a26      	ldr	r2, [pc, #152]	; (8013ba4 <xTaskIncrementTick+0x170>)
 8013b0a:	6013      	str	r3, [r2, #0]
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b10:	4613      	mov	r3, r2
 8013b12:	009b      	lsls	r3, r3, #2
 8013b14:	4413      	add	r3, r2
 8013b16:	009b      	lsls	r3, r3, #2
 8013b18:	4a23      	ldr	r2, [pc, #140]	; (8013ba8 <xTaskIncrementTick+0x174>)
 8013b1a:	441a      	add	r2, r3
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	3304      	adds	r3, #4
 8013b20:	4619      	mov	r1, r3
 8013b22:	4610      	mov	r0, r2
 8013b24:	f7fe fe25 	bl	8012772 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b2c:	4b1f      	ldr	r3, [pc, #124]	; (8013bac <xTaskIncrementTick+0x178>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d3b8      	bcc.n	8013aa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013b36:	2301      	movs	r3, #1
 8013b38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013b3a:	e7b5      	b.n	8013aa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013b3c:	4b1b      	ldr	r3, [pc, #108]	; (8013bac <xTaskIncrementTick+0x178>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b42:	4919      	ldr	r1, [pc, #100]	; (8013ba8 <xTaskIncrementTick+0x174>)
 8013b44:	4613      	mov	r3, r2
 8013b46:	009b      	lsls	r3, r3, #2
 8013b48:	4413      	add	r3, r2
 8013b4a:	009b      	lsls	r3, r3, #2
 8013b4c:	440b      	add	r3, r1
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	2b01      	cmp	r3, #1
 8013b52:	d901      	bls.n	8013b58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013b54:	2301      	movs	r3, #1
 8013b56:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8013b58:	4b15      	ldr	r3, [pc, #84]	; (8013bb0 <xTaskIncrementTick+0x17c>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d101      	bne.n	8013b64 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8013b60:	f7ed f8fa 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013b64:	4b13      	ldr	r3, [pc, #76]	; (8013bb4 <xTaskIncrementTick+0x180>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d009      	beq.n	8013b80 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	617b      	str	r3, [r7, #20]
 8013b70:	e006      	b.n	8013b80 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013b72:	4b0f      	ldr	r3, [pc, #60]	; (8013bb0 <xTaskIncrementTick+0x17c>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	3301      	adds	r3, #1
 8013b78:	4a0d      	ldr	r2, [pc, #52]	; (8013bb0 <xTaskIncrementTick+0x17c>)
 8013b7a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8013b7c:	f7ed f8ec 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8013b80:	697b      	ldr	r3, [r7, #20]
}
 8013b82:	4618      	mov	r0, r3
 8013b84:	3718      	adds	r7, #24
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}
 8013b8a:	bf00      	nop
 8013b8c:	240018a8 	.word	0x240018a8
 8013b90:	24001884 	.word	0x24001884
 8013b94:	24001838 	.word	0x24001838
 8013b98:	2400183c 	.word	0x2400183c
 8013b9c:	24001898 	.word	0x24001898
 8013ba0:	240018a0 	.word	0x240018a0
 8013ba4:	24001888 	.word	0x24001888
 8013ba8:	240013b0 	.word	0x240013b0
 8013bac:	240013ac 	.word	0x240013ac
 8013bb0:	24001890 	.word	0x24001890
 8013bb4:	24001894 	.word	0x24001894

08013bb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013bb8:	b480      	push	{r7}
 8013bba:	b085      	sub	sp, #20
 8013bbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013bbe:	4b28      	ldr	r3, [pc, #160]	; (8013c60 <vTaskSwitchContext+0xa8>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d003      	beq.n	8013bce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013bc6:	4b27      	ldr	r3, [pc, #156]	; (8013c64 <vTaskSwitchContext+0xac>)
 8013bc8:	2201      	movs	r2, #1
 8013bca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013bcc:	e041      	b.n	8013c52 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8013bce:	4b25      	ldr	r3, [pc, #148]	; (8013c64 <vTaskSwitchContext+0xac>)
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bd4:	4b24      	ldr	r3, [pc, #144]	; (8013c68 <vTaskSwitchContext+0xb0>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	60fb      	str	r3, [r7, #12]
 8013bda:	e010      	b.n	8013bfe <vTaskSwitchContext+0x46>
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d10a      	bne.n	8013bf8 <vTaskSwitchContext+0x40>
	__asm volatile
 8013be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be6:	f383 8811 	msr	BASEPRI, r3
 8013bea:	f3bf 8f6f 	isb	sy
 8013bee:	f3bf 8f4f 	dsb	sy
 8013bf2:	607b      	str	r3, [r7, #4]
}
 8013bf4:	bf00      	nop
 8013bf6:	e7fe      	b.n	8013bf6 <vTaskSwitchContext+0x3e>
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	3b01      	subs	r3, #1
 8013bfc:	60fb      	str	r3, [r7, #12]
 8013bfe:	491b      	ldr	r1, [pc, #108]	; (8013c6c <vTaskSwitchContext+0xb4>)
 8013c00:	68fa      	ldr	r2, [r7, #12]
 8013c02:	4613      	mov	r3, r2
 8013c04:	009b      	lsls	r3, r3, #2
 8013c06:	4413      	add	r3, r2
 8013c08:	009b      	lsls	r3, r3, #2
 8013c0a:	440b      	add	r3, r1
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d0e4      	beq.n	8013bdc <vTaskSwitchContext+0x24>
 8013c12:	68fa      	ldr	r2, [r7, #12]
 8013c14:	4613      	mov	r3, r2
 8013c16:	009b      	lsls	r3, r3, #2
 8013c18:	4413      	add	r3, r2
 8013c1a:	009b      	lsls	r3, r3, #2
 8013c1c:	4a13      	ldr	r2, [pc, #76]	; (8013c6c <vTaskSwitchContext+0xb4>)
 8013c1e:	4413      	add	r3, r2
 8013c20:	60bb      	str	r3, [r7, #8]
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	685b      	ldr	r3, [r3, #4]
 8013c26:	685a      	ldr	r2, [r3, #4]
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	605a      	str	r2, [r3, #4]
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	685a      	ldr	r2, [r3, #4]
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	3308      	adds	r3, #8
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d104      	bne.n	8013c42 <vTaskSwitchContext+0x8a>
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	685b      	ldr	r3, [r3, #4]
 8013c3c:	685a      	ldr	r2, [r3, #4]
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	605a      	str	r2, [r3, #4]
 8013c42:	68bb      	ldr	r3, [r7, #8]
 8013c44:	685b      	ldr	r3, [r3, #4]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	4a09      	ldr	r2, [pc, #36]	; (8013c70 <vTaskSwitchContext+0xb8>)
 8013c4a:	6013      	str	r3, [r2, #0]
 8013c4c:	4a06      	ldr	r2, [pc, #24]	; (8013c68 <vTaskSwitchContext+0xb0>)
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	6013      	str	r3, [r2, #0]
}
 8013c52:	bf00      	nop
 8013c54:	3714      	adds	r7, #20
 8013c56:	46bd      	mov	sp, r7
 8013c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5c:	4770      	bx	lr
 8013c5e:	bf00      	nop
 8013c60:	240018a8 	.word	0x240018a8
 8013c64:	24001894 	.word	0x24001894
 8013c68:	24001888 	.word	0x24001888
 8013c6c:	240013b0 	.word	0x240013b0
 8013c70:	240013ac 	.word	0x240013ac

08013c74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b084      	sub	sp, #16
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d10a      	bne.n	8013c9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c88:	f383 8811 	msr	BASEPRI, r3
 8013c8c:	f3bf 8f6f 	isb	sy
 8013c90:	f3bf 8f4f 	dsb	sy
 8013c94:	60fb      	str	r3, [r7, #12]
}
 8013c96:	bf00      	nop
 8013c98:	e7fe      	b.n	8013c98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013c9a:	4b07      	ldr	r3, [pc, #28]	; (8013cb8 <vTaskPlaceOnEventList+0x44>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	3318      	adds	r3, #24
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f7fe fd89 	bl	80127ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013ca8:	2101      	movs	r1, #1
 8013caa:	6838      	ldr	r0, [r7, #0]
 8013cac:	f000 fb32 	bl	8014314 <prvAddCurrentTaskToDelayedList>
}
 8013cb0:	bf00      	nop
 8013cb2:	3710      	adds	r7, #16
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}
 8013cb8:	240013ac 	.word	0x240013ac

08013cbc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b086      	sub	sp, #24
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	60f8      	str	r0, [r7, #12]
 8013cc4:	60b9      	str	r1, [r7, #8]
 8013cc6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d10a      	bne.n	8013ce4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8013cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd2:	f383 8811 	msr	BASEPRI, r3
 8013cd6:	f3bf 8f6f 	isb	sy
 8013cda:	f3bf 8f4f 	dsb	sy
 8013cde:	617b      	str	r3, [r7, #20]
}
 8013ce0:	bf00      	nop
 8013ce2:	e7fe      	b.n	8013ce2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8013ce4:	4b11      	ldr	r3, [pc, #68]	; (8013d2c <vTaskPlaceOnUnorderedEventList+0x70>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d10a      	bne.n	8013d02 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8013cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf0:	f383 8811 	msr	BASEPRI, r3
 8013cf4:	f3bf 8f6f 	isb	sy
 8013cf8:	f3bf 8f4f 	dsb	sy
 8013cfc:	613b      	str	r3, [r7, #16]
}
 8013cfe:	bf00      	nop
 8013d00:	e7fe      	b.n	8013d00 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013d02:	4b0b      	ldr	r3, [pc, #44]	; (8013d30 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	68ba      	ldr	r2, [r7, #8]
 8013d08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8013d0c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013d0e:	4b08      	ldr	r3, [pc, #32]	; (8013d30 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	3318      	adds	r3, #24
 8013d14:	4619      	mov	r1, r3
 8013d16:	68f8      	ldr	r0, [r7, #12]
 8013d18:	f7fe fd2b 	bl	8012772 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013d1c:	2101      	movs	r1, #1
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f000 faf8 	bl	8014314 <prvAddCurrentTaskToDelayedList>
}
 8013d24:	bf00      	nop
 8013d26:	3718      	adds	r7, #24
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}
 8013d2c:	240018a8 	.word	0x240018a8
 8013d30:	240013ac 	.word	0x240013ac

08013d34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b086      	sub	sp, #24
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d10a      	bne.n	8013d5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d4a:	f383 8811 	msr	BASEPRI, r3
 8013d4e:	f3bf 8f6f 	isb	sy
 8013d52:	f3bf 8f4f 	dsb	sy
 8013d56:	617b      	str	r3, [r7, #20]
}
 8013d58:	bf00      	nop
 8013d5a:	e7fe      	b.n	8013d5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013d5c:	4b0a      	ldr	r3, [pc, #40]	; (8013d88 <vTaskPlaceOnEventListRestricted+0x54>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	3318      	adds	r3, #24
 8013d62:	4619      	mov	r1, r3
 8013d64:	68f8      	ldr	r0, [r7, #12]
 8013d66:	f7fe fd04 	bl	8012772 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d002      	beq.n	8013d76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013d76:	6879      	ldr	r1, [r7, #4]
 8013d78:	68b8      	ldr	r0, [r7, #8]
 8013d7a:	f000 facb 	bl	8014314 <prvAddCurrentTaskToDelayedList>
	}
 8013d7e:	bf00      	nop
 8013d80:	3718      	adds	r7, #24
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}
 8013d86:	bf00      	nop
 8013d88:	240013ac 	.word	0x240013ac

08013d8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b086      	sub	sp, #24
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	68db      	ldr	r3, [r3, #12]
 8013d98:	68db      	ldr	r3, [r3, #12]
 8013d9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d10a      	bne.n	8013db8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da6:	f383 8811 	msr	BASEPRI, r3
 8013daa:	f3bf 8f6f 	isb	sy
 8013dae:	f3bf 8f4f 	dsb	sy
 8013db2:	60fb      	str	r3, [r7, #12]
}
 8013db4:	bf00      	nop
 8013db6:	e7fe      	b.n	8013db6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	3318      	adds	r3, #24
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7fe fd35 	bl	801282c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013dc2:	4b1e      	ldr	r3, [pc, #120]	; (8013e3c <xTaskRemoveFromEventList+0xb0>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d11d      	bne.n	8013e06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013dca:	693b      	ldr	r3, [r7, #16]
 8013dcc:	3304      	adds	r3, #4
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f7fe fd2c 	bl	801282c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dd8:	4b19      	ldr	r3, [pc, #100]	; (8013e40 <xTaskRemoveFromEventList+0xb4>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d903      	bls.n	8013de8 <xTaskRemoveFromEventList+0x5c>
 8013de0:	693b      	ldr	r3, [r7, #16]
 8013de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013de4:	4a16      	ldr	r2, [pc, #88]	; (8013e40 <xTaskRemoveFromEventList+0xb4>)
 8013de6:	6013      	str	r3, [r2, #0]
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dec:	4613      	mov	r3, r2
 8013dee:	009b      	lsls	r3, r3, #2
 8013df0:	4413      	add	r3, r2
 8013df2:	009b      	lsls	r3, r3, #2
 8013df4:	4a13      	ldr	r2, [pc, #76]	; (8013e44 <xTaskRemoveFromEventList+0xb8>)
 8013df6:	441a      	add	r2, r3
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	3304      	adds	r3, #4
 8013dfc:	4619      	mov	r1, r3
 8013dfe:	4610      	mov	r0, r2
 8013e00:	f7fe fcb7 	bl	8012772 <vListInsertEnd>
 8013e04:	e005      	b.n	8013e12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	3318      	adds	r3, #24
 8013e0a:	4619      	mov	r1, r3
 8013e0c:	480e      	ldr	r0, [pc, #56]	; (8013e48 <xTaskRemoveFromEventList+0xbc>)
 8013e0e:	f7fe fcb0 	bl	8012772 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e16:	4b0d      	ldr	r3, [pc, #52]	; (8013e4c <xTaskRemoveFromEventList+0xc0>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d905      	bls.n	8013e2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013e20:	2301      	movs	r3, #1
 8013e22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013e24:	4b0a      	ldr	r3, [pc, #40]	; (8013e50 <xTaskRemoveFromEventList+0xc4>)
 8013e26:	2201      	movs	r2, #1
 8013e28:	601a      	str	r2, [r3, #0]
 8013e2a:	e001      	b.n	8013e30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013e30:	697b      	ldr	r3, [r7, #20]
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3718      	adds	r7, #24
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	bf00      	nop
 8013e3c:	240018a8 	.word	0x240018a8
 8013e40:	24001888 	.word	0x24001888
 8013e44:	240013b0 	.word	0x240013b0
 8013e48:	24001840 	.word	0x24001840
 8013e4c:	240013ac 	.word	0x240013ac
 8013e50:	24001894 	.word	0x24001894

08013e54 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b086      	sub	sp, #24
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
 8013e5c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8013e5e:	4b29      	ldr	r3, [pc, #164]	; (8013f04 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d10a      	bne.n	8013e7c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8013e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e6a:	f383 8811 	msr	BASEPRI, r3
 8013e6e:	f3bf 8f6f 	isb	sy
 8013e72:	f3bf 8f4f 	dsb	sy
 8013e76:	613b      	str	r3, [r7, #16]
}
 8013e78:	bf00      	nop
 8013e7a:	e7fe      	b.n	8013e7a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	68db      	ldr	r3, [r3, #12]
 8013e8a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d10a      	bne.n	8013ea8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8013e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e96:	f383 8811 	msr	BASEPRI, r3
 8013e9a:	f3bf 8f6f 	isb	sy
 8013e9e:	f3bf 8f4f 	dsb	sy
 8013ea2:	60fb      	str	r3, [r7, #12]
}
 8013ea4:	bf00      	nop
 8013ea6:	e7fe      	b.n	8013ea6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f7fe fcbf 	bl	801282c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	3304      	adds	r3, #4
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7fe fcba 	bl	801282c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8013eb8:	697b      	ldr	r3, [r7, #20]
 8013eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ebc:	4b12      	ldr	r3, [pc, #72]	; (8013f08 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d903      	bls.n	8013ecc <vTaskRemoveFromUnorderedEventList+0x78>
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ec8:	4a0f      	ldr	r2, [pc, #60]	; (8013f08 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8013eca:	6013      	str	r3, [r2, #0]
 8013ecc:	697b      	ldr	r3, [r7, #20]
 8013ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ed0:	4613      	mov	r3, r2
 8013ed2:	009b      	lsls	r3, r3, #2
 8013ed4:	4413      	add	r3, r2
 8013ed6:	009b      	lsls	r3, r3, #2
 8013ed8:	4a0c      	ldr	r2, [pc, #48]	; (8013f0c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8013eda:	441a      	add	r2, r3
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	3304      	adds	r3, #4
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	4610      	mov	r0, r2
 8013ee4:	f7fe fc45 	bl	8012772 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013ee8:	697b      	ldr	r3, [r7, #20]
 8013eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eec:	4b08      	ldr	r3, [pc, #32]	; (8013f10 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	d902      	bls.n	8013efc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8013ef6:	4b07      	ldr	r3, [pc, #28]	; (8013f14 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8013ef8:	2201      	movs	r2, #1
 8013efa:	601a      	str	r2, [r3, #0]
	}
}
 8013efc:	bf00      	nop
 8013efe:	3718      	adds	r7, #24
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}
 8013f04:	240018a8 	.word	0x240018a8
 8013f08:	24001888 	.word	0x24001888
 8013f0c:	240013b0 	.word	0x240013b0
 8013f10:	240013ac 	.word	0x240013ac
 8013f14:	24001894 	.word	0x24001894

08013f18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b083      	sub	sp, #12
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013f20:	4b06      	ldr	r3, [pc, #24]	; (8013f3c <vTaskInternalSetTimeOutState+0x24>)
 8013f22:	681a      	ldr	r2, [r3, #0]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013f28:	4b05      	ldr	r3, [pc, #20]	; (8013f40 <vTaskInternalSetTimeOutState+0x28>)
 8013f2a:	681a      	ldr	r2, [r3, #0]
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	605a      	str	r2, [r3, #4]
}
 8013f30:	bf00      	nop
 8013f32:	370c      	adds	r7, #12
 8013f34:	46bd      	mov	sp, r7
 8013f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3a:	4770      	bx	lr
 8013f3c:	24001898 	.word	0x24001898
 8013f40:	24001884 	.word	0x24001884

08013f44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b088      	sub	sp, #32
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
 8013f4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d10a      	bne.n	8013f6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f58:	f383 8811 	msr	BASEPRI, r3
 8013f5c:	f3bf 8f6f 	isb	sy
 8013f60:	f3bf 8f4f 	dsb	sy
 8013f64:	613b      	str	r3, [r7, #16]
}
 8013f66:	bf00      	nop
 8013f68:	e7fe      	b.n	8013f68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d10a      	bne.n	8013f86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f74:	f383 8811 	msr	BASEPRI, r3
 8013f78:	f3bf 8f6f 	isb	sy
 8013f7c:	f3bf 8f4f 	dsb	sy
 8013f80:	60fb      	str	r3, [r7, #12]
}
 8013f82:	bf00      	nop
 8013f84:	e7fe      	b.n	8013f84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013f86:	f000 feb5 	bl	8014cf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013f8a:	4b1d      	ldr	r3, [pc, #116]	; (8014000 <xTaskCheckForTimeOut+0xbc>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	685b      	ldr	r3, [r3, #4]
 8013f94:	69ba      	ldr	r2, [r7, #24]
 8013f96:	1ad3      	subs	r3, r2, r3
 8013f98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fa2:	d102      	bne.n	8013faa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	61fb      	str	r3, [r7, #28]
 8013fa8:	e023      	b.n	8013ff2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681a      	ldr	r2, [r3, #0]
 8013fae:	4b15      	ldr	r3, [pc, #84]	; (8014004 <xTaskCheckForTimeOut+0xc0>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d007      	beq.n	8013fc6 <xTaskCheckForTimeOut+0x82>
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	69ba      	ldr	r2, [r7, #24]
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d302      	bcc.n	8013fc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	61fb      	str	r3, [r7, #28]
 8013fc4:	e015      	b.n	8013ff2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	697a      	ldr	r2, [r7, #20]
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d20b      	bcs.n	8013fe8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	681a      	ldr	r2, [r3, #0]
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	1ad2      	subs	r2, r2, r3
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f7ff ff9b 	bl	8013f18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	61fb      	str	r3, [r7, #28]
 8013fe6:	e004      	b.n	8013ff2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	2200      	movs	r2, #0
 8013fec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013fee:	2301      	movs	r3, #1
 8013ff0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013ff2:	f000 feaf 	bl	8014d54 <vPortExitCritical>

	return xReturn;
 8013ff6:	69fb      	ldr	r3, [r7, #28]
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	3720      	adds	r7, #32
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}
 8014000:	24001884 	.word	0x24001884
 8014004:	24001898 	.word	0x24001898

08014008 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014008:	b480      	push	{r7}
 801400a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801400c:	4b03      	ldr	r3, [pc, #12]	; (801401c <vTaskMissedYield+0x14>)
 801400e:	2201      	movs	r2, #1
 8014010:	601a      	str	r2, [r3, #0]
}
 8014012:	bf00      	nop
 8014014:	46bd      	mov	sp, r7
 8014016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401a:	4770      	bx	lr
 801401c:	24001894 	.word	0x24001894

08014020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b082      	sub	sp, #8
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014028:	f000 f852 	bl	80140d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801402c:	4b06      	ldr	r3, [pc, #24]	; (8014048 <prvIdleTask+0x28>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	2b01      	cmp	r3, #1
 8014032:	d9f9      	bls.n	8014028 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014034:	4b05      	ldr	r3, [pc, #20]	; (801404c <prvIdleTask+0x2c>)
 8014036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801403a:	601a      	str	r2, [r3, #0]
 801403c:	f3bf 8f4f 	dsb	sy
 8014040:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014044:	e7f0      	b.n	8014028 <prvIdleTask+0x8>
 8014046:	bf00      	nop
 8014048:	240013b0 	.word	0x240013b0
 801404c:	e000ed04 	.word	0xe000ed04

08014050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014056:	2300      	movs	r3, #0
 8014058:	607b      	str	r3, [r7, #4]
 801405a:	e00c      	b.n	8014076 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801405c:	687a      	ldr	r2, [r7, #4]
 801405e:	4613      	mov	r3, r2
 8014060:	009b      	lsls	r3, r3, #2
 8014062:	4413      	add	r3, r2
 8014064:	009b      	lsls	r3, r3, #2
 8014066:	4a12      	ldr	r2, [pc, #72]	; (80140b0 <prvInitialiseTaskLists+0x60>)
 8014068:	4413      	add	r3, r2
 801406a:	4618      	mov	r0, r3
 801406c:	f7fe fb54 	bl	8012718 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	3301      	adds	r3, #1
 8014074:	607b      	str	r3, [r7, #4]
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2b37      	cmp	r3, #55	; 0x37
 801407a:	d9ef      	bls.n	801405c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801407c:	480d      	ldr	r0, [pc, #52]	; (80140b4 <prvInitialiseTaskLists+0x64>)
 801407e:	f7fe fb4b 	bl	8012718 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014082:	480d      	ldr	r0, [pc, #52]	; (80140b8 <prvInitialiseTaskLists+0x68>)
 8014084:	f7fe fb48 	bl	8012718 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014088:	480c      	ldr	r0, [pc, #48]	; (80140bc <prvInitialiseTaskLists+0x6c>)
 801408a:	f7fe fb45 	bl	8012718 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801408e:	480c      	ldr	r0, [pc, #48]	; (80140c0 <prvInitialiseTaskLists+0x70>)
 8014090:	f7fe fb42 	bl	8012718 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014094:	480b      	ldr	r0, [pc, #44]	; (80140c4 <prvInitialiseTaskLists+0x74>)
 8014096:	f7fe fb3f 	bl	8012718 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801409a:	4b0b      	ldr	r3, [pc, #44]	; (80140c8 <prvInitialiseTaskLists+0x78>)
 801409c:	4a05      	ldr	r2, [pc, #20]	; (80140b4 <prvInitialiseTaskLists+0x64>)
 801409e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80140a0:	4b0a      	ldr	r3, [pc, #40]	; (80140cc <prvInitialiseTaskLists+0x7c>)
 80140a2:	4a05      	ldr	r2, [pc, #20]	; (80140b8 <prvInitialiseTaskLists+0x68>)
 80140a4:	601a      	str	r2, [r3, #0]
}
 80140a6:	bf00      	nop
 80140a8:	3708      	adds	r7, #8
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}
 80140ae:	bf00      	nop
 80140b0:	240013b0 	.word	0x240013b0
 80140b4:	24001810 	.word	0x24001810
 80140b8:	24001824 	.word	0x24001824
 80140bc:	24001840 	.word	0x24001840
 80140c0:	24001854 	.word	0x24001854
 80140c4:	2400186c 	.word	0x2400186c
 80140c8:	24001838 	.word	0x24001838
 80140cc:	2400183c 	.word	0x2400183c

080140d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80140d6:	e019      	b.n	801410c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80140d8:	f000 fe0c 	bl	8014cf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140dc:	4b10      	ldr	r3, [pc, #64]	; (8014120 <prvCheckTasksWaitingTermination+0x50>)
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	68db      	ldr	r3, [r3, #12]
 80140e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	3304      	adds	r3, #4
 80140e8:	4618      	mov	r0, r3
 80140ea:	f7fe fb9f 	bl	801282c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80140ee:	4b0d      	ldr	r3, [pc, #52]	; (8014124 <prvCheckTasksWaitingTermination+0x54>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	3b01      	subs	r3, #1
 80140f4:	4a0b      	ldr	r2, [pc, #44]	; (8014124 <prvCheckTasksWaitingTermination+0x54>)
 80140f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80140f8:	4b0b      	ldr	r3, [pc, #44]	; (8014128 <prvCheckTasksWaitingTermination+0x58>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	3b01      	subs	r3, #1
 80140fe:	4a0a      	ldr	r2, [pc, #40]	; (8014128 <prvCheckTasksWaitingTermination+0x58>)
 8014100:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014102:	f000 fe27 	bl	8014d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f000 f810 	bl	801412c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801410c:	4b06      	ldr	r3, [pc, #24]	; (8014128 <prvCheckTasksWaitingTermination+0x58>)
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d1e1      	bne.n	80140d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014114:	bf00      	nop
 8014116:	bf00      	nop
 8014118:	3708      	adds	r7, #8
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	24001854 	.word	0x24001854
 8014124:	24001880 	.word	0x24001880
 8014128:	24001868 	.word	0x24001868

0801412c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801412c:	b580      	push	{r7, lr}
 801412e:	b084      	sub	sp, #16
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801413a:	2b00      	cmp	r3, #0
 801413c:	d108      	bne.n	8014150 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014142:	4618      	mov	r0, r3
 8014144:	f000 ffc4 	bl	80150d0 <vPortFree>
				vPortFree( pxTCB );
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f000 ffc1 	bl	80150d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801414e:	e018      	b.n	8014182 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014156:	2b01      	cmp	r3, #1
 8014158:	d103      	bne.n	8014162 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f000 ffb8 	bl	80150d0 <vPortFree>
	}
 8014160:	e00f      	b.n	8014182 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014168:	2b02      	cmp	r3, #2
 801416a:	d00a      	beq.n	8014182 <prvDeleteTCB+0x56>
	__asm volatile
 801416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014170:	f383 8811 	msr	BASEPRI, r3
 8014174:	f3bf 8f6f 	isb	sy
 8014178:	f3bf 8f4f 	dsb	sy
 801417c:	60fb      	str	r3, [r7, #12]
}
 801417e:	bf00      	nop
 8014180:	e7fe      	b.n	8014180 <prvDeleteTCB+0x54>
	}
 8014182:	bf00      	nop
 8014184:	3710      	adds	r7, #16
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
	...

0801418c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801418c:	b480      	push	{r7}
 801418e:	b083      	sub	sp, #12
 8014190:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014192:	4b0c      	ldr	r3, [pc, #48]	; (80141c4 <prvResetNextTaskUnblockTime+0x38>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d104      	bne.n	80141a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801419c:	4b0a      	ldr	r3, [pc, #40]	; (80141c8 <prvResetNextTaskUnblockTime+0x3c>)
 801419e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80141a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80141a4:	e008      	b.n	80141b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141a6:	4b07      	ldr	r3, [pc, #28]	; (80141c4 <prvResetNextTaskUnblockTime+0x38>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	68db      	ldr	r3, [r3, #12]
 80141ac:	68db      	ldr	r3, [r3, #12]
 80141ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	685b      	ldr	r3, [r3, #4]
 80141b4:	4a04      	ldr	r2, [pc, #16]	; (80141c8 <prvResetNextTaskUnblockTime+0x3c>)
 80141b6:	6013      	str	r3, [r2, #0]
}
 80141b8:	bf00      	nop
 80141ba:	370c      	adds	r7, #12
 80141bc:	46bd      	mov	sp, r7
 80141be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c2:	4770      	bx	lr
 80141c4:	24001838 	.word	0x24001838
 80141c8:	240018a0 	.word	0x240018a0

080141cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80141cc:	b480      	push	{r7}
 80141ce:	b083      	sub	sp, #12
 80141d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80141d2:	4b0b      	ldr	r3, [pc, #44]	; (8014200 <xTaskGetSchedulerState+0x34>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d102      	bne.n	80141e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80141da:	2301      	movs	r3, #1
 80141dc:	607b      	str	r3, [r7, #4]
 80141de:	e008      	b.n	80141f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80141e0:	4b08      	ldr	r3, [pc, #32]	; (8014204 <xTaskGetSchedulerState+0x38>)
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d102      	bne.n	80141ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80141e8:	2302      	movs	r3, #2
 80141ea:	607b      	str	r3, [r7, #4]
 80141ec:	e001      	b.n	80141f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80141ee:	2300      	movs	r3, #0
 80141f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80141f2:	687b      	ldr	r3, [r7, #4]
	}
 80141f4:	4618      	mov	r0, r3
 80141f6:	370c      	adds	r7, #12
 80141f8:	46bd      	mov	sp, r7
 80141fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fe:	4770      	bx	lr
 8014200:	2400188c 	.word	0x2400188c
 8014204:	240018a8 	.word	0x240018a8

08014208 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014208:	b580      	push	{r7, lr}
 801420a:	b086      	sub	sp, #24
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014214:	2300      	movs	r3, #0
 8014216:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d056      	beq.n	80142cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801421e:	4b2e      	ldr	r3, [pc, #184]	; (80142d8 <xTaskPriorityDisinherit+0xd0>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	693a      	ldr	r2, [r7, #16]
 8014224:	429a      	cmp	r2, r3
 8014226:	d00a      	beq.n	801423e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801422c:	f383 8811 	msr	BASEPRI, r3
 8014230:	f3bf 8f6f 	isb	sy
 8014234:	f3bf 8f4f 	dsb	sy
 8014238:	60fb      	str	r3, [r7, #12]
}
 801423a:	bf00      	nop
 801423c:	e7fe      	b.n	801423c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014242:	2b00      	cmp	r3, #0
 8014244:	d10a      	bne.n	801425c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801424a:	f383 8811 	msr	BASEPRI, r3
 801424e:	f3bf 8f6f 	isb	sy
 8014252:	f3bf 8f4f 	dsb	sy
 8014256:	60bb      	str	r3, [r7, #8]
}
 8014258:	bf00      	nop
 801425a:	e7fe      	b.n	801425a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801425c:	693b      	ldr	r3, [r7, #16]
 801425e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014260:	1e5a      	subs	r2, r3, #1
 8014262:	693b      	ldr	r3, [r7, #16]
 8014264:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801426e:	429a      	cmp	r2, r3
 8014270:	d02c      	beq.n	80142cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014272:	693b      	ldr	r3, [r7, #16]
 8014274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014276:	2b00      	cmp	r3, #0
 8014278:	d128      	bne.n	80142cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	3304      	adds	r3, #4
 801427e:	4618      	mov	r0, r3
 8014280:	f7fe fad4 	bl	801282c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014284:	693b      	ldr	r3, [r7, #16]
 8014286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014288:	693b      	ldr	r3, [r7, #16]
 801428a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014290:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014294:	693b      	ldr	r3, [r7, #16]
 8014296:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801429c:	4b0f      	ldr	r3, [pc, #60]	; (80142dc <xTaskPriorityDisinherit+0xd4>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	429a      	cmp	r2, r3
 80142a2:	d903      	bls.n	80142ac <xTaskPriorityDisinherit+0xa4>
 80142a4:	693b      	ldr	r3, [r7, #16]
 80142a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142a8:	4a0c      	ldr	r2, [pc, #48]	; (80142dc <xTaskPriorityDisinherit+0xd4>)
 80142aa:	6013      	str	r3, [r2, #0]
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142b0:	4613      	mov	r3, r2
 80142b2:	009b      	lsls	r3, r3, #2
 80142b4:	4413      	add	r3, r2
 80142b6:	009b      	lsls	r3, r3, #2
 80142b8:	4a09      	ldr	r2, [pc, #36]	; (80142e0 <xTaskPriorityDisinherit+0xd8>)
 80142ba:	441a      	add	r2, r3
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	3304      	adds	r3, #4
 80142c0:	4619      	mov	r1, r3
 80142c2:	4610      	mov	r0, r2
 80142c4:	f7fe fa55 	bl	8012772 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80142c8:	2301      	movs	r3, #1
 80142ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80142cc:	697b      	ldr	r3, [r7, #20]
	}
 80142ce:	4618      	mov	r0, r3
 80142d0:	3718      	adds	r7, #24
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}
 80142d6:	bf00      	nop
 80142d8:	240013ac 	.word	0x240013ac
 80142dc:	24001888 	.word	0x24001888
 80142e0:	240013b0 	.word	0x240013b0

080142e4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80142e4:	b480      	push	{r7}
 80142e6:	b083      	sub	sp, #12
 80142e8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80142ea:	4b09      	ldr	r3, [pc, #36]	; (8014310 <uxTaskResetEventItemValue+0x2c>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	699b      	ldr	r3, [r3, #24]
 80142f0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80142f2:	4b07      	ldr	r3, [pc, #28]	; (8014310 <uxTaskResetEventItemValue+0x2c>)
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142f8:	4b05      	ldr	r3, [pc, #20]	; (8014310 <uxTaskResetEventItemValue+0x2c>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8014300:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8014302:	687b      	ldr	r3, [r7, #4]
}
 8014304:	4618      	mov	r0, r3
 8014306:	370c      	adds	r7, #12
 8014308:	46bd      	mov	sp, r7
 801430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430e:	4770      	bx	lr
 8014310:	240013ac 	.word	0x240013ac

08014314 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b084      	sub	sp, #16
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801431e:	4b21      	ldr	r3, [pc, #132]	; (80143a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014324:	4b20      	ldr	r3, [pc, #128]	; (80143a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	3304      	adds	r3, #4
 801432a:	4618      	mov	r0, r3
 801432c:	f7fe fa7e 	bl	801282c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014336:	d10a      	bne.n	801434e <prvAddCurrentTaskToDelayedList+0x3a>
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d007      	beq.n	801434e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801433e:	4b1a      	ldr	r3, [pc, #104]	; (80143a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	3304      	adds	r3, #4
 8014344:	4619      	mov	r1, r3
 8014346:	4819      	ldr	r0, [pc, #100]	; (80143ac <prvAddCurrentTaskToDelayedList+0x98>)
 8014348:	f7fe fa13 	bl	8012772 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801434c:	e026      	b.n	801439c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801434e:	68fa      	ldr	r2, [r7, #12]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	4413      	add	r3, r2
 8014354:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014356:	4b14      	ldr	r3, [pc, #80]	; (80143a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	68ba      	ldr	r2, [r7, #8]
 801435c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801435e:	68ba      	ldr	r2, [r7, #8]
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	429a      	cmp	r2, r3
 8014364:	d209      	bcs.n	801437a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014366:	4b12      	ldr	r3, [pc, #72]	; (80143b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014368:	681a      	ldr	r2, [r3, #0]
 801436a:	4b0f      	ldr	r3, [pc, #60]	; (80143a8 <prvAddCurrentTaskToDelayedList+0x94>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	3304      	adds	r3, #4
 8014370:	4619      	mov	r1, r3
 8014372:	4610      	mov	r0, r2
 8014374:	f7fe fa21 	bl	80127ba <vListInsert>
}
 8014378:	e010      	b.n	801439c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801437a:	4b0e      	ldr	r3, [pc, #56]	; (80143b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801437c:	681a      	ldr	r2, [r3, #0]
 801437e:	4b0a      	ldr	r3, [pc, #40]	; (80143a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	3304      	adds	r3, #4
 8014384:	4619      	mov	r1, r3
 8014386:	4610      	mov	r0, r2
 8014388:	f7fe fa17 	bl	80127ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801438c:	4b0a      	ldr	r3, [pc, #40]	; (80143b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	68ba      	ldr	r2, [r7, #8]
 8014392:	429a      	cmp	r2, r3
 8014394:	d202      	bcs.n	801439c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014396:	4a08      	ldr	r2, [pc, #32]	; (80143b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	6013      	str	r3, [r2, #0]
}
 801439c:	bf00      	nop
 801439e:	3710      	adds	r7, #16
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}
 80143a4:	24001884 	.word	0x24001884
 80143a8:	240013ac 	.word	0x240013ac
 80143ac:	2400186c 	.word	0x2400186c
 80143b0:	2400183c 	.word	0x2400183c
 80143b4:	24001838 	.word	0x24001838
 80143b8:	240018a0 	.word	0x240018a0

080143bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b08a      	sub	sp, #40	; 0x28
 80143c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80143c2:	2300      	movs	r3, #0
 80143c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80143c6:	f000 fb07 	bl	80149d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80143ca:	4b1c      	ldr	r3, [pc, #112]	; (801443c <xTimerCreateTimerTask+0x80>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d021      	beq.n	8014416 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80143d2:	2300      	movs	r3, #0
 80143d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80143d6:	2300      	movs	r3, #0
 80143d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80143da:	1d3a      	adds	r2, r7, #4
 80143dc:	f107 0108 	add.w	r1, r7, #8
 80143e0:	f107 030c 	add.w	r3, r7, #12
 80143e4:	4618      	mov	r0, r3
 80143e6:	f7fd ff8f 	bl	8012308 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80143ea:	6879      	ldr	r1, [r7, #4]
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	68fa      	ldr	r2, [r7, #12]
 80143f0:	9202      	str	r2, [sp, #8]
 80143f2:	9301      	str	r3, [sp, #4]
 80143f4:	2302      	movs	r3, #2
 80143f6:	9300      	str	r3, [sp, #0]
 80143f8:	2300      	movs	r3, #0
 80143fa:	460a      	mov	r2, r1
 80143fc:	4910      	ldr	r1, [pc, #64]	; (8014440 <xTimerCreateTimerTask+0x84>)
 80143fe:	4811      	ldr	r0, [pc, #68]	; (8014444 <xTimerCreateTimerTask+0x88>)
 8014400:	f7ff f820 	bl	8013444 <xTaskCreateStatic>
 8014404:	4603      	mov	r3, r0
 8014406:	4a10      	ldr	r2, [pc, #64]	; (8014448 <xTimerCreateTimerTask+0x8c>)
 8014408:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801440a:	4b0f      	ldr	r3, [pc, #60]	; (8014448 <xTimerCreateTimerTask+0x8c>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d001      	beq.n	8014416 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014412:	2301      	movs	r3, #1
 8014414:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d10a      	bne.n	8014432 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014420:	f383 8811 	msr	BASEPRI, r3
 8014424:	f3bf 8f6f 	isb	sy
 8014428:	f3bf 8f4f 	dsb	sy
 801442c:	613b      	str	r3, [r7, #16]
}
 801442e:	bf00      	nop
 8014430:	e7fe      	b.n	8014430 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014432:	697b      	ldr	r3, [r7, #20]
}
 8014434:	4618      	mov	r0, r3
 8014436:	3718      	adds	r7, #24
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}
 801443c:	240018dc 	.word	0x240018dc
 8014440:	08015ff0 	.word	0x08015ff0
 8014444:	08014581 	.word	0x08014581
 8014448:	240018e0 	.word	0x240018e0

0801444c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b08a      	sub	sp, #40	; 0x28
 8014450:	af00      	add	r7, sp, #0
 8014452:	60f8      	str	r0, [r7, #12]
 8014454:	60b9      	str	r1, [r7, #8]
 8014456:	607a      	str	r2, [r7, #4]
 8014458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801445a:	2300      	movs	r3, #0
 801445c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d10a      	bne.n	801447a <xTimerGenericCommand+0x2e>
	__asm volatile
 8014464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014468:	f383 8811 	msr	BASEPRI, r3
 801446c:	f3bf 8f6f 	isb	sy
 8014470:	f3bf 8f4f 	dsb	sy
 8014474:	623b      	str	r3, [r7, #32]
}
 8014476:	bf00      	nop
 8014478:	e7fe      	b.n	8014478 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801447a:	4b1a      	ldr	r3, [pc, #104]	; (80144e4 <xTimerGenericCommand+0x98>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d02a      	beq.n	80144d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	2b05      	cmp	r3, #5
 8014492:	dc18      	bgt.n	80144c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014494:	f7ff fe9a 	bl	80141cc <xTaskGetSchedulerState>
 8014498:	4603      	mov	r3, r0
 801449a:	2b02      	cmp	r3, #2
 801449c:	d109      	bne.n	80144b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801449e:	4b11      	ldr	r3, [pc, #68]	; (80144e4 <xTimerGenericCommand+0x98>)
 80144a0:	6818      	ldr	r0, [r3, #0]
 80144a2:	f107 0110 	add.w	r1, r7, #16
 80144a6:	2300      	movs	r3, #0
 80144a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144aa:	f7fe fb27 	bl	8012afc <xQueueGenericSend>
 80144ae:	6278      	str	r0, [r7, #36]	; 0x24
 80144b0:	e012      	b.n	80144d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80144b2:	4b0c      	ldr	r3, [pc, #48]	; (80144e4 <xTimerGenericCommand+0x98>)
 80144b4:	6818      	ldr	r0, [r3, #0]
 80144b6:	f107 0110 	add.w	r1, r7, #16
 80144ba:	2300      	movs	r3, #0
 80144bc:	2200      	movs	r2, #0
 80144be:	f7fe fb1d 	bl	8012afc <xQueueGenericSend>
 80144c2:	6278      	str	r0, [r7, #36]	; 0x24
 80144c4:	e008      	b.n	80144d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80144c6:	4b07      	ldr	r3, [pc, #28]	; (80144e4 <xTimerGenericCommand+0x98>)
 80144c8:	6818      	ldr	r0, [r3, #0]
 80144ca:	f107 0110 	add.w	r1, r7, #16
 80144ce:	2300      	movs	r3, #0
 80144d0:	683a      	ldr	r2, [r7, #0]
 80144d2:	f7fe fc11 	bl	8012cf8 <xQueueGenericSendFromISR>
 80144d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80144d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80144da:	4618      	mov	r0, r3
 80144dc:	3728      	adds	r7, #40	; 0x28
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}
 80144e2:	bf00      	nop
 80144e4:	240018dc 	.word	0x240018dc

080144e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b088      	sub	sp, #32
 80144ec:	af02      	add	r7, sp, #8
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144f2:	4b22      	ldr	r3, [pc, #136]	; (801457c <prvProcessExpiredTimer+0x94>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	68db      	ldr	r3, [r3, #12]
 80144f8:	68db      	ldr	r3, [r3, #12]
 80144fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80144fc:	697b      	ldr	r3, [r7, #20]
 80144fe:	3304      	adds	r3, #4
 8014500:	4618      	mov	r0, r3
 8014502:	f7fe f993 	bl	801282c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014506:	697b      	ldr	r3, [r7, #20]
 8014508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801450c:	f003 0304 	and.w	r3, r3, #4
 8014510:	2b00      	cmp	r3, #0
 8014512:	d022      	beq.n	801455a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	699a      	ldr	r2, [r3, #24]
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	18d1      	adds	r1, r2, r3
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	683a      	ldr	r2, [r7, #0]
 8014520:	6978      	ldr	r0, [r7, #20]
 8014522:	f000 f8d1 	bl	80146c8 <prvInsertTimerInActiveList>
 8014526:	4603      	mov	r3, r0
 8014528:	2b00      	cmp	r3, #0
 801452a:	d01f      	beq.n	801456c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801452c:	2300      	movs	r3, #0
 801452e:	9300      	str	r3, [sp, #0]
 8014530:	2300      	movs	r3, #0
 8014532:	687a      	ldr	r2, [r7, #4]
 8014534:	2100      	movs	r1, #0
 8014536:	6978      	ldr	r0, [r7, #20]
 8014538:	f7ff ff88 	bl	801444c <xTimerGenericCommand>
 801453c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801453e:	693b      	ldr	r3, [r7, #16]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d113      	bne.n	801456c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014548:	f383 8811 	msr	BASEPRI, r3
 801454c:	f3bf 8f6f 	isb	sy
 8014550:	f3bf 8f4f 	dsb	sy
 8014554:	60fb      	str	r3, [r7, #12]
}
 8014556:	bf00      	nop
 8014558:	e7fe      	b.n	8014558 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014560:	f023 0301 	bic.w	r3, r3, #1
 8014564:	b2da      	uxtb	r2, r3
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	6a1b      	ldr	r3, [r3, #32]
 8014570:	6978      	ldr	r0, [r7, #20]
 8014572:	4798      	blx	r3
}
 8014574:	bf00      	nop
 8014576:	3718      	adds	r7, #24
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}
 801457c:	240018d4 	.word	0x240018d4

08014580 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b084      	sub	sp, #16
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014588:	f107 0308 	add.w	r3, r7, #8
 801458c:	4618      	mov	r0, r3
 801458e:	f000 f857 	bl	8014640 <prvGetNextExpireTime>
 8014592:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014594:	68bb      	ldr	r3, [r7, #8]
 8014596:	4619      	mov	r1, r3
 8014598:	68f8      	ldr	r0, [r7, #12]
 801459a:	f000 f803 	bl	80145a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801459e:	f000 f8d5 	bl	801474c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80145a2:	e7f1      	b.n	8014588 <prvTimerTask+0x8>

080145a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b084      	sub	sp, #16
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80145ae:	f7ff f985 	bl	80138bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80145b2:	f107 0308 	add.w	r3, r7, #8
 80145b6:	4618      	mov	r0, r3
 80145b8:	f000 f866 	bl	8014688 <prvSampleTimeNow>
 80145bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d130      	bne.n	8014626 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d10a      	bne.n	80145e0 <prvProcessTimerOrBlockTask+0x3c>
 80145ca:	687a      	ldr	r2, [r7, #4]
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	429a      	cmp	r2, r3
 80145d0:	d806      	bhi.n	80145e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80145d2:	f7ff f981 	bl	80138d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80145d6:	68f9      	ldr	r1, [r7, #12]
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f7ff ff85 	bl	80144e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80145de:	e024      	b.n	801462a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d008      	beq.n	80145f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80145e6:	4b13      	ldr	r3, [pc, #76]	; (8014634 <prvProcessTimerOrBlockTask+0x90>)
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d101      	bne.n	80145f4 <prvProcessTimerOrBlockTask+0x50>
 80145f0:	2301      	movs	r3, #1
 80145f2:	e000      	b.n	80145f6 <prvProcessTimerOrBlockTask+0x52>
 80145f4:	2300      	movs	r3, #0
 80145f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80145f8:	4b0f      	ldr	r3, [pc, #60]	; (8014638 <prvProcessTimerOrBlockTask+0x94>)
 80145fa:	6818      	ldr	r0, [r3, #0]
 80145fc:	687a      	ldr	r2, [r7, #4]
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	1ad3      	subs	r3, r2, r3
 8014602:	683a      	ldr	r2, [r7, #0]
 8014604:	4619      	mov	r1, r3
 8014606:	f7fe fee9 	bl	80133dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801460a:	f7ff f965 	bl	80138d8 <xTaskResumeAll>
 801460e:	4603      	mov	r3, r0
 8014610:	2b00      	cmp	r3, #0
 8014612:	d10a      	bne.n	801462a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014614:	4b09      	ldr	r3, [pc, #36]	; (801463c <prvProcessTimerOrBlockTask+0x98>)
 8014616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801461a:	601a      	str	r2, [r3, #0]
 801461c:	f3bf 8f4f 	dsb	sy
 8014620:	f3bf 8f6f 	isb	sy
}
 8014624:	e001      	b.n	801462a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014626:	f7ff f957 	bl	80138d8 <xTaskResumeAll>
}
 801462a:	bf00      	nop
 801462c:	3710      	adds	r7, #16
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}
 8014632:	bf00      	nop
 8014634:	240018d8 	.word	0x240018d8
 8014638:	240018dc 	.word	0x240018dc
 801463c:	e000ed04 	.word	0xe000ed04

08014640 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014640:	b480      	push	{r7}
 8014642:	b085      	sub	sp, #20
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014648:	4b0e      	ldr	r3, [pc, #56]	; (8014684 <prvGetNextExpireTime+0x44>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d101      	bne.n	8014656 <prvGetNextExpireTime+0x16>
 8014652:	2201      	movs	r2, #1
 8014654:	e000      	b.n	8014658 <prvGetNextExpireTime+0x18>
 8014656:	2200      	movs	r2, #0
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d105      	bne.n	8014670 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014664:	4b07      	ldr	r3, [pc, #28]	; (8014684 <prvGetNextExpireTime+0x44>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	68db      	ldr	r3, [r3, #12]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	60fb      	str	r3, [r7, #12]
 801466e:	e001      	b.n	8014674 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014670:	2300      	movs	r3, #0
 8014672:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014674:	68fb      	ldr	r3, [r7, #12]
}
 8014676:	4618      	mov	r0, r3
 8014678:	3714      	adds	r7, #20
 801467a:	46bd      	mov	sp, r7
 801467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014680:	4770      	bx	lr
 8014682:	bf00      	nop
 8014684:	240018d4 	.word	0x240018d4

08014688 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b084      	sub	sp, #16
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014690:	f7ff f9c0 	bl	8013a14 <xTaskGetTickCount>
 8014694:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014696:	4b0b      	ldr	r3, [pc, #44]	; (80146c4 <prvSampleTimeNow+0x3c>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	68fa      	ldr	r2, [r7, #12]
 801469c:	429a      	cmp	r2, r3
 801469e:	d205      	bcs.n	80146ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80146a0:	f000 f936 	bl	8014910 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2201      	movs	r2, #1
 80146a8:	601a      	str	r2, [r3, #0]
 80146aa:	e002      	b.n	80146b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2200      	movs	r2, #0
 80146b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80146b2:	4a04      	ldr	r2, [pc, #16]	; (80146c4 <prvSampleTimeNow+0x3c>)
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80146b8:	68fb      	ldr	r3, [r7, #12]
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3710      	adds	r7, #16
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop
 80146c4:	240018e4 	.word	0x240018e4

080146c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b086      	sub	sp, #24
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	60f8      	str	r0, [r7, #12]
 80146d0:	60b9      	str	r1, [r7, #8]
 80146d2:	607a      	str	r2, [r7, #4]
 80146d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80146d6:	2300      	movs	r3, #0
 80146d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	68ba      	ldr	r2, [r7, #8]
 80146de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	68fa      	ldr	r2, [r7, #12]
 80146e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80146e6:	68ba      	ldr	r2, [r7, #8]
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	429a      	cmp	r2, r3
 80146ec:	d812      	bhi.n	8014714 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146ee:	687a      	ldr	r2, [r7, #4]
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	1ad2      	subs	r2, r2, r3
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	699b      	ldr	r3, [r3, #24]
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d302      	bcc.n	8014702 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80146fc:	2301      	movs	r3, #1
 80146fe:	617b      	str	r3, [r7, #20]
 8014700:	e01b      	b.n	801473a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014702:	4b10      	ldr	r3, [pc, #64]	; (8014744 <prvInsertTimerInActiveList+0x7c>)
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	3304      	adds	r3, #4
 801470a:	4619      	mov	r1, r3
 801470c:	4610      	mov	r0, r2
 801470e:	f7fe f854 	bl	80127ba <vListInsert>
 8014712:	e012      	b.n	801473a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014714:	687a      	ldr	r2, [r7, #4]
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	429a      	cmp	r2, r3
 801471a:	d206      	bcs.n	801472a <prvInsertTimerInActiveList+0x62>
 801471c:	68ba      	ldr	r2, [r7, #8]
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	429a      	cmp	r2, r3
 8014722:	d302      	bcc.n	801472a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014724:	2301      	movs	r3, #1
 8014726:	617b      	str	r3, [r7, #20]
 8014728:	e007      	b.n	801473a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801472a:	4b07      	ldr	r3, [pc, #28]	; (8014748 <prvInsertTimerInActiveList+0x80>)
 801472c:	681a      	ldr	r2, [r3, #0]
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	3304      	adds	r3, #4
 8014732:	4619      	mov	r1, r3
 8014734:	4610      	mov	r0, r2
 8014736:	f7fe f840 	bl	80127ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 801473a:	697b      	ldr	r3, [r7, #20]
}
 801473c:	4618      	mov	r0, r3
 801473e:	3718      	adds	r7, #24
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}
 8014744:	240018d8 	.word	0x240018d8
 8014748:	240018d4 	.word	0x240018d4

0801474c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b08e      	sub	sp, #56	; 0x38
 8014750:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014752:	e0ca      	b.n	80148ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2b00      	cmp	r3, #0
 8014758:	da18      	bge.n	801478c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801475a:	1d3b      	adds	r3, r7, #4
 801475c:	3304      	adds	r3, #4
 801475e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014762:	2b00      	cmp	r3, #0
 8014764:	d10a      	bne.n	801477c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801476a:	f383 8811 	msr	BASEPRI, r3
 801476e:	f3bf 8f6f 	isb	sy
 8014772:	f3bf 8f4f 	dsb	sy
 8014776:	61fb      	str	r3, [r7, #28]
}
 8014778:	bf00      	nop
 801477a:	e7fe      	b.n	801477a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014782:	6850      	ldr	r0, [r2, #4]
 8014784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014786:	6892      	ldr	r2, [r2, #8]
 8014788:	4611      	mov	r1, r2
 801478a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2b00      	cmp	r3, #0
 8014790:	f2c0 80aa 	blt.w	80148e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801479a:	695b      	ldr	r3, [r3, #20]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d004      	beq.n	80147aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80147a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147a2:	3304      	adds	r3, #4
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7fe f841 	bl	801282c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80147aa:	463b      	mov	r3, r7
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7ff ff6b 	bl	8014688 <prvSampleTimeNow>
 80147b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2b09      	cmp	r3, #9
 80147b8:	f200 8097 	bhi.w	80148ea <prvProcessReceivedCommands+0x19e>
 80147bc:	a201      	add	r2, pc, #4	; (adr r2, 80147c4 <prvProcessReceivedCommands+0x78>)
 80147be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c2:	bf00      	nop
 80147c4:	080147ed 	.word	0x080147ed
 80147c8:	080147ed 	.word	0x080147ed
 80147cc:	080147ed 	.word	0x080147ed
 80147d0:	08014861 	.word	0x08014861
 80147d4:	08014875 	.word	0x08014875
 80147d8:	080148bf 	.word	0x080148bf
 80147dc:	080147ed 	.word	0x080147ed
 80147e0:	080147ed 	.word	0x080147ed
 80147e4:	08014861 	.word	0x08014861
 80147e8:	08014875 	.word	0x08014875
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80147ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147f2:	f043 0301 	orr.w	r3, r3, #1
 80147f6:	b2da      	uxtb	r2, r3
 80147f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80147fe:	68ba      	ldr	r2, [r7, #8]
 8014800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014802:	699b      	ldr	r3, [r3, #24]
 8014804:	18d1      	adds	r1, r2, r3
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801480a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801480c:	f7ff ff5c 	bl	80146c8 <prvInsertTimerInActiveList>
 8014810:	4603      	mov	r3, r0
 8014812:	2b00      	cmp	r3, #0
 8014814:	d069      	beq.n	80148ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014818:	6a1b      	ldr	r3, [r3, #32]
 801481a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801481c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014824:	f003 0304 	and.w	r3, r3, #4
 8014828:	2b00      	cmp	r3, #0
 801482a:	d05e      	beq.n	80148ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801482c:	68ba      	ldr	r2, [r7, #8]
 801482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014830:	699b      	ldr	r3, [r3, #24]
 8014832:	441a      	add	r2, r3
 8014834:	2300      	movs	r3, #0
 8014836:	9300      	str	r3, [sp, #0]
 8014838:	2300      	movs	r3, #0
 801483a:	2100      	movs	r1, #0
 801483c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801483e:	f7ff fe05 	bl	801444c <xTimerGenericCommand>
 8014842:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014844:	6a3b      	ldr	r3, [r7, #32]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d14f      	bne.n	80148ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801484e:	f383 8811 	msr	BASEPRI, r3
 8014852:	f3bf 8f6f 	isb	sy
 8014856:	f3bf 8f4f 	dsb	sy
 801485a:	61bb      	str	r3, [r7, #24]
}
 801485c:	bf00      	nop
 801485e:	e7fe      	b.n	801485e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014866:	f023 0301 	bic.w	r3, r3, #1
 801486a:	b2da      	uxtb	r2, r3
 801486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801486e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014872:	e03a      	b.n	80148ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801487a:	f043 0301 	orr.w	r3, r3, #1
 801487e:	b2da      	uxtb	r2, r3
 8014880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014886:	68ba      	ldr	r2, [r7, #8]
 8014888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801488a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801488e:	699b      	ldr	r3, [r3, #24]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d10a      	bne.n	80148aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014898:	f383 8811 	msr	BASEPRI, r3
 801489c:	f3bf 8f6f 	isb	sy
 80148a0:	f3bf 8f4f 	dsb	sy
 80148a4:	617b      	str	r3, [r7, #20]
}
 80148a6:	bf00      	nop
 80148a8:	e7fe      	b.n	80148a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80148aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ac:	699a      	ldr	r2, [r3, #24]
 80148ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b0:	18d1      	adds	r1, r2, r3
 80148b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148b8:	f7ff ff06 	bl	80146c8 <prvInsertTimerInActiveList>
					break;
 80148bc:	e015      	b.n	80148ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80148be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148c4:	f003 0302 	and.w	r3, r3, #2
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d103      	bne.n	80148d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80148cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148ce:	f000 fbff 	bl	80150d0 <vPortFree>
 80148d2:	e00a      	b.n	80148ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80148d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148da:	f023 0301 	bic.w	r3, r3, #1
 80148de:	b2da      	uxtb	r2, r3
 80148e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80148e6:	e000      	b.n	80148ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80148e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80148ea:	4b08      	ldr	r3, [pc, #32]	; (801490c <prvProcessReceivedCommands+0x1c0>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	1d39      	adds	r1, r7, #4
 80148f0:	2200      	movs	r2, #0
 80148f2:	4618      	mov	r0, r3
 80148f4:	f7fe fa9c 	bl	8012e30 <xQueueReceive>
 80148f8:	4603      	mov	r3, r0
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	f47f af2a 	bne.w	8014754 <prvProcessReceivedCommands+0x8>
	}
}
 8014900:	bf00      	nop
 8014902:	bf00      	nop
 8014904:	3730      	adds	r7, #48	; 0x30
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}
 801490a:	bf00      	nop
 801490c:	240018dc 	.word	0x240018dc

08014910 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b088      	sub	sp, #32
 8014914:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014916:	e048      	b.n	80149aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014918:	4b2d      	ldr	r3, [pc, #180]	; (80149d0 <prvSwitchTimerLists+0xc0>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	68db      	ldr	r3, [r3, #12]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014922:	4b2b      	ldr	r3, [pc, #172]	; (80149d0 <prvSwitchTimerLists+0xc0>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	68db      	ldr	r3, [r3, #12]
 801492a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	3304      	adds	r3, #4
 8014930:	4618      	mov	r0, r3
 8014932:	f7fd ff7b 	bl	801282c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	6a1b      	ldr	r3, [r3, #32]
 801493a:	68f8      	ldr	r0, [r7, #12]
 801493c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014944:	f003 0304 	and.w	r3, r3, #4
 8014948:	2b00      	cmp	r3, #0
 801494a:	d02e      	beq.n	80149aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	699b      	ldr	r3, [r3, #24]
 8014950:	693a      	ldr	r2, [r7, #16]
 8014952:	4413      	add	r3, r2
 8014954:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014956:	68ba      	ldr	r2, [r7, #8]
 8014958:	693b      	ldr	r3, [r7, #16]
 801495a:	429a      	cmp	r2, r3
 801495c:	d90e      	bls.n	801497c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	68ba      	ldr	r2, [r7, #8]
 8014962:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	68fa      	ldr	r2, [r7, #12]
 8014968:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801496a:	4b19      	ldr	r3, [pc, #100]	; (80149d0 <prvSwitchTimerLists+0xc0>)
 801496c:	681a      	ldr	r2, [r3, #0]
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	3304      	adds	r3, #4
 8014972:	4619      	mov	r1, r3
 8014974:	4610      	mov	r0, r2
 8014976:	f7fd ff20 	bl	80127ba <vListInsert>
 801497a:	e016      	b.n	80149aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801497c:	2300      	movs	r3, #0
 801497e:	9300      	str	r3, [sp, #0]
 8014980:	2300      	movs	r3, #0
 8014982:	693a      	ldr	r2, [r7, #16]
 8014984:	2100      	movs	r1, #0
 8014986:	68f8      	ldr	r0, [r7, #12]
 8014988:	f7ff fd60 	bl	801444c <xTimerGenericCommand>
 801498c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d10a      	bne.n	80149aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014998:	f383 8811 	msr	BASEPRI, r3
 801499c:	f3bf 8f6f 	isb	sy
 80149a0:	f3bf 8f4f 	dsb	sy
 80149a4:	603b      	str	r3, [r7, #0]
}
 80149a6:	bf00      	nop
 80149a8:	e7fe      	b.n	80149a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80149aa:	4b09      	ldr	r3, [pc, #36]	; (80149d0 <prvSwitchTimerLists+0xc0>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d1b1      	bne.n	8014918 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80149b4:	4b06      	ldr	r3, [pc, #24]	; (80149d0 <prvSwitchTimerLists+0xc0>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80149ba:	4b06      	ldr	r3, [pc, #24]	; (80149d4 <prvSwitchTimerLists+0xc4>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	4a04      	ldr	r2, [pc, #16]	; (80149d0 <prvSwitchTimerLists+0xc0>)
 80149c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80149c2:	4a04      	ldr	r2, [pc, #16]	; (80149d4 <prvSwitchTimerLists+0xc4>)
 80149c4:	697b      	ldr	r3, [r7, #20]
 80149c6:	6013      	str	r3, [r2, #0]
}
 80149c8:	bf00      	nop
 80149ca:	3718      	adds	r7, #24
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}
 80149d0:	240018d4 	.word	0x240018d4
 80149d4:	240018d8 	.word	0x240018d8

080149d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b082      	sub	sp, #8
 80149dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80149de:	f000 f989 	bl	8014cf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80149e2:	4b15      	ldr	r3, [pc, #84]	; (8014a38 <prvCheckForValidListAndQueue+0x60>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d120      	bne.n	8014a2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80149ea:	4814      	ldr	r0, [pc, #80]	; (8014a3c <prvCheckForValidListAndQueue+0x64>)
 80149ec:	f7fd fe94 	bl	8012718 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80149f0:	4813      	ldr	r0, [pc, #76]	; (8014a40 <prvCheckForValidListAndQueue+0x68>)
 80149f2:	f7fd fe91 	bl	8012718 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80149f6:	4b13      	ldr	r3, [pc, #76]	; (8014a44 <prvCheckForValidListAndQueue+0x6c>)
 80149f8:	4a10      	ldr	r2, [pc, #64]	; (8014a3c <prvCheckForValidListAndQueue+0x64>)
 80149fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80149fc:	4b12      	ldr	r3, [pc, #72]	; (8014a48 <prvCheckForValidListAndQueue+0x70>)
 80149fe:	4a10      	ldr	r2, [pc, #64]	; (8014a40 <prvCheckForValidListAndQueue+0x68>)
 8014a00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014a02:	2300      	movs	r3, #0
 8014a04:	9300      	str	r3, [sp, #0]
 8014a06:	4b11      	ldr	r3, [pc, #68]	; (8014a4c <prvCheckForValidListAndQueue+0x74>)
 8014a08:	4a11      	ldr	r2, [pc, #68]	; (8014a50 <prvCheckForValidListAndQueue+0x78>)
 8014a0a:	2110      	movs	r1, #16
 8014a0c:	200a      	movs	r0, #10
 8014a0e:	f7fd ff9f 	bl	8012950 <xQueueGenericCreateStatic>
 8014a12:	4603      	mov	r3, r0
 8014a14:	4a08      	ldr	r2, [pc, #32]	; (8014a38 <prvCheckForValidListAndQueue+0x60>)
 8014a16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014a18:	4b07      	ldr	r3, [pc, #28]	; (8014a38 <prvCheckForValidListAndQueue+0x60>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d005      	beq.n	8014a2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014a20:	4b05      	ldr	r3, [pc, #20]	; (8014a38 <prvCheckForValidListAndQueue+0x60>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	490b      	ldr	r1, [pc, #44]	; (8014a54 <prvCheckForValidListAndQueue+0x7c>)
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7fe fcae 	bl	8013388 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014a2c:	f000 f992 	bl	8014d54 <vPortExitCritical>
}
 8014a30:	bf00      	nop
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}
 8014a36:	bf00      	nop
 8014a38:	240018dc 	.word	0x240018dc
 8014a3c:	240018ac 	.word	0x240018ac
 8014a40:	240018c0 	.word	0x240018c0
 8014a44:	240018d4 	.word	0x240018d4
 8014a48:	240018d8 	.word	0x240018d8
 8014a4c:	24001988 	.word	0x24001988
 8014a50:	240018e8 	.word	0x240018e8
 8014a54:	08015ff8 	.word	0x08015ff8

08014a58 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b08a      	sub	sp, #40	; 0x28
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	60f8      	str	r0, [r7, #12]
 8014a60:	60b9      	str	r1, [r7, #8]
 8014a62:	607a      	str	r2, [r7, #4]
 8014a64:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8014a66:	f06f 0301 	mvn.w	r3, #1
 8014a6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014a78:	4b06      	ldr	r3, [pc, #24]	; (8014a94 <xTimerPendFunctionCallFromISR+0x3c>)
 8014a7a:	6818      	ldr	r0, [r3, #0]
 8014a7c:	f107 0114 	add.w	r1, r7, #20
 8014a80:	2300      	movs	r3, #0
 8014a82:	683a      	ldr	r2, [r7, #0]
 8014a84:	f7fe f938 	bl	8012cf8 <xQueueGenericSendFromISR>
 8014a88:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8014a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3728      	adds	r7, #40	; 0x28
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}
 8014a94:	240018dc 	.word	0x240018dc

08014a98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014a98:	b480      	push	{r7}
 8014a9a:	b085      	sub	sp, #20
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	60f8      	str	r0, [r7, #12]
 8014aa0:	60b9      	str	r1, [r7, #8]
 8014aa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	3b04      	subs	r3, #4
 8014aa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	3b04      	subs	r3, #4
 8014ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	f023 0201 	bic.w	r2, r3, #1
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	3b04      	subs	r3, #4
 8014ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014ac8:	4a0c      	ldr	r2, [pc, #48]	; (8014afc <pxPortInitialiseStack+0x64>)
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	3b14      	subs	r3, #20
 8014ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014ad4:	687a      	ldr	r2, [r7, #4]
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	3b04      	subs	r3, #4
 8014ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	f06f 0202 	mvn.w	r2, #2
 8014ae6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	3b20      	subs	r3, #32
 8014aec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014aee:	68fb      	ldr	r3, [r7, #12]
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3714      	adds	r7, #20
 8014af4:	46bd      	mov	sp, r7
 8014af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afa:	4770      	bx	lr
 8014afc:	08014b01 	.word	0x08014b01

08014b00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014b00:	b480      	push	{r7}
 8014b02:	b085      	sub	sp, #20
 8014b04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014b06:	2300      	movs	r3, #0
 8014b08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014b0a:	4b12      	ldr	r3, [pc, #72]	; (8014b54 <prvTaskExitError+0x54>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b12:	d00a      	beq.n	8014b2a <prvTaskExitError+0x2a>
	__asm volatile
 8014b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b18:	f383 8811 	msr	BASEPRI, r3
 8014b1c:	f3bf 8f6f 	isb	sy
 8014b20:	f3bf 8f4f 	dsb	sy
 8014b24:	60fb      	str	r3, [r7, #12]
}
 8014b26:	bf00      	nop
 8014b28:	e7fe      	b.n	8014b28 <prvTaskExitError+0x28>
	__asm volatile
 8014b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b2e:	f383 8811 	msr	BASEPRI, r3
 8014b32:	f3bf 8f6f 	isb	sy
 8014b36:	f3bf 8f4f 	dsb	sy
 8014b3a:	60bb      	str	r3, [r7, #8]
}
 8014b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014b3e:	bf00      	nop
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d0fc      	beq.n	8014b40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014b46:	bf00      	nop
 8014b48:	bf00      	nop
 8014b4a:	3714      	adds	r7, #20
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b52:	4770      	bx	lr
 8014b54:	2400009c 	.word	0x2400009c
	...

08014b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014b60:	4b07      	ldr	r3, [pc, #28]	; (8014b80 <pxCurrentTCBConst2>)
 8014b62:	6819      	ldr	r1, [r3, #0]
 8014b64:	6808      	ldr	r0, [r1, #0]
 8014b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b6a:	f380 8809 	msr	PSP, r0
 8014b6e:	f3bf 8f6f 	isb	sy
 8014b72:	f04f 0000 	mov.w	r0, #0
 8014b76:	f380 8811 	msr	BASEPRI, r0
 8014b7a:	4770      	bx	lr
 8014b7c:	f3af 8000 	nop.w

08014b80 <pxCurrentTCBConst2>:
 8014b80:	240013ac 	.word	0x240013ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014b84:	bf00      	nop
 8014b86:	bf00      	nop

08014b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014b88:	4808      	ldr	r0, [pc, #32]	; (8014bac <prvPortStartFirstTask+0x24>)
 8014b8a:	6800      	ldr	r0, [r0, #0]
 8014b8c:	6800      	ldr	r0, [r0, #0]
 8014b8e:	f380 8808 	msr	MSP, r0
 8014b92:	f04f 0000 	mov.w	r0, #0
 8014b96:	f380 8814 	msr	CONTROL, r0
 8014b9a:	b662      	cpsie	i
 8014b9c:	b661      	cpsie	f
 8014b9e:	f3bf 8f4f 	dsb	sy
 8014ba2:	f3bf 8f6f 	isb	sy
 8014ba6:	df00      	svc	0
 8014ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014baa:	bf00      	nop
 8014bac:	e000ed08 	.word	0xe000ed08

08014bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b086      	sub	sp, #24
 8014bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014bb6:	4b46      	ldr	r3, [pc, #280]	; (8014cd0 <xPortStartScheduler+0x120>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	4a46      	ldr	r2, [pc, #280]	; (8014cd4 <xPortStartScheduler+0x124>)
 8014bbc:	4293      	cmp	r3, r2
 8014bbe:	d10a      	bne.n	8014bd6 <xPortStartScheduler+0x26>
	__asm volatile
 8014bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bc4:	f383 8811 	msr	BASEPRI, r3
 8014bc8:	f3bf 8f6f 	isb	sy
 8014bcc:	f3bf 8f4f 	dsb	sy
 8014bd0:	613b      	str	r3, [r7, #16]
}
 8014bd2:	bf00      	nop
 8014bd4:	e7fe      	b.n	8014bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014bd6:	4b3e      	ldr	r3, [pc, #248]	; (8014cd0 <xPortStartScheduler+0x120>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	4a3f      	ldr	r2, [pc, #252]	; (8014cd8 <xPortStartScheduler+0x128>)
 8014bdc:	4293      	cmp	r3, r2
 8014bde:	d10a      	bne.n	8014bf6 <xPortStartScheduler+0x46>
	__asm volatile
 8014be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014be4:	f383 8811 	msr	BASEPRI, r3
 8014be8:	f3bf 8f6f 	isb	sy
 8014bec:	f3bf 8f4f 	dsb	sy
 8014bf0:	60fb      	str	r3, [r7, #12]
}
 8014bf2:	bf00      	nop
 8014bf4:	e7fe      	b.n	8014bf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014bf6:	4b39      	ldr	r3, [pc, #228]	; (8014cdc <xPortStartScheduler+0x12c>)
 8014bf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	b2db      	uxtb	r3, r3
 8014c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014c02:	697b      	ldr	r3, [r7, #20]
 8014c04:	22ff      	movs	r2, #255	; 0xff
 8014c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014c08:	697b      	ldr	r3, [r7, #20]
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	b2db      	uxtb	r3, r3
 8014c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014c10:	78fb      	ldrb	r3, [r7, #3]
 8014c12:	b2db      	uxtb	r3, r3
 8014c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014c18:	b2da      	uxtb	r2, r3
 8014c1a:	4b31      	ldr	r3, [pc, #196]	; (8014ce0 <xPortStartScheduler+0x130>)
 8014c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014c1e:	4b31      	ldr	r3, [pc, #196]	; (8014ce4 <xPortStartScheduler+0x134>)
 8014c20:	2207      	movs	r2, #7
 8014c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c24:	e009      	b.n	8014c3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014c26:	4b2f      	ldr	r3, [pc, #188]	; (8014ce4 <xPortStartScheduler+0x134>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	3b01      	subs	r3, #1
 8014c2c:	4a2d      	ldr	r2, [pc, #180]	; (8014ce4 <xPortStartScheduler+0x134>)
 8014c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014c30:	78fb      	ldrb	r3, [r7, #3]
 8014c32:	b2db      	uxtb	r3, r3
 8014c34:	005b      	lsls	r3, r3, #1
 8014c36:	b2db      	uxtb	r3, r3
 8014c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c3a:	78fb      	ldrb	r3, [r7, #3]
 8014c3c:	b2db      	uxtb	r3, r3
 8014c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c42:	2b80      	cmp	r3, #128	; 0x80
 8014c44:	d0ef      	beq.n	8014c26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014c46:	4b27      	ldr	r3, [pc, #156]	; (8014ce4 <xPortStartScheduler+0x134>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	f1c3 0307 	rsb	r3, r3, #7
 8014c4e:	2b04      	cmp	r3, #4
 8014c50:	d00a      	beq.n	8014c68 <xPortStartScheduler+0xb8>
	__asm volatile
 8014c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c56:	f383 8811 	msr	BASEPRI, r3
 8014c5a:	f3bf 8f6f 	isb	sy
 8014c5e:	f3bf 8f4f 	dsb	sy
 8014c62:	60bb      	str	r3, [r7, #8]
}
 8014c64:	bf00      	nop
 8014c66:	e7fe      	b.n	8014c66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014c68:	4b1e      	ldr	r3, [pc, #120]	; (8014ce4 <xPortStartScheduler+0x134>)
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	021b      	lsls	r3, r3, #8
 8014c6e:	4a1d      	ldr	r2, [pc, #116]	; (8014ce4 <xPortStartScheduler+0x134>)
 8014c70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014c72:	4b1c      	ldr	r3, [pc, #112]	; (8014ce4 <xPortStartScheduler+0x134>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014c7a:	4a1a      	ldr	r2, [pc, #104]	; (8014ce4 <xPortStartScheduler+0x134>)
 8014c7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	b2da      	uxtb	r2, r3
 8014c82:	697b      	ldr	r3, [r7, #20]
 8014c84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014c86:	4b18      	ldr	r3, [pc, #96]	; (8014ce8 <xPortStartScheduler+0x138>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	4a17      	ldr	r2, [pc, #92]	; (8014ce8 <xPortStartScheduler+0x138>)
 8014c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014c92:	4b15      	ldr	r3, [pc, #84]	; (8014ce8 <xPortStartScheduler+0x138>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	4a14      	ldr	r2, [pc, #80]	; (8014ce8 <xPortStartScheduler+0x138>)
 8014c98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014c9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014c9e:	f000 f8dd 	bl	8014e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014ca2:	4b12      	ldr	r3, [pc, #72]	; (8014cec <xPortStartScheduler+0x13c>)
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014ca8:	f000 f8fc 	bl	8014ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014cac:	4b10      	ldr	r3, [pc, #64]	; (8014cf0 <xPortStartScheduler+0x140>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	4a0f      	ldr	r2, [pc, #60]	; (8014cf0 <xPortStartScheduler+0x140>)
 8014cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014cb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014cb8:	f7ff ff66 	bl	8014b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014cbc:	f7fe ff7c 	bl	8013bb8 <vTaskSwitchContext>
	prvTaskExitError();
 8014cc0:	f7ff ff1e 	bl	8014b00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014cc4:	2300      	movs	r3, #0
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3718      	adds	r7, #24
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	e000ed00 	.word	0xe000ed00
 8014cd4:	410fc271 	.word	0x410fc271
 8014cd8:	410fc270 	.word	0x410fc270
 8014cdc:	e000e400 	.word	0xe000e400
 8014ce0:	240019d8 	.word	0x240019d8
 8014ce4:	240019dc 	.word	0x240019dc
 8014ce8:	e000ed20 	.word	0xe000ed20
 8014cec:	2400009c 	.word	0x2400009c
 8014cf0:	e000ef34 	.word	0xe000ef34

08014cf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014cf4:	b480      	push	{r7}
 8014cf6:	b083      	sub	sp, #12
 8014cf8:	af00      	add	r7, sp, #0
	__asm volatile
 8014cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cfe:	f383 8811 	msr	BASEPRI, r3
 8014d02:	f3bf 8f6f 	isb	sy
 8014d06:	f3bf 8f4f 	dsb	sy
 8014d0a:	607b      	str	r3, [r7, #4]
}
 8014d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014d0e:	4b0f      	ldr	r3, [pc, #60]	; (8014d4c <vPortEnterCritical+0x58>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	3301      	adds	r3, #1
 8014d14:	4a0d      	ldr	r2, [pc, #52]	; (8014d4c <vPortEnterCritical+0x58>)
 8014d16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014d18:	4b0c      	ldr	r3, [pc, #48]	; (8014d4c <vPortEnterCritical+0x58>)
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	2b01      	cmp	r3, #1
 8014d1e:	d10f      	bne.n	8014d40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014d20:	4b0b      	ldr	r3, [pc, #44]	; (8014d50 <vPortEnterCritical+0x5c>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	b2db      	uxtb	r3, r3
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d00a      	beq.n	8014d40 <vPortEnterCritical+0x4c>
	__asm volatile
 8014d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d2e:	f383 8811 	msr	BASEPRI, r3
 8014d32:	f3bf 8f6f 	isb	sy
 8014d36:	f3bf 8f4f 	dsb	sy
 8014d3a:	603b      	str	r3, [r7, #0]
}
 8014d3c:	bf00      	nop
 8014d3e:	e7fe      	b.n	8014d3e <vPortEnterCritical+0x4a>
	}
}
 8014d40:	bf00      	nop
 8014d42:	370c      	adds	r7, #12
 8014d44:	46bd      	mov	sp, r7
 8014d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4a:	4770      	bx	lr
 8014d4c:	2400009c 	.word	0x2400009c
 8014d50:	e000ed04 	.word	0xe000ed04

08014d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014d54:	b480      	push	{r7}
 8014d56:	b083      	sub	sp, #12
 8014d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014d5a:	4b12      	ldr	r3, [pc, #72]	; (8014da4 <vPortExitCritical+0x50>)
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d10a      	bne.n	8014d78 <vPortExitCritical+0x24>
	__asm volatile
 8014d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d66:	f383 8811 	msr	BASEPRI, r3
 8014d6a:	f3bf 8f6f 	isb	sy
 8014d6e:	f3bf 8f4f 	dsb	sy
 8014d72:	607b      	str	r3, [r7, #4]
}
 8014d74:	bf00      	nop
 8014d76:	e7fe      	b.n	8014d76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014d78:	4b0a      	ldr	r3, [pc, #40]	; (8014da4 <vPortExitCritical+0x50>)
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	3b01      	subs	r3, #1
 8014d7e:	4a09      	ldr	r2, [pc, #36]	; (8014da4 <vPortExitCritical+0x50>)
 8014d80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014d82:	4b08      	ldr	r3, [pc, #32]	; (8014da4 <vPortExitCritical+0x50>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d105      	bne.n	8014d96 <vPortExitCritical+0x42>
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	f383 8811 	msr	BASEPRI, r3
}
 8014d94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014d96:	bf00      	nop
 8014d98:	370c      	adds	r7, #12
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da0:	4770      	bx	lr
 8014da2:	bf00      	nop
 8014da4:	2400009c 	.word	0x2400009c
	...

08014db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014db0:	f3ef 8009 	mrs	r0, PSP
 8014db4:	f3bf 8f6f 	isb	sy
 8014db8:	4b15      	ldr	r3, [pc, #84]	; (8014e10 <pxCurrentTCBConst>)
 8014dba:	681a      	ldr	r2, [r3, #0]
 8014dbc:	f01e 0f10 	tst.w	lr, #16
 8014dc0:	bf08      	it	eq
 8014dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dca:	6010      	str	r0, [r2, #0]
 8014dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014dd4:	f380 8811 	msr	BASEPRI, r0
 8014dd8:	f3bf 8f4f 	dsb	sy
 8014ddc:	f3bf 8f6f 	isb	sy
 8014de0:	f7fe feea 	bl	8013bb8 <vTaskSwitchContext>
 8014de4:	f04f 0000 	mov.w	r0, #0
 8014de8:	f380 8811 	msr	BASEPRI, r0
 8014dec:	bc09      	pop	{r0, r3}
 8014dee:	6819      	ldr	r1, [r3, #0]
 8014df0:	6808      	ldr	r0, [r1, #0]
 8014df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df6:	f01e 0f10 	tst.w	lr, #16
 8014dfa:	bf08      	it	eq
 8014dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014e00:	f380 8809 	msr	PSP, r0
 8014e04:	f3bf 8f6f 	isb	sy
 8014e08:	4770      	bx	lr
 8014e0a:	bf00      	nop
 8014e0c:	f3af 8000 	nop.w

08014e10 <pxCurrentTCBConst>:
 8014e10:	240013ac 	.word	0x240013ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e14:	bf00      	nop
 8014e16:	bf00      	nop

08014e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b082      	sub	sp, #8
 8014e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e22:	f383 8811 	msr	BASEPRI, r3
 8014e26:	f3bf 8f6f 	isb	sy
 8014e2a:	f3bf 8f4f 	dsb	sy
 8014e2e:	607b      	str	r3, [r7, #4]
}
 8014e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014e32:	f7fe fdff 	bl	8013a34 <xTaskIncrementTick>
 8014e36:	4603      	mov	r3, r0
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d003      	beq.n	8014e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e3c:	4b06      	ldr	r3, [pc, #24]	; (8014e58 <xPortSysTickHandler+0x40>)
 8014e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e42:	601a      	str	r2, [r3, #0]
 8014e44:	2300      	movs	r3, #0
 8014e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e48:	683b      	ldr	r3, [r7, #0]
 8014e4a:	f383 8811 	msr	BASEPRI, r3
}
 8014e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e50:	bf00      	nop
 8014e52:	3708      	adds	r7, #8
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	e000ed04 	.word	0xe000ed04

08014e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014e5c:	b480      	push	{r7}
 8014e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014e60:	4b0b      	ldr	r3, [pc, #44]	; (8014e90 <vPortSetupTimerInterrupt+0x34>)
 8014e62:	2200      	movs	r2, #0
 8014e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014e66:	4b0b      	ldr	r3, [pc, #44]	; (8014e94 <vPortSetupTimerInterrupt+0x38>)
 8014e68:	2200      	movs	r2, #0
 8014e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014e6c:	4b0a      	ldr	r3, [pc, #40]	; (8014e98 <vPortSetupTimerInterrupt+0x3c>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	4a0a      	ldr	r2, [pc, #40]	; (8014e9c <vPortSetupTimerInterrupt+0x40>)
 8014e72:	fba2 2303 	umull	r2, r3, r2, r3
 8014e76:	099b      	lsrs	r3, r3, #6
 8014e78:	4a09      	ldr	r2, [pc, #36]	; (8014ea0 <vPortSetupTimerInterrupt+0x44>)
 8014e7a:	3b01      	subs	r3, #1
 8014e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014e7e:	4b04      	ldr	r3, [pc, #16]	; (8014e90 <vPortSetupTimerInterrupt+0x34>)
 8014e80:	2207      	movs	r2, #7
 8014e82:	601a      	str	r2, [r3, #0]
}
 8014e84:	bf00      	nop
 8014e86:	46bd      	mov	sp, r7
 8014e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8c:	4770      	bx	lr
 8014e8e:	bf00      	nop
 8014e90:	e000e010 	.word	0xe000e010
 8014e94:	e000e018 	.word	0xe000e018
 8014e98:	2400008c 	.word	0x2400008c
 8014e9c:	10624dd3 	.word	0x10624dd3
 8014ea0:	e000e014 	.word	0xe000e014

08014ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014eb4 <vPortEnableVFP+0x10>
 8014ea8:	6801      	ldr	r1, [r0, #0]
 8014eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014eae:	6001      	str	r1, [r0, #0]
 8014eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014eb2:	bf00      	nop
 8014eb4:	e000ed88 	.word	0xe000ed88

08014eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014eb8:	b480      	push	{r7}
 8014eba:	b085      	sub	sp, #20
 8014ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014ebe:	f3ef 8305 	mrs	r3, IPSR
 8014ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	2b0f      	cmp	r3, #15
 8014ec8:	d914      	bls.n	8014ef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014eca:	4a17      	ldr	r2, [pc, #92]	; (8014f28 <vPortValidateInterruptPriority+0x70>)
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	4413      	add	r3, r2
 8014ed0:	781b      	ldrb	r3, [r3, #0]
 8014ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014ed4:	4b15      	ldr	r3, [pc, #84]	; (8014f2c <vPortValidateInterruptPriority+0x74>)
 8014ed6:	781b      	ldrb	r3, [r3, #0]
 8014ed8:	7afa      	ldrb	r2, [r7, #11]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d20a      	bcs.n	8014ef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ee2:	f383 8811 	msr	BASEPRI, r3
 8014ee6:	f3bf 8f6f 	isb	sy
 8014eea:	f3bf 8f4f 	dsb	sy
 8014eee:	607b      	str	r3, [r7, #4]
}
 8014ef0:	bf00      	nop
 8014ef2:	e7fe      	b.n	8014ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014ef4:	4b0e      	ldr	r3, [pc, #56]	; (8014f30 <vPortValidateInterruptPriority+0x78>)
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014efc:	4b0d      	ldr	r3, [pc, #52]	; (8014f34 <vPortValidateInterruptPriority+0x7c>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	429a      	cmp	r2, r3
 8014f02:	d90a      	bls.n	8014f1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f08:	f383 8811 	msr	BASEPRI, r3
 8014f0c:	f3bf 8f6f 	isb	sy
 8014f10:	f3bf 8f4f 	dsb	sy
 8014f14:	603b      	str	r3, [r7, #0]
}
 8014f16:	bf00      	nop
 8014f18:	e7fe      	b.n	8014f18 <vPortValidateInterruptPriority+0x60>
	}
 8014f1a:	bf00      	nop
 8014f1c:	3714      	adds	r7, #20
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f24:	4770      	bx	lr
 8014f26:	bf00      	nop
 8014f28:	e000e3f0 	.word	0xe000e3f0
 8014f2c:	240019d8 	.word	0x240019d8
 8014f30:	e000ed0c 	.word	0xe000ed0c
 8014f34:	240019dc 	.word	0x240019dc

08014f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b08a      	sub	sp, #40	; 0x28
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014f40:	2300      	movs	r3, #0
 8014f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014f44:	f7fe fcba 	bl	80138bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014f48:	4b5b      	ldr	r3, [pc, #364]	; (80150b8 <pvPortMalloc+0x180>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d101      	bne.n	8014f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014f50:	f000 f920 	bl	8015194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014f54:	4b59      	ldr	r3, [pc, #356]	; (80150bc <pvPortMalloc+0x184>)
 8014f56:	681a      	ldr	r2, [r3, #0]
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	4013      	ands	r3, r2
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	f040 8093 	bne.w	8015088 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d01d      	beq.n	8014fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014f68:	2208      	movs	r2, #8
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	4413      	add	r3, r2
 8014f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f003 0307 	and.w	r3, r3, #7
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d014      	beq.n	8014fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	f023 0307 	bic.w	r3, r3, #7
 8014f80:	3308      	adds	r3, #8
 8014f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f003 0307 	and.w	r3, r3, #7
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d00a      	beq.n	8014fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8014f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f92:	f383 8811 	msr	BASEPRI, r3
 8014f96:	f3bf 8f6f 	isb	sy
 8014f9a:	f3bf 8f4f 	dsb	sy
 8014f9e:	617b      	str	r3, [r7, #20]
}
 8014fa0:	bf00      	nop
 8014fa2:	e7fe      	b.n	8014fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d06e      	beq.n	8015088 <pvPortMalloc+0x150>
 8014faa:	4b45      	ldr	r3, [pc, #276]	; (80150c0 <pvPortMalloc+0x188>)
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	687a      	ldr	r2, [r7, #4]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d869      	bhi.n	8015088 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014fb4:	4b43      	ldr	r3, [pc, #268]	; (80150c4 <pvPortMalloc+0x18c>)
 8014fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014fb8:	4b42      	ldr	r3, [pc, #264]	; (80150c4 <pvPortMalloc+0x18c>)
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fbe:	e004      	b.n	8014fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fcc:	685b      	ldr	r3, [r3, #4]
 8014fce:	687a      	ldr	r2, [r7, #4]
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d903      	bls.n	8014fdc <pvPortMalloc+0xa4>
 8014fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d1f1      	bne.n	8014fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014fdc:	4b36      	ldr	r3, [pc, #216]	; (80150b8 <pvPortMalloc+0x180>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d050      	beq.n	8015088 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014fe6:	6a3b      	ldr	r3, [r7, #32]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	2208      	movs	r2, #8
 8014fec:	4413      	add	r3, r2
 8014fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff2:	681a      	ldr	r2, [r3, #0]
 8014ff4:	6a3b      	ldr	r3, [r7, #32]
 8014ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ffa:	685a      	ldr	r2, [r3, #4]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	1ad2      	subs	r2, r2, r3
 8015000:	2308      	movs	r3, #8
 8015002:	005b      	lsls	r3, r3, #1
 8015004:	429a      	cmp	r2, r3
 8015006:	d91f      	bls.n	8015048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	4413      	add	r3, r2
 801500e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015010:	69bb      	ldr	r3, [r7, #24]
 8015012:	f003 0307 	and.w	r3, r3, #7
 8015016:	2b00      	cmp	r3, #0
 8015018:	d00a      	beq.n	8015030 <pvPortMalloc+0xf8>
	__asm volatile
 801501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801501e:	f383 8811 	msr	BASEPRI, r3
 8015022:	f3bf 8f6f 	isb	sy
 8015026:	f3bf 8f4f 	dsb	sy
 801502a:	613b      	str	r3, [r7, #16]
}
 801502c:	bf00      	nop
 801502e:	e7fe      	b.n	801502e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015032:	685a      	ldr	r2, [r3, #4]
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	1ad2      	subs	r2, r2, r3
 8015038:	69bb      	ldr	r3, [r7, #24]
 801503a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503e:	687a      	ldr	r2, [r7, #4]
 8015040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015042:	69b8      	ldr	r0, [r7, #24]
 8015044:	f000 f908 	bl	8015258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015048:	4b1d      	ldr	r3, [pc, #116]	; (80150c0 <pvPortMalloc+0x188>)
 801504a:	681a      	ldr	r2, [r3, #0]
 801504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504e:	685b      	ldr	r3, [r3, #4]
 8015050:	1ad3      	subs	r3, r2, r3
 8015052:	4a1b      	ldr	r2, [pc, #108]	; (80150c0 <pvPortMalloc+0x188>)
 8015054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015056:	4b1a      	ldr	r3, [pc, #104]	; (80150c0 <pvPortMalloc+0x188>)
 8015058:	681a      	ldr	r2, [r3, #0]
 801505a:	4b1b      	ldr	r3, [pc, #108]	; (80150c8 <pvPortMalloc+0x190>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	429a      	cmp	r2, r3
 8015060:	d203      	bcs.n	801506a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015062:	4b17      	ldr	r3, [pc, #92]	; (80150c0 <pvPortMalloc+0x188>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	4a18      	ldr	r2, [pc, #96]	; (80150c8 <pvPortMalloc+0x190>)
 8015068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506c:	685a      	ldr	r2, [r3, #4]
 801506e:	4b13      	ldr	r3, [pc, #76]	; (80150bc <pvPortMalloc+0x184>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	431a      	orrs	r2, r3
 8015074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801507a:	2200      	movs	r2, #0
 801507c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801507e:	4b13      	ldr	r3, [pc, #76]	; (80150cc <pvPortMalloc+0x194>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	3301      	adds	r3, #1
 8015084:	4a11      	ldr	r2, [pc, #68]	; (80150cc <pvPortMalloc+0x194>)
 8015086:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015088:	f7fe fc26 	bl	80138d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801508c:	69fb      	ldr	r3, [r7, #28]
 801508e:	f003 0307 	and.w	r3, r3, #7
 8015092:	2b00      	cmp	r3, #0
 8015094:	d00a      	beq.n	80150ac <pvPortMalloc+0x174>
	__asm volatile
 8015096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801509a:	f383 8811 	msr	BASEPRI, r3
 801509e:	f3bf 8f6f 	isb	sy
 80150a2:	f3bf 8f4f 	dsb	sy
 80150a6:	60fb      	str	r3, [r7, #12]
}
 80150a8:	bf00      	nop
 80150aa:	e7fe      	b.n	80150aa <pvPortMalloc+0x172>
	return pvReturn;
 80150ac:	69fb      	ldr	r3, [r7, #28]
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	3728      	adds	r7, #40	; 0x28
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	bf00      	nop
 80150b8:	240055e8 	.word	0x240055e8
 80150bc:	240055fc 	.word	0x240055fc
 80150c0:	240055ec 	.word	0x240055ec
 80150c4:	240055e0 	.word	0x240055e0
 80150c8:	240055f0 	.word	0x240055f0
 80150cc:	240055f4 	.word	0x240055f4

080150d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b086      	sub	sp, #24
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d04d      	beq.n	801517e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80150e2:	2308      	movs	r3, #8
 80150e4:	425b      	negs	r3, r3
 80150e6:	697a      	ldr	r2, [r7, #20]
 80150e8:	4413      	add	r3, r2
 80150ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	685a      	ldr	r2, [r3, #4]
 80150f4:	4b24      	ldr	r3, [pc, #144]	; (8015188 <vPortFree+0xb8>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	4013      	ands	r3, r2
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d10a      	bne.n	8015114 <vPortFree+0x44>
	__asm volatile
 80150fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015102:	f383 8811 	msr	BASEPRI, r3
 8015106:	f3bf 8f6f 	isb	sy
 801510a:	f3bf 8f4f 	dsb	sy
 801510e:	60fb      	str	r3, [r7, #12]
}
 8015110:	bf00      	nop
 8015112:	e7fe      	b.n	8015112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d00a      	beq.n	8015132 <vPortFree+0x62>
	__asm volatile
 801511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015120:	f383 8811 	msr	BASEPRI, r3
 8015124:	f3bf 8f6f 	isb	sy
 8015128:	f3bf 8f4f 	dsb	sy
 801512c:	60bb      	str	r3, [r7, #8]
}
 801512e:	bf00      	nop
 8015130:	e7fe      	b.n	8015130 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	685a      	ldr	r2, [r3, #4]
 8015136:	4b14      	ldr	r3, [pc, #80]	; (8015188 <vPortFree+0xb8>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	4013      	ands	r3, r2
 801513c:	2b00      	cmp	r3, #0
 801513e:	d01e      	beq.n	801517e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015140:	693b      	ldr	r3, [r7, #16]
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d11a      	bne.n	801517e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	685a      	ldr	r2, [r3, #4]
 801514c:	4b0e      	ldr	r3, [pc, #56]	; (8015188 <vPortFree+0xb8>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	43db      	mvns	r3, r3
 8015152:	401a      	ands	r2, r3
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015158:	f7fe fbb0 	bl	80138bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801515c:	693b      	ldr	r3, [r7, #16]
 801515e:	685a      	ldr	r2, [r3, #4]
 8015160:	4b0a      	ldr	r3, [pc, #40]	; (801518c <vPortFree+0xbc>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	4413      	add	r3, r2
 8015166:	4a09      	ldr	r2, [pc, #36]	; (801518c <vPortFree+0xbc>)
 8015168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801516a:	6938      	ldr	r0, [r7, #16]
 801516c:	f000 f874 	bl	8015258 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015170:	4b07      	ldr	r3, [pc, #28]	; (8015190 <vPortFree+0xc0>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	3301      	adds	r3, #1
 8015176:	4a06      	ldr	r2, [pc, #24]	; (8015190 <vPortFree+0xc0>)
 8015178:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801517a:	f7fe fbad 	bl	80138d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801517e:	bf00      	nop
 8015180:	3718      	adds	r7, #24
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}
 8015186:	bf00      	nop
 8015188:	240055fc 	.word	0x240055fc
 801518c:	240055ec 	.word	0x240055ec
 8015190:	240055f8 	.word	0x240055f8

08015194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015194:	b480      	push	{r7}
 8015196:	b085      	sub	sp, #20
 8015198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801519a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801519e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80151a0:	4b27      	ldr	r3, [pc, #156]	; (8015240 <prvHeapInit+0xac>)
 80151a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	f003 0307 	and.w	r3, r3, #7
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d00c      	beq.n	80151c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	3307      	adds	r3, #7
 80151b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	f023 0307 	bic.w	r3, r3, #7
 80151ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80151bc:	68ba      	ldr	r2, [r7, #8]
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	1ad3      	subs	r3, r2, r3
 80151c2:	4a1f      	ldr	r2, [pc, #124]	; (8015240 <prvHeapInit+0xac>)
 80151c4:	4413      	add	r3, r2
 80151c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80151cc:	4a1d      	ldr	r2, [pc, #116]	; (8015244 <prvHeapInit+0xb0>)
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80151d2:	4b1c      	ldr	r3, [pc, #112]	; (8015244 <prvHeapInit+0xb0>)
 80151d4:	2200      	movs	r2, #0
 80151d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	68ba      	ldr	r2, [r7, #8]
 80151dc:	4413      	add	r3, r2
 80151de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80151e0:	2208      	movs	r2, #8
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	1a9b      	subs	r3, r3, r2
 80151e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	f023 0307 	bic.w	r3, r3, #7
 80151ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	4a15      	ldr	r2, [pc, #84]	; (8015248 <prvHeapInit+0xb4>)
 80151f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80151f6:	4b14      	ldr	r3, [pc, #80]	; (8015248 <prvHeapInit+0xb4>)
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	2200      	movs	r2, #0
 80151fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80151fe:	4b12      	ldr	r3, [pc, #72]	; (8015248 <prvHeapInit+0xb4>)
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	2200      	movs	r2, #0
 8015204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	68fa      	ldr	r2, [r7, #12]
 801520e:	1ad2      	subs	r2, r2, r3
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015214:	4b0c      	ldr	r3, [pc, #48]	; (8015248 <prvHeapInit+0xb4>)
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	685b      	ldr	r3, [r3, #4]
 8015220:	4a0a      	ldr	r2, [pc, #40]	; (801524c <prvHeapInit+0xb8>)
 8015222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	685b      	ldr	r3, [r3, #4]
 8015228:	4a09      	ldr	r2, [pc, #36]	; (8015250 <prvHeapInit+0xbc>)
 801522a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801522c:	4b09      	ldr	r3, [pc, #36]	; (8015254 <prvHeapInit+0xc0>)
 801522e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015232:	601a      	str	r2, [r3, #0]
}
 8015234:	bf00      	nop
 8015236:	3714      	adds	r7, #20
 8015238:	46bd      	mov	sp, r7
 801523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523e:	4770      	bx	lr
 8015240:	240019e0 	.word	0x240019e0
 8015244:	240055e0 	.word	0x240055e0
 8015248:	240055e8 	.word	0x240055e8
 801524c:	240055f0 	.word	0x240055f0
 8015250:	240055ec 	.word	0x240055ec
 8015254:	240055fc 	.word	0x240055fc

08015258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015258:	b480      	push	{r7}
 801525a:	b085      	sub	sp, #20
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015260:	4b28      	ldr	r3, [pc, #160]	; (8015304 <prvInsertBlockIntoFreeList+0xac>)
 8015262:	60fb      	str	r3, [r7, #12]
 8015264:	e002      	b.n	801526c <prvInsertBlockIntoFreeList+0x14>
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	60fb      	str	r3, [r7, #12]
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	687a      	ldr	r2, [r7, #4]
 8015272:	429a      	cmp	r2, r3
 8015274:	d8f7      	bhi.n	8015266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	68ba      	ldr	r2, [r7, #8]
 8015280:	4413      	add	r3, r2
 8015282:	687a      	ldr	r2, [r7, #4]
 8015284:	429a      	cmp	r2, r3
 8015286:	d108      	bne.n	801529a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	685a      	ldr	r2, [r3, #4]
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	685b      	ldr	r3, [r3, #4]
 8015290:	441a      	add	r2, r3
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	685b      	ldr	r3, [r3, #4]
 80152a2:	68ba      	ldr	r2, [r7, #8]
 80152a4:	441a      	add	r2, r3
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d118      	bne.n	80152e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	681a      	ldr	r2, [r3, #0]
 80152b2:	4b15      	ldr	r3, [pc, #84]	; (8015308 <prvInsertBlockIntoFreeList+0xb0>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d00d      	beq.n	80152d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	685a      	ldr	r2, [r3, #4]
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	685b      	ldr	r3, [r3, #4]
 80152c4:	441a      	add	r2, r3
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	681a      	ldr	r2, [r3, #0]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	601a      	str	r2, [r3, #0]
 80152d4:	e008      	b.n	80152e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80152d6:	4b0c      	ldr	r3, [pc, #48]	; (8015308 <prvInsertBlockIntoFreeList+0xb0>)
 80152d8:	681a      	ldr	r2, [r3, #0]
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	601a      	str	r2, [r3, #0]
 80152de:	e003      	b.n	80152e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	681a      	ldr	r2, [r3, #0]
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80152e8:	68fa      	ldr	r2, [r7, #12]
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d002      	beq.n	80152f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	687a      	ldr	r2, [r7, #4]
 80152f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80152f6:	bf00      	nop
 80152f8:	3714      	adds	r7, #20
 80152fa:	46bd      	mov	sp, r7
 80152fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015300:	4770      	bx	lr
 8015302:	bf00      	nop
 8015304:	240055e0 	.word	0x240055e0
 8015308:	240055e8 	.word	0x240055e8

0801530c <__errno>:
 801530c:	4b01      	ldr	r3, [pc, #4]	; (8015314 <__errno+0x8>)
 801530e:	6818      	ldr	r0, [r3, #0]
 8015310:	4770      	bx	lr
 8015312:	bf00      	nop
 8015314:	240000a0 	.word	0x240000a0

08015318 <__libc_init_array>:
 8015318:	b570      	push	{r4, r5, r6, lr}
 801531a:	4d0d      	ldr	r5, [pc, #52]	; (8015350 <__libc_init_array+0x38>)
 801531c:	4c0d      	ldr	r4, [pc, #52]	; (8015354 <__libc_init_array+0x3c>)
 801531e:	1b64      	subs	r4, r4, r5
 8015320:	10a4      	asrs	r4, r4, #2
 8015322:	2600      	movs	r6, #0
 8015324:	42a6      	cmp	r6, r4
 8015326:	d109      	bne.n	801533c <__libc_init_array+0x24>
 8015328:	4d0b      	ldr	r5, [pc, #44]	; (8015358 <__libc_init_array+0x40>)
 801532a:	4c0c      	ldr	r4, [pc, #48]	; (801535c <__libc_init_array+0x44>)
 801532c:	f000 fd3c 	bl	8015da8 <_init>
 8015330:	1b64      	subs	r4, r4, r5
 8015332:	10a4      	asrs	r4, r4, #2
 8015334:	2600      	movs	r6, #0
 8015336:	42a6      	cmp	r6, r4
 8015338:	d105      	bne.n	8015346 <__libc_init_array+0x2e>
 801533a:	bd70      	pop	{r4, r5, r6, pc}
 801533c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015340:	4798      	blx	r3
 8015342:	3601      	adds	r6, #1
 8015344:	e7ee      	b.n	8015324 <__libc_init_array+0xc>
 8015346:	f855 3b04 	ldr.w	r3, [r5], #4
 801534a:	4798      	blx	r3
 801534c:	3601      	adds	r6, #1
 801534e:	e7f2      	b.n	8015336 <__libc_init_array+0x1e>
 8015350:	0801625c 	.word	0x0801625c
 8015354:	0801625c 	.word	0x0801625c
 8015358:	0801625c 	.word	0x0801625c
 801535c:	08016260 	.word	0x08016260

08015360 <malloc>:
 8015360:	4b02      	ldr	r3, [pc, #8]	; (801536c <malloc+0xc>)
 8015362:	4601      	mov	r1, r0
 8015364:	6818      	ldr	r0, [r3, #0]
 8015366:	f000 b88d 	b.w	8015484 <_malloc_r>
 801536a:	bf00      	nop
 801536c:	240000a0 	.word	0x240000a0

08015370 <free>:
 8015370:	4b02      	ldr	r3, [pc, #8]	; (801537c <free+0xc>)
 8015372:	4601      	mov	r1, r0
 8015374:	6818      	ldr	r0, [r3, #0]
 8015376:	f000 b819 	b.w	80153ac <_free_r>
 801537a:	bf00      	nop
 801537c:	240000a0 	.word	0x240000a0

08015380 <memcpy>:
 8015380:	440a      	add	r2, r1
 8015382:	4291      	cmp	r1, r2
 8015384:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015388:	d100      	bne.n	801538c <memcpy+0xc>
 801538a:	4770      	bx	lr
 801538c:	b510      	push	{r4, lr}
 801538e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015396:	4291      	cmp	r1, r2
 8015398:	d1f9      	bne.n	801538e <memcpy+0xe>
 801539a:	bd10      	pop	{r4, pc}

0801539c <memset>:
 801539c:	4402      	add	r2, r0
 801539e:	4603      	mov	r3, r0
 80153a0:	4293      	cmp	r3, r2
 80153a2:	d100      	bne.n	80153a6 <memset+0xa>
 80153a4:	4770      	bx	lr
 80153a6:	f803 1b01 	strb.w	r1, [r3], #1
 80153aa:	e7f9      	b.n	80153a0 <memset+0x4>

080153ac <_free_r>:
 80153ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80153ae:	2900      	cmp	r1, #0
 80153b0:	d044      	beq.n	801543c <_free_r+0x90>
 80153b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153b6:	9001      	str	r0, [sp, #4]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	f1a1 0404 	sub.w	r4, r1, #4
 80153be:	bfb8      	it	lt
 80153c0:	18e4      	addlt	r4, r4, r3
 80153c2:	f000 fc39 	bl	8015c38 <__malloc_lock>
 80153c6:	4a1e      	ldr	r2, [pc, #120]	; (8015440 <_free_r+0x94>)
 80153c8:	9801      	ldr	r0, [sp, #4]
 80153ca:	6813      	ldr	r3, [r2, #0]
 80153cc:	b933      	cbnz	r3, 80153dc <_free_r+0x30>
 80153ce:	6063      	str	r3, [r4, #4]
 80153d0:	6014      	str	r4, [r2, #0]
 80153d2:	b003      	add	sp, #12
 80153d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80153d8:	f000 bc34 	b.w	8015c44 <__malloc_unlock>
 80153dc:	42a3      	cmp	r3, r4
 80153de:	d908      	bls.n	80153f2 <_free_r+0x46>
 80153e0:	6825      	ldr	r5, [r4, #0]
 80153e2:	1961      	adds	r1, r4, r5
 80153e4:	428b      	cmp	r3, r1
 80153e6:	bf01      	itttt	eq
 80153e8:	6819      	ldreq	r1, [r3, #0]
 80153ea:	685b      	ldreq	r3, [r3, #4]
 80153ec:	1949      	addeq	r1, r1, r5
 80153ee:	6021      	streq	r1, [r4, #0]
 80153f0:	e7ed      	b.n	80153ce <_free_r+0x22>
 80153f2:	461a      	mov	r2, r3
 80153f4:	685b      	ldr	r3, [r3, #4]
 80153f6:	b10b      	cbz	r3, 80153fc <_free_r+0x50>
 80153f8:	42a3      	cmp	r3, r4
 80153fa:	d9fa      	bls.n	80153f2 <_free_r+0x46>
 80153fc:	6811      	ldr	r1, [r2, #0]
 80153fe:	1855      	adds	r5, r2, r1
 8015400:	42a5      	cmp	r5, r4
 8015402:	d10b      	bne.n	801541c <_free_r+0x70>
 8015404:	6824      	ldr	r4, [r4, #0]
 8015406:	4421      	add	r1, r4
 8015408:	1854      	adds	r4, r2, r1
 801540a:	42a3      	cmp	r3, r4
 801540c:	6011      	str	r1, [r2, #0]
 801540e:	d1e0      	bne.n	80153d2 <_free_r+0x26>
 8015410:	681c      	ldr	r4, [r3, #0]
 8015412:	685b      	ldr	r3, [r3, #4]
 8015414:	6053      	str	r3, [r2, #4]
 8015416:	4421      	add	r1, r4
 8015418:	6011      	str	r1, [r2, #0]
 801541a:	e7da      	b.n	80153d2 <_free_r+0x26>
 801541c:	d902      	bls.n	8015424 <_free_r+0x78>
 801541e:	230c      	movs	r3, #12
 8015420:	6003      	str	r3, [r0, #0]
 8015422:	e7d6      	b.n	80153d2 <_free_r+0x26>
 8015424:	6825      	ldr	r5, [r4, #0]
 8015426:	1961      	adds	r1, r4, r5
 8015428:	428b      	cmp	r3, r1
 801542a:	bf04      	itt	eq
 801542c:	6819      	ldreq	r1, [r3, #0]
 801542e:	685b      	ldreq	r3, [r3, #4]
 8015430:	6063      	str	r3, [r4, #4]
 8015432:	bf04      	itt	eq
 8015434:	1949      	addeq	r1, r1, r5
 8015436:	6021      	streq	r1, [r4, #0]
 8015438:	6054      	str	r4, [r2, #4]
 801543a:	e7ca      	b.n	80153d2 <_free_r+0x26>
 801543c:	b003      	add	sp, #12
 801543e:	bd30      	pop	{r4, r5, pc}
 8015440:	24005600 	.word	0x24005600

08015444 <sbrk_aligned>:
 8015444:	b570      	push	{r4, r5, r6, lr}
 8015446:	4e0e      	ldr	r6, [pc, #56]	; (8015480 <sbrk_aligned+0x3c>)
 8015448:	460c      	mov	r4, r1
 801544a:	6831      	ldr	r1, [r6, #0]
 801544c:	4605      	mov	r5, r0
 801544e:	b911      	cbnz	r1, 8015456 <sbrk_aligned+0x12>
 8015450:	f000 f902 	bl	8015658 <_sbrk_r>
 8015454:	6030      	str	r0, [r6, #0]
 8015456:	4621      	mov	r1, r4
 8015458:	4628      	mov	r0, r5
 801545a:	f000 f8fd 	bl	8015658 <_sbrk_r>
 801545e:	1c43      	adds	r3, r0, #1
 8015460:	d00a      	beq.n	8015478 <sbrk_aligned+0x34>
 8015462:	1cc4      	adds	r4, r0, #3
 8015464:	f024 0403 	bic.w	r4, r4, #3
 8015468:	42a0      	cmp	r0, r4
 801546a:	d007      	beq.n	801547c <sbrk_aligned+0x38>
 801546c:	1a21      	subs	r1, r4, r0
 801546e:	4628      	mov	r0, r5
 8015470:	f000 f8f2 	bl	8015658 <_sbrk_r>
 8015474:	3001      	adds	r0, #1
 8015476:	d101      	bne.n	801547c <sbrk_aligned+0x38>
 8015478:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801547c:	4620      	mov	r0, r4
 801547e:	bd70      	pop	{r4, r5, r6, pc}
 8015480:	24005604 	.word	0x24005604

08015484 <_malloc_r>:
 8015484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015488:	1ccd      	adds	r5, r1, #3
 801548a:	f025 0503 	bic.w	r5, r5, #3
 801548e:	3508      	adds	r5, #8
 8015490:	2d0c      	cmp	r5, #12
 8015492:	bf38      	it	cc
 8015494:	250c      	movcc	r5, #12
 8015496:	2d00      	cmp	r5, #0
 8015498:	4607      	mov	r7, r0
 801549a:	db01      	blt.n	80154a0 <_malloc_r+0x1c>
 801549c:	42a9      	cmp	r1, r5
 801549e:	d905      	bls.n	80154ac <_malloc_r+0x28>
 80154a0:	230c      	movs	r3, #12
 80154a2:	603b      	str	r3, [r7, #0]
 80154a4:	2600      	movs	r6, #0
 80154a6:	4630      	mov	r0, r6
 80154a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154ac:	4e2e      	ldr	r6, [pc, #184]	; (8015568 <_malloc_r+0xe4>)
 80154ae:	f000 fbc3 	bl	8015c38 <__malloc_lock>
 80154b2:	6833      	ldr	r3, [r6, #0]
 80154b4:	461c      	mov	r4, r3
 80154b6:	bb34      	cbnz	r4, 8015506 <_malloc_r+0x82>
 80154b8:	4629      	mov	r1, r5
 80154ba:	4638      	mov	r0, r7
 80154bc:	f7ff ffc2 	bl	8015444 <sbrk_aligned>
 80154c0:	1c43      	adds	r3, r0, #1
 80154c2:	4604      	mov	r4, r0
 80154c4:	d14d      	bne.n	8015562 <_malloc_r+0xde>
 80154c6:	6834      	ldr	r4, [r6, #0]
 80154c8:	4626      	mov	r6, r4
 80154ca:	2e00      	cmp	r6, #0
 80154cc:	d140      	bne.n	8015550 <_malloc_r+0xcc>
 80154ce:	6823      	ldr	r3, [r4, #0]
 80154d0:	4631      	mov	r1, r6
 80154d2:	4638      	mov	r0, r7
 80154d4:	eb04 0803 	add.w	r8, r4, r3
 80154d8:	f000 f8be 	bl	8015658 <_sbrk_r>
 80154dc:	4580      	cmp	r8, r0
 80154de:	d13a      	bne.n	8015556 <_malloc_r+0xd2>
 80154e0:	6821      	ldr	r1, [r4, #0]
 80154e2:	3503      	adds	r5, #3
 80154e4:	1a6d      	subs	r5, r5, r1
 80154e6:	f025 0503 	bic.w	r5, r5, #3
 80154ea:	3508      	adds	r5, #8
 80154ec:	2d0c      	cmp	r5, #12
 80154ee:	bf38      	it	cc
 80154f0:	250c      	movcc	r5, #12
 80154f2:	4629      	mov	r1, r5
 80154f4:	4638      	mov	r0, r7
 80154f6:	f7ff ffa5 	bl	8015444 <sbrk_aligned>
 80154fa:	3001      	adds	r0, #1
 80154fc:	d02b      	beq.n	8015556 <_malloc_r+0xd2>
 80154fe:	6823      	ldr	r3, [r4, #0]
 8015500:	442b      	add	r3, r5
 8015502:	6023      	str	r3, [r4, #0]
 8015504:	e00e      	b.n	8015524 <_malloc_r+0xa0>
 8015506:	6822      	ldr	r2, [r4, #0]
 8015508:	1b52      	subs	r2, r2, r5
 801550a:	d41e      	bmi.n	801554a <_malloc_r+0xc6>
 801550c:	2a0b      	cmp	r2, #11
 801550e:	d916      	bls.n	801553e <_malloc_r+0xba>
 8015510:	1961      	adds	r1, r4, r5
 8015512:	42a3      	cmp	r3, r4
 8015514:	6025      	str	r5, [r4, #0]
 8015516:	bf18      	it	ne
 8015518:	6059      	strne	r1, [r3, #4]
 801551a:	6863      	ldr	r3, [r4, #4]
 801551c:	bf08      	it	eq
 801551e:	6031      	streq	r1, [r6, #0]
 8015520:	5162      	str	r2, [r4, r5]
 8015522:	604b      	str	r3, [r1, #4]
 8015524:	4638      	mov	r0, r7
 8015526:	f104 060b 	add.w	r6, r4, #11
 801552a:	f000 fb8b 	bl	8015c44 <__malloc_unlock>
 801552e:	f026 0607 	bic.w	r6, r6, #7
 8015532:	1d23      	adds	r3, r4, #4
 8015534:	1af2      	subs	r2, r6, r3
 8015536:	d0b6      	beq.n	80154a6 <_malloc_r+0x22>
 8015538:	1b9b      	subs	r3, r3, r6
 801553a:	50a3      	str	r3, [r4, r2]
 801553c:	e7b3      	b.n	80154a6 <_malloc_r+0x22>
 801553e:	6862      	ldr	r2, [r4, #4]
 8015540:	42a3      	cmp	r3, r4
 8015542:	bf0c      	ite	eq
 8015544:	6032      	streq	r2, [r6, #0]
 8015546:	605a      	strne	r2, [r3, #4]
 8015548:	e7ec      	b.n	8015524 <_malloc_r+0xa0>
 801554a:	4623      	mov	r3, r4
 801554c:	6864      	ldr	r4, [r4, #4]
 801554e:	e7b2      	b.n	80154b6 <_malloc_r+0x32>
 8015550:	4634      	mov	r4, r6
 8015552:	6876      	ldr	r6, [r6, #4]
 8015554:	e7b9      	b.n	80154ca <_malloc_r+0x46>
 8015556:	230c      	movs	r3, #12
 8015558:	603b      	str	r3, [r7, #0]
 801555a:	4638      	mov	r0, r7
 801555c:	f000 fb72 	bl	8015c44 <__malloc_unlock>
 8015560:	e7a1      	b.n	80154a6 <_malloc_r+0x22>
 8015562:	6025      	str	r5, [r4, #0]
 8015564:	e7de      	b.n	8015524 <_malloc_r+0xa0>
 8015566:	bf00      	nop
 8015568:	24005600 	.word	0x24005600

0801556c <_puts_r>:
 801556c:	b570      	push	{r4, r5, r6, lr}
 801556e:	460e      	mov	r6, r1
 8015570:	4605      	mov	r5, r0
 8015572:	b118      	cbz	r0, 801557c <_puts_r+0x10>
 8015574:	6983      	ldr	r3, [r0, #24]
 8015576:	b90b      	cbnz	r3, 801557c <_puts_r+0x10>
 8015578:	f000 fa58 	bl	8015a2c <__sinit>
 801557c:	69ab      	ldr	r3, [r5, #24]
 801557e:	68ac      	ldr	r4, [r5, #8]
 8015580:	b913      	cbnz	r3, 8015588 <_puts_r+0x1c>
 8015582:	4628      	mov	r0, r5
 8015584:	f000 fa52 	bl	8015a2c <__sinit>
 8015588:	4b2c      	ldr	r3, [pc, #176]	; (801563c <_puts_r+0xd0>)
 801558a:	429c      	cmp	r4, r3
 801558c:	d120      	bne.n	80155d0 <_puts_r+0x64>
 801558e:	686c      	ldr	r4, [r5, #4]
 8015590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015592:	07db      	lsls	r3, r3, #31
 8015594:	d405      	bmi.n	80155a2 <_puts_r+0x36>
 8015596:	89a3      	ldrh	r3, [r4, #12]
 8015598:	0598      	lsls	r0, r3, #22
 801559a:	d402      	bmi.n	80155a2 <_puts_r+0x36>
 801559c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801559e:	f000 fae3 	bl	8015b68 <__retarget_lock_acquire_recursive>
 80155a2:	89a3      	ldrh	r3, [r4, #12]
 80155a4:	0719      	lsls	r1, r3, #28
 80155a6:	d51d      	bpl.n	80155e4 <_puts_r+0x78>
 80155a8:	6923      	ldr	r3, [r4, #16]
 80155aa:	b1db      	cbz	r3, 80155e4 <_puts_r+0x78>
 80155ac:	3e01      	subs	r6, #1
 80155ae:	68a3      	ldr	r3, [r4, #8]
 80155b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80155b4:	3b01      	subs	r3, #1
 80155b6:	60a3      	str	r3, [r4, #8]
 80155b8:	bb39      	cbnz	r1, 801560a <_puts_r+0x9e>
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	da38      	bge.n	8015630 <_puts_r+0xc4>
 80155be:	4622      	mov	r2, r4
 80155c0:	210a      	movs	r1, #10
 80155c2:	4628      	mov	r0, r5
 80155c4:	f000 f858 	bl	8015678 <__swbuf_r>
 80155c8:	3001      	adds	r0, #1
 80155ca:	d011      	beq.n	80155f0 <_puts_r+0x84>
 80155cc:	250a      	movs	r5, #10
 80155ce:	e011      	b.n	80155f4 <_puts_r+0x88>
 80155d0:	4b1b      	ldr	r3, [pc, #108]	; (8015640 <_puts_r+0xd4>)
 80155d2:	429c      	cmp	r4, r3
 80155d4:	d101      	bne.n	80155da <_puts_r+0x6e>
 80155d6:	68ac      	ldr	r4, [r5, #8]
 80155d8:	e7da      	b.n	8015590 <_puts_r+0x24>
 80155da:	4b1a      	ldr	r3, [pc, #104]	; (8015644 <_puts_r+0xd8>)
 80155dc:	429c      	cmp	r4, r3
 80155de:	bf08      	it	eq
 80155e0:	68ec      	ldreq	r4, [r5, #12]
 80155e2:	e7d5      	b.n	8015590 <_puts_r+0x24>
 80155e4:	4621      	mov	r1, r4
 80155e6:	4628      	mov	r0, r5
 80155e8:	f000 f898 	bl	801571c <__swsetup_r>
 80155ec:	2800      	cmp	r0, #0
 80155ee:	d0dd      	beq.n	80155ac <_puts_r+0x40>
 80155f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80155f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80155f6:	07da      	lsls	r2, r3, #31
 80155f8:	d405      	bmi.n	8015606 <_puts_r+0x9a>
 80155fa:	89a3      	ldrh	r3, [r4, #12]
 80155fc:	059b      	lsls	r3, r3, #22
 80155fe:	d402      	bmi.n	8015606 <_puts_r+0x9a>
 8015600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015602:	f000 fab2 	bl	8015b6a <__retarget_lock_release_recursive>
 8015606:	4628      	mov	r0, r5
 8015608:	bd70      	pop	{r4, r5, r6, pc}
 801560a:	2b00      	cmp	r3, #0
 801560c:	da04      	bge.n	8015618 <_puts_r+0xac>
 801560e:	69a2      	ldr	r2, [r4, #24]
 8015610:	429a      	cmp	r2, r3
 8015612:	dc06      	bgt.n	8015622 <_puts_r+0xb6>
 8015614:	290a      	cmp	r1, #10
 8015616:	d004      	beq.n	8015622 <_puts_r+0xb6>
 8015618:	6823      	ldr	r3, [r4, #0]
 801561a:	1c5a      	adds	r2, r3, #1
 801561c:	6022      	str	r2, [r4, #0]
 801561e:	7019      	strb	r1, [r3, #0]
 8015620:	e7c5      	b.n	80155ae <_puts_r+0x42>
 8015622:	4622      	mov	r2, r4
 8015624:	4628      	mov	r0, r5
 8015626:	f000 f827 	bl	8015678 <__swbuf_r>
 801562a:	3001      	adds	r0, #1
 801562c:	d1bf      	bne.n	80155ae <_puts_r+0x42>
 801562e:	e7df      	b.n	80155f0 <_puts_r+0x84>
 8015630:	6823      	ldr	r3, [r4, #0]
 8015632:	250a      	movs	r5, #10
 8015634:	1c5a      	adds	r2, r3, #1
 8015636:	6022      	str	r2, [r4, #0]
 8015638:	701d      	strb	r5, [r3, #0]
 801563a:	e7db      	b.n	80155f4 <_puts_r+0x88>
 801563c:	08016214 	.word	0x08016214
 8015640:	08016234 	.word	0x08016234
 8015644:	080161f4 	.word	0x080161f4

08015648 <puts>:
 8015648:	4b02      	ldr	r3, [pc, #8]	; (8015654 <puts+0xc>)
 801564a:	4601      	mov	r1, r0
 801564c:	6818      	ldr	r0, [r3, #0]
 801564e:	f7ff bf8d 	b.w	801556c <_puts_r>
 8015652:	bf00      	nop
 8015654:	240000a0 	.word	0x240000a0

08015658 <_sbrk_r>:
 8015658:	b538      	push	{r3, r4, r5, lr}
 801565a:	4d06      	ldr	r5, [pc, #24]	; (8015674 <_sbrk_r+0x1c>)
 801565c:	2300      	movs	r3, #0
 801565e:	4604      	mov	r4, r0
 8015660:	4608      	mov	r0, r1
 8015662:	602b      	str	r3, [r5, #0]
 8015664:	f7ed fa38 	bl	8002ad8 <_sbrk>
 8015668:	1c43      	adds	r3, r0, #1
 801566a:	d102      	bne.n	8015672 <_sbrk_r+0x1a>
 801566c:	682b      	ldr	r3, [r5, #0]
 801566e:	b103      	cbz	r3, 8015672 <_sbrk_r+0x1a>
 8015670:	6023      	str	r3, [r4, #0]
 8015672:	bd38      	pop	{r3, r4, r5, pc}
 8015674:	2400560c 	.word	0x2400560c

08015678 <__swbuf_r>:
 8015678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801567a:	460e      	mov	r6, r1
 801567c:	4614      	mov	r4, r2
 801567e:	4605      	mov	r5, r0
 8015680:	b118      	cbz	r0, 801568a <__swbuf_r+0x12>
 8015682:	6983      	ldr	r3, [r0, #24]
 8015684:	b90b      	cbnz	r3, 801568a <__swbuf_r+0x12>
 8015686:	f000 f9d1 	bl	8015a2c <__sinit>
 801568a:	4b21      	ldr	r3, [pc, #132]	; (8015710 <__swbuf_r+0x98>)
 801568c:	429c      	cmp	r4, r3
 801568e:	d12b      	bne.n	80156e8 <__swbuf_r+0x70>
 8015690:	686c      	ldr	r4, [r5, #4]
 8015692:	69a3      	ldr	r3, [r4, #24]
 8015694:	60a3      	str	r3, [r4, #8]
 8015696:	89a3      	ldrh	r3, [r4, #12]
 8015698:	071a      	lsls	r2, r3, #28
 801569a:	d52f      	bpl.n	80156fc <__swbuf_r+0x84>
 801569c:	6923      	ldr	r3, [r4, #16]
 801569e:	b36b      	cbz	r3, 80156fc <__swbuf_r+0x84>
 80156a0:	6923      	ldr	r3, [r4, #16]
 80156a2:	6820      	ldr	r0, [r4, #0]
 80156a4:	1ac0      	subs	r0, r0, r3
 80156a6:	6963      	ldr	r3, [r4, #20]
 80156a8:	b2f6      	uxtb	r6, r6
 80156aa:	4283      	cmp	r3, r0
 80156ac:	4637      	mov	r7, r6
 80156ae:	dc04      	bgt.n	80156ba <__swbuf_r+0x42>
 80156b0:	4621      	mov	r1, r4
 80156b2:	4628      	mov	r0, r5
 80156b4:	f000 f926 	bl	8015904 <_fflush_r>
 80156b8:	bb30      	cbnz	r0, 8015708 <__swbuf_r+0x90>
 80156ba:	68a3      	ldr	r3, [r4, #8]
 80156bc:	3b01      	subs	r3, #1
 80156be:	60a3      	str	r3, [r4, #8]
 80156c0:	6823      	ldr	r3, [r4, #0]
 80156c2:	1c5a      	adds	r2, r3, #1
 80156c4:	6022      	str	r2, [r4, #0]
 80156c6:	701e      	strb	r6, [r3, #0]
 80156c8:	6963      	ldr	r3, [r4, #20]
 80156ca:	3001      	adds	r0, #1
 80156cc:	4283      	cmp	r3, r0
 80156ce:	d004      	beq.n	80156da <__swbuf_r+0x62>
 80156d0:	89a3      	ldrh	r3, [r4, #12]
 80156d2:	07db      	lsls	r3, r3, #31
 80156d4:	d506      	bpl.n	80156e4 <__swbuf_r+0x6c>
 80156d6:	2e0a      	cmp	r6, #10
 80156d8:	d104      	bne.n	80156e4 <__swbuf_r+0x6c>
 80156da:	4621      	mov	r1, r4
 80156dc:	4628      	mov	r0, r5
 80156de:	f000 f911 	bl	8015904 <_fflush_r>
 80156e2:	b988      	cbnz	r0, 8015708 <__swbuf_r+0x90>
 80156e4:	4638      	mov	r0, r7
 80156e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156e8:	4b0a      	ldr	r3, [pc, #40]	; (8015714 <__swbuf_r+0x9c>)
 80156ea:	429c      	cmp	r4, r3
 80156ec:	d101      	bne.n	80156f2 <__swbuf_r+0x7a>
 80156ee:	68ac      	ldr	r4, [r5, #8]
 80156f0:	e7cf      	b.n	8015692 <__swbuf_r+0x1a>
 80156f2:	4b09      	ldr	r3, [pc, #36]	; (8015718 <__swbuf_r+0xa0>)
 80156f4:	429c      	cmp	r4, r3
 80156f6:	bf08      	it	eq
 80156f8:	68ec      	ldreq	r4, [r5, #12]
 80156fa:	e7ca      	b.n	8015692 <__swbuf_r+0x1a>
 80156fc:	4621      	mov	r1, r4
 80156fe:	4628      	mov	r0, r5
 8015700:	f000 f80c 	bl	801571c <__swsetup_r>
 8015704:	2800      	cmp	r0, #0
 8015706:	d0cb      	beq.n	80156a0 <__swbuf_r+0x28>
 8015708:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801570c:	e7ea      	b.n	80156e4 <__swbuf_r+0x6c>
 801570e:	bf00      	nop
 8015710:	08016214 	.word	0x08016214
 8015714:	08016234 	.word	0x08016234
 8015718:	080161f4 	.word	0x080161f4

0801571c <__swsetup_r>:
 801571c:	4b32      	ldr	r3, [pc, #200]	; (80157e8 <__swsetup_r+0xcc>)
 801571e:	b570      	push	{r4, r5, r6, lr}
 8015720:	681d      	ldr	r5, [r3, #0]
 8015722:	4606      	mov	r6, r0
 8015724:	460c      	mov	r4, r1
 8015726:	b125      	cbz	r5, 8015732 <__swsetup_r+0x16>
 8015728:	69ab      	ldr	r3, [r5, #24]
 801572a:	b913      	cbnz	r3, 8015732 <__swsetup_r+0x16>
 801572c:	4628      	mov	r0, r5
 801572e:	f000 f97d 	bl	8015a2c <__sinit>
 8015732:	4b2e      	ldr	r3, [pc, #184]	; (80157ec <__swsetup_r+0xd0>)
 8015734:	429c      	cmp	r4, r3
 8015736:	d10f      	bne.n	8015758 <__swsetup_r+0x3c>
 8015738:	686c      	ldr	r4, [r5, #4]
 801573a:	89a3      	ldrh	r3, [r4, #12]
 801573c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015740:	0719      	lsls	r1, r3, #28
 8015742:	d42c      	bmi.n	801579e <__swsetup_r+0x82>
 8015744:	06dd      	lsls	r5, r3, #27
 8015746:	d411      	bmi.n	801576c <__swsetup_r+0x50>
 8015748:	2309      	movs	r3, #9
 801574a:	6033      	str	r3, [r6, #0]
 801574c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015750:	81a3      	strh	r3, [r4, #12]
 8015752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015756:	e03e      	b.n	80157d6 <__swsetup_r+0xba>
 8015758:	4b25      	ldr	r3, [pc, #148]	; (80157f0 <__swsetup_r+0xd4>)
 801575a:	429c      	cmp	r4, r3
 801575c:	d101      	bne.n	8015762 <__swsetup_r+0x46>
 801575e:	68ac      	ldr	r4, [r5, #8]
 8015760:	e7eb      	b.n	801573a <__swsetup_r+0x1e>
 8015762:	4b24      	ldr	r3, [pc, #144]	; (80157f4 <__swsetup_r+0xd8>)
 8015764:	429c      	cmp	r4, r3
 8015766:	bf08      	it	eq
 8015768:	68ec      	ldreq	r4, [r5, #12]
 801576a:	e7e6      	b.n	801573a <__swsetup_r+0x1e>
 801576c:	0758      	lsls	r0, r3, #29
 801576e:	d512      	bpl.n	8015796 <__swsetup_r+0x7a>
 8015770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015772:	b141      	cbz	r1, 8015786 <__swsetup_r+0x6a>
 8015774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015778:	4299      	cmp	r1, r3
 801577a:	d002      	beq.n	8015782 <__swsetup_r+0x66>
 801577c:	4630      	mov	r0, r6
 801577e:	f7ff fe15 	bl	80153ac <_free_r>
 8015782:	2300      	movs	r3, #0
 8015784:	6363      	str	r3, [r4, #52]	; 0x34
 8015786:	89a3      	ldrh	r3, [r4, #12]
 8015788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801578c:	81a3      	strh	r3, [r4, #12]
 801578e:	2300      	movs	r3, #0
 8015790:	6063      	str	r3, [r4, #4]
 8015792:	6923      	ldr	r3, [r4, #16]
 8015794:	6023      	str	r3, [r4, #0]
 8015796:	89a3      	ldrh	r3, [r4, #12]
 8015798:	f043 0308 	orr.w	r3, r3, #8
 801579c:	81a3      	strh	r3, [r4, #12]
 801579e:	6923      	ldr	r3, [r4, #16]
 80157a0:	b94b      	cbnz	r3, 80157b6 <__swsetup_r+0x9a>
 80157a2:	89a3      	ldrh	r3, [r4, #12]
 80157a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80157a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80157ac:	d003      	beq.n	80157b6 <__swsetup_r+0x9a>
 80157ae:	4621      	mov	r1, r4
 80157b0:	4630      	mov	r0, r6
 80157b2:	f000 fa01 	bl	8015bb8 <__smakebuf_r>
 80157b6:	89a0      	ldrh	r0, [r4, #12]
 80157b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80157bc:	f010 0301 	ands.w	r3, r0, #1
 80157c0:	d00a      	beq.n	80157d8 <__swsetup_r+0xbc>
 80157c2:	2300      	movs	r3, #0
 80157c4:	60a3      	str	r3, [r4, #8]
 80157c6:	6963      	ldr	r3, [r4, #20]
 80157c8:	425b      	negs	r3, r3
 80157ca:	61a3      	str	r3, [r4, #24]
 80157cc:	6923      	ldr	r3, [r4, #16]
 80157ce:	b943      	cbnz	r3, 80157e2 <__swsetup_r+0xc6>
 80157d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80157d4:	d1ba      	bne.n	801574c <__swsetup_r+0x30>
 80157d6:	bd70      	pop	{r4, r5, r6, pc}
 80157d8:	0781      	lsls	r1, r0, #30
 80157da:	bf58      	it	pl
 80157dc:	6963      	ldrpl	r3, [r4, #20]
 80157de:	60a3      	str	r3, [r4, #8]
 80157e0:	e7f4      	b.n	80157cc <__swsetup_r+0xb0>
 80157e2:	2000      	movs	r0, #0
 80157e4:	e7f7      	b.n	80157d6 <__swsetup_r+0xba>
 80157e6:	bf00      	nop
 80157e8:	240000a0 	.word	0x240000a0
 80157ec:	08016214 	.word	0x08016214
 80157f0:	08016234 	.word	0x08016234
 80157f4:	080161f4 	.word	0x080161f4

080157f8 <__sflush_r>:
 80157f8:	898a      	ldrh	r2, [r1, #12]
 80157fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157fe:	4605      	mov	r5, r0
 8015800:	0710      	lsls	r0, r2, #28
 8015802:	460c      	mov	r4, r1
 8015804:	d458      	bmi.n	80158b8 <__sflush_r+0xc0>
 8015806:	684b      	ldr	r3, [r1, #4]
 8015808:	2b00      	cmp	r3, #0
 801580a:	dc05      	bgt.n	8015818 <__sflush_r+0x20>
 801580c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801580e:	2b00      	cmp	r3, #0
 8015810:	dc02      	bgt.n	8015818 <__sflush_r+0x20>
 8015812:	2000      	movs	r0, #0
 8015814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801581a:	2e00      	cmp	r6, #0
 801581c:	d0f9      	beq.n	8015812 <__sflush_r+0x1a>
 801581e:	2300      	movs	r3, #0
 8015820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015824:	682f      	ldr	r7, [r5, #0]
 8015826:	602b      	str	r3, [r5, #0]
 8015828:	d032      	beq.n	8015890 <__sflush_r+0x98>
 801582a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801582c:	89a3      	ldrh	r3, [r4, #12]
 801582e:	075a      	lsls	r2, r3, #29
 8015830:	d505      	bpl.n	801583e <__sflush_r+0x46>
 8015832:	6863      	ldr	r3, [r4, #4]
 8015834:	1ac0      	subs	r0, r0, r3
 8015836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015838:	b10b      	cbz	r3, 801583e <__sflush_r+0x46>
 801583a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801583c:	1ac0      	subs	r0, r0, r3
 801583e:	2300      	movs	r3, #0
 8015840:	4602      	mov	r2, r0
 8015842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015844:	6a21      	ldr	r1, [r4, #32]
 8015846:	4628      	mov	r0, r5
 8015848:	47b0      	blx	r6
 801584a:	1c43      	adds	r3, r0, #1
 801584c:	89a3      	ldrh	r3, [r4, #12]
 801584e:	d106      	bne.n	801585e <__sflush_r+0x66>
 8015850:	6829      	ldr	r1, [r5, #0]
 8015852:	291d      	cmp	r1, #29
 8015854:	d82c      	bhi.n	80158b0 <__sflush_r+0xb8>
 8015856:	4a2a      	ldr	r2, [pc, #168]	; (8015900 <__sflush_r+0x108>)
 8015858:	40ca      	lsrs	r2, r1
 801585a:	07d6      	lsls	r6, r2, #31
 801585c:	d528      	bpl.n	80158b0 <__sflush_r+0xb8>
 801585e:	2200      	movs	r2, #0
 8015860:	6062      	str	r2, [r4, #4]
 8015862:	04d9      	lsls	r1, r3, #19
 8015864:	6922      	ldr	r2, [r4, #16]
 8015866:	6022      	str	r2, [r4, #0]
 8015868:	d504      	bpl.n	8015874 <__sflush_r+0x7c>
 801586a:	1c42      	adds	r2, r0, #1
 801586c:	d101      	bne.n	8015872 <__sflush_r+0x7a>
 801586e:	682b      	ldr	r3, [r5, #0]
 8015870:	b903      	cbnz	r3, 8015874 <__sflush_r+0x7c>
 8015872:	6560      	str	r0, [r4, #84]	; 0x54
 8015874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015876:	602f      	str	r7, [r5, #0]
 8015878:	2900      	cmp	r1, #0
 801587a:	d0ca      	beq.n	8015812 <__sflush_r+0x1a>
 801587c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015880:	4299      	cmp	r1, r3
 8015882:	d002      	beq.n	801588a <__sflush_r+0x92>
 8015884:	4628      	mov	r0, r5
 8015886:	f7ff fd91 	bl	80153ac <_free_r>
 801588a:	2000      	movs	r0, #0
 801588c:	6360      	str	r0, [r4, #52]	; 0x34
 801588e:	e7c1      	b.n	8015814 <__sflush_r+0x1c>
 8015890:	6a21      	ldr	r1, [r4, #32]
 8015892:	2301      	movs	r3, #1
 8015894:	4628      	mov	r0, r5
 8015896:	47b0      	blx	r6
 8015898:	1c41      	adds	r1, r0, #1
 801589a:	d1c7      	bne.n	801582c <__sflush_r+0x34>
 801589c:	682b      	ldr	r3, [r5, #0]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d0c4      	beq.n	801582c <__sflush_r+0x34>
 80158a2:	2b1d      	cmp	r3, #29
 80158a4:	d001      	beq.n	80158aa <__sflush_r+0xb2>
 80158a6:	2b16      	cmp	r3, #22
 80158a8:	d101      	bne.n	80158ae <__sflush_r+0xb6>
 80158aa:	602f      	str	r7, [r5, #0]
 80158ac:	e7b1      	b.n	8015812 <__sflush_r+0x1a>
 80158ae:	89a3      	ldrh	r3, [r4, #12]
 80158b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158b4:	81a3      	strh	r3, [r4, #12]
 80158b6:	e7ad      	b.n	8015814 <__sflush_r+0x1c>
 80158b8:	690f      	ldr	r7, [r1, #16]
 80158ba:	2f00      	cmp	r7, #0
 80158bc:	d0a9      	beq.n	8015812 <__sflush_r+0x1a>
 80158be:	0793      	lsls	r3, r2, #30
 80158c0:	680e      	ldr	r6, [r1, #0]
 80158c2:	bf08      	it	eq
 80158c4:	694b      	ldreq	r3, [r1, #20]
 80158c6:	600f      	str	r7, [r1, #0]
 80158c8:	bf18      	it	ne
 80158ca:	2300      	movne	r3, #0
 80158cc:	eba6 0807 	sub.w	r8, r6, r7
 80158d0:	608b      	str	r3, [r1, #8]
 80158d2:	f1b8 0f00 	cmp.w	r8, #0
 80158d6:	dd9c      	ble.n	8015812 <__sflush_r+0x1a>
 80158d8:	6a21      	ldr	r1, [r4, #32]
 80158da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80158dc:	4643      	mov	r3, r8
 80158de:	463a      	mov	r2, r7
 80158e0:	4628      	mov	r0, r5
 80158e2:	47b0      	blx	r6
 80158e4:	2800      	cmp	r0, #0
 80158e6:	dc06      	bgt.n	80158f6 <__sflush_r+0xfe>
 80158e8:	89a3      	ldrh	r3, [r4, #12]
 80158ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158ee:	81a3      	strh	r3, [r4, #12]
 80158f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80158f4:	e78e      	b.n	8015814 <__sflush_r+0x1c>
 80158f6:	4407      	add	r7, r0
 80158f8:	eba8 0800 	sub.w	r8, r8, r0
 80158fc:	e7e9      	b.n	80158d2 <__sflush_r+0xda>
 80158fe:	bf00      	nop
 8015900:	20400001 	.word	0x20400001

08015904 <_fflush_r>:
 8015904:	b538      	push	{r3, r4, r5, lr}
 8015906:	690b      	ldr	r3, [r1, #16]
 8015908:	4605      	mov	r5, r0
 801590a:	460c      	mov	r4, r1
 801590c:	b913      	cbnz	r3, 8015914 <_fflush_r+0x10>
 801590e:	2500      	movs	r5, #0
 8015910:	4628      	mov	r0, r5
 8015912:	bd38      	pop	{r3, r4, r5, pc}
 8015914:	b118      	cbz	r0, 801591e <_fflush_r+0x1a>
 8015916:	6983      	ldr	r3, [r0, #24]
 8015918:	b90b      	cbnz	r3, 801591e <_fflush_r+0x1a>
 801591a:	f000 f887 	bl	8015a2c <__sinit>
 801591e:	4b14      	ldr	r3, [pc, #80]	; (8015970 <_fflush_r+0x6c>)
 8015920:	429c      	cmp	r4, r3
 8015922:	d11b      	bne.n	801595c <_fflush_r+0x58>
 8015924:	686c      	ldr	r4, [r5, #4]
 8015926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d0ef      	beq.n	801590e <_fflush_r+0xa>
 801592e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015930:	07d0      	lsls	r0, r2, #31
 8015932:	d404      	bmi.n	801593e <_fflush_r+0x3a>
 8015934:	0599      	lsls	r1, r3, #22
 8015936:	d402      	bmi.n	801593e <_fflush_r+0x3a>
 8015938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801593a:	f000 f915 	bl	8015b68 <__retarget_lock_acquire_recursive>
 801593e:	4628      	mov	r0, r5
 8015940:	4621      	mov	r1, r4
 8015942:	f7ff ff59 	bl	80157f8 <__sflush_r>
 8015946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015948:	07da      	lsls	r2, r3, #31
 801594a:	4605      	mov	r5, r0
 801594c:	d4e0      	bmi.n	8015910 <_fflush_r+0xc>
 801594e:	89a3      	ldrh	r3, [r4, #12]
 8015950:	059b      	lsls	r3, r3, #22
 8015952:	d4dd      	bmi.n	8015910 <_fflush_r+0xc>
 8015954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015956:	f000 f908 	bl	8015b6a <__retarget_lock_release_recursive>
 801595a:	e7d9      	b.n	8015910 <_fflush_r+0xc>
 801595c:	4b05      	ldr	r3, [pc, #20]	; (8015974 <_fflush_r+0x70>)
 801595e:	429c      	cmp	r4, r3
 8015960:	d101      	bne.n	8015966 <_fflush_r+0x62>
 8015962:	68ac      	ldr	r4, [r5, #8]
 8015964:	e7df      	b.n	8015926 <_fflush_r+0x22>
 8015966:	4b04      	ldr	r3, [pc, #16]	; (8015978 <_fflush_r+0x74>)
 8015968:	429c      	cmp	r4, r3
 801596a:	bf08      	it	eq
 801596c:	68ec      	ldreq	r4, [r5, #12]
 801596e:	e7da      	b.n	8015926 <_fflush_r+0x22>
 8015970:	08016214 	.word	0x08016214
 8015974:	08016234 	.word	0x08016234
 8015978:	080161f4 	.word	0x080161f4

0801597c <std>:
 801597c:	2300      	movs	r3, #0
 801597e:	b510      	push	{r4, lr}
 8015980:	4604      	mov	r4, r0
 8015982:	e9c0 3300 	strd	r3, r3, [r0]
 8015986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801598a:	6083      	str	r3, [r0, #8]
 801598c:	8181      	strh	r1, [r0, #12]
 801598e:	6643      	str	r3, [r0, #100]	; 0x64
 8015990:	81c2      	strh	r2, [r0, #14]
 8015992:	6183      	str	r3, [r0, #24]
 8015994:	4619      	mov	r1, r3
 8015996:	2208      	movs	r2, #8
 8015998:	305c      	adds	r0, #92	; 0x5c
 801599a:	f7ff fcff 	bl	801539c <memset>
 801599e:	4b05      	ldr	r3, [pc, #20]	; (80159b4 <std+0x38>)
 80159a0:	6263      	str	r3, [r4, #36]	; 0x24
 80159a2:	4b05      	ldr	r3, [pc, #20]	; (80159b8 <std+0x3c>)
 80159a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80159a6:	4b05      	ldr	r3, [pc, #20]	; (80159bc <std+0x40>)
 80159a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80159aa:	4b05      	ldr	r3, [pc, #20]	; (80159c0 <std+0x44>)
 80159ac:	6224      	str	r4, [r4, #32]
 80159ae:	6323      	str	r3, [r4, #48]	; 0x30
 80159b0:	bd10      	pop	{r4, pc}
 80159b2:	bf00      	nop
 80159b4:	08015c51 	.word	0x08015c51
 80159b8:	08015c73 	.word	0x08015c73
 80159bc:	08015cab 	.word	0x08015cab
 80159c0:	08015ccf 	.word	0x08015ccf

080159c4 <_cleanup_r>:
 80159c4:	4901      	ldr	r1, [pc, #4]	; (80159cc <_cleanup_r+0x8>)
 80159c6:	f000 b8af 	b.w	8015b28 <_fwalk_reent>
 80159ca:	bf00      	nop
 80159cc:	08015905 	.word	0x08015905

080159d0 <__sfmoreglue>:
 80159d0:	b570      	push	{r4, r5, r6, lr}
 80159d2:	2268      	movs	r2, #104	; 0x68
 80159d4:	1e4d      	subs	r5, r1, #1
 80159d6:	4355      	muls	r5, r2
 80159d8:	460e      	mov	r6, r1
 80159da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80159de:	f7ff fd51 	bl	8015484 <_malloc_r>
 80159e2:	4604      	mov	r4, r0
 80159e4:	b140      	cbz	r0, 80159f8 <__sfmoreglue+0x28>
 80159e6:	2100      	movs	r1, #0
 80159e8:	e9c0 1600 	strd	r1, r6, [r0]
 80159ec:	300c      	adds	r0, #12
 80159ee:	60a0      	str	r0, [r4, #8]
 80159f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80159f4:	f7ff fcd2 	bl	801539c <memset>
 80159f8:	4620      	mov	r0, r4
 80159fa:	bd70      	pop	{r4, r5, r6, pc}

080159fc <__sfp_lock_acquire>:
 80159fc:	4801      	ldr	r0, [pc, #4]	; (8015a04 <__sfp_lock_acquire+0x8>)
 80159fe:	f000 b8b3 	b.w	8015b68 <__retarget_lock_acquire_recursive>
 8015a02:	bf00      	nop
 8015a04:	24005609 	.word	0x24005609

08015a08 <__sfp_lock_release>:
 8015a08:	4801      	ldr	r0, [pc, #4]	; (8015a10 <__sfp_lock_release+0x8>)
 8015a0a:	f000 b8ae 	b.w	8015b6a <__retarget_lock_release_recursive>
 8015a0e:	bf00      	nop
 8015a10:	24005609 	.word	0x24005609

08015a14 <__sinit_lock_acquire>:
 8015a14:	4801      	ldr	r0, [pc, #4]	; (8015a1c <__sinit_lock_acquire+0x8>)
 8015a16:	f000 b8a7 	b.w	8015b68 <__retarget_lock_acquire_recursive>
 8015a1a:	bf00      	nop
 8015a1c:	2400560a 	.word	0x2400560a

08015a20 <__sinit_lock_release>:
 8015a20:	4801      	ldr	r0, [pc, #4]	; (8015a28 <__sinit_lock_release+0x8>)
 8015a22:	f000 b8a2 	b.w	8015b6a <__retarget_lock_release_recursive>
 8015a26:	bf00      	nop
 8015a28:	2400560a 	.word	0x2400560a

08015a2c <__sinit>:
 8015a2c:	b510      	push	{r4, lr}
 8015a2e:	4604      	mov	r4, r0
 8015a30:	f7ff fff0 	bl	8015a14 <__sinit_lock_acquire>
 8015a34:	69a3      	ldr	r3, [r4, #24]
 8015a36:	b11b      	cbz	r3, 8015a40 <__sinit+0x14>
 8015a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a3c:	f7ff bff0 	b.w	8015a20 <__sinit_lock_release>
 8015a40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015a44:	6523      	str	r3, [r4, #80]	; 0x50
 8015a46:	4b13      	ldr	r3, [pc, #76]	; (8015a94 <__sinit+0x68>)
 8015a48:	4a13      	ldr	r2, [pc, #76]	; (8015a98 <__sinit+0x6c>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8015a4e:	42a3      	cmp	r3, r4
 8015a50:	bf04      	itt	eq
 8015a52:	2301      	moveq	r3, #1
 8015a54:	61a3      	streq	r3, [r4, #24]
 8015a56:	4620      	mov	r0, r4
 8015a58:	f000 f820 	bl	8015a9c <__sfp>
 8015a5c:	6060      	str	r0, [r4, #4]
 8015a5e:	4620      	mov	r0, r4
 8015a60:	f000 f81c 	bl	8015a9c <__sfp>
 8015a64:	60a0      	str	r0, [r4, #8]
 8015a66:	4620      	mov	r0, r4
 8015a68:	f000 f818 	bl	8015a9c <__sfp>
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	60e0      	str	r0, [r4, #12]
 8015a70:	2104      	movs	r1, #4
 8015a72:	6860      	ldr	r0, [r4, #4]
 8015a74:	f7ff ff82 	bl	801597c <std>
 8015a78:	68a0      	ldr	r0, [r4, #8]
 8015a7a:	2201      	movs	r2, #1
 8015a7c:	2109      	movs	r1, #9
 8015a7e:	f7ff ff7d 	bl	801597c <std>
 8015a82:	68e0      	ldr	r0, [r4, #12]
 8015a84:	2202      	movs	r2, #2
 8015a86:	2112      	movs	r1, #18
 8015a88:	f7ff ff78 	bl	801597c <std>
 8015a8c:	2301      	movs	r3, #1
 8015a8e:	61a3      	str	r3, [r4, #24]
 8015a90:	e7d2      	b.n	8015a38 <__sinit+0xc>
 8015a92:	bf00      	nop
 8015a94:	080161f0 	.word	0x080161f0
 8015a98:	080159c5 	.word	0x080159c5

08015a9c <__sfp>:
 8015a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a9e:	4607      	mov	r7, r0
 8015aa0:	f7ff ffac 	bl	80159fc <__sfp_lock_acquire>
 8015aa4:	4b1e      	ldr	r3, [pc, #120]	; (8015b20 <__sfp+0x84>)
 8015aa6:	681e      	ldr	r6, [r3, #0]
 8015aa8:	69b3      	ldr	r3, [r6, #24]
 8015aaa:	b913      	cbnz	r3, 8015ab2 <__sfp+0x16>
 8015aac:	4630      	mov	r0, r6
 8015aae:	f7ff ffbd 	bl	8015a2c <__sinit>
 8015ab2:	3648      	adds	r6, #72	; 0x48
 8015ab4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015ab8:	3b01      	subs	r3, #1
 8015aba:	d503      	bpl.n	8015ac4 <__sfp+0x28>
 8015abc:	6833      	ldr	r3, [r6, #0]
 8015abe:	b30b      	cbz	r3, 8015b04 <__sfp+0x68>
 8015ac0:	6836      	ldr	r6, [r6, #0]
 8015ac2:	e7f7      	b.n	8015ab4 <__sfp+0x18>
 8015ac4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015ac8:	b9d5      	cbnz	r5, 8015b00 <__sfp+0x64>
 8015aca:	4b16      	ldr	r3, [pc, #88]	; (8015b24 <__sfp+0x88>)
 8015acc:	60e3      	str	r3, [r4, #12]
 8015ace:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015ad2:	6665      	str	r5, [r4, #100]	; 0x64
 8015ad4:	f000 f847 	bl	8015b66 <__retarget_lock_init_recursive>
 8015ad8:	f7ff ff96 	bl	8015a08 <__sfp_lock_release>
 8015adc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015ae0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015ae4:	6025      	str	r5, [r4, #0]
 8015ae6:	61a5      	str	r5, [r4, #24]
 8015ae8:	2208      	movs	r2, #8
 8015aea:	4629      	mov	r1, r5
 8015aec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015af0:	f7ff fc54 	bl	801539c <memset>
 8015af4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015af8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015afc:	4620      	mov	r0, r4
 8015afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b00:	3468      	adds	r4, #104	; 0x68
 8015b02:	e7d9      	b.n	8015ab8 <__sfp+0x1c>
 8015b04:	2104      	movs	r1, #4
 8015b06:	4638      	mov	r0, r7
 8015b08:	f7ff ff62 	bl	80159d0 <__sfmoreglue>
 8015b0c:	4604      	mov	r4, r0
 8015b0e:	6030      	str	r0, [r6, #0]
 8015b10:	2800      	cmp	r0, #0
 8015b12:	d1d5      	bne.n	8015ac0 <__sfp+0x24>
 8015b14:	f7ff ff78 	bl	8015a08 <__sfp_lock_release>
 8015b18:	230c      	movs	r3, #12
 8015b1a:	603b      	str	r3, [r7, #0]
 8015b1c:	e7ee      	b.n	8015afc <__sfp+0x60>
 8015b1e:	bf00      	nop
 8015b20:	080161f0 	.word	0x080161f0
 8015b24:	ffff0001 	.word	0xffff0001

08015b28 <_fwalk_reent>:
 8015b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b2c:	4606      	mov	r6, r0
 8015b2e:	4688      	mov	r8, r1
 8015b30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015b34:	2700      	movs	r7, #0
 8015b36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015b3a:	f1b9 0901 	subs.w	r9, r9, #1
 8015b3e:	d505      	bpl.n	8015b4c <_fwalk_reent+0x24>
 8015b40:	6824      	ldr	r4, [r4, #0]
 8015b42:	2c00      	cmp	r4, #0
 8015b44:	d1f7      	bne.n	8015b36 <_fwalk_reent+0xe>
 8015b46:	4638      	mov	r0, r7
 8015b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b4c:	89ab      	ldrh	r3, [r5, #12]
 8015b4e:	2b01      	cmp	r3, #1
 8015b50:	d907      	bls.n	8015b62 <_fwalk_reent+0x3a>
 8015b52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015b56:	3301      	adds	r3, #1
 8015b58:	d003      	beq.n	8015b62 <_fwalk_reent+0x3a>
 8015b5a:	4629      	mov	r1, r5
 8015b5c:	4630      	mov	r0, r6
 8015b5e:	47c0      	blx	r8
 8015b60:	4307      	orrs	r7, r0
 8015b62:	3568      	adds	r5, #104	; 0x68
 8015b64:	e7e9      	b.n	8015b3a <_fwalk_reent+0x12>

08015b66 <__retarget_lock_init_recursive>:
 8015b66:	4770      	bx	lr

08015b68 <__retarget_lock_acquire_recursive>:
 8015b68:	4770      	bx	lr

08015b6a <__retarget_lock_release_recursive>:
 8015b6a:	4770      	bx	lr

08015b6c <__swhatbuf_r>:
 8015b6c:	b570      	push	{r4, r5, r6, lr}
 8015b6e:	460e      	mov	r6, r1
 8015b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b74:	2900      	cmp	r1, #0
 8015b76:	b096      	sub	sp, #88	; 0x58
 8015b78:	4614      	mov	r4, r2
 8015b7a:	461d      	mov	r5, r3
 8015b7c:	da08      	bge.n	8015b90 <__swhatbuf_r+0x24>
 8015b7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015b82:	2200      	movs	r2, #0
 8015b84:	602a      	str	r2, [r5, #0]
 8015b86:	061a      	lsls	r2, r3, #24
 8015b88:	d410      	bmi.n	8015bac <__swhatbuf_r+0x40>
 8015b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b8e:	e00e      	b.n	8015bae <__swhatbuf_r+0x42>
 8015b90:	466a      	mov	r2, sp
 8015b92:	f000 f8c3 	bl	8015d1c <_fstat_r>
 8015b96:	2800      	cmp	r0, #0
 8015b98:	dbf1      	blt.n	8015b7e <__swhatbuf_r+0x12>
 8015b9a:	9a01      	ldr	r2, [sp, #4]
 8015b9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015ba0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015ba4:	425a      	negs	r2, r3
 8015ba6:	415a      	adcs	r2, r3
 8015ba8:	602a      	str	r2, [r5, #0]
 8015baa:	e7ee      	b.n	8015b8a <__swhatbuf_r+0x1e>
 8015bac:	2340      	movs	r3, #64	; 0x40
 8015bae:	2000      	movs	r0, #0
 8015bb0:	6023      	str	r3, [r4, #0]
 8015bb2:	b016      	add	sp, #88	; 0x58
 8015bb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08015bb8 <__smakebuf_r>:
 8015bb8:	898b      	ldrh	r3, [r1, #12]
 8015bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015bbc:	079d      	lsls	r5, r3, #30
 8015bbe:	4606      	mov	r6, r0
 8015bc0:	460c      	mov	r4, r1
 8015bc2:	d507      	bpl.n	8015bd4 <__smakebuf_r+0x1c>
 8015bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015bc8:	6023      	str	r3, [r4, #0]
 8015bca:	6123      	str	r3, [r4, #16]
 8015bcc:	2301      	movs	r3, #1
 8015bce:	6163      	str	r3, [r4, #20]
 8015bd0:	b002      	add	sp, #8
 8015bd2:	bd70      	pop	{r4, r5, r6, pc}
 8015bd4:	ab01      	add	r3, sp, #4
 8015bd6:	466a      	mov	r2, sp
 8015bd8:	f7ff ffc8 	bl	8015b6c <__swhatbuf_r>
 8015bdc:	9900      	ldr	r1, [sp, #0]
 8015bde:	4605      	mov	r5, r0
 8015be0:	4630      	mov	r0, r6
 8015be2:	f7ff fc4f 	bl	8015484 <_malloc_r>
 8015be6:	b948      	cbnz	r0, 8015bfc <__smakebuf_r+0x44>
 8015be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bec:	059a      	lsls	r2, r3, #22
 8015bee:	d4ef      	bmi.n	8015bd0 <__smakebuf_r+0x18>
 8015bf0:	f023 0303 	bic.w	r3, r3, #3
 8015bf4:	f043 0302 	orr.w	r3, r3, #2
 8015bf8:	81a3      	strh	r3, [r4, #12]
 8015bfa:	e7e3      	b.n	8015bc4 <__smakebuf_r+0xc>
 8015bfc:	4b0d      	ldr	r3, [pc, #52]	; (8015c34 <__smakebuf_r+0x7c>)
 8015bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8015c00:	89a3      	ldrh	r3, [r4, #12]
 8015c02:	6020      	str	r0, [r4, #0]
 8015c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c08:	81a3      	strh	r3, [r4, #12]
 8015c0a:	9b00      	ldr	r3, [sp, #0]
 8015c0c:	6163      	str	r3, [r4, #20]
 8015c0e:	9b01      	ldr	r3, [sp, #4]
 8015c10:	6120      	str	r0, [r4, #16]
 8015c12:	b15b      	cbz	r3, 8015c2c <__smakebuf_r+0x74>
 8015c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c18:	4630      	mov	r0, r6
 8015c1a:	f000 f891 	bl	8015d40 <_isatty_r>
 8015c1e:	b128      	cbz	r0, 8015c2c <__smakebuf_r+0x74>
 8015c20:	89a3      	ldrh	r3, [r4, #12]
 8015c22:	f023 0303 	bic.w	r3, r3, #3
 8015c26:	f043 0301 	orr.w	r3, r3, #1
 8015c2a:	81a3      	strh	r3, [r4, #12]
 8015c2c:	89a0      	ldrh	r0, [r4, #12]
 8015c2e:	4305      	orrs	r5, r0
 8015c30:	81a5      	strh	r5, [r4, #12]
 8015c32:	e7cd      	b.n	8015bd0 <__smakebuf_r+0x18>
 8015c34:	080159c5 	.word	0x080159c5

08015c38 <__malloc_lock>:
 8015c38:	4801      	ldr	r0, [pc, #4]	; (8015c40 <__malloc_lock+0x8>)
 8015c3a:	f7ff bf95 	b.w	8015b68 <__retarget_lock_acquire_recursive>
 8015c3e:	bf00      	nop
 8015c40:	24005608 	.word	0x24005608

08015c44 <__malloc_unlock>:
 8015c44:	4801      	ldr	r0, [pc, #4]	; (8015c4c <__malloc_unlock+0x8>)
 8015c46:	f7ff bf90 	b.w	8015b6a <__retarget_lock_release_recursive>
 8015c4a:	bf00      	nop
 8015c4c:	24005608 	.word	0x24005608

08015c50 <__sread>:
 8015c50:	b510      	push	{r4, lr}
 8015c52:	460c      	mov	r4, r1
 8015c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c58:	f000 f894 	bl	8015d84 <_read_r>
 8015c5c:	2800      	cmp	r0, #0
 8015c5e:	bfab      	itete	ge
 8015c60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015c62:	89a3      	ldrhlt	r3, [r4, #12]
 8015c64:	181b      	addge	r3, r3, r0
 8015c66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015c6a:	bfac      	ite	ge
 8015c6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8015c6e:	81a3      	strhlt	r3, [r4, #12]
 8015c70:	bd10      	pop	{r4, pc}

08015c72 <__swrite>:
 8015c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c76:	461f      	mov	r7, r3
 8015c78:	898b      	ldrh	r3, [r1, #12]
 8015c7a:	05db      	lsls	r3, r3, #23
 8015c7c:	4605      	mov	r5, r0
 8015c7e:	460c      	mov	r4, r1
 8015c80:	4616      	mov	r6, r2
 8015c82:	d505      	bpl.n	8015c90 <__swrite+0x1e>
 8015c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c88:	2302      	movs	r3, #2
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	f000 f868 	bl	8015d60 <_lseek_r>
 8015c90:	89a3      	ldrh	r3, [r4, #12]
 8015c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c9a:	81a3      	strh	r3, [r4, #12]
 8015c9c:	4632      	mov	r2, r6
 8015c9e:	463b      	mov	r3, r7
 8015ca0:	4628      	mov	r0, r5
 8015ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ca6:	f000 b817 	b.w	8015cd8 <_write_r>

08015caa <__sseek>:
 8015caa:	b510      	push	{r4, lr}
 8015cac:	460c      	mov	r4, r1
 8015cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cb2:	f000 f855 	bl	8015d60 <_lseek_r>
 8015cb6:	1c43      	adds	r3, r0, #1
 8015cb8:	89a3      	ldrh	r3, [r4, #12]
 8015cba:	bf15      	itete	ne
 8015cbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8015cbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015cc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015cc6:	81a3      	strheq	r3, [r4, #12]
 8015cc8:	bf18      	it	ne
 8015cca:	81a3      	strhne	r3, [r4, #12]
 8015ccc:	bd10      	pop	{r4, pc}

08015cce <__sclose>:
 8015cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cd2:	f000 b813 	b.w	8015cfc <_close_r>
	...

08015cd8 <_write_r>:
 8015cd8:	b538      	push	{r3, r4, r5, lr}
 8015cda:	4d07      	ldr	r5, [pc, #28]	; (8015cf8 <_write_r+0x20>)
 8015cdc:	4604      	mov	r4, r0
 8015cde:	4608      	mov	r0, r1
 8015ce0:	4611      	mov	r1, r2
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	602a      	str	r2, [r5, #0]
 8015ce6:	461a      	mov	r2, r3
 8015ce8:	f7ec fea5 	bl	8002a36 <_write>
 8015cec:	1c43      	adds	r3, r0, #1
 8015cee:	d102      	bne.n	8015cf6 <_write_r+0x1e>
 8015cf0:	682b      	ldr	r3, [r5, #0]
 8015cf2:	b103      	cbz	r3, 8015cf6 <_write_r+0x1e>
 8015cf4:	6023      	str	r3, [r4, #0]
 8015cf6:	bd38      	pop	{r3, r4, r5, pc}
 8015cf8:	2400560c 	.word	0x2400560c

08015cfc <_close_r>:
 8015cfc:	b538      	push	{r3, r4, r5, lr}
 8015cfe:	4d06      	ldr	r5, [pc, #24]	; (8015d18 <_close_r+0x1c>)
 8015d00:	2300      	movs	r3, #0
 8015d02:	4604      	mov	r4, r0
 8015d04:	4608      	mov	r0, r1
 8015d06:	602b      	str	r3, [r5, #0]
 8015d08:	f7ec feb1 	bl	8002a6e <_close>
 8015d0c:	1c43      	adds	r3, r0, #1
 8015d0e:	d102      	bne.n	8015d16 <_close_r+0x1a>
 8015d10:	682b      	ldr	r3, [r5, #0]
 8015d12:	b103      	cbz	r3, 8015d16 <_close_r+0x1a>
 8015d14:	6023      	str	r3, [r4, #0]
 8015d16:	bd38      	pop	{r3, r4, r5, pc}
 8015d18:	2400560c 	.word	0x2400560c

08015d1c <_fstat_r>:
 8015d1c:	b538      	push	{r3, r4, r5, lr}
 8015d1e:	4d07      	ldr	r5, [pc, #28]	; (8015d3c <_fstat_r+0x20>)
 8015d20:	2300      	movs	r3, #0
 8015d22:	4604      	mov	r4, r0
 8015d24:	4608      	mov	r0, r1
 8015d26:	4611      	mov	r1, r2
 8015d28:	602b      	str	r3, [r5, #0]
 8015d2a:	f7ec feac 	bl	8002a86 <_fstat>
 8015d2e:	1c43      	adds	r3, r0, #1
 8015d30:	d102      	bne.n	8015d38 <_fstat_r+0x1c>
 8015d32:	682b      	ldr	r3, [r5, #0]
 8015d34:	b103      	cbz	r3, 8015d38 <_fstat_r+0x1c>
 8015d36:	6023      	str	r3, [r4, #0]
 8015d38:	bd38      	pop	{r3, r4, r5, pc}
 8015d3a:	bf00      	nop
 8015d3c:	2400560c 	.word	0x2400560c

08015d40 <_isatty_r>:
 8015d40:	b538      	push	{r3, r4, r5, lr}
 8015d42:	4d06      	ldr	r5, [pc, #24]	; (8015d5c <_isatty_r+0x1c>)
 8015d44:	2300      	movs	r3, #0
 8015d46:	4604      	mov	r4, r0
 8015d48:	4608      	mov	r0, r1
 8015d4a:	602b      	str	r3, [r5, #0]
 8015d4c:	f7ec feab 	bl	8002aa6 <_isatty>
 8015d50:	1c43      	adds	r3, r0, #1
 8015d52:	d102      	bne.n	8015d5a <_isatty_r+0x1a>
 8015d54:	682b      	ldr	r3, [r5, #0]
 8015d56:	b103      	cbz	r3, 8015d5a <_isatty_r+0x1a>
 8015d58:	6023      	str	r3, [r4, #0]
 8015d5a:	bd38      	pop	{r3, r4, r5, pc}
 8015d5c:	2400560c 	.word	0x2400560c

08015d60 <_lseek_r>:
 8015d60:	b538      	push	{r3, r4, r5, lr}
 8015d62:	4d07      	ldr	r5, [pc, #28]	; (8015d80 <_lseek_r+0x20>)
 8015d64:	4604      	mov	r4, r0
 8015d66:	4608      	mov	r0, r1
 8015d68:	4611      	mov	r1, r2
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	602a      	str	r2, [r5, #0]
 8015d6e:	461a      	mov	r2, r3
 8015d70:	f7ec fea4 	bl	8002abc <_lseek>
 8015d74:	1c43      	adds	r3, r0, #1
 8015d76:	d102      	bne.n	8015d7e <_lseek_r+0x1e>
 8015d78:	682b      	ldr	r3, [r5, #0]
 8015d7a:	b103      	cbz	r3, 8015d7e <_lseek_r+0x1e>
 8015d7c:	6023      	str	r3, [r4, #0]
 8015d7e:	bd38      	pop	{r3, r4, r5, pc}
 8015d80:	2400560c 	.word	0x2400560c

08015d84 <_read_r>:
 8015d84:	b538      	push	{r3, r4, r5, lr}
 8015d86:	4d07      	ldr	r5, [pc, #28]	; (8015da4 <_read_r+0x20>)
 8015d88:	4604      	mov	r4, r0
 8015d8a:	4608      	mov	r0, r1
 8015d8c:	4611      	mov	r1, r2
 8015d8e:	2200      	movs	r2, #0
 8015d90:	602a      	str	r2, [r5, #0]
 8015d92:	461a      	mov	r2, r3
 8015d94:	f7ec fe32 	bl	80029fc <_read>
 8015d98:	1c43      	adds	r3, r0, #1
 8015d9a:	d102      	bne.n	8015da2 <_read_r+0x1e>
 8015d9c:	682b      	ldr	r3, [r5, #0]
 8015d9e:	b103      	cbz	r3, 8015da2 <_read_r+0x1e>
 8015da0:	6023      	str	r3, [r4, #0]
 8015da2:	bd38      	pop	{r3, r4, r5, pc}
 8015da4:	2400560c 	.word	0x2400560c

08015da8 <_init>:
 8015da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015daa:	bf00      	nop
 8015dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015dae:	bc08      	pop	{r3}
 8015db0:	469e      	mov	lr, r3
 8015db2:	4770      	bx	lr

08015db4 <_fini>:
 8015db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015db6:	bf00      	nop
 8015db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015dba:	bc08      	pop	{r3}
 8015dbc:	469e      	mov	lr, r3
 8015dbe:	4770      	bx	lr
